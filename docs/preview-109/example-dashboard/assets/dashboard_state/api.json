{
  "collected_tests": {
    "collection_status": [
      {
        "nodeid": "tests/test_branches.py::test_branch_make",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_branches.py::test_branch_cache",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_corpus.py::test_corpus_covering_nodes",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_linearize.py::test_single_worker",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_linearize.py::test_non_overlapping_reports",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_provider.py::test_drawing_prefix_exactly",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_provider.py::test_draw_past_prefix",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_provider.py::test_misaligned_type",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_provider.py::test_misaligned_kwargs",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_visual.py::test_visual_tyche_grab_bag",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_visual.py::test_visual_tyche_almost_always_invalid",
        "status": "collected"
      }
    ]
  },
  "patches": {
    "all": "From HEAD Mon Sep 17 00:00:00 2001\nFrom: Hypothesis 6.131.21 <no-reply@hypothesis.works>\nDate: Wed, 21 May 2025 21:22:20\nSubject: [PATCH] Hypothesis: add explicit examples\n\n---\n--- ./tests/test_linearize.py\n+++ ./tests/test_linearize.py\n@@ -148,6 +148,46 @@\n \n \n @given(reports(count_workers=1))\n+@example(\n+    reports=[\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=0.0,\n+            timestamp=0.0,\n+            worker_uuid=UUID(\"e3e70682-c209-4cac-a29f-6fbed82c07cd\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 0,\n+                Status.INTERESTING: 0,\n+            },\n+            branches=0,\n+            since_new_branch=0,\n+            phase=Phase.REPLAY,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    reports=[\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=0.0,\n+            timestamp=0.0,\n+            worker_uuid=UUID(\"e3e70682-c209-4cac-a29f-6fbed82c07cd\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 0,\n+                Status.INTERESTING: 0,\n+            },\n+            branches=0,\n+            since_new_branch=0,\n+            phase=Phase.GENERATE,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n def test_single_worker(reports):\n     assert len({r.worker_uuid for r in reports}) <= 1\n     # linearizing reports from a single worker just puts them in a sorted order,\n@@ -160,6 +200,27 @@\n \n \n @given(reports(overlap=False))\n+@example(\n+    reports=[\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=349852.72512494575,\n+            timestamp=1.219458296214639e308,\n+            worker_uuid=UUID(\"bbeb02a7-61e7-4c1e-a8ff-882971dd7a2e\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 14221,\n+                Status.INTERESTING: 0,\n+            },\n+            branches=85,\n+            since_new_branch=2666,\n+            phase=Phase.REPLAY,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(reports=[]).via(\"HypoFuzz covering example\")\n def test_non_overlapping_reports(reports):\n     test = _test_for_reports(reports)\n     test._check_invariants()\n--- ./tests/test_provider.py\n+++ ./tests/test_provider.py\n@@ -7,6 +7,321 @@\n \n \n @given(st.lists(nodes()))\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2831,\n+            constraints={\n+                \"min_value\": -6,\n+                \"max_value\": 10535,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-15869,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud854\udc64\ud854\udc39\ud853\udfc7\ud853\udfde\\U0007e424\\U0006326e\ud854\udc3c\\U000370f8\ud853\udf79\ud853\udfd5\ud854\udc6a\ud853\udfe6\ud853\udfba\ud853\udf85\\U000732d9\ud853\udfc3\ud854\udc1b\ud854\udc41\ud854\udc5f\ud861\udcd2\ud854\udc50\ud854\udc65\ud853\udfe5\ud854\udc71\ud854\udc57\ud853\udf7c\ud854\udc3f\ud854\udc27\\U00051ae9\ud854\udc06\ud853\udf75\\U0006e9d5\ud854\udc4f\ud853\udfaf\ud853\udf81\ud853\udfbc\ud853\udfc4\ud854\udc6c\ud854\udc26\ud854\udc5e\ud854\udc6f\ud853\udf7f\ud854\udc43\ud854\udc30\ud853\udfaa\ud854\udc2c\ud853\udfb4\ud853\udf81\ud853\udff1\ud854\udc14\\U0004487e\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([151413, 519490])),\n+                \"min_size\": 25,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=11831,\n+            constraints={\n+                \"min_value\": -36,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.402823466e38,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 474167647850097.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 1},\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.4072812832101417e308,\n+            constraints={\n+                \"min_value\": 2.149890210988563e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"C{U\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-9753,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 2,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=17996,\n+            constraints={\n+                \"min_value\": 2,\n+                \"max_value\": 29590,\n+                \"shrink_towards\": 0,\n+                \"weights\": {9168: 0.05},\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-24314,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -44,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.307139659154326e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.4921316493986662e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud869\ude89\ud887\uddde\ud869\udeab\\U00034621\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([173609, 236006, 730368]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.873273735354358e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.14949021694758804},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0009bd87\\U0009be10\\U0009bd9b\\U000a5d1d\\U0009be05\\U0009bd81\\U000cd2c6\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([638292, 846394])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7_747_876_218_385_873_990,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -23,\n+                \"shrink_towards\": 2_000_922_496,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.2935511453404842e-234},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00087826\\U00068815\\U00060870\\U000910a5\\U00060901\\U00060834\\U00060844\\U00073706\\U00060875\\U0006085a\\U00062de0\\U00060862\\U000608ce\\U00060838\\U000608b6\\U0006086d\\U000608fb\\U00060898\\U00060821\\U000691b5\\U00060876\\U000608cb\\U000608c4\\U000608e8\\U00060832\\U0006087a\\U00060833\\U00082aa7\\U00060867\\U000860bf\\U000608ec\\U000608f4\\U00060878\\U0006087a\\U0006083a\\U00068ee9\\U00063b61\\U000608b6\\U000608a4\\U000608b4\\U000608d5\\U00060867\\U00060859\\U00060850\\U0008f417\\U0006f7e5\\U00060864\\U00062a3a\\U00060832\\U000608a1\\U000608d4\\U0007133d\\U00074e67\\U0006ebe8\\U00060853\\U00073da8\\U0006fa6b\\U000608a4\\U000608e0\\U000608fc\\U0006084b\\U000699f9\\U00060902\\U00060860\\U000608d0\\U000608fb\\U00060897\\U000608de\\U000608b3\\U000608fb\\U00060895\\U00060881\\U000608a1\\U000608d0\\U00060858\\U0006088c\\U000608ed\\U0006089f\\U000608ea\\U000608c0\\U000608a2\\U000608ca\\U00060839\\U000872a7\\U000608cf\\U0006082b\\U000608fa\\U000608f6\\U000608d2\\U000608fe\\U000608aa\\U00071f27\\U000608e3\\U00089959\\U000608dd\\U00060897\\U000818a4\\U00060885\\U0006a80c\\U00060917\\U000608bc\\U000608e3\\U00060878\\U000608fd\\U00060908\\U000608ac\\U00060917\\U00060912\\U0008de92\\U000608ca\\U000608f8\\U00060834\\U00060897\\U000608a7\\U0006086f\\U0006083f\\U000608cb\\U0007793e\\U0006087b\\U000653f0\\U000608be\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([395288, 601839])),\n+                \"min_size\": 50,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.430302397329667e307,\n+            constraints={\n+                \"min_value\": 2.2977568508831188e16,\n+                \"max_value\": 1.4130967583873843e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.3823487456653346e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7276314820986799},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": 0.0,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5e-324,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf5\\xf5<RI\\x85o\\xd8\\x18\",\n+            constraints={\"min_size\": 6, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n def test_drawing_prefix_exactly(nodes):\n     # drawing exactly a prefix gives that prefix\n     cd = ConjectureData(\n",
    "cov": "From HEAD Mon Sep 17 00:00:00 2001\nFrom: Hypothesis 6.131.21 <no-reply@hypothesis.works>\nDate: Wed, 21 May 2025 21:22:20\nSubject: [PATCH] Hypothesis: add explicit examples\n\n---\n--- ./tests/test_linearize.py\n+++ ./tests/test_linearize.py\n@@ -148,6 +148,46 @@\n \n \n @given(reports(count_workers=1))\n+@example(\n+    reports=[\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=0.0,\n+            timestamp=0.0,\n+            worker_uuid=UUID(\"e3e70682-c209-4cac-a29f-6fbed82c07cd\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 0,\n+                Status.INTERESTING: 0,\n+            },\n+            branches=0,\n+            since_new_branch=0,\n+            phase=Phase.REPLAY,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    reports=[\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=0.0,\n+            timestamp=0.0,\n+            worker_uuid=UUID(\"e3e70682-c209-4cac-a29f-6fbed82c07cd\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 0,\n+                Status.INTERESTING: 0,\n+            },\n+            branches=0,\n+            since_new_branch=0,\n+            phase=Phase.GENERATE,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n def test_single_worker(reports):\n     assert len({r.worker_uuid for r in reports}) <= 1\n     # linearizing reports from a single worker just puts them in a sorted order,\n@@ -160,6 +200,27 @@\n \n \n @given(reports(overlap=False))\n+@example(\n+    reports=[\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=349852.72512494575,\n+            timestamp=1.219458296214639e308,\n+            worker_uuid=UUID(\"bbeb02a7-61e7-4c1e-a8ff-882971dd7a2e\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 14221,\n+                Status.INTERESTING: 0,\n+            },\n+            branches=85,\n+            since_new_branch=2666,\n+            phase=Phase.REPLAY,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(reports=[]).via(\"HypoFuzz covering example\")\n def test_non_overlapping_reports(reports):\n     test = _test_for_reports(reports)\n     test._check_invariants()\n--- ./tests/test_provider.py\n+++ ./tests/test_provider.py\n@@ -7,6 +7,321 @@\n \n \n @given(st.lists(nodes()))\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2831,\n+            constraints={\n+                \"min_value\": -6,\n+                \"max_value\": 10535,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-15869,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud854\udc64\ud854\udc39\ud853\udfc7\ud853\udfde\\U0007e424\\U0006326e\ud854\udc3c\\U000370f8\ud853\udf79\ud853\udfd5\ud854\udc6a\ud853\udfe6\ud853\udfba\ud853\udf85\\U000732d9\ud853\udfc3\ud854\udc1b\ud854\udc41\ud854\udc5f\ud861\udcd2\ud854\udc50\ud854\udc65\ud853\udfe5\ud854\udc71\ud854\udc57\ud853\udf7c\ud854\udc3f\ud854\udc27\\U00051ae9\ud854\udc06\ud853\udf75\\U0006e9d5\ud854\udc4f\ud853\udfaf\ud853\udf81\ud853\udfbc\ud853\udfc4\ud854\udc6c\ud854\udc26\ud854\udc5e\ud854\udc6f\ud853\udf7f\ud854\udc43\ud854\udc30\ud853\udfaa\ud854\udc2c\ud853\udfb4\ud853\udf81\ud853\udff1\ud854\udc14\\U0004487e\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([151413, 519490])),\n+                \"min_size\": 25,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=11831,\n+            constraints={\n+                \"min_value\": -36,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.402823466e38,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 474167647850097.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 1},\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.4072812832101417e308,\n+            constraints={\n+                \"min_value\": 2.149890210988563e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"C{U\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-9753,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 2,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=17996,\n+            constraints={\n+                \"min_value\": 2,\n+                \"max_value\": 29590,\n+                \"shrink_towards\": 0,\n+                \"weights\": {9168: 0.05},\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-24314,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -44,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.307139659154326e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.4921316493986662e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud869\ude89\ud887\uddde\ud869\udeab\\U00034621\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([173609, 236006, 730368]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.873273735354358e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.14949021694758804},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0009bd87\\U0009be10\\U0009bd9b\\U000a5d1d\\U0009be05\\U0009bd81\\U000cd2c6\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([638292, 846394])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7_747_876_218_385_873_990,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -23,\n+                \"shrink_towards\": 2_000_922_496,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.2935511453404842e-234},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00087826\\U00068815\\U00060870\\U000910a5\\U00060901\\U00060834\\U00060844\\U00073706\\U00060875\\U0006085a\\U00062de0\\U00060862\\U000608ce\\U00060838\\U000608b6\\U0006086d\\U000608fb\\U00060898\\U00060821\\U000691b5\\U00060876\\U000608cb\\U000608c4\\U000608e8\\U00060832\\U0006087a\\U00060833\\U00082aa7\\U00060867\\U000860bf\\U000608ec\\U000608f4\\U00060878\\U0006087a\\U0006083a\\U00068ee9\\U00063b61\\U000608b6\\U000608a4\\U000608b4\\U000608d5\\U00060867\\U00060859\\U00060850\\U0008f417\\U0006f7e5\\U00060864\\U00062a3a\\U00060832\\U000608a1\\U000608d4\\U0007133d\\U00074e67\\U0006ebe8\\U00060853\\U00073da8\\U0006fa6b\\U000608a4\\U000608e0\\U000608fc\\U0006084b\\U000699f9\\U00060902\\U00060860\\U000608d0\\U000608fb\\U00060897\\U000608de\\U000608b3\\U000608fb\\U00060895\\U00060881\\U000608a1\\U000608d0\\U00060858\\U0006088c\\U000608ed\\U0006089f\\U000608ea\\U000608c0\\U000608a2\\U000608ca\\U00060839\\U000872a7\\U000608cf\\U0006082b\\U000608fa\\U000608f6\\U000608d2\\U000608fe\\U000608aa\\U00071f27\\U000608e3\\U00089959\\U000608dd\\U00060897\\U000818a4\\U00060885\\U0006a80c\\U00060917\\U000608bc\\U000608e3\\U00060878\\U000608fd\\U00060908\\U000608ac\\U00060917\\U00060912\\U0008de92\\U000608ca\\U000608f8\\U00060834\\U00060897\\U000608a7\\U0006086f\\U0006083f\\U000608cb\\U0007793e\\U0006087b\\U000653f0\\U000608be\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([395288, 601839])),\n+                \"min_size\": 50,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.430302397329667e307,\n+            constraints={\n+                \"min_value\": 2.2977568508831188e16,\n+                \"max_value\": 1.4130967583873843e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.3823487456653346e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7276314820986799},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": 0.0,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5e-324,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf5\\xf5<RI\\x85o\\xd8\\x18\",\n+            constraints={\"min_size\": 6, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n def test_drawing_prefix_exactly(nodes):\n     # drawing exactly a prefix gives that prefix\n     cd = ConjectureData(\n"
  }
}