{
  "collected_tests": {
    "collection_status": [
      {
        "nodeid": "tests/test_branches.py::test_branch_make",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_branches.py::test_branch_cache",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_corpus.py::test_corpus_covering_nodes",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_linearize.py::test_single_worker",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_linearize.py::test_non_overlapping_reports",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_provider.py::test_drawing_prefix_exactly",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_provider.py::test_draw_past_prefix",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_provider.py::test_misaligned_type",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_provider.py::test_misaligned_kwargs",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_visual.py::test_visual_tyche_grab_bag",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_visual.py::test_visual_tyche_almost_always_invalid",
        "status": "collected"
      }
    ]
  },
  "patches": {
    "all": "From HEAD Mon Sep 17 00:00:00 2001\nFrom: Hypothesis 6.131.20 <no-reply@hypothesis.works>\nDate: Tue, 20 May 2025 18:36:05\nSubject: [PATCH] Hypothesis: add explicit examples\n\n---\n--- ./tests/test_linearize.py\n+++ ./tests/test_linearize.py\n@@ -148,6 +148,46 @@\n \n \n @given(reports(count_workers=1))\n+@example(\n+    reports=[\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=0.0,\n+            timestamp=0.0,\n+            worker_uuid=UUID(\"e3e70682-c209-4cac-a29f-6fbed82c07cd\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 0,\n+                Status.INTERESTING: 0,\n+            },\n+            branches=0,\n+            since_new_branch=0,\n+            phase=Phase.REPLAY,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    reports=[\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=0.0,\n+            timestamp=0.0,\n+            worker_uuid=UUID(\"e3e70682-c209-4cac-a29f-6fbed82c07cd\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 0,\n+                Status.INTERESTING: 0,\n+            },\n+            branches=0,\n+            since_new_branch=0,\n+            phase=Phase.GENERATE,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n def test_single_worker(reports):\n     assert len({r.worker_uuid for r in reports}) <= 1\n     # linearizing reports from a single worker just puts them in a sorted order,\n@@ -160,6 +200,27 @@\n \n \n @given(reports(overlap=False))\n+@example(reports=[]).via(\"HypoFuzz covering example\")\n+@example(\n+    reports=[\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=0.0,\n+            timestamp=0.0,\n+            worker_uuid=UUID(\"e3e70682-c209-4cac-a29f-6fbed82c07cd\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 0,\n+                Status.INTERESTING: 0,\n+            },\n+            branches=0,\n+            since_new_branch=0,\n+            phase=Phase.GENERATE,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n def test_non_overlapping_reports(reports):\n     test = _test_for_reports(reports)\n     test._check_invariants()\n--- ./tests/test_provider.py\n+++ ./tests/test_provider.py\n@@ -7,6 +7,258 @@\n \n \n @given(st.lists(nodes()))\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"k\\xf7g\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=730,\n+            constraints={\n+                \"min_value\": 12,\n+                \"max_value\": 24915,\n+                \"shrink_towards\": 0,\n+                \"weights\": {8554: 0.31620565837674564},\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 0},\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=6_017_318_731_159_122_619,\n+            constraints={\n+                \"min_value\": -1,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.4072812832101417e308,\n+            constraints={\n+                \"min_value\": 0.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.0,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00b1\u00fb\\x8e:\\x0f\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([2, 94897])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.6215561815465404e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.624901495282588e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.2116541616694944e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x01\\x01\\x02\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([0, 2, 163691])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-8,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 5,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=12369,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 1,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2239,\n+            constraints={\n+                \"min_value\": -1,\n+                \"max_value\": 29354,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd7\\xd9N5&j\\xdd\\x16f\\x88@\\x05\\xf4\\xe9\\xe4\\xe3\\x92\\xf6\\x91\\x9c\\t\\xa0\\x87\\x98*\\xdep>uX\\xbd\\xdb\\xaf\\x8f/\\x15\\x9e\\xa3\\xe1\\x94uy\\xab\\r\\x88\\xd0\\x9a\\x00;\\x16\",\n+            constraints={\"min_size\": 42, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": 0.0,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5e-324,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4_715_676_941_197_531_773,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1b\\xf2v\\xd8\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n def test_drawing_prefix_exactly(nodes):\n     # drawing exactly a prefix gives that prefix\n     cd = ConjectureData(\n",
    "cov": "From HEAD Mon Sep 17 00:00:00 2001\nFrom: Hypothesis 6.131.20 <no-reply@hypothesis.works>\nDate: Tue, 20 May 2025 18:36:05\nSubject: [PATCH] Hypothesis: add explicit examples\n\n---\n--- ./tests/test_linearize.py\n+++ ./tests/test_linearize.py\n@@ -148,6 +148,46 @@\n \n \n @given(reports(count_workers=1))\n+@example(\n+    reports=[\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=0.0,\n+            timestamp=0.0,\n+            worker_uuid=UUID(\"e3e70682-c209-4cac-a29f-6fbed82c07cd\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 0,\n+                Status.INTERESTING: 0,\n+            },\n+            branches=0,\n+            since_new_branch=0,\n+            phase=Phase.REPLAY,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    reports=[\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=0.0,\n+            timestamp=0.0,\n+            worker_uuid=UUID(\"e3e70682-c209-4cac-a29f-6fbed82c07cd\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 0,\n+                Status.INTERESTING: 0,\n+            },\n+            branches=0,\n+            since_new_branch=0,\n+            phase=Phase.GENERATE,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n def test_single_worker(reports):\n     assert len({r.worker_uuid for r in reports}) <= 1\n     # linearizing reports from a single worker just puts them in a sorted order,\n@@ -160,6 +200,27 @@\n \n \n @given(reports(overlap=False))\n+@example(reports=[]).via(\"HypoFuzz covering example\")\n+@example(\n+    reports=[\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=0.0,\n+            timestamp=0.0,\n+            worker_uuid=UUID(\"e3e70682-c209-4cac-a29f-6fbed82c07cd\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 0,\n+                Status.INTERESTING: 0,\n+            },\n+            branches=0,\n+            since_new_branch=0,\n+            phase=Phase.GENERATE,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n def test_non_overlapping_reports(reports):\n     test = _test_for_reports(reports)\n     test._check_invariants()\n--- ./tests/test_provider.py\n+++ ./tests/test_provider.py\n@@ -7,6 +7,258 @@\n \n \n @given(st.lists(nodes()))\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"k\\xf7g\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=730,\n+            constraints={\n+                \"min_value\": 12,\n+                \"max_value\": 24915,\n+                \"shrink_towards\": 0,\n+                \"weights\": {8554: 0.31620565837674564},\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 0},\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=6_017_318_731_159_122_619,\n+            constraints={\n+                \"min_value\": -1,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.4072812832101417e308,\n+            constraints={\n+                \"min_value\": 0.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.0,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00b1\u00fb\\x8e:\\x0f\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([2, 94897])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.6215561815465404e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.624901495282588e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.2116541616694944e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x01\\x01\\x02\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([0, 2, 163691])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-8,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 5,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=12369,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 1,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2239,\n+            constraints={\n+                \"min_value\": -1,\n+                \"max_value\": 29354,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd7\\xd9N5&j\\xdd\\x16f\\x88@\\x05\\xf4\\xe9\\xe4\\xe3\\x92\\xf6\\x91\\x9c\\t\\xa0\\x87\\x98*\\xdep>uX\\xbd\\xdb\\xaf\\x8f/\\x15\\x9e\\xa3\\xe1\\x94uy\\xab\\r\\x88\\xd0\\x9a\\x00;\\x16\",\n+            constraints={\"min_size\": 42, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": 0.0,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5e-324,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4_715_676_941_197_531_773,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1b\\xf2v\\xd8\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n def test_drawing_prefix_exactly(nodes):\n     # drawing exactly a prefix gives that prefix\n     cd = ConjectureData(\n"
  }
}