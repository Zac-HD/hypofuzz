{
  "tests/test_branches.py::test_branch_make": {
    "rolling": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_make(\n    start=Location(filename='', line=0, column=None),\n    end=Location(filename='', line=0, column=None),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.862498750910163e-05,
          "overall:gc": 0.0,
          "generate:start": 0.00010054197628051043,
          "generate:end": 6.454094545915723e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_branches.py::test_branch_make",
        "run_start": 1747878945.1163251
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_make(\n    start=Location(filename='', line=0, column=None),\n    end=Location(filename='', line=0, column=None),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0002572499797679484,
          "overall:gc": 0.0,
          "generate:start": 0.0010094580356962979,
          "generate:end": 0.00028254202334210277
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_branches.py::test_branch_make",
        "run_start": 1747878949.301867
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_make(\n    start=Location(filename='', line=0, column=None),\n    end=Location(filename='', line=0, column=None),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0002618750440888107,
          "overall:gc": 0.0,
          "generate:start": 0.00030208396492525935,
          "generate:end": 0.00028445798670873046
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_branches.py::test_branch_make",
        "run_start": 1747878915.1042361
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_make(\n    start=Location(filename='', line=0, column=None),\n    end=Location(filename='', line=-16654, column=None),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.220801828429103e-05,
          "overall:gc": 0.0,
          "generate:start": 9.858398698270321e-05,
          "generate:end": 8.620898006483912e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_branches.py::test_branch_make",
        "run_start": 1747878919.4302132
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_make(\n    start=Location(filename='', line=0, column=None),\n    end=Location(filename='', line=26378, column=None),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00012616696767508984,
          "overall:gc": 0.0,
          "generate:start": 0.0001663339789956808,
          "generate:end": 0.00026587501633912325
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_branches.py::test_branch_make",
        "run_start": 1747878932.62256
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_make(\n    start=Location(filename='', line=0, column=None),\n    end=Location(filename='', line=0, column=None),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00021299999207258224,
          "overall:gc": 0.0,
          "generate:start": 0.00024808302987366915,
          "generate:end": 0.00019029201939702034
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_branches.py::test_branch_make",
        "run_start": 1747878923.864131
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_make(\n    start=Location(filename='\\x84', line=-31712, column=None),\n    end=Location(filename='\\x80', line=-10162, column=None),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.175000013783574e-05,
          "overall:gc": 0.0,
          "generate:start": 0.09621529199648649,
          "generate:end": 0.00013766699703410268
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_branches.py::test_branch_make",
        "run_start": 1747878905.938278
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_make(\n    start=Location(filename='', line=-30296, column=None),\n    end=Location(filename='\\U000aabb5', line=8, column=101),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.975000284612179e-05,
          "overall:gc": 0.0,
          "generate:start": 0.0003754170029424131,
          "generate:end": 0.0001824999926611781
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_branches.py::test_branch_make",
        "run_start": 1747878961.439966
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_make(\n    start=Location(filename='', line=-1963540996, column=None),\n    end=Location(filename='\\x04\\U000ecf01', line=-60018855926850170747348438740767094986, column=None),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.408298552036285e-05,
          "overall:gc": 0.0,
          "generate:start": 9.920797310769558e-05,
          "generate:end": 0.00010362500324845314
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_branches.py::test_branch_make",
        "run_start": 1747878940.731387
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_make(\n    start=Location(filename='', line=0, column=None),\n    end=Location(filename='\u00c3', line=-8527673182543812416, column=29262),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.808301597833633e-05,
          "overall:gc": 0.0,
          "generate:start": 9.720801608636975e-05,
          "generate:end": 0.0001224579755216837
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_branches.py::test_branch_make",
        "run_start": 1747878965.5024698
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_make(\n    start=Location(filename='N`\u00dbW\u00f0', line=11934, column=8192),\n    end=Location(filename='\\x19\u00f4\u00b3\u00f7>?\\U000bd677', line=-6319, column=None),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.495802128687501e-05,
          "overall:gc": 0.0,
          "generate:start": 0.00013937498442828655,
          "generate:end": 0.00012470799265429378
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_branches.py::test_branch_make",
        "run_start": 1747878910.506697
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_make(\n    start=Location(filename='', line=0, column=None),\n    end=Location(filename='\\x7f', line=0, column=-12541),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.941602962091565e-05,
          "overall:gc": 0.0,
          "generate:start": 0.00010579102672636509,
          "generate:end": 0.00011741707567125559
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_branches.py::test_branch_make",
        "run_start": 1747878969.7303832
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_make(\n    start=Location(filename='', line=0, column=None),\n    end=Location(filename='', line=0, column=None),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.40840332582593e-05,
          "overall:gc": 0.0,
          "generate:start": 8.291704580187798e-05,
          "generate:end": 7.44159915484488e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_branches.py::test_branch_make",
        "run_start": 1747878936.428214
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_make(\n    start=Location(filename='', line=0, column=None),\n    end=Location(filename='', line=-6561, column=-122),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.32089751586318e-05,
          "overall:gc": 0.0,
          "generate:start": 0.00010833301348611712,
          "generate:end": 0.0001359170419164002
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_branches.py::test_branch_make",
        "run_start": 1747878928.282209
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_make(\n    start=Location(filename='\u092e\u0928\u0940\u0937 \u0645\u0646\u0634', line=29911, column=None),\n    end=Location(filename='\\x14\\x194O\\U000347f4', line=-44176451627602081494379611908285704085, column=-21509491237230475353528305110115257409),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.845897926017642e-05,
          "overall:gc": 0.0,
          "generate:start": 0.00013904098886996508,
          "generate:end": 0.0001425420050509274
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_branches.py::test_branch_make",
        "run_start": 1747878957.3781672
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_make(\n    start=Location(filename='', line=0, column=None),\n    end=Location(filename='', line=5163687374013258644, column=None),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.679101640358567e-05,
          "overall:gc": 0.0,
          "generate:start": 9.73339774645865e-05,
          "generate:end": 9.78340394794941e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_branches.py::test_branch_make",
        "run_start": 1747878953.336479
      }
    ],
    "corpus": []
  },
  "tests/test_branches.py::test_branch_cache": {
    "rolling": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_cache(\n    start=Location(filename='', line=0, column=None),\n    end=Location(filename='', line=-21398, column=None),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 3.462500171735883e-05,
          "overall:gc": 0.0,
          "generate:start": 9.63329803198576e-05,
          "generate:end": 8.991605136543512e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_branches.py::test_branch_cache",
        "run_start": 1747878919.485421
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_cache(\n    start=Location(filename='\\x84', line=-31712, column=None),\n    end=Location(filename='\\x80', line=-10162, column=None),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 5.133403465151787e-05,
          "overall:gc": 0.0,
          "generate:start": 0.19160112598910928,
          "generate:end": 0.00013212498743087053
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_branches.py::test_branch_cache",
        "run_start": 1747878905.8620312
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_cache(\n    start=Location(filename='\\x19', line=-37, column=None),\n    end=Location(filename=':\\U0009e592\\x03\\x9d\\U000829a2', line=90, column=-1962210858),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 3.1167000997811556e-05,
          "overall:gc": 0.0,
          "generate:start": 0.00012104102643206716,
          "generate:end": 0.00012591603444889188
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_branches.py::test_branch_cache",
        "run_start": 1747878911.7180648
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_cache(\n    start=Location(filename='\u00c4\\U000a45a2\u00ff\\x91\u00fb\\U00107836\u00d5\\x98U\\U00018d66\\U000d15b0\\U0006733a', line=65535, column=-5763120759917687543),\n    end=Location(filename='U\\x8c\\U0001cbce\u00e0\u00bd\u00f3\\x8b\u00cbi,\ud862\udf2b', line=-15743, column=None),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 4.791701212525368e-05,
          "overall:gc": 0.0,
          "generate:start": 0.00024379201931878924,
          "generate:end": 0.0001480000209994614
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_branches.py::test_branch_cache",
        "run_start": 1747878934.6804328
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_cache(\n    start=Location(filename='', line=0, column=None),\n    end=Location(filename='', line=0, column=None),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 3.474997356534004e-05,
          "overall:gc": 0.0,
          "generate:start": 8.854200132191181e-05,
          "generate:end": 6.450002547353506e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_branches.py::test_branch_cache",
        "run_start": 1747878941.675189
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_branch_cache(\n    start=Location(filename='', line=0, column=None),\n    end=Location(filename='', line=0, column=None),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 3.512500552460551e-05,
          "overall:gc": 0.0,
          "generate:start": 9.420799324288964e-05,
          "generate:end": 8.070800686255097e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_branches.py::test_branch_cache",
        "run_start": 1747878926.957393
      }
    ],
    "corpus": []
  },
  "tests/test_corpus.py::test_corpus_coverage_tracking": {
    "rolling": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=8360, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-3,\n        constraints={'min_value': -15,\n         'max_value': -3,\n         'shrink_towards': 0,\n         'weights': {-3: 0.14717963559763148,\n          -6: 0.0651242255692358,\n          -15: 0.20877711620184575,\n          -9: 0.00021207152466318427,\n          -12: 0.02740081146712907,\n          -7: 0.02831654469487933,\n          -13: 0.1754442250872444,\n          -14: 0.16708646771021587,\n          -11: 0.008159705878595198}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u3e7c',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [15823,\n                  196403,\n                  350210,\n                  379175,\n                  545789,\n                  613481,\n                  618771,\n                  682972,\n                  783700,\n                  939852],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-27207,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 4739,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=31911,\n        constraints={'min_value': -16695,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1.834294670120844e-130},\n        was_forced=False,\n        index=None)),\n      length=258370185,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('a', 2, 3)),\n                                    (('b', 0, 1), ('a', 1, 3)),\n                                    (('b', 2, 1), ('c', 2, 1)),\n                                    (('b', 3, 3), ('a', 3, 3)),\n                                    (('c', 0, 0), ('b', 0, 2)),\n                                    (('c', 0, 1), ('c', 3, 2)),\n                                    (('c', 1, 1), ('a', 1, 0)),\n                                    (('c', 1, 1), ('a', 2, 1)),\n                                    (('c', 2, 2), ('a', 2, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='',\n      has_discards=False,\n      target_observations={':\\U00048131\\U00105d10&d\u00f0*\\U000e6daa\\x0e,x\u00eb\\U000fb65d\u00e3': 0.0},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-36, 54): '',\n       (-16733, -4): '\u00b4A',\n       (42_861_764_106_300_752_225_224_090_299_291_534_263, -126): '\\x00',\n       (-127, 5159): 'i\\x066s|T,\\U0004d6ff\\n\\U0006b97c\\x85\\U000c0dab',\n       (-97, 9572): '',\n       (24279, -115_727_204_905_494_729_562_284_873_104_395_274_019): '',\n       (-100, -120): '\\U0003a683\\x82',\n       (-25, 27571): '',\n       (4, -29020): '',\n       (126, 22479): '\\x1c\u00e2g\\r\u00ebv',\n       (-3964, 2583): '4',\n       (46, 61): '\u00df\u00d5U\\x06\u00a9\\U0009a344\\U0007df58',\n       (-16, -2666): '',\n       (-2_464_382_228_161_359_920, -27485): '\\x84\u00d3',\n       (93, 1654): '\\x90',\n       (-20902, -12116): '\\x8f\\U0009b96e\u00ea\\x08d\u00e0\\x12\u00b3C',\n       (125,\n        -51): '\u00ae\u00eb\\U000191ee/\\U000b0979\u00fa\\x9f\ud857\udefd\u00beI\\U0009e066\ua172\\x94\u00dd\\U000653fc\u00ba\\U00103fb5'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=21995, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U000cb829\\U0009a941\\U00086e20',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [300,\n                  404,\n                  213660,\n                  268222,\n                  316320,\n                  423216,\n                  431444,\n                  608654,\n                  609239,\n                  655130,\n                  749136,\n                  994253,\n                  1093989,\n                  1114111],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.1672910183030261},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8782593945984869},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=3.370702715461061e+42,\n        constraints={'min_value': -7.207191753307855e-111,\n         'max_value': 9.322009070383493e+42,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.370702715461061e+42},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xa6',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0004feb3\\U0004ff3a\\U0004fefc\\U0004ff60',\n        constraints={'intervals': IntervalSet(\n             build_intervals([327283, 382693, 514374, 524080, 577910, 875101]),\n         ), 'min_size': 0, 'max_size': 65},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'EI',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.36847213857052014},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-2.2648956332005428e+290,\n        constraints={'min_value': -2.2648956332005428e+290,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 3.3033416112432908e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.752999161830691},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.203591023524502e+308,\n        constraints={'min_value': 9.652376790098664e-103,\n         'max_value': 1.2697150282371303e+308,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.134733185431798e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9559175367967061},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -5.597417156563981e+16,\n         'max_value': 8.430413947042402e+132,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.969745877289514e+132},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.621076448865923},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-31882,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.3479972198210764},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=10845,\n        constraints={'min_value': -27385,\n         'max_value': None,\n         'shrink_towards': -13201,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.6033656915271694e+308,\n        constraints={'min_value': 4.541817519734147e+218,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 4.1768482387350787e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ua292\ua266\\U0009abe0\ua1f1\ua227\ua24b\ua260\ua207\ua1bf\\U0008727a\ua205\ua1cb\ua2a0',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [41381,\n                  65535,\n                  108427,\n                  128152,\n                  552254,\n                  559064,\n                  574096,\n                  634027,\n                  888472,\n                  895224,\n                  1114111],\n             ),\n         ),\n         'min_size': 4,\n         'max_size': 104},\n        was_forced=True,\n        index=None)),\n      length=-6616,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 3),\n                                     ('b', 0, 0)),\n                                    (('c', 0, 0), ('b', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00ee4\u00aa\u00a8\u00fc\\U000f8f4c',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\u00eb\\n\u00f4\\x04`\\x15\\U00050372_k\ua2ecE': -1.7374725860454083e-35,\n       '\\U0007ef4e\\x06\\r': -3.780548950877671e+16,\n       'Mk\u00e1\u00db\\U000e4b18': 9999,\n       '': -inf,\n       '\\x91\u00dc\\U000ba295\\x81\\U000c3ecb@\\U0006a65a': 2.3602376656855064e+16,\n       'JG\\x9dCU': 2.5933596472565244e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-7_857_358_417_204_004_580, -3),\n       (-97, 14538),\n       (-92, -1_586_223_258_893_455_561),\n       (300, 24938),\n       (4_988_057_724_039_140_750,\n        151_762_128_560_972_816_445_459_291_348_403_915_765)},\n      slice_comments={(9999, 15288): '\ud83d\ude0d'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-109, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=13361,\n        constraints={'min_value': 63,\n         'max_value': 25083,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x95mx\\xc3\\x86ai\\xc4\\xaf>#\\xecl(\\x0f\\xd9\\x0cp\\x10\\xd4s\\xd8\\x9c\\x88\\x15DamK\\x8b\\x8f\\xbdqiX\\xd9D\\x8e\\xfbD?\\xf6\\xfc\\x8a\\xd7>\\x89I6\\t',\n        constraints={'min_size': 48, 'max_size': 148},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x7fk\\x951\\xb5\\xf9\\xceg\\x0bm\\xd4\\xe4\\xd6\\xa5\\x98\\xe9\\xd1\\xba\\xd1L\\xbd\\xd1F\\xd9\\x17\\xd3\\x1f\\x1a\\xd0\\x8d\\xb1\\xcc[\\xd7h\\xe9^\\xeb\\xfc\\x8cu\\xed\\xd0\\xe6\\x13\\x19:Kn2\\xea\"Y\\xe0\\xb3\\x02w\\x90T7$\\xb0\\x7f\\xf1\\xd7\\xa1TrIS\\xd9\\x04\\xf2\\x12C{\\xf1\\x16\\xc7\\xc0\\xc6\\xc6\\xc0y\\xcbw\\x9by\\x8d\\xbd\\x0f\\x840\\xe8\\xf3\\x90\\xf1<\\xcd\\xd3\\xf7\\x9d*(p-[\\xcb\\x12\\x1a\\x80\\x1be\\x8c\\xda\\xc6\\x0e>\\x89n\\x93=\\xa5\\x8f\\xf4',\n        constraints={'min_size': 43, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-4331,\n        constraints={'min_value': -6353,\n         'max_value': 8192,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=6040,\n        constraints={'min_value': 5341,\n         'max_value': 7680,\n         'shrink_towards': -28304,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.7066564882205647},\n        was_forced=True,\n        index=None)),\n      length=-17,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('c', 0, 2)),\n                                    (('a', 2, 1), ('c', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\\x9f\\x9e\u00acR0\\x15',\n      has_discards=False,\n      target_observations={'': 3033277504146335.0,\n       'H': 29,\n       '@\\x15%\\x89+\\U00054f29\\x1c\\n\u00ea$\\U000bde78': 20717,\n       '\u00da\u00b9': -1_159_754_268,\n       '\u00d8-\\U000f3d83\u00a3\ud84d\udd2e\\x81\\U000dc903o1\\x87\\x15\\x94\\x17': 7.031122205429589e+16,\n       '\\x1en\\x1b\\U00102d13\\x86\\U000a893e\\x90': -3.5729668606301216e+16,\n       '\\x80': 97,\n       '\u00b7\u00ce\u00a6\u00e3\u00e3\\x08': 1.9347142469265712e+241},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-7_613_241_716_550_656_677, -124),\n       (-1_680_934_512, 7096),\n       (-24021, 300),\n       (-7198, 0),\n       (-6209, 11529),\n       (-3224, -88),\n       (-1055, -66),\n       (-96, -21650),\n       (-73, -109),\n       (-6, -2232),\n       (120, 9951),\n       (512, 6869),\n       (6954, 4_588_100_408_844_126_759),\n       (9999, 13512),\n       (13680, -20736),\n       (1_441_862_643, 24051),\n       (2_064_678_947, 51_313_532_416_690_845_338_624_699_754_459_499_913),\n       (110_511_814_483_464_039_907_844_424_294_115_355_203, 19884)},\n      slice_comments={(-28838, -160133526): '\u00f5\u00f3'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-37, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.0845523080788102e+308},\n        was_forced=True,\n        index=None),),\n      length=97,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 0, 2),\n                                     ('c', 1, 2)),\n                                    (('c', 2, 2), ('a', 2, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [ExceptionGroup('\\xad\u00ff',\n                                     [ExceptionGroup('',\n                                                     [ExceptionGroup('\u00d7\u00b6\u00e8S\\x0e1\u00ae\\U00045dce\\x90\\x8d',\n                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                         '\u00a6y',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                         '\\x84\\x88',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeTranslateError('',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      ExceptionGroup('\u00d6',\n                                                                                     [UnicodeTranslateError(\"\\U000dd15d'\u00e8\\U00079148\\U000d6968~\",\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      ExceptionGroup('\\uea74',\n                                                                                                     [UnicodeTranslateError('\\x17',\n                                                                                                                            0,\n                                                                                                                            0,\n                                                                                                                            'reason')]),\n                                                                                      UnicodeTranslateError('\\x08',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      UnicodeTranslateError('',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      ExceptionGroup('_\u00aa',\n                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                         'True',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         'E\u00d6\u00ed[<',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason')])])])]),\n                                      UnicodeTranslateError('\u00ef\\U0001e26a\\U000331f1',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\u00a5',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('',\n                                                     [UnicodeEncodeError('unknown encoding',\n                                                                         '\\x11\u00cd\u00bd\\x13\\x99g\\x0bZ',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeTranslateError('\u00a6',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         'R1O',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      ExceptionGroup('',\n                                                                     [UnicodeTranslateError('g\u45d6\ud82f\udc08n\\x80h\\x9d}\u00e4\\x85[\u00cd\\x97\u00d5\u00ca\u00b1\u00d2V\\x10\u00df',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      UnicodeTranslateError('\u00f1!\\x84\u00be\\x80',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                         '\u00ed\\U00095d41\ud81c\ude3a\u00d5\\U000d5bad\\x02\\x9fQ\\r\\U00067940\u00b9\\U000d8474\\U000ef72e',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')])])]),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         'V\u00d5\\x83\\U000ab6ca\\U0006a367:U\u00c1\\U0007d4d6\u00de\\U00071c57',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('\\x93\u00fc[s\\U001081f8Z\\U000eabbc\u00c3\\U0008a4b4\ud4b0',\n                                            0,\n                                            0,\n                                            'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00bf\\x1eGCa\\U000166ec\u00b7': -18426,\n       '\\x03<r': 1.2986145710930352e+16,\n       '\\U00103e08\\U000f10194\u00c9\u00c6\\U0004b59f\\U000e7bf5\u00dc\\x97li\\U000486a9_SKb\\x11\ud820\ude8d`': 8.121582128214286e-252,\n       '\u00e6\\x18\\x1d33b\\U00070ea0\\x1e\\x8d': 4.519469895158612e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-16899, 9_636_665_942_970_527_010_629_120_938_877_195_692),\n       (-15736, -4_708_867_678_150_178_381),\n       (-107, 952016527),\n       (-105, 24386),\n       (-72, 20213),\n       (-48, -31_769_517_606_800_576_566_582_042_156_006_596_841),\n       (-47, -14240),\n       (94, 26633),\n       (512, -22),\n       (4645, -40),\n       (7381, 71),\n       (8192, -29),\n       (11968, -1_475_900_850_300_956_905),\n       (12015, 21851),\n       (20454, 512),\n       (26895, 17861),\n       (1_788_739_142, -47),\n       (3_440_291_379_778_778_943, -8075),\n       (82_884_747_343_972_077_630_736_352_148_034_326_676, 95)},\n      slice_comments={(-16465, 1_416_199_594): '\u00f4',\n       (16125, -11340): '\\U000f9b39\u00a5\\x95\u00f3\\x05\u00a5\u00ed\u00bf\u00d5\\U0003ee1a%\u00de',\n       (4335, -121): '\\x83'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=300, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=7_841_379_538_884_190_325,\n        constraints={'min_value': -123,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),),\n      length=17821,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 1),\n                                     ('a', 3, 0)),\n                                    (('b', 1, 0), ('b', 1, 3)),\n                                    (('c', 0, 3), ('c', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'nj\\U000ce246\\x10\\U0003e5b12\u00b9\u00dd\u00e5\\U00032a2e\\x07\\U0010c3cd\uc649KK\ud87a\udd24': 33,\n       '\\U000907da': -7126,\n       '\\x80\ud83a\udd59}\\x91=, \u00bf\u00ae&l\\x17~\\U0009f19b\\x0e': 76,\n       'N': -4.7154601935477495e-07,\n       '\\U000d5ca9U\\U00064723c\\U0001a2e0Y': -5.5490436918118105e-86,\n       '\\x02\\U000b240f\\x93\\x9b^': -3.128099634158275e+16,\n       '\u00cd\\U000b38543b\\U0004db47.\u00e7\u00b2?]\\x13\\U000be29c\\U000e1f61\u00ab\\xad\u00b8\u00f9/YnU\\U00040958\u00d9\ud81a\uddff\\U00098cf2\\x10\\x05m\u00b5\\U000fdc50B': 5.655193458897047e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-22030, context=(), group_elems=()),\n      nodes=(),\n      length=-1_168_719_728,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('c', 0, 0)),\n                                    (('a', 0, 1), ('c', 0, 3)),\n                                    (('a', 3, 3), ('c', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\x80\ub4d8\u00ae', 0, 0, 'reason'),\n      expected_traceback='\u00fdO\u00a5\\x06\u00bd',\n      has_discards=True,\n      target_observations={'\\x9b\u00ea\\U000a2469\u00ed\u00ed': -inf, 'N/\u00bc\\x8d': -27},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(58, -20303), (2405, 20)},\n      slice_comments={(13108, -27378): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-547778389, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8215856572547164},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7534353654555255},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 6.103515625e-05,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.798635740485514e+307},\n        was_forced=False,\n        index=None)),\n      length=8192,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 2),\n                                     ('a', 0, 1)),\n                                    (('a', 3, 3), ('a', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00e4': -11768, '\u00ael!\\x0c\\x9f\\x14\u00cf\\x1e\\U0010dc1a': 51},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(30618, 11035)},\n      slice_comments={(-4804, -1_764_706_188_962_734_790): '>\u00f0\u00e8\\U00047da9',\n       (-14216,\n        -18496): '\\x9fd@\\x99\u00f4\\U000a6ff3\\x17\\nh\u00c8\u00a2\ud860\udff1/$\\U000a1517\u00bc\\U000b45b1'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=9275, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-3.1352465534660687e-174,\n        constraints={'min_value': -inf,\n         'max_value': 1.101628284010536e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5e-324},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-2.214840617616076e+16,\n        constraints={'min_value': -3.0831865914390576e+16,\n         'max_value': -2.225073858507e-311,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.135306947821118e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=6.586630705144709e+16,\n        constraints={'min_value': -2.727940039470565e-132,\n         'max_value': 5.205169317517608e+307,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.5},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=8337,\n        constraints={'min_value': None,\n         'max_value': 2_125_138_672,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-167,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0001a193\\U0001a0e0\\U0001a0b7\\U0001a0fa\udb40\udde1\\U0001a0e8\\U0001a18b\\U0001a0f1\\U0001a16b\\U0001a0b3\\U0001a128\\U0001a12d\\U0001a158\\U0001a160\\U000e22d3\\U0001a14a\\U0001a0ca\\U0001a0a4\\U0001a0bf\\U0001a0e5\\U000e2648\\U0001a0cb\ud845\udc07\\U0001a17e\\U0008a6a7\\U0001a11a\\U0001a12c\\U0001a0fd\\U0001a140\\U0001a106\\U0001a0f9\\U0001a0bf',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [106644, 341359, 434314, 763727, 893828, 1008359]),\n         ),\n         'min_size': 14,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.998765450691094e+307,\n        constraints={'min_value': 3.1377972189356916e+16,\n         'max_value': 8.690539849250341e+307,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.3695624058606874e-76},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1.0558015805288693e-291},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.41061916662971687},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000df86b\ud821\udf4c\\U0004b360\ud821\udf26',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [100099,\n                  137736,\n                  144745,\n                  423887,\n                  554248,\n                  703511,\n                  752143,\n                  1031138,\n                  1032454],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 7405030539686645.0,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.546971531765218e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xda:[n\\x1536\\x80g\\xee\\x9cx5z\\x1a\\x18\\x91\\xcc\\xa7\\xd7\\xcde\\x82q\\xad\\x01\\x9d\\x99\\xc3\\xab\\xd2\\xb5\\xf3\\xd2\\x80[(\\x11\\xed=x\\x16\\xb8\\xee\\xb6\\xae+V\\xbd\\xd5#I\\xc6\\x8f\\x87>\\x9d\\\\\\x19\\xf3\\x1f\\xa4D\\x7f\\xc7\\x97i\\x943P\\xd2\\xd3\\xa6\\x07\"C\\\\Xme\\xd1lb\\x9d\\xe6;\\x04\\xb9\\xb7\\xe1\\x97\\xf0\\x13df\\xb4b\\xf8B|\\xf1\\xe2=p\\x89\\xd69|\\xbf\\xd8uv3\\xf9.',\n        constraints={'min_size': 48, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\r\\xe0\\x86\\\\bHN\\xdd\\x0c=\\x12c\\xa4\\x83\\xf0\\xbe\\xbc\\x80\\x9e^D,:\\x93\\x8c\\x9c\\xe0\\xc5\\x9b]\\ti>\\xbcw:\\x08\\xa3\\xccbY=D\\xb9*\\x16',\n        constraints={'min_size': 20, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'(\\xf5\\x01\\x98E68\\xe7U\\x8a\\xfd\\xd5\\x05\\xa3\\t$j?\\x8f\\x12\\xd6\\xfc\\xa1\\x02\\x91:\\xa7\\xe5Y8E-\\xcc\\xec\\x8d\\xfb\\x82\\xe1\"\\x95!\\x11\\xa5\\xb0\\xafH\\xa0\\xe1\\xda\\xbe\\xb8&\\xae;}s\\xff#\\xf6\\x931\\x01\\xa6f;\\x04>\\x9c\\x19Srg\\x10$K\\xc0D\\xa6J\\xd0\\x08Z}S q\\xfe\\xa6\\x10!',\n        constraints={'min_size': 33, 'max_size': 133},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.9332946408227405},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xaa\\xe3\\x0b\\x10d#\\xba\\x14s\\x14\\xb7\\xa8|\\x1f\\xa4\\xde\\xb4\\xe5s\\xe3i\\xd6\\\\x\\x01\\x88/8\\x86\\xf4\\xc5\\x9e\\xd46N^\\x7f',\n        constraints={'min_size': 15, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=5.711298601709284e+307,\n        constraints={'min_value': -6.545944856869567e-231,\n         'max_value': 6.447182246919104e+307,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.711298601709284e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=357,\n        constraints={'min_value': -4166,\n         'max_value': 404,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=9512,\n        constraints={'min_value': 337,\n         'max_value': 22589,\n         'shrink_towards': -44,\n         'weights': {9512: 0.056457318859382814,\n          12875: 0.05852691781947564,\n          10178: 0.03149884775449554,\n          15884: 0.021895991974980267,\n          14145: 0.03026525090924275,\n          17411: 0.034892678816957616,\n          19127: 0.013544069083338568}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=9992,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=25,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 3),\n                                     ('c', 3, 0)),\n                                    (('c', 0, 0), ('b', 0, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00cbW\\x15\u00de\\U00107776\ud80c\udf50': 3919682112978081.0,\n       '\u00b0#\\U000adc60': -115_711_842_829_950_819_613_346_271_387_575_031_736,\n       '\u00dfa\u00a1\\U000a3795X\\t': -25404,\n       '\u092e\u0928\u0940\u0937 \u0645\u0646\u0634': 108,\n       '\u00ab': 0.05,\n       '': 22608,\n       '+\ud876\udf3b\\x15\"': 49,\n       '\\x15\\x13I\\x8c\\U00069c86\\x86\\x81\\x16\u00b0|\u00f26\u00fc\\U000b6fd9\\x86\\U000dac4e\\r': -48,\n       '\\x83\\U000138e7\\x0c': -1.8370678221802967e-118,\n       '\u00c3w': -2.029554578465784e+250,\n       '+0.0': 16,\n       '\u00b696\\x95\\x9f': 6.465150064705668e+16,\n       '\\U00062e2c': -1.094546368792386e+16,\n       'weights': -5.7038831422325576e+16,\n       '\\x0e\\x9c]#u\\U00087b9c': 1.5504355165011286e-161,\n       '\\U000e5678\u00db\\x18\u00cf': -4.627787735006104e+16,\n       'n\u00d5\u00c0': -2.176035517783985e-149,\n       'P\\x0f\\\\\\U000e6844\u00be\\x1f\\x15\u00ac\\x15': -12991,\n       '\\U000f07141\\U000a72d3\u00f9c*K\u00a8\u00c4\u00cbX': -39,\n       '\\x06\u00f7\\U000d090d\\U00081730\\U000b383b\\U000a54cex1oj\\x0e\u00b1\\x96k\\x11C\\U000670d2\u00da\ud803\udfb2\\U0010e57b\u00b1': 0.0,\n       '\u00df': -7549113665638877.0},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(31589, -13)},\n      slice_comments={(-14099, 26450): 's\u00ba\u00fe\u00a8x\u00e5J\\U000c4b40',\n       (-12164, -18350): '\\x86&\\U000b54a0\u00e5\u00b3\u00f0',\n       (-30975,\n        6080): '\\U000a192b\\x03\\U0005e788\\x1d\\x9b\u00b5\\U00078c0a\\x1f\\x83\u00d9\u00ef\\x05\u00efi\\U0008e0cd \\U000a0265\\x89!\u00d8I\u00eb',\n       (-29680, 21764): '',\n       (-25254, -24): \"\\x00\\x08\u00cd\u00fd('\",\n       (-97, -7): '\u00a7\\U00078400\u00c2\\U000d16ec',\n       (6558, -21): '@\\x12\u00ea\u00d5n\\U000875fe\\x95\u00c4\\x12\u00eb\\U00010dcb\uae44\u00f6b\\x19\u00c0',\n       (-562_213_722_640_229_307, -5721): '\\U000f4009\\x07Vs\ud86e\udc35>',\n       (18788, 33): 'collected_tests',\n       (-29559, 8192): '\u00cb',\n       (9198, -12428): '\\x93'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-7297, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=25439,\n        constraints={'min_value': 9194,\n         'max_value': 4_369_471_788_213_611_647,\n         'shrink_towards': -33,\n         'weights': {1_877_640_001_509_808_529: 0.021561692349102508,\n          39800: 0.011305183060688846,\n          9194: 0.0025638002162231065,\n          1_063_463_341_122_203_008: 0.004681211384999648,\n          2_995_850_007_343_111_915: 0.02822504370801172,\n          9316: 0.005165808450941695,\n          9424: 0.02165777587349376,\n          39598: 3.828591741793946e-05,\n          65535: 0.03643260439867694,\n          37257: 0.0067717952820875674,\n          1_594_092_418_382_908_043: 0.005790388176884911,\n          21678: 0.0100590204769374}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.1918007252587009},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-2.3654092092969296e+16,\n        constraints={'min_value': -2.8079400274102544e+16,\n         'max_value': 0.0,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.5817429577827918e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.1108381732215653e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud113\\U00082237\ud09e\\udd74\ud0d0\ud851\udf69\ud17e\ud0c9\ud09a\ud0aa\ud15a\ud153\ud0b5\ud109\ud167\ud09c\ud166\ud0f8\ud157\ud094\ud126\\U0007ee0f\ud118\ud189\ud09d\ud129\ud0ad\ud0ff\ud17d\ud15c\ud0ef\ud0ca\ud0ed\ud0c1\ud11e\ud140\ud0da\ud13b\ud0a0\ud157\ud099\ud0b2',\n        constraints={'intervals': IntervalSet(\n             build_intervals([53388, 229338, 443358, 665513, 1021542]),\n         ), 'min_size': 11, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'q%\\xcc\\x19\\xcf\\x04\\xcb\\xdbh',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'.hypofuzz.observations',\n        constraints={'min_size': 19, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b't4\\xfb\\x11QR{',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0007eb75\u0134\\U00067af6\u01ba\u01dc\ud847\udc62\ud847\udc6e\\U00077b77\ud847\udc75\u01e1\u01dc\u01dc\ud847\udc77\u01f4\ud847\udc74\u01b5\ud84c\ude91\u01c2\u015e\ud847\udc64\u0150\ud847\udc67\\U000aefaa\ud847\udc5e\u012c\u01a0\u01ad\u0193\ud847\udc6d\ud847\udc5f\u0156\\U000b7809\\U00054391\u01a6\\U000688ec\u0175\u01ea\\U000ba9a9\u01ae\u013a\\U00037b73\ud863\udf0b\\U0007d411\u016e\u01ec\u01c6\u0161\u0156\\U00080a00\\U0007629c\\U00050633\u01b0\u013c\\U0007ece3',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [300,\n                  512,\n                  138326,\n                  249316,\n                  318099,\n                  538459,\n                  586241,\n                  612056,\n                  650524,\n                  778634,\n                  1114111],\n             ),\n         ),\n         'min_size': 41,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7442799529940741},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=19965,\n        constraints={'min_value': -470857875,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00014adc\\U00014aa0\\U00014b90\\U00014b0b\\U00014b78\\U00014b33\\U00014b76\\U00014ae2',\n        constraints={'intervals': IntervalSet(\n             build_intervals([84638, 906342])),\n         'min_size': 8,\n         'max_size': 108},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u1652\u1601\u164c\u1600\u168f\u1669\u162d\u1607\u1670\u1682\\udb5f\u15f4\u6a95\u161f\u16b5\u15bb\u168f\u1655\u1637\u48f7\u15c8\uc75c\ubfb3\u16b4\u1639\u1682\u162c\\udef3\ubeec\u1636\u1662\u15de\u1659\u1673\u15cf\u15f1\u16b0\u15f1\u695b\u167e\uc631\u1610\u6ec3\u1647\u4522\u168a\u1669\u1670\u1635\u1665\u1642\u1649\u1647\u864f\u1617\u161d\u7988\u15e3\u1685\ub464\u16a7\u16a0\u1660\\ue15b\u1685\u15eb\u9a62\ud054\u15e1\u16a5\u1650\u1613\ucea1\u162c\u1649\u15fa\uc3e4\u1650\u15e9\u1673\u1661\u1641\u1644\u1658\u15ed\u164c\u163b\u1608\u1658\u1674\u1648\u68c7\u92f9\u16ad\u15e8\u167c\u168f\\u1680\u16a9\u1654\u16a6\u15d9\u162f\u160a\u15f8\u1669\u1625\\u1680\u9e99\u15d2\u15d3\u163d\\uecdc\u1613\ud55b\u39fc\u166d\u15f0\u1623\u15e5\u1625\u162b\u1661\u1642\u1649\u7ae6\ubbc3\u1610\u168f\\ued46\u16b0\u22c5\u15d4\u163c\u15fa\u15e2\u162a\u15c6\u1679\u15e9\u166c\u169c\u9a76\u1620\ua91a\u162f\u160c\u165b\u73df\\u242f\u16a6\u601f\u1658\u1659\u1658\u164a\u15e2\u1688\u16a3\u1691\u1671\ua994\u163e\u16a9\u15ea\u16af\u1944\u164c\u1600\u15f5\u1699\u1605\u15ce\u65df\u1663\\ued1b\u1674\u165c\u15d9',\n        constraints={'intervals': IntervalSet(\n             build_intervals([5559, 61458, 1013047]),\n         ), 'min_size': 44, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.030717349174357096},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0009fcc6\\U000a0361\\U0009fd32\\U0009fd06\\U0009fc75\\U0009fc87\\U0009fc85\\U0009fcc1\\U0009fd34\\U0009fcc2\\U0009fd0c\\U0009fce8\\U0009fd19\\U0009fcd6\\U0009fcfa\\U000bd11b\\U0009fcdd\\U000c27e8\\U000a4b1b\\U0009fcfa\\U000a7636\\U0009fcc6\\U0009fc64\\U000ac639\\U0009fd02\\U000b0950\\U000a371c\\U0009fd13\\U000c36e6\\U0009fcde\\U0009fcf0\\U0009fc5b\\U0009fc82\\U0009fca1\\U0009fc78\\U000be83d\\U0009fd3b\\U0009fc77\\U0009fd2a\\U0009fc4c\\U0009fc76\\U0009fd0d\\U0009fcf0\\U0009fc7d\\U0009fc53\\U0009fd3c\\U0009fca6\\U0009fd47\\U0009fcc7\\U0009fc83\\U0009fc49\\U0009fc54\\U0009fc73\\U0009fd1b\\U000b45cc\\U0009fd3d\\U0009fcc6\\U0009fceb\\U000b1c80\\U0009fc9f\\U000c2816',\n        constraints={'intervals': IntervalSet(\n             build_intervals([654408, 811600]),\n         ), 'min_size': 45, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=-1517,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('b', 0, 1)),\n                                    (('a', 1, 1), ('c', 3, 0)),\n                                    (('a', 2, 3), ('a', 0, 3)),\n                                    (('a', 3, 0), ('a', 0, 3)),\n                                    (('b', 1, 1), ('b', 2, 0)),\n                                    (('b', 1, 3), ('b', 0, 1)),\n                                    (('b', 2, 0), ('a', 0, 1)),\n                                    (('c', 0, 1), ('c', 3, 1)),\n                                    (('c', 0, 2), ('a', 0, 1)),\n                                    (('c', 1, 2), ('c', 2, 0)),\n                                    (('c', 1, 3), ('b', 0, 3)),\n                                    (('c', 2, 0), ('b', 3, 2)),\n                                    (('c', 3, 0), ('a', 2, 1)),\n                                    (('c', 3, 1), ('a', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\x98L\\x10\u00ec7\\U0006878f\\U0007183eS',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '\\x08\u00c7*\\U000c2a32',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('\u00cc\u00ca\u00fe\\U000e47a4b\\x97\u00d3',\n                                            0,\n                                            0,\n                                            'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('',\n                                     [UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('\u00e2\\x1f',\n                                                     [UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      ExceptionGroup('\\x0b',\n                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                         '\u00eb\u00ab<',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')]),\n                                                      UnicodeTranslateError('\\U0010637a\u00a5',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      ExceptionGroup('\\x94\\x13\\x07',\n                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')]),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')])])]),\n      expected_traceback='LPT1',\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-21918, 11815), (-10697, -23314)},\n      slice_comments={(72, -100): '', (116, 97): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-28, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.6422003591372175},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.8607183795777597e+307,\n        constraints={'min_value': 3.8974973233086745e-203,\n         'max_value': 3.799728575108436e+307,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.225073858507203e-309},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud801\udca4\ud801\udc74\ud801\udc41\ud801\udc36\ud801\udc8c\ud801\udc22\ud801\udc0a\ud801\udc2e\ud801\udc50\\U000d2db8\\U000e5b14\ud801\udc79\ud801\udc0a\ud801\udc5a\ud801\udc3a\ud801\udc13\\U000103de\ud801\udc8e\ud801\udc48\ud801\udc4c\ud801\udc98\\U000103d7\ud801\udc58\\U000d3356\ud801\udc7f\ud801\udc51',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [66496,\n                  79951,\n                  460163,\n                  462693,\n                  521593,\n                  553129,\n                  813603,\n                  954659,\n                  1114111],\n             ),\n         ),\n         'min_size': 19,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'.hypofuzz.failures',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'W{\\x85\\xf5\\x98\\x87~\\xa1\\x8d\\xd2\\x162\\xe2\\xbf\\x9d\\x1eG\\xd6\\x05\\x7f\\xf4\\n`2\\xa2?tvs\\xbf\\xe68\\x0e\\r\\xaa\\xdc\\xa0x9\\xebD\\x002Qf9Q\\xd8\\xae\\xf9T\\xf5\\xbc\\x1e\\x0e\\xc3\\x02\\xb6\\x15\\xa5\\x10\\x19\\x91\"\\x11\\xbd\\xf2\\xa5\\xc0\\xf8\\xed\\x0e\\x10\\xb7N\\xfe\\xe3',\n        constraints={'min_size': 26, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1.7976931348623157e+308,\n        constraints={'min_value': -inf,\n         'max_value': 5.938041977069319e-157,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.66678628804373e+307},\n        was_forced=True,\n        index=None)),\n      length=-1_958_390_900_718_918_921,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('c', 0, 1)),\n                                    (('b', 0, 2), ('a', 2, 1)),\n                                    (('b', 2, 1), ('b', 0, 3)),\n                                    (('b', 3, 2), ('c', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00c4\\x0e\u00e6', 0, 0, 'reason'),\n      expected_traceback=')I\\U000159ac\\x83\\U0002f553c\\x08\\U00049a42zG\u00f6\u00ce\u00ab\\U00080a9a\u00f0\\U00085383\u00ba;',\n      has_discards=False,\n      target_observations={'\\U0003a9bd\\x8a\u00a4\u00db:': -1.192092896e-07,\n       'u': -591,\n       '\\x10\\\\': 22492,\n       '\ud881\udeee\\U000fc2bb\\U00096018\\x1c>\u00b3\\x8e': 26219,\n       'ixK\\x05\\x83\u00af': 9.078849804173228e+246,\n       '': -22890,\n       '<\u00c2\u00b8\u00ba\u00e0\\x16\\U000982e1\\x98\\x04': 23229,\n       '\u00d6]N8B\u30ad\\U0008f15cKL<': -8_484_811_870_163_891_835,\n       '.z': -82,\n       '\\U0010486e,': -1.6151691073964266e-100,\n       'FALSE': 1.5436140615647943e+214,\n       '\u00c7\\U000d9390\u00a1\\x15': -5.260878818329646e+16,\n       '\\x02': -61_106_688_800_650_834_452_916_206_306_997_730_110,\n       '\\x1bk': -6.468731501651487e+16,\n       '\\U000d26bf\\x98h\u00f3rtR3\\x81\u00a3\\x9d': 6.21841696744264e+224,\n       'W\\x0f\\U000df8b5\\U00102008\u00a2\ud867\udead2\u00a1\u00ec\\U000505a3\u00e0G\\x83\u00b7\u00c8\\U000bc3e1': 14664,\n       '\\x81nf\u00ec>\u00af': -6},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(5068, 54): '\u00a3\\x12\\U000ef799\u00db\u00c1',\n       (27385, -12759): '\u00b0',\n       (-9329, -15316): '\u00ab.a\u00b7\\U000caf7dj\\x0f\\U00038013\\x95'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=26658, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9343542579112916},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1.1754943508222875e-38},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'g\\xe4\\x00\\x84\\x17\\xaeU\\xf6\\xe1\\xd7\\x88\\xa8\\xbf0\\x81MDF\\xd0',\n        constraints={'min_size': 6, 'max_size': 106},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xdc',\n        constraints={'min_size': 0, 'max_size': 54},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value=\"\\r'\",\n        constraints={'intervals': IntervalSet(\n             build_intervals([1, 478639, 870642, 1081050, 1104160]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=1_847_995_355,\n        constraints={'min_value': 26130,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.193159931921632},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.225073858507e-311},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\x97\\x92\u00b5\\x07\u00ee\\x9c\\x8f\\U000d9727\\U000ffd4e\ud874\udcf4\ud874\udd6cL\u00e8\u00ea\u00e0ZV)\u00f1F\\x1c\\x82\u0100\u00e8\\x8a\u00c0e\u00fe\u00a9@q\u00f6\u00c1r\u00f2\\x97\\x99\u00f9\\x8aq\\U000f0e0a8\\U00038a12H\u00ce\u00c8\\U0005f7e5\u00e9\\U000dce37u\u00e4\ud84c\udc7a\u00cb\ud83d\ude70\\x7f+\u00a9\\U000d9dd4\u00b5\\U000e2ecc\u00e3\u00de\\x9d`\\x9f{~\u00af\\U0004a43b;\u00dc3\\U000d097c\u00a5',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1,\n                  48575,\n                  80747,\n                  494340,\n                  527063,\n                  539055,\n                  565378,\n                  589948,\n                  617279,\n                  630569,\n                  750378,\n                  874773,\n                  886405,\n                  1084568],\n             ),\n         ),\n         'min_size': 45,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.1117860907861791e+114,\n        constraints={'min_value': 1.1117860907861791e+114,\n         'max_value': 1.1117860907861791e+114,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 3.3184208717212556e+16},\n        was_forced=True,\n        index=None)),\n      length=-6469,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 2),\n                                     ('b', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='3',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-2411, 2_682_756_459_148_752_109)},\n      slice_comments={(-10508, -33): '6',\n       (-32628, 3669): '',\n       (-29, -1_575_478_654_530_966_179): '\\x10~z\u00f0\u00c7j\\x82\u00e9Y',\n       (-1_937_576_379_950_882_557,\n        -120): '\\U000c9a0a\\U000cd6f2\\U0010772d-}/\\U000a8d77[ \\U000d82e7\\x90\u00d9\u00a4\u00a7'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=512, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9307033501575801},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'.hypofuzz.observations',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'6\\xeb\\xf1P~1ej\\x9d\\xcf+\\xb2:vb`\\xb7\\xc5\\xcd\\xad=s\\xde\\x82\\x19\\xe4<\\x80',\n        constraints={'min_size': 11, 'max_size': 111},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.6674743749008951e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'(pe\\xc1',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9714671192449027},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=128,\n        constraints={'min_value': 84,\n         'max_value': 144,\n         'shrink_towards': 0,\n         'weights': {97: 0.00021713820103268783,\n          127: 0.0025632786125308086,\n          128: 0.0017939579428909976,\n          135: 0.0013153702246955566,\n          129: 0.0015038528641213753}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 1.4304764225964644e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.565954854449939e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u00aa\u00cc\u00d5\\x83\\x87\\x12`W\\U0003ad98W\u00c9\\x9d\u00cf3Xu\\U00045c84D\\U0009a999\\x1b\\U00035146\u00d4\u00ac\ub00b\\x06\\x1a\u00c0\\x07\u00fd\u00ac\\x02\\x80\\x1fS\u00e0\u00d6_\\x18\u00e0\u00d5',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  130011,\n                  135887,\n                  293099,\n                  333695,\n                  334407,\n                  369013,\n                  421244,\n                  439244,\n                  454265,\n                  475623,\n                  486172,\n                  503993,\n                  552415,\n                  565524,\n                  575468,\n                  586379,\n                  600705,\n                  628679,\n                  685983,\n                  708266,\n                  721825,\n                  779375,\n                  816235,\n                  857362,\n                  883547,\n                  969664,\n                  981299,\n                  1023519,\n                  1033362,\n                  1074485,\n                  1082492,\n                  1110178,\n                  1114110],\n             ),\n         ),\n         'min_size': 34,\n         'max_size': 134},\n        was_forced=True,\n        index=None)),\n      length=1_097_889_808,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 2),\n                                     ('b', 0, 0)),\n                                    (('a', 2, 3), ('c', 3, 0)),\n                                    (('a', 3, 3), ('b', 0, 2)),\n                                    (('b', 1, 0), ('b', 1, 3)),\n                                    (('c', 2, 0), ('c', 2, 1)),\n                                    (('c', 3, 1), ('b', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'u': 25907,\n       '\\x8d\u00e7\\x01\u00fe\u00be': 4.456849351764782e+16,\n       'J\\x08\\U000598ff\u00ac\\U00069b2e\\U000fcf76\\U00056f46:': 5.602606533632055e+16,\n       'G': 2.9273451068240296e+16,\n       \"\u00c7'\u00e6\": -1.5326187212637381e+124,\n       '\u00b2\\U0008e50b\\x9c\u00c6\\x1b': -124,\n       '\u00f0\u24c0\"\u00f5\u00db': -6.5311475523064184e+16,\n       'IW\u00e0\u00ee\u00b9': -95,\n       '\\U00057c5fDo\\\\': -299372290},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=7809, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'1~\\xe7g\\x98\\x16\\x04\\xe5\\xa7#5\\r>\\xb4\\xcb\\x80\\x12}+;CE\\x0e^\\xc5\\x18\\xf3\\xa2mS\\xe9\\xd6S<_\\xab\\x02w\\xe01;Dq|b\\x02\\xc9\\x97\\x98\\xd7\\xb8\\xceX\\xec\\x85Eg#\\x02V\\xf5\\xc82\\x12\\x8f\\x12\\x96',\n        constraints={'min_size': 38, 'max_size': 138},\n        was_forced=True,\n        index=None),),\n      length=-30890,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('c', 2, 1)),\n                                    (('a', 2, 1), ('c', 2, 2)),\n                                    (('c', 1, 2), ('a', 1, 2)),\n                                    (('c', 2, 2), ('c', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\x9c',\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-5_985_227_104_881_949_417, -21195),\n       (-5_208_914_364_236_268_357,\n        -158_045_866_147_344_557_395_586_680_921_262_943_420),\n       (-14520, -2554),\n       (-94, -82),\n       (55, 72),\n       (13549, 23)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x108be8cb0>, min_size=0, max_size=inf).map(tuple), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text())), has_discards=one_of(nothing(), nothing(), booleans()), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), length=one_of(nothing(), nothing(), integers()), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason'))))).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from integers(0, 1114111).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.02176262397551909,
          "overall:gc": 0.00029183499282225966,
          "generate:args": 0.2289613727480173
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 4,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 4,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878907.5725288
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.21249738894403e-05,
          "overall:gc": 0.0,
          "generate:args": 3.412499791011214e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878918.925399
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=10686, context=(), group_elems=()),\n      nodes=(),\n      length=-32565,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('a', 2, 2)),\n                                    (('a', 2, 0), ('b', 2, 2)),\n                                    (('a', 3, 0), ('c', 1, 0)),\n                                    (('b', 1, 2), ('c', 3, 3)),\n                                    (('b', 3, 3), ('c', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\ud84c\udc0a',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-102_690_418_997_621_597_868_631_218_100_490_080_849,\n        -23133),\n       (-7_405_561_063_819_796_304, 57_426_761_299_538_566),\n       (-1_504_131_295, 23014),\n       (-19237, 6),\n       (-2115, -3_564_356_728_225_173_444),\n       (-110, -32121),\n       (27133, 1024),\n       (29636, 9999)},\n      slice_comments={(7521, 20186): '',\n       (-11699, 26416): '\\U000a96de\\x87\u00e1j\u00f6',\n       (-4511, 1024): '',\n       (-135_205_759_718_827_758_308_414_228_087_653_201_748,\n        9_039_965_340_151_904_421): '',\n       (103_311_391_294_255_142_035_491_424_459_071_044_385, 47): '',\n       (115, -78): '\u00b7}\u00aeS',\n       (-4114,\n        -34): 'm+\\U000c0ecfB\\x07\\x94(\\U0009eec2\\U000f16a0Ts\\x98\\U0007c1c3\\x99\u00bb\u00b3y\u00b4-\u00d3\\x9f\\x19\u00c4\\x1aj\\U000ce1f5h\\U000f9242\u00c5\u00dc!+\\U000a2ff4\\U00107ff7A\\U000c0467\\x0f\\U000d8f80',\n       (-16386, 1_903_415_995): \"\u00ed\\U000f4347\u00dc\\U000e246e'I\",\n       (99, -18): \"\u00aa\u00e0'\u00f41\\U0008015a\",\n       (-3761, 1000): '>\\r=\u00f4X`\u00f6t\\x89',\n       (30214, 1000): '\\x03I\u00ce\u00b2\\U000e85ff9j',\n       (-43, -20560): '4:6T{3}\\x11nN^\\U0010519e^`;\u00e7\u00e7~\\U000526c9',\n       (-113, -4338): '\u00be',\n       (23769, 110): '\\x8aZ\u00bcm}\u00e5xt\u00e6\\x81{\u00d08',\n       (-90, 2996): '\ud822\ude78'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-1414, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'c\\xd7\\xdb\\x1a\\xd0\\xc2\\x8e\\xbe\\x15\\xd4\\x80\\x1c\\x05\\xa8\\x1dw\\xca\\xf5\\xe2\\x80\\xd8\\x17\\x99\\x95\\xb5\\xe0?\\xe1\\x9f\\xb6\\xd1,\\x18\\x126\\xb5\\x0b\\x17Si\\xb6\\x1bWs\\xbfjM7hG\\xefG\\x89_\\x0f\\xb6\\xd3\\xa7d\\xc6L\\xa9l',\n        constraints={'min_size': 48, 'max_size': 99},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x06r\\x1e\\xe0\\xe3D',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=98,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('b', 0, 0)),\n                                    (('a', 0, 1), ('c', 3, 3)),\n                                    (('a', 1, 0), ('b', 0, 1)),\n                                    (('a', 1, 2), ('a', 1, 0)),\n                                    (('a', 1, 3), ('c', 1, 0)),\n                                    (('a', 2, 1), ('b', 1, 3)),\n                                    (('a', 2, 1), ('b', 3, 1)),\n                                    (('a', 3, 1), ('b', 2, 3)),\n                                    (('a', 3, 3), ('a', 0, 2)),\n                                    (('b', 0, 0), ('b', 0, 2)),\n                                    (('b', 1, 2), ('b', 3, 1)),\n                                    (('b', 2, 1), ('c', 3, 2)),\n                                    (('b', 3, 1), ('b', 3, 0)),\n                                    (('c', 1, 2), ('b', 1, 3)),\n                                    (('c', 2, 1), ('a', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\U0005bced\\x03\u00d2 \\x85\u00a9\\U001071a1\\x94\\U000525d6\\x0f\\U000e8b9d\u00c1\\x0f\u00b1': -1.906324067053018e+104,\n       'P\\x10\u00e1\u00b6': 22,\n       '\u00e2\\U000cd4b5\u8bfc\\x12\u00d3\\U000c6259\u00fef\\U0001def7\u00fd\u00cb\\U000e626a\u00af\\x1b\\U000875c9\\U000c0f8d\ud84f\ude8bj\\x82': 25660,\n       '\u00e3': 1.8346020405339854e+69,\n       '\\U000e88ca\u00bb\u00f3': -3688,\n       '\u00ab\\x81': -153_878_365_501_301_351_277_027_441_531_125_872_971},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=8007, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U000ae368\\U000bdd42\\U000ae2de\\U000ae30a\\U000ae348\\U000ae300\\U000ae37d\\U000ae3ab\\U000ae33b\\U000ae32c\\U000ae3a5\\U000ae339\\U000ae3ad\\U000ae345\\U000ae3c6\\U000ae372\\U000ae3c6\\U000ae307\\U000ae391\\U000ae35c\\U000bdba7\\U000ae3a0\\U000c0756\\U000ae324\\U000ae33e\\U000ae2dc\\U000ae2e0\\U000ae3a9\\U000ae31a\\U000ae369\\U000ae2ed\\U000ae372\\U000c3695\\U000ae2e8\\U000ae2d9\\U000c132a\\U000ae2f6\\U000b467d\\U000ae2e0\\U000b1d90\\U000ae2e6\\U000ae396\\U000ae33c\\U000ae351\\U000ae349\\U000ae310\\U000ae376\\U000ae2f1\\U000ae328\\U000ae3b3\\U000ae2e2\\U000ae322\\U000ae3a3\\U000ae37b\\U000ae2eb\\U000ae34c\\U000ae382\\U000c1693\\U000ae3c2\\U000b7e67\\U000ae336\\U000ae33c\\U000ae38d\\U000ae34a\\U000ae355\\U000ae39d\\U000ae30f\\U000ae2fa\\U000b18c4\\U000ae316\\U000ae390\\U000ae2f7\\U000bdab0\\U000ae390\\U000ae368\\U000c406a\\U000ae32e\\U000ae377\\U000ae340\\U000ae396\\U000ae2f3\\U000ae3bd\\U000ae36c\\U000ae357\\U000ae34a\\U000ae33e\\U000ae2ea\\U000ae3ae\\U000c5591\\U000ae3a0\\U000ae354\\U000ae30d\\U000ae330\\U000ae377\\U000ae327\\U000ae2e1\\U000ae3a7\\U000ae3a0\\U000ae376\\U000ae355\\U000ae300\\U000ae2d9\\U000ae317\\U000ae380\\U000ae34e\\U000ae364\\U000ae2d6\\U000b6829\\U000ae2e0\\U000ae331\\U000be05b\\U000ae33a\\U000ae2e0\\U000ae2e7\\U000b8746\\U000be28e\\U000ae2d6\\U000ae342\\U000ae320\\U000ae313\\U000ae2dd\\U000ae37b\\U000ae386\\U000ae354\\U000ae2e1\\U000ae3b9\\U000ae360\\U000ae387\\U000ae323\\U000ae349\\U000ae2e2\\U000ae34d\\U000ae38e\\U000ae34a\\U000ae325',\n        constraints={'intervals': IntervalSet(\n             build_intervals([713429, 757597, 776387, 814253]),\n         ), 'min_size': 45, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=32665,\n        constraints={'min_value': -3_697_209_498_339_392_908,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud800\udcbc\ud800\udcbc\ud800\udc95\\U0001006a',\n        constraints={'intervals': IntervalSet(\n             build_intervals([65535, 282048, 342701, 426920, 492554]),\n         ), 'min_size': 3, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xddR%N\\xb2\\xd1t\\x15\\x90\\xe0 \\xf6\\xb5\\xbb',\n        constraints={'min_size': 2, 'max_size': 102},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=35106,\n        constraints={'min_value': 3882,\n         'max_value': None,\n         'shrink_towards': 76,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.8516926174375956e+16,\n        constraints={'min_value': -1.1090983111473172e-305,\n         'max_value': 7.153750556525455e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.8516926174375956e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8892283802604233},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0954483005722753},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-14,\n        constraints={'min_value': -124,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=-10447,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\U000bf9cb\u00d1',\n                     [UnicodeTranslateError('V', 0, 0, 'reason')]),\n      expected_traceback='\\x0f\\U0009494b\\x830\\x00D\\x8e\\U00096ec1\u00a6\\x13\\x88',\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-526582687, 1_767_455_299),\n       (-15237, -7_597_090_208_504_402_400),\n       (13902, 300)},\n      slice_comments={(-70, 26187): '',\n       (30413, -1_238_371_875): '\u00dds\\U0005ba1e(\\x05\u00f5\u00d5\\x05',\n       (-5_558_278_051_044_087_853, 24277): '\u00d2',\n       (-10448, -22664): '\\x81\u00a8\u00ac\u00d0|\u00d8\u00e7',\n       (90,\n        10480): '\\U000b248d\\x15\\x04z:t5\\x95!\u00d8\u00a6\u00aa\\U00107235\\U00069085\u00e4\\U0010fd94\\U000cd7f3\\U000f0430\u00ab/+w\u00aas\u00b1R',\n       (1024, 9697): 'False'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=83, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.44334133257443054},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.5255323201927388e+308,\n        constraints={'min_value': -2.652397202983266e+268,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.0907958523497875e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9999999999999999},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=66361,\n        constraints={'min_value': 65535,\n         'max_value': 75830,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=-45,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('b', 3, 2)),\n                                    (('a', 2, 1), ('a', 3, 0)),\n                                    (('a', 3, 2), ('b', 0, 1)),\n                                    (('a', 3, 3), ('c', 1, 3)),\n                                    (('b', 1, 2), ('c', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00ce\\U00078dbe\\x7fV1',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='9w\\x89\\x07\u00d9\\U00050059\u00a6g\u00c5\\x13\u00d4\\x11?\\U0001a6edB\u00d3',\n      has_discards=False,\n      target_observations={'\u00e1\u00a5\\x02\\U000d17d9': -41,\n       '\"\\U000a35a8\u00cc\\x13\\x8fY': -5.0359072733207944e+16,\n       '\u00e6FLO\u00f3': 6.94738918619127e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-18, 32652), (0, 1717), (1_699_094_652, -4132)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='other')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0011275821016170084,
          "overall:gc": 9.083945769816637e-06,
          "generate:args": 0.03469537920318544
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878942.559385
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-4363, context=(), group_elems=()),\n      nodes=(),\n      length=-83,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 2),\n                                     ('a', 3, 2)),\n                                    (('a', 1, 2), ('b', 1, 2)),\n                                    (('a', 2, 0), ('b', 3, 1)),\n                                    (('a', 2, 3), ('a', 3, 0)),\n                                    (('a', 3, 0), ('c', 0, 3)),\n                                    (('a', 3, 1), ('b', 3, 3)),\n                                    (('b', 0, 0), ('a', 0, 2)),\n                                    (('b', 0, 0), ('c', 2, 0)),\n                                    (('b', 0, 2), ('c', 0, 1)),\n                                    (('b', 0, 3), ('a', 3, 3)),\n                                    (('b', 0, 3), ('b', 1, 1)),\n                                    (('b', 1, 3), ('a', 3, 0)),\n                                    (('b', 2, 0), ('c', 1, 3)),\n                                    (('c', 0, 0), ('b', 2, 2)),\n                                    (('c', 1, 2), ('c', 0, 3)),\n                                    (('c', 1, 3), ('c', 1, 1)),\n                                    (('c', 3, 1), ('a', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('8$\\U0010731e',\n                     [UnicodeTranslateError('true', 0, 0, 'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=\"\\U0008a6c2'\\x03\u00e7\\U000faf53\\x05\\x14C\\x98a\u00c8\\x8e.\\x80|#\\x94\u00bd\u00a9\\x9c\",\n      has_discards=True,\n      target_observations={'\\x98\u00c4\u00c9\\x87\\U000fd938\u9fa6S\\x00H\u00a8({g': -2_465_582_012_062_838_246,\n       '_\\x88\u00dd\u00e5`\u00d0': 3.729540733496864e+16,\n       '': -4.272985641911608e+16,\n       '\\x9e': 1.5072788297549918e+98,\n       'j\u00b8\\U0003fa623\u00ab\u00ca\\U000f61e9\\U0004969ak2\u00ed\\U000835e3': -5.479887720011904e+238,\n       '\\U00035397\\x92\u00de\ud864\ude51>\\x01<\u00ca\\U00064499\\x00': -0.99999,\n       '\u00df': -5697},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-22946, -15),\n       (-8, 16528),\n       (24, -100),\n       (54, 14498),\n       (77, 7625),\n       (2069, 843),\n       (8840, -111_902_277_304_519_196_797_165_323_219_832_490_874),\n       (27235, -3064)},\n      slice_comments={(-6699, -26375): '\\x9f\u00d9\\x1cW',\n       (22370, -26746): '\\U000c2936\u00b3\\x1eZ'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-33, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -inf,\n         'max_value': 4.498409823260747e-50,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 7.319087487123207e-59},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=118,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud801\udca6\ud801\udc8f\ud801\udccb\ud801\udc78\ud801\udd45\\U000c9387\ud801\udcb9\ud801\udd11\ud801\udd37\ud801\udcf8\ud801\udc77\\U000104d4\ud801\udd04',\n        constraints={'intervals': IntervalSet(\n             build_intervals([66635, 845434])),\n         'min_size': 7,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.6156881264464432e+308},\n        was_forced=False,\n        index=None)),\n      length=-32047,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00a5\\U000e0231\\x1a',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-2535, -23138),\n       (-117, -5080),\n       (39, 5646),\n       (46, -1_706_879_758),\n       (8080, -9362),\n       (11730, -13117)},\n      slice_comments={(-121, 95): 'l4u,\\x1c\\x1c\\x9b\u00b9\\x85\u00ca',\n       (-21,\n        -8_071_659_536_184_103_371): '\ud835\udce3\ud835\udcf1\ud835\udcee \ud835\udcfa\ud835\udcfe\ud835\udcf2\ud835\udcec\ud835\udcf4 \ud835\udceb\ud835\udcfb\ud835\udcf8\ud835\udd00\ud835\udcf7 \ud835\udcef\ud835\udcf8\ud835\udd01 \ud835\udcf3\ud835\udcfe\ud835\udcf6\ud835\udcf9\ud835\udcfc \ud835\udcf8\ud835\udcff\ud835\udcee\ud835\udcfb \ud835\udcfd\ud835\udcf1\ud835\udcee \ud835\udcf5\ud835\udcea\ud835\udd03\ud835\udd02 \ud835\udced\ud835\udcf8\ud835\udcf0',\n       (300, 18894): '',\n       (15, -100): '%\\x19\\U000a90fdJ\\x9a',\n       (-79, 118): '\\U0008dca27\\x06',\n       (-10841,\n        -98_821_939_037_750_451_154_575_088_080_104_794_257): '\u00db\\U000a07fe\u00bf\\U0006e8f2\\U00100dc1\\x98\\x89\\x0e\u00a5',\n       (34, -25864): '\u00b0\u00a4r\u00fbAT\\U0010ec81',\n       (-32, 1_559_353_419): '[',\n       (9999, 27833): '\u00e7\u00fe',\n       (-80, -8949): '\u00c3\\x94\\U0003595eG'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=86, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\ud83c\uddfa\ud83c\uddf8',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [105853,\n                  212554,\n                  396202,\n                  545434,\n                  615383,\n                  688062,\n                  946159,\n                  1038750],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 23},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.117291123570344e+16,\n        constraints={'min_value': 2895315139788839.0,\n         'max_value': 6.640985474633043e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 13934.169204975802},\n        was_forced=False,\n        index=None)),\n      length=-19349,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 3),\n                                     ('c', 1, 2)),\n                                    (('c', 0, 1), ('b', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x9f\u00c5\ud875\udd1e,>\\x11T\u00b7': -6.687654219605453e+16,\n       '\\x07': -3.345717739001528e+16,\n       \"'\": -15394,\n       'OyR\\xa0': 9096,\n       '\u00e5': 581_814_768_407_729_032,\n       '': -6.087249285059752e+16,\n       '\\U000d343d\\x15\\x90R\u00a3\\U000ad00d\\x97\\x1e': -2.993209553345247e+68,\n       'z:': 65,\n       '\\U000ed690': 4.929570486833228e-52,\n       '\u00bc*\\U000f9231\\x0e?\\U000d569d': 8_208_208_991_305_279_664,\n       '\u00f9\\U0004ab3d\\U0008f177\\x8b\\U00075c52\\x81\\x0be\\x0b\u00d6$\\x91_/\\x8f\u00a3}\\U000c2abd\\x10(Ir\\x0e\u00c6$L\\x9a\\x18\\U000d886f': -93,\n       '\\x98': -0.5,\n       '\\x96\u00af\\U00053667\u00aa\\x89\u00eem\\x81': 8.484382152080244e-184},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-21264, -8974),\n       (-8178, 123_702_996_679_183_840_777_695_295_377_059_135_976),\n       (-107, 19818),\n       (-86, -2_199_856_377_260_061_921),\n       (47, 26929),\n       (404, 1024),\n       (1024, -1_329_872_891),\n       (7574, -23026),\n       (12972, -23542),\n       (13075, -19860),\n       (15352, 87),\n       (17160, 17382),\n       (18260, -26348),\n       (20612, 30380)},\n      slice_comments={(25820, -24156): '\u00f9~\\x16\\U00050a58\u00dd\u00d9k\\x8aE\\U000e7e80\u00f9\u00dd'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-9129561286120272828, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.375367806792139e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud87a\ude32\\U001055f5\\U0006fbff\ud87a\udebc\ud87a\ude53\\U0003b773\ud87a\udeb8\ud87a\udedf\ud87a\udeb4\ud87a\ude0f\ud87a\ude61',\n        constraints={'intervals': IntervalSet(\n             build_intervals([190986, 721061, 986730, 1114111]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0006ed6f\\U000db21a',\n        constraints={'intervals': IntervalSet(\n             build_intervals([453888, 527359, 784763, 1114111]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.8393767161625256e+16,\n        constraints={'min_value': 1.9,\n         'max_value': 3.402823466e+38,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.960464477539063e-08},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u7624\u76a5\u75d8\u7637\u75b5\\U00044668\u7622\u75e9\u761d\\U00052488\u75fa\u7659\u75e1\u7638\u75c0\u760a\ud81f\udcad\u75e9\u7663\u7693\\ue267\u769c\\U00060357\u75e1\u7666\u75c2\u767c\\U000635a2\\U00079edf\u75f3\u75f2\u7610\u75e4\u7614\u7667\u7626\ud803\ude74\u7682\u761f',\n        constraints={'intervals': IntervalSet(\n             build_intervals([30126, 594294])),\n         'min_size': 25,\n         'max_size': 92},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.007905819237657543},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.23386678302730562},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xc7b',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\udc50\\udc83\\udc47\\U000d7a39\\udca9\\udd0c\\U000b322a\\udce8\\udcae\\udcc2\\udd37\\udcba\\udc9d\\udc9e\\udc92\\udd18\\udc3f\\udc8a\\udd0a\\udc64\\udd0e\\U000cfdfe\\udd1a\\udd0a\\udc96\\udca8\\udc7a\\U000e11f2\\U000c1c32\\udcdc',\n        constraints={'intervals': IntervalSet(\n             build_intervals([56383, 239621, 611598, 939050]),\n         ), 'min_size': 30, 'max_size': 55},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'K\\xe0\\xa1`z\\xdb\\xb1\\xf7\\xef\\x1b\\x0f\\x1e\\xa4=\\xbf\\x83\\x18=\\xe8\\xfe;9\\x19o\\xd4t\"\\xfc\\xd2u\\x84\\x10\\x95AI\\x9e\\x8b$\\xcf\\xf5\\xf5\\x07O\\xb4\\xb5]\\xe0_\\x85\\x0elm\\xa4\\xdf\\x9e\\xa7W\\xaa\\xfb\\xfb\\x146If\\x8f\\xd6W\\xcd\\xd9\\x84\\xe5h\\xa3\\\\3\\xfc\\xe1\\x04\\xea\\xadT\\x16p\\x01@`\\xa4\\xeb\\x0c\\x7feF\\x94\\xd3D\\xf7wj\\x8f\\xb4/\\x82\\xc7$\\x88Y\\xe7@\\x8d!\\xc6\\xd6\\x1f\\xcfA\\x98*',\n        constraints={'min_size': 27, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"s\\x80\\xb0\\x06\\xc0w\\xd0S\\xd0\\x91-\\xf4\\x11\\xa2G\\x9f\\xb5\\xba\\x1eV\\x96\\x8c\\xaa'\\xd9\\x8e\\xc5[\\xb5\\x87\\xa5`?\\x92\\x01G\\x99\\xf0\\xd4>\\xdb\\x80n\\xc7m*7\\xc9sH\\xe7\\x8d\\xf20\",\n        constraints={'min_size': 36, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7242183207293128},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.5543912869642552},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 3.8538769362462453e-267},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-5.205240533188858e+16,\n        constraints={'min_value': -inf,\n         'max_value': 6.445208179661719e+57,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 9.139380978340963e-24},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x06QY\\xc3\\xc3\\x1br\\\\\\xc4\\x8c\\x11',\n        constraints={'min_size': 10, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'.hypofuzz.corpus',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u488d\u487c\\U000ee270\u48c0\\U000eb126\u487c\\U00094af9\u484c\u48c3\u4856\u488e\\U000c141c\u485f\u4829\u4858\\U0009cd91\u487b\u4840\u47d4\u480e\u484f\\U000bf437\u47de\u48a1\\U00015364\u4864\u48c2\u485d\u47d8\\U000d6047\u47dd\u47e4\u47f3\u485a\u4810\u47e2\\U000deac6\u486f\u4899\u48be\u481d\u484e\u4820\\U000ba91e\\U000e96b7\u480a\u48aa\u47eb\u4887\u47f9\u483b\\U000b5935\u4843\u4885\u4885\u4897\\U000a4668\u485e\u47d9\\U000c4b5e\u488d',\n        constraints={'intervals': IntervalSet(\n             build_intervals([18382, 219303, 593157, 976066, 1114111]),\n         ), 'min_size': 32, 'max_size': 132},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=20481,\n        constraints={'min_value': -5061,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=5.366504031970033e+77,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 4.515668131835058e+16},\n        was_forced=False,\n        index=None)),\n      length=24663,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 1, 0),\n                                     ('a', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\x95\\U0001a8ecy\u00aeR\u00a5\u00e5',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'': -4.192086943556888e+219,\n       'perf_counter': 1.6175105914475172e+16,\n       '\\U00043eda\u00a1\u00f4\\x87': 115,\n       '\\U000f06b1\u00a9\u00de\u00e9\\U000c121aV\\x03-u\u00b8r\\x0bj': 1024,\n       '\\x99\u00cd\\U000a16fa\u00c7\u00ce7\\U0006048a ~': 3571,\n       '\u00d2\u00e0\\U00054fa8\u00f0\u00a6\\U0010cb45\\U0004d427\\\\\\U00099274\\U000118f5': 20891,\n       '$\u00df\\x12\\U000ffcfb\u00d35B\u00d3\\U000556fe\\x9d': 4.970046225778256e+16,\n       '\\U0003bca1': -30733},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-31_921_056_431_681_257_157_954_798_158_369_935_863,\n        -28949),\n       (-2_017_252_542, -15594),\n       (-1_029_087_116, 15912),\n       (-24225, -25709),\n       (-22974, 69),\n       (-17810, 5571),\n       (-8375, -14603),\n       (-3164, 39),\n       (-97, -5055),\n       (-79, -9243),\n       (-11, 1_491_336_697_335_074_138),\n       (14, 8192),\n       (29, 8_896_765_052_034_510_162),\n       (33, -114),\n       (101, -7515),\n       (121, -75),\n       (404, 18335),\n       (13983, -106),\n       (28879, 2_013_056_696),\n       (868_687_001_874_389_238, 26205)},\n      slice_comments={(-8301, -12052): '',\n       (-7, 2_362_270_937_328_203_032): '\\U00073de0\\U00054e77',\n       (-9172, -19179): '\\U000ae5ea\u00cd\\x13\\x0b\u00c0',\n       (-81, 300): '<b\ud820\udfe8\u00b3`',\n       (3656, 404): '\u00a5\\x8b\u00aa\\U000e7c36S\\x8d'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=65535, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U0003ef0b\\U000739aa\\U0003eef6\\U0006123a\\U0003ee98\\U0003ee91\\U0003eefb\\U0003eeb1\\U0003ef19\\U0003ee77\\U0003eeb5\\U00077da8\\U0003ee92\\U0003eedf\\U0003eef5\\U0003ef23\\U0003eee1\\U0003eea4\\U0003eee5\\U0003ee86\\U0003eee4\\U0003ee8b\\U000631af\\U0003ee7e\\U0004629b\\U0003eecf\\U0007b2c4\\U0003ef6f\\U0003eedb\\U0005cc6f\\U0003eeb9\\U0003ee9c\\U0003ee76\\U0003eef8\\U0003ef48\\U0003eed4\\U0003eead\\U0003eed5\\U0003ef65\\U0003eebf\\U00072c64\\U0007e984\\U0003eeee\\U000488a8\\U0003ef62\\U0003ef05\\U0006c4f6\\U0003ee9d\\U0003eea7\\U0003ef6c\\U0003ef6f\\U0003eecf\\U0003ef16\\U0003ef2f\\U0003eeea',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [257652, 313076, 356465, 524374, 565055, 621652, 871420],\n             ),\n         ), 'min_size': 18, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),),\n      length=-22329,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 2),\n                                     ('a', 2, 0)),\n                                    (('a', 2, 3), ('a', 0, 0)),\n                                    (('a', 3, 0), ('b', 1, 2)),\n                                    (('c', 0, 1), ('a', 0, 0)),\n                                    (('c', 2, 2), ('a', 1, 2)),\n                                    (('c', 3, 1), ('a', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00ef\\n\u00b4X\\x95', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'y+B\\x91\\x19\u00b6': 2.4632532383071428e+16,\n       '\u00d2\\x82\\U00041b10\\x07\u00e8': -113,\n       '\u00db\\U000cbf2e': -1.2826549745971296e-167,\n       '\\U000780d4\\x8a\\U000bddcb\u00b0': 1000,\n       '\u00ae\\U0008c4aa$\u00a1\\x90': 26989,\n       'inf': -4.832285634691763e-288,\n       '\u00c2\u00cf\\U000d3914\\x99}8': -2.220446049250313e-16,\n       '\\x8a': 0.5,\n       '\u00d7\\U0009758b\u00b6\\U000dfff1\\x18\u00fd\\U00103c44': -80,\n       '': inf,\n       '\u00feX*\\U000b2b4c\\U0003f825\\U0006865c{': 7302,\n       '\u00a9\\x85\u00f3E': 17665,\n       '\u00e4#': 8.442707125473547e-244},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-13704, -3461), (14233, -7659), (879325587, 9999)},\n      slice_comments={(83, -105): '\\x8aw\\x8c(',\n       (-98_012_767_363_111_864_057_121_242_637_850_920_801, 61932955): '',\n       (15471, 4392): '\\U0006bf45\u00ed{\ud868\uddc5',\n       (16079, -122): 'F\\x073\u00c2\\U0006cbdf\\x8e\u00ec\u00c8\\x83',\n       (2569, -27996): '\u00f0)'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=829, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value=\"'\u00bc\\x13\\U00048da0\u00b1-\\U000db7aa\",\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  41486,\n                  197885,\n                  203772,\n                  264221,\n                  326546,\n                  353107,\n                  375776,\n                  382342,\n                  424961,\n                  486942,\n                  501432,\n                  569658,\n                  643833,\n                  731871,\n                  857875,\n                  884709,\n                  999494,\n                  1079192],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-18302,\n        constraints={'min_value': None,\n         'max_value': 79,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xd3\\xb5&j\\x1ao\\x0f\\xfa^h\\x03\\xdb\\xbfHBJ\\xd6\\xc3$\\xc7\\x8f\\xf9\\x06\\x8c\\xdf\\x16\\x1d\\x0e=D\\xd5^y\\x06\\x9b\\xae\\xfb\\xb2\\xf7\\xd4\\xc0\\xe5',\n        constraints={'min_size': 39, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.09646796567670893},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-66,\n        constraints={'min_value': -4338,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u6386\u62f2\u637b\u6306\ud800\ude88\u6370\u62ec\ub7cd\u62c0\u6304\u6311',\n        constraints={'intervals': IntervalSet(\n             build_intervals([25279, 203571, 904334]),\n         ), 'min_size': 2, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -9190930439549296.0,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.215864837758554e+305},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.815283533805067},\n        was_forced=False,\n        index=None)),\n      length=-1_468_048_573,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('c', 2, 0)),\n                                    (('b', 0, 1), ('c', 2, 2)),\n                                    (('b', 1, 0), ('b', 1, 0)),\n                                    (('b', 3, 2), ('a', 1, 0)),\n                                    (('c', 0, 0), ('b', 3, 2)),\n                                    (('c', 1, 0), ('a', 1, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\U00108e95',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(108, 15937),\n       (4075, 15807),\n       (25269, -131_262_935_169_123_577_686_460_442_520_806_842_754),\n       (642786862, 50)},\n      slice_comments={(-6365, 6167): 'c',\n       (50, 1000): '\\\\\u00c2\u00c0',\n       (-16628, -24697): '\u00bcQ)\\xa0\\x1cc\\x8f',\n       (-266, 27680): '\\x12'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x108be8cb0>, min_size=0, max_size=inf).map(tuple), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text())), has_discards=one_of(nothing(), nothing(), booleans()), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), length=one_of(nothing(), nothing(), integers()), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason'))))).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.00227929197717458,
          "overall:gc": 0.0,
          "generate:args": 0.1285400822525844
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878913.339519
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=16340, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=14741,\n        constraints={'min_value': 14506,\n         'max_value': 27044,\n         'shrink_towards': 7628,\n         'weights': {23264: 0.004726282298247166,\n          22752: 0.012308544486012304,\n          20970: 0.01922726395890947,\n          26888: 0.009603514134459801,\n          22542: 0.02716725328391769,\n          23515: 0.011760901506236411,\n          24186: 0.03890854184718868,\n          14741: 0.053987781732260424,\n          21603: 0.02842815415078876,\n          24571: 0.03911174625337803,\n          25323: 0.045628396771974826,\n          15929: 0.030060870097469695,\n          16018: 0.0012133007096071513,\n          25736: 0.02173818289447004}},\n        was_forced=False,\n        index=None),),\n      length=3833,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('b', 2, 2)),\n                                    (('a', 1, 3), ('c', 2, 0)),\n                                    (('a', 2, 3), ('b', 1, 3)),\n                                    (('b', 0, 1), ('c', 2, 0)),\n                                    (('c', 2, 1), ('b', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('?\u00ba\\U000b01c8\u00efY\\U000f19a3H9',\n                     [ExceptionGroup('0/0',\n                                     [UnicodeEncodeError('unknown encoding',\n                                                         '',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\u00ba',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\\x90\\U000b52e0\u00c3\\x96\u00edP\u00fa\\U00089ed0\\U00082689\\U00099097\"<',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('\\x8f',\n                                                     [ExceptionGroup('M\\U000ef645',\n                                                                     [ExceptionGroup('_\\x0e\u00b6\\U000c4054\\U0009fd2b\u00d2\u3850\\x80a\\x89\\U000d062fc\u00dc\\x9c\u00cf\u00e5\\x05',\n                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeTranslateError('',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      ExceptionGroup('LPT1',\n                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      ExceptionGroup('\\U000c35ff\u00e4',\n                                                                                                                     [UnicodeTranslateError('_\u00d8\\U000429d5\u00c6',\n                                                                                                                                            0,\n                                                                                                                                            0,\n                                                                                                                                            'reason')]),\n                                                                                                      ExceptionGroup('*\\U000f322a\u00bf\\x04\\x95\u00df',\n                                                                                                                     [ExceptionGroup('',\n                                                                                                                                     [ExceptionGroup('',\n                                                                                                                                                     [ExceptionGroup('\\x9b',\n                                                                                                                                                                     [ExceptionGroup('\u00a9',\n                                                                                                                                                                                     [UnicodeTranslateError('\\U000cc578\u00cd\\U00078752\u00e0\\U0009c673*',\n                                                                                                                                                                                                            0,\n                                                                                                                                                                                                            0,\n                                                                                                                                                                                                            'reason'),\n                                                                                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                                                                                         'C\u00d3pd\u00bf\u00a4',\n                                                                                                                                                                                                         0,\n                                                                                                                                                                                                         0,\n                                                                                                                                                                                                         'reason'),\n                                                                                                                                                                                      UnicodeTranslateError('\u00baV\\x95',\n                                                                                                                                                                                                            0,\n                                                                                                                                                                                                            0,\n                                                                                                                                                                                                            'reason'),\n                                                                                                                                                                                      UnicodeTranslateError('\\x03\\U000d000cw',\n                                                                                                                                                                                                            0,\n                                                                                                                                                                                                            0,\n                                                                                                                                                                                                            'reason'),\n                                                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                                         b'',\n                                                                                                                                                                                                         0,\n                                                                                                                                                                                                         0,\n                                                                                                                                                                                                         'reason')])]),\n                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                         b'',\n                                                                                                                                                                         0,\n                                                                                                                                                                         0,\n                                                                                                                                                                         'reason')]),\n                                                                                                                                      UnicodeTranslateError('\u00f7\ud879\udc88\u00b2Mz\u00e5\\x08\\x90\u00c4\u00e0l\\U000efd6f',\n                                                                                                                                                            0,\n                                                                                                                                                            0,\n                                                                                                                                                            'reason'),\n                                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                                         'q\\x0f\u00a9',\n                                                                                                                                                         0,\n                                                                                                                                                         0,\n                                                                                                                                                         'reason'),\n                                                                                                                                      UnicodeTranslateError('',\n                                                                                                                                                            0,\n                                                                                                                                                            0,\n                                                                                                                                                            'reason')])]),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         ':',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason')]),\n                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                         'v\\x0e\\U00073367\\x01\\x0b\\x88\u00da\\U00058860\ud86f\ude82&',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason')]),\n                                                                      UnicodeTranslateError('+\\U000e63f1',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      ExceptionGroup('!',\n                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                         '[',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason')])]),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '\u00e6\\U0009fbd97\\U0003d037G\\x08\u00acP\u00da\\x8a\u00b6',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '_xml',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')]),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      UnicodeEncodeError('unknown encoding',\n                                         'D\u00be&\u00aa',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='\u00fe\\U0010a4d2\u00dbE\u00bd',\n      has_discards=True,\n      target_observations={'\u00f9\\U0010a5a6!?\u00d4': -1.2416034694318976e+16,\n       '': -93,\n       '\\x8a': 1000,\n       '\\x84': -2.5075888689780956e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-199_122_587_146_692_527, -38),\n       (-38, 0),\n       (24, -19),\n       (1841, 62),\n       (25096, 16457)},\n      slice_comments={(3818, 48): '\u00dd0',\n       (-13411, 8450): '\\U0010574fkl',\n       (5_274_830_940_161_068_498,\n        9999): '\u00b1\\U0006fdd0M\u00a8\\U00015c13\\x1b\\U000719cc6&j',\n       (23094, 25): '\u00af?\\x8e\\x00l*X\u00c3\\U000578a5O\\n\\U0004244f\\x95s\u00a2',\n       (8513, 10142): ':\\x94Lq',\n       (-28289, 27905): '\u00fb\\x12f \\x96\u00c9FJR\\x85\\U00088d29\u00d5'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=30629, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'(\\xc0\\x13!\\xca1I\\xf30\\xaf\\xc6\\x99\\xe3\\x95M\\xa0\\x8c9\\x0f\\x86\\x9f\\x15\\xfc\\x9byq\\xde\\xcf\\x11\\x91K\\xf75\\xec\\xa8\\xcb.\\xf2\\x95\\xedH\\x98\\xe0\\x00\\x95n\\xcd\\xa4\\xfcCa\\x84h\\xba\\xf8{\\x86\\xe6\\x03\\xd7',\n        constraints={'min_size': 43, 'max_size': 143},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=32062,\n        constraints={'min_value': 27901,\n         'max_value': 32697,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9772661304447632},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud860\udf18\ud860\udfbf\ud860\udfb0\ud860\udf4a\ud860\udf76\ud860\udfa3\ud860\udff5\ud860\udf53\ud860\udfce\ud860\udf93\\U000480b4\ud860\udfaf\ud860\udfaf\ud860\udff9\ud860\udf2a\ud860\udfe8\\U000484b1\ud860\udfd1\ud860\udf45\ud860\udfe9\ud860\udf70\ud860\udf7c\ud860\udf19\ud860\udf8d\ud861\udc02\ud860\udf3f\ud860\udf8c\ud860\udf80\ud874\udf62\ud860\udf94\ud860\udfde\ud860\udf30\ud860\udfa0\\U00049291\ud860\udff3\ud860\udfc3\ud860\udf18\ud860\udf69\ud860\udfe4\ud860\udf85\ud860\udfc8\ud860\udf79\ud878\udd45\ud860\udfca\\U0003de53',\n        constraints={'intervals': IntervalSet(\n             build_intervals([164621, 348006, 826135]),\n         ), 'min_size': 9, 'max_size': 109},\n        was_forced=False,\n        index=None)),\n      length=-1133,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 0),\n                                     ('c', 0, 3)),\n                                    (('a', 3, 1), ('c', 3, 1)),\n                                    (('b', 0, 2), ('c', 0, 3)),\n                                    (('c', 1, 0), ('c', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\\U00083995',\n      has_discards=True,\n      target_observations={'\\x97\u00fd': 27955,\n       '\u00d0': -8.604870635336661e-97,\n       '\u00f8': -15040},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-65, -8474), (58, -1_675_095_232_676_607_623), (60, 28894)},\n      slice_comments={(-10940,\n        -7205): '\\U000fd99a;\u00c0D\\U0009b51f\\x05\u00de\\xa0\\x8e\u00ef}',\n       (-3_218_593_589_750_446_639, 65535): '\\U000e266d\\x87'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=119, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.7965305094159902},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-8_312_092_510_882_370_890,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -44,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=-17982,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 0),\n                                     ('a', 2, 0)),\n                                    (('a', 2, 2), ('b', 2, 0)),\n                                    (('c', 0, 1), ('b', 2, 2)),\n                                    (('c', 1, 0), ('b', 3, 3)),\n                                    (('c', 1, 2), ('b', 0, 3)),\n                                    (('c', 1, 3), ('b', 2, 0)),\n                                    (('c', 2, 1), ('b', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\x97 R\"\u00df\\x08\u00a1\u00ed\\U000e523d\\U000c5d13\\x10{_\\ued66\\xad\\U00036e6e',\n                     [ExceptionGroup('\\U00057902\\x9f7\u00f1',\n                                     [UnicodeEncodeError('unknown encoding',\n                                                         'lorem \u0644\u0627 \u0628\u0633\u0645 \u0627\u0644\u0644\u0647 ipsum \u4f60\u597d1234\u4f60\u597d',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('\u00aa(',\n                                                     [UnicodeTranslateError('\u00bfr\u00c2\u00c1',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeTranslateError('\\x01\\x88',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '\\U000adb07b\\x142\ud852\udfcd\u00d0\\x87\u00b7',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeTranslateError('\\x17\\x0b\u00e1',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         'p\\x8d\\x0c',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')]),\n                                      UnicodeTranslateError('9',\n                                                            0,\n                                                            0,\n                                                            'reason')]),\n                      UnicodeEncodeError('unknown encoding',\n                                         '',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('\\x08\\x1d\\U000790fe\\U000ad621\u00c7',\n                                     [ExceptionGroup('\u00e9\\x98\\U000c5265\\U000c5887(c\u00fd\\x06\u00ea>Q\\U0003f40b\u00a8\u00c9.\\x91\u00be\u00fe\u00b9',\n                                                     [ExceptionGroup('\\x08\\U0003513e\u00e5\\U0007a1bb_\\U000da49c:K',\n                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')])]),\n                                      UnicodeTranslateError('\ud83c\uddfa\ud83c\uddf8',\n                                                            0,\n                                                            0,\n                                                            'reason')])]),\n      expected_traceback='\u00e2\\x89\u00fc\u00ec\u00e9',\n      has_discards=True,\n      target_observations={'': -8683,\n       '\u00a4\\U000667b0R\\x02\u00d7': -5.0516780947425544e+16,\n       '\u00b7\\U0006b4c1\\U000b6998': -4.992933185869116e-83,\n       ']': 32563},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-29483, 30744),\n       (-15348, -22),\n       (-8232, -20967),\n       (-4, -2783),\n       (9, -15694),\n       (86, 7525),\n       (119, -8725),\n       (15467, 65535)},\n      slice_comments={(759, -26319): '\\x0c\\x80'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=404, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-7.000349929187938e+16,\n        constraints={'min_value': -inf,\n         'max_value': 5.533086281667409e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1874529760566556.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-4.956316639366171e+16,\n        constraints={'min_value': -inf,\n         'max_value': -4.9563166393661704e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.63110255571285e+16},\n        was_forced=False,\n        index=None)),\n      length=23483,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('a', 1, 0)),\n                                    (('a', 2, 1), ('a', 1, 1)),\n                                    (('b', 0, 0), ('c', 3, 0)),\n                                    (('c', 0, 2), ('a', 2, 3)),\n                                    (('c', 3, 2), ('c', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         'false',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'B': -148_589_480_134_653_071_202_002_147_859_603_255_163,\n       '\\x8c\u00d2\u00ae\u00b8\\x8d': -3.4114704689757837e+217},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-718_160_796_017_526_652,\n        76_412_814_223_805_486_492_731_997_329_951_044_580),\n       (-2_061_029_991, -82),\n       (-31550, 25789),\n       (-18291, 86),\n       (-12765, -2_047_365_849),\n       (-9333, -53),\n       (-8348, -1_148_552_788),\n       (-7652, 28530),\n       (-7592, 22471),\n       (-354, 10597),\n       (-292, 8364),\n       (-79, 23092),\n       (-73, 2240),\n       (75, -6592),\n       (7232, -17507),\n       (9794, 7),\n       (26095, -61),\n       (65535, 13057),\n       (6_030_135_140_809_495_030, 20273)},\n      slice_comments={(-8_514_129_533_876_048_040, 1000): '\\x8f{\u00b8\u00d3\\x1a',\n       (300, 2_035_423_877): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-21, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\u012d\\U00099336\u021c\u01de\u0161\u01e3\u0199\u0213\u015b\u014c\u01b8\u019c\u01ac\u0171\u01eb\\U000337f1\u019e\u017e\u0197\\U000c57d6\u019e\u013e\\U000ac86a\u01b2\u019b',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [300,\n                  19895,\n                  76936,\n                  120265,\n                  120483,\n                  173622,\n                  191148,\n                  231554,\n                  547551,\n                  745378,\n                  786953,\n                  846754],\n             ),\n         ),\n         'min_size': 25,\n         'max_size': 125},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=5.6974387294735144e+16,\n        constraints={'min_value': 5.960464477539063e-08,\n         'max_value': 1.4536626785129626e+308,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.5},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8312209059213476},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.7364327121880626e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x8c\\xcdP\\xf8x\\x13h\\\\\\x1787(y\\x9c\\x067\"T\\xca#\\x9b\\x9db/01\\xdd\\x8c\\xa4.\\xc0\\x7f',\n        constraints={'min_size': 25, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=-17129,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 3),\n                                     ('a', 1, 3)),\n                                    (('a', 3, 1), ('c', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00a6',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='seed',\n      has_discards=True,\n      target_observations={'': 2.531722641301547e+16,\n       'O\\U001083d4\\U000c3654': -30467,\n       '\u00e0CZ\u00f0': -20650,\n       '\u00b0\\x9a\\x88{c%\\U000c7a80\\x94\u00bc': -5400902,\n       '\\x14\\U0001ac72': -1.3213408938407484e+55,\n       'U%\\x1d\u00d0\ud851\udc37': -117,\n       '\u00fd\\t\u2aed\ud85c\ude3dN': 0.05,\n       '\\x87': 3070,\n       'Infinity': 22146,\n       '\\xa0\\x1d\\U000ba0ed#A\\U00064b28C\"': 29518,\n       '@': 5.094770241228117e+108,\n       '\u00e6\u0153\u00c6\u0152\ufb00\u02a4\u02a8\u00df(\u256f\u00b0\u25a1\u00b0\uff09\u256f\ufe35 \u253b\u2501\u253b)': -2.26855224099217e+16,\n       '\u00c2\\U00038078': 28253,\n       '\\x1a\u00e0.\u00b5\u00b3\\x15\\U000e502e\\U0005a55a\u00a8\\U000c9696\u00de\\x8f\\x85\u00cf': -5542},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_853_023_295, 5_573_152_357_561_319_683),\n       (6028, -7_959_513_898_436_162_855)},\n      slice_comments={(31226, -22642): 'Q\\x93',\n       (-8457, 1024): '',\n       (13, 8192): '\\U000d802e\\U00051cb9',\n       (404, -1_279_255_500): '5!'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-2036420960, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xdem\\x80',\n        constraints={'min_size': 0, 'max_size': 23},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'#\\xad\\x80\\x9a\\x8d',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'1`\\x8b\\xa9+\\xf3\\x9e',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-36,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 0),\n                                     ('a', 1, 3)),\n                                    (('a', 1, 0), ('a', 3, 2)),\n                                    (('a', 1, 2), ('c', 3, 2)),\n                                    (('b', 0, 0), ('a', 1, 1)),\n                                    (('b', 0, 1), ('a', 3, 0)),\n                                    (('b', 0, 2), ('a', 1, 1)),\n                                    (('b', 2, 1), ('c', 3, 1)),\n                                    (('b', 3, 1), ('c', 0, 0)),\n                                    (('b', 3, 3), ('c', 1, 2)),\n                                    (('c', 1, 0), ('b', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='m@\u00b2\u00a6\\U000a84f3\u00d6\u00bb\u00da\\U0007de88R\u00de\u00ee\u00c5\\x84\\U000a8099\\x05\u00a2',\n      has_discards=False,\n      target_observations={'\\x06': 794,\n       '\u00d6\\U00040a26\u00b3\\U00046280H\ud843\ude25': -5177733090118888.0,\n       '\\U0006373b': -1.0344898578868907e-168,\n       '\u6105\\U00050f70\u00d95\\nT8\\x0e\\x0c\\x91': -3.627048699955572e+16,\n       '\u00e9}\\x99': 2.688917555153584e-293,\n       '\u00b6i': -59,\n       '\u169b\u1684\u1693\u1690\u168b\u1692\u1684\\u1680\u1691\u1684\u1682\u1691\u168f\u1685\u169c': 6.501002383880373e+16,\n       '\\x996\u00bf': -1.852371612911108e+193},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_249_401_743_310_445_703, -22962),\n       (-1_351_233_518, -3_627_300_481_352_291_780),\n       (-8798, 10708),\n       (22045, -27674),\n       (24832, 404)},\n      slice_comments={(-27,\n        131_649_771_465_910_150_473_993_870_520_375_269_638): '\u023a',\n       (-77_536_849_608_992_605_158_251_401_671_194_937_995, 11892): '8',\n       (-13047, -1_467_462_822): '\u00c6',\n       (69, 22753): '\\U0005a1c4',\n       (29855, -61): 'OO\\x9a\u00d5\ubbcdP',\n       (817676061, -50): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-648377037, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.45679427695019303},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud84d\udec2\u3348',\n        constraints={'intervals': IntervalSet(\n             build_intervals([12889, 330926])),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-29,\n        constraints={'min_value': -58,\n         'max_value': 58,\n         'shrink_towards': -58,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=-3926,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 1),\n                                     ('a', 0, 2)),\n                                    (('b', 0, 1), ('b', 1, 0)),\n                                    (('b', 1, 1), ('c', 0, 3)),\n                                    (('b', 3, 2), ('c', 2, 1)),\n                                    (('c', 0, 2), ('b', 0, 2)),\n                                    (('c', 1, 1), ('a', 2, 3)),\n                                    (('c', 1, 3), ('c', 0, 0)),\n                                    (('c', 2, 0), ('c', 1, 2)),\n                                    (('c', 2, 2), ('b', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\u00a7\u00e3S\u00b0u\\U000e70d0\u00ea\u00e7\\U000f422a\\x08\\U0007f299\\x90\u00eb\\U000fbc9e\\x11w': -79,\n       'x': -1.2051025941440917e+51,\n       '\\U000a95d6\u00e3': 35,\n       '': -779448151,\n       '\\U0006f76a\u00c6': -116,\n       '\u00b7\ua8ed\\x9d': 17271,\n       '\u00f7N\\U00083d22\\x98': -3391,\n       '\\x05\\x88\\x82': 18961,\n       \"b\\x1b+\\x99\\U00106d3b\\U000ddebd\\x84N\u00b7a \u00be\\x1a\u00bc\\x8a\\U000f3f67\u00cco'a\ud7e0\u00a8\\U0010d18f\\x98D\\U000c024aA\\x04\\U00033b08\u00d4q\u00b8\\x81=\u00ce\\x05\": 35,\n       '\\x0c0\\U0008222e\u00be\u00b6\\x80': -1.7976931348623157e+308,\n       '\\x92': -1.0997104611106884e+16,\n       '_\u00b2\u00d8': 5340619634498078.0,\n       '\u00de\\U0007b778': -1.2478857192824025e-222,\n       '\u00ef\\x98': -1.8690861981854492e+16,\n       '\\x87\u00f9\u00d7\\x19\\U0010695c\\x86\\U0008da0d': 6.206659068209602e+16,\n       '}I\u00b5': -1.2678985978686984e+16,\n       '--host': 1024},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(32641, 1_758_483_102)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1275544326, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.3562109043445374e+266},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.6912989196431024},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000a2733\\U0007e89a\\U0007e94f\\U0007e96d\\U0007e91e\\U0007e89c\\U0007e971\\U0007e97a\\U0007e8ff\\U0007e8a9\\U0007e8e3\\U0007e8c1\\U0007e92b\\U0007e91f\\U0007e951\\U0007e944\\U000e1a96\\U000d40a7\\U0007e8a6\\U0007e93e\\U0007e8e9\\U000e6cc0\\U000e2745\\U0007e8fb\\U0007e89a\\U0007e8fa\\U0007e8c7\\U0007e922\\U000d25da\\U0007e8d4\\U0007e8f3\\U000c9bd1\\U0007e8e7\\U0007e8e8\\U0007e989\\U0007e8e3\\U0007e96a\\U0007e93c\\U0007e966\\U000d4a5a\\U0007e8d2\\U0007e935\\U0007e96c\\U0007e980\\U0007e93b\\U0007e92a\\U0007e937\\U0007e899\\U0007e8e1\\U000d06b6\\U000a6402\\U0007e89d\\U0007e8c3\\U0007e8de\\U0007e8ac\\U0007e8af\\U0007e979\\U0007e971\\U0007e89a\\U0007e988\\U0007e8a0\\U000dd920\\U0007e911\\U0007e989\\U0007e983\\U0007e926\\U000e7625\\U0007e8bf\\U0007e956\\U0007e953\\U0007e8d6\\U0007e908\\U0007e982\\U0007e990\\U0007e907\\U0007e8da\\U0007e8e6\\U0007e8cb\\U000b6d1e\\U000dba58\\U000ed6da\\U0007e991\\U0007e8bb\\U000cc7b6\\U0007e959\\U000da718\\U0007e94b\\U0007e8c8\\U000ba4c5\\U0007e940\\U000cc8e4\\U0008b7d1\\U0007e907\\U0007e963\\U0007e950\\U0007e942\\U0007e8f7\\U0007e912\\U0007e8ea\\U000a7975\\U0007e8bc\\U0007e901\\U0007e96b\\U000be9aa\\U0007e8bd\\U0007e8bb\\U0007e90d\\U000e43de\\U0008ee13\\U0007e8cd\\U0007e960\\U0007e970\\U00088147\\U0007e8af\\U0007e94f\\U0007e92d\\U000b2d0c\\U0007e8c5\\U0007e94e\\U0007e8df\\U0007e8a3\\U0007e8ac\\U0007e8a1\\U0007e956\\U0007e899\\U000bbe21\\U0007e8a1\\U0007e950\\U0007e8b2\\U0007e89d\\U000b7c8d\\U000db2c4\\U000baacd\\U0007e8ed\\U0007e8c1\\U0007e962\\U0007e8ac\\U0007e8e3\\U0007e914\\U0007e92b\\U0007e8eb\\U0007e8f8\\U0007e893\\U0007e90d\\U0007e922\\U0007e8db\\U0007e892\\U0007e91d\\U0007e8d2\\U0007e8fd\\U0009eff7\\U0007e8c1\\U0007e916\\U000cbe5d\\U0007e8aa\\U0007e8aa\\U000ecf86\\U0007e929\\U0007e93d\\U000d4f60',\n        constraints={'intervals': IntervalSet(\n             build_intervals([518290, 989148, 1114111]),\n         ), 'min_size': 50, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.220446049250313e-16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=4.371902465803604e+307,\n        constraints={'min_value': 5.975431211834936e+269,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 4.371902465803604e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=77_770_745_445_009_824_290_088_428_069_031_211_218,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -8_968_847_348_700_982_755,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=5936,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('a', 3, 0)),\n                                    (('a', 2, 3), ('a', 0, 2)),\n                                    (('a', 2, 3), ('b', 0, 0)),\n                                    (('a', 2, 3), ('b', 0, 2)),\n                                    (('b', 0, 0), ('c', 1, 3)),\n                                    (('b', 1, 0), ('a', 1, 1)),\n                                    (('b', 1, 2), ('a', 0, 0)),\n                                    (('b', 1, 2), ('b', 0, 3)),\n                                    (('b', 1, 3), ('a', 1, 3)),\n                                    (('b', 2, 3), ('c', 2, 2)),\n                                    (('c', 0, 2), ('b', 0, 0)),\n                                    (('c', 1, 1), ('b', 3, 1)),\n                                    (('c', 1, 2), ('c', 2, 0)),\n                                    (('c', 2, 1), ('b', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\U0003942a\\x9b\u00e1': -2009,\n       '\u00a9\ud885\udd37\u00b1\\U000cd160\\U0010bc8e': 11760,\n       '': -nan,\n       '\u00de\u00ff\\x19\u00a3\\U000a79b7\u00e6p\u00e1\u00ae/': 69},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-93_609_877_205_480_173_496_273_035_219_175_586_480,\n        -31958),\n       (-25660, -1316),\n       (-118, 114),\n       (-91, -29133),\n       (-90, -56),\n       (-18, -29),\n       (11, 17654),\n       (112, 27821),\n       (2769, -15672),\n       (23863, -23),\n       (28790, -49),\n       (52_739_218_804_545_675_624_228_803_798_294_566_776, -9965)},\n      slice_comments={(-98, 28586): '\u00b1', (24603, 8425): '\u00ab\\U0004d9d0'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-38, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9573851469112442},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x1eM\\xfe',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.5},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x95\\xdfe\\xa0\\xea-\\x85T\\xd9\\x0e\\xf7',\n        constraints={'min_size': 6, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=6853,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 1),\n                                     ('b', 0, 1)),\n                                    (('b', 2, 2), ('c', 0, 0)),\n                                    (('b', 3, 3), ('b', 0, 0)),\n                                    (('c', 1, 2), ('a', 2, 2)),\n                                    (('c', 2, 2), ('a', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='',\n      has_discards=True,\n      target_observations={'qW\\x05\\x95I\u00b4!|\\x84\u00f5\u00f0\\x02': -1.2164771073307477e+292},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-29834, -62),\n       (8910, -1_014_693_301),\n       (23294, -1_319_208_690),\n       (30543, -23948)},\n      slice_comments={(6_421_510_914_863_659_816, -11967): '\\x8a'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=17172, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.3336645757607309},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-3550,\n        constraints={'min_value': -8294,\n         'max_value': -104,\n         'shrink_towards': 30029,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=-27494,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('a', 2, 0)),\n                                    (('a', 0, 0), ('c', 2, 2)),\n                                    (('b', 0, 1), ('b', 0, 2)),\n                                    (('b', 2, 1), ('b', 3, 0)),\n                                    (('c', 0, 2), ('a', 0, 3)),\n                                    (('c', 1, 2), ('a', 3, 3)),\n                                    (('c', 1, 3), ('c', 3, 1)),\n                                    (('c', 2, 0), ('c', 3, 2)),\n                                    (('c', 3, 1), ('a', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00b5', 0, 0, 'reason'),\n      expected_traceback='h\\U000c7062',\n      has_discards=False,\n      target_observations={'GA': 479.17950262213583},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-125_023_915_172_783_207_860_785_675_655_602_623_294,\n        609_353_424_083_186_212),\n       (-5_035_670_478_209_093_645, 94),\n       (-2_407_264_473_198_362_084, -2_828_404_714_001_091_573),\n       (-1_360_888_578, -31225),\n       (-23350, 24186),\n       (-16879, 32642),\n       (36, -17615),\n       (52, 18106),\n       (24238, -125)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-2301, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -5.751982664154735e+87,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.949757947455067e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.7466600515681922e-196},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.245591785011485e+308},\n        was_forced=True,\n        index=None)),\n      length=27248,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 2),\n                                     ('b', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\U000b93d4\\x80\\U000ca468JT\\U00084dbfam\\U000dcf27\u00fdq',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback='\\U000e76286\u00d8\u00eb;\\x8c?\\U000985a6#',\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-20605, -113), (-93, -2_055_021_955), (24466, 25253)},\n      slice_comments={(21207, 67): '',\n       (-4, -2062): 'c',\n       (63891627, 1_718_368_479_954_479_412): '\\x81!\\x05\u00ba',\n       (-126_210_513_620_273_902_370_848_608_551_754_191_013,\n        40): '\u00d3\\U000b5fec\\x10\u00ff\u00c3\ud558`\u00c9\\x14\u00db\\x85\\x07\\U001019d3\u00b5\u00b03',\n       (-18532, 4_927_821_472_603_663_780): '\u00e8\u00eeb',\n       (-8797, 20813): '8\u00ec\u1881\\x1cA',\n       (404, 6_564_264_744_980_795_905): '\u00ff\"\u00f6\\x8c\\U000b0f75\u00cc'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-107, context=(), group_elems=()),\n      nodes=(),\n      length=13827,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('a', 0, 3)),\n                                    (('a', 3, 0), ('b', 0, 0)),\n                                    (('a', 3, 2), ('b', 3, 3)),\n                                    (('b', 0, 3), ('a', 0, 3)),\n                                    (('b', 1, 2), ('a', 3, 2)),\n                                    (('c', 3, 2), ('b', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\u00e8\\x9e\\x91',\n      has_discards=True,\n      target_observations={'\u00e3\u00aamX\u00ba`e\\xad.\ud853\udde6\u00f5\\U000336b2\\\\\\x15)\u00a4\\x8d\\U0009ef6a%': -2.108664454209502e-272,\n       '\u00f1': 103,\n       '}{': nan,\n       '\\U0007a27c': 56},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-18676, -17176): 'd\\U0009548e\u00b0\u00c2\\x88\"I\"\\U0009e10a\u00b3\\x1d',\n       (-31895, -3_849_903_566_236_783_130): '\u00f3\\x93',\n       (-92, 16588): 'arguments',\n       (15944, -21698): '',\n       (87, 12589): '\u00d5\u00be\u00be\u00ae\u00a4',\n       (10013, -27280): '`\\U0008e1a0\\x89\\x9c\\x95\\x1d5\\U00107141\\x9a',\n       (-28, 15680): 'rolling_observations',\n       (-48, -16464): '\u00d2\\x92',\n       (-108, 46): '/\u00fd',\n       (56_256_937_508_683_794_448_285_157_079_702_875_156,\n        63_675_765_154_426_138_960_791_549_037_693_251_195): '\\U000f8591\\U000b3a81+u\u00f1A',\n       (-9526, -19604): '\ud821\ude56L\u00bc\u00d4?\u00cf',\n       (-15190, 3_504_305_525_655_475_816): '\u00d0\u00ab\u00cc\\x10p',\n       (-16473, 11972): '\u00ce\\x9cnV\\x8e\u00c2\u00ae\u00b8',\n       (-70, 33): '\u9129\u00ce\\U0007e168x#\\U0008386c8\\x9e!c'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=21617, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.47162765531993645},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xa1\\x9cg\\x89\\xeb\\xaf\\x044\\xfcD\\xb4\\xe9\\xcd\\xa1\\xcd\\xc3\\xd1\\xf9\\xdc2\\x15\\xe9\\x10\\x96\\x96\\x8a\\xd0u6#[\\xbf|\\x0cw8G>\\x07\\xf0\\xdb(\\xa4\\xad\\xf6>',\n        constraints={'min_size': 16, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000c2b3c\\U000526de\\U000526df\\U0006f7fb\\U00052641',\n        constraints={'intervals': IntervalSet(\n             build_intervals([337396, 531528, 696069, 876393]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-7_178_662_770_524_741_112,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('a', 2, 1)),\n                                    (('a', 0, 2), ('a', 2, 3)),\n                                    (('a', 0, 3), ('b', 3, 1)),\n                                    (('a', 3, 1), ('a', 0, 0)),\n                                    (('a', 3, 1), ('b', 0, 0)),\n                                    (('b', 0, 2), ('b', 1, 3)),\n                                    (('b', 1, 3), ('c', 1, 2)),\n                                    (('b', 3, 0), ('b', 1, 0)),\n                                    (('b', 3, 1), ('a', 3, 3)),\n                                    (('b', 3, 1), ('c', 1, 1)),\n                                    (('b', 3, 3), ('b', 3, 3)),\n                                    (('c', 1, 1), ('a', 0, 2)),\n                                    (('c', 2, 3), ('c', 0, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='J\u00fd\\x8b\u00a5\u00ca\u00e5\\U000679ad\u00bf\u00f7\\U00059063gx',\n      has_discards=False,\n      target_observations={'': 23009,\n       '\\x9d\\U0005ba3d\\x9b': -4.4330657308204616e+16,\n       '\u00bd\\x12L\\x8c\u00dd\u00fcH\\x82\\x06\\U00073ba5\\x05\u00d6': 2212113471714038.0,\n       '\\U0009de92\\x08z}+r4\u00ea': -801125168,\n       '\\x15\\U000ac24c\\x95tc\u00d99\\U0006fb19\\U0005a195\\x9b\u00c0': -4.074925788866622e+16,\n       '\\x0c': 3528345742724115.0,\n       '\u00da\u00c6FR': -6.172595804727776e-276,\n       '\u00c1L\\x19': -69,\n       'COM1': 9939709570989316.0,\n       'j\u00c6': -3.007483719090018e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-141, 7289),\n       (-126, 23467),\n       (5_440_445_186_252_252_520, -6473)},\n      slice_comments={(-4175, -750): '\\U000ff811t\u00a3\u00e4\\x9d',\n       (-4134, 37): '\\x14\u00d4\\x8b\\U000be1a8\\x18\\x00\\x86\u00a5',\n       (-108, 53): '\u00b2\\x0e\u00d9\\x90\u00e9',\n       (-8, -92): '\u00bfu2\u00b6\\x9b>8',\n       (-10832, -105): '',\n       (-99, 32554): 'NUM',\n       (45, 19755): '}\\U000bddfe'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1869997020, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 0.05,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 4.904096854604736e+82},\n        was_forced=True,\n        index=None),),\n      length=8_368_365_643_079_800_837,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('b', 1, 3)),\n                                    (('b', 1, 1), ('b', 2, 0)),\n                                    (('c', 1, 3), ('b', 1, 1)),\n                                    (('c', 2, 1), ('b', 2, 0)),\n                                    (('c', 3, 1), ('b', 0, 0)),\n                                    (('c', 3, 3), ('a', 1, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('2\u00e3',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('',\n                                     [UnicodeTranslateError('\\x99jM\\U00092b08\u00bc',\n                                                            0,\n                                                            0,\n                                                            'reason')]),\n                      UnicodeTranslateError('\u00de\\x02\\U000547af', 0, 0, 'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('=6\u00fb',\n                                     [UnicodeTranslateError('\u00cfh\u00e3\\U000df3b2x5\\x98\\U000473fb\ud87e\udc3d',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason')])]),\n      expected_traceback='\u00b2\u00be\\U000a98b6\u00d5\u00b6k\u00e8\u00cbR&\u00b8\\U00076a7e+\u00d9\u00f2\\U00059e03\\x8cU/\\x8b',\n      has_discards=False,\n      target_observations={'': -3.710472971804788e+105,\n       'v\u00e6/>\u00b6\u00a9\\U00036ca5GI\\U0005f0da\ud81f\udf38\\x97\u00b6\u00c9+}\\x05et\\U000e35be\\U0003ab01\u00c2\\x82\\U000566c5\u00d9\u00d4\ud84b\udc0cf\ud3f5\\x86\u00c9\u00cf\u00ffp': 2.00001,\n       '\\x0e\u00d2A\u00d1': 2984,\n       '\\U0005e1a9\\U00062983': -3856},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-13702, 20615): '\u00d3\\U00072110\\x97\u00f3',\n       (-115, 1_765_660_167_169_177_095): '\u00e7\\x07z\u00f2',\n       (-115, -6734): ' \\x07',\n       (-22, -4607): '9',\n       (94_498_107_954_376_359_128_964_666_576_980_815_335,\n        -5216): '\\U000ef3fc'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-28839, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\u021d\u0251\u021c\u02d1\u0237\u021f\u02a3\u0222\u0268\u0245\u022e\u0260\u023a\u0241\u024f\u02b4\u0231\u02fe\u02b7',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [512, 65535, 108477, 570479, 605960, 1022579, 1055837],\n             ),\n         ), 'min_size': 19, 'max_size': 110},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-13485,\n        constraints={'min_value': -31428,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8519425451285052},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000dc7ca\u9cb4\u9cd7\u9d21\\U00076abd\u9d1a\u9cf5\u9cc5\u9ca2\u9d3c\u9c9a\u9d16\u9cd6\\U0007f0f9\\U0010a4d0\u9ce2\u9c92\u9c8a\u9d64\u9cd9\\U000c7ed7\u9d7b\u9d10\uaf70\\U000714a1\u9d4f\u9d60\u9d0e\u9c8e\\U000b1488\u9ced\u9ce2\u9cac\u9cbe\u9d74\u9d3d\u9c9c\u9d1f\u9d32\u9d13\u9d5d\u9ccf\u9cb4\u9ce3\\U00106312\u9d7a\u9d6b\\U0007fc99',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [40064,\n                  74056,\n                  111175,\n                  254760,\n                  377737,\n                  437839,\n                  451578,\n                  579421,\n                  700235,\n                  740044,\n                  750385,\n                  831244,\n                  861349,\n                  920847,\n                  1049348,\n                  1111397],\n             ),\n         ),\n         'min_size': 44,\n         'max_size': 68},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 6.336575983097659e-153},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.05},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-105,\n        constraints={'min_value': None,\n         'max_value': 32183,\n         'shrink_towards': 8564,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'7\\\\\\x15\\xf0v\\xb8\\xd5.#\\xd2\\xcfkO$\\x8fL\\xfe\\x1f8\\xec{\\x0bC\\xf8\\xe2\\xc7\\xd6\\xe5\\xaa_\\xfe~rZ\\xdc\\xa2f\\xe1\\xc1u\\xe6{d\\xa4\\x83\\x01\\xb3%\\x08p\\xea\\x99v\\x9e\\xbd\\x86\\xb5\\x9ew\\x18\\x88\\xab\\x9f$\\xc2\\x16\\xf1I\\x8d\\x13(\\x87\\x03\\n\\xb1O\\xda\\x8f\\xdc\\xc6z\\x8b\\xee\\x8c\\xb0\\x93X\\xde\\x1a>\\x15\\xa1\\x1d\\xf2\\x8b\\x12\\x84\\xc6\\x05\\x8dR\\xc9\\xc8C\\xfd.\\x9f}p\"\\x06\\xff\\x9cX\\xce\\x1c\\x06\\xb1\\x89R\\xfb\\x8aC',\n        constraints={'min_size': 39, 'max_size': 139},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.20162612834428623},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.33942360124541265},\n        was_forced=True,\n        index=None)),\n      length=-28252,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('c', 2, 1)),\n                                    (('a', 2, 1), ('a', 0, 0)),\n                                    (('b', 0, 1), ('b', 1, 1)),\n                                    (('b', 1, 2), ('c', 2, 3)),\n                                    (('b', 2, 1), ('a', 2, 3)),\n                                    (('b', 3, 0), ('a', 3, 1)),\n                                    (('b', 3, 0), ('b', 0, 3)),\n                                    (('b', 3, 0), ('c', 3, 1)),\n                                    (('b', 3, 3), ('b', 1, 0)),\n                                    (('c', 0, 1), ('c', 2, 1)),\n                                    (('c', 0, 2), ('a', 0, 2)),\n                                    (('c', 0, 2), ('a', 3, 2)),\n                                    (('c', 1, 3), ('c', 2, 2)),\n                                    (('c', 2, 0), ('b', 1, 3)),\n                                    (('c', 2, 1), ('c', 3, 1)),\n                                    (('c', 2, 2), ('c', 1, 1)),\n                                    (('c', 3, 3), ('b', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\u00af\\x89\\U000fedb3\u00e3E\\x0f\u00c8\\x0e\ud859\ude12\\x16\\U000a30c4\\x8e\u00aaL\\x84\\x9b|\\U000d078f\\x1f\u00f7\\x15a\\x17\u00cf+\\x87\u00ce',\n      has_discards=False,\n      target_observations={'\u00a1': -101,\n       '': -99_966_375_119_356_343_814_969_768_550_059_345_381,\n       'r\u00ebL\\x0by': 4.519987478729252e-168},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-6923, 24901), (118, 40)},\n      slice_comments={(26, -266687041): 'L\\x8eKX',\n       (-16, 31): '\\x9b3',\n       (-157_059_853_988_435_591_337_745_805_018_379_621_371, -75): 'Dv\\x7f'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-93, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-3561,\n        constraints={'min_value': None,\n         'max_value': 88,\n         'shrink_towards': -15575,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-32211,\n        constraints={'min_value': None,\n         'max_value': 27769,\n         'shrink_towards': 4_183_969_597_861_184_134,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=-77,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='',\n      has_discards=True,\n      target_observations={'\u00df': 3.851882133154696e-18,\n       '?\u00dev(\u00f7\ud822\udebfY': -7.637076749474566e-236,\n       '\\x19\u00e1?\\U000b4838\u00aeL\u00e9\\U0009764aw': 1_893_951_253,\n       'k': -68,\n       '\ud80c\ude01': struct.unpack('d', struct.pack('Q', 0x7ff8000000000001))[0],\n       '\u00cdmBG\ud85c\udf6a': 2558,\n       '\u00da\\x19': 10000000.0,\n       '\\U000ea1d65\u00a4': 101,\n       'CF\\U0008ea0a': 945,\n       '\u00e5': 20404,\n       '\\U000e022c\\x06': 1.370873469005894e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-9087, -18103),\n       (-7220, 10231),\n       (-59, 72),\n       (-8, -15355),\n       (11780, -20694)},\n      slice_comments={(1024, 10683): '\\x18\u00fc?',\n       (1_856_825_625, 6925): 'T\\x15CT!\\U0005fd0d'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.02270300005329773,
          "overall:gc": 5.374994361773133e-05,
          "generate:args": 0.18868237372953445
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878970.056006
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-9049, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-7525,\n        constraints={'min_value': -13172,\n         'max_value': -2488,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=9.21083387847168e+307,\n        constraints={'min_value': 0.05,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.5},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.4839493544268281e+308,\n        constraints={'min_value': -2.3208923476562423e-219,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.590658522425097e+16},\n        was_forced=False,\n        index=None)),\n      length=-18888,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 2),\n                                     ('c', 3, 0)),\n                                    (('c', 0, 3), ('c', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\\x88\u00e8\u00e4S\\U000efb61',\n      has_discards=True,\n      target_observations={'ib\\x9d\"\u00d7\\U000f88e80\u00b6,A\\U00080be9\u00cc': 67,\n       '\u00e1B\u00fd': 15059},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-21823, 109), (-17942, 16385)},\n      slice_comments={(65, 512): '\\U000bcd15',\n       (8148, 24073): '\\U00051c3f',\n       (73, -112): 'f\u00d1\u00d6\\U000fa7b1}\\x04\\x93#',\n       (26071, -15175): '\u00fa5\\U0004ddb7\\x8d\\U000e141c\u00d74',\n       (-100, 14697): '\\x97\\x1cS\\x9a\u00d6\u00a5\u00f1\u00fa',\n       (144_679_468_510_599_568_097_646_967_663_299_014_013, 39): 's|'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-30801, context=(), group_elems=()),\n      nodes=(),\n      length=27771,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 1),\n                                     ('b', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\U000bbcf9\\U00068919\\x9f\\U0004ab39$(',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\u00e5\u00b5\\x00',\n      has_discards=False,\n      target_observations={'C\\x0bZ\u00d5\u00f9\\U00074b4fm\\U0005385a]\\U000e6c43': -14574},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-15378, 3),\n       (-8727, -6_398_471_508_046_927_850),\n       (-2695, -199),\n       (-39, -105)},\n      slice_comments={(-46, 16): '%\"\\U001014a1\\x08',\n       (404, 31): '\\U000ee3c9\ud800\udf78\u00fc\\x04\\x1d\\x19',\n       (-1_484_918_681_957_089_898, 102): '\u00ef\u00bf\\x9aT\\x97\\U000609b1P\u00a2Bn\\x8f\u00fa\\x9b',\n       (-81, 17112): '\\U000e26b6X.\\x89J\u00e4\\U00094c82\\x13C\ud86d\udfac\u00fe\u00d5\u00c0',\n       (404, 721904219): '\\x85\\U0004b0df\ud822\ude3eT-\u00f5\\x18\\U000ad8a9\\\\'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-17291, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.711947753708542},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-44945,\n        constraints={'min_value': None,\n         'max_value': -20586,\n         'shrink_towards': -1_731_468_447,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='H\\x82\\x8e\\t\u00c9\u00ea*$\u00d2\\U000bbb97\u00b7\u00abV1T\\x14\\x02\\x10%G[\u00b4\\x1e\ud840\uddf7\\U0004499b\u00f2\\x00!\\x10\u00cc\u00f3\\U00072c51\\U00043e2c\u00d3\\x1a\\x84\\x9f\u00d3\\U0004d987\\\\Y\u00cd\\U0003a634\\U0007e9c6T\u00f8\ud82c\udece1\\\\\u00d1^\\x81\\U0010978f\\U00072124\\U000e0def\u00f9\\x8e\\U000ba5a3\\U00039ec8\u00ef\u00f0',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  50416,\n                  84203,\n                  172369,\n                  207551,\n                  321089,\n                  434669,\n                  513144,\n                  516753,\n                  564435,\n                  663238,\n                  703172,\n                  741311,\n                  786516,\n                  918522,\n                  958778,\n                  1067344,\n                  1110512],\n             ),\n         ),\n         'min_size': 23,\n         'max_size': 76},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=13,\n        constraints={'min_value': -86,\n         'max_value': 120,\n         'shrink_towards': -9290,\n         'weights': {84: 0.026353733258854765,\n          13: 0.1373096098928083,\n          -83: 0.1504093303632117,\n          115: 0.20749608227997407}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00039d5d\\x1b\\U00086f50\u00a4u1A\ud874\udcba\\U00085f2c\\x15\u00d3\u00e0\u00f0h\\U0004c43f\u00fd\\U0009c6f5\u00c6R\\x1e\u00fa\\x1f\\x89\u00cc\\x99=\\x178\\U0009ec593\u00deg\u00e2:T\\U0003465b\u00b2\\x01\\U0001034d\"2\\x13\u00e8\\U0003766a\\x86ze\u00d8\\U000f1bab\\U000708c7s \\x91\u00c7e/\\x15\u9dc5\\U0006a459\u00bf`\\x80\\x1e\u00ba#i@X\u00a4\\x8c\\t\\U0006fd93\\x97\u00aa\ub827\u00a7\u00eds\\x99\ud85e\udfabf',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1,\n                  87083,\n                  110297,\n                  354957,\n                  392795,\n                  450695,\n                  453125,\n                  472459,\n                  531767,\n                  585251,\n                  627910,\n                  662754,\n                  792008,\n                  809945,\n                  889543,\n                  896204,\n                  988788,\n                  1038322],\n             ),\n         ),\n         'min_size': 31,\n         'max_size': 131},\n        was_forced=False,\n        index=None)),\n      length=-23,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('', 0, 0, 'reason'),\n      expected_traceback='\\U0005c98c',\n      has_discards=False,\n      target_observations={'undefined': -11862},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-29692, 188573672),\n       (59, 2589),\n       (26040, 20315),\n       (29894, -98),\n       (32696, -439)},\n      slice_comments={(-15061, 10618): 'i\\x08\u00da',\n       (-79_420_991_719_123_206_914_024_601_357_462_977_164,\n        86): '\ud878\udc1e\u00b5?\\U00097191',\n       (512, 55_061_005_508_579_287_589_972_643_067_789_931_292): '\ud84a\ude87\u00c7\\x97',\n       (5_875_697_618_056_233_864, -7): '\\x01',\n       (28, 101): '\\U000b3a44\"\\x8cJ\u00d0\\U000c9434\\U00065baa',\n       (28856, -811101227): '',\n       (3_323_414_811_130_619_209, 77): 'k\u00d4\u00fd\\x87\u00d9\\U000e2689',\n       (19, 17218): '\\U000bb006\\x88\\U000eddd1\\x95',\n       (889, 1_749_244_948_208_324_651): 'K\\x8a',\n       (-44, -6553): '\ud835\udd7f\ud835\udd8d\ud835\udd8a \ud835\udd96\ud835\udd9a\ud835\udd8e\ud835\udd88\ud835\udd90 \ud835\udd87\ud835\udd97\ud835\udd94\ud835\udd9c\ud835\udd93 \ud835\udd8b\ud835\udd94\ud835\udd9d \ud835\udd8f\ud835\udd9a\ud835\udd92\ud835\udd95\ud835\udd98 \ud835\udd94\ud835\udd9b\ud835\udd8a\ud835\udd97 \ud835\udd99\ud835\udd8d\ud835\udd8a \ud835\udd91\ud835\udd86\ud835\udd9f\ud835\udd9e \ud835\udd89\ud835\udd94\ud835\udd8c',\n       (64,\n        101): 'T\\x98\\U0008b0ce\u00ff\\x8c\u00d56\\x91\u62ec\\U000647e3\\U000fc1e4\\x03\\x7f\\U00056de9)\u00b3[\\U0007f63b\\U00087425\\x9bs\ud876\ude70\\x06k\u00fc\u00fa}\u00bb /\u00b0\u00d1\u00ba\\U0009e8b6|s\u6929Y\\x87\u00d9'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=18184, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=1501,\n        constraints={'min_value': -4_454_360_049_935_771_700,\n         'max_value': None,\n         'shrink_towards': -57,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-92,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 5e-324},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.1636408894931989},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8287194702717309},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u8447\u83fe\u8435\u8430\u840f\u83de\u8469\u842c\u837e\u83b2\u8429\u8445\u840b\\U0001532b\u8469\u8432\u839d\u83fd\u840f\u845a\u838c\u8466\u83cd\u83cf\u83e3\u8424\u83de\u8382\u83bf\u8475\ud83e\ude9d\u838a\\U000bfe5d\u8434\u840f\u8408\u8439\ud81e\udde0\u843e\u843b\\U000c515d\u838c\u83a0\u83cd\ud809\udca5\u8469\u83f7\u842d\u83c2\\U000c77f6\u845c\ufe86\u83c5\u8443\u83da\u8387\u83aa',\n        constraints={'intervals': IntervalSet(\n             build_intervals([33656, 150745, 761040, 838145]),\n         ), 'min_size': 45, 'max_size': 145},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.7410427685610696e+16},\n        was_forced=True,\n        index=None)),\n      length=-28909,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('b', 3, 1)),\n                                    (('a', 2, 3), ('a', 1, 0)),\n                                    (('b', 0, 1), ('a', 2, 0)),\n                                    (('b', 1, 0), ('b', 1, 3)),\n                                    (('c', 0, 1), ('b', 2, 2)),\n                                    (('c', 2, 1), ('a', 0, 0)),\n                                    (('c', 2, 2), ('c', 0, 0)),\n                                    (('c', 3, 3), ('a', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('D\u00dc\\U00041822\\U00079e66',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '\u00ec',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\u00de\\U0008f52dJu\u00f3',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x05`J\u00b0?|\\x05\u00d0\u00ddfe\\U00072787\u00f9\ud856\udca1\u00a6\\t)s\\U00063130\\x88\\U000ce321\u00b5\u00e1\\n\ud861\udde7\\U000b71b0\u00bbcK@p\\U000c951dz\u00fa': 3119,\n       '\u00b7': 20539,\n       '\\x18': -1.4602659340375884e+16,\n       '\u00b5\\U0009d1b7\\U0005a4bb\u00ea9H': -1.1042890468237314e-271},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-106, 300),\n       (0, -15313),\n       (23825, -596421859),\n       (65535, 10464),\n       (8_947_481_489_452_992_226, 9908),\n       (9_009_135_842_064_166_483,\n        75_227_491_767_132_606_535_101_556_392_981_089_101)},\n      slice_comments={(-105,\n        10778): '\"\\x0e\u00b3\u00b8\\x03\u00ce \\x1f\\U00081ac9\\x06~\u00fe\\x85\\U0001671c\u00bc\u00c7\\x89\\x88\\U000c578fD\\U00092295\u00fb9\u00ae\\U00097206\u00da',\n       (606290512, -638_568_605_621_236_170): '\\U0003e9c0\\x85\\x13\\x1f',\n       (14583,\n        -31985): \"\\r\u00cf_\u2629\\U000b4327\ucf9e\\x80b'\u00eb\\U00049b9d\\U000d9a1d1\\U00037d0cd\u00b3\u00aa\",\n       (9999, 11019): '\\U000d7391\u00c2',\n       (8192, 24147): '\\U0004cce6S'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=79, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-28832,\n        constraints={'min_value': None,\n         'max_value': -67,\n         'shrink_towards': -585,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=23993,\n        constraints={'min_value': -20466,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.15478918444554227},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.40827818728956367},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1.1125369292536007e-308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 6.103515625e-05},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.5510845877321011e+308,\n        constraints={'min_value': 6.0186656938993944e+16,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.5510845877321011e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9714712273275588},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00091cb7\\U00091c49\\U00091c01',\n        constraints={'intervals': IntervalSet(\n             build_intervals([596991, 730725, 998101, 1085517]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xd9\\x0e\\xaa\\x15',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.31399828683444136},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1.401298464324817e-45},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xc0\\xd9',\n        constraints={'min_size': 0, 'max_size': 84},\n        was_forced=True,\n        index=None)),\n      length=28168,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('c', 0, 2)),\n                                    (('a', 2, 3), ('a', 1, 2)),\n                                    (('b', 1, 1), ('b', 3, 2)),\n                                    (('b', 2, 0), ('c', 3, 3)),\n                                    (('b', 2, 2), ('c', 3, 3)),\n                                    (('b', 3, 3), ('a', 1, 1)),\n                                    (('c', 0, 1), ('b', 0, 2)),\n                                    (('c', 0, 1), ('c', 0, 3)),\n                                    (('c', 0, 3), ('c', 2, 3)),\n                                    (('c', 2, 1), ('a', 2, 0)),\n                                    (('c', 2, 1), ('c', 2, 3)),\n                                    (('c', 2, 3), ('a', 2, 0)),\n                                    (('c', 3, 1), ('a', 1, 2)),\n                                    (('c', 3, 2), ('c', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [ExceptionGroup('g\u00d5\\U0003be67\\U000cf575\u00ac',\n                                     [UnicodeEncodeError('unknown encoding',\n                                                         'U\u00a5',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('\ud835\udc7b\ud835\udc89\ud835\udc86 \ud835\udc92\ud835\udc96\ud835\udc8a\ud835\udc84\ud835\udc8c \ud835\udc83\ud835\udc93\ud835\udc90\ud835\udc98\ud835\udc8f \ud835\udc87\ud835\udc90\ud835\udc99 \ud835\udc8b\ud835\udc96\ud835\udc8e\ud835\udc91\ud835\udc94 \ud835\udc90\ud835\udc97\ud835\udc86\ud835\udc93 \ud835\udc95\ud835\udc89\ud835\udc86 \ud835\udc8d\ud835\udc82\ud835\udc9b\ud835\udc9a \ud835\udc85\ud835\udc90\ud835\udc88',\n                                                     [UnicodeEncodeError('unknown encoding',\n                                                                         'Bph\u00b0',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      ExceptionGroup('w\\x85\\x01\u00a2\u00b3\u00d6\u00f8',\n                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      ExceptionGroup('',\n                                                                                     [UnicodeTranslateError('',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                         '',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                         '\u00e4\\U000ad0f1',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeTranslateError('\\x1a',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      UnicodeTranslateError(':\\U000d397bE\\U000ff377',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason')]),\n                                                                      ExceptionGroup('',\n                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                         '\u00ec\u00c8',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason')])])]),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\u00fa',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('\\x84',\n                                                     [UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      ExceptionGroup('',\n                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                         '\u00bc\\x10',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')]),\n                                                      UnicodeTranslateError('\u00ab\\U0001c761',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')]),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\\x1e',\n                                                         0,\n                                                         0,\n                                                         'reason')])]),\n      expected_traceback='\\x81\\x80Ls+\ud860\udd1a.x\\x91\u00d4',\n      has_discards=False,\n      target_observations={'\u00ab\u00a5h\u00fb\\x9d-\u00c1\\x0f\\U000e2a72A': -22101,\n       '\u00f6\u00a2 \u00da-\\U00032491\\ue2cc\u00b6\u00cb': 24093,\n       '\\U000d09fc\\U000694f8\u00d2\u00d4': 10000000.0,\n       'M\ud867\udfcc\u00f7\\x8b': 5.028696349946583e+239,\n       '\\x0beI2': 6.176517131709784e+16,\n       '\u00b2\u00c0\u00f8\\x14\ud84c\udf37': 2.548514469502692e+16,\n       '\\x9b \u00da\u00fd\\x06': -62},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-63_470_316_630_460_779_248_611_187_298_403_337_069, -102)},\n      slice_comments={(-1_540_226_256, -77): 'v>'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=539335893, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U000742a6\\U00038e93\\U00038e6b\\U00038f40\\U00046b24\\U00038e93\\U00038ea3\\U00038eed\\U00038e7b\\U00040d25',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [233058, 549110, 647029, 768782, 986073, 1062935, 1114111],\n             ),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7854847778708363},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=3543425056028229.0,\n        constraints={'min_value': -3.2134703923674486e+201,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.05},\n        was_forced=True,\n        index=None)),\n      length=-13,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 2, 3),\n                                     ('a', 1, 1)),\n                                    (('b', 3, 2), ('c', 2, 0)),\n                                    (('c', 2, 1), ('b', 1, 1)),\n                                    (('c', 3, 3), ('b', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('r\\x1c\\x05\u00f2\\U000b1dfaPl\\x92\u00e4\\x8aoO)\u00c6',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback='d\\x0ex\u00b6\u00d8\\U0001489d',\n      has_discards=True,\n      target_observations={'\\x96\u00f6N\\U000b693a\\x84': -127,\n       '': 19659,\n       '\\x8d\\U000a697b\\x1b\\t\\x8e\u00a9\\U000e9876t': 1.6883966767899376e+16,\n       '\\U000b71f6\\\\': 19477,\n       '\u00dc\\x95t_': 5e-324,\n       '6\u00e8\\U000bfa50\u00b7\\x0e5[\\x15Q/(\u00a7\u00f3': 15,\n       '\u00d7\\x04\u00e4': 6.57196159547762e+16,\n       '\\U0005e384\u00b1\\r': 1.2069909085198167e-284},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-7_926_143_646_485_201_677, 13864),\n       (-4_557_836_579_088_909_994, 672),\n       (-21874, 18672),\n       (-104, 9999),\n       (-101, -5419),\n       (-77, -15),\n       (4344, 4742),\n       (6778, 6_290_972_154_937_123_005),\n       (8192, -30692),\n       (28404, -2_867_201_372_008_185_471),\n       (7_481_545_986_857_997_793, 60)},\n      slice_comments={(-25382,\n        17766): '\u00af;!U\u00b3\u00f0g\\U0001e750P,\\x89*\\x91\\U000d1579\\x8b\u00fb47\u00aa\\x80;=\u00d9\\x12',\n       (1_544_881_143, 5_817_531_138_893_969_603): 'Retried draw from ',\n       (219_818_345_830_477_993, 1024): '\\x1bH\ud882\udf92\u00ff\u00b8\\U0005d8ac\u00e9\u00b4\u00a3Z\u00a4',\n       (-32611, 8772): '/',\n       (-91, -120_778_091_330_317_111_584_870_247_508_594_424_790): '',\n       (-23189,\n        -967791925): '\\U0008a274\\x10\\U000890042._\\U000e9279y\u00be\\U0006ed584\u00ca\\U000bc5fe\\x0c',\n       (49, -35): '\\U000e20cb',\n       (-28487, 30116): ' ',\n       (1877, 9613): '\u00ea\\x90\u00ec\\x82\\U00019193R',\n       (9960,\n        -4716): '\\x9e\\U000a88a0p\u00d7wMk\\x81u\\x81\u00e9^\u00b9\u00ce\\U000fd4df(i\\U000c1ad2iB\u00bc\\U00100d6e\\U000e07cd\\x03(',\n       (21804, 15653): '',\n       (79, 8_808_969_048_618_043_895): '\u00c6\u00fb\\x8b\\U00034ad6z\\xa0%_\\U00060dbag'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=25485, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-39,\n        constraints={'min_value': -31373,\n         'max_value': None,\n         'shrink_towards': -13874,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"\\xb4HA\\xe0\\x97\\xe0\\xe0<\\x18\\xa2\\x0c\\xb2\\xdd\\xbd\\x97a\\xb5%\\xcf\\xe2\\xcd\\x11U\\x14\\x15\\x81\\xd0\\x9f\\x01\\xa2\\xd3\\xf9\\x12u'd,|k\\xe9  \\xea\\x17\\x9c\\x83B\\x13\\x980\\n\\xf1d\\xaf\\xfa\\xb8\\xfcMiGL\",\n        constraints={'min_size': 50, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x14\\xf3G',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.6387536155482746},\n        was_forced=False,\n        index=None)),\n      length=-14983,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 2),\n                                     ('c', 0, 3)),\n                                    (('a', 3, 1), ('b', 3, 1)),\n                                    (('b', 0, 3), ('c', 2, 2)),\n                                    (('b', 1, 0), ('c', 1, 2)),\n                                    (('b', 1, 1), ('b', 2, 0)),\n                                    (('b', 2, 2), ('a', 0, 2)),\n                                    (('b', 3, 1), ('b', 3, 0)),\n                                    (('c', 2, 0), ('b', 1, 1)),\n                                    (('c', 3, 1), ('b', 0, 3)),\n                                    (('c', 3, 1), ('c', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('p',\n                     [UnicodeTranslateError('', 0, 0, 'reason'),\n                      ExceptionGroup('\u00de\u00fb',\n                                     [UnicodeEncodeError('unknown encoding',\n                                                         '\\x95\u00b6\\U00100983a\\U000d5284\\x0c\u00e2\u00f3\\U00080c16Z',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError('3\\\\\u00be\\\\\\U0009312d\u00c9',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      UnicodeTranslateError('', 0, 0, 'reason'),\n                      UnicodeTranslateError('\\U000daa17\\U0009aab4\u00cf',\n                                            0,\n                                            0,\n                                            'reason'),\n                      ExceptionGroup('',\n                                     [ExceptionGroup('',\n                                                     [ExceptionGroup('\\x94\\x18',\n                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      ExceptionGroup('',\n                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                         '\u00f2\u00b8\u00e6',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason')])]),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeTranslateError('\\x7fyw\\U000c218f\u00a5\\x01\u00cbRo\\U000a8e01\u00b6\\x15\u00c0\u00a5',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '\\x11\\x08\\x0b',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      ExceptionGroup('\\U000d814d\\x7f\\U0005a9e0\\U0009c96e\\x01\ud86d\udc12G\\U000c73d4\\x0e',\n                                                                     [UnicodeTranslateError('\\x9dd',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      UnicodeTranslateError('\ud83c\ude15',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      ExceptionGroup('',\n                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      ExceptionGroup('\u457f\u00eeG\u00cdX\u00ce\u00f6\\x97',\n                                                                                                     [UnicodeTranslateError('',\n                                                                                                                            0,\n                                                                                                                            0,\n                                                                                                                            'reason'),\n                                                                                                      ExceptionGroup('\ud835\udd4b\ud835\udd59\ud835\udd56 \ud835\udd62\ud835\udd66\ud835\udd5a\ud835\udd54\ud835\udd5c \ud835\udd53\ud835\udd63\ud835\udd60\ud835\udd68\ud835\udd5f \ud835\udd57\ud835\udd60\ud835\udd69 \ud835\udd5b\ud835\udd66\ud835\udd5e\ud835\udd61\ud835\udd64 \ud835\udd60\ud835\udd67\ud835\udd56\ud835\udd63 \ud835\udd65\ud835\udd59\ud835\udd56 \ud835\udd5d\ud835\udd52\ud835\udd6b\ud835\udd6a \ud835\udd55\ud835\udd60\ud835\udd58',\n                                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                                         '\\U000fd893t\u00e5\\U00104750\u00c7R\u00ee\u00ed\\U000fb9b2\\U000b02ad\\U00064ad7',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                         b'',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                         b'',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                         b'',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason')])]),\n                                                                                      UnicodeTranslateError('',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason')]),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      ExceptionGroup('',\n                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                         '\u00e0\u00e1\u00bf\u00f9\u00dc',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      ExceptionGroup('\\U00087b1f',\n                                                                                                     [UnicodeTranslateError('',\n                                                                                                                            0,\n                                                                                                                            0,\n                                                                                                                            'reason')]),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason')])])]),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         'Infinity',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError('|\\x18\\U000d6867\\\\\\x9e',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\u9eb0\u00a7\u00caC\\x8d\u00d4\u00bb',\n                                                         0,\n                                                         0,\n                                                         'reason')])]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-367_361_065_762_445_431, -6493),\n       (-102, -28659),\n       (87, 62),\n       (404, -12031),\n       (2079, -86),\n       (14749, -8_258_917_720_443_227_986),\n       (29992, -24)},\n      slice_comments={(-91, -4164): '\\U0003e863\ud855\udd75E\\x0e\\x1b\\U00041a60',\n       (-22019, 31413): 'Yz\u00a7',\n       (-23223, -449450846): '3\\U000a0c6f\\x95'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-16585, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U00049142\u20ba\u203c\\u209d\\u2063\\u2073\\U000aa8d3\u20e4\u2082\u2037\u2034\\u200f\u20d2',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [8192,\n                  31330,\n                  49725,\n                  183604,\n                  188032,\n                  203916,\n                  266201,\n                  459642,\n                  494603,\n                  569261,\n                  642235,\n                  730357,\n                  761543,\n                  793303,\n                  958198,\n                  968092,\n                  1048141,\n                  1114111],\n             ),\n         ),\n         'min_size': 9,\n         'max_size': 109},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.0640185604268572e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.2837931640619665e+255},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 6.880173821042913e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -1.2177619982411025e-122,\n         'max_value': 8.07409867057877e+306,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.2854909069327694e+304},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.1348217182822397e+308,\n        constraints={'min_value': 1.1834372063445093e-275,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.1348217182822397e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000c1d3e',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [404,\n                  1000,\n                  109858,\n                  163119,\n                  253410,\n                  311013,\n                  343664,\n                  359379,\n                  530744,\n                  808501,\n                  989714,\n                  1046890],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00044d0c\\U00015662\\U0001574b\\U00034c97\\U000156b6\\U00015703\\U000156a5\\U0001569b\\U0001570a\\U00054cf3\\U000156c3\\U00015665\\U00015746\\U0001566a\\U0001571f\\U0001574f\\U00015759\\U00018f56\\U0008a11d\\U00015668\\U00015693\\U00015689\\U0001570a\\U0001573c\\U0001566a\\U00015715\\U00015725\\U00065445\\U00015709\\U00015674\\U0001573c\\U00015730\\U0001566f\\U00053219\\U000156ee\ud84b\udf96\\U000156a6\\U00048b32\\U000156cf\\U0001573d\\U000156a3\\U00015675\\U000156a3\\U00015755\\U000156ee\\U0005d7a7\\U0001573f\\U00015673\\U0008055c\\U00015751\\U00015723\\U00015670\\U000156fe',\n        constraints={'intervals': IntervalSet(\n             build_intervals([87646, 448351, 476737, 684434, 1111836]),\n         ), 'min_size': 47, 'max_size': 147},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00072e34\\U00013ead\\U00013e79\\U00013e4e\\U00013e94\\U00013e79\\U00013e53\\U00013e1a\\U00013dd6\\U00013e90\\U00013eb9\\U00013ec3\\U00013e77\\U00013e1f\\U00013eb1\\U00013def\\U00013e02\\U00013e4b\\U00013de7\\U000718dc\\U00013de6\\U00013eb2\\U00013ec6\\U00013e87\\U00013dd8\\U00013dd1\\U00013e65\\U00013e2a',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [81358,\n                  108264,\n                  142113,\n                  153633,\n                  449594,\n                  507950,\n                  690251,\n                  731884,\n                  921157,\n                  1061659,\n                  1114110],\n             ),\n         ),\n         'min_size': 27,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=-71,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('b', 1, 2)),\n                                    (('a', 2, 3), ('b', 3, 1)),\n                                    (('b', 0, 1), ('b', 2, 3)),\n                                    (('c', 1, 2), ('a', 3, 2)),\n                                    (('c', 1, 3), ('c', 3, 3)),\n                                    (('c', 2, 1), ('a', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\xa0\u00e8', 0, 0, 'reason'),\n      expected_traceback='\\U000591ab\u00d9\u00e3',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-192263293,\n        147_533_799_245_481_755_530_438_164_668_945_463_776),\n       (-47, -7538),\n       (5_779_582_070_894_774_116, -89)},\n      slice_comments={(-20339,\n        24483): '\\x9f\\x1a]ZE\u00fej(\\x1d\\U0005707f\\U0006a265\u00a6\\U00033179ju\u00a5\u00b9',\n       (2_100_049_269, -11459): 'rQ\\U000ae780\\U000e58ba\\U0009373f[\u00d6//',\n       (18315, -6_184_399_774_858_234_771): '9',\n       (515, 88): 'w\\x06',\n       (-11817, 2_351_746_030_426_977_810): '\u00bf\\U000d417al\\x9er'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-88, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\x1310\\x99',\n        constraints={'min_size': 0, 'max_size': 40},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=2_486_272_102_943_799_908,\n        constraints={'min_value': None,\n         'max_value': 6_914_513_908_895_929_436,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0008372d\\U000c4abc\\U00083696\\U0008366f\\U0008372e\\U000836eb\\U00083763\\U00083718\\U000c4cdd\\U0008368e\\U000836a4\\U0008f3d9\\U000ac442\\U0008370e\\U00083692\\U000836e5\\U000836b1\\U000836d7\\U00083710\\U000a26ea\\U00083698\\U000ab99b\\U0008370f\\U000a1a1b\\U000c128c\\U000836d8\\U00083688\\U000ac985\\U000b4c37\\U000c06a4\\U00083726',\n        constraints={'intervals': IntervalSet(\n             build_intervals([538219, 545805, 564240, 809901]),\n         ), 'min_size': 13, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=19984,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xf00\\xad\\x9a\\xb8\\xe6\\xe9v\\x8b\\xcc\\x9e\\x11\\x0f\\xb3]fJ\\x1c',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0003374e\\U0003378e',\n        constraints={'intervals': IntervalSet(\n             build_intervals([210640, 269558, 349964, 483749, 692787, 752084]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\uf429\\uf4bf\\uf465\\uf416\\uf45a\\U0009f216\\uf412\\U0009ebdf\\uf464\\U000edd74\\uf4a4\\uf433\\U0007f448\\uf3f3\\uf4b0\\uf3dc\\uf458\\U000a4a47\\U0007c03e\\uf4c1\\uf439\\uf447\\uf427\\uf3e1\\U0008c7b4\\uf3f6\\uf409\\uf3eb\\uf3ff\\uf4c3\\uf4d3\\uf488\\uf447\\uf449\\U0008fca9\\uf474\\uf443\\uf492\\uf42b\\uf481\\uf466\\uf3df\\uf412\\U00067b4d\\U000e24d3\\uf4b7\\uf3de\\U000e4679\\uf4ce\\uf4b3\\uf4d9\\uf48e\\uf4d3\\uf4c6\\U0008400b\\uf487\\uf44c\\uf45a\\uf41f\\uf430\\uf4c4\\uf3e9\\uf4d1\\uf47b\\U00096ce1\\uf4ad\\U000acfe2\\uf483\\uf3e7\\U00092bf4\\uf479\\uf414\\U000df938\\uf4d5\\uf40a\\uf4b2\\uf439\\U0005c211\\U000b0efd\\U000e6d7b\\uf460\\uf403\\U0006ce5e\\uf466\\uf3f8\\uf4a2\\uf417\\uf421\\uf45b\\uf41b\\uf3eb\\U00080201\\uf45f\\uf40d\\uf3f2\\uf441\\uf400\\uf47e\\uf413\\uf40e\\uf4a9\\U00097ed0\\uf3f3\\uf3e7\\U0009360e\\uf44a\\uf4ce\\uf464',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [62427,\n                  72846,\n                  92726,\n                  96030,\n                  177481,\n                  201673,\n                  216074,\n                  237349,\n                  368236,\n                  382228,\n                  420668,\n                  473719,\n                  478284,\n                  733657,\n                  735779,\n                  763964,\n                  888588,\n                  951800,\n                  954525,\n                  975841,\n                  1042530],\n             ),\n         ),\n         'min_size': 36,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7447564623412871},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=67,\n        constraints={'min_value': None,\n         'max_value': 65535,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"CA\\xa4h$\\xb7\\xe3Y\\xe2\\x07l\\xf1CP%\\xf1\\x13\\x98\\\\k\\xc39\\xb3'0\\xa7\\x9fb\\xd8!\\xeco8\\x89kx\\xfe`\\xfb\\xb2\\xa4'\\x84\\x8f\\xc7O\\x11U\\xaf.\\xe67\\xbd\\x19\\xe5Y\\xef\\xac\\xe4\\x7f\\xdaU,\",\n        constraints={'min_size': 38, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.38407681600850363},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-16389,\n        constraints={'min_value': None,\n         'max_value': -4295,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=275,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 2),\n                                     ('c', 2, 0)),\n                                    (('a', 1, 3), ('a', 1, 0)),\n                                    (('b', 0, 0), ('b', 3, 0)),\n                                    (('b', 1, 2), ('a', 2, 1)),\n                                    (('b', 3, 0), ('a', 0, 1)),\n                                    (('b', 3, 1), ('c', 2, 3)),\n                                    (('c', 0, 0), ('b', 2, 0)),\n                                    (('c', 2, 3), ('b', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00e7\\x0c\\U000b4a64': -31358,\n       '\u00dc\u00c1_': -4780101105360606.0},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-18270, 1000),\n       (-6437, -6618),\n       (-65, 1618),\n       (68, 3_215_458_569_649_848_779),\n       (73, 11552),\n       (119, 2748)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=404, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xf1m4A\\x11\\x96\\xc3\\xaaz\\xd2\\xf4\\xd7\\xb4\\x88\\xa5\\xf3\\xd0\\xf5,\\xb7f\\x80',\n        constraints={'min_size': 21, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 4.36216373350893e-304},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=8.683866531658661e+307,\n        constraints={'min_value': 6.105769711351476e-252,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 8.683866531658661e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x1c\\xf7\\xcf',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7278126809573707},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=8228,\n        constraints={'min_value': 8140,\n         'max_value': 8231,\n         'shrink_towards': -27269,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-22887,\n        constraints={'min_value': -30281,\n         'max_value': -12814,\n         'shrink_towards': 1_334_303_368,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.5},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'm\\xd8\\xbe^\\xcd+\\x7f0b\\xf1\\x95|(\\xd3\\x85\\xc4\\xf1\\xf6\\xf7\\xc8',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([628490, 629523, 1031850]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-11,\n        constraints={'min_value': -833,\n         'max_value': None,\n         'shrink_towards': 122,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9509653974692187},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'.hypofuzz.corpus',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'4`\\xa9\\x88\\xff\\x97',\n        constraints={'min_size': 0, 'max_size': 56},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7335068806371506},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-216,\n        constraints={'min_value': None,\n         'max_value': -95,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=-1_151_916_442,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('a', 1, 3)),\n                                    (('b', 1, 0), ('a', 1, 0)),\n                                    (('b', 1, 0), ('a', 3, 2)),\n                                    (('b', 1, 2), ('a', 3, 2)),\n                                    (('b', 1, 2), ('b', 2, 2)),\n                                    (('b', 2, 2), ('a', 0, 2)),\n                                    (('b', 3, 1), ('a', 0, 1)),\n                                    (('c', 1, 0), ('a', 0, 3)),\n                                    (('c', 1, 0), ('c', 2, 0)),\n                                    (('c', 1, 3), ('b', 2, 2)),\n                                    (('c', 3, 3), ('b', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\uc2a5\\x85\u00f7[HC\\U00064ba9\\x9fa\u00f6q\u00d9\\x7f',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'o\\x1e\ud801\udf4aw\\x80*\\x1c\\x8d\u00fb\\U0009e31aX': 461972405,\n       '\\U000adf37\u00de\\x0e\\x10\\x03\u00f0': 25311,\n       '': -0.99999,\n       '\u00a2': 32456,\n       '\\U0004283ak\\x1a': 1.1501957379752074e+16,\n       '\\U0007791c': -8.844423364459533e-208,\n       'd\u00ae\u00b0\u00f8\\U0006b052\\U000e9a43\\U000139033': 1.1856075549266688e+16,\n       '\\x8cw\u00b1\ud85b\udd5e\u00fa\\U000b5cfd)\u00fb\\x15\\U000d9b2e?': -3.679427729009284e+16,\n       'g\u00a2\u00c1\\x19\\x03I': -27764},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-26616, 111),\n       (340, -1_467_920_320),\n       (8582, 11515),\n       (20223, -15899),\n       (32311, -227172103)},\n      slice_comments={(-2_006_917_079, 23787): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x108be8cb0>, min_size=0, max_size=inf).map(tuple), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text())), has_discards=one_of(nothing(), nothing(), booleans()), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), length=one_of(nothing(), nothing(), integers()), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason'))))).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.009372792032081634,
          "overall:gc": 9.441695874556899e-05,
          "generate:args": 0.17069708334747702
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878929.621304
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=3, context=(), group_elems=()),\n      nodes=(),\n      length=300,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('c', 0, 1)),\n                                    (('a', 0, 2), ('b', 0, 3)),\n                                    (('a', 1, 1), ('c', 1, 0)),\n                                    (('b', 0, 0), ('a', 0, 1)),\n                                    (('b', 0, 0), ('a', 1, 3)),\n                                    (('b', 0, 3), ('c', 0, 2)),\n                                    (('b', 1, 2), ('a', 3, 3)),\n                                    (('b', 1, 2), ('b', 1, 2)),\n                                    (('b', 2, 1), ('b', 0, 1)),\n                                    (('b', 3, 2), ('a', 3, 3)),\n                                    (('c', 2, 0), ('c', 3, 3)),\n                                    (('c', 2, 3), ('c', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00c0]', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\U0006e0b1\\x01': -23347,\n       '': 122,\n       '\\x80\\U000a7fd9o': 29843,\n       'l\\U0004ba72>C': -6.938962535864995e+16,\n       '$\\U00076065A\\U000646f1W': 6193},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-6_971_338_411_174_338_812, -9494),\n       (-27238, -3334),\n       (-24846, 9999),\n       (-23932, -17841),\n       (-22612, 32709),\n       (-9946, 71_806_856_785_066_983_747_911_451_083_683_268_167),\n       (-9012, -1435),\n       (-8256, -30741),\n       (-3434, -27967),\n       (-3259, 97),\n       (-98, -37),\n       (90, 65535),\n       (9259, -125),\n       (9621, -3077),\n       (19611, -22707),\n       (25253, -55),\n       (29209, -2_267_890_824_209_431_989),\n       (30316, -10),\n       (30554, -9082),\n       (31305, 404),\n       (410560754, -337016351),\n       (1_081_651_083, 8374),\n       (8_049_580_949_161_831_473_862_615_505_009_956_050, 2962)},\n      slice_comments={(-12819, -19): 'l\\x86\\x07\\U000de4f3s;>\\U00046870',\n       (-10639, 1876): '\\x8a',\n       (16291,\n        -160195312): '\\U000ad340\\U000bb204I\\x16\\U000a8767\\U00107472\\x1a\\x0b\\x19\\U0008789f0&\ud820\udf89\\x9d',\n       (10756, 404): '\\U000cb3dc\u00b8',\n       (25778, 264563364): '\u00a5\u00d8BH',\n       (-93, 54): '(i',\n       (16329,\n        -1835): '\\U0009d9d9\\x12\u00b5\\x9c1\\U0001397b\u00cd\\U001026fb\\U0003f774e\\U00056b89',\n       (74, 2462): '',\n       (-20877, -30752): '\u00bf2\u00d2',\n       (31, -44): '',\n       (9390, 2181): '\u00f2\u00f8\u00be\u00ce\u00c9\\xa0\u00c9\\U00081424\u00d8'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=20830, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=154,\n        constraints={'min_value': 67,\n         'max_value': None,\n         'shrink_towards': 14025,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000364eb\u2d53\ud864\udfd4\u2e0a\u2e13\ucda4\ud821\udfc2\u2e36\u2e00\ud867\udf08\u2d8f\u2d4f\u2e0b\u2e3c\u2e35\\u2d79\ud81d\uded2\\u2d9f\u2dd3\\u2da7\\U00036fba\\U000387f9\u2e1d\u2e27\ud87a\udeb5\u2ded\u2e35\u2d52\u2d7f\u2d51\\u2d79\u2dc6\u2dfe\\U0003edb0\u2dda\u2d66\u2dd4\u2e41\u2dea\u2d92\u2db9\u2de7\u2e1d\u2dd5\ud800\udde3\\U0001bd3e\u443d\u2e44\u2e0f\u2e3e\u2d58\u2da1\u2e27\u2e3c\\u2d7c\u2e1a\u2df8\\u2d7c\u2e33\u2d67\u2e22',\n        constraints={'intervals': IntervalSet(\n             build_intervals([11596, 287103, 358299]),\n         ), 'min_size': 27, 'max_size': 127},\n        was_forced=False,\n        index=None)),\n      length=-7666,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 3, 0),\n                                     ('c', 2, 1)),\n                                    (('c', 3, 1), ('c', 1, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00be\u00ab\u00db|\\x85G\\U00044d66': 3.291570539841517e+16,\n       '\u00be\u00e4\u00ef': -551687037,\n       'CQ\\xad\u00e2j': 31166,\n       '': 6_123_039_157_165_222_554,\n       '\ud856\udc5b\u00b8\u00d8\u00d0\\U000c282b': 0.0,\n       'H': 8192,\n       '\\x82\\x16\\x8b\u00dc\\x7f': 9928184655544896.0,\n       '\u00a8': 13874,\n       '=': 512,\n       '\ud86f\udc49J\u00fbs\\x8f\u00a3\\U0003d71c4\\x90!erK\\x80gp': 2.9552796540410347e+251,\n       '\u00da\u00e9': 24952,\n       'E\\U0007c16e\\x0e': -10526,\n       '\\r7\\x9a\\U0005863d\u00f0b\\U000ac152\u00f0Z\u00dd\u00ee\\U0005d4b9\\x00u': -6559,\n       '\u1e70\u033a\u033a\u0315o\u035e \u0337i\u0332\u032c\u0347\u032a\u0359n\u031d\u0317\u0355v\u031f\u031c\u0318\u0326\u035fo\u0336\u0319\u0330\u0320k\u00e8\u035a\u032e\u033a\u032a\u0339\u0331\u0324 \u0316t\u031d\u0355\u0333\u0323\u033b\u032a\u035eh\u033c\u0353\u0332\u0326\u0333\u0318\u0332e\u0347\u0323\u0330\u0326\u032c\u034e \u0322\u033c\u033b\u0331\u0318h\u035a\u034e\u0359\u031c\u0323\u0332\u0345i\u0326\u0332\u0323\u0330\u0324v\u033b\u034de\u033a\u032d\u0333\u032a\u0330-m\u0322i\u0345n\u0316\u033a\u031e\u0332\u032f\u0330d\u0335\u033c\u031f\u0359\u0329\u033c\u0318\u0333 \u031e\u0325\u0331\u0333\u032dr\u031b\u0317\u0318e\u0359p\u0360r\u033c\u031e\u033b\u032d\u0317e\u033a\u0320\u0323\u035fs\u0318\u0347\u0333\u034d\u031d\u0349e\u0349\u0325\u032f\u031e\u0332\u035a\u032c\u035c\u01f9\u032c\u034e\u034e\u031f\u0316\u0347\u0324t\u034d\u032c\u0324\u0353\u033c\u032d\u0358\u0345i\u032a\u0331n\u0360g\u0334\u0349 \u034f\u0349\u0345c\u032c\u031fh\u0361a\u032b\u033b\u032f\u0358o\u032b\u031f\u0316\u034d\u0319\u031d\u0349s\u0317\u0326\u0332.\u0328\u0339\u0348\u0323': 1.0475457156545156e+16,\n       'a4\\U0009fcf0\\x8d\\x0c\\x96\u00ba\\U000aca7cJ': 2.270095446616784e+16,\n       'D\u00f9M': 938533320,\n       '\u00db\\x12\\x851\u00b5y\u00f0m': -1_674_878_882_398_975_353,\n       '\u00d9\ud842\ude17\"\\U0007f9ac\u00ff\\x1f\\x82\u00b9\\U0004f7f0x\u00d5\\x93\\x02\\U000ff8ed': -5.960464477539063e-08,\n       '\\U000889a0\u00a6h\u00ef\u00bd=V\\x7f\\x1b\u00c9s\\xad\u00cd\\U00100907\\U000a2ab3.\\U000beed4\\U000f908c\\x8ay': 12033},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(26, 20875): '\u00c8\\U000fb896',\n       (-11634, -7_770_677_779_309_651_733): '\u00f1',\n       (4787, 4): '~U(\\U000f8c08T\u00b7o\\xa04',\n       (-101, 9322): '\u00bcV'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.000462166965007782,
          "overall:gc": 0.0,
          "generate:args": 0.019159916089847684
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878971.201548
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0001355829881504178,
          "overall:gc": 0.0,
          "generate:args": 6.433302769437432e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878932.834754
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-94281816478165078959911212778234314976, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7412835604819105},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-29469,\n        constraints={'min_value': None,\n         'max_value': -17,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 5e-324},\n        was_forced=False,\n        index=None)),\n      length=43,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('b', 0, 0)),\n                                    (('a', 0, 1), ('a', 3, 3)),\n                                    (('b', 1, 0), ('b', 3, 3)),\n                                    (('b', 1, 2), ('b', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00e8\\U000b35e1\\U000b2638\\x92\\x1f\u00c0>\u00bb\\x1e\\x8e',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-254985128, -7653): '\u00b5\\U000db6cfZ\\x12\\x7f\u00c7',\n       (15285, 13475): '\u00e4]\\U000569e0\u00ff\u00cd\u00ec<',\n       (26499, 3875): ')\u00ac',\n       (84, 30874): '\\U000f27b4',\n       (20625, -18571): 'u\\U000e2ec7\u00ac\\x99\\x16\\x80',\n       (-3104, -12522): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-2732525324237613897, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=6.029164377653776e+307,\n        constraints={'min_value': -5.419122252024685e+212,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.570495081346677e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0008e956\\U0006fc69\\U0006fbfa\\U0006fc59\\U0007da74\\U0006fc99\\U0006fcd4\\U0006fc21\\U0007486d\\U0006fca6\\U0006fc47\\U0006fbf3\\U0006fc4d',\n        constraints={'intervals': IntervalSet(\n             build_intervals([457712, 662391, 746486]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-8_253_491_301_801_683_676,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\x04G\\x8c\u00d5\\U00088210E\\x86\u00c2qh\\x88',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\\U0005c968&\u00bf\u00d0=': 5.282664547943951e+16,\n       '\\x9a\\U00051e8f': -13913,\n       '+\\x1b': -2.82379101323827e+85,\n       '(\\x15\u00c8\u00ff': -24032,\n       ':V\\x8f\\xa0\u00c4\u00fe\u00e6\\x16\\x16\\x96': 6963},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-2_408_351_435_788_077_843, -80),\n       (-13170, -24695),\n       (-46, 19456),\n       (-18, 40),\n       (-9, -30140),\n       (36, -8121),\n       (5024, 15289),\n       (15863, -24965),\n       (24858, 27500),\n       (25662, -28281),\n       (744780742, 17459)},\n      slice_comments={(-19149,\n        23290): '\\x989\\U00013b48\\x02\u00f4\\U000b0c2b\\U000716e4\u00aey)\\U00041e1e\\x85Y\\U00080907\u00a1\\x8c\\U000f77bf\\x9a',\n       (-21159, 810843926): '\u00d8\\x81',\n       (-19419, -17680): '\u00c6\\x18\u00f6j',\n       (-1, -13693): '\\U0001d253\u00ee\u00ab\\U000539fc\u00af\\x0f1\u00be\u00b7J'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-101, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=19335,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=6,\n        constraints={'min_value': 5,\n         'max_value': 8,\n         'shrink_towards': 0,\n         'weights': {7: 0.05764979886784402,\n          6: 0.015157041619647434,\n          8: 0.02733519624814799,\n          5: 0.027098972755132848}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.19466105052407e-247},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1.111574657389351e-124},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xe1Q19J\\x84\\x9b\\x8a\\xe4\\xad\\x14Y\\xb9\\x0f\\xae\\xe3_',\n        constraints={'min_size': 17, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=58_436_313_816_525_702_583_406_352_660_448_425_592,\n        constraints={'min_value': 58_436_313_816_525_702_581_971_570_804_848_476_886,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=-28337,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('c', 0, 0)),\n                                    (('b', 2, 0), ('b', 2, 3)),\n                                    (('c', 0, 0), ('a', 0, 2)),\n                                    (('c', 0, 0), ('b', 2, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\u00b61H',\n                     [ExceptionGroup('',\n                                     [UnicodeTranslateError('\\U000fa05b:',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         'e',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      UnicodeTranslateError('\u00ec\\U00080e0d\u00a3UX\\U000f9c34\u00ba\\U0007ff5a\\U000cbc05\u00ce\u00afE\u7c6f\u00cf\\x17\ud877\udd46\u00e5',\n                                            0,\n                                            0,\n                                            'reason'),\n                      UnicodeTranslateError('\u00fc\u00d5\u00f4\\t\u00fc\uce4b\\x16-', 0, 0, 'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00f3\u00c7j\\U0001ef4b\\x1a\\x86s\\U000f2fb4B': -7,\n       '\u00cbb\u00be\\x0f\\r\\x06\u29af': -5.312311218052148e-12,\n       '\\x19\u00c6\u00d0': -61,\n       '\\x9c\\U00085bdf\ud836\udea6': -4.414599297229389e+16,\n       'NaN': 7.392243272938868e+118,\n       'G\u00ccq\\U00063793\\xad5\\x97\\U000c8c13t\\U000dc5c8': 25078,\n       '=y\u00ff\\x91\\x12T\u00d6\u00c5*': -2.220446049250313e-16,\n       '\u00ffe\ud83e\ude9f\\x0f\u00c56': -6.115706360541661e+16,\n       '~\\x08': -4.562270209326187e+16,\n       '\u00a2\\U00079f9c\\x954\u00e1V': 10084,\n       '\u00ed': -10614},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_448_086_787, -92), (3781, 26333)},\n      slice_comments={(512,\n        2_128_020_174_634_945_423): '\u00e3\\U00100a01\\x08\\x07\\x9e\u00b5\u00bbo'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0006084999768063426,
          "overall:gc": 0.0,
          "generate:args": 0.031690332980360836
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878956.733248
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.250000584870577e-05,
          "overall:gc": 0.0,
          "generate:args": 3.754196222871542e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878910.068704
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.595800656825304e-05,
          "overall:gc": 0.0,
          "generate:args": 4.166702274233103e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878952.186743
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-108, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\u0198\u0275\u01e6\u025a\u01a8\\U0008ba2c\u0204\u0197\u01c4\\U000d68b7\u01f8\u0226\u0267\u01dc\u022e\u027c\u0265\u0290\\U000cdd87\u01e4\u0245\u01df\u0229\u024c\u022b\u01e7\\U000fa057',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [404,\n                  9999,\n                  393869,\n                  409294,\n                  505299,\n                  1034175,\n                  1083973,\n                  1114110],\n             ),\n         ),\n         'min_size': 27,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-33795,\n        constraints={'min_value': None,\n         'max_value': -1598,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud86a\udeb6\ud86a\udf03\ud86a\udead\ud86a\udeff\ud86a\udecf\ud86a\udf2c\ud86a\udeb0\ud86a\udef9\ud86a\ude82\\U00062a8e\ud86a\ude7f\\U000b3a44',\n        constraints={'intervals': IntervalSet(\n             build_intervals([174667, 436505, 478592, 773735, 1061603]),\n         ), 'min_size': 10, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=18459,\n        constraints={'min_value': 2663,\n         'max_value': None,\n         'shrink_towards': 9_713_750_525_175_621_961_510_854_867_720_579_819,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.12741420811096574},\n        was_forced=True,\n        index=None)),\n      length=-28509,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\u00b1\u00df\\U0002fbb4q\\x84\\U000ae8e9\u00bb',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('<',\n                                     [UnicodeTranslateError('\\U0004a6c8\\U000e9374\u00d0(',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      ExceptionGroup('\u00df\\U00073430',\n                                                     [UnicodeTranslateError('',\n                                                                            0,\n                                                                            0,\n                                                                            'reason')]),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\\U0004c65d\\x92[\u85b9',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         's\ud850\udfb9\u00c7S\\x1a\u00af',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError('\\x7f0&\u00e1\\x12o\\U000e08f1\u816er',\n                                                            0,\n                                                            0,\n                                                            'reason')]),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('l2\\x14',\n                                     [UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\\x8e\\U000b78a1\\x01/\\U0004964a\\x04\u00e9\\U000b341e',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('',\n                                                     [ExceptionGroup('\\x12\u00e4',\n                                                                     [UnicodeTranslateError('\u00e2h\u00f2R\u00df\u00aa\\xad\\U000c88b2\\U0010bcfa\u00e9\u00ee\\U00081526%b>\u00b20\\x80\u00e6\\U000a007e\u00b6',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                         \"\u00d2s\u00c6\\U000adaec\\U0006e6e5+\\x06#\u00f4'\\x9d\",\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')]),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeTranslateError('',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeTranslateError('',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')]),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'c': 4.475226871217025e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(30, 22437),\n       (38, 52),\n       (96, -16329),\n       (8192, -8_264_708_761_673_187_131),\n       (22632, 64_074_449_321_808_482_783_247_246_505_044_927_239),\n       (65535, -74),\n       (1_031_333_092, 1000),\n       (534_709_961_485_513_501, -20702),\n       (4_202_458_401_119_819_913, -59)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-8, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.6127232152043843},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x93\\x1a',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'q\\xa1\\x01N\\xacm?\\xcb&ad\\x06\\x87\\xa3,e',\n        constraints={'min_size': 11, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.4996168734269522e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.6682457182711595},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1e-05,\n        constraints={'min_value': -inf,\n         'max_value': -1.3442809832272003e-232,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.2250738585e-313},\n        was_forced=True,\n        index=None)),\n      length=-88,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('a', 1, 0)),\n                                    (('a', 1, 2), ('b', 1, 1)),\n                                    (('a', 2, 0), ('c', 0, 3)),\n                                    (('a', 3, 3), ('a', 2, 0)),\n                                    (('b', 0, 0), ('b', 1, 1)),\n                                    (('b', 0, 2), ('a', 1, 0)),\n                                    (('b', 0, 3), ('c', 3, 2)),\n                                    (('b', 2, 3), ('b', 1, 1)),\n                                    (('b', 3, 0), ('a', 2, 0)),\n                                    (('c', 0, 1), ('c', 1, 1)),\n                                    (('c', 1, 1), ('c', 1, 0)),\n                                    (('c', 2, 0), ('b', 3, 0)),\n                                    (('c', 2, 1), ('a', 1, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'*\u00e9\\U0001e5e7p': 1.3406165573236112e+286,\n       '\\x83\\x90\\U0004bf2d\\x03\\x90': -4.0238587861313896e+16,\n       'F\u00c5': -1.7714529015516606e+16,\n       '\u00ab': 30425},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-32365, 1100),\n       (-124, 60),\n       (-44, -17269),\n       (95, -4682),\n       (4084, -95),\n       (9576, -7046),\n       (17605, -20191)},\n      slice_comments={(-13072, 40): '\\U000c6322\u00efG',\n       (-22469, -11_504_166_161_704_344_622_391_484_701_428_022_107): '\u00f1y',\n       (2_613_933_407_270_724_980,\n        28843): '\\x17\u00c3\u00b0W\\U000abfbb\\x9eV\u00bc\u00aa\\x9e\u00afD\\U00053b6e\\U000ab5bc\\U000c372a\u00e6*!\u00d72 n=\ud881\uddbf\\x93\u00ac\u00f6\\x96o\u00a8T\u00c1'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0016539579955860972,
          "overall:gc": 0.0,
          "generate:args": 0.04729362280340865
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878962.669898
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=10057, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1,\n                  152859,\n                  222167,\n                  335306,\n                  405675,\n                  460309,\n                  500593,\n                  709614,\n                  908115,\n                  1028111,\n                  1114111],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),),\n      length=-8,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('a', 0, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\x87#\u00aa',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='\u00ff\\x8a@g\\U0006d1ca!\\U00107d0c\\x98Mm\u00f6\\t\\x9c\u00d6\\x1e\\U000c7d73v\u00e4\\x1dh\ud880\udff0\u00d0\u00be\u00f6>\\U000b2e7b\u00ecB\\U000504c3E/\\U000f47b2',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(54, 1982), (95, -6725), (13393, 57)},\n      slice_comments={(695, 404): '\\U00100914\\U0007ef8f\u00dazS\\U00051317'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=8369585602959914888, context=(), group_elems=()),\n      nodes=(),\n      length=30032,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('a', 0, 2)),\n                                    (('a', 2, 3), ('b', 2, 3)),\n                                    (('b', 2, 1), ('c', 3, 0)),\n                                    (('b', 3, 3), ('c', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('', 0, 0, 'reason'),\n      expected_traceback='\u00b5%F',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-28140, -27212)},\n      slice_comments={(142_307_361_994_614_647,\n        -527): '\u00d9\u00a3\u00aa\\U000dc846\ud843\udcda\u00af\\U001047efc:d\\x116\u00cf\\x87G\\x1a\\x8c\u00cc\\U000437b1\u7567\\x16',\n       (-7_272_483_496_356_558_001, -8451): '\\x8b\\x8d',\n       (11, -28406): '\u00f7\\U0008cd24\\x15J\u00ecu\u00ef'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1632, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=53545,\n        constraints={'min_value': 25292,\n         'max_value': None,\n         'shrink_towards': -26892,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u01d3\u024f\u0255\u0240\u0203\u01ef\u01d1\u0259\\u0a12\u0258\u0258',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [404,\n                  8192,\n                  237121,\n                  326216,\n                  385673,\n                  394208,\n                  517382,\n                  529223,\n                  1066985,\n                  1114110],\n             ),\n         ),\n         'min_size': 9,\n         'max_size': 109},\n        was_forced=False,\n        index=None)),\n      length=13064,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 1),\n                                     ('c', 0, 1)),\n                                    (('b', 1, 3), ('a', 0, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\u00fa&\u00e0lQ\u00db\u00cf\\x82`\\U0007fe15',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'O\\x9d#JG\\x08\\U0003dd67\u00c5&': 4.244368949565748e+16,\n       '\\x99\\U000f084d\\r\u00c7': -22060,\n       '\u00ea\u00e47\u00eb\u00a8\u00a5\u00b32\\x15': 31664,\n       '\u00efH': -3_428_989_781_697_055_877,\n       '\u00d6\u00dc\\x85Q\\U0005810e\u00f7\u00ab+E\u00e1\u595dh\u00e8\\U000e174a\u00d9\\x80': 2.416770130685557e-58,\n       '\u00aa\u00d5\\U00048a25': -49,\n       '\\x9c': -1.192092896e-07},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(24061, -619986207)},\n      slice_comments={(-52, -20411): '\\x19\\x04&\\U0005a9e2\\U0003fbed\u00cfJ',\n       (100, 13323): '\\x9f\\x13',\n       (18497, -25910): '\\U000d73c9#\\U000e03c0\u00c9\u00f2\u00e0I\u00fdVL\u00b3Y^\\x0c\\U000620c5',\n       (114, -8774): '\\U0004f98aH\\U0010907e'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=9100, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 1.0},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-1_876_689_495,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0004dfc5\\U0004dfa7\\U0004df8b\\U0004df9b\\U0004df5f\\U0004dfd5\\U0004df63',\n        constraints={'intervals': IntervalSet(\n             build_intervals([319288, 986763, 1050353, 1114111]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'{',\n        constraints={'min_size': 1, 'max_size': 62},\n        was_forced=False,\n        index=None)),\n      length=-18133,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('a', 1, 1)),\n                                    (('b', 2, 0), ('b', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='',\n      has_discards=True,\n      target_observations={'\u00c88\\x86': 4.788851530092552e+16,\n       '\\x0c': -2.6927398323628105e+112},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(168, 7410), (1_768_224_888, 18573)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=19960, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 6.71756081491718e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=7_560_692_885_819_499_726,\n        constraints={'min_value': 24226,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=8.589282502771458e+306,\n        constraints={'min_value': 2.8163093827767474e+35,\n         'max_value': 1.6259897750469772e+308,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.1754943508222875e-38},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8744048538305818},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x05\\xec\\xa6',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8458200915210266},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.9554389991353529},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xbc\\xeb',\n        constraints={'min_size': 0, 'max_size': 57},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.5086009700375841},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\x1bW\u00bf]\\U000ab90a\\x08\\U00074c87\u00d1\u00e5\\xa0\u00b8\\U000a2216\u00aa\\U00033791\u00c6V\\U0007ef1e\u00c9\ud83c\udd3aH\\U0009fbf7\\x9e',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  9999,\n                  122967,\n                  135529,\n                  172758,\n                  335410,\n                  474426,\n                  534213,\n                  647521,\n                  730624,\n                  917333,\n                  1010719,\n                  1073797],\n             ),\n         ),\n         'min_size': 14,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 3.320822029871005e+306},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0007a4e1\\U0007a458\\U0007a499\\U0007a435\\U0007a4b5\\U0007a46a\\U000a5e29\\U0007a447\\U0007a459\\U0007a4af\\U0007a4db\\U0007a464\\U0007a4c6\\U0007a481\\U0007a4a1\\U000d5831\\U0007a423\\U0007a479\\U0007a470\\U0007a502\\U0007a48a\\U000c8a11\\U0007a4f2\\U0007a4d4\\U0007a48e\\U000bdb0e\\U0007a407\\U0007a454\\U0007a435\\U0007a417\\U00097647\\U0007a4b8\\U0007a489\\U0007a453\\U0007a45c\\U0007a48a\\U0007a43d\\U0007a499\\U0007a4fc\\U0007a4a5\\U0007a482\\U0007a439\\U000c288d\\U0007a4ae\\U0007a411\\U0007a4cb\\U000ba939\\U0007a495\\U000dbdf3\\U000bfce4\\U0007a415\\U0009c411\\U0007a41d\\U0007a411\\U0007a452\\U0008cda4\\U000929b0\\U0007a484\\U0007a4f8\\U000b5bdb\\U0007a4cd\\U000b7437\\U0009042b\\U0007a49c\\U0007a4a7\\U0007a40b\\U00089626\\U0007a472\\U0007a41a',\n        constraints={'intervals': IntervalSet(\n             build_intervals([500740, 691140, 696285, 916943, 1101890]),\n         ), 'min_size': 47, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.6798913702192407},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"x~<\\x10\\xa6'\\xcf\\x85\\xe6\\x96\\xabU\\xf2L\\x1f\\x98\\xe3,\\xa7\\x833\\x10\\xbeU`\\xbe\\xc4\\xcf\\x94\\x1d\\x13+\\xa0=/)J\\x16\\xe3!j\\x8a\\x03\\xfa\\xf1\\x8fA\\xba\\x12~\\xf5/Y\\xbd\\xf0\\x8b{\\x9dt_$M\\xe3\\xd3}\",\n        constraints={'min_size': 49, 'max_size': 92},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.2828561815728248},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.07585661775078469},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.9824712599566197e+307,\n        constraints={'min_value': 2.550933083078245e+249,\n         'max_value': 1.745132088827789e+308,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 9.370024505878814e-226},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00051df7\\U00051d68\\U00051d78\\U0005324a\\U00051d4c\\U00051da4',\n        constraints={'intervals': IntervalSet(\n             build_intervals([335143, 578081, 615284, 666109]),\n         ), 'min_size': 3, 'max_size': 103},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xc8\\r\\x8e\\xb7?W\\x83\\xab\\x9c\\xb8j\\x12\\x88\\x19;\\xee\\xa8RF\\xf9}\\x1e\\xe6-\\x16l\\xb3\\x96\\x0f\\x9a\\xc4&\\x01\\xcf\\xcf\\xecF\\xebC\\xf3\\xd7\\x1as\\x0f&Z',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\t\\x83\\xa7\\xa36\\xff(Hr4W\\xf6\\x1a\\xc9\\xefD\\xd1db@\\x8ek\\x83c\\xcdx\\x96[x\\x7f\\xa7\\xa7\\xa0?v\\xb9\\x8f.\\xd5V\\x10U\\x8f^\\xa9',\n        constraints={'min_size': 44, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=110,\n        constraints={'min_value': 13,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"\\x19`A\\xd1\\x15\\xdd\\xc0\\xbe\\xa3\\xd7T\\xack\\xb1S\\xe5\\xf7\\x1f\\x03\\xd3b\\xb6E\\xad\\x89GK.\\xa5/\\xb5\\x1d\\xa3?\\x8b\\xd2\\xc5.\\xf7\\xca\\xc4\\x0b!t,\\xa8\\x03$v\\x048\\x16Z\\x8a}ZB\\xa6h\\x05\\xa3\\x1b\\xf25\\x03z':\\x04\\x11\\xdc/\",\n        constraints={'min_size': 49, 'max_size': 149},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u8426\\U000a8d50\u849a\u84de\u8412\u83f4\u840a\\U000d7250\u847e\\U000b1737\u84e2\u841e\u842d\u8445\\U000b8e9f\\U000ac870\u8427\u848c\u8490\u8472\u848d\u8442\u84a8\u840b\u8452\u8457\u84d1\u8486\ud802\udc20\\U000ce428\\U0001a311\u848e\u84c0\u8402\\U000d44b3\\U00012f4d\u84cb\u83f7\\U0001e5f2\u8457\u84ca\u8402\u8454\u84a5\u847f\u840b\\U000c885c\u84c4\u83f9\u8412\u8499\u8445\u83fe\\U000cd711\u8483\u841b\u846a\\U000ce368\u840e\u84b2\u840f\u8421\\ue2a3\u846d\u8484\u8426\u84e1\u8423\u8494\u8455\u8485\\U000adac1\u8445\u84bf\u8417\u849d\u848c\u846e\ud808\udedf\ud86c\udd65\\U000bc377\\U0009d1f0\u841e\u848a\u8479\u84dd\u848a\u84a3\u8475\u8494\u841f\\U0001ab72',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [33778,\n                  128730,\n                  167508,\n                  256313,\n                  407140,\n                  429684,\n                  602058,\n                  775936,\n                  808984,\n                  898088,\n                  957758],\n             ),\n         ),\n         'min_size': 38,\n         'max_size': 138},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=30652,\n        constraints={'min_value': 7920,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x98',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.5759342932320607},\n        was_forced=True,\n        index=None)),\n      length=-25396,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 0, 2),\n                                     ('c', 2, 1)),\n                                    (('c', 0, 3), ('b', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         'N\\x96\\x1b\\U0003c908\\x12\u00d5\u00f9\u00d0\\U0007e129\ud841\udf47\u00c2\\U000490b9\u00cd\u7108\\x97',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00b1\\x97\u00d2\\x15\\x80\u00f1\\x81\u00fc\u00b1n': -1.1125369292536007e-308,\n       '\u00d0\\U000a0ba0\\x9bH': -773_612_187_131_239_086,\n       ';': -5,\n       '\\x14\\U000c88c2\u00aa': 3.4998180441652264e+16,\n       'B\\xad2\\U0009657f\u00af\\U000fd215\ud858\ude84\\x95': -84,\n       '': -19942,\n       '\\x19n\ufa0a': 1_858_232_463,\n       '\ud871\uddae': -6_043_518_895_654_113_226,\n       'w\u00cf\\xad\\x07': 1.401298464324817e-45},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-7_829_321_486_089_139_180, 21375),\n       (-7_222_484_769_911_599_148, 26195),\n       (-116, 1024),\n       (-40, -1002)},\n      slice_comments={(-14214,\n        7181): '\\x0e\\U000f605b+\u00d7\\U000f117e<zg\\U000ec3f5\\x00\\U00042b34\u00e3\\U0006a103\u00a2O0\u00d2',\n       (569475312, 4114): '\\x06',\n       (-1869, -16475): 'o\\U00102d3b\\U000d3fcd\\x93~}'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=886203826, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=202,\n        constraints={'min_value': -69,\n         'max_value': 264,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7111149400473528},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.043099781436740654},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-37,\n        constraints={'min_value': None,\n         'max_value': 9999,\n         'shrink_towards': -21170,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=-8241,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('a', 3, 2)),\n                                    (('a', 1, 0), ('b', 0, 0)),\n                                    (('a', 1, 2), ('a', 1, 2)),\n                                    (('a', 1, 3), ('c', 2, 1)),\n                                    (('b', 0, 2), ('b', 2, 1)),\n                                    (('b', 1, 0), ('a', 0, 1)),\n                                    (('b', 2, 2), ('c', 3, 0)),\n                                    (('c', 1, 2), ('c', 0, 2)),\n                                    (('c', 2, 0), ('a', 0, 2)),\n                                    (('c', 2, 3), ('b', 0, 2)),\n                                    (('c', 2, 3), ('b', 3, 2)),\n                                    (('c', 3, 0), ('a', 0, 1)),\n                                    (('c', 3, 0), ('c', 1, 1)),\n                                    (('c', 3, 3), ('c', 1, 3)),\n                                    (('c', 3, 3), ('c', 2, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_683_844_843, 6947), (-2316, 4955)},\n      slice_comments={(-6306, -24656): 'dist'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=65535, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U0004e0e5\\U0004e193\\U0004e110\\U0004e0e6',\n        constraints={'intervals': IntervalSet(\n             build_intervals([319644, 374311, 666452, 918735, 920093]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=1024,\n        constraints={'min_value': None,\n         'max_value': 8298,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=9382,\n        constraints={'min_value': 512,\n         'max_value': None,\n         'shrink_towards': 98,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\uc86d\uc8c1\uc861\uc867\uc893\uc8aa\uc8d8\uc883\uc88d\uc938\uc8c4\uc934\uc8b6\uc860\uc8db\uc8dd\uc872\uc90b\uc8a1\\U0003ff17\uc8df\uc882\uc916\uc8e0\ud010\uc8d2\uc922\uc8a7\uc90a\uc91e\ud85f\udf29\uc926\\U0003a365\uc8d2\uc8ac\uc879\uc8d5\uc853\uc8b6\\U000135c5\uc8cb\\U0001a890\uc8f1\\U0003c340\uc89f\uc8f6\uc871\ud842\udead\\U000192b7\uc927\uc90a\uc87a',\n        constraints={'intervals': IntervalSet(\n             build_intervals([51277, 354960])),\n         'min_size': 23,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.99999},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=66,\n        constraints={'min_value': 39,\n         'max_value': 79,\n         'shrink_towards': 575,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=7.050422447338776e+307,\n        constraints={'min_value': 1.7201735814415778e-220,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1e-323},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=4983,\n        constraints={'min_value': 3330,\n         'max_value': 11122,\n         'shrink_towards': -20919,\n         'weights': {10850: 0.029513406446471598,\n          5606: 0.015033836111628817,\n          5202: 0.011011304314062567,\n          3750: 0.03295291483624827,\n          6088: 0.0018062131215434523,\n          5846: 0.02907158928040407,\n          4142: 0.02171948724336339,\n          6258: 0.009537360439451583,\n          5414: 0.024070272787465846,\n          4049: 0.01844503246886474,\n          8360: 0.014344770712132596,\n          6013: 0.021227940815418966,\n          6053: 0.02494940093935795,\n          8192: 0.018470772039310537,\n          10167: 0.02214263270041503,\n          9454: 0.030923628260835535,\n          8257: 0.00895635214847959,\n          4796: 0.018189161101613987,\n          6768: 0.02442400526416738,\n          11121: 3.30339129421877e-05}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xfa,|a\\xd2\\\\Ud\\n-\\x9d(\\xde\\xe8G4x\\x1b\\x07]\\x18c\\xdb+\\xd1\\x0c}\\xa1\\x81\\xe4S\\xce\\xd7\\xec~\\x9a\\xe9\\x18D\\xff\\x90\\xe85\\xaf\\xb3c\\x03\\x8e\\x94\\'\\x91l~\\xef\\xe4\\x97#^8\\xf9\\xe4\\xa3+\"\\x97\\xcd\\x11\\xc1\\xe8\\xf9\\x8c\\x83\\x8e\\x1e\\x88G\\x08\\xe5\\xc6Iq\\xc6M',\n        constraints={'min_size': 20, 'max_size': 83},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xb6\\xb6\\x9e\\x14\\xd3:]\\x02\\x91s\\x97MB\\x15e!\\t',\n        constraints={'min_size': 17, 'max_size': 117},\n        was_forced=False,\n        index=None)),\n      length=51,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 0),\n                                     ('c', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('factory', 0, 0, 'reason'),\n      expected_traceback='1/0',\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-27259, 116),\n       (-26581, 20331),\n       (-8547, -21382),\n       (46, 42),\n       (23511, -118)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=10780, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=6.142837358566259e+16,\n        constraints={'min_value': -1.0366309193398624e-208,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.783225176625017e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([273523, 538078, 794388, 873058]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0, 1000, 99500, 486269, 538542, 603942, 629860, 719218],\n             ),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None)),\n      length=12684,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('a', 3, 3)),\n                                    (('c', 2, 2), ('b', 1, 2)),\n                                    (('c', 2, 3), ('a', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\x1d\\U000dd05da\u00ac\\x159o\u00ab',\n                     [ExceptionGroup('',\n                                     [UnicodeEncodeError('unknown encoding',\n                                                         '\\x9b\\U000d9e1c\u00f0\u00ec\\U000758b3\\U0004fdb3\\U000633bb\u00a9',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('9\\U00063da9',\n                                                     [UnicodeTranslateError(')\\U000c1364\\x91\u00b1\\x94\u00b9',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         'd[i\u00ed',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      ExceptionGroup('\u00d8',\n                                                                     [ExceptionGroup('\u00d6\\U000b2894\\U000e1ae1',\n                                                                                     [ExceptionGroup('<',\n                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         'YJ\ud0de\u00db\\x17\u00cb\u00b5:#',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      ExceptionGroup('',\n                                                                                                                     [ExceptionGroup('',\n                                                                                                                                     [UnicodeTranslateError('\u00da3\u00f5',\n                                                                                                                                                            0,\n                                                                                                                                                            0,\n                                                                                                                                                            'reason')]),\n                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                         '!\\U0005302f\\U0009c957',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                         '\\U000e2155\u00c2z\\x86\\x81',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason')]),\n                                                                                                      ExceptionGroup('?',\n                                                                                                                     [UnicodeTranslateError('\u00d7\u00a1\\x96\\x983\u00eei\\U00081343\\x82\\x9a',\n                                                                                                                                            0,\n                                                                                                                                            0,\n                                                                                                                                            'reason'),\n                                                                                                                      ExceptionGroup('[em\u00b8\u00cea\\U00052174\\U0009a5f5\\U000c9bca\ud888\udeb1',\n                                                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                                                         b'',\n                                                                                                                                                         0,\n                                                                                                                                                         0,\n                                                                                                                                                         'reason'),\n                                                                                                                                      UnicodeTranslateError('',\n                                                                                                                                                            0,\n                                                                                                                                                            0,\n                                                                                                                                                            'reason')])])]),\n                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                         '8\\x06\u00fc',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                         '\\U000cef57o\\U0007eadcM;\\U0009aff1<',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason')]),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                         '\\U0005e3aa\u00d5\\U000ee2a7`',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeTranslateError('\\x93\u00dc\\x10\u00d3\\n\u00a1\ud886\udd61r',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')])])])]),\n      expected_traceback='\u00e9\\x7f\\U00097308\\U000590d3',\n      has_discards=True,\n      target_observations={'\u00d1\\U000535c5': 1024,\n       '1B\\x1f?': 2.235485627991209e+279,\n       '\u00b3\u00ae\\x94\u00e3': 512,\n       '': 5.174350851430281e-52},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-6875, -20007): '\u00ef\u00b8\\x9d',\n       (-2410, -114): '',\n       (-22257, 31813): 'auto',\n       (-4357, -2): '',\n       (3_157_919_677_781_578_739, -14951): '',\n       (-7, -31046): '\\x85\u00e8\\U0006fa89',\n       (-65, -96): '\u00b2\u00a1\u00d7\u00bf\u00dd\\U000ef96d\\x189~o\u00d0\\x17',\n       (5583, 8192): '\u00ba\\x0bO',\n       (-431824995, 15370): '\u00d3\\x01\u00b6'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-1180277177, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\ud800\udcee\\U000100fc\ud800\udc17\ud800\udc2d\\U0001003e',\n        constraints={'intervals': IntervalSet(\n             build_intervals([65535, 314743, 677942, 1114110]),\n         ), 'min_size': 1, 'max_size': 101},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-15257,\n        constraints={'min_value': None,\n         'max_value': -67,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.997552938981618e+307,\n        constraints={'min_value': 7.306173324553617e+301,\n         'max_value': 1.2427964922037204e+308,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.6995171551623578e-12},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00048544\\U000484fa',\n        constraints={'intervals': IntervalSet(\n             build_intervals([296011, 538750]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=9.216861490680784e+303,\n        constraints={'min_value': -2.9398900611275403e-202,\n         'max_value': 1.2668588551668784e+304,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.2810491602590756e+16},\n        was_forced=True,\n        index=None)),\n      length=106,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('c', 0, 1)),\n                                    (('a', 1, 1), ('b', 0, 1)),\n                                    (('a', 1, 2), ('a', 3, 0)),\n                                    (('b', 0, 1), ('b', 2, 0)),\n                                    (('b', 1, 3), ('c', 1, 1)),\n                                    (('c', 1, 0), ('c', 2, 1)),\n                                    (('c', 2, 2), ('b', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\x84\u00dbp^\\nZ\u00b2\\x96\u00ee\\x03\u00b9',\n                     [UnicodeTranslateError('\\xa0', 0, 0, 'reason'),\n                      ExceptionGroup('--hypothesis-explain',\n                                     [UnicodeTranslateError('\u00ba\\x9c9 \u00a1\u00f1\\U000859c9|\u00ea-\\x02',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '`\\U0001b6d3\\U00039429\u00fd\u00af\u00fb\\U000a592f',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError('\\x1f\\U000d1f8bc/\u00f5',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeTranslateError('\u00be',\n                                                            0,\n                                                            0,\n                                                            'reason')])]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00ea\uc940\ud848\udd52\u00bc': 1.0667710979834352e+16,\n       't\\x1d\\U0003b330\\x8d': 2.3614694745971188e+16,\n       '\\U00045856\\U000ed788\\U000b128c': 4.911588305049354e+16,\n       '\\U00015e51\\U0008205c\\xad\\U0008d09eEE\\U0006e427\\x9a\u00b9\u00ff\u00c3': 73,\n       'true': -9.318400456053896e+131},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-43_992_493_630_329_555_140_667_701_418_993_153_061,\n        31563)},\n      slice_comments={(-55,\n        6461): '\\U0007d24f\\U0008c74a\\U000cf0a2Z\\x8b\\U000fe9d8',\n       (3133, -21648): 'iCz\u00bb\\x1f\u00fb\\x079'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1000, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U000dfe93',\n        constraints={'intervals': IntervalSet(\n             build_intervals([280261, 304921, 808724, 979214]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.796749396811063e+307,\n        constraints={'min_value': 4.081521183572668e+16,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.103515625e-05},\n        was_forced=False,\n        index=None)),\n      length=77,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('c', 0, 1)),\n                                    (('a', 1, 1), ('c', 0, 2)),\n                                    (('b', 2, 1), ('a', 0, 1)),\n                                    (('b', 3, 2), ('c', 3, 3)),\n                                    (('c', 3, 0), ('c', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x85\\x14': 29643,\n       '\u00ca': 2.2620010142217224e+16,\n       'min_value': -78},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_880_057_686, 7224),\n       (-1_403_632_861, 7_943_483_449_895_466_103),\n       (11798, -18689),\n       (16233, -31676)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-3730, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=41169,\n        constraints={'min_value': 20175,\n         'max_value': 41169,\n         'shrink_towards': 8577,\n         'weights': {36653: 0.18599981360298784,\n          20800: 0.1444192308412177,\n          40100: 0.07179839323614791,\n          37174: 0.08732877061539772,\n          38066: 0.053009768368486164,\n          41169: 0.14085893680877204}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u53fd\u644d\u541e\\U00039347\u53c6\u5440\u53c4\u5426\u53e5\u543f\u5430\u541a\u547c\u5410\u5402\u5486\u545d\ud843\udfe1\\U0008df43\u541b\u53c9\u539b\u5413\ud849\udd38\u53cf\\U000acaaa\u546f\\U00088846\\U0008873c\u53eb\u53ea\\U000ce1c0\u53e9\u5396\u53c8\u53ca\u540c\\U000a2b9f\u5464\\U0001c3c0\u5437\\U000354e7\u5397\\U000a6684\u5404\ub81a\u5492\u5430\u5456\\U000aebe9\u53f0\u543a\ud856\udd65\u53c7\u53ed\u546e\u5484\u5452\u540c\u5443\u53e5\\U0008a168\u53c0\u5477\u547b\u53df\u5417\u53bc\u546a\u5421\ud875\udd9e\u53ab\u5400\u53ac\u53bd\u53ba\\U00083b2e\u53c1\u548c\u547f\u53ab\u544d\\U000a2bc4\u53f3\u545f\u5411\u53e9\u543a\u53c7\\U000ad479\u53d8\u548c\u53e0\u5443\u540e\u53e2\u543d\u540b\u53d3\u53ba\\U00038310\\U000198f3\u5449\u53a6\u53a7',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [21395,\n                  65535,\n                  75843,\n                  249083,\n                  493110,\n                  593213,\n                  658160,\n                  736252,\n                  769699,\n                  788077,\n                  839183,\n                  852017],\n             ),\n         ),\n         'min_size': 50,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=-1_515_647_904,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 1),\n                                     ('b', 1, 0)),\n                                    (('b', 0, 3), ('a', 1, 2)),\n                                    (('b', 1, 0), ('b', 0, 0)),\n                                    (('b', 1, 3), ('c', 1, 0)),\n                                    (('b', 2, 1), ('c', 0, 2)),\n                                    (('b', 3, 0), ('a', 2, 1)),\n                                    (('b', 3, 0), ('b', 0, 2)),\n                                    (('b', 3, 3), ('a', 0, 2)),\n                                    (('c', 0, 1), ('c', 0, 3)),\n                                    (('c', 1, 0), ('c', 2, 2)),\n                                    (('c', 3, 1), ('c', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x0f\ud873\uddb4\\x01\\x0f\\U000dd3ee)': 111_281_242_553_533_183_039_879_928_468_453_470_809,\n       'FALSE': 8.054728093057246e-260,\n       '\u00f1\\x9d': -1.9,\n       '\\U000d20a1': 0.05},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-17189, 12219),\n       (-482, 96),\n       (-69, -29620),\n       (113, -8777),\n       (115, 114),\n       (5868, -8547),\n       (15131, -160_091_554_028_157_264_226_228_612_472_112_099_276),\n       (746544681, 32544)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-20459, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U00075127\\U00077a9f\\U00099145\\U0006f077\\U0006f0d2\\U0006f0b7\\U0006f08b\\U0006f0de\\U0006f14d',\n        constraints={'intervals': IntervalSet(\n             build_intervals([454772, 676518, 812112]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u0440\u0438',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1024,\n                  48629,\n                  110710,\n                  236954,\n                  358199,\n                  512299,\n                  663094,\n                  700595,\n                  750610,\n                  830515,\n                  878087,\n                  972898,\n                  1089811],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=512,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 1.0},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=5.138173682184614e+307,\n        constraints={'min_value': 5.705744729599338e-31,\n         'max_value': 6.596426387730079e+307,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.2866689698878526e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud847\ude1d\ud847\udde4\ud847\udddf\ud847\ude62\\U000abfc7\\U000475ab\\U000a0a22\ud847\uddf3\ud847\ude71\ud847\ude5c\ud84c\udc53\ud847\udd89\ud847\udd98\ud84c\uddd3\ud847\uddd8\ud847\ude53\ud847\uddc7\ud847\ude75\ud847\uddbc\\U00057612\ud847\ude54\ud847\ude69\ud847\ude25\ud847\ude3e\ud847\ude06\ud847\udd96\ud847\ude05\ud847\ude51\ud847\ude43',\n        constraints={'intervals': IntervalSet(\n             build_intervals([138618, 833083, 982593]),\n         ), 'min_size': 20, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00097006\\U00096fb0',\n        constraints={'intervals': IntervalSet(\n             build_intervals([618281, 745383]),\n         ), 'min_size': 0, 'max_size': 83},\n        was_forced=False,\n        index=None)),\n      length=-26,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 0),\n                                     ('b', 0, 1)),\n                                    (('a', 1, 1), ('c', 2, 2)),\n                                    (('b', 1, 3), ('a', 2, 1)),\n                                    (('b', 2, 1), ('c', 2, 3)),\n                                    (('b', 2, 2), ('a', 1, 1)),\n                                    (('c', 0, 3), ('b', 1, 0)),\n                                    (('c', 1, 1), ('a', 3, 2)),\n                                    (('c', 1, 3), ('c', 1, 0)),\n                                    (('c', 2, 0), ('a', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\U000653ba\u00b5', 0, 0, 'reason'),\n      expected_traceback='',\n      has_discards=False,\n      target_observations={'D\u00fa\\x97': -3.3843131062065903e+270,\n       '\\U000aa406\\U000799cf\\U000a6811\\U0007d96a\\U0004b541~,\u00e0': -8_784_615_221_502_464_226,\n       'O\\U000d4824i\u00f4': -1.4747702415663788e+16,\n       'RW': 6.424799707312206e+16,\n       '\\x06\\x8ca\\U0007f846\\x82\\U0005d45a\u00b3L\\U000a63ac\u00ba': -1.2253677829346215e+147,\n       'Q\u00a2\\x06\u00b5\\x93P': -32,\n       'g\u00ca\u00d5n\u00f2\\U0010db0d\\U00036577': -8.440028652058631e+40,\n       '\\x96[\\x8d\\x12': 0.0,\n       '\\U000716ad\\x08R\\U00050be9~\\x80': 111,\n       '>': -2.3666403643369956e+16,\n       '\u00f7\u00e5U\\U000cd4b4\u00f4': -5.554341493342047e+16,\n       'c\u00b9\\t>\\x1b': -79,\n       '\u00bb\\x00\\x08\\x14\u00a9\u00bb\\x19:\\x846A': -28315,\n       'j': 625517038},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-21981895,\n        2_064_915_634_826_796_150_081_882_485_070_263_485),\n       (-19441, 23823),\n       (-17111, -2),\n       (-16118, -292671249),\n       (-14160, 4082),\n       (-13039, 25258),\n       (-6097, 3819),\n       (-1187, 26004),\n       (-37, -1_544_348_428),\n       (-18, 5476),\n       (-12, 59_505_526_635_939_223_412_242_160_043_709_141_375),\n       (66, -16),\n       (84, -63),\n       (97, -101),\n       (1084, 13504),\n       (8142, -16891),\n       (10918, -25930),\n       (19679, -689282290),\n       (31401, -1540),\n       (31784, -10690)},\n      slice_comments={(30646, 13882): 'ReportWithDiff',\n       (-597640393, 9): '',\n       (44, -25189): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-527129724, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\u4735\u478b\u47fa\u4785\u4817\u47fd\u9a83\u47a3\u47df\u4750\u47b5\u47fd\\U0003ba52\\U0004af1e\u4755\u479f\u47b6\u47ff\u476f\u482b\u477e\\U000d4d4b\u47a5\u472f\u47b3\\U000639f3\\U00059746\u4788\u473c\u47cf\\U000cdbf0\u4775\u4749\u47b8\u47c4',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [18222,\n                  46577,\n                  148843,\n                  195590,\n                  200324,\n                  202824,\n                  239530,\n                  462405,\n                  508694,\n                  511255,\n                  562313,\n                  615730,\n                  628356,\n                  632212,\n                  735220,\n                  738599,\n                  756920,\n                  904475,\n                  981920,\n                  1045466,\n                  1062281,\n                  1093846,\n                  1114111],\n             ),\n         ),\n         'min_size': 30,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),),\n      length=11187,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('c', 3, 1)),\n                                    (('a', 3, 2), ('b', 3, 3)),\n                                    (('b', 0, 0), ('b', 3, 3)),\n                                    (('b', 3, 2), ('b', 2, 1)),\n                                    (('c', 1, 0), ('a', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-22128, 11037),\n       (-4, 1024),\n       (9, 1_879_083_559),\n       (25682, -8_213_725_643_943_020_702),\n       (754797160, -82)},\n      slice_comments={(-9693, -39): '@\u00c8\\x1a'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x108be8cb0>, min_size=0, max_size=inf).map(tuple), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text())), has_discards=one_of(nothing(), nothing(), booleans()), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), length=one_of(nothing(), nothing(), integers()), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason'))))).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.010579291032627225,
          "overall:gc": 2.3708969820290804e-05,
          "generate:args": 0.1517633736366406
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 2,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 2,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878958.05543
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1999556475, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=8_151_553_202_236_071_833_046_257_646_147_736_606,\n        constraints={'min_value': 1020,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.29587018530018755},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud803\udeff\ud803\udf83\ud865\udf49\ud803\udf43\\U00010fa1\\U00010faa\ud803\udf0e\\U00010fd1\ud876\udc34\\U00010f93\\U00010ee7\\U00010eea\ud803\udfe2\\U00010f97\ud867\udec9\ud803\udf1a\\U0001e616\ud803\udf88\\U00010f2b\ud803\udfca\ud803\udfc1\\U00010eeb\\U00010fdf\\U00010ee7\ud803\udfb6\ud803\udf3a\ud803\udfe1\\U0003beb9\\U00010f8f',\n        constraints={'intervals': IntervalSet(\n             build_intervals([69347, 254543])),\n         'min_size': 19,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.13498404325025273},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 9.856109928317269e-294},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u8491\u84bd\u8523\u84be\u84ee\u8551\u849f\\U000ed038\u8493\u856a\u84fc\\U000888ea\u84fe\u8547\u8496\u8549',\n        constraints={'intervals': IntervalSet(\n             build_intervals([33928, 70596, 497820, 1035815]),\n         ), 'min_size': 16, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=28902,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\\x92j{\u00f3\u00e3\\U0008aaa1',\n      has_discards=False,\n      target_observations={'': -13537},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(19653, -507_825_474_196_615_372), (23724, 29870)},\n      slice_comments={(-17255, 12308): '',\n       (7_217_573_077_131_431_680, -77): '\\x8bkx\\U000ee771\u00bc\\U00060731',\n       (56, -28000): '\u00e7M\\U0006de44',\n       (62, -15150): '\\x83\\U00107827U'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-27331, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\x12\\x13\\xa0KF\\xf4R',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),),\n      length=-7352,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\u00d3<>\\x98p\\U000ffec2r\ud865\ude4c\\x9b\\U000fd157\u00ff\\U0005afe5\\x8b\\x94\u00ef\\x8b\\U0007de7c\\x16\u00d1\\x1f\u00cf\\U00088d50\\x98\\x9a\u00c4',\n      has_discards=False,\n      target_observations={'\u00d6': -1.0738519231873714e+23,\n       '\\U000c43e7@]n3\\U0005b1ff\\U0005a802\\x00': -10585,\n       '\\x1f': 1.8416331951162344e+16,\n       '\u00aa\u00a9Q\u00e9\u8ec8\\U000d4809\\U0004dfb4:;^\\x14': 3.935386595414873e+16,\n       'store': -21727,\n       'y$\\x81!': -91,\n       '\\x0f': 17804},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-926307830, -29991),\n       (-111, 6604),\n       (-100, 22034),\n       (-64, 25879),\n       (-17, -9578),\n       (300, 512)},\n      slice_comments={(-58, -6): 'N\\x83B'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-30745, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xcb\\xf0T\\x06\\xe6R*\\x05\\xbb\\xf5#\\xa6;>\\xb1\\x81LH\\xeeu\\xb4\\x13\\xf5\\x11\\xbek',\n        constraints={'min_size': 15, 'max_size': 115},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=16309,\n        constraints={'min_value': None,\n         'max_value': 22978,\n         'shrink_towards': 300,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-5689,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=7189,\n        constraints={'min_value': -36,\n         'max_value': None,\n         'shrink_towards': -130_733_110_686_068_130_312_919_031_324_739_947_583,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u014e\u01be\u0151\u0137\\U00033d0f\u0229',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [300,\n                  277455,\n                  452777,\n                  492563,\n                  638831,\n                  680849,\n                  733551,\n                  812622,\n                  917664,\n                  1017615],\n             ),\n         ),\n         'min_size': 6,\n         'max_size': 106},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.597331257758785e+306},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 5e-324},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.5},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=26501,\n        constraints={'min_value': -30,\n         'max_value': None,\n         'shrink_towards': 14713,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=-48,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\\x14\\x13\\r\u00cc\\x9b\ud83e\udc20\u00b8': -7597,\n       '\\x9c\u00aa5>\\x95\\x14': 5.635468267830939e+16,\n       \"\\x92\u00c0\\x83\\x82\\U000dc276\u00dc\\x8dy\u00b5\\U000a253d\u00ae'I\u00beM\\U000c9ef5\u00e1P:l\ud86d\ude53\u00b2\\x03\": 12283,\n       '': -6.8428655220621496e+16,\n       '\\U000dd2b7\u00c2': 62,\n       '\\U00109880': 1.6011802688030254e+16,\n       \"\\x94\u00d8\\x0b'K\\U00011dcb\\U00102427\u00d7\": 97_937_825_092_072_538_644_608_950_200_603_512_994,\n       'TypeAlias': -3.115445748518788e+16,\n       '.\\U00054cee\\U0005293a\\x04': 0.0,\n       'undefined': -4.983152889713522e+16,\n       '\\x9d-`\u00bc': -1.5592357419926448e+16,\n       '\\U000fc554\\x82\\x1e7bR': 0.5,\n       '\\x1f\\\\v\\x94\\U00102dee\\U000f2330\u00bac4{\\x18': -8009},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-46,\n        115_774_408_657_409_448): '\\x0bZ\u00e7\u00e9\\U000431726\\U0008d729\\x1b<\u00cd\\x89y\u00e4\\U00066878\\U000ce6bb',\n       (-12661,\n        -1_957_101_955): '-\\U000fca8e\\x97\u06f8\\U000aaca5~\u00aa\\x7f\ud87e\udcdd`]\\U000ad3d5\u00ee\u00b7\\U00061124',\n       (29, -8087): 'qi\u00b7\\x88\\x8c\\x89\u00e5',\n       (6_461_984_220_108_189_632, 17): 'V',\n       (1691, -5859): '\\U000d204d\\x02q\u00d7'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0002328749978914857,
          "overall:gc": 0.0,
          "generate:args": 0.02878762496402487
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878937.5194
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=512, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.45173048541140937},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000e4ee6\\U00011bd6\\U00011b1f\\U00084d5f\\U00011b98\\U00011bc7\\U00089db3\\U00011bbb\\U00011b97\ud807\udc19\\U000d2330\\U00011b8b\\U00011b4e',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [72478,\n                  95866,\n                  196588,\n                  223656,\n                  236022,\n                  243122,\n                  252963,\n                  277329,\n                  519646,\n                  677069,\n                  720585,\n                  742482,\n                  796149,\n                  863916,\n                  884575,\n                  886901,\n                  930941,\n                  946157,\n                  1033428,\n                  1079077,\n                  1095813,\n                  1114110],\n             ),\n         ),\n         'min_size': 9,\n         'max_size': 109},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=8,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 26227,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'e\\x17\\xd4Is\\x19~\\x03q\\x03`\\ner\\x8a\\xb8',\n        constraints={'min_size': 1, 'max_size': 101},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u01d8\\U000ca903\u0219\u4482\\U0005d8e5\u01f7\\U000645d2\u021b\\U000d0f0f\u0215\u01a9\u01d3\u0217',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [325,\n                  105866,\n                  159780,\n                  206908,\n                  302468,\n                  629977,\n                  823473,\n                  863181,\n                  1098364],\n             ),\n         ),\n         'min_size': 8,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.8295553569289662},\n        was_forced=False,\n        index=None)),\n      length=18,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('c', 3, 3)),\n                                    (('a', 1, 1), ('b', 3, 1)),\n                                    (('a', 1, 2), ('c', 3, 0)),\n                                    (('a', 2, 3), ('a', 0, 0)),\n                                    (('c', 1, 0), ('c', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '\\U0006072f\\U00108079\u00ee\u00e1',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\u00f0\u00e6\\x9c@i\\U0004b91d\u00b3o\u00bf\\x03\\U000148db\\x00',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-13905, -93),\n       (-10830, 109),\n       (9519, -31347),\n       (17065, -233706974),\n       (19445, -14940),\n       (85031016, 13995)},\n      slice_comments={(56, -4020): '\\U0001c1c6\u00f1', (-70, 71): '\uba64'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=8192, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.70913446743262},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([8192, 498754, 732488, 801943, 1062161]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=28322,\n        constraints={'min_value': -11746,\n         'max_value': None,\n         'shrink_towards': -47,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000eb160\\U000b0143\\U000bac1e\\U000e0c62\\U000baf52\\U000b01e9\\U000b0160',\n        constraints={'intervals': IntervalSet(\n             build_intervals([721174, 818255, 871165, 968117, 996714]),\n         ), 'min_size': 4, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.6477870099055759},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'FO\\xb1A\\x92\\x88\\x85\\xad~\\xf4\\x99\\x85`',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=3.417663553566456e+88,\n        constraints={'min_value': 1040841483065.8737,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 4.455111460343378e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.426163882041554e+307,\n        constraints={'min_value': -3.883353156612806e+171,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.426163882041554e+307},\n        was_forced=True,\n        index=None)),\n      length=5_054_836_063_254_723_644,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 1, 0),\n                                     ('a', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\u00e7\\U000e31d5\\U000a79d9l\\U000c0fe1\u00cc\u00aa\\x02\\x1b%',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'@-\\x99\u00e1\u00fe\u00dcp': 9414,\n       'J\\U000d1a01': -28746,\n       'I\u00e8d\\U00079475': 6.66796637668663e-178,\n       '\\U000105c3i': 6.467986294906673e+300,\n       '': 32764},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-6_261_522_205_669_624_435, -256719526),\n       (-32524, -743_491_125_920_606_892),\n       (-24864, 28816),\n       (-15385, 20786),\n       (-80, -115),\n       (-79, 48),\n       (-5, -2690),\n       (50, -101),\n       (65, -9497),\n       (85, 6357),\n       (92, -14356),\n       (5134, 4244),\n       (5403, 15104),\n       (7991, 2044),\n       (26493, -2_055_756_235_328_779_236),\n       (30968, 64),\n       (1_904_030_372, -1_569_957_272)},\n      slice_comments={(11795, -32042): '',\n       (-4_054_351_187_123_290_600, 404): 'J\\\\u',\n       (11277, -23551): '\\x08p',\n       (17899, 82): '\\U00088260TA\u00ceQ]',\n       (-55, -30251): '\\U000ef78f\\x03\\U000c83df',\n       (-435012279, -23): '>\\x91\u00ff\\U000b71c0\\U000c7cb4B',\n       (-1_478_631_830, 1321): '',\n       (-1_075_185_176,\n        8_762_198_544_207_521_754): 'v(\\U0005cb69\\x90\\U000e3e1dt\\U000b48652\u00dea\\x07\\x99',\n       (1_272_698_441,\n        -19838): '1\u00f8\u00f4\u00ca\u00f0\\x95\u00c5\u00f5\\U000dc5ad\\U00013f93\\r\u00ef\\x0e\\U0008a719',\n       (49, -66_553_524_341_776_602_124_964_788_903_149_619_543): '',\n       (61, -465649239): 'M',\n       (85, -1_854_011_305): '\u00a5\u00f3',\n       (2_502_030_890_187_480_513, -47): '\\x0c\u00bc\u00f2J\u00d4'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-37, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=3.485880583675256e+35,\n        constraints={'min_value': 1e-05,\n         'max_value': 6.630046413123071e+35,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.428237798549852e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-15519,\n        constraints={'min_value': -23498,\n         'max_value': 7955,\n         'shrink_towards': 24104,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000ae01e\u0229\u0181\\U00019d5f\u3328\u01e9\u0152\\U00062b39\u0213\u015f\u0133\u017d\\U00099430\u01d3\\U00103cc5\u0180\\U000a9eed\u0132\u020e\u0212\\U000f6d4c\u01ca\u0167\u016c\u0190\\U000619fc\\U0001db96\u0184\u01fc\u8cbf\\U000a2ee9\u017e\u014c\u01f6\u019b\u020e\u01ba\\U0007db8f\u0217\u01a9\u015d\u0146\u0217\u01e3\u01de\u01aa\u0197\u0223\u016b\u01d2\u0203\u01f9\\U000d07fe\u0185\u01bc\u01b7\u01d5\u0182\u0134\u014b\u01f9\u01a0\u013f\u020b\u015a\u01c3\ud84d\udf48\u015d\u01d9\u0137\u01d9\u0134\u020c\\U00048f18\u0135\u018b\u0212\\U00037e33\u01d6',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [300, 42875, 72682, 449399, 490172, 937987, 948529, 1114111],\n             ),\n         ), 'min_size': 19, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -4.878652259981483e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5071064196678782.0},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=9644,\n        constraints={'min_value': 8192,\n         'max_value': 14574,\n         'shrink_towards': 0,\n         'weights': {12769: 0.008367094277374027,\n          12466: 0.011135667600950578,\n          12741: 0.020119260200040713,\n          11687: 0.015536687292361505,\n          9230: 0.028051618966304814,\n          8381: 0.011361977388415748,\n          14305: 0.03288840990138892,\n          14431: 0.028736545610656573,\n          12798: 0.03783572001604666,\n          12191: 0.03662765647169145,\n          14574: 0.03989841771735296,\n          10323: 0.01362664390354715,\n          11044: 0.04023852040008142,\n          9695: 0.0020119260200040716,\n          10208: 0.033979239867490955,\n          10506: 0.023948998330377575,\n          12668: 0.020585330922487394,\n          12506: 0.0011646721010968092,\n          13079: 0.03707622866033755,\n          11456: 0.004724685488437045,\n          11629: 0.007379967417520255,\n          8192: 0.009589443004206458,\n          9721: 0.03152590695238849,\n          8481: 0.003589381489440922}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u01c3\u0188',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [300, 18092, 234808, 694210, 727510, 780166, 1023637],\n             ),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xca\\xff\\xdbu\\xce',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.03985694328173484},\n        was_forced=True,\n        index=None)),\n      length=22293,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('c', 3, 2)),\n                                    (('a', 1, 2), ('a', 1, 2)),\n                                    (('a', 2, 2), ('a', 1, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\x0f',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-52, -16300),\n       (2331, -103),\n       (14185, -19142),\n       (2_227_941_333_284_551_714, -30765),\n       (5_018_080_918_416_553_552, -48803142)},\n      slice_comments={(1, 73): '\\x1aQ', (84, -7_349_986_200_919_143_852): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-85, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=2.0926916998626838e+307,\n        constraints={'min_value': -5.307866909359941e+16,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.296387168808853e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=74,\n        constraints={'min_value': 74,\n         'max_value': None,\n         'shrink_towards': -6626,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=2367,\n        constraints={'min_value': 112,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'N\\xc9$b.a\\x84v\\xbb1@;!\\xcf& \\x87E\\xb7\\xff7S\\xb1\\x85^\\x19m\\x85\\xc5\\xbfw\\xb7\\x9a6\\x9b\\x06\\xf4\\xe9\\xef\\xb2',\n        constraints={'min_size': 24, 'max_size': 124},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u1963\\x01\u19e5\\u193f\u1917\u1918\\u1942\u1999\u1959\\U000b20c5',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  1,\n                  6418,\n                  16154,\n                  52480,\n                  103928,\n                  112894,\n                  188970,\n                  243199,\n                  289545,\n                  292169,\n                  306834,\n                  314491,\n                  335763,\n                  350042,\n                  405614,\n                  552317,\n                  582523,\n                  602811,\n                  627781,\n                  665280,\n                  821375,\n                  827300,\n                  838994,\n                  870630,\n                  909633,\n                  948110,\n                  994234,\n                  1041090,\n                  1043559],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10},\n        was_forced=False,\n        index=None)),\n      length=35,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 0),\n                                     ('a', 1, 0)),\n                                    (('a', 3, 1), ('c', 3, 2)),\n                                    (('b', 2, 2), ('a', 0, 1)),\n                                    (('b', 3, 0), ('a', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [UnicodeEncodeError('unknown encoding',\n                                         'P/\\x02,\\x91\u00ff]\u4de7\\x10\\U000dcc9f\u00aaP',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\u00c6\\U00061384',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('\\x13',\n                                     [UnicodeEncodeError('unknown encoding',\n                                                         '\u00d5\u00f9\u00d7\\x8e\ud802\udc4d\u00df\\U000ca671\\x9djq4S\\x17\\x85\\U00069851\u00b4\u00f9\\U000fce7b\u00e2\\x81',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\\x90\u00d3\\U00042760\\x11M\u00ff\u00c0\\x1c\\U0003aee8',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'7': -1970,\n       '\u00df': -8,\n       '': 0.5,\n       '\\U000472fdm\\x99\\x00\u00a3': 13226,\n       '&N\u00a3\u00d49aB\\U000c9e10R': 1.8007686919489035e+23,\n       '#\\x83\\x7f\\U000debe2\\U00057470\u00e6K': 4.5964989609753704e+16,\n       '\\U00013989\u00f2\\x00z\u00efq\\x9e\u00c3\u00d6\\U000bfa78\\x11': 1.21441744382504e-213,\n       'H': 3.3337283492842748e+16,\n       '\u00cd\u00cf\\x11': 103,\n       '\u00b4\\x1c': 732056185,\n       '\\U0001e705': 1.291245491545879e-09,\n       'phase': 6.381727711458961e+141,\n       'then': -29034,\n       \"\u00f2'\u00f1\u00a6\": -120,\n       '\u00dfS\\x87\\x90\\U000caab1\u00f8\\U0004a395;\u00d6\\U00096266\\r\u00e9': -23302,\n       'r&\\U000d4d9eQf\\U000ff015\\U00106024\\x12\u00e3h\u00f1\\n)0\u00f3r\\x06\u00f6\\U00074fb5$\\U0005279d\u00fb\\U0004fe53\\U000b65dd!': -55,\n       '\u00c0\u00c1': 121,\n       '\\x11\u00c9CQ': -2.9015535114682788e-58},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-122_187_687_281_241_099_581_899_401_487_809_776_400, -31),\n       (-8_808_170_563_656_308_353, -8312),\n       (-1_675_244_207, 26335),\n       (-21661, -21907),\n       (-8191, -77),\n       (-7697, 4138),\n       (-7682, 318198199),\n       (-85, 100),\n       (-67, -31170),\n       (-64, -3_642_460_701_018_940_309),\n       (-59, -37),\n       (1, 83490714),\n       (12, 27023),\n       (16, -19029),\n       (9042, 64),\n       (16120, -113_649_292_367_944_762_717_576_572_253_786_873_472),\n       (22983, 17960),\n       (25577, 9999),\n       (29714, 27757),\n       (30222, -4623),\n       (32327, 5518),\n       (1_308_738_996, -75),\n       (3_083_451_767_138_392_271, 16273)},\n      slice_comments={(-18302, 23933): '\u00ca',\n       (108, -79): '\u00cd\\x7f\\x0c\\x88\u00c9B\\x8ebD',\n       (12310, -6146): '_xml'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-7188700703200548730, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=17493,\n        constraints={'min_value': 0,\n         'max_value': None,\n         'shrink_towards': 3_390_334_803_664_957_993,\n         'weights': None},\n        was_forced=True,\n        index=None),),\n      length=-16789,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('c', 1, 2)),\n                                    (('b', 0, 1), ('a', 3, 1)),\n                                    (('c', 0, 0), ('b', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-25026, -9870),\n       (-22503, -11069),\n       (-11796, 53),\n       (-6092, 5388),\n       (-3100, 1818),\n       (-78, 6134),\n       (76, -18666)},\n      slice_comments={(-31307, 6723): '\u00c0O\\xadV\\x0e\ud81d\udfa7'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=29992, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\u1067\u108c',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [4181,\n                  24442,\n                  24464,\n                  26987,\n                  349503,\n                  507568,\n                  594680,\n                  698576,\n                  868075,\n                  879638,\n                  1051770],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-17927,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 3),\n                                     ('c', 0, 2)),\n                                    (('b', 2, 3), ('b', 2, 1)),\n                                    (('c', 1, 2), ('c', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'': 3525,\n       '\u00b2\\x8c\u00fe+S\u00e1\\U00051066': -6.745730300614665e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(10751, 27599)},\n      slice_comments={(-5236, 18039): '1\u00c9\u00b5j9I$\u00b2\\x15\u00e8'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1000, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\x05\\x95\\x94\\x19',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.1654810529735067},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.6553906704226399},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-18,\n        constraints={'min_value': None,\n         'max_value': -8,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.401298464324817e-45,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.1125369292536007e-308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=512,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-25194,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 23742,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xaf\\xe3;\\xde\\xbb\\x126\\x07\\xd6\\xffF',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x9a\\x0bu\\xb6\\xbb\"\\xde\\xe3e\\x98\\xb1\\xcbP:\\x8b\\x97\\xcd\\xa2\\xab\\x87d\\xc7\\xd9e5\\x02\\xc3T\\xabTg\\xd5L\\x84f\\x14\\xd9\\xa6\\xae\\x97A\\xf7\\xa9\\xc3\\x80mo\\x01+\\xdd\\x12\\x04\\xa9\\xfc\\xad\\x8eQ\\x91&\\xf0\\xf1h(\\x82\\x99\\x1e\\xf2\\x89',\n        constraints={'min_size': 32, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud85a\udd6a\ud865\ude29\ud85a\udd37\ud85a\udd42\ud85a\udd54\\U0003827b\ud888\udca7\\U0009f6c8\ud85a\ude0c\ud85a\uddf5\ud85a\ude14\\U0004afb4\\U000c28dc\ud85a\udd85\ud85a\udd6d\ud85a\uddb1\ud85a\udd76\\U000c7adb\ud85a\uddfb\ud85a\udd73\\U000c77c1\ud85a\udd9c\ud85a\udd38\ud85a\udd38\ud85a\udd8a\ud85a\udd98',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [157987, 324808, 607152, 882721, 1024176, 1029567, 1056430],\n             ),\n         ), 'min_size': 20, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=28221,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 88,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=9955241600946766.0,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.813958173868277e-72},\n        was_forced=False,\n        index=None)),\n      length=121,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('c', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\U0006feff\u00fb\u00d4\\x9e ',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback='\\U0008cd6f\\U0009042c\"',\n      has_discards=False,\n      target_observations={'\\x03<': 25961,\n       'W\\t\u00a3': -30791,\n       '': -1.192092896e-07,\n       '\u00e9;': -31289,\n       '\\x10h\u00b6': -1.3821918231452885e-34},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-2_660_867_335_170_863_383, 3887),\n       (-1_562_184_832, 107),\n       (-31022, 105_744_351_371_649_139_517_818_025_859_065_301_650),\n       (-10890, 37),\n       (-6421, -292_620_361_434_494_388),\n       (-1740, -3_576_180_983_219_084_912),\n       (-109, 22666),\n       (-97, 1_095_471_023),\n       (-26, 31833),\n       (-12, -18),\n       (21, 15112),\n       (103, -61),\n       (300, 22911),\n       (428, -28145),\n       (4399, -25251),\n       (6908, -8397),\n       (6974, 9999),\n       (8545, -95),\n       (8840, 22899),\n       (9849, 27838),\n       (14927, -23098),\n       (20592, -23544),\n       (1_334_762_146, 23921),\n       (5_329_223_711_433_886_545, -364),\n       (164_308_875_171_064_100_395_351_047_924_509_548_641, -8500)},\n      slice_comments={(1_440_625_542,\n        3_935_185_932_870_474_956): '\ub5d6\\U00060fd1G\\U000eaf67\\x00\\x1f\\U000e752b\\U0005006e\u00d9\\x89\\x19\\U00078ad1\ud851\ude3cz\\U000987e1\\x17\u00ed3\u00d1\u00db\\x82\u00f9\u00ff\u00eb\\U0010c145\\x11',\n       (20654, -79): '\\x8f\u00bd',\n       (-28907, 15701): '',\n       (-7236, -22672): 'status_counts_diff',\n       (-19220, 46): '\u00b7M\\x89J\u00f0\u00d1',\n       (19662,\n        153_595_943_375_846_794_319_209_981_361_481_332_658): '\\x10?\\x04\\x05\\U00032bbc\u00c5~\u00e6`\\x0c'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-1285, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\x9e\\xd7\\xcb\\xe9\\x8c',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0001a6b5\\U0001a666\\U0001a666\\U0001a670\\U000739e9\\U0001a6aa\\U0001a679\\U0001a696\\U0007d10e\\U0001a621\\U00032435\\U0001a5e7\\U00076daa\\U0001a638\\U0001a649\\U00070037\\U0008519b\\U0001a676\\U0001a5ef\\U0001a6e4\\U0001a6d6\\U0001a644\\U0001a600',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [108005, 110228, 185969, 207384, 407840, 569594, 889064],\n             ),\n         ), 'min_size': 5, 'max_size': 88},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u00d6\u00e4\\U0007a930\\U000450e4',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0, 366677, 487783, 553260, 697820, 709649, 820488],\n             ),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9638752778263844},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=7,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 7852,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.4704847715917477e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.3545369046732175e+264},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.4277919833907846e+307,\n        constraints={'min_value': -7.554237049062544e-236,\n         'max_value': 1.7413100379181086e+308,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 6.2543563728630296e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00055fac\\U00056006\\U00055f8b\\U00055f7c\\U00055fd9\\U000561f5\\U00055ff1\\U00055fbb\\U00055f9b\\U00056319\\U00056024',\n        constraints={'intervals': IntervalSet(\n             build_intervals([352083, 353469, 964346]),\n         ), 'min_size': 11, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xe2\\x94\\xb9\\x94\\xda',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u3876\\U00096c14',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [14353,\n                  23558,\n                  75741,\n                  119305,\n                  280096,\n                  336940,\n                  367034,\n                  369889,\n                  375592,\n                  390655,\n                  417367,\n                  666771,\n                  794017],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-7513,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=2265,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 2, 1),\n                                     ('c', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('H\\x19',\n                     [UnicodeTranslateError('', 0, 0, 'reason'),\n                      ExceptionGroup('\u00b6\u00d5\\x1c\u00b1\\U000d3bbdVl\u00f1\\U00109780',\n                                     [UnicodeEncodeError('unknown encoding',\n                                                         '\u00bb',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\\U00071ebe)\u00a3\u00e4\\x17>',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      ExceptionGroup('',\n                                     [UnicodeEncodeError('unknown encoding',\n                                                         '-',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError('\\x0f\\x91',\n                                                            0,\n                                                            0,\n                                                            'reason')]),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='\u00a1\u00d2\u00d3',\n      has_discards=False,\n      target_observations={'': -5.44997323225293e+16,\n       '\u00cf#0\\U000c78bd': -2.3377178311339976e+16,\n       '\\U00061461\\U0008a980\u00f2\\U000eb4d8': -4.28161375243862e+16,\n       '\\U00091a6f\u00b2\u00db\\x152\\U00082f15\\x03': 21745,\n       '\\U00033641\\U000d81f9\u00c6\\U000ac66e\u00e6 \\U00069a78': -2.2675078587086572e+16,\n       '\\n0\\\\\\U000acc7d\u00f2\\x81\u00b7\u00e3\u00c1\u00d3\u00ea\\U000c3416\u00ae\u00b6\\x8c': -6296,\n       '{\u00ccz\\x1e\u00e6E': 22,\n       '\u00a7egI2\u00d7\\U000b780b\u00b1@\u00f4c+\u00e9\u00b0\u00d5\\x08\u00f7': 72,\n       'POD_NAMESPACE': 6358793453911890.0,\n       'D5\\x96\\U000ceab9Ee.v\u00fb\\U000e70a2\\x8d': -2.7360127905110618e-33,\n       '\\U0004dd9b\\x0b\u00a4\u00fb\\U0002fda4\u00a4': -24184,\n       '\\\\+yj\\x82U\u00f4': 6.903328963511058e+303,\n       'L\\U000563a9\\x88sv2\\x1as3N\\x15': 0.5,\n       '\\x03\u00e9\\x83\\x14x\\x00R\u00fe\\U00056627\\U0010c702\\x81o\u00a6\\U00032b5e\u00afj\u00a7\u00a3': 2.5995312418922108e+16,\n       '\u00fb{\u00a7': -5372,\n       'false': -1.8154864349059278e+155,\n       '\u00a4\\x8b\\U000fc810\u00e8#\u00dc\\x88\\U000fea5a@@\u00ee\\x10V\\U000f412d\\n7\\x9a\u00dd': 0.05},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-7_825_293_344_804_617_434, -18),\n       (-29032, -840353473),\n       (-10697, -18134),\n       (123, 2_987_049_752_526_571_142),\n       (190, 112_006_301_714_520_208_663_090_821_500_785_152_983),\n       (26725, -70),\n       (2_867_066_013_642_862_197, -30274),\n       (9_137_779_604_571_974_518, 1_956_669_626_262_533_021)},\n      slice_comments={(-7979, -18499): '\\U00051694s',\n       (8892, -8123): '\u00fa\\U000be387\u00ba',\n       (24939, -10126): '\\U0003fa3a^\"\\x06\\U000c992bV\u2eeb\u00fe',\n       (-72, 79): ')',\n       (-61, 9572): '(\u00fd,6\\nBn',\n       (8_980_523_246_119_000_809,\n        12198): '\\x98\\x9f\u00c4\\x86EL\u00bc\\U000803ae\\x91\u00db\\x1a',\n       (29517, -19375): '\\x0f:',\n       (1024, -502545356): '\u00cb\u00f5\u00e4\\U000d6561',\n       (1_208_632_476, -15943): '\\x05g\u00d4\u2a26\\x8d\u00fex',\n       (32110, 6307): 'G\u00bc\u00dd\\x8dR\u00cb\u00ca\\x00\u00e7u\\U000703bc\\x8a\\x03\u00c5\\x98\u00af',\n       (-1107, -32578): '\\U0010402a\\U0001a9cd\u00c1',\n       (48,\n        -26482): '\\U000c1af7\u00a8\u00f9\\U000e4cf1\\U000f812a\\U0008569d\\U000ba451\u00c4H\u00bb\\U000c7b1b\\x00\\U000d6093<\\x06\u00ff\u00d8',\n       (-24007, -1250): 'r\\U00093538\u00b09!6',\n       (8192, 25850): '',\n       (-61, 27427): 'V\\U00034681\\x0e#\\U0009d0762\\x0b\\U0006f9a9\u00fc\u00edD\u00fde\u00ea',\n       (-25686, -8_967_573_862_729_016_580): '\u00dena\u00d8r\u00b2',\n       (582053345, -1_699_328_315): 'o\\U000fdccc*\\U0001b682\u00efU\\x12',\n       (-12543, -11653): '',\n       (1024, -31165): 'jb\\U000b2ca5\u00belt\\U000359be',\n       (6_936_096_819_062_903_231, -562200706): '',\n       (-15468, 23179): '\\U000b8029',\n       (60, -12537): '\u00ed\\U000bf68a\u00ee\u00e0\u00fb',\n       (-86_807_559_822_771_312_956_196_341_443_528_488_652,\n        -8): '\u00cb\\U000427f4\u00c6i\u00fd'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from integers(0, 1114111).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.006044542009476572,
          "overall:gc": 6.18330086581409e-05,
          "generate:args": 0.1461277101188898
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878916.830959
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0001912920270115137,
          "overall:gc": 0.008732124988455325,
          "generate:args": 0.0028222500113770366
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878905.808435
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0001015419838950038,
          "overall:gc": 0.0,
          "generate:args": 3.866699989885092e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878920.163132
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "",
        "representation": "",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x108be8cb0>, min_size=0, max_size=inf).map(tuple), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text())), has_discards=one_of(nothing(), nothing(), booleans()), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), length=one_of(nothing(), nothing(), integers()), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason'))))).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {},
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878940.241567
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=149910780071510384128380386583477070787, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='6\\U000e7a3b\u00ae',\n        constraints={'intervals': IntervalSet(\n             build_intervals([0, 106742, 779050, 955171, 963064, 1093831]),\n         ), 'min_size': 0, 'max_size': 38},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0002f54c\\U0002f51e\\U0002f563\\U0002f5b5\\U0002f4e3\\U0002f55d\\U0002f4d9\\U0002f599\\U0002f54e\\U0002f53c\\U00036879\\U0002f550\\U0002f4e0\\U0002f4fe\\U0002f53b\\U0002f562\\U0008e9ad\\U0002f586\\U00033927\\U0002f4fe\\U00073f6c\\U0002f571\\U0009f1f6\\U0002f576\\U0002f55c\\U0007c0e4\\U0002f4f7\\U0002f5a2\\U0002f512\\U0002f5b6\\U0009877b\\U0002f54e\\U0002f544\\U0002f5b5\\U0002f561\\U0002f4f5',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [193727, 313931, 428973, 659595, 1011210, 1046364, 1065210],\n             ),\n         ), 'min_size': 17, 'max_size': 117},\n        was_forced=True,\n        index=None)),\n      length=6_492_455_886_737_968_228,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x86R:\u00fe': -1.9558801507665204e+16, '': -20644},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-18_430_905_717_883_712_391_912_860_791_183_262_682,\n        -30977),\n       (-59076847, 112),\n       (-30797, 27),\n       (-29484, -16971),\n       (-11121, 31729),\n       (-4903, -9859),\n       (-2971, -19025),\n       (-112, 5),\n       (-46, 1_447_814_052),\n       (-43, 4_910_912_693_529_046_799),\n       (54, 16949),\n       (21016, 11685),\n       (1_404_815_148_146_828_074, 11)},\n      slice_comments={(-1_350_877_920, -2449): '\u00fe9',\n       (-55, 26716): '\\x8fX',\n       (-1_596_598_664, 1_806_754_761): '\u00fb\\U00045b70\\U00093d189\u00c7\u00ea',\n       (-28045, -109): '\\x1e\u00f8'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=4705, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-6.034709387496458e+247,\n        constraints={'min_value': -inf,\n         'max_value': 7.291860171353003e-209,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.244569734233414e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=787813350,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 5.960464477539063e-08},\n        was_forced=True,\n        index=None)),\n      length=896565261,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\u00ae\u00e6\u00a1\u00cc': -12460,\n       '\ud888\uddf8\\U0001bdfd,\u00b3\u00a8\u00ca': 2,\n       '\\x9c\u00bf\u00bcs\u00e7\u00d8(\u00a6\u00ee': -7.659015248564457e-149,\n       '': 1_300_581_187,\n       '\\x11\u00bc$': -11445},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-31433, -1), (29505, 23358)},\n      slice_comments={(-5245, -15857): '#\u00ca\u00a5\\x92',\n       (5_569_825_689_998_786_371, 9554): '\u00be\u00efL',\n       (-10682, -88): '\\x1cW\\U000a2455\u00aeo',\n       (1_474_217_320, -6174): '\\U000fed8frZc\\U0007eea2f\u00deG',\n       (-5531, 0): '\u00c7g\\x9d\\x02\ud867\udd66\\x90cC\\U0010f105\\U00016ec2\u00e2\\r',\n       (-2_087_090_067, -60): '\\U000d23a4U',\n       (53_222_690_783_239_930_633_525_885_811_386_871_507,\n        65535): '\\x9au\u00e9\u5df64\u00c7\\x85\u00c8\\x16\u00d9;',\n       (21773, -52): '\ud835\udd4b\ud835\udd59\ud835\udd56 \ud835\udd62\ud835\udd66\ud835\udd5a\ud835\udd54\ud835\udd5c \ud835\udd53\ud835\udd63\ud835\udd60\ud835\udd68\ud835\udd5f \ud835\udd57\ud835\udd60\ud835\udd69 \ud835\udd5b\ud835\udd66\ud835\udd5e\ud835\udd61\ud835\udd64 \ud835\udd60\ud835\udd67\ud835\udd56\ud835\udd63 \ud835\udd65\ud835\udd59\ud835\udd56 \ud835\udd5d\ud835\udd52\ud835\udd6b\ud835\udd6a \ud835\udd55\ud835\udd60\ud835\udd58',\n       (-18783, 15182): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00018245895626023412,
          "overall:gc": 0.0,
          "generate:args": 0.012314627005252987
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878946.3713741
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.245896944776177e-05,
          "overall:gc": 0.0,
          "generate:args": 3.608397673815489e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878911.251895
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=23, context=(), group_elems=()),\n      nodes=(),\n      length=-22991,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 2, 3),\n                                     ('c', 1, 2)),\n                                    (('c', 0, 3), ('a', 3, 1)),\n                                    (('c', 1, 0), ('a', 3, 2)),\n                                    (('c', 1, 2), ('b', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\\x9b\uc81a\u00c1YW\ud870\udfa9\\U0001ffe0\\x06\u00f5\\x1b$\u00b8D': 8192,\n       '\\U000e4456\u00e8\u00f5k\\x8a\u00dbP\\x90,\u00c1': -5413,\n       '\\x0fC\u00d6\u00e3\u00d9n\u00d0\\U00075827y\\x92\\U000ffcf8': -14566,\n       '\\x91!\\x11\\x1c\\x80\u00df\u00b5\\U000f8a12': -4.774532891689584e+85,\n       '\u00b3K\u00e2\\U000aa9fb\\x13\u00ca\u00e6\\x14\\x1a\u00e1\\U00095d8e\\U000d95e2\u00f9SG\u00ca': 1_520_652_663},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-52, 25587)},\n      slice_comments={(-43, -116): '\u00d6-\u00fa\u00cdu\u00b8',\n       (3113, -31762): '',\n       (-4610, 8_421_611_086_183_701_809): '\u00ab\u00cc\\x9ei\u00c5\u00e4\u00a7',\n       (7847, 96): '\u00c8\u00a32\\xa0G',\n       (110, 2_672_744_313_944_709_462): '\\x9e'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=404, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=4360,\n        constraints={'min_value': 286,\n         'max_value': 26284,\n         'shrink_towards': 1_813_971_859,\n         'weights': {10998: 0.05974881391180145,\n          14483: 0.020368426496834156,\n          9691: 0.01399830291626346,\n          6452: 0.03639664476673229,\n          16007: 0.040038020698225436,\n          12551: 0.05534469361075798,\n          4360: 0.05974881391180145,\n          4740: 0.108893085684711,\n          14977: 0.0565464855844416,\n          7676: 0.05974881391180145,\n          25342: 0.05115727293470605,\n          17907: 0.005330536153473886,\n          14941: 0.0006907251280982836}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xdb\\x0c\\xd7:\\xcb\\xc5\\x97',\n        constraints={'min_size': 7, 'max_size': 12},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -2.7604115332375996e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 7.677200251428535e+306},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x853\\xff\\x95BiD',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 3.421980687440739e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.8102506509788354e+305},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 7.201592602865348e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.175494351e-38},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-4546977688615829.0,\n        constraints={'min_value': -1.2248234493987252e+16,\n         'max_value': -1227444006567643.0,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.5},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-4.112159744628946e+16,\n        constraints={'min_value': -inf,\n         'max_value': 6395731707447833.0,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.5},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-8129,\n        constraints={'min_value': None,\n         'max_value': -8,\n         'shrink_towards': 16902,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u01f0\u0221\u01c8\u01e1\u0273\\U0010f879\u01fc\u0257\u0241\u020f\u01a2\u028f\u0205\u0293\u0285\u01ed\u01e8\\U000f3eb2\u01db\u0221\u01e5\u025b\u01e5\u01a5\u01e2\u0204\u01f9\\U00012928\\U000a6fc1\u0213\u01c2\\U000820a4',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [404,\n                  2320,\n                  63884,\n                  263636,\n                  271581,\n                  275490,\n                  443964,\n                  445692,\n                  498602,\n                  538405,\n                  683447,\n                  687598,\n                  691439,\n                  730886,\n                  743755,\n                  769250,\n                  823607,\n                  847806,\n                  891261,\n                  943972,\n                  953898,\n                  1114111],\n             ),\n         ),\n         'min_size': 25,\n         'max_size': 125},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.060304259246735e-131},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\x17\\r\u00a7\\x16',\n        constraints={'intervals': IntervalSet(build_intervals([0, 738640])),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xeaD\\xc2\\x1b\\xca)^\\xd7D_G\\xf6kU6S]it\\n\\x06H\\xb9\\x08#4#\\xa8}[\\xd8\\x18\\xe2\\x8cg\\xcc\\x88\\xe9X\\xd5J\\xb3\\xed\\x1a5\\xce\\xc6\\x12\\xcfJ8\\x93\\x98\\xe7A\\x84R\\x98\\xb6\\xba+\\x05,\\xd6\\x15v8\\xdaz\\xa6H\\x88\\x81\\tH\\xa5#\\x91\\xdf\\x875eT\\xff\\xe4\\xec\\x9d\"',\n        constraints={'min_size': 48, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=5.7488395334129084e+212,\n        constraints={'min_value': 2.5430614891014532e+16,\n         'max_value': 1.0913960748985586e+213,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.7488395334129084e+212},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b' .C\\xc7b\\x8c\\xa8o',\n        constraints={'min_size': 8, 'max_size': 108},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x15?j\\xc3\\x81vY\\xc1\\xa0g\\x00\\xd4o{H\\xa6TP\\xe7\\x9f\\xeb\\x00\\xf8r^\\xf7\\xb3\\x8c\\xe4B\\xda\\x83\\xea\\xa6^\\xf6P',\n        constraints={'min_size': 31, 'max_size': 131},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 4.045228798984962e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.6324941027550772e+16,\n        constraints={'min_value': 1.0200906050081473e-305,\n         'max_value': 1.3348617049055365e+308,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.5},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.1516027532304526e+290,\n        constraints={'min_value': 4.887696426984836e+16,\n         'max_value': 1.4814112275178393e+290,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.5},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.5476112399429504},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-790_192_086_788_705_486,\n        constraints={'min_value': None,\n         'max_value': -790_192_086_788_693_316,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-12032,\n        constraints={'min_value': -21859,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=-27396,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('b', 0, 0)),\n                                    (('a', 1, 0), ('c', 2, 1)),\n                                    (('a', 1, 1), ('a', 1, 3)),\n                                    (('a', 2, 0), ('c', 0, 0)),\n                                    (('a', 2, 1), ('c', 2, 2)),\n                                    (('a', 3, 0), ('a', 1, 1)),\n                                    (('a', 3, 0), ('a', 3, 3)),\n                                    (('b', 0, 2), ('c', 2, 2)),\n                                    (('b', 1, 1), ('b', 2, 1)),\n                                    (('b', 2, 0), ('a', 0, 0)),\n                                    (('b', 2, 0), ('b', 2, 3)),\n                                    (('b', 2, 2), ('b', 3, 1)),\n                                    (('b', 3, 3), ('a', 3, 2)),\n                                    (('c', 0, 0), ('c', 3, 3)),\n                                    (('c', 0, 1), ('a', 3, 3)),\n                                    (('c', 0, 1), ('b', 1, 2)),\n                                    (('c', 1, 1), ('c', 0, 1)),\n                                    (('c', 2, 1), ('b', 1, 0)),\n                                    (('c', 2, 1), ('b', 3, 0)),\n                                    (('c', 2, 2), ('c', 1, 0)),\n                                    (('c', 2, 3), ('b', 3, 0)),\n                                    (('c', 3, 0), ('a', 0, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\rD\u00b9\u00cb\u00a9\\U000c5676&\\U0010a2ad\\x85?',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback='',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-27972, -37), (62, -26922), (88, -19012)},\n      slice_comments={(6589, 7655): 'o\\U000f5c96\\x8f\u00b3\\x84',\n       (1285, 23892): \"\\x9c\\U00043e97\u00df\u00a9'\\U000c8765\u00c4\\U00078f09\\x1a\u00de}\u00c1A\",\n       (-61, -28517): '\u00cf\u00e08\\x05\\x039',\n       (867_709_375_305_506_004, 55): '\\U000be955\\x81\u00c8\\x95\\U00052ef0_x',\n       (-22169, -1_235_084_650): '\\U00094432#\u00bd\u00f7\\x1d',\n       (-5, -27899): '',\n       (-11990, 15776): '\\U00093f6f\u00fc\\x9e',\n       (10710,\n        -112266326): '\u00c7-\\x84\\U00061a1c\\U0005b245\u00a4cHj\u00f4\u00cc\\U0006054e\\U000fffa7\\U000ac379\\x0b\\x17\\x94c\\x11\\n\u00d4y\\x1b\\x0eZ^]\\x19',\n       (24943, 15460): ';\\U000c0eb1\\U0005bc82\u00f4#\\x87s\\U00035291\u00ba\u00d6\\x8f',\n       (20_433_299_623_487_135_959_167_573_866_833_295_969,\n        -69_066_470_477_135_461_302_256_717_993_773_037_364): '',\n       (-68, -93): '\\U000d9e7a\\xad\u00a6\\x8f\u00b1\\x94\\x8f\\x07'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-17630, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\u00d7',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1, 1000, 39946, 96561, 254135, 631657, 821179, 927216],\n             ),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0001e206\\U0001e23a\ud838\udea5\\U0001e271\\U0001e1f8\\U0001e252\ud838\udea9\\U0005d3cc\\U000ad7e3\\U0001e28c\\U0001e224\\U0008fb95\\U0001e1f8\ud838\udec9\\U0001e2b3\\U00077b0b\\U0001e24c\\U0001e2bd\\U0001e263\\U0001e1ff\\U0001e1ed\\U000b11f0\\U0001e200\\U0001e208\\U0001e265\ud838\udec8',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [123368,\n                  134010,\n                  207070,\n                  393270,\n                  473926,\n                  617956,\n                  694189,\n                  798129,\n                  967837],\n             ),\n         ),\n         'min_size': 26,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.6637584578298378},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xc7',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\".W6\\xce\\x0c\\x16\\xed\\x15\\xae'k\\xf7+\\r\\xb7T)\\x19N\\xe8\\x1d\\t\\xce\\x8a\\x1b\\xac\\x90Eg\\x9d\\x1av\\xd7\\x85\\xf3~\\x93\\x16i\\xd9%_\",\n        constraints={'min_size': 15, 'max_size': 115},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': 0.0,\n         'max_value': 2.4804751288649184e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.064256775046499e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.791102207559766e+16,\n        constraints={'min_value': 0.0,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.352128975645904e-256},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=2531,\n        constraints={'min_value': 113,\n         'max_value': 4204,\n         'shrink_towards': 0,\n         'weights': {2099: 0.31915452347214035}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000f03b6\\U0001a3e9\\U0001a379\\U0001a448',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [107360,\n                  185636,\n                  203788,\n                  237382,\n                  568772,\n                  763851,\n                  853667,\n                  1021732,\n                  1031966,\n                  1110512,\n                  1114111],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='b\\x977\\U0006e91a\\x8c\u00c9\\x11b',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  95411,\n                  120574,\n                  145312,\n                  178473,\n                  512220,\n                  546752,\n                  666642,\n                  699603,\n                  914124],\n             ),\n         ),\n         'min_size': 5,\n         'max_size': 105},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=1000,\n        constraints={'min_value': -13083,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-3.796977023421718e+16,\n        constraints={'min_value': -4.084004245524434e+16,\n         'max_value': 3.2591690942010877e-40,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.940086219131371e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.05},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-60_926_214_101_652_056_769_851_287_060_470_456_231,\n        constraints={'min_value': None,\n         'max_value': -60_926_214_101_652_056_769_851_287_060_470_452_573,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=3_780_837_379_163_762_996,\n        constraints={'min_value': 3_780_837_379_163_743_455,\n         'max_value': 3_780_837_379_163_768_017,\n         'shrink_towards': -85,\n         'weights': {3_780_837_379_163_760_785: 0.03332820182473114,\n          3_780_837_379_163_760_110: 4.396024881818602e-05,\n          3_780_837_379_163_761_885: 0.038689811151656726,\n          3_780_837_379_163_757_599: 0.014596297752926108,\n          3_780_837_379_163_761_142: 0.020574256561256325}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.05},\n        was_forced=False,\n        index=None)),\n      length=-82,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('b', 1, 1)),\n                                    (('a', 2, 0), ('c', 2, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '/\\x84\\x06\\U000860f0Di\u00a3\\U0003635dm\\U000efa74',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'': 5.9063325134951296e+141,\n       '\\U0008b1a3\u00cf\\U00072b18\\x91\\U00055d7b\\x92': -7.6691893953968585e+28,\n       '(': -27737,\n       '\\x83\u00fa': 28889,\n       '\u092a\u0928\u094d\u0939 \u092a\u0928\u094d\u0939 \u0924\u094d\u0930 \u0930\u094d\u091a \u0915\u0943\u0915\u0943 \u0921\u094d\u0921 \u0928\u094d\u0939\u0943\u0947 \u0625\u0644\u0627 \u0628\u0633\u0645 \u0627\u0644\u0644\u0647': 6.25427899168547e-230,\n       '\\U0008a669\ud86c\udddd': 760341925,\n       '\u00d0\u00c4o\\x81\\x94\\U000ed4c8\u00f7\u00f1\u00fa': -5.450808633961907e+16,\n       '?/\\x18\\x90(B\u00aa\u00df\\x07': 17399},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_445_920_393, -18796),\n       (-14126, -157),\n       (-38, 9999),\n       (-30, 404)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-13131, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-1.6819546219319599e+176,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.05},\n        was_forced=True,\n        index=None),),\n      length=24802,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x99Y\\U000dcf02\u00f1\u00bd>C': 3.801320658222563e+16,\n       '?\\x9fo': -4_069_430_677_312_423_501},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(28, 9)},\n      slice_comments={(15225, -53): 'q\u00e0', (1000, 0): '\\x90'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-75, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.2932239041771219},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'z\\xfc',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None)),\n      length=10263,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('b', 2, 1)),\n                                    (('a', 0, 2), ('b', 2, 3)),\n                                    (('b', 3, 0), ('c', 1, 2)),\n                                    (('c', 0, 3), ('c', 1, 3)),\n                                    (('c', 1, 0), ('b', 2, 2)),\n                                    (('c', 1, 0), ('c', 2, 1)),\n                                    (('c', 1, 2), ('c', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [ExceptionGroup('\ud86d\uded4$\\xada<\u00fe\\U000fa321,\\U000e4410\u00f1\u00e6\\x07\u00c8',\n                                     [UnicodeTranslateError('M\u00cdH\\U000dd8a0',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      ExceptionGroup('u\\U000ceda9C\\x19\u00b1\u00ef\u00bd:\u00a8\\x7f\u00ec',\n                                                     [UnicodeTranslateError('\\x1aJq\u00a3',\n                                                                            0,\n                                                                            0,\n                                                                            'reason')]),\n                                      UnicodeTranslateError('\u00e95',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError('',\n                                                            0,\n                                                            0,\n                                                            'reason')])]),\n      expected_traceback='\\x13',\n      has_discards=False,\n      target_observations={'Test': 7778,\n       '\u00af\\x19\\U000eb400\\U000b6576\\U000af5a5': 0.0,\n       '=\\U0010dcfaJ': -25897,\n       '': 25270,\n       '\u00e4E': 0.5,\n       't\u00b1\u00a1\u00a9\u076f': 55,\n       '\\x897\\U0005f37b\u00fd\u00a9\\x89\u00fa': 1625,\n       '\\x8e\\U000d9c87a\\x19\ud87a\udcbb\\x8a': -0.99999,\n       '\u00f3\\x8dz': 5.184502493526992e+16,\n       '\\U000f3b0e\u00f8t': 6.026800623501172e+16,\n       '\u00ea': 2.5474996634996284e+302,\n       '\u00c4\\U0005ce8a\\U00035c45\u00d7\\x92$V\\x8a\\x08\u00a7\u00af\\U000e9d94': 2.5871635377282144e+16,\n       '\u00f6\u00c6\\U00043234\u00d4C1': 4.1639523754055665e+123,\n       'N\u00ee': 10,\n       '\\x95\u00cb\u00cc\\x01y': 7.070662205500768e+16,\n       '\u00bc\u00fe5\u00d4\\x83sw\\x02<U': 2427,\n       '\u00ce\\x19\u75f1': 7299459671128132.0,\n       '\u00d3\\x00\u00d9': 3.053968013353727e+16,\n       '\\x80\\x08\\U0003f698\u00c1': 4.115211152432056e+16,\n       \"\\U00042844'\": 81,\n       '\u00e5\u3e9c\\x9f\u00d5\\x8b\u00bb@y\\x08I\ud865\ude1a': -3.8228985700925865e+82,\n       '\\x16\u00d8\u87c7f\\x85\\U00054837\\U0003a623': -11074,\n       't': -1e-05,\n       '1\\x1e\\x19': -28415,\n       '\\U0005bd8b\\U0009265a': -1.3525748455862157e+227,\n       'V\\U0009b1bb`\u00f9M\\x0bV\\x05\\x9aj\\x10\\x9b\\x8f\u00f6': 65},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-16177, 65535)},\n      slice_comments={(2_460_068_870_885_436_013, 78): '\u00ca\\U000c9a4a',\n       (6_005_544_213_593_750_288, -28176): '\\x0c\u00cfO\u00a6',\n       (-149_140_370_307_914_791_677_328_252_796_873_645_804,\n        -1_714_444_237): '\\U0005d984',\n       (107, 28029): '0..0',\n       (-1765, 23): '\u00aaA\\U000dde3b',\n       (-18478, -20260): '\\U00055fda\\U00065629q\u00f7N'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-1081, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.1850779678282071},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.1937509461672335e+308,\n        constraints={'min_value': 6.513088946211103e+261,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.729289326179771e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.05},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.8750024241059086e+306,\n        constraints={'min_value': -3.1270023777804596e+16,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.9619465532706108e+16},\n        was_forced=True,\n        index=None)),\n      length=254,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\ud84c\udfd4F\\x1dW\\U000bfb5d\\x1f': 19148,\n       '\u00ba,5\\x94;': 4850619925411753.0,\n       \"\\x04'\\U000f60bd\u00c5\\U000f817et\u00bc\\U00052b1f\u00feeg\\x95\u00d6\\x06\\x05\\x93\u00be\\U000783cfS\\U000a444f\": 649010931,\n       '](\u00e0\u00f2\\U000dd4ce\u00f9\u00e4\\x90\\U0007c196\u00cd\\U000d5d81\\x90\\U00070e67\ud843\uded3': 20197,\n       '\\x02\\x88\u8f25w\u00e3w': 2_095_103_509,\n       '': -4.6928918416792895e-179,\n       '\\U0003ba38': -6390167571596779.0,\n       '\\x82\\xa0\\x12+n\u00be\\U0001cdc9\u00b0B\\U0007138c\u00a5\u00f1I\\x04`\u00c9': 5_285_152_875_656_662_701,\n       '\\U0010ae14': -105,\n       '\\U0010e2b0\\x17': -116,\n       '\\U000a81b9\u00a8pR!\\U000113e5\\x86\\x1d\u00f5': -32381,\n       '\\x15i\\x82v\\x92\ud83d\uddb8\u00da': 0.0},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-13181, -9989),\n       (-5270, -111_058_775_029_082_173_579_391_263_066_660_013_649),\n       (9999, 30260)},\n      slice_comments={(65535, 9674): '\ud872\udf57J8\\U0006ff98\\U00062338\u00cen'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1288995840835595640, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.10395846601576045},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000ab044\\U000ab0b3\\U000aafba\\U000aafdf\\U000ff954\\U000ab02f\\U000ab06c\\U000ab0ae',\n        constraints={'intervals': IntervalSet(\n             build_intervals([700342, 1048758]),\n         ), 'min_size': 2, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u7e32\u7e46\u7e60\u7de9\u7d97\u7e17\u7dae\u7d7e\u7dc2\u7e60\u7e2b\\U0007fa46\u7e73\u7e58\u7e73\u7e17\\U0007ad22\u7e4a\u7e56\u7e52\\U0006b4ad\u7e63\u7e55\\U0003da9f\u7e1a\u7e63\u7de7\\U000352cd\u7d8b\u7df1\u7e0c\u7e42\\U00049898\u7e27\u7dcf\u7daf\u7df6\u7e53\\U001006c4\u7dfa\u7e6d\u7e09\u7dd6\u7e00\u7dcc\\U000665c7\\U0003defb\u7e14\u7ddd\u7e74\u7dc3\u7e28\u7e09\u7dc5\u7de0\u7dda\\U000bd29c\\U00081179\u7dd2\u7e56\u7db0\u7dbb\u7d9c\u7e09\u7dd7\\U00061029\\U000bebff\\U0003c654\u7d93\\U00053259\u7e78\u7d9b\u7e17\u7dd1\u7da0\u7dfd\u7e63\u7e53\u7e52\u7de7\u7e46\\U000ded8d\u7e17\u7e4e\u7dc0\\U000489d3\u7e26\u7e0b\\U00068878\u7e64\u7e1c\\U0004979a\u7db4\u7e37\u7e4c\u7d88\u7df4\u7e61\u7de3\u7df1\u7e1a\u7e32\\U000704d7\u7da5\u7dba\u7dcb\u7e44\u7e42\u7dcb\u7dd7\u7dea\u7dfa\u7dae\\U00048977\\ue158\u7dbb\u7de8\u7e43\u7dc7\u7de2\u7e63\u7d82\u7e11\ubd33\u7e04\u7e11\u7e17\\U0001497c\u7d9c\u7dc4\u7e25\\U00060918',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [32126,\n                  150505,\n                  207815,\n                  571346,\n                  660571,\n                  794244,\n                  867658,\n                  919000,\n                  1008348,\n                  1075480],\n             ),\n         ),\n         'min_size': 32,\n         'max_size': 132},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=4.067415460261353e+307,\n        constraints={'min_value': -1.7273883665405276e-83,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.0},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'i9ey\\xb0\\xd8bb\\xa7\\xf8\\xa7\\xb0\\xed:#\\xf9\\x91\\xbeoJN)p;\\xf57L',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xdd\\xc5',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.2753013486941938},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'!\\x8b\\x989v5d\\xf40h\\x18\\xe5\\xfd-',\n        constraints={'min_size': 3, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -2.2250738585072014e-308,\n         'max_value': 5.648576401768492e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 4.174846195597317e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=8192,\n        constraints={'min_value': 3947,\n         'max_value': 21862,\n         'shrink_towards': 0,\n         'weights': {16478: 0.3231338363443854,\n          15613: 0.17327667732866664,\n          4409: 0.21081216134431527}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 3.580856821124219e-144},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x1c',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.06360623046912e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u10eb\u106c\\U000cbc3e\u10ef\u106f\u10b9\u110a\u1079\u1126\u1067\u107d\\U000b72fb\u1053\u1137\u1134',\n        constraints={'intervals': IntervalSet(\n             build_intervals([4179, 236598, 305659, 918392, 940139, 1114111]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00080559\\U00080555\\U0008586e\\U000804f0\\U00080536\\U0008c83e\\U000a2a8b\\U0009501f\\U0008055b\\U000804b0\\U00080579\\U00095958',\n        constraints={'intervals': IntervalSet(\n             build_intervals([525460, 621614, 651445, 699102, 745474]),\n         ), 'min_size': 12, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=3386,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('a', 1, 2)),\n                                    (('a', 2, 0), ('a', 0, 0)),\n                                    (('a', 3, 2), ('b', 3, 1)),\n                                    (('b', 0, 3), ('c', 1, 0)),\n                                    (('b', 2, 1), ('a', 2, 1)),\n                                    (('c', 0, 0), ('a', 0, 1)),\n                                    (('c', 0, 1), ('b', 0, 0)),\n                                    (('c', 2, 0), ('a', 0, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '0#%',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\u00fb',\n      has_discards=False,\n      target_observations={'\u00a7\u00e7\u00c8\u00f0.\u00c5\u00f1C\\U00085ced': 2.2801673219462768e-255,\n       '\\U000634a5S\ud81c\udd88\u00f79\ud81b\udf82': 5.822573187364261e-242,\n       '\\x90\\U0008cdb8tA%c': inf,\n       'Ok\\U00032f69\u00f0\\U0004b817': 4.240946398451859e+16,\n       '&\\U00089855\u00f2\\U0003cd44\u00b6*\\x91': 2.7236010361977044e+16,\n       '\\x0c\u00f4\u00aa': -77,\n       '\ud83d\ude0d': 4.4494889888356065e-241,\n       'j\u00ea\u00a9\u00be\u00a2G': 3.709653801542347e-24,\n       '': 2.369555765942931e-59,\n       '\u00f7': -1_393_978_930,\n       '\u00ea\u00d4\\U000bb8bb\\U0007a61a\\U00012635\u00f2\\U000c8e1dH\u00d7\\U000c5c84\u00d1W\u00e0\ud86f\udd98\u00b4+\u00dc': 1.4273887121260376e+16,\n       'KT\u00c9\u00c3\u00c1\\U000f73e7\\U000bc1ce\\U000d2ea7\uaefcO\\U000ddfeb': 6.017115164833821e+16,\n       'R\\U0005b091\\U0008090e\\U0004e479R~\u00fd<v\\x1d.': -612766539087745.0,\n       '\ud852\ude55\u00b2\u00b2': 3.764936910123167e+16,\n       '\u00d6\u00ff': 0.5,\n       '\\U000d666a>\u00b1\\x0bz\u00fb\\x196;\\U0008a375.a\\x12\u00a8\\U000ccd59\\U000cb575P\u00b5\\U0006f3d1\\x82.\\U000ccc77\\U000ad697': 2.3524987176299e+16,\n       'N': 1.247314788393738e-163,\n       '\u00bc\\U0005f337%': -5.685183075200161e+16,\n       '\\x14': 0.0,\n       '\u00ce\\U0005f2bbe\u00df\u00ba\\x1f\u00cc\"w': -4.210705202202194e+240,\n       '999999999999999999999999999999': -6.3395337460383336e+16,\n       '\u00f1': -2.9394663211973202e-223,\n       'D\\U0003e0b0%\\x00': 4226,\n       '\u00c1\\x04O\\U00019017\u00f3\u00a6\u00f9\u00bf3\u00f2\\U0008b021a': -1.401298464324817e-45,\n       '\u00b0~': 6.137687053550111e+16,\n       '\\U000656deN\\x80\u00b8\\U000c6e1f\u00ed': -1111,\n       '\u00ef\\x1f\\x7f\\U00069e13\\x0cp,GT\u00cfa\u00ec\\x04\u00b0g': -2.893212789088209e-10},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-6303, 45),\n       (-4088, 26069),\n       (300, -29206),\n       (1_066_664_207, -44)},\n      slice_comments={(-37, -1479): '\\U000947b6\\U0008ad95\u00c8S',\n       (28989, 2_188_546_817_185_167_058): '\u00fe\\U0006b0d4\\x15Z\\x9bH',\n       (-4895, 62): '@\u00d05\u00fc'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=26319, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'6P\\xd0',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=28322,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 602,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u8436\u83b1\u83ee\u8427',\n        constraints={'intervals': IntervalSet(\n             build_intervals([33695, 74098, 458581]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=10761,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b':',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"\\xf1}\\x1ee\\xdd'\",\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9587740343115803},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.8483474542938635e+109,\n        constraints={'min_value': 3.7527861961608904e+16,\n         'max_value': 3.5025305754969385e+109,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.9542849823164744e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.6244405625440216},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.5721466650158812},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=8336278248306993.0,\n        constraints={'min_value': 0.05,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.1754943508222875e-38},\n        was_forced=False,\n        index=None)),\n      length=3528,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 2, 3),\n                                     ('c', 0, 0)),\n                                    (('c', 0, 2), ('a', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         'S',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\x1b\\x93\u00da\\x10\u00f4,\\x8e\\U000b042f\u00ec',\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-54, 4_729_434_059_392_077_575), (2210, -102)},\n      slice_comments={(2_470_426_050_152_519_262,\n        85): '\u00b6\\U0005eb59K\\x0f\\U000d2d39\\xa0\\U000b29de\\U0001ef2d\u00ca?\u00c1\\x06',\n       (-8132, 125): '\\U00107e7e',\n       (-8926, 55): '\\U0004326f\\U000a075e\u00f2'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-55, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=5.355780576703554e+16,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 3.1887130998674132e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud85c\udc65\\U0007f198\ud85c\udc0c\ud85c\udccb\ud85c\udc63\ud85c\udc16\ud85c\udc03',\n        constraints={'intervals': IntervalSet(\n             build_intervals([159711, 525723]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xfc\\xebV\\x9f',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xdd\\x0e\\xdb\\x94\\xeci\\x81\\xb5{\\xde\\xe7\\xc9\\xf3:\\xf7BX\\\\}\\x9c\\xe0\\x13Clc\\x99\\xaf\\x06c\\xc7c\\xa9H\\xa7\\x1c\\xb8\\xbfM\\xda\\xfcm',\n        constraints={'min_size': 32, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u00dd',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0, 40596, 148149, 616380, 639618, 672497, 1014361],\n             ),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000497a8\\U000497e1\\U000497b9\\U00049796\\U000a24c9\\U0007dbea\\U0004976f\\U00049775\\U00049773\\U000497e2\\U0004980a\\U00049799\\U000497f5\\U00049848\\U000497cd\\U000a32da\\U00092bad\\U00049775\\U00049795\\U000882fd\\U0004975b\\U00049818\\U00049786\\U00049791\\U00049805\\U00091666\\U0004980c\\U000497d4\\U00049761\\U000497c8\\U0004979d\\U00049759\\U00049832\\U00049817\\U00049808\\U00049753\\U0004976d\\U00091534\\U000497aa\\U000497a0\\U000497b6\\U000497b7\\U000497ab\\U0008577d\\U00049780\\U000a6863\\U0008cb18\\U0004981e\\U00088fe8\\U00049797\\U0004980a\\U00049826\\U00049775\\U00049837\\U00049805\\U000497cf\\U000497ea\\U000497be',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [300880, 309565, 505503, 584879, 592771, 687142, 1072317],\n             ),\n         ), 'min_size': 41, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=11353,\n        constraints={'min_value': -114,\n         'max_value': 31945,\n         'shrink_towards': 0,\n         'weights': {11353: 0.2622252978212203,\n          13318: 0.36426878494338555,\n          3200: 0.29051059856630723,\n          1697: 0.03421759929013421}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1.7976931348623157e+308,\n        constraints={'min_value': -inf,\n         'max_value': 1.8916153634375843e-294,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.509475565830525e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.341065512826269e+16,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.05},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 4.467153539999117e-185},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'.',\n        constraints={'min_size': 0, 'max_size': 94},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.9312860433489614e-136},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.2557490652416497e+308,\n        constraints={'min_value': -3.0990795212266e+169,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.2557490652416497e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000c0453\u2d36\u2d60\u2da8\\U0008c539\u2d5e\\U0008e53e\u2dd3\u2df4',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [11516,\n                  58562,\n                  166512,\n                  176226,\n                  275058,\n                  351391,\n                  354874,\n                  381121,\n                  535140,\n                  676408,\n                  756669,\n                  896742,\n                  909614,\n                  912618,\n                  954278,\n                  1114110],\n             ),\n         ),\n         'min_size': 6,\n         'max_size': 40},\n        was_forced=True,\n        index=None)),\n      length=25601,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('b', 3, 3)),\n                                    (('a', 1, 1), ('a', 0, 3)),\n                                    (('a', 1, 2), ('a', 0, 3)),\n                                    (('a', 1, 2), ('c', 3, 0)),\n                                    (('a', 3, 3), ('a', 1, 2)),\n                                    (('b', 3, 2), ('c', 0, 0)),\n                                    (('b', 3, 3), ('c', 2, 1)),\n                                    (('b', 3, 3), ('c', 2, 3)),\n                                    (('c', 1, 2), ('c', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('initial_type',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '\u00d8\u00b7\u00f7\\x97\u00c0',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'I\u00bfte\u00bb\\U000f9ba0': -2103},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-767, -75),\n       (8855, -27),\n       (9350, 29758),\n       (32266, 26791),\n       (174242522, -626063267),\n       (977_102_941_017_927_595, -4587)},\n      slice_comments={(21710, -122): '\u023a',\n       (18094, 24): '',\n       (91, 110_254_200_348_828_606_880_127_969_820_048_231_242): '`'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=7341055971957335960, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=4407,\n        constraints={'min_value': -20249,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0008f6f0\\U0008f655\\U0008f675\\U0008f737\\U000998d4\\U0008f6f8\\U0008f700\\U0008f6f0\\U0008f6bb\\U0008f653\\U000a1f5e\\U0008f6c2\\U0008f6b5',\n        constraints={'intervals': IntervalSet(\n             build_intervals([587329, 667719, 924797]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=48_337_362_377_010_346_834_795_064_533_662_820_241,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('c', 0, 0)),\n                                    (('a', 0, 3), ('b', 3, 3)),\n                                    (('a', 0, 3), ('c', 0, 2)),\n                                    (('a', 1, 0), ('c', 3, 1)),\n                                    (('a', 1, 2), ('c', 3, 3)),\n                                    (('a', 1, 3), ('c', 2, 3)),\n                                    (('a', 2, 1), ('b', 1, 0)),\n                                    (('a', 2, 3), ('a', 1, 3)),\n                                    (('a', 3, 1), ('a', 1, 1)),\n                                    (('a', 3, 1), ('b', 0, 2)),\n                                    (('b', 0, 1), ('c', 3, 2)),\n                                    (('b', 1, 1), ('c', 1, 2)),\n                                    (('b', 3, 0), ('b', 0, 3)),\n                                    (('b', 3, 1), ('a', 0, 0)),\n                                    (('b', 3, 1), ('a', 1, 3)),\n                                    (('b', 3, 2), ('a', 3, 3)),\n                                    (('b', 3, 2), ('b', 3, 2)),\n                                    (('c', 0, 1), ('a', 2, 1)),\n                                    (('c', 0, 1), ('c', 0, 2)),\n                                    (('c', 0, 2), ('c', 2, 3)),\n                                    (('c', 1, 2), ('a', 2, 1)),\n                                    (('c', 1, 3), ('c', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\x10\u00be\\U000bb60c\u00ef',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback='',\n      has_discards=False,\n      target_observations={'': -1.0712343122174748e+16,\n       'Eq\u00aa\u00dc\u00bb': 5.4597014919982136e+16,\n       '@\\x84p': -6.4383937888417784e+16,\n       '?@': -105,\n       '\\x93': -24118,\n       'B\u00a6 V\\U000feb20\\x07': 122,\n       '\\U001078f8u': -4.41115684629497e+16,\n       '\u00bf': 114,\n       'm\\U0008a7cf\u00eb': 104,\n       '\u00d1j\\x92\u00a7\\U0004a40b4*': 27699},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(96, 26901), (1_750_889_731, -57)},\n      slice_comments={(-30830,\n        3_885_980_242_382_953_286): '\\x84Z\\U0008fad4\u00ba\u00a1\\x99\\x9f\u00e0',\n       (-9_701_458_658_823_303,\n        -19): '6Q\\x06\\U000670d7\\x98\u00fc\u00ee\u00fd\u00ac\u00cc\\x02\u00dc\\U0010b99d\u00a8fv\\x0b\\U00071969\\x81\u00be'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=7230, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.5407688144324415e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.2238259140718215e-48},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=4657,\n        constraints={'min_value': None,\n         'max_value': 29376,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -2.5621245831751444e+269,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.179699827889221e+16},\n        was_forced=False,\n        index=None)),\n      length=1_115_471_649,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 2),\n                                     ('b', 2, 0)),\n                                    (('a', 2, 1), ('a', 2, 0)),\n                                    (('b', 0, 1), ('c', 2, 1)),\n                                    (('b', 1, 2), ('b', 0, 1)),\n                                    (('c', 0, 2), ('a', 0, 0)),\n                                    (('c', 1, 3), ('a', 0, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '0/0',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\U00076d4b\\U000a905e\\x8a\\U000c56f8\u00b8.ZL\u00f4\\x87\\x0b',\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-22012, 32540),\n       (-18479, -93),\n       (-11601, 27072),\n       (-1309, 2411),\n       (86, 156_342_331_131_174_224_546_148_875_077_191_300_817),\n       (623, 29968),\n       (10519, 9999),\n       (20240, 490991079),\n       (961_911_384_965_872_412, 22157),\n       (2_955_947_432_910_256_859, -117)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x108be8cb0>, min_size=0, max_size=inf).map(tuple), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text())), has_discards=one_of(nothing(), nothing(), booleans()), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), length=one_of(nothing(), nothing(), integers()), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason'))))).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from integers(0, 1114111).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.04335724905831739,
          "overall:gc": 8.462596451863647e-05,
          "generate:args": 0.21340678300475702
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 5,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 5,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878930.807583
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-84, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\x8a{\\x17\\x13B\\x9d\\xf4\\xf8(v\\xd58\\x9d\\x08r\\x1b7\\x9e`^-\\xe0\\xa3\\xda\\xfb\\x01\\xfb\\x1e\\xfcr\\xa0\\xd0\\x84\\x8b\\x7f~\\xf1\\x99!2K\\xe7\\xf0\\x1fpW\\xdc\\xa8\\xa5\\xc5\\x8d0H@\\x1egR\\xfe\\x99n9\\xed\\x97\\xf0\\x01\\x1a\\xb2/\\xc5l\\xa1\\x1e\\xa1\\xab\\x08\\xa2\\xd3\\xc2\\x03\\xc8\\xa6\\xe0\\xd9\\xe6Q&\\xf0\\xee\\xe6r1R\\x84\\xdcG\\xfa!%',\n        constraints={'min_size': 50, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 7.372210940822607e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x0c\\x1c5\\xb8\\x0ff\\x13\\xd4\\x7f\\xff7s\\xff\\x19,\\x1f\\xe7\\xed\\x1f\\xe9az\\x17~>H\\xca>\\xb3Tv\\x9d\\x15\\x02\\x10}\\x83\\xc1\\xc4',\n        constraints={'min_size': 29, 'max_size': 129},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0001007b\\U000c9481',\n        constraints={'intervals': IntervalSet(\n             build_intervals([65535, 311312, 526113, 1109116]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-3_416_543_013_196_756_953,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 3),\n                                     ('b', 0, 3)),\n                                    (('b', 3, 0), ('c', 0, 1)),\n                                    (('c', 1, 1), ('c', 1, 0)),\n                                    (('c', 1, 3), ('c', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\U00102a45T\\U0005ed09',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(8_494_642_854_230_648_211,\n        81): '\\x97\u00e9\\U000c0591$\u00dc\\x90e\u00a3',\n       (512, 1_148_706_237): 'w*F\\x05\u00c2\\U000aaddbB\\U0004f283\u00a9>\u00ca)=',\n       (671, 30933): '\u00bb',\n       (19059, -3234): '',\n       (8654, 2_014_469_353): 'B\\U0007d855\u00f1j',\n       (-10178, 5_856_192_852_899_206_590): '\ud84c\udef3',\n       (18768,\n        -17_878_682_245_486_197_242_763_048_728_594_870_250): '\\U00065b9f8Q\u00e3\\x84\u00a5',\n       (-1_898_203_662_430_466_209, -9458): 'x',\n       (-15241, 5156): '\\U000791dc\u00a8',\n       (8, -32207): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-8254, context=(), group_elems=()),\n      nodes=(),\n      length=25571,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\u00e2',\n      has_discards=False,\n      target_observations={'\\U0008d28c\u00ca\u00df\u00b5vt\ud83d\udf2a\u00ba\\x9e\\U0008ca28\\U000e7078\\\\\\U000aaac2\u00d1\u00a6\\U000e645c': -4.336596299585205e+16,\n       '': -3_827_434_983_875_226_945,\n       '\u00b1\u00cf\\x8aA\\x0cD\\x1d\u00c1\u00bc|:\\U0004adcex=\u00e9\u00ea\\x89\ud854\udc1f\\x18\u00c6\u00f6L\\U00107efd\u00f7': 14378,\n       '\\U00075049\\x18\ud875\udf0f\\U000d0f15\\x83\u00cc\u00b3h52\\U000cc1ef\u00cb\u00d6\\x01\\U000814a9x': 29192},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-31771, 14708),\n       (-19425, 23028),\n       (-1848, -67),\n       (10894, 4219)},\n      slice_comments={(26837, -135): 'I\\x83\ud84b\udef2\u00ed\\U0003d573\\U0003646e\\x1a\u00c3\u00a4T',\n       (20221, -31_506_253_880_105_253_481_944_098_976_531_957_713): '',\n       (6902, -7975): '',\n       (-2515, 1_558_813_519): '\\U001018fe\u00b0_F\u74b6\\U0009bc01\u00cd\u00cad\u00d8',\n       (29583, 6351): '\u00c4\\x85\u00a6\\x03\\x0f7g',\n       (25281, 21050): 'd\u00f8\u00a9\u00fb\\x86,\\U0001b715\\U00090ecc\\x86\\x9d',\n       (0,\n        -61_408_250_108_830_462_665_914_221_662_382_632_938): 'W\\x1f\\x1b\\U001042f1=',\n       (736, 44): '\u00bd\\U0009c305',\n       (1016, -7_373_617_570_394_111_458): '@\\U00090948\\U000dc61e\\x8e',\n       (14058, -5487): 'db\u00b6\ud87a\ude25',\n       (8817,\n        12_646_576_555_915_402_099_003_020_995_745_812_373): '\\U000a5058\\U00037051_\\x16\\x81\\U0008a210\\x84\u00a2\\U0010892c\u00a8',\n       (-10366, -20900): '\\U0009f78b\"',\n       (4769, 19405): 'FALSE',\n       (12585, 11448): '\\x86\\x93',\n       (796, -15556): '',\n       (65535, 15778): '\\x87\\U000d9f6f\\U000b8288\\U000f4a84\u00bd>',\n       (94, -117): '\\x80!{W\\U000382ea\\x98\"\\x1du\\x99\\x82\\''},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-3756955454866732683552677644568702507, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=2.7987209813981095e+306,\n        constraints={'min_value': -2.8698516190655683e-196,\n         'max_value': 9.167860292077451e+307,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.05},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-118,\n        constraints={'min_value': None,\n         'max_value': 18366,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-6271,\n        constraints={'min_value': None,\n         'max_value': -2501,\n         'shrink_towards': 38,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.1582104347383351},\n        was_forced=True,\n        index=None)),\n      length=1_312_668_277,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 3, 3),\n                                     ('c', 2, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\x8b\\x15\\x9c\u00f0\\x00\\U000b5e76',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00cec ': 2.7318519786892826e+304,\n       '\u00c5\u00f9\\xad\u00a8\\x07\u00e2': 4.381445854114615e-206,\n       'v\\U000ae61a': 37},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-74, -27216), (30585, 4300)},\n      slice_comments={(84, -115): '\\U0006ef3b\u00f8\\x8f',\n       (125, -74): '\u00ea\\x92\u00ed\\U000385b8',\n       (-7292, -49): '',\n       (-93, 1024): '\\U000e1938<\u00c5\u00e1',\n       (-31078, -86): '\u00fd\\U0005b0f9\u00eaC\u00cep\\U000a6f49X\u00b7\\U0004a374~',\n       (742993325, 25709): '>\u00e1\u00f0d^\u00ca'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-117, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=9.861445859501973e+307,\n        constraints={'min_value': 6.745105056307024e+16,\n         'max_value': 1.0161555220942312e+308,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.05},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.696871688518953e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-86,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -86,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-7_464_620_505_371_232_843,\n        constraints={'min_value': None,\n         'max_value': -4560,\n         'shrink_towards': 32,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud860\udc83\\U0009d7e3\ud860\udce8\ud860\udca0\ud860\udc7b\\U0004874d\ud860\udcb1\ud860\udd3e\\U0007e6b9\ud860\udcde\ud860\udc65\ud860\udcc6\ud860\udd48\ud860\udc7a\ud860\udce2\\U00089412\ud860\udced\ud860\udcb1\ud860\udce2\ud860\udd35\ud860\udcc7\ud860\udc6e\ud860\udd37\ud860\udc8e\ud860\udc6a\ud862\udccd\ud860\udce8\ud860\udd12\ud860\udd3c\ud860\udccb\ud860\udcbf\ud860\udd23\\U000332e2\ud860\udc90\ud860\udca9\\U0004e8d8\\U00075fdd\ud860\udd37\ud860\udcef\ud860\udcbc\ud860\udd23\ud860\udc5f\ud860\udd2d\\U0005ad38\ud860\udcda\ud860\udcdc\\U000b5bfb\ud860\udc92\ud860\udd05\ud860\udd3d\ud860\udca4\ud860\udcc3\\U0008adae\\U00063d9e\ud860\udcfb\ud860\udc65\ud860\udc82\ud860\udc90\\U0003f6fe\\U00090c5a\ud860\udc74\ud860\udc72\\U00087b9d\ud884\ude1e\ud860\udcfc\ud860\udcc5\ud860\udcd7\\U0004afa0\ud860\udcdb\\U0008c78f\ud860\udc56\ud860\udd20\ud860\udc72\ud860\udd41\\U0007598c\ud860\udc65\ud860\udc5f\ud860\udcd6\ud860\udc61\ud860\udcc0\ud860\udc5d\ud860\udce5\\U0006c152\\U0009707d\ud860\udd32\ud860\udcd3\ud860\udd37\ud860\udd34\ud860\udd28\\U000703f6\\U000aa79b\ud860\udd2c\ud860\udd0b\\U0009d09a\ud860\udce2\ud860\udd2f\ud860\udcc9\ud860\udc77\\U000776fa\ud860\udc51\ud860\udc9f\\U00093ced\ud860\udcf5\ud860\udd1b\ud860\udc66\ud860\udc85\ud860\udcaa\ud860\udccb\\U000656c8\ud860\udcbc\\U000aa499\ud860\udca7\ud860\udc54\ud860\udc79\ud860\udd17\ud860\udca6\ud860\udc64\ud860\udc84\ud860\udcac\ud860\udc76\ud860\udd12\ud860\udc55\\U0009b3fb\ud860\udcf1\ud860\udd19\\U000546f6\ud860\udcb4\\U0009e5e1\ud860\udd14\ud860\udcf4\ud860\udd2f\ud860\udcbf\ud860\udd2c\ud860\udd25\ud860\udcee\ud860\udd2a\ud860\udcd4\ud860\udcc7\\U000b895d\ud860\udc95\ud860\udd09\ud860\udca8\\U000a8398\ud860\udcb8\ud860\udc52\ud860\udd18\ud860\udcc7\\U0006e066\ud860\udc8e\ud860\udc69\ud860\udcd1\ud860\udcde\ud860\udca3\ud860\udcc1\ud860\udd30\\U0006ccb6\ud860\udc66\ud860\udcfc\ud860\udcc4\ud860\udcee\ud860\udc5a',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [163920, 172691, 186903, 211456, 253658, 768882, 1046764],\n             ),\n         ), 'min_size': 47, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.3994986306298785e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.233758706315279e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0005c092\u6d2a\\U00037e63\\U0003754d\ud864\uddd0\u6d18\\U000337ab\u6cbc\\U000b4088\u6c99',\n        constraints={'intervals': IntervalSet(\n             build_intervals([27693, 443666, 680957, 806096]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x11\\x9bU\\r\\x1e\\x1c\\xe1\\x91\\x01\\xd8\\xb9\\xc1>\\\\in/\\xf8\\xaf\\xdd\\x7f\\xfc\\xda\\xc7\\x1e\\xeb\\x11v\\xba\\xe1\\xa4\\xe8\\x16\\xa4=Jx',\n        constraints={'min_size': 23, 'max_size': 123},\n        was_forced=False,\n        index=None)),\n      length=95,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('a', 3, 0)),\n                                    (('a', 0, 0), ('b', 1, 3)),\n                                    (('a', 0, 2), ('a', 1, 0)),\n                                    (('a', 1, 1), ('b', 2, 1)),\n                                    (('a', 1, 1), ('c', 0, 1)),\n                                    (('a', 1, 1), ('c', 1, 3)),\n                                    (('a', 1, 2), ('b', 1, 0)),\n                                    (('a', 3, 1), ('a', 0, 1)),\n                                    (('b', 0, 2), ('a', 3, 2)),\n                                    (('b', 1, 0), ('a', 2, 2)),\n                                    (('b', 2, 0), ('a', 1, 3)),\n                                    (('b', 2, 1), ('a', 2, 2)),\n                                    (('c', 0, 0), ('a', 0, 3)),\n                                    (('c', 0, 2), ('b', 1, 3)),\n                                    (('c', 3, 2), ('b', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00bd\u00c4\\x90',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='',\n      has_discards=False,\n      target_observations={'\\U0009098f\u00d54\u00df\u00dd\\U00070796\u00a2\\x89': 4.670679426594066e-183,\n       'R\\U00060ff1B\u00de\\x1e\\x8d\ubc6b\\x1f\\U000a6824\\x84\\r\\U0004ee26p\\U000c6aba\\x83\u00df\\x1e\u00af\\U0005ed12': 1.1139213891369278e+27,\n       '\u00dc\\U00060d27\u00d3': -18049,\n       '\\x07\\x0e\u00dc\\U000fbed6\\U00082aef\\x08\u00be\u00da4': 11740,\n       '': 22117,\n       '\\x1369\\x99\\U000b24b6\u00df': -697,\n       '\\x98\u00d5O\\x1a': 6.724765792696118e-22,\n       '\\x9a\\x99\\x88\\U0010c80e%rkN \\U0008e0f8\\U0004459a\u00d6\\U000558f9-': 8.701384299379606e-11,\n       '&\u00bf': -80,\n       '\\x0f\\xadY\u00be^\\U000df7eaUR\u00ce\\x81': -15329,\n       '\u29822\\U000dd4b1\\x9a\\x97\\U001016a5\u00cc\\U00047b51\\U0001a41f,\\U00053a5c\\x00\u00c2\\x1a\u00b1\\x8e_\\U00081f9e\\xa0w\u00e3\u00be\\U0010c06a\u00a5\\x85\\U0003d329': 5.137067316553992e+127,\n       'G(\\x89\\U0007ae4c\\x97\\U00036609\\U0009e6638\\U0005d981': 0.5},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1040, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-1.7976931348623157e+308,\n        constraints={'min_value': -inf,\n         'max_value': -3.213512878786601e+177,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.739666115703131e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 6.078568787748173e-128},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud84f\udd9e\ud84f\udd3d',\n        constraints={'intervals': IntervalSet(\n             build_intervals([146625, 160656]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.253724221928795e-299},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"\\x90\\x8c\\x8e\\xca\\x96D\\xcd\\xcd\\xf7\\xe0\\xac\\xc3\\xcf\\x18\\x91\\x85x(\\xd6\\xd4\\xfe\\x13\\x92\\xaa\\xa1V\\x0f\\x0b\\xdc\\x06\\xa4\\xe2\\xa2\\xcc*\\xdc\\x94(\\x9b\\x9d(\\xbai{\\xbe*\\xac'\\x11i\\xe8--\\xdf{aI\\xa9\",\n        constraints={'min_size': 45, 'max_size': 145},\n        was_forced=True,\n        index=None)),\n      length=-3494,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('a', 2, 3)),\n                                    (('a', 1, 3), ('c', 1, 0)),\n                                    (('a', 2, 0), ('a', 0, 3)),\n                                    (('a', 3, 0), ('c', 3, 3)),\n                                    (('b', 2, 3), ('c', 1, 1)),\n                                    (('b', 3, 2), ('c', 3, 3)),\n                                    (('c', 0, 0), ('c', 3, 2)),\n                                    (('c', 0, 2), ('a', 3, 3)),\n                                    (('c', 3, 1), ('a', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\U00068e24\\U0003df479',\n      has_discards=True,\n      target_observations={'\u00fb': 1.175494351e-38,\n       '': 29863,\n       '\\x7f\u00b1\\U000774fe': 1.0381181371710136e+16,\n       '\\U0001a173\\x81]d\\U000dd4721\\x0b\\U00066f4d\ud87e\udc53\\x85\\U0006e21d\u00d8\u00ba\\x90`': 14126,\n       '\\x96\\U000c354e': -16532,\n       '\u00ec{\u00f2\u00ce\u00af\u00c2\\x05\u00eb': -15693,\n       '1/0': 4.988753450494278e-84,\n       'X\\x078\ud804\udeb5x\\x05\\x0e\\U000ba359\u00e2\u00e0\\U0005dbfc': 23872,\n       '\u00d5': 35,\n       'b]\u00cf': -284271543},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-28401, 16), (-65, -29526), (9999, 69), (13812, -23704)},\n      slice_comments={(31102, -125): '\\x90\\U000dc25b',\n       (21019, 24242): '/api/patches/',\n       (21581, -44): '\\x1e\u00fe',\n       (-33, -146_591_995_937_877_677_002_107_735_858_571_951_316): 'D',\n       (1_433_319_026_546_482_621, 23752): '\u00ebu\u00d7\u00f4\u00c1\u00a1',\n       (119, -39): 'Z',\n       (31024, 126): '\u00e4\\U000ae033',\n       (-4_589_670_829_168_545_970,\n        6_105_990_534_698_068_936): '\\x17\\x15\u00f1A\u00dc\u00c9\\U0004b187;\\x8fw\\U0003d3fdi\u00fb',\n       (8561, 103): '\\U0006f414\\U000dd787\\x94\u00e2d @\\x97r'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=100, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U00071533\\U000715a6\\U00071529\\U000715d5\\U00096826\\U0007155e\\U000715c5\\U000a87cc\\U000715e1\\U00071581\\U000715a6\\U00071598\\U00071516\\U0007154a\\U00071574\\U0007156d\\U00073dd0\\U000715cc\\U000715e9\\U00071561\\U000715ce\\U000715c4\\U0007155e\\U000714f3\\U00071533\\U0008e96a\\U000715e1\\U00071572\\U000715cf\\U000714f5\\U000715a7\\U000715a5\\U000715ef\\U000715da\\U0009519d\\U00071575\\U000d2fc2\\U0007159a\\U0007152b\\U000d7199\\U00071525\\U0007158c\\U000715c7\\U00071530\\U000d18b0\\U00071557\\U000715bc\\U00079a37\\U000715c8\\U00071508',\n        constraints={'intervals': IntervalSet(\n             build_intervals([464114, 598282, 603574, 699173, 826240, 892768]),\n         ), 'min_size': 22, 'max_size': 122},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud84d\udde3\ud84d\udd52\ud84d\udda1\ud84d\udd14\ud84d\uddca\ud871\udd27\\U0008b2b6\\U000747ac\ud84d\udda1\ud84d\uddc1\ud84d\uddda\ud84d\uddb2\ud84d\udd13\ud84d\udcf8\\U000c5e29\ud84d\udd57\ud84d\udd1b\ud84d\uddb2\ud84d\udd90\ud84d\udd16\ud84d\uddc9\\U00097af7\ud84d\udd51\ud84d\udd29\ud84d\uddb4\ud84d\udd28\ud84d\udd4a\ud84d\uddd1\ud84d\udd40\\U0007f2b1\ud84d\udd4c\\U0009bedf\ud84d\udd8b\ud84d\uddf1\ud84d\udd31\ud84d\uddc4\ud84d\udda0\ud84d\udd23\ud84d\udd25\ud84d\udde6\ud84d\uddca\ud84d\udd7d\\U000478c3\ud84d\udcf9\\U000711b6\\U0005b70e\ud84d\uddf0\ud84d\udde6\ud84d\udd97\\U0003d87a\ud84d\uddd4\ud84d\udd8b\ud84d\udd52\ud84d\udda3\ud851\udd67\ud84d\udd12\ud84d\udd35\ud84d\uddf3\ud84d\uddbf\ud84d\udd9e',\n        constraints={'intervals': IntervalSet(\n             build_intervals([144628, 854867, 893430]),\n         ), 'min_size': 41, 'max_size': 78},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=9.650940900440997e+307,\n        constraints={'min_value': -4.216509445846552e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.409977668749342e+98},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u2542\u24e3\u25da\u24e3\u257d\u24f0\\U0009a0fa\\U000a1280',\n        constraints={'intervals': IntervalSet(\n             build_intervals([9436, 148358, 627220, 698905]),\n         ), 'min_size': 5, 'max_size': 105},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.05},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=907_836_345_102_946_766,\n        constraints={'min_value': 907_836_344_032_745_743,\n         'max_value': None,\n         'shrink_towards': 14337,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-5_514_082_535_178_968_538,\n        constraints={'min_value': None,\n         'max_value': 13703,\n         'shrink_towards': -50,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0009743a\\U000973fe\\U0009746c\\U00097406',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [619464, 699135, 707529, 756519, 842679, 1114111]),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None)),\n      length=32714,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 2),\n                                     ('a', 3, 0)),\n                                    (('a', 2, 0), ('c', 0, 2)),\n                                    (('b', 1, 3), ('c', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='@\u00c3',\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(69, -68): '\u00ca\u00a3\\x85\u00c5k',\n       (45, -17554): '\u00e6\\U001006f5v\\x80\u00a1:`\u00ec{\u00fdX\\x9d',\n       (47_265_211_497_684_025, 25864): '\\U000b08c2'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.008251291990745813,
          "overall:gc": 3.412499791011214e-05,
          "generate:args": 0.06295967206824571
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878921.350332
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-2346347846496465620, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=1.5754660252123721e+308,\n        constraints={'min_value': 0.0,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.766279710579028e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xe0\\xe40\\x8e\\xeer\\xbe\\x04\\xb0\\x8f\\xf3\\xb1\\x1e1Q\\xed\\x8b',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-18097,\n        constraints={'min_value': None,\n         'max_value': -12423,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7959565083876361},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1.3004578875479555e-200},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.0289066776407978e+16,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.9945710868988132e-138},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 1.0},\n        was_forced=True,\n        index=None)),\n      length=404,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('a', 2, 0)),\n                                    (('a', 0, 2), ('b', 1, 0)),\n                                    (('a', 2, 1), ('b', 0, 2)),\n                                    (('b', 0, 0), ('b', 2, 1)),\n                                    (('b', 1, 2), ('c', 0, 0)),\n                                    (('b', 2, 2), ('a', 1, 0)),\n                                    (('b', 3, 3), ('c', 1, 0)),\n                                    (('c', 2, 3), ('b', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('x',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('\ud888\udc95\\x87?G#', 0, 0, 'reason')]),\n      expected_traceback='\u00d0\u00a15\\t\\n\\x84\u00a1r\u00fco\\x01\\\\\u00bf\\x9dq~\\t\\r\u00eb7\\U000fe8f3\\U00101ef6\u00d5\\U000feee8\\x89$\\U000f787a\\U000bd3e3',\n      has_discards=True,\n      target_observations={'-\\U00038416\\xa0\\x859\\x1aPP\\U000c1721\\x8e\\U0004b442i\u00faP': -9304,\n       '\u00e2': 6.92068603071103e+16,\n       '\\U0005166f\\x18G\\x1e\\U00083da7\\x1d\u00b4U#\\x88': 6.535340638984641e+16,\n       '\\x1b\u00ed\u00c7\\U000c151e!': 0.05,\n       '\u00d4\u00bb': 5460,\n       '\u00d8&\u00e3\u00e5\u00a6Q\u00e3\u00c6': 1_274_845_389},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-27561, -94),\n       (-96, -31129),\n       (-56, -16859),\n       (86, 9999),\n       (21900, -7232),\n       (23562, -28),\n       (26912, 19962)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=20647, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([240207, 755739, 971743]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),),\n      length=19313,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('c', 3, 0)),\n                                    (('a', 1, 2), ('a', 1, 2)),\n                                    (('a', 1, 2), ('c', 1, 2)),\n                                    (('a', 2, 1), ('b', 0, 1)),\n                                    (('a', 3, 1), ('a', 3, 2)),\n                                    (('a', 3, 3), ('a', 0, 2)),\n                                    (('b', 0, 2), ('b', 2, 3)),\n                                    (('c', 1, 1), ('b', 0, 2)),\n                                    (('c', 1, 2), ('a', 0, 0)),\n                                    (('c', 2, 1), ('c', 0, 2)),\n                                    (('c', 2, 3), ('b', 0, 0)),\n                                    (('c', 2, 3), ('c', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         'cD\\U000ccfec\\U00097136',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\U000394da',\n      has_discards=True,\n      target_observations={'\u00ed': 16411,\n       '\\U0006fa6c\u00c5\u00a7': 1.3252236818955628e+306,\n       '\u023a': -7.20158975345501e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-28065, 25327),\n       (-23424, -1_516_132_718),\n       (-11573, -25095),\n       (-91, -109),\n       (39, -36),\n       (50, -25679),\n       (112, -8_102_041_715_993_496_273),\n       (125, -1),\n       (404, 182),\n       (1133, -110),\n       (8951, 79),\n       (11029, 21167),\n       (29389, -11813),\n       (106_659_183_823_808_823_501_842_549_838_062_158_201, 1204)},\n      slice_comments={(102, 49): '\\U0008184a\\U000aaa69\\U000a9b50w',\n       (42, 6_378_896_750_136_882_028): '*\u00bb',\n       (-32683, 15721): '\u00da\\x85',\n       (14096, -19743): '\u00dfqi\\x988\\x82a\\x0b\u00c8',\n       (-2987, 404708321): 'cov'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-414336618, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-12627,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([391095, 425267]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.0521252057212934e+68,\n        constraints={'min_value': 3.5138385684215828e+16,\n         'max_value': 8.629868018433058e+307,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.3809827205043822e+43},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 2.6720790477518732e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.226399532271938e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-4.005498591312438e+16,\n        constraints={'min_value': -inf,\n         'max_value': 870869915024228.0,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 973.097680717538},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'X\\\\\\xa0\\x0fV\\xb8\\x13;\\xf5\\x03\\x8fB\\xeb\\xac\\x16',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00080785\\U0003a7e7\\U0003a784\\U0003a848\\U0003a82a\\U0003a828\\U0003a84f\\U0003a845\\U0003a7d9\\U0003a806\\U0005c4e4\\U0003a7b5\\U00067e20',\n        constraints={'intervals': IntervalSet(\n             build_intervals([239449, 766554]),\n         ), 'min_size': 4, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0001ba25\\U0001b9d2\\U0001ba08\\U0001ba3c\\U0001ba74\\U0001bab0\\U0001ba7f\\U0001ba8b\ud885\udc63\\U0001b9c6\\U000b25d3\\U0001ba2a\\U0001ba08\\U0001ba67\\U0001ba1f\\U0001ba80\\U0001ba5b\\U0004da77\\U0001baac\\U0001ba49\\U0001b9d1\\U0001ba9a\\U0001b9df\\U0001ba30\\U0001ba4e\ud887\udc51\\U0008a42f\\U0001ba2a\\U0001ba38\\U0001bab5\\U0001ba60\\U0001ba46\\U000f65c4\\U0001b9f2\\U0001ba14\\U0001ba22\\U00053f97\\U0001ba5e\\U0001ba70\\U0001ba62\\U0001ba0b\\U0001e9eb\\U0001ba83\\U0001b9cc\\U0009c9ef\\U0001ba74\\U0001b9e9\\U0001ba9e\\U0001ba9f\\U000f06d4\\U0001ba59\\U0001ba56\\U0001b9fb\\U0001bab9\\U0001ba6b\\U0001ba56\\U0001baae\\U000dc3c2\\U0001bab4\\U0001ba77\\U0001b9ed\\U0001ba86\\U0001b9fa\\U0001ba4f\\U0001ba02\\U000b415a\\U0001b9d4\\U0001babd\\U0001b9c6\\U0001b9d3\\U0001ba27\\U0001ba12\\U0001baa0\\U0001ba96\\U0001ba94\\U0001dae5\\U0001ba3c\\U0001bab7\\U0001ba8f\\U000f5bb1\\U0001baa7\\U0001ba5d\\U0001b9f2\\U0001ba92',\n        constraints={'intervals': IntervalSet(\n             build_intervals([113086, 1108320]),\n         ), 'min_size': 48, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1.2647358074034013e+141,\n        constraints={'min_value': -1.3455180659679709e+141,\n         'max_value': -1.571553050911723e+75,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.09437577746002e+140},\n        was_forced=False,\n        index=None)),\n      length=-5796,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 2, 2),\n                                     ('b', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00c6',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'c\\x1d\\x04\\x98d\\U000437cd+\u00ca\u00fc\\U000aa307\u00d9\\U00100af9\\U0006220e\u00cf\\u218eV\u00f3\\x86\\x02\u00f4\\U00064d03': 0.05,\n       'G\u00ca\u8d33\\U0006339d\u00f0(\u00bc': 18874,\n       '\u00e2&+g?\u00ac\u00ee\u00aaT\\U000ca1b5\u00f3': 0.5,\n       '\"': 4.747305082184467e+16,\n       '': 8.905594893314425e-277,\n       '\\x1b\u00c7Y\\x95\\U000ffedfu\u00c6$': 4.5052634085496264e+16,\n       '\\x88\u00ab\\U000e4ec9\\U0007921d\u00af\\x81\u00fa-l`sY~O': 4.806688483352675e+16,\n       '\u00f7': 28294,\n       '\\U0010f07d 2': 28234,\n       '0..0': -4921,\n       '\u00a2\\x7f': 2.4550074667244304e+174,\n       '\\U000f53abA\u00e3\\x93\ud863\udc8c\u00a9\u00c0\\U000cdd83': 0.009331629730654803,\n       '\\U0004de57\u00ed': 78,\n       '\\x83\\U000c331f\\U00035466\u00c5\\x0c\u00f0\u00c8\u00dc': -46,\n       '\\x83': 0.5,\n       '\u00b8;h\\x11X\\xa0\\xad\\U00067f69>\\U0009f16c': -6.527871343057226e+39,\n       '\u00f5\\U00037100\u00c6\\x8a\u00fe\\U0010002c\\U000c36e9': -5.615603813872777e+16,\n       '\u00c9\\x1b\u00a2\\x10\\x7f\u00ebX\u00a5\\U0004e206\\x05\\x17>\u00ff\u00eed\u00f6\\x9a\\x90\u00c7\u00a6\\U0001f7db\\U00108a12': -3_231_034_243_364_309_618,\n       '\u00f1\u00fc,': -6.677891487511975e+16,\n       '\\U000ebacd': 10774,\n       'H\\U000d59c6': 1.249352661067478e-172},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-5_841_332_460_066_809_562, -6456),\n       (-24694, -4954),\n       (1_480_695_555, -3916)},\n      slice_comments={(-29072, 20951): '\\x1esu\u00f6',\n       (87,\n        -61): '\u00a7\u00aa\u00f6\u00e7)\\U00105dc3#\\x12\\x8f\u00c1\\U0009ca57\u00ca\\U0001b883W\\x9ecS\\U000d2c0c\\U000d0c37\\x89\\x04\u00f3\u00f7+\\U0010bd84',\n       (-23010, -49): '',\n       (-26, 89): '\u00c4\u00d8\\U0010f84b\\U0006b98eu\\x0e\u00ab\u00faj\u00be\\U000b0359',\n       (9775, 25542): 'E',\n       (-21128, -56_219_271_788_944_114_666_477_624_021_505_222_368): '',\n       (-3076, 27675): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='verified')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0014573750086128712,
          "overall:gc": 0.0,
          "generate:args": 0.06357795995427296
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878966.278402
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-6579, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\u77ef\u0495\u04ad\u0449\u0458',\n        constraints={'intervals': IntervalSet(\n             build_intervals([1024, 59148, 260651, 389830]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0005a2cb\\U0005a360\\U0005a2d9\\U0005a346\\U000a2859\\U0005a303\\U0005a328\\U0005a365\\U0005a320\\U0005a3b4\\U0005a2f6\\U0005a37a\\U0005a324\\U0005a3af\\U0008de08\\U0005a305\\U0005a31c\\U0005a39d\\U0005a3c0\\U0005a3a6\\U0005a354\\U0005a384\\U0005a3b8',\n        constraints={'intervals': IntervalSet(\n             build_intervals([369348, 761836]),\n         ), 'min_size': 15, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u0451\u0406\u04d2\u04aa\u049b\u0423\u0438\\U000c1355\u04a0\u04bb\u04bd\\U00038a3f\u0472\u0444\\U00035170\u04ba\\U000cf11f\u0454\u04d1\u0483\u0438\u0438\u040f\\U000ce27a\u04a0\\U00039999',\n        constraints={'intervals': IntervalSet(\n             build_intervals([1024, 5819, 212114, 254492, 742384, 861058]),\n         ), 'min_size': 20, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-10852,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('', 0, 0, 'reason'),\n      expected_traceback='\u00b2 \u00fb`\u00c3\\x0b',\n      has_discards=False,\n      target_observations={'\\U00018e48\\x1d\\\\Z7': -5.522067269181169e+16,\n       '/': -21717},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-18442, 13893): 'S\\x93GKs\\t\u00c0\u00eb\\U000af5dc4',\n       (-1_487_144_854, -9_116_687_409_754_039_310): 'u'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-19984, context=(), group_elems=()),\n      nodes=(),\n      length=15,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\u00f5',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x96\\U00066722\\x82\u00ca\u00b3.H': -2_772_501_467_777_518_935,\n       '\\x1e': 4.492757287735434e+59,\n       'lr\\xa0a\\U0003e3b0xJ\\U000f4b8f': -4.157211680400464e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1429, -1_077_093_897),\n       (68, -30010),\n       (5_283_461_601_132_544_046, -75)},\n      slice_comments={(36, 91): '\ud650\\x9b\\u0b00J\u00cbf',\n       (404, 2_011_648_097): 'weights',\n       (-6164, 125): '\\x81b\\x93\u00ba\\U0001a9de'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00020616600522771478,
          "overall:gc": 0.0,
          "generate:args": 0.013147251098416746
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878967.331271
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.545800276100636e-05,
          "overall:gc": 0.0,
          "generate:args": 4.050001734867692e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878923.617054
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=8192, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b\"8\\xd4\\xce\\x99M\\x91\\xbc.Y&\\x9bN\\x9d\\xa1\\x01\\x13\\xb5\\xa3'x\\x81\\xab\\xd3j\\xa2\\x19\\xc0AK(/\\xef\\xec\\xb5\\x88\\x07\\xa3\\xb2)m\\x97`\\x852\\xf8\\x91\\xc3\\x02\\x8aU\\xc4\\xf7\\x9aEu\\xd7L\\x12lt-\\xa3\\xef\\x1c\\x98Q\\x96\\x1f,\\xcfw1\\xb0\\xd5Rt\\xf0h\\x93v\\xccW\\x86\\x81u\\x9c\\x9a\\x13\\xcar\\xe4cY\\xec\\xc6\\xcd\\xe2\",\n        constraints={'min_size': 30, 'max_size': 130},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=3,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-6,\n        constraints={'min_value': None,\n         'max_value': 8_800_840_601_985_665_104,\n         'shrink_towards': -16,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=67,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 709,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.03392620256571011},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=7.944407004774664e+307,\n        constraints={'min_value': -1.192092896e-07,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 7.944407004774664e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-4.112159744628946e+16,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.673811035216625e-82},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-3_675_326_810_183_748_906,\n        constraints={'min_value': -3_948_199_817_303_352_139,\n         'max_value': -24638,\n         'shrink_towards': 0,\n         'weights': {-3_675_326_810_183_748_906: 0.24515508244752826,\n          -3_948_199_817_303_351_985: 0.25484491755247174}},\n        was_forced=True,\n        index=None)),\n      length=-28995,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('c', 3, 2)),\n                                    (('b', 2, 3), ('c', 2, 1)),\n                                    (('c', 0, 1), ('c', 0, 2)),\n                                    (('c', 1, 0), ('b', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\U000d1eca\\x13\\U0007d75bh~\ud802\ude9f\u00bf\u00e4\u00d1\u00ce',\n                     [ExceptionGroup('\\x1b',\n                                     [ExceptionGroup('',\n                                                     [UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')]),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         'I',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('\\x9cd\u00bd',\n                                                     [ExceptionGroup('\\U000c0dd3m\u00c3D',\n                                                                     [ExceptionGroup('{',\n                                                                                     [UnicodeTranslateError(')\\x99\\x98-\\x04\\xad',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      ExceptionGroup('\u00f8K\\U000c157e',\n                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         '\ud85f\udd7a\u00bc\\x95#\u00e6\u00bf\\U00043777',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeTranslateError('B\u00f6\\x08\u00eb>Vz\\x04\u00fa\u00f5\u00be+\\t\\x02\\x03',\n                                                                                                                            0,\n                                                                                                                            0,\n                                                                                                                            'reason'),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         '\u00b2L\\x00Q\u00dd\\U0003f0a3\\x1d\u00c9\\x92\\U00013d57\u00d7\\U000406d9B\u00fc\u00fd:',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason')]),\n                                                                                      ExceptionGroup('\\x8a\u00da\\U000411fb\\x1b\u00ef',\n                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                         '\\x88\\x04',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeTranslateError('!\\U000b52ac\\x87\\U000aa455\u00c1\\x10\\U0009f124\\x8e\\U00081c31\\U000aeab2\\x14\\x08C\\x07\u00ee\\x94\\x9e\u00e0\u00d6 \\U000bc7cb\u00de\u00e3W\\x94\\U000ece3f',\n                                                                                                                            0,\n                                                                                                                            0,\n                                                                                                                            'reason'),\n                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      ExceptionGroup('\u00ea\\x0c\\x9f\\U00045dc2',\n                                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                                         '',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason')]),\n                                                                                                      UnicodeTranslateError('\\x9c1\u00f4Pc',\n                                                                                                                            0,\n                                                                                                                            0,\n                                                                                                                            'reason')]),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason')]),\n                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                         '\\U000cd054\\\\V\\x85F\u00c8\\U000b43f6',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                         '',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeTranslateError('\\U000cf959\u00e9',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason')]),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeTranslateError('\u00feY\\x8c\u00ea<\\x8e\u00ff\\U000ddab0P\u00cc\u00f1}\u00ed\\U00098842\\t\\U000f9458G\u00ce\u00d9\\x96\u00cc\\x19K\u00e3\u00cd\\x96\u00a6',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeTranslateError('',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '\\x18\\x1e\u00cd',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')]),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\\x08\u00b6',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      ExceptionGroup('',\n                                     [ExceptionGroup('\u00b5l\\x0bq\\U000acb76+\u00b0\\U0005912e\\U0006d43e\\\\\\x11\u00f5\\U00083ab0v\\U000354ad\\x91\\x86\ud86d\udc5b\u00c5\u00ff\u00dc\u00bd&\u00d2',\n                                                     [ExceptionGroup(\"\u00cf\u00e90UF\\x03\\x99\u00d6'A\u00f7\\x17\",\n                                                                     [UnicodeTranslateError('\\U00052752\\x8d',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason')]),\n                                                      UnicodeTranslateError('4\u00bd',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '_store',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeTranslateError('\u00e1\\x8d\\x0b',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      ExceptionGroup('\\x10\\x86\\U0009f9d7\u00ece',\n                                                                     [ExceptionGroup('y\\x98',\n                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                         '\u00cdpq',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason')]),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')])])])]),\n      expected_traceback='\\x92\\x85\u00ce\u00cd\\x1e\u00d6',\n      has_discards=True,\n      target_observations={'p\\U000aa738': -28744,\n       '\\\\3\\x1f\\r\\U000ddaaf\\x1d\u00da[n\\x0f': 1_839_082_454_375_259_356_324_961_884_083_742_580,\n       '\\U0008f0f3\"\\x9b\\x12\u00fb\\x82!\u00e7jA': -4.857478274220782e-135},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-752417353, -4),\n       (-25476, -2372),\n       (-15796, -89),\n       (-13951, -8476),\n       (-61, 19717),\n       (-44, -4_677_681_024_302_258_874),\n       (-37, -10285),\n       (-25, 1_383_725_599),\n       (11, 68),\n       (28, -12342),\n       (111, -22923),\n       (116, 225_175_797_857_265_197),\n       (1024, 7265),\n       (2205, -8_575_670_149_570_885_985),\n       (7144, -5714),\n       (12332, 11858),\n       (16297, 24975),\n       (21837, 1),\n       (1_653_287_238, 300)},\n      slice_comments={(-63_162_357_227_104_737_518_776_145_782_854_663_480,\n        88): '\\x12\\x97\\xad\\U00045dcb\u00ef\\U0010d6ae\\x8d\u00aeE',\n       (-1158, 49): '\\U000d32b5\u00ca',\n       (-106, 45): ';\u00f1\\x14\u00af',\n       (51, -1_416_283_707): '\u00be\\U000cd187\"',\n       (30197, -6000): '^\\U00103be0',\n       (-12034, 870645715): '\u00d6\u00b4\u00e1\\x04\u00af\ud881\ude4a\\U00050769c~\u00c9'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00044720800360664725,
          "overall:gc": 0.0,
          "generate:args": 0.018610247876495123
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878947.552063
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-7054, context=(), group_elems=()),\n      nodes=(),\n      length=-109,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\ud83c\udf30\u00f6\\x04',\n                     [UnicodeTranslateError('a\\U001070b8%\\U0005a3ed\u00af\u00cc',\n                                            0,\n                                            0,\n                                            'reason')]),\n      expected_traceback='',\n      has_discards=False,\n      target_observations={'\\U001092db\\U0005b76a\\x897\u00d3\u00a1': 4.895404873895661e-85,\n       '\\x83\\U0008605ah\u00de.\u00cd|\\x86y\u00c7': 2.5975485095440276e+16,\n       'nil': 0.0},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-328722047, -84),\n       (36, 62),\n       (100, 22883),\n       (9999, 18955),\n       (15578, 6497),\n       (21469, 14577),\n       (7_752_884_780_056_538_891, 92),\n       (14_662_436_428_500_435_949_557_326_376_543_098_273, 10200)},\n      slice_comments={(-115, 21276): '7Z',\n       (23423, -5): '\ud880\ude97@W_\u00eb',\n       (8192, -68): '\u00bb\u00c1\\x11L\\x9a'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.001013208006042987,
          "overall:gc": 0.0,
          "generate:args": 0.0044831690029241145
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878963.7230039
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-1717, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U0004f2ce\\U0009515e\\U0004f2cc',\n        constraints={'intervals': IntervalSet(\n             build_intervals([324189, 634316, 800282]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000accb5\\x05\\x87\u00f6\u00c4\u00e5\\x06Ii\u00edz',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  55848,\n                  247808,\n                  355525,\n                  423835,\n                  451414,\n                  484461,\n                  843647,\n                  865886,\n                  1082750],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00082e0d\u00df\u00dc',\n        constraints={'intervals': IntervalSet(\n             build_intervals([0, 65535, 195839, 745926, 769154]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0003493f',\n        constraints={'intervals': IntervalSet(\n             build_intervals([215345, 406404, 482739, 538670, 632087]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=7.218631580067988e+306,\n        constraints={'min_value': 3.736759660637287e+31,\n         'max_value': 3.244043297155217e+307,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.5},\n        was_forced=True,\n        index=None)),\n      length=16372,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('c', 0, 0)),\n                                    (('c', 0, 0), ('c', 3, 1)),\n                                    (('c', 3, 2), ('c', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00ff\u00e6\u00b3\\U000346fe>\\U000cc967',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\\U000bef3b\\U000d1bf4\u00da\\x7f\ud85d\udf04\"\u00d0\\U000d7debL\\U00074e63\u00fd': 69,\n       '\\U000de21d': -19080,\n       '': -6_233_766_695_523_823_613,\n       '\\U000f1791\\x8d\\x89\u00e3\\x7f\\U000bc9e5\\U0003f707\\U00093d16\u00f7': 1.1722810957703138e-288,\n       '\\x11\\x12c\u00f9\\U000754d3H\u00c7': -27020,\n       '\\U001024b1\\U000ef73d\\U000f9343\\x9e\\U000fd7fc\\x1c\u00ea\u00a2': 5.677770399828435e+16,\n       's': 13,\n       'S\u00b8P': -5.987820156000513e+16,\n       '\u00e0\u00cd': -3715,\n       '\u00e7': -21575,\n       'h\\x0b\\x1b3\\\\\\x80': -7_658_819_020_429_237_639,\n       '\\U000d2c4b\\U00087856\\x1e\u00f7Q\u00e0\u00e6\\U0010e901\\x92\\x17': -19383,\n       '\\U000f9da7\\U00099e01E\u00af\\x1a\u00aa\\x0f\\x0f': -6.103515625e-05},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0012146250228397548,
          "overall:gc": 0.0,
          "generate:args": 0.019169457023963332
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878960.341316
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=4641, context=(), group_elems=()),\n      nodes=(),\n      length=-27125,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('a', 0, 0)),\n                                    (('b', 2, 2), ('b', 1, 1)),\n                                    (('b', 3, 2), ('a', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00be\u00b4\u00fd',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\u00b3\u00c2\u00ae\\x88\\U0009a87e\\U000fec5c\u00e2\\rF\\U000ff022\u00fa\u00f6\\x8b\u00e8-=\ud863\udc05\\x87\u0f89\\U000b17fa\\x0c\u00d9\\U00037ca8\u9e9e\\x8c\\U0009a808\\U000ccf3d\u00dd\u00c3',\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_233_006_863,\n        136_330_646_650_436_029_314_190_394_908_839_300_524),\n       (-27252, -33),\n       (-11270, 21098),\n       (-9200, -10704),\n       (-9077, -31890),\n       (-2246, -7441),\n       (-99, -1_391_350_043),\n       (-48, 30225),\n       (-42, 94),\n       (1000, -155114870),\n       (1122, 87),\n       (12517, 41),\n       (12834, -38_051_963_369_153_920_098_467_172_446_437_158_804),\n       (18313, 14336),\n       (22860, -15551),\n       (26993, -17462),\n       (1_675_064_658, 1844)},\n      slice_comments={(22168, -15403): '\\x7fr',\n       (14010, 30411): '\u00d2\\U000a7e65p\u00d6\u00f06',\n       (-121, -15405): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=15, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.889282158872075},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 0},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=2463,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=13204,\n        constraints={'min_value': 2036,\n         'max_value': 23473,\n         'shrink_towards': -91,\n         'weights': {18907: 0.007904021631378409,\n          8316: 0.009592356468704098,\n          19380: 0.0036600336184355983,\n          3229: 0.008042961219507976,\n          23473: 0.007792614109041031,\n          5876: 0.005940126730093323,\n          21691: 0.009201602475303708,\n          15327: 0.005940126730093323,\n          5348: 0.006438058058306451,\n          3727: 0.00741925096325203,\n          2977: 0.0006576836694190708,\n          16864: 0.009015575781794608,\n          9202: 0.010593860061911693,\n          11268: 0.0069049360110716475,\n          11547: 0.0005940126730093324,\n          3063: 0.0003464669869992519,\n          3325: 0.0016848462221837068,\n          22966: 0.0005940126730093324,\n          23420: 0.009900694448354336,\n          14844: 0.002627225450763663,\n          9698: 0.005940126730093323,\n          20233: 0.0020905780823515323,\n          16579: 0.005311065245456974,\n          20635: 0.0015846860739131892,\n          11738: 0.01127476761445983,\n          8494: 0.0020236429123530026,\n          8192: 0.0099501352960492,\n          17664: 0.0027085324779417526}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 5.2464453065255606e-31},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.00820138074857968},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xb3\\xe7C',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0007d636\\U0007d69b\\U0007d67b\\U0007d658',\n        constraints={'intervals': IntervalSet(\n             build_intervals([513539, 533264]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000720de\\U000720a0\\U00072023\\U00072026\\U000aedd1\\U0007210b\\U00072094\\U00072049\\U00072024\\U0007206d\\U00072055\\U00072086\\U000720b0\\U00072025\\U0007207a\\U0007204b\\U000ae4f9\\U0007208f\\U000720ac\\U000720db\\U000720ae\\U0007204a\\U0007210d\\U00072114\\U000720d3\\U0007205f\\U00072101\\U000720ba\\U000720a6\\U00072102\\U000720b5\\U00072071\\U0007207b\\U000720af\\U00072025\\U000720c7\\U00072112\\U000720b4\\U00072068\\U000720fb\\U0009ad62\\U000d5284\\U000720ff\\U0007202f\\U00072098\\U000720d4\\U00072075\\U00072090\\U000b8d31\\U00072119\\U0007205c\\U00072056\\U000720d7\\U00072061\\U0007211c\\U000d22be\\U000ace99\\U00072050\\U000720f4\\U0007205a\\U0007207e\\U000720d9\\U000720c8\\U00072068\\U0007209d\\U000720e9\\U00072078\\U0007205a\\U00072029\\U00072078\\U0007209f\\U00072076\\U000720af\\U0007210d\\U0009d457\\U000d96c8\\U000eb673\\U00072030\\U00072069\\U000720b5\\U000720e8\\U00072026\\U000945db\\U00072084\\U00072058\\U000720e0\\U00072103\\U000a9deb\\U000eb850\\U00072094\\U000720ff\\U0007204c',\n        constraints={'intervals': IntervalSet(\n             build_intervals([466979, 619458, 631637, 981684]),\n         ), 'min_size': 28, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-3729,\n        constraints={'min_value': None,\n         'max_value': 8858,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-9007199254740992.0,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.5},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00046898\\U0004688b\\U0004696a\\U000a1551\\U000468b6\\U000468ca\\U0004691d\\U000468df\\U00063875\\U00046886\\U000468ea\\U000a877d\\U000468b5\\U000473e9\\U000468cc\\U00046949\\U00046920\\U00046921\\U0004692e',\n        constraints={'intervals': IntervalSet(\n             build_intervals([288883, 731191]),\n         ), 'min_size': 17, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=19840,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('c', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('fail',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         'V\\U000b6128\\x81',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('\\U000c6af2M',\n                                     [ExceptionGroup('\u00e8\\U0006b5ea\\x9d\\x00m\u00b5\u00c8\\U000af22d,ef\\x8b\\U0010af94',\n                                                     [UnicodeTranslateError('`\u00b8#C\\U00104c8e\u5237Z\\U000f86d1\\x82\\x9b',\n                                                                            0,\n                                                                            0,\n                                                                            'reason')]),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      UnicodeTranslateError('\\x93', 0, 0, 'reason')]),\n      expected_traceback='V\\U0008c1b8=D\\U000e9968\\x14w\\x03\u00a6\u00eb\u00dc\u00cd\\U0008418e',\n      has_discards=False,\n      target_observations={'': 1.4368287718867997e-151,\n       '\u023e': -2.5416041414982492e+16,\n       '\u00e5Q\u00b8': 2.225073858507203e-309,\n       '\u00b6\\x88\u00fe\\U000191f26\u00f8': 28349,\n       '\u00e14WyJ\\x9f': -1.0285067927902084e+169,\n       '\u1e70\u033a\u033a\u0315o\u035e \u0337i\u0332\u032c\u0347\u032a\u0359n\u031d\u0317\u0355v\u031f\u031c\u0318\u0326\u035fo\u0336\u0319\u0330\u0320k\u00e8\u035a\u032e\u033a\u032a\u0339\u0331\u0324 \u0316t\u031d\u0355\u0333\u0323\u033b\u032a\u035eh\u033c\u0353\u0332\u0326\u0333\u0318\u0332e\u0347\u0323\u0330\u0326\u032c\u034e \u0322\u033c\u033b\u0331\u0318h\u035a\u034e\u0359\u031c\u0323\u0332\u0345i\u0326\u0332\u0323\u0330\u0324v\u033b\u034de\u033a\u032d\u0333\u032a\u0330-m\u0322i\u0345n\u0316\u033a\u031e\u0332\u032f\u0330d\u0335\u033c\u031f\u0359\u0329\u033c\u0318\u0333 \u031e\u0325\u0331\u0333\u032dr\u031b\u0317\u0318e\u0359p\u0360r\u033c\u031e\u033b\u032d\u0317e\u033a\u0320\u0323\u035fs\u0318\u0347\u0333\u034d\u031d\u0349e\u0349\u0325\u032f\u031e\u0332\u035a\u032c\u035c\u01f9\u032c\u034e\u034e\u031f\u0316\u0347\u0324t\u034d\u032c\u0324\u0353\u033c\u032d\u0358\u0345i\u032a\u0331n\u0360g\u0334\u0349 \u034f\u0349\u0345c\u032c\u031fh\u0361a\u032b\u033b\u032f\u0358o\u032b\u031f\u0316\u034d\u0319\u031d\u0349s\u0317\u0326\u0332.\u0328\u0339\u0348\u0323': 122_914_365_943_108_373_487_000_305_255_180_791_732,\n       '}\\U000950e0': -6_762_861_215_992_870_820,\n       'f1\\U0003ffc8\\U000ba9ed': -121},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-28278, 7),\n       (1000, 34_947_501_358_037_691_544_107_162_452_446_923_655),\n       (29065, -25728)},\n      slice_comments={(-534, -625): 's\u00c2pC\\U000cbdf3t\\x85\\x0fZ\u00a6\\U00083efa\\x11',\n       (-14762, -126): '\\x907\u00d1\\x86\\U000b38f2\\x8e\u00f3',\n       (29492, -196905845): 'undefined',\n       (-16362, 512): '\u42bb\ud840\udf12V\u00c4\u00fb\\x81\\x83\u00a9\\x12\\x16\\x1e',\n       (14337, 512): '\u00e6F\u00e1',\n       (26968, -11401): '',\n       (-24226, -14493): '\\U000b0fd9',\n       (-123, -29): '\u00df\\U000da5ea',\n       (47, 1_756_823_210): 'C',\n       (427273227, -24857): '\u00ed\\x01e%\\U000823ccqN',\n       (-17998,\n        18_180_654_082_125_115_506_684_577_378_067_565_847): '\u00ffa\\U000826dat\\U0006ffe8\\U0001b48a>\\U000b1145\\x06\\U000ead14\u00a9\u00e8\\U00087f8bu\u00c9\\U00101cc0\\x1e\u00ce\\U000cc32b0\u00da\u00c5\\x18',\n       (1024, -28607): '&\u00d2',\n       (92, -2848): 'boolean',\n       (62, -2_132_209_372_083_124_420): '',\n       (94, 27958): '(;\u00c8\\x99\\x16',\n       (92, -26506): 'nodeid',\n       (-5305, -39): '\\U0001beaf',\n       (-4433, -23): '',\n       (45, 0): '\\x00',\n       (-3931, -1_582_713_210_344_445_073): 'ST\\U000e1231',\n       (-96, 30314): '\\U00015aa4 ',\n       (-27691, -17730): '\u00b8\u00b5\u00c5\u00c5\u00ea',\n       (12,\n        -26885): '\u00bfh\u00f5\u00d2\\x041K\u00e9$\\U000f8cecc\u00ab>:\u00fa\\U000e1519\\x8d\\x8bF\\U000ebf7b\\n\\x86',\n       (-531060642, 28): 'settings',\n       (1024, -6471): '=\\U00057c691\\x13',\n       (661478872, -5_039_084_515_909_848_725): '\u00a7\u00dc\"\\x92Y\\x97',\n       (300, 404): 't'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=666040545, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=4345,\n        constraints={'min_value': None,\n         'max_value': 23665,\n         'shrink_towards': -21177,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 5.679554219445601e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.5599383486495432e+154},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.225073858507203e-309},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'hQR`\\nGa$\\xd8(bL\\x01\\xfa\\xe9b\\x19\\xb0\\xe9\\x07\\xe70\\xca\\x9a',\n        constraints={'min_size': 10, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8531965018528864},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=75,\n        constraints={'min_value': 67,\n         'max_value': None,\n         'shrink_towards': -27647,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'7',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x7f\\xc3?\\x14\\x9a\\xfb\\x85',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-2.2895438691615928e+151,\n        constraints={'min_value': -2.539954616326795e+151,\n         'max_value': -1.617657863271173e-90,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.2895438691615928e+151},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u0443\u0432',\n        constraints={'intervals': IntervalSet(\n             build_intervals([1024, 302583, 604162, 792467, 798561, 900080]),\n         ), 'min_size': 0, 'max_size': 2},\n        was_forced=False,\n        index=None)),\n      length=54,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 2, 2),\n                                     ('a', 3, 1)),\n                                    (('c', 2, 3), ('a', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\u00a6\u00af\u00fb',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '!',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('\\x1f\u00e4U', 0, 0, 'reason'),\n                      ExceptionGroup(' \\U000155e5\\x9b\\U000c18a4',\n                                     [UnicodeTranslateError('\u00df\\x85\u00a3\\U000f5548\\U000a79c5[&\\x0f\\\\',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\ud83d\udfb2Z\\r\\U000f2bb5~\\x84g\\x84]\\x05&',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('\\x95qE',\n                                                     [UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeTranslateError('!',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      ExceptionGroup('\u00e8\u00a7\u00ed\\U000cb2bff\\U000e99b6\\x16\\x8f\u00ab',\n                                                                     [ExceptionGroup('',\n                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeTranslateError('\\U000956c6\\U000fba1a\\U0003d766\\x96\\U000cecba\\x083\\U0003ba76eo\u00bd',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                         '',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason')])]),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '.\u00ee\u00d3\u2308\\x1c\\x8b\\x14htHW',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         'null',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')])])]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'h\\x0f\\U000db07c\u00a7\u00cb%': -5.899808920755656e-215,\n       'NIL': -20501},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-3551, 92), (-631, 87), (-75, 6707)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=764143167, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-17892,\n        constraints={'min_value': None,\n         'max_value': 404,\n         'shrink_towards': -4986,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-nan,\n        constraints={'min_value': 4.729241763909429e+16,\n         'max_value': 1.3463186085404061e+308,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.1184414918032765e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=5_266_986_814_136_072_076,\n        constraints={'min_value': 7808,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=32124,\n        constraints={'min_value': 19784,\n         'max_value': 33458,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xd1\\xbek\\xfd6\\xa0\\xd8c.\\x06,\\xd3\\xda\\xc4\\t\\x7f\\x7f\\xd9\\x86AW\\x7f\\x1d\\x85\\x1f>W54\\xcf\\xc9\\xef\\xff\\\\\\xb8q7\\xc5?\\\\\\xc0\\x9c',\n        constraints={'min_size': 38, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=-79_357_744_774_416_593_432_553_740_549_853_905_536,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('c', 1, 1)),\n                                    (('a', 2, 0), ('c', 1, 1)),\n                                    (('a', 2, 3), ('b', 2, 1)),\n                                    (('a', 2, 3), ('b', 3, 3)),\n                                    (('b', 1, 0), ('c', 2, 1)),\n                                    (('c', 0, 3), ('a', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='',\n      has_discards=False,\n      target_observations={'\\x88': -15836,\n       '': -inf,\n       '\\U00087d2f\u00b3\u00ed\ud85f\udca9\u00a2t\u00cd\u00a4\\x12\u00c8': 22835,\n       'g]\u00e6': -1.5943528517664093e-231},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-31432, 512),\n       (-20839, -75),\n       (-657, 6119),\n       (1590, 2_058_340_022),\n       (9797, 404),\n       (14903, -32281),\n       (18626, -34)},\n      slice_comments={(65, 9999): 'eW\u00b0\u00aa', (-14230, -31585): '\u00d7\u00d5\\U000b01ff\u00bf\u00d0'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.001397959014866501,
          "overall:gc": 0.0,
          "generate:args": 0.06664216588251293
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878959.1898339
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-38, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1.8398887422400493e-227},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=39549,\n        constraints={'min_value': 31010,\n         'max_value': 53219,\n         'shrink_towards': 12564,\n         'weights': {49621: 0.0076556782509356065,\n          31170: 0.019109033350817258,\n          45338: 0.013723074914810156,\n          51969: 0.01479575095464034,\n          46210: 0.019473837019074434,\n          40436: 0.01460296422836781,\n          46850: 0.004026725746148578,\n          52090: 0.010480641608668535}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.24987697566583617},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=42781,\n        constraints={'min_value': 7172,\n         'max_value': 136_539_604_160_527_922_719_269_453_068_411_325_862,\n         'shrink_towards': 0,\n         'weights': {1_616_680_031_383_637_332: 0.0754357011933899,\n          62316: 0.049802660491637056,\n          7407: 0.08871667731356056,\n          66227: 0.0019060000123363552,\n          12_894_494_264_428_494_660: 0.09610647989847541,\n          9_600_210_558_426_880_973_017_440_899_481_133_899: 0.03962275793864703,\n          43023: 0.0842888678249379,\n          18265: 0.10919523462445956,\n          7268: 0.09144317378573105,\n          7380: 0.08272826644428637,\n          39978: 0.10199736899847074}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.987308025654474},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'.hypofuzz.failures',\n        constraints={'min_size': 16, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 5e-324},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=3179,\n        constraints={'min_value': -25749,\n         'max_value': None,\n         'shrink_towards': 18169,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0004c0da\\U000149a2\\U00014970\\U0001494b\\U0001496f\\U00014937\\U00014940\\U000148f3\\U0001493c\\U00014965\\U000149a1',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [84174,\n                  101656,\n                  150781,\n                  235573,\n                  277214,\n                  383529,\n                  519618,\n                  577558,\n                  870410,\n                  949503],\n             ),\n         ),\n         'min_size': 6,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-5245,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('b', 2, 2)),\n                                    (('a', 1, 0), ('c', 1, 1)),\n                                    (('a', 1, 0), ('c', 2, 2)),\n                                    (('a', 1, 1), ('a', 1, 2)),\n                                    (('a', 1, 2), ('a', 3, 2)),\n                                    (('a', 1, 2), ('b', 3, 1)),\n                                    (('b', 0, 0), ('a', 2, 0)),\n                                    (('b', 1, 1), ('a', 3, 1)),\n                                    (('b', 1, 3), ('b', 0, 3)),\n                                    (('b', 2, 2), ('a', 2, 3)),\n                                    (('b', 3, 1), ('a', 0, 2)),\n                                    (('b', 3, 3), ('c', 2, 0)),\n                                    (('c', 0, 2), ('b', 1, 0)),\n                                    (('c', 2, 0), ('b', 3, 0)),\n                                    (('c', 3, 3), ('c', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00bb\\U00090908k\u00e5\u00ed\\x12\u00db\\U000f3a2eaxE',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback='string',\n      has_discards=True,\n      target_observations={'T\\U00036ac1H': 127,\n       '\\x0f\u00bf\u00d2\\U000e27b5': -4.40654918193606e-27,\n       '': -6,\n       'z\\x9d\u00d3': 8_036_965_695_720_342_450},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-23457, 19548),\n       (-20876, 9),\n       (-9, 7604),\n       (40, -5770),\n       (50, 24),\n       (2241, -655306778),\n       (8339, -669353688),\n       (18009, -9599),\n       (25328, -1792),\n       (28329, 1137),\n       (191937240, 32716)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=6198, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.23520204412240103},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-21877,\n        constraints={'min_value': None,\n         'max_value': 13332,\n         'shrink_towards': 59,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([256155, 834369]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1.1309126480189725e+116,\n        constraints={'min_value': -inf,\n         'max_value': 5.002920769177356e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.1125369292536007e-308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u6673\u66c9\u6700\\U00091da1\u662b\u66af\u6680\u66a1\\U0001fc3a\u666e\u6670\u6622\u6622\u66e0\u668c\\U000fefb2',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [26136,\n                  246723,\n                  553630,\n                  621983,\n                  773208,\n                  852239,\n                  993968,\n                  1055307,\n                  1114110],\n             ),\n         ),\n         'min_size': 14,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u019b',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [300,\n                  216051,\n                  288871,\n                  365231,\n                  472164,\n                  586697,\n                  629735,\n                  656360,\n                  678345,\n                  715557,\n                  823201,\n                  889022,\n                  912470,\n                  923273,\n                  1043015,\n                  1049938,\n                  1090630],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-19118,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 3, 2),\n                                     ('a', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\u00f3',\n      has_discards=True,\n      target_observations={'\\x92\\U000f507e': 12461,\n       '\u00df\\x1a': -15641,\n       '': 1756,\n       'Y6': 92,\n       ',': -9.851332961134297e+173,\n       '\u00fe\u00f4X\u00fc\\x95': -373382159,\n       '\\x01R\u00ca\u00cb\u00db\u00ee': 1.1125369292536007e-308},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-15433, 16019),\n       (-6645, -14),\n       (7865, 41),\n       (23960, -13537),\n       (1_199_553_513, -633867974)},\n      slice_comments={(-75, -19): 'h\u00b8\\x88d]]\\xad\\x8d\u99e9',\n       (65535, 127): '\\x8b\u00a2\\\\\\U0010778b\u00dc\\U000bcfd8',\n       (-2, -2454): '\\x0b\\U000cf2e4l',\n       (-21214,\n        -71_832_359_006_145_740_574_958_382_560_165_035_655): '~W\\U000b307c\\x01'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-50, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'e\\xb9h><%(e\\x06\\xa0w\\x08\\x82TO\\xe3Y\\x17\\xf6pT\\xae\\x1a\\x80\\x00N\\xedb\\x13\\xb1\\xe2!\\xd6\\x86okmr\\x89\\x12\\x94\\xc4\\xea\\xa8lS\\x8c\\x02z\\xe8\\xf6Yl\\x01#a\\x13\\xe5N{\\xf0\\xf6\\xf55VM\\xf5\\xdb',\n        constraints={'min_size': 40, 'max_size': 140},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.1401500935317156e+16,\n        constraints={'min_value': -1.1125369292536007e-308,\n         'max_value': 2.863566815451552e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 9409699950170228.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'hypofuzz.test_keys',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xd6\\xb5y\\xb4S9\\x0bK\\x17\\xe0',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xd4T\\xedk/',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 8.81894200233863e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8028711464409142},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-6_005_950_465_593_695_595,\n        constraints={'min_value': None,\n         'max_value': -6_005_950_465_593_695_482,\n         'shrink_towards': 31287,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00107663\u01af\u01f6\u0264\u023a\u0219\u01aa\u0202\u0201\u022a\u01ad\u0195\\U0009de40\u01db\u01bc\u0204\\U000907a9\u025c\u0202\u01d9\u027c\u020a\u0264\u021b\u024e\u01e7\\U00013c5e\\U00075764\u01ad\u0194\\U0008504e\u01ba\u01c0\u01cf\u0234\u0255\\U000f5e80\u0272\u0236\\U0009d8f8\u01fd\u01cc\\U000f63dd\u0216\u01fe\\U00075cf3\u01b5\u0235\u0282',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [404,\n                  6339,\n                  65535,\n                  83939,\n                  442693,\n                  653829,\n                  831232,\n                  889034,\n                  966589,\n                  1114110],\n             ),\n         ),\n         'min_size': 14,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7770608494820876e+308,\n        constraints={'min_value': 1.175494351e-38,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.3429488909454882e+308},\n        was_forced=False,\n        index=None)),\n      length=92,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='X\\U0009b165',\n      has_discards=True,\n      target_observations={'': 5.525204774762349e+16,\n       '\u00ba\\U000b8f68\u00b2IN>\ud801\uded3\\x9f\u00ae\u00b0\\\\g\u00bf': inf},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-13021, 48): '\u092e\u0928\u0940\u0937 \u0645\u0646\u0634'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=25491, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=18010,\n        constraints={'min_value': 17979,\n         'max_value': 18012,\n         'shrink_towards': -22308,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.6466824054538663},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 4.538845309816276e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.645774703705102e+196},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=79,\n        constraints={'min_value': None,\n         'max_value': 10656,\n         'shrink_towards': 21928,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"9zYl\\x98t\\xde'-\\xe7\\x02\\x0b$\\xa7\",\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.2535838064562262},\n        was_forced=True,\n        index=None)),\n      length=2605,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 1),\n                                     ('a', 1, 2)),\n                                    (('c', 1, 3), ('a', 1, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\U0004d568\\U0010246c',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback='',\n      has_discards=False,\n      target_observations={'\\x1b\\U0004c2908': -6.4310993029335256e+16,\n       'A': 5763,\n       '': 5.095211793109165e+16,\n       '\\U00033cffP\\U0009196b': 1.0792801311103394e+16,\n       '\u00aas\u00d0\\U0003d541\\U000f6ef0}XMp': 1.491693723779799e-157,\n       '\u00a2#\u3de8': -69,\n       '\\U000b7ba5Q$': -14841,\n       '\\U000c90e7\u00e8k\\x86': 1.7493020617321617e+155,\n       'l\\U000d351a\u00dc\\x90\ud851\ude68': 31842,\n       '\u00bc\u00eb\\U00062fc6@': 2.225073858507e-311,\n       'qn\u00c1': -24719,\n       '\\x80\\U000a4e5d\u00c2\u00e1': 27325,\n       'H.': 1.7750926385838214e-12,\n       '\\U000139c0\\U000c9d4bW\\x80': -26,\n       '\u00f7': -16748,\n       '\u00b9\\x9f\\x8b\\U000e7016\u00b1w': 1000,\n       '\\x9d': -87,\n       '\\U000c7ed4\\x85\u00c6\\U00050d00\\U000f111e': -3.019477751946163e+16,\n       'i\u00ce\\x96\ud882\udd2e7': 69,\n       '\u0287\u01dd\u026f\u0250 \u0287\u1d09s \u0279olop \u026fnsd\u1d09 \u026f\u01dd\u0279o\u02e5': 1.7901294958530636e+16,\n       \"\u00d9'\\x8fW\u00ee\": -546558183,\n       '4\\U00107af4\ud878\udca7\u00e4': -1338,\n       '.N\\U000cac11\\x1d\\x034\\U000a0f69]\\U0006e00e\\r': 23,\n       '\\x9b\\x16\\U000b2ad8\u00f0': 0.0,\n       '\\x1a': 25892,\n       '\\x05L\u00cdn\u00c9m\u00dd-\\x81\u00af7': 2.283131938721403e-150,\n       'L\u00dd\\U0009c37b': -70_901_809_944_053_205_423_464_639_585_188_313_219,\n       '\u00a3\u00ea\\U00050553': 15010,\n       '\u00a2k\u00b5\\x98\\U000fa2a5\\U000ebde4\\U0010792e': 1.679450560324094e+265,\n       'EL\u00f2': -35,\n       '\\x99\\x0fn\\U00036af6\u00fa\u00ed\\U000e7a3e\\U0001a0700\u00d9\\x100\\U0007c2b9\\U0006049a\\U000d8b0a\\U000abd8aj\u00efX\ud84d\udc43': 2.8097068905431524e+16,\n       's': 7.0508136286582264e+16,\n       '6(': 34,\n       '\u00fe': -6.05845253223071e-238,\n       'B\u00cc\u00bb\ud84d\udceb]9\\U000d6e66>\u00aa\\U0004ab2e\\U0008f21a\ud84c\udc8f\u00a2f\\x89\u00eb!': -31959,\n       '\\x11\u00eb\u00fd$\u00ea\\U000dfbc3U': -4.953036115060282e+16,\n       '\\x83]': 18028,\n       'J': -51371384.25289737},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-7305, -1_671_634_345),\n       (-2155, -58),\n       (301, 16),\n       (512, 29301),\n       (747460091, 123)},\n      slice_comments={(-21735, -21067): '\\U000bd5d2'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=13249, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.053841287691637},\n        was_forced=False,\n        index=None),),\n      length=75,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('a', 1, 1)),\n                                    (('a', 0, 2), ('c', 1, 0)),\n                                    (('a', 2, 3), ('a', 0, 2)),\n                                    (('b', 3, 1), ('b', 0, 0)),\n                                    (('c', 0, 0), ('a', 3, 0)),\n                                    (('c', 1, 0), ('b', 1, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         'w\u00e4\u00ef\\x95k\\rPm\\x1b\\U000baece\u00da\\x9f\u00a1\\x05l9',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x83n\\U000b788c\u00f8': 1000},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-8104, -29534), (2_128_918_006, 6289)},\n      slice_comments={(-100, -1_273_233_275_384_165_181): '\\x82\\x04',\n       (-4_657_225_727_674_388_408, -31277): '\\xa0\u9482\\ra',\n       (14789, 17): '\\U000ff87bS\\x0b\u00f3\u00d9',\n       (3_868_610_900_901_581_333,\n        -6_367_331_591_798_201_789): '\\x10\\x7f4\u00b5\\x08\\x98\u00c1\u00b5\\x00\u00b9',\n       (31448, 5851): 'P8',\n       (20, 23038): '',\n       (-23384, -27016): '\u00f9\\x80\\U000af029\\x87\\x15',\n       (-9, -60): 'X',\n       (28003, -5_741_238_040_624_114_625): '\\\\',\n       (21556, -7_916_772_670_040_699_551): '\\U000f49d4a\\x9c\\x81\\x0c',\n       (22614, 7801): '',\n       (-29743, 32056): '`\\U000d9daaB\u00b7',\n       (-30956, -52): 'w\u00dd\\U000e8d66',\n       (-11301, -13869): '$\u00e6\u00bcmH\u00f6\\x9e\u00b4+\\U0004ae8a\\U000dfec2J\\x9c\ud843\ude1e!',\n       (-6, -30309): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-107, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=inf,\n        constraints={'min_value': 1.7976931348623157e+308,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 3.7967929682292904e+209},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.4531596528398206},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.3156581564452417},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 3.3417007332075524e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 7.165632900860239e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=5.706410016336087e+16,\n        constraints={'min_value': 1.319519357506692e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.05},\n        was_forced=False,\n        index=None)),\n      length=30680,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 1),\n                                     ('c', 2, 2)),\n                                    (('b', 0, 3), ('a', 2, 1)),\n                                    (('c', 0, 1), ('a', 1, 0)),\n                                    (('c', 1, 2), ('c', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\u00d6-T\u00d4\\x19\\U000b4033\u00e5p\\U000ef565',\n      has_discards=False,\n      target_observations={'\\U000a6a40\\U00053286\u00cc\\U000c8c3b\u00ab': -19289,\n       'False': 2.986570237481796e+16,\n       '': -4.0891238014541634e+52,\n       '\\U000fe589dZm': 1.1754943508222875e-38,\n       '\\x02f': 27849,\n       '\\x93\\U000807ae\\x8f\\U00090af3\u00f9\u5ca6\\U000ab595>\u4e9e\u00fe.': -52,\n       '\\x15\\x9e': -111,\n       '\\x00': 6.133936882351318e-236,\n       '\u8128\u00e4': -2342,\n       '\u00da\\U000da012\u00e0\u00feSw\u00ce': 38,\n       '\u00dd': 0.0},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1758, 13346)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-65, context=(), group_elems=()),\n      nodes=(),\n      length=32599,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('b', 2, 1)),\n                                    (('b', 1, 1), ('c', 1, 2)),\n                                    (('b', 2, 1), ('b', 3, 3)),\n                                    (('b', 3, 0), ('b', 0, 0)),\n                                    (('b', 3, 2), ('a', 2, 2)),\n                                    (('c', 1, 3), ('a', 1, 1)),\n                                    (('c', 3, 3), ('b', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         \"\\U0004bff69\\x11'\u00f5\u00f5,\\x84oi\u00d8\\t\u00f2\u00fc\",\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'': -3.98716228057653e+16,\n       '\\U000712ae\\U000832bbG\\x95': -1_311_192_307,\n       '\u00f0\\x1c\"\u00b1\u00eb\\U000cd601HH\\x06\\U0001cba0\\x14': 82,\n       '\u00d5\\x8e$\u00b2\\U000429a3\\U001032a6\u00f3\\U00104129-\\U0005457dw!\u00fb\u00f0?\\U00076269\\x9d\\x17\\U000dbb1a\\x95\\U00087784\\x19n\\x01': 27244,\n       'k\u00e1': -47,\n       '\u611f\ud861\udc20\u00c7': 2.004206896629564e+16,\n       'Z\\U00068973^': 13991,\n       'C\\U0004ca54\u00b2\\U000cd663]\ud877\ude79\\x9f\\x8a\\U000e3ee4\u00c6\u00ba\\x0e': 17036,\n       '\ud854\udca83\u00e5[\\U000cac11\\x7f': -11229137},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-27195, -20660),\n       (-11240, -21258),\n       (-2699, 24),\n       (-3, -6_113_095_717_251_877_741),\n       (5336, -28931),\n       (15860, 22538)},\n      slice_comments={(-120, 14669): 'boolean'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-2755339517235068276, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-2_405_181_719_500_286_256,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xda\\xb8hj`\\xff\\xcf\\xbc@R*@\\xdc\\xe0\\xfe\\xcbE\\x16,W\\x1d|b\\xe4_\\xd7<\\xf9\\xd9\\x81\\xfd\\t\\x15\\xb0\\xe6\\xb8c6)>]\\x0eX\\x9c\\xc6H7&/\\xb5',\n        constraints={'min_size': 22, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud81a\udd31\ud81a\udce2\ud81a\udcd4\ud81a\udc93\ud81a\udd4f\ud81a\udc60\ud81a\udd56\ud81a\udc7e\ud81a\udd26\ud81a\udd48\\U000891db\ud81a\udd52',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [92249,\n                  108059,\n                  261846,\n                  344305,\n                  519603,\n                  749351,\n                  924748,\n                  1018848,\n                  1041599,\n                  1046281],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'D\\xbb\\xb8\\x83\\xb4\\xa2\\xfb,0i\\xeb\\x8ae\\r\\xa8\"',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.32271039776289184},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u0207\\U000b60cb\u01e2\u018a\u01b3\\U000b485e\u01ea\u0193\u0184\uc0ec\u019d\u018b\u017c\u01b9\u01f8\u0147\u01fd\u01f5\u0229\u01da\u01f8\u021b\u0157\u01f4\u0189\u01d4\u01ce\\U0006db7e\u0171\u01d3\u016a\u01da\u0144\u017b\u0181\u0132\u017c\ud868\udefb\u012e\u01e0\u0196\u01d5\u021a\u01f7\\U00012c73\\U000c863d\u018b\u0154\u01c5\u0136\\U000d7d9e\u021c\u018c\u01e5\u01cd\u01ba\u01e0\\U000e1838\u0200\u013c\u019a',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [300,\n                  97993,\n                  103581,\n                  188309,\n                  198602,\n                  208886,\n                  376404,\n                  493731,\n                  688126,\n                  928870,\n                  1003735,\n                  1114110],\n             ),\n         ),\n         'min_size': 36,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-114,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 2, 0),\n                                     ('a', 1, 3)),\n                                    (('b', 2, 2), ('b', 2, 0)),\n                                    (('b', 2, 3), ('b', 3, 0)),\n                                    (('c', 0, 0), ('c', 3, 0)),\n                                    (('c', 0, 2), ('a', 2, 2)),\n                                    (('c', 1, 0), ('c', 0, 0)),\n                                    (('c', 2, 0), ('a', 1, 2)),\n                                    (('c', 2, 1), ('c', 1, 3)),\n                                    (('c', 2, 2), ('a', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'NUM': 5.047708788831406e+74,\n       '5U': -7_947_087_575_231_113_107,\n       'Report': -214264690,\n       '\\x93\u00e2=\\U0007f9be\u00a2\\x9b\u00e8': -1048,\n       '\\x9d\\x93\\x13X\\\\\u00b0^': -10876,\n       'M\u00ae': 300,\n       '\u00c9\u00b0': 3.5136479743325588e+16,\n       '\\U0008f588\"L\\x174\u00d2\u00b5': -1.849323341809831e+105},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-28429, 6981), (-16281, -10162), (-124, -60), (36, 44)},\n      slice_comments={(-12259, 7562): 'Y*',\n       (18491, 9999): '\\x8d\u00f8',\n       (108, 15): '',\n       (-87_721_670_780_053_173_080_809_474_525_236_946_884,\n        -7480): 'X\\U000d0f70O\u00f5\u00edP',\n       (1000, -61): '\\x86\\x88\ud822\ude5f(\u00db\\x0f\u00f4\u00ce[\\U0008266d\\U000bab2a\u00e2\u00c7\\U000faeb0',\n       (11782, -874_094_935_786_898_135): '\u00ac',\n       (-1_035_606_142, 841): '\u00e1\\x9ax5\ud823\udc7e',\n       (-5_333_501_226_392_589_573, -1_588_977_861): '',\n       (-100, -22879): '\\U00014155\\U000cb173\u00a4',\n       (-31415, -27493): '\u00a1\\x15'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.008793417015112936,
          "overall:gc": 4.9708003643900156e-05,
          "generate:args": 0.11335366289131343
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 2,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 2,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878965.2426088
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=6888967725035946384, context=(), group_elems=()),\n      nodes=(),\n      length=26023,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('b', 0, 3)),\n                                    (('a', 0, 3), ('a', 2, 1)),\n                                    (('a', 0, 3), ('c', 2, 1)),\n                                    (('b', 1, 0), ('c', 2, 0)),\n                                    (('b', 2, 2), ('a', 3, 1)),\n                                    (('c', 3, 2), ('c', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00a1\ud849\udc42\ud83d\udc62tK', 0, 0, 'reason'),\n      expected_traceback='run_start',\n      has_discards=False,\n      target_observations={'\u092a\u0928\u094d\u0939 \u092a\u0928\u094d\u0939 \u0924\u094d\u0930 \u0930\u094d\u091a \u0915\u0943\u0915\u0943 \u0921\u094d\u0921 \u0928\u094d\u0939\u0943\u0947 \u0625\u0644\u0627 \u0628\u0633\u0645 \u0627\u0644\u0644\u0647': 1612114993772115.0,\n       '': 8060601521459081.0},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-4028, 27835)},\n      slice_comments={(-98, 3428): '1/0',\n       (-7620, 4577): '\\U0001f1b2S\\U00051698\u00d7\\x1c\\xa0\\U000f760b\\x0cr'},\n      misaligned_at=None,\n      cannot_proceed_scope='other')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00021204096265137196,
          "overall:gc": 0.0,
          "generate:args": 0.0026014180621132255
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878961.418345
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-45, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=121,\n        constraints={'min_value': -10748,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'BL',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'6L\\xd9Z\\xbddq5\\xb3',\n        constraints={'min_size': 5, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=31777,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 2),\n                                     ('b', 0, 1)),\n                                    (('b', 0, 0), ('a', 0, 1)),\n                                    (('b', 0, 1), ('b', 0, 1)),\n                                    (('b', 1, 0), ('c', 0, 2)),\n                                    (('c', 0, 1), ('a', 1, 3)),\n                                    (('c', 2, 1), ('c', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(19158, -3): 'r\\x10',\n       (-6_548_205_646_144_211_508, 101): '\\x06\\U0005a2e8\u00e5\u00cd\\U00048f514\u00df',\n       (1024,\n        25101): '\u03a9\u2248\u00e7\u221a\u222b\u02dc\u00b5\u2264\u2265\u00f7\u00e5\u00df\u2202\u0192\u00a9\u02d9\u2206\u02da\u00ac\u2026\u00e6\u0153\u2211\u00b4\u00ae\u2020\u00a5\u00a8\u02c6\u00f8\u03c0\u201c\u2018\u00a1\u2122\u00a3\u00a2\u221e\u00a7\u00b6\u2022\u00aa\u00ba\u2013\u2260\u00b8\u02db\u00c7\u25ca\u0131\u02dc\u00c2\u00af\u02d8\u00bf\u00c5\u00cd\u00ce\u00cf\u02dd\u00d3\u00d4\\uf8ff\u00d2\u00da\u00c6\u2603\u0152\u201e\u00b4\u2030\u02c7\u00c1\u00a8\u02c6\u00d8\u220f\u201d\u2019`\u2044\u20ac\u2039\u203a\ufb01\ufb02\u2021\u00b0\u00b7\u201a\u2014\u00b1',\n       (-8, 5609): '\u00b6X\\x0f',\n       (-10950, 10840): '\\x9a\\U00080617\\U0008aa441\\U000f8c47\u00e4u',\n       (-14177, 72): \"\u00d2\\U00085019\\U0001ae9d\\x1a.\u00ba\u00afNf\\U000ea290'\",\n       (5, -970): '\\x00f7Y\\x9cD\\U00105be0a\\x11\u00e6\\x7fY\\U00097a15\\x07.\u00bb',\n       (16356, 11941): '\\U000a4c5fJ',\n       (-17287, 31085): '\\U00012ac5a\u00d0\\U000effa0\\x11\\t',\n       (92_499_283_099_071_654_190_488_992_172_273_346_056,\n        24469): '\\x83\\U000d27da\ud870\udf38\u00b5\\U000b897aS',\n       (20841, 24859): '',\n       (-9028, -1_598_586_959): '\\x1dC\\x04\\U0008ac2f2\\x84 ',\n       (-30492, 25109): '\ud801\udc3d\\x97',\n       (-16799, 17363): '\\x02%m',\n       (3060, 21167): '\u00b2\\U000b79d5S\u00d5\u00eb@\\x0f\u00b0Qt\\U000fc9e3',\n       (-48,\n        116_114_417_107_713_290_723_226_395_879_375_769_306): '\u00b1\\r\u00d9\u00a6\u00fbVJ^\u00c2\\x17\u00ec\u00d7uN$',\n       (-8_128_874_395_968_009_738, 15539): '\ud888\uddea\\U000fd5ef\\x1e\u00e3\\x1fJ\u00f9\\U0001cac5',\n       (-30157, 16575): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=10265, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U000c87ac\\U000c7903\ud808\ude22\ud808\ude53\\U00012e8d\\U000c7a73\ud808\uddd5\ud808\ude04\ud808\uddcc\\U0003c594',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [74179,\n                  82344,\n                  172905,\n                  201676,\n                  217703,\n                  289013,\n                  380307,\n                  389950,\n                  806318,\n                  854325],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=3.5244461573899794e+307,\n        constraints={'min_value': 2.00001,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.0529885504920366e+116},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=8.063646980706967e-278,\n        constraints={'min_value': -1.775582354536276e-300,\n         'max_value': 9.274284420389758e-278,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 8.063646980706967e-278},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x90!\\xd9\\xcd\\xaf\\xa5\\xb9\\xda\\x91V\\xf9\\x84\\x96\\x91\\x0e',\n        constraints={'min_size': 15, 'max_size': 115},\n        was_forced=False,\n        index=None)),\n      length=83,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('b', 3, 0)),\n                                    (('a', 0, 2), ('c', 2, 3)),\n                                    (('a', 1, 0), ('b', 0, 0)),\n                                    (('a', 2, 1), ('c', 3, 3)),\n                                    (('b', 1, 0), ('b', 3, 3)),\n                                    (('b', 1, 3), ('b', 0, 3)),\n                                    (('b', 2, 2), ('c', 2, 1)),\n                                    (('b', 2, 3), ('c', 1, 0)),\n                                    (('b', 3, 2), ('a', 0, 3)),\n                                    (('c', 1, 3), ('c', 1, 2)),\n                                    (('c', 2, 3), ('c', 0, 1)),\n                                    (('c', 3, 2), ('b', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\u00bbzF\u00b2h\\U0010a531v',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\u00d3\\U000550959\u00cd\u00bf\\x1f\\x85\\U000146db\\U000ce989',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('\\x05\u00dc7',\n                                     [UnicodeEncodeError('unknown encoding',\n                                                         '%',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\\x8b',\n                                                         0,\n                                                         0,\n                                                         'reason')])]),\n      expected_traceback='e\\x1a',\n      has_discards=True,\n      target_observations={'}\\x83\\U000eeedd\\x1f\\x15\\U00032972y\\x18\u00d7p,\\U000b62f9': 2.031980063127973e+16,\n       ',': 6.003825641870276e+16,\n       '\\U00050edd_': 3.390464685119416e+26,\n       'F\u00a5\\U00045c57W\u00a5\\U000162d0\u00d99{\u00d0<\u00a9\u00b2\\U000ab41e\u00ff\u00e6': -1_943_515_906},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-92, -18956), (117, -5_867_015_950_076_698_150)},\n      slice_comments={(8192, -120): '\\x9a',\n       (47, -7): '\\U0003ffa1\u00a9\\U0003a511~\"\u00e8\u00c9FX\u00cd',\n       (944753236, -17784): '\u00e5',\n       (-18261, 14701): '\\U000f50d3\u00dd',\n       (108, 404): '\u00b1g',\n       (29, -23187): '\\x92',\n       (-47, -17769): '\\U000f3b9a'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-17652, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-32285,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 38349477,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0006cd03\\U000160a3\\U00015fdf\\U00016030',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [90065,\n                  121361,\n                  155075,\n                  206650,\n                  422934,\n                  534920,\n                  548684,\n                  592781,\n                  700833,\n                  706962,\n                  1046809,\n                  1087735],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1e-05},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.03335085420898199},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 1.0},\n        was_forced=True,\n        index=None)),\n      length=-32530,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 0, 1),\n                                     ('c', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\U000aa740\u00f2\u00dd',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '\\x03',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('\uc36a\u00d8\u00d3', 0, 0, 'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\u00da',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='\\U0008ee79\u00b4\\x19\u00d9\\U000ccbe1\ud851\udee8\u00b9\\x82\\U00105250\u00fc\u00cah%\\U000eb41ae\u00ba\\x06',\n      has_discards=True,\n      target_observations={'\u00ee': 0.05,\n       '\u00da\\x81\u00d0': 12838,\n       'NIL': 1000,\n       '/': -26641,\n       '\u00b7\\U00099323': -7.517632928984617e-278},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_919_836_269, -94),\n       (-30059, 3453),\n       (-13295, 13759),\n       (-12181, 24260),\n       (-4944, 20121),\n       (-4630, -3065),\n       (-47, -93),\n       (-22, -18224),\n       (37, 40),\n       (83, -23),\n       (109, 10837),\n       (6815, 1000),\n       (6954, -8356),\n       (7040, -67),\n       (16740, -20),\n       (17389, 1_360_317_055_773_313_489),\n       (26198, 3678),\n       (494548489, 82),\n       (4_645_432_700_209_480_182, -109),\n       (38_561_071_925_237_545_747_229_407_195_241_539_335, 10280),\n       (142_774_014_056_987_290_302_896_592_827_611_259_041, 25913)},\n      slice_comments={(121,\n        -1_285_132_711_964_352_926): 'g\\x0c\\U000952bc-\u00bf\u1e91\u00f2'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-112, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=7.574493519554153e+306,\n        constraints={'min_value': -8.220697898297812e+49,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.220446049250313e-16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([395028, 570547, 812630]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u7037\u20d2\u201b',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [8192, 71937, 678339, 715358, 965444, 973549, 1005176],\n             ),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-47240,\n        constraints={'min_value': None,\n         'max_value': -32299,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.225073858507203e-309},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00046fce\\U00046ff1\\U0007c597\\U00046fe9\\U000685a9\\U00082ce1\\U00046f84\\U00046f65\\U00046f24\\U00046fb2\\U00046fd3\\U00046f59\\U00046f21\\U00046f1d\\U0005c699\\U00046f6d\\U00046f7d\\U00046f50\\U00046fb6\\U000722a2\\U00046fa0\\U00046f8d\\U000675e1\\U00049562\\U00046f48\\U00046fc8\\U00046f4d\\U00046f4c\\U00046f71\\U0005e6d3\\U00046fd2\\U00046fb1\\U00046fa1\\U00046f3f\\U000d2fd6\\U00046fe1\\U0004700d\\U00046f6b\\U00046fa5\\U00046f2c\\U00046fa2\\U00046fae\\U00046f42\\U00046fb5\\U00046f38\\U00046f49\\U00084b95\\U00046f33\\U00046fdc\\U00046fb5\\U00046f28\\U00046fdb\\U00046faa\\U00046fb5\\U00046f55\\U0004700b\\U00046fb6\\U000bba68\\U00046fc0\\U00046fc0\\U00046fc7\\U00046f31\\U00046f3a\\U00046f7f\\U00046fa9\\U00046f79\\U00046f94\\U00046f2a\\U00046fa4\\U00046f28\\U00046f81\\U0008f31c\\U00046fd6\\U00046fe4\\U00063d18\\U000a989f\\U00046f22\\U000c54d1\\U00046f5b\\U00046f2d\\U00046f7f\\U00046f6b\\U00047006\\U0009ace7\\U00046fcf\\U0004f665\\U00046f6c\\U00046fd0\\U00081385\\U000528f2\\U00046f4c\\U00046f8d\\U00046f10\\U00046fbf\\U00046f29\\U00046f8e\\U00046f64\\U00046f2c\\U00046f3e\\U00046f22\\U00046f8d\\U000a4898\\U000980c1\\U00046f5f\\U00046f31\\U0006e7af\\U00046f81\\U00046fb9\\U00046f88\\U00046f42\\U00046f99\\U00046fde\\U00046f5a\\U00046ff1\\U00046fe0\\U00046fe3\\U00046fae\\U00046fe2\\U00046fa5\\U00046f5b\\U000a94a4\\U00047003\\U000a060e\\U00046f2c\\U000890b4\\U0006a254\\U00046fd1\\U00046f12\\U00096f69\\U00046f9e\\U00046fed\\U00046fcb\\U000d31ce\\U00046fff\\U00046fcd\\U00046f81\\U00046fdf\\U00046f2f\\U00046feb\\U00046fda\\U00046f7a\\U00046f42',\n        constraints={'intervals': IntervalSet(\n             build_intervals([290575, 890242]),\n         ), 'min_size': 42, 'max_size': 142},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\uaf1c\uaf7b\uaf71\ud880\udfae\\U00066285',\n        constraints={'intervals': IntervalSet(\n             build_intervals([44760, 219449, 361577, 468270, 671568, 706721]),\n         ), 'min_size': 0, 'max_size': 64},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000976ae\\U0009a00c\\U000c6afe\\U000b40aa\\U0009770e\\U000976c1',\n        constraints={'intervals': IntervalSet(\n             build_intervals([620062, 1065403]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x1b\\x96\\xd1R\\x96C\\xad.\\xc6\\xba\\xd3\\xab\\x0e\\xf9n\\xc9\\x99\\xe9\\xdc\\x94c%\\x011\\x0f\\xb4\\xe3\\x17\\xc6\\rh\\x87\\xda\\xc8\\xa4Nn\\xfa/\\xb4\\x7fC?\\xb8\\xb9\\x19\\xba\\x1e\\x1e\\x9cd\\xe1\\x07\\xa2l\\xdf\\xa95hg~',\n        constraints={'min_size': 43, 'max_size': 143},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -3.696367839326551e-173,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.728170269706053e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-6.1381293864125656e+16,\n        constraints={'min_value': -inf,\n         'max_value': -1.1125369292536007e-308,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.0376199648518958e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xa3\\x1b\\xfe',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u08a9\\U00049a36\u0836\\U0004b7b6\\U0008f441\u07c3\u07e2\u0858\ud805\ude0b\u07ed\\u07b2\u0871\u082b\u0856\u07e8\u0839\\u07bf\u0828\u0854\u085b\u080b\u07f0\\U0009a27c\u0839\u07c8\u0828\u0842\\U00013d8a\u081f\u0802\u07da\u0880\u0887\u08ab\u07c3\u07d6\u07c5\\U0009cc19\u07c6\u089f\u0819\u08a9\\u07bb\u0818\u0830\u07da\u08aa',\n        constraints={'intervals': IntervalSet(build_intervals([1968, 862310])),\n         'min_size': 40,\n         'max_size': 55},\n        was_forced=True,\n        index=None)),\n      length=-76,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 1),\n                                     ('a', 1, 1)),\n                                    (('b', 1, 2), ('c', 2, 2)),\n                                    (('b', 2, 0), ('b', 1, 3)),\n                                    (('c', 1, 1), ('b', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('>{\\U000c4d7f\u00fbq',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\\x1e\u00f8\\x04\\x13\u00e6\u00f4)\\U000d0186',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('',\n                                     [UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason')])]),\n      expected_traceback='\u00a9\u00d3\\uf081\u00b7\\x18\\r',\n      has_discards=False,\n      target_observations={'\\U000f9886\u00e0': 0.05,\n       '\u00far\u00d89j\u00a2\\x8b\\x9a[\\U0003e7eb\u00a2\u00ac': -903170138,\n       '\u00b0\\x1c\\x01{\\x03\\U0010f656\u00df\u00f8n': 2.7060695386133283e-202,\n       '\\x02\u00e8i\\U0007a13b': -4.681518117221577e-135,\n       '': 6.84830655622355e+134,\n       '\u00f5\u00a80\\U00089f3a\u00d6\u00be\\x8bz||\\U0006357d8\u289b\u00b4z\u00b6X': 2.82387893254723e+181,\n       '\u00ffYs\\x0bg\u00e2\u00d9\u00bbJ\\U000cb390': -4.140613792199191e-213,\n       '\u00f26\u00e1': -2.96321488174915e+70,\n       '\\x15\\U0001584f\u00e1\\x1a\u00a82r\\x00': -5.038762860343643e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-31305, -17576): '\\x9f\\U0007279b\\x98\u00a3\\x84',\n       (5_604_159_657_635_294_464, 70): '\u023a',\n       (-942,\n        695_678_257_085_521_861): '\u00f7Nd\\x0b\\U000f74df\\U000afc05\\x9c\u00eda\\U00054a89\\x94\\U000dbe11(G\u00d4>@\\x0c\\U000b6b56\u00af',\n       (-12125, -12407): '\u00b8'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=3, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'8\\xe3:\\xe4',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.6589260587460816},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u0499',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1024,\n                  168080,\n                  352303,\n                  373598,\n                  428499,\n                  445513,\n                  454878,\n                  463875,\n                  474461,\n                  554411,\n                  579562,\n                  649480,\n                  804831,\n                  813963,\n                  979946,\n                  1004468,\n                  1017697,\n                  1109557],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u049c\u0419\u04c4\u04eb\u0497\u04cc\u0477\u043d\u04fe\u047b\u04be\u04cc\\U0008b590\\U000547b2\\U000a17c6\u044c\u044a\u04fd\u0484\u0438\u04fb\u04e1\u04aa\u04ec\u04eb\u0416\u0428\u04fd\u0477\u04bb\u044c\u0498\u0418\u04d8\u0498\\U000c6ae6\u0438\u0419\\U0004db71\u04f4\u0443\u0489\u04be\\U0009f7a7\u04a4\u045f\u04a3\\U0009a2ce\u0438\\U0006f612\u0487\u041e\\U000e50f6',\n        constraints={'intervals': IntervalSet(\n             build_intervals([1024, 9999, 206174, 843216, 890053, 999862]),\n         ), 'min_size': 46, 'max_size': 146},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-12796,\n        constraints={'min_value': None,\n         'max_value': -44,\n         'shrink_towards': -124,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0009be96\\U000b737b\\U000a2a06\\U0009bf09\\U0009be9c\\U0009be97\\U0009be8c\\U000ade4f\\U0009be7a\\U000ae4f6\\U0009bf02\\U0009be90\\U0009beae\\U0009be70\\U0009be6a\\U0009be87\\U0009be5d\\U0009be46\\U0009bec0\\U0009bebc\\U0009bf28\\U0009be90\\U0009bf1c\\U0009be51\\U0009be98\\U000aae44\\U000a7f0b\\U000a5993\\U0009beec\\U000a07cf\\U0009be8b\\U0009be68\\U0009be40\\U0009be85\\U000ac5f6\\U0009bf22\\U0009be7d\\U0009bf13\\U0009beea\\U0009be74\\U0009be95\\U0009be93\\U0009be9d\\U0009beec\\U000ac186\\U0009bec1\\U0009bef0\\U0009be6b\\U0009bec7\\U0009beb7\\U0009befd\\U0009bee2\\U0009bf07\\U000a76af\\U0009befb\\U0009be41\\U0009bf1e\\U0009bee0\\U0009be70\\U0009bf0c\\U0009beb3\\U0009be4a\\U0009bf3e\\U0009befb\\U0009be75\\U0009f874\\U0009bf26\\U000a303e\\U000a1571\\U000a8dd5\\U0009be70\\U0009bed1\\U0009bf38\\U0009bef5\\U000b3113\\U0009beaf',\n        constraints={'intervals': IntervalSet(\n             build_intervals([638527, 750989, 1072001]),\n         ), 'min_size': 43, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-56,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 0),\n                                     ('a', 2, 3)),\n                                    (('b', 1, 2), ('b', 0, 2)),\n                                    (('b', 1, 2), ('b', 3, 2)),\n                                    (('b', 3, 3), ('c', 2, 0)),\n                                    (('c', 1, 0), ('c', 3, 0)),\n                                    (('c', 1, 3), ('c', 0, 3)),\n                                    (('c', 2, 0), ('a', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('\\x81\u00fd2',\n                                     [UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('\\x87',\n                                                     [UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         ')O\\x93\u00a8a\u00ce\\U0008d73bK\u00de\u00dc\\x91A',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')]),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\u00df',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\u00bc',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason')])]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00bb\\x1c\\U0009b369': 20480,\n       '': -20,\n       '\u00ec\u00a7\\x1e\u00cc\u00c9\\U0005ed6d\u00c9!\\U0003b32f': -110,\n       '\u00a4V\\x9e\u00dey\u00e0\u00fe': -1.1072373670797092e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-125, 9), (98, -29670), (5_414_597_447_299_689_184, 11550)},\n      slice_comments={(-1_133_990_622, -13634): 'store',\n       (17651, -15796): '\\x8bL',\n       (27090,\n        -15): '\\U0008611d\\x83\\x10VP\\x92\\x92\\x97:\\x1b\\U000ae692]\\U000a9dbcz\\x1d\\x03\u00e6b\\x91\\x07',\n       (123,\n        18): '\ud865\udeae\\U0005302e\\x02\\n\\U000cb192\\x0c\\U00065844K\\x8e\ud86b\udfb7\u00e53\u00f2\ud802\udf9c,\u00f5\\U000caeac\\U001010dc',\n       (26412, 50): 'then',\n       (-120, 9_135_635_918_375_564_960): '\\x7f\u00e8\u00dc\u00bf',\n       (11654, -13889): '= \\x06\\x1f',\n       (-21654, -11114): '\\nn',\n       (-16, 25102): '\\U0010ee45\u00b3\u00cf\u00d2\\U000e4742\u00fc',\n       (-32291, -122): '\\U000e97d0\u00c6\u00be\u00b7',\n       (19306,\n        -86): '\\x1f\\x90\\x15$C\u00a9\\U00011760\\U000dd342T\\U00065284\u00ac\\U00073ab2',\n       (-9008, 66): 'Infinity',\n       (3905, -26917): '\u00e1\\U0008885d\\x1b\\x16\u00bb\u00b6[!%\ud843\udc24\u00f3R',\n       (-1_630_461_953, -30098): '\u00ebn\\x00',\n       (2_727_540_593_900_480_082, -2_692_212_424_308_737_278): '\u00f2\u00e6',\n       (9879, 1000): '\u00a6\u00aas\\x12o\ud867\ude09\u00f3\u00df\\x91\u00b5Jc'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-48, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -8.452366818012999e-43,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.5815472118914161e+308},\n        was_forced=True,\n        index=None),),\n      length=28477,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 2),\n                                     ('c', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\u00fe\\x17': 1000,\n       '\\U0006c83d\\U0003b864\\U0003b1cf\ud800\udcb3': 120,\n       '%\u00c1u\u00c1\\U000addb4;\\U0006cedb': -22344},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-7902, 33), (28942, 27352)},\n      slice_comments={(23992,\n        -6921): '\\U000b8de8\\U000f2e75\\U000669e0\u00a4Std\\U000460e9i',\n       (-11842, 29197): 't\\x804\\x1c\\x1d\\x93(O\\U00055dde\\x81',\n       (-5517, 1_111_518_407_303_104_356): \"\u00e3m'E6\u00e8\u00f5\",\n       (32020, 7_524_814_176_614_273_812): '\u00a9\u00a1',\n       (32675, -5013): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='verified')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.004270582983735949,
          "overall:gc": 0.00010304199531674385,
          "generate:args": 0.09458483482012525
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878953.4950368
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=12369, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'hypofuzz.test_keys',\n        constraints={'min_size': 11, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x0e\\xf9\\xa5u)g\\x1e\\x07',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=15401,\n        constraints={'min_value': 53,\n         'max_value': None,\n         'shrink_towards': 3,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u34c1\u34e7\u3491\u3510\u34dc\u3546\u3529\u3471\u3567\\U000572bf\u34cc\\U00012e6a\\U0004cfa4\u355e\u3554\u34ba\u347d\u34f0\u34cb\u3547\u349d\u3552\u348f\u34ed\u34a8\u352a\u355f\\U00048120\u348c\u3498\u349d\u4f9d\ud87a\udeef\\U0006bc25\u3532\u3471\\U0004e568\u351f\ud872\udeb5\u34a5\u351d\u353c\u34f8\u347e\u3475\u34f1\u34cb\u3497\u352e',\n        constraints={'intervals': IntervalSet(\n             build_intervals([13424, 558000, 565298]),\n         ), 'min_size': 41, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 2.0962130033503306e+243,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.359993667809842e+307},\n        was_forced=False,\n        index=None)),\n      length=305294151,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 0),\n                                     ('c', 1, 0)),\n                                    (('a', 3, 1), ('a', 2, 2)),\n                                    (('b', 0, 3), ('b', 3, 1)),\n                                    (('b', 2, 2), ('c', 2, 0)),\n                                    (('b', 3, 2), ('a', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\u00d2': -2.023349110746691e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_737_518_587, -92), (26, -23522), (40, 14617), (86, 12)},\n      slice_comments={(-30153,\n        -1_070_053_086): '\u00fc\u00ff\\U000ddc30\\U000ba866\u00d0\u00a7\\x86\\x14\u00be\\U000bc34f',\n       (4532, 28462): '\u00ae\\x92\u00ffpH\\x0e.\\x94\u00ea'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-94, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -2.1740596590951664e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.05},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=972,\n        constraints={'min_value': None,\n         'max_value': 23699,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b's\\xf2\\xb2M5\\x85\\xdcE?\\xd0W\\xc5',\n        constraints={'min_size': 9, 'max_size': 24},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=3.8611594026446104e+16,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.5},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1.7976931348623157e+308,\n        constraints={'min_value': -inf,\n         'max_value': 6.972899641515488e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.5760330720368515e+304},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.281561821228628},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'Wf,\\xeb\\x96Y\\xb6\\xe3\\x85~\\x89\\xe8\\xd16\\xbdmx\\x03G\\xd2\\x1eT\\x0c:\\x0cnk\\xed\\x82^tJ\\xd5H\\xce\\xfa\\xf4N\\xf0\\xbf\\xae3\\x05\\xbf\\x9e\\xb5',\n        constraints={'min_size': 46, 'max_size': 65},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud820\udd89\ud820\udddf\ud820\uddab\ud820\ude2c\ud87e\udc97\ud820\uddf7\ud820\udda0\\U000c3be2\ud820\uddd7\ud820\ude23\ud820\ude0b\ud820\ude13\ud820\uddeb\ud820\udd79\ud820\uddde\ud820\udd85',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [98622,\n                  262737,\n                  423759,\n                  434271,\n                  573269,\n                  805797,\n                  830159,\n                  999255],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=54368,\n        constraints={'min_value': -3961,\n         'max_value': 901_834_785_879_299_780,\n         'shrink_towards': 71,\n         'weights': {3_263_843_635: 0.13533334152286414,\n          -3926: 0.00020568567696867233,\n          -3831: 0.2056836201119026,\n          54368: 0.08580557536703445,\n          -3950: 0.18280037061235313,\n          -3904: 0.04938562951493544}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.5352538536449236e+16,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.05},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xe6\\xbb\\xc4',\n        constraints={'min_size': 3, 'max_size': 3},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.5,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.348386891757757e-221},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.17903036716571943},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=404,\n        constraints={'min_value': None,\n         'max_value': 8192,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'h\\xd6',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xd3\\x12\\x8d!z\\x89\\xb4\\xb0zV\\xdc\\xe2\\xcc\\x95&\\x13d7\\xecwa1\\x11\\xd3\\x9c\\xa7^\\xf5E\\x13k\\x82\\x87\\x91d\\xf3\\xd8Z\\x86\\x83\\x1a\\xf4\\xbd\\xa0\\x15\\xde.`\\x1f[',\n        constraints={'min_size': 41, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xf5,\\xb4G\\x06\\xd0@',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None)),\n      length=14119,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('a', 2, 3)),\n                                    (('a', 1, 0), ('c', 1, 2)),\n                                    (('a', 3, 1), ('b', 2, 2)),\n                                    (('a', 3, 3), ('b', 1, 3)),\n                                    (('b', 2, 1), ('a', 3, 0)),\n                                    (('b', 3, 0), ('c', 2, 2)),\n                                    (('b', 3, 3), ('a', 0, 3)),\n                                    (('c', 0, 2), ('b', 3, 2)),\n                                    (('c', 1, 1), ('b', 2, 2)),\n                                    (('c', 1, 3), ('c', 0, 1)),\n                                    (('c', 3, 1), ('a', 2, 2)),\n                                    (('c', 3, 2), ('a', 3, 3)),\n                                    (('c', 3, 3), ('b', 0, 2)),\n                                    (('c', 3, 3), ('b', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00f1',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'None': 92,\n       '\\U0004cc48\\U000cba74\u00d5K\u00df\\xa0[': 5.7491221828735326e+75,\n       '\ud81b\ude54\u00f5\u00f4\\xa0B': 29375,\n       '\\xa0': -2.3090413540805192e+42,\n       '<\\x05/\\x94\u00f3': -2.039008967457701e+87,\n       '\u00aa\u00ac': -109,\n       '\\x0f': -2.2236930630624533e+291,\n       '\\U000a779d\\x04\\U00032e8a\u00dfZ': 26214,\n       '--hypothesis-seed': 4.564872493867123e-263,\n       '2': -2.4559084312856657e-141,\n       '\u00c3\\x04~\\x0b\u00fbk\\x99\u00e6\\x18\\U000fbe51\\x93\\U000bdcdc\u00f3': 0.0,\n       'i\\x84\\U0008a2b1\\x92': 1.5511566058109065e+284,\n       '\\x9e\u00d7\\U0005aaaf\\U0010a4d9s\\U000a261d\\x97': -22247,\n       '\\x0eB\u00a8\\U00087341\u00df\\x01O`\\x11\u00ed\u00b4': 512,\n       'X\\U000b17c5h\\U0006381f': -8,\n       '': inf,\n       '1J?\u00fd\\xa0\u00bdl\\x82\u00ba\\U0007090c': 1.980290513592365e+16,\n       '\u00fa\u00a6\u00c6\u00b2': -2.4217107890060888e+191},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(25, 300), (300, 11460), (1155, 7117), (10254, -4576)},\n      slice_comments={(668252977, -1292): 'P'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=8748, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U0002f098\u018a\u0135\\U0008aabf\u01e4\u0184\\U000ea4c3\u0168\u0149',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [300,\n                  76706,\n                  157657,\n                  201160,\n                  287996,\n                  342486,\n                  367821,\n                  441886,\n                  513501,\n                  550803,\n                  558776,\n                  590856,\n                  612256,\n                  718106,\n                  814301,\n                  977014,\n                  1045143,\n                  1113017],\n             ),\n         ),\n         'min_size': 7,\n         'max_size': 107},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\x88#\\x1a\\x87\u00b3O\\U00056e6f\\U000567ec~\u00b7\u00cd\\U00056d0fW\\U000571c9\u00a6\\U00056c24\u00ed\\U0005718a\\U00056f5a\\U00056fe2\\x18\\x03\\x96\u00cb\\U00056b4e\u00be\u00a2L\u00d4\u00e5\\U0005718c;\\U0005689c\u00d1\\U00056cbeZ\u00c5\u00ab\u00fd\\x15\u00df',\n        constraints={'intervals': IntervalSet(\n             build_intervals([1, 404, 354271, 356866, 603142]),\n         ), 'min_size': 41, 'max_size': 141},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None)),\n      length=-4181,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('a', 0, 2)),\n                                    (('a', 1, 2), ('c', 0, 1)),\n                                    (('a', 2, 0), ('a', 0, 1)),\n                                    (('a', 2, 0), ('a', 2, 1)),\n                                    (('a', 2, 1), ('c', 1, 3)),\n                                    (('a', 3, 0), ('c', 1, 0)),\n                                    (('a', 3, 3), ('c', 2, 1)),\n                                    (('b', 1, 2), ('a', 2, 0)),\n                                    (('b', 1, 2), ('c', 3, 1)),\n                                    (('b', 1, 2), ('c', 3, 2)),\n                                    (('b', 1, 3), ('c', 3, 3)),\n                                    (('b', 2, 2), ('c', 0, 3)),\n                                    (('b', 3, 3), ('a', 0, 2)),\n                                    (('c', 0, 0), ('c', 3, 1)),\n                                    (('c', 1, 0), ('a', 0, 1)),\n                                    (('c', 1, 1), ('b', 0, 0)),\n                                    (('c', 2, 1), ('c', 2, 3)),\n                                    (('c', 3, 0), ('c', 0, 3)),\n                                    (('c', 3, 1), ('c', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='',\n      has_discards=True,\n      target_observations={'>X\u00b9\\x9e\u00b5\\x94\u00ff3\\x1b\\x0f\u00ba\u00bag\\U000acc24/\\x1bW\\x01': 12143,\n       '\\x89_': -3_427_165_766_122_635_784,\n       '': 70,\n       '\u00c6\\U00074b73\\U0006e572\u00ba\u00a6\\x8b\\x11\u00c9\\x08\\x92': -2.2250738585e-313},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-6_819_008_601_538_234_956, -8937),\n       (-29788, -22250),\n       (-15757, -84),\n       (-12237, 20422),\n       (-2785, 1000),\n       (-94, -965771211),\n       (-72, -1415),\n       (24, -2_519_221_132_061_057_466),\n       (2649, 20128),\n       (7753, -18577),\n       (11979, -99_862_212_908_665_878_158_716_302_820_849_767_156),\n       (18242, 17),\n       (24619, -26613),\n       (25614, -30358),\n       (29494, 9999)},\n      slice_comments={(2_062_372_195, -18386): \"\\x1b'\u00a6\\x1b8\",\n       (-18283, 67): ',K?\u00e5\\U0009160a\u00ffN\\x81G\u00b2\u00b6\ud86a\udd7f'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=21052957225390188211364675121526100653, context=(), group_elems=()),\n      nodes=(),\n      length=450665102,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('3\\U0008beff', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'U~\u00a6G\u00eb\\U000f4e58\u00f6': 3314,\n       \"\\U00095cdc\\U00083f48\\U000e75c2\\x84\u00a5\u00f0\\U000e9381\u00f5\\U000dc735'R\\\\\u00a6'.\\x046\": 50,\n       'F\\x19\\U0004ad17c\u00d1': 5544,\n       '\\x87\\x90\u00d4\\U000f0c2c\\x95\\x08': 3.863672177581946e-159,\n       '\u00bb': -22610,\n       '\\U000ce198': -1_234_286_494,\n       'P': -15205,\n       '': -225768902267869.0,\n       '0\u00e1': -37,\n       '\u00fb\u00fcg\u00cf\u00c9\\x0c\ud87e\udc80\u00ff\\x05': 0.5,\n       '7D7^': -28876,\n       '1\\x93\u00e2&': 5.152513555606871e+262,\n       \"\u00dc'\": -1_096_542_354_622_081_050,\n       'TypeAlias': -3},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(834917642, -1_661_357_533)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.003897374961525202,
          "overall:gc": 9.945803321897984e-05,
          "generate:args": 0.079607421066612
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878945.1702871
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.241595398634672e-05,
          "overall:gc": 0.0,
          "generate:args": 3.854098031297326e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878908.717101
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=8497, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\ud860\udfe9\ud860\udff2\ud860\udff6\ud860\udfe2\ud861\udc0f\ud861\udc9f\ud860\udfcf\ud861\udc47\ud861\udc61\\U000a00a0\ud860\udfdd\ud861\udc59\ud861\udcbd\ud860\udfda\ud860\udfff\ud861\udc5a\\U0005933d\ud861\udc98\ud860\udfdb\ud861\udc72\ud861\udc33\\U000dfbf7\\U00048898\ud861\udc39\\U0005f047\ud860\udff8\ud861\udc40\\U0006461e\\U0004fd0d\ud860\udfe6\ud861\udcbb\ud861\udc25\\U00050433\ud861\udc23\ud861\udc71\ud861\udca5\ud861\udc4b\ud860\udfda\ud861\udc4f\ud86a\udfa4\\U0004cab7\ud861\udcb4\ud861\udc03\ud861\udc5b\ud861\udc3f\ud861\udc23\ud861\udc04\ud861\udc93\ud861\udca9\ud861\udcac\ud861\udc53\ud861\udc6b\ud861\udc64\ud861\udc75\ud861\udc6f\ud860\udfed\\U00052b1f\ud861\udc97\ud861\udc82\ud861\udc3e\\U00044bfc\ud860\udff3\ud861\udc45\ud861\udc1f',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [164798, 436450, 586965, 697805, 854147, 984725, 1067400],\n             ),\n         ), 'min_size': 34, 'max_size': 69},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xf4',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xb7\\x86&\\xfc\\xd0^\\xfd\\xd8W\\xeb\\x10\\xc0\\x94\\xb8|',\n        constraints={'min_size': 4, 'max_size': 15},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xf2\\x18\\xa6\\x0b\\xa6\\x08n@\\xc2V\\x88k\\xb6\\x8a\\xa7\\xd9h\\xef\\x08\\x88\\xf6\\xc9\\xcaE_\\xc1\\xc2\\xa6tR\\xab\\xff',\n        constraints={'min_size': 18, 'max_size': 118},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u5b5d\u5c0c\u5c1f\\U00053e43\u5c1e\\U000522ca\u5b45\u5c37\u5c36\u5c29\\U00072e50',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [23361,\n                  132419,\n                  143313,\n                  219112,\n                  278313,\n                  503847,\n                  661881,\n                  773633,\n                  1088711],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=2_241_440_202_974_869_380,\n        constraints={'min_value': 2_241_440_202_974_865_071,\n         'max_value': 2_241_440_202_974_891_239,\n         'shrink_towards': -19945,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-30148,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.0724184317758527e+308,\n        constraints={'min_value': 3.275368615468418e-290,\n         'max_value': 1.7572658629937022e+308,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.0724184317758527e+308},\n        was_forced=False,\n        index=None)),\n      length=-110,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('c', 3, 0)),\n                                    (('a', 0, 2), ('b', 2, 1)),\n                                    (('a', 1, 0), ('b', 3, 1)),\n                                    (('a', 3, 0), ('a', 0, 1)),\n                                    (('a', 3, 0), ('b', 1, 1)),\n                                    (('a', 3, 0), ('c', 2, 0)),\n                                    (('a', 3, 3), ('b', 0, 3)),\n                                    (('b', 0, 2), ('b', 1, 3)),\n                                    (('b', 1, 1), ('a', 3, 0)),\n                                    (('b', 1, 2), ('c', 0, 3)),\n                                    (('b', 1, 3), ('b', 0, 1)),\n                                    (('b', 1, 3), ('b', 1, 1)),\n                                    (('b', 3, 1), ('a', 2, 3)),\n                                    (('b', 3, 2), ('a', 1, 0)),\n                                    (('b', 3, 2), ('a', 3, 3)),\n                                    (('c', 0, 2), ('a', 3, 2)),\n                                    (('c', 0, 2), ('b', 2, 3)),\n                                    (('c', 1, 2), ('a', 1, 1)),\n                                    (('c', 1, 2), ('b', 2, 3)),\n                                    (('c', 2, 1), ('a', 1, 3)),\n                                    (('c', 2, 2), ('a', 1, 1)),\n                                    (('c', 3, 1), ('a', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'': 15646},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-48_438_319_863_123_119_360_693_501_849_404_795_330, 65535),\n       (-28646, -26244),\n       (-28197, 19061),\n       (-13475, 2908),\n       (30924, 222_302_622_984_800_983),\n       (1_418_768_156, -71),\n       (2_766_510_505_011_358_211, -23806)},\n      slice_comments={(-32216, -9282): '\\U000f5a1c\u00f7\\x82',\n       (10835, 386224648): '\\U00081736\u00d0\u00aaoJK\\U000f639c\\U000b9cd2\u00b4\u00e3',\n       (678, -1_182_769_783_497_763_778): '\\x1e\\x0cL'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0009537080186419189,
          "overall:gc": 0.0,
          "generate:args": 0.018862708879169077
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878922.481002
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=18195, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7385909525227393},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-4641,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -53,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=8.980199341549741e+307,\n        constraints={'min_value': -2.400735426438839e+16,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.828671010551625e+307},\n        was_forced=True,\n        index=None)),\n      length=-465,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('c', 3, 0)),\n                                    (('b', 0, 2), ('a', 2, 1)),\n                                    (('b', 1, 1), ('a', 2, 0)),\n                                    (('b', 1, 3), ('c', 0, 2)),\n                                    (('c', 1, 1), ('a', 3, 2)),\n                                    (('c', 1, 2), ('a', 1, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-26622, -15497), (-64, -6800)},\n      slice_comments={(104, 1000): 'M'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=4432, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=2.548904525990139e+307,\n        constraints={'min_value': 1e-05,\n         'max_value': 2.8494789252489987e+307,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1e-05},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=6.050485561572263e+106,\n        constraints={'min_value': -3.608199998284824e+16,\n         'max_value': 6.835998713835985e+106,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.050485561572263e+106},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'p',\n        constraints={'min_size': 0, 'max_size': 54},\n        was_forced=True,\n        index=None)),\n      length=-36,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 2),\n                                     ('c', 1, 0)),\n                                    (('b', 1, 2), ('a', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('f', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(87, 86): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-460467672, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9751923334819248},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=26538,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=-85_003_848_823_028_819_589_767_639_676_549_772_296,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('b', 0, 2)),\n                                    (('a', 3, 3), ('a', 2, 0)),\n                                    (('b', 2, 1), ('c', 0, 3)),\n                                    (('c', 3, 3), ('a', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\x07',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('N\\x91\\x84\\U00038e3a\\x9b<',\n                                     [UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('',\n                                                     [ExceptionGroup('y\\U00055cd2\\U000382b2\u00f8K\u00b4gT\\x8d #',\n                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                         '\u00b1\\x12\\x88Q\u00be}\u00c8',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      ExceptionGroup('\\x9e\\U0004424b',\n                                                                                     [UnicodeTranslateError('>t\\t\\U000b3d06\\U00109420t\u00f0\\x91',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason')]),\n                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                         '\\U000af8a1',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')]),\n                                                      UnicodeTranslateError('',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      ExceptionGroup('\\\\\u00ce',\n                                                                     [UnicodeTranslateError('\u00ea',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason')]),\n                                                      UnicodeTranslateError('\\U000c05de\u00a8',\n                                                                            0,\n                                                                            0,\n                                                                            'reason')]),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('h\u00fa\u00e6\u00cd\\U000f2fba8\\x9a\u00d8i\u00b3gS',\n                                                     [UnicodeEncodeError('unknown encoding',\n                                                                         'd.\u00d3\\U0001debez*G\\x12\\x83[',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeTranslateError('',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         'yP\\x81\\x93\u00bb_\\U000d3073/\u00d3\\U000e42a2u',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      ExceptionGroup('rP\u00ed|e\u00f5\u00bc',\n                                                                     [UnicodeTranslateError('\\U000a6e7a\\U00034c1dE\\x1a\\U00056ebf\u00af\\x80\u00b5',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      ExceptionGroup('',\n                                                                                     [UnicodeTranslateError('\\U0009f573\\U0006150e]\u00d7\\x95/-\\x98\\x86\u00e7J',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      ExceptionGroup('V\\x16\u00f4',\n                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                         '',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeTranslateError('\u00a7j',\n                                                                                                                            0,\n                                                                                                                            0,\n                                                                                                                            'reason'),\n                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason')])])]),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')]),\n                                      ExceptionGroup('`\\U0010b5a2\\x00\\x05h',\n                                                     [UnicodeTranslateError('=z,\\U00074a3a\\U0003d6c4\\x14',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeTranslateError('\u00e4\\x1e\u00c4%\\x8f\\x81\\x82\\U000947e3S(\\U0001b6dd\ud854\udd9e\u00cdp\\x93U\u00ab`',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeTranslateError('',\n                                                                            0,\n                                                                            0,\n                                                                            'reason')])])]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-5634, -74), (30450, -296)},\n      slice_comments={(-10291, -1979): '*',\n       (11, 24069): '4m\\U00087bbd\\x07',\n       (15, 24409): '\ud865\udf01\"',\n       (7_902_131_423_706_364_795, -7804): '\u00c6\\U0003ef3e\u00fb\u00c6\u00da',\n       (162_836_079_959_585_816_760_004_289_851_663_924_458, 21048): '',\n       (-16, -14580): '\u00ddI\\x83\u00b6\u00aa\u00bc\\x17\\x9f\\x05',\n       (-10427, 5391): '\\n}\\U000e2b9e)Wnd\\U000d59637,\\U00097e6aa\u00d2\u00a3',\n       (-10552, 6_194_362_306_630_538_259): 't5\u00df',\n       (1000, -8107): 'E'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-44, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.06778567885177612},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u889c',\n        constraints={'intervals': IntervalSet(\n             build_intervals([34727, 480267, 498305, 996010]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-2619,\n        constraints={'min_value': None,\n         'max_value': -8,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xc5',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=2828,\n        constraints={'min_value': -78,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8133960162826768},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud83c\udffb\ud83d\udc4d\ud83c\udffb',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [92957, 344189, 561620, 600744, 711120, 923887, 1092060],\n             ),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1.7976931348623157e+308,\n        constraints={'min_value': -1.7976931348623157e+308,\n         'max_value': -5.126730584398059e+188,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 9.903566112299892e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7646535277201492},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'c\\xa1\\xfe\\n\\xea&JEB\\x1e{\\x0c\\xcb\\xc6\\x9b\\xa0\\xc6Y\\x9b\\xc9\\xf1%\\x7f\\x05\\xd2O\\xfd\\x7fp@h\\x8f\\x81s\\x9co\\xa6\\xe5\\xc0\\x08\\xa8\\x05\\x1f7\\xff\\x05\\x05k\\x9a\\xb9g:\\x95\\xe6\\xbc\\x8f\"\\xb1L\\x91 \\xa9\\xba\\xcbQ\\\\\\x15\\xbaO\\xddu\\xbbW\\xf0\\xd9hT\\xaf\\x94+\\x18\\x00\\xa4\\xb9\\xec\\xdd\\xf7b\\xbb+mo',\n        constraints={'min_size': 41, 'max_size': 141},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-2969,\n        constraints={'min_value': -32067,\n         'max_value': None,\n         'shrink_towards': -59,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-24031,\n        constraints={'min_value': None,\n         'max_value': -12738,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=-23725,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('b', 0, 3)),\n                                    (('a', 0, 0), ('c', 1, 0)),\n                                    (('a', 0, 3), ('a', 2, 0)),\n                                    (('a', 0, 3), ('b', 3, 2)),\n                                    (('a', 1, 0), ('a', 2, 3)),\n                                    (('a', 1, 1), ('c', 3, 3)),\n                                    (('a', 2, 1), ('a', 3, 3)),\n                                    (('a', 2, 2), ('a', 2, 2)),\n                                    (('a', 2, 2), ('b', 3, 0)),\n                                    (('a', 2, 2), ('c', 0, 0)),\n                                    (('a', 3, 0), ('a', 0, 3)),\n                                    (('a', 3, 3), ('a', 3, 2)),\n                                    (('a', 3, 3), ('b', 1, 0)),\n                                    (('b', 0, 0), ('a', 1, 2)),\n                                    (('b', 0, 0), ('b', 3, 3)),\n                                    (('b', 0, 2), ('c', 2, 3)),\n                                    (('b', 0, 3), ('c', 0, 1)),\n                                    (('b', 1, 3), ('a', 1, 2)),\n                                    (('b', 2, 0), ('b', 3, 2)),\n                                    (('b', 2, 1), ('b', 1, 0)),\n                                    (('b', 2, 1), ('c', 1, 3)),\n                                    (('b', 2, 3), ('c', 3, 3)),\n                                    (('b', 3, 1), ('c', 2, 3)),\n                                    (('b', 3, 3), ('c', 2, 2)),\n                                    (('c', 1, 1), ('b', 2, 3)),\n                                    (('c', 1, 3), ('b', 2, 0)),\n                                    (('c', 2, 3), ('b', 3, 2)),\n                                    (('c', 3, 0), ('a', 2, 1)),\n                                    (('c', 3, 1), ('c', 1, 3)),\n                                    (('c', 3, 3), ('b', 1, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '\u00b1\\U0003d92b',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'X$\u00f8\u00c9\u00c5': -1.648777397461709e-37,\n       '\u00d7\\x08\u00a4\u00b27z': -19350,\n       'i': -2.2250738585e-313,\n       'e\\x18\\x87\\x8e\\U000cd711\\U00103283|\\U000fcb02R\\x04': -5.063559370984225e-260,\n       '>\u00d9,\\x8f\\U00094282': 8,\n       '+\u00ae\u00bfd\u00d2\\U000c97b7': 2.00001,\n       '\u00e2': 1.182661479963542e-308},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(8030, -16534), (23389, 73)},\n      slice_comments={(-33, -2): '\u00f6', (-53, 296): '\\\\', (3, 10756): '_'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-18, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U00014d10\\U00014d92\\U00014d26\ud86d\udd7a',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [85165,\n                  211765,\n                  338338,\n                  441733,\n                  448735,\n                  458343,\n                  605516,\n                  762687,\n                  899958,\n                  941864,\n                  973493,\n                  981776],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 64},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xf1',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=55903,\n        constraints={'min_value': 24,\n         'max_value': 8_506_482_641_263_151_438,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.8898477111214962},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=189,\n        constraints={'min_value': -16,\n         'max_value': 1_189_425_989,\n         'shrink_towards': 83_308_461_927_266_664_002_328_615_307_812_808_113,\n         'weights': {94: 0.026936432112120226, 234: 0.3880577246485135}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.0233167242552784e+307,\n        constraints={'min_value': 5.508970168783633e+16,\n         'max_value': 7.239410039805237e+307,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.6550750916247016e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.4059579260690601},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'l\\xd80\\xc9\\xb1\\xde\\xfc\\xf6\\xe8V\\xfbB',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.2573754068593475},\n        was_forced=False,\n        index=None)),\n      length=-41,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('c', 0, 1)),\n                                    (('a', 2, 1), ('a', 2, 2)),\n                                    (('b', 1, 0), ('b', 1, 1)),\n                                    (('c', 3, 2), ('a', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\\U000c1de2\u00c9\\x1e',\n      has_discards=True,\n      target_observations={'^\u00ae': -2.220446049250313e-16,\n       '\u00bbD\u00b7\\U00097b93\\x10\\x88\\U000a1e1d_.\\U00033d31\\x02\\U0009db85\\U000695c0\u00dc\\U0005ebe9\\U000137b8\u00e6\\x94': 1},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-2_005_624_535,\n        52_717_031_432_096_433_081_484_830_281_484_102_846),\n       (-29938, 19459),\n       (-13918, 252_196_941_219_814_699),\n       (1024, 40),\n       (1024, 420387929)},\n      slice_comments={(-3169, 512): '\ud888\uddb1\\x08z\\U000c44d7\ud840\udd98F\\U000e187bn\u00d5',\n       (9795,\n        -2_239_439_395_135_733_030): '\u00a1\\U00066f73\u00bf\\U00035da3\\x0cn9\u00ae\\x08\\U00016bda\u00ee_\\U000a9912\\U00096abd5\\U0008fbbd',\n       (512, 31434): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=14, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U0009cef8\\ue4b6\\ue4b7\\U000a7582\\ue4fa\\ue4c3\\ue54a\\ue4a2\\ue51c\\U0006904a\\ue513\\ue51e\\ue4ee\\ue52a\\ue4f4\\ue51a\\ue56b',\n        constraints={'intervals': IntervalSet(\n             build_intervals([58480, 723639, 767456]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.63172985267896},\n        was_forced=False,\n        index=None)),\n      length=-30488,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('a', 1, 0)),\n                                    (('a', 1, 0), ('a', 1, 1)),\n                                    (('a', 2, 1), ('a', 0, 2)),\n                                    (('a', 2, 2), ('a', 1, 3)),\n                                    (('a', 3, 3), ('a', 0, 2)),\n                                    (('b', 0, 1), ('b', 1, 1)),\n                                    (('b', 0, 3), ('a', 2, 0)),\n                                    (('b', 1, 3), ('b', 3, 2)),\n                                    (('b', 2, 3), ('c', 3, 2)),\n                                    (('b', 3, 0), ('c', 1, 1)),\n                                    (('b', 3, 1), ('b', 2, 0)),\n                                    (('b', 3, 2), ('c', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\u00b9\\\\',\n                     [UnicodeTranslateError('\u00f2]\\U00095ac5\\U000aba10\u00ba',\n                                            0,\n                                            0,\n                                            'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_610_888_525, -16), (-90, -59)},\n      slice_comments={(-5549, 1_391_204_673): '\\U000682ff\\x0c\\x90',\n       (-14812, -25611): '\u00ca\u00cep',\n       (9806, -78): 'frontend',\n       (1808, 118): '\u00a1\u00d0j\u00ee'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-70, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=22532,\n        constraints={'min_value': 30,\n         'max_value': 4_334_941_013_454_178_195,\n         'shrink_towards': 26337236,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xc0m\\x01\\xfa\\x18`\\xcaV,>\\xd2\\xf9^\\xfc\\xe6\\xc0\\xd3\\xb6\\xa74\\x1f\\xed0\\x96S }\\x8c-\\xe2[Z\\xe3R\\x92\\xd2\\xc1\\xd6\\x12/\\xa5T9(+f\\xa9u\\xa8\\x06\\x8d\\x1cn\\xf4\\x148D\\x02\\x00\\xd3\\xb3\\xe7\"\\x06\\x82\\x18>\\x0c\\xd2)\\x9f\\xd5\\xa8\\x14\\xd4\\xaf1!\\xf8y\\x88\\xae\\xe9\\xe2\\x98\\xb2\\x96\\x05\\xc4\\xf1\\xd2\"O\\x9b\\xa4\\x1c\\x9f\\xf8\\xcb-\\x97,\\xdd\\x9d\\xf6{\\x12\\x8a\\xf21G\\xd2D\\xa8\\'\\xbc\\x06\\x15\\x01\\x04p\\xc1N\\x80l0\\xd6Q\\x87v\\xaa\\x16\\x14\\xe4K\\xe5\\x95\\xe3\\xf8RF',\n        constraints={'min_size': 41, 'max_size': 141},\n        was_forced=True,\n        index=None)),\n      length=-16438,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\\x1e\u00fd\\x86': -111,\n       '': -4.1487751536161864e+16,\n       '9\u00ec\\x85S\\U0006ed6e\\x14\u00e6\"': -3_373_149_648_677_811_044,\n       '\u00c8\u00df\\U000f7fba': -22,\n       '!\\x0e\u00bc\\x85\\U000c5e61\\x8c/sl\\U00107723\u00c9': 24,\n       '\\\\\u00db\u00dc>a\\x8b': 21797},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-25692, 29617)},\n      slice_comments={(8, 54): 'True',\n       (-14813, 97): '[',\n       (-28, 20): '\u00e0\u00e2\u00d8\ud850\udc74\u00be',\n       (57, -8_022_106_732_512_334_851): '',\n       (-11908, -6865): '\u00f5\u6e56\u00f8\\U000fc34bg\ud84e\udee6\\x90{',\n       (2044, 7769): '[\u00f9',\n       (-32401, -2340): '\u2547',\n       (23189, 15423): 'h',\n       (-989127682,\n        -28587): '\u00b9\\U0001ca8e\\x1d\u00b3,\\x0e\u00b8s\\U00078b9dH\\x1a\\x83\u00c3\\x9f\\U000e444a',\n       (-20616, -28867): 'p',\n       (-26933, 74): '',\n       (-11599, -45): '\\U000bed6f\\x17\\x9c\u00ab\\U000ccc8f\u00cb\\U000f4e46\u00e7\u00bc\\x1c\u00ca',\n       (18571, 5485): '\\x17\\x82\u00df\u00f1\u00a6',\n       (940_305_734_270_495_806, -59): '\u00a2\\U001016bb',\n       (-27566, 29537): '\\U0003d3cc',\n       (-781550248,\n        -12705): '\\U0005a00e]j\u00c2\\U00073aafz\\U00067a7dz\\x81\\x0f\u00eb\\x99'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=50, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\x05',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x19\\x10\\x88',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 4.3648608474805395e-102},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.6558734761241954},\n        was_forced=True,\n        index=None)),\n      length=35,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 0),\n                                     ('a', 3, 0)),\n                                    (('a', 3, 1), ('c', 1, 2)),\n                                    (('b', 0, 1), ('a', 3, 0)),\n                                    (('c', 0, 1), ('a', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\U000d7e31\u00f5',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\U000f96d3\u00d4\\x06qH\u00d3C5,\\U000cc7ae\\x17\\x12H\u00cdu',\n      has_discards=True,\n      target_observations={'\\x9e\u00a6o\\x83': -2.1386953258499743e-164,\n       '': -1.7976931348623157e+308,\n       'X\u00bb\\x94\ud858\uddfd\u00b8O': -21686,\n       \"\u00d9\u00a2'\\U00109386\": -18322,\n       \"\u00a38'\": 32193,\n       'zb\u10e1\u00a60\\x97\\rz\\U000e2a97\u00e5\\x197I\\x1a\u00bd\u00d03c': -87,\n       '\u00f7\u00fb[': 3.021756312314535e+16,\n       '\u00fa\\U000a5526m\\U000967e3\\U000aee16\u00b3': 3.45729564209528e+78,\n       '\\x9c\\U000ca1a5\u00d6\\x13\\U0003f6c3\\x99\u00d97\\x82\u00a7(': 69,\n       '?': -0.3333333333333333,\n       '\\U000be44b\\U000d64b9\u00c9': -4601},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-8450, -10562),\n       (30158, -29374),\n       (3_503_617_168_392_907_007, 1_434_675_960),\n       (5_208_986_683_960_898_775, -72)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-41, context=(), group_elems=()),\n      nodes=(),\n      length=75,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 0),\n                                     ('b', 3, 2)),\n                                    (('a', 3, 0), ('c', 0, 1)),\n                                    (('a', 3, 3), ('b', 2, 0)),\n                                    (('c', 1, 1), ('c', 2, 2)),\n                                    (('c', 1, 3), ('c', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'X\\U000d7755T\u00f7\\x7f\\U000e394e\\U0006e806\\U000682f2\\U0004d138\\U0010de9f\\x01\u00b1\u00c3)L': 2.585960935540136e-142,\n       '/api/tests/': 2.855701572021754e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-4_123_917_818_300_246_326,\n        -82_788_115_008_935_196_200_847_514_419_869_695_538),\n       (-28083, -28828),\n       (-26544, -64),\n       (-24480, -21778),\n       (-17070, -8_627_198_493_003_709_012),\n       (-12803, 2_134_316_895),\n       (-1814, -26545),\n       (-118, -26459),\n       (-54, -95),\n       (29, 62_072_663_909_642_029_608_766_161_419_451_073_402),\n       (35, 28913),\n       (104, -12823),\n       (112, -28551),\n       (125, 748),\n       (2173, -26497),\n       (8827, 26386),\n       (19291, 2793),\n       (29167, 80)},\n      slice_comments={(24397, 4_638_077_978_262_728_746): '\\x08\\x94',\n       (-20226, -12345): 'm\\n\\U000b0309\\x94',\n       (23, 150_620_749_068_024_364_348_227_928_193_843_706_279): 'float',\n       (-9264, 30872): '\\U00080ce8\u00de\\U00078bfd',\n       (-20502, 2_496_128_643_013_537_381): '\u00d72\u00a4',\n       (27347, 42): '\\x8bt\\x8b\u00a8\\x8f',\n       (20798, -51): '\\x97S\\x18\\U000ca9a6',\n       (10427, -19026): '\\U000fe3da\u00d5',\n       (11128, -1_675_029_030): '\u00f6'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-32214, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 1.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=9007199254740992.0,\n        constraints={'min_value': -1.6119732544502432e+16,\n         'max_value': 5.650291369027043e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.1},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.225073858507e-311},\n        was_forced=False,\n        index=None)),\n      length=43,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 0),\n                                     ('a', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00ce\\U0005d6ae>x\\U000d2a62\\U000ea6b2\u00b3\u00fb\ud85f\udd72\\U00072eeb\\U000b86dd',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'r\u00bd\\x85': 7_244_920_961_827_552_487,\n       '\\U0009cde8\\U0005a6db\\n7[\u00c3\u00cc\u00cd\\U00036bf4': -16072,\n       '\u00c8[;\\x8a\\x7f,': -785278341,\n       '\\x9f7g\u00d4\\x10\u00a4V\\x9aB\u00f0\\x12\\U0004dde9N\\U00060358': -4.3730847328649555e+32},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-26655, 22275),\n       (-22995, 14567),\n       (-19254, -26685),\n       (-7210, -8437),\n       (-41, -1071),\n       (4, 3_105_183_594_157_046_564),\n       (48, -179_248_406_890_543_581),\n       (12079, -1587),\n       (23274, -9277),\n       (1_559_804_934_778_284_916, -669),\n       (3_205_918_823_234_128_181, -25337)},\n      slice_comments={(-19612, -4102): '\\x90,\\U00101e9b\\x8cEQ\u00f9L\u00a8',\n       (-29119, -12292): '\\x8e$',\n       (2_243_126_747_039_147_085, 22221): 'NUL',\n       (4527, 24554): '\\U000694b3\u00f3',\n       (-111, -57): '\u00fe\\x81',\n       (86, 1839): '\\x05q\\x7fc\u00b3z\\x10V',\n       (-4974, 6498): '>\\x00b\u00f9\\U0008c792\\x86\u00b67'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=24085, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=18209,\n        constraints={'min_value': -16771,\n         'max_value': 65535,\n         'shrink_towards': -883703899,\n         'weights': {18209: 0.6420481000945673,\n          38540: 0.032102405004728364,\n          12480: 0.04586501161944527}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.3395437965630728},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000cf7ec\\U000e03f2\\U000cf7b6\\U000cf769\\U000cf784\\U000cf742\\U000d462d\\U000de1f0\\U000de613\\U000cf766\\U000cf7fe\\U000cf7d3\\U000cf77f\\U000cf7cc\\U000e31e5\\U000cf751\\U000cf818\\U000cf819\\U000cf74a\\U000d8403\\U000cf7ca\\U000da8e5\\U000cf733\\U000cf7ff\\U000cf78c\\U000cf804\\U000cf744\\U000cf7b2\\U000cf79c\\U000cf73d\\U000cf75b\\U000cf80f\\U000cf75c\\U000e3948\\U000cf73d\\U000cf720\\U000cf7bd\\U000cf776\\U000cf750\\U000cf7e5\\U000cf7cc\\U000cf802\\U000cf730\\U000cf795\\U000cf7d9\\U000cf722\\U000cf77b\\U000cf795\\U000cf812\\U000cf79b\\U000db96c\\U000cf7ea\\U000e0364\\U000cf75e\\U000cf7e4\\U000cf7ad\\U000cf781\\U000cf7e0\\U000cf81c\\U000cf7ad\\U000cf7e8\\U000cf731\\U000da97b\\U000d20ea\\U000cf732\\U000cf7cd\\U000cf7d1\\U000cf760\\U000cf72d\\U000cf7fc\\U000cf7ed\\U000cf811\\U000cf806\\U000cf7fa\\U000cf73f\\U000d7431\\U000de552\\U000cf7c3\\U000e31db',\n        constraints={'intervals': IntervalSet(\n             build_intervals([849694, 935025]),\n         ), 'min_size': 50, 'max_size': 150},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u2793\u27e8\\U00071c08\u2732\\U0005efac\u4677\u2747\u2788\u2796\u2784\u272e\u2745\u279d\u27f9\u27a9\u2765\u275e\ud869\ude4e\u27b6\u271d\u274a\u2718\\U00052050\u2741\\U0006623c\u273e\u27f0\u27b0\u2721\u276c\u2785\u27a4\u276d\u2781\u2710\u2735\u27b7\u27b1\u27ae\u2797\u27e5\u280b\\U0005a6a3\u2753\\U0001a318\u279c\u2809\\U000514c8\u27cb\u273d\u2723\u2756\ud860\udc96\u2755\u2756\u2742\\U000748e3\ud852\udf0b\u27d6\u2745\u277b\\U000440be\u27cb\u2721\\U0003a8dd\u27e6\u2715\u2731\u278c\u27f8\u2762\\U000a4c3c\u272c\u2750\ud84a\ude0c\u2801\\U0009bbcf\u27ed\\U0007248b\\U0005ea42\u27a6\u275d\u2748\\U0009ff9b\u2760\u27d6\u2806\u2775\\U00059473\ud862\ude9e\u27bf\u27b2\\U0003ec24\u27d2\u27b8\u277f\u27a9\\U00051399\u27ae\u27dc\u27c8\u27cb\u2762\u27a0\\U00019cd2\u272e\u2764\u2766\u272a\u2711\u27c3\u27ac\u2792\u27c4\u2783\u27e0\u276a\u2780',\n        constraints={'intervals': IntervalSet(build_intervals([9999, 697567])),\n         'min_size': 43,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-2_054_441_540,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('c', 1, 3)),\n                                    (('a', 0, 1), ('a', 1, 0)),\n                                    (('a', 0, 1), ('b', 0, 0)),\n                                    (('a', 0, 3), ('c', 0, 1)),\n                                    (('a', 1, 2), ('a', 1, 1)),\n                                    (('a', 2, 1), ('b', 0, 0)),\n                                    (('a', 2, 1), ('b', 0, 2)),\n                                    (('a', 3, 1), ('c', 3, 0)),\n                                    (('b', 0, 0), ('b', 1, 3)),\n                                    (('b', 0, 3), ('b', 3, 3)),\n                                    (('b', 2, 0), ('a', 3, 0)),\n                                    (('b', 2, 0), ('c', 2, 2)),\n                                    (('b', 3, 3), ('b', 3, 3)),\n                                    (('c', 1, 1), ('b', 1, 3)),\n                                    (('c', 2, 0), ('c', 0, 1)),\n                                    (('c', 3, 0), ('b', 0, 1)),\n                                    (('c', 3, 2), ('b', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'K\\U0004d390\\U0006ca5b\u00d9bv\\x9c\\U0004cb3eW\\x85': 40},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-23092, -36)},\n      slice_comments={(82, -13247): '\\x18\\tg\\x1a\u00dd',\n       (75, 4740): 'X\\x1b\\x95\\x92+\\U000f626c\\x18\\x05\\U000faec4'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-70, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.720732688760459e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=5012569179429005.0,\n        constraints={'min_value': 0.99999,\n         'max_value': 9007199254740992.0,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2076109924228942.5},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.512920394807329e+307,\n        constraints={'min_value': 0.5,\n         'max_value': 3.815304380685231e+307,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.6794300199231854e+307},\n        was_forced=True,\n        index=None)),\n      length=-24336,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 0, 2),\n                                     ('b', 1, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\\U000ba211\u00c2\u00bf\u00a7\\U000b6782z\\U0004d421y<': 30233,\n       '': 5.838411303501065e-118},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-169_898_060_798_283_457_037_636_077_721_740_149_453,\n        2_137_888_723),\n       (-226301218, -9938),\n       (-31778, -26099),\n       (-25310, 17597),\n       (-25098, -7304),\n       (-18292, -28163),\n       (-7417, -11003),\n       (-6515, 87),\n       (-1561, 18041),\n       (-51, -83),\n       (-15, -20),\n       (-2, 17125),\n       (1, -27497),\n       (20, 48),\n       (95, -22199),\n       (404, 404),\n       (3077, 26150),\n       (7980, 8401),\n       (8105, -25914),\n       (13334, 300),\n       (13500, -34),\n       (16567, -8248),\n       (22427, -4840),\n       (24520, 14355),\n       (25720, 31832),\n       (28373, 16396),\n       (29472, 9871),\n       (425531908, -27163),\n       (1_263_646_403, 404),\n       (491_971_685_704_259_568_519_371_583_760_136_911,\n        8_862_200_447_905_003_851)},\n      slice_comments={(-1068,\n        -7_622_637_848_064_291_012): '\\x06~\u88e0\u00da\\U000d6c99\\x13W<',\n       (-20707,\n        6316): '\\U000ea8e9\\x8bR\\x0c\\x8c+\u00dd\u00eb\u00fe\\U0010ffa9\\xadU\u00c3\u00ac\\U000422f9\u00d1'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.022560374985914677,
          "overall:gc": 0.0003421669825911522,
          "generate:args": 0.20462741813389584
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 2,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 2,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878934.238353
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-2704, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\ud443\ud48c\\U000f6525\ud4d3\\U0010ea7a\ud48f\ud470\ud855\udfe7\ud480\ud420\ud4ae\ud49b\ud3f0\ud43a\ud413\ud494\ud3f8\ud443\ud494\ud3f1\ud4ae\ud49b\ud4bd\ud410\ud4d8\ud4ce\ud437\ud489\ud47e\ud428\\U000fd1c8',\n        constraints={'intervals': IntervalSet(\n             build_intervals([54250, 200343, 461612, 871789, 909380, 1114111]),\n         ), 'min_size': 26, 'max_size': 69},\n        was_forced=False,\n        index=None),),\n      length=-269373372,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 2),\n                                     ('a', 0, 0)),\n                                    (('a', 3, 1), ('a', 3, 2)),\n                                    (('b', 2, 0), ('c', 0, 1)),\n                                    (('c', 0, 2), ('a', 3, 2)),\n                                    (('c', 1, 1), ('b', 1, 3)),\n                                    (('c', 2, 0), ('a', 2, 1)),\n                                    (('c', 3, 1), ('c', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('', 0, 0, 'reason'),\n      expected_traceback='',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(38, 21294), (554, 29529), (7605, 56), (16878, -27387)},\n      slice_comments={(70_800_587_646_983_885_405_028_443_900_185_113_372,\n        -54): '`\u00eb\u40d4Q\\x1d\u00a9',\n       (116, 8192): '\u00d3\u00fb',\n       (9, -58): '--hypothesis-profile',\n       (65, 63): '\u00ca\\U0005815ad\\U0009fd3b\u00e4\\U000383b8UA\\x81\\U000d1d03\\x90\\x9d',\n       (1_769_722_017,\n        84): 'DB\u00d0\\x13\\U000f2132\\x86K\\U00092daa\\xad\u00b6\\U0003df95&>\\U000ae8ad\\U001095e2.t\u00a4\\U000ea4ee\u00cdE'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=20635, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=1.2691156125797534e+308,\n        constraints={'min_value': 4.520788396671191e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 7.087627077568772e+307},\n        was_forced=True,\n        index=None),),\n      length=-9029,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('a', 3, 2)),\n                                    (('a', 2, 2), ('a', 1, 3)),\n                                    (('a', 2, 3), ('c', 1, 1)),\n                                    (('a', 3, 2), ('b', 0, 3)),\n                                    (('a', 3, 2), ('b', 1, 2)),\n                                    (('b', 1, 2), ('c', 0, 2)),\n                                    (('b', 2, 3), ('c', 2, 3)),\n                                    (('c', 0, 1), ('c', 0, 1)),\n                                    (('c', 3, 0), ('c', 3, 3)),\n                                    (('c', 3, 2), ('b', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\u00a2\\U00043f04',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('\\U00099bb9\\x11\u00d1^\u00fd\u00ae\\x8f\u00a6\u00fc\\x1a\u00d0/#6\\U000534e3\"w\\U000d6321`\\x16\u00e1\\n\\x86B\\U00077c78x\\x8e\u00dd',\n                                            0,\n                                            0,\n                                            'reason')]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x9a\\x05\u00ca\\x01': 1.0574646596856037e-63,\n       '\u00ee\\x94\\x8e\u00f8B': 0.0,\n       '': -77,\n       'Ea\\x0b|': -5.46117486191717e+16,\n       '%': 9.076216430361316e-151,\n       '\\x14 ': -74,\n       '\\x97p.ye\\x10\u00eav\\U00034f9c\\U00057ce0': 2.919620267509708e-148,\n       't\\U0001b4a0': 1.0137887630036773e-56,\n       '\\U0009030c': -19619,\n       '\\x96': -56},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(20591, -11046)},\n      slice_comments={(-15, -241754087): '\\U000a917d_Y\\U000b71ed\u00a5oh\u00a2/',\n       (-5_628_052_279_266_519_706, -32589): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-17323, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xf1',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-8637,\n        constraints={'min_value': -9778,\n         'max_value': None,\n         'shrink_towards': -28794,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=5,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 0),\n                                     ('b', 0, 0)),\n                                    (('c', 0, 1), ('a', 0, 1)),\n                                    (('c', 2, 0), ('c', 3, 1)),\n                                    (('c', 3, 2), ('c', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\U0009e298\u00a8\\x0e\\x10\u00c3:\u00bcs\u00ec\u00b8\\x18C\u00a7\\x07\u00ff\\U00034ff8F\\U000547cb\u00d7Hr\u00e0H',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback='\\x13H^\\U000528b4\\U000588be\\U000c7ca2\\x91',\n      has_discards=False,\n      target_observations={'\u00d0\\U000b9c80\u00a1&\u00f9': -1.2688156140940524e+151,\n       '\\x15': -4.755769153380921e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-153_527_085_459_960_783_412_068_562_917_341_411_042,\n        2_618_992_594_988_578_984),\n       (-25155, -1_465_319_950),\n       (-20478, -832),\n       (-29, 20619),\n       (45, 35_914_613_289_441_375_379_967_419_075_878_087_054),\n       (3011, 1024),\n       (4508, 2),\n       (22371, 5),\n       (27829, 9877),\n       (2_060_864_129, -111)},\n      slice_comments={(-218_441_429_786_221_133, 113): '\u00daDJLy\\xade',\n       (-111,\n        -71): '\\x93\u00c7s\\x07\\U0009446c\u00b6=\\U000447bc\\U00089335S\u00fa\\x822\u00f6W\\x9c\\x8c{\u00e9',\n       (39_118_972_055_670_696_545_048_384_569_072_047_822,\n        -116): '\u00b4(\\U000375df\u00ce\\U000fb98d\\U000bf17d\u00f5T2}U9\u00f2\\U0007d137\u2e36\\U0009c8de\\U000f7b41\u00cb',\n       (14387, 10180): '\\xa0\u00e0\u00f3\u00c6\u00fc\u00e8\\x7f\\x037\u00e9u'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-31375, context=(), group_elems=()),\n      nodes=(),\n      length=4_356_794_373_078_443_030,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 1, 2),\n                                     ('a', 1, 3)),\n                                    (('c', 2, 3), ('a', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-76, 29753),\n       (-33, 31),\n       (-1, -30714),\n       (88, 1_271_249_277),\n       (31851, 30)},\n      slice_comments={(-30451, 74): '\\x0c',\n       (-67, -22810): 'C',\n       (-7_645_168_094_236_662_014,\n        74): '!c\u00f9\u00b3\\U00047e6d)\u00b7\u00d4\\U000f4664\\U000f97e8^\u00de\u00e6\u00fd'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=3384, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=1061,\n        constraints={'min_value': 1060,\n         'max_value': 1061,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b's',\n        constraints={'min_size': 0, 'max_size': 66},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xe9o\\xa0\\xa2\\xdeag\\xe1\\x82\\x95\\xcb\\x9f8v\\xd9\\xf1\\x1a\\xe1\\x03\\xc5_\\xfc\\x9a\\xfa\\xe1\\xb1\\x01\\xfc\\xb5\\xad4X\\xc6\\xab',\n        constraints={'min_size': 9, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-1_782_325_057,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 2, 3),\n                                     ('b', 1, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\U000db66a\ubf8b\u00d4$',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='',\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-6_680_999_319_024_874_912, 264),\n       (-30021, -4013),\n       (-27246, -7736),\n       (-26686, 86),\n       (-19054, 8000),\n       (-10050, 5506),\n       (-7544, -48),\n       (-53, 7839),\n       (-42, 87094490),\n       (7, 30649),\n       (49, -31336),\n       (117, -3642),\n       (2171, 27357),\n       (20452, 6831),\n       (24527, 21077),\n       (28751, -32),\n       (356290516, 1_268_192_912)},\n      slice_comments={(15764, 23982): 'Q\u00b1\u00db\\U000a0380X',\n       (15812, -29285): '',\n       (23150, 855): '\\x85\\x03\\x89\u00fc'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-26375, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-6.042426545523186e-148,\n        constraints={'min_value': -6.0424265455231863e-148,\n         'max_value': -6.042426545523186e-148,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 8.548805001816891e-150},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0004475d\\U000447f7\\U0008cb88',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [280368, 317813, 519720, 851625, 929868, 971664, 1006278],\n             ),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.4526158153901749e+307,\n        constraints={'min_value': 2.2204944898081748e+16,\n         'max_value': 8.565711537481679e+307,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.4526158153901749e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.407896474937818e+308,\n        constraints={'min_value': 1.0280498382945275e-183,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.5865333707414176e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -1.319752419629666e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 3.5191556508946226e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-43130,\n        constraints={'min_value': None,\n         'max_value': -32567,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u3412',\n        constraints={'intervals': IntervalSet(\n             build_intervals([13212, 129464, 257314, 387251, 892676]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-14444,\n        constraints={'min_value': None,\n         'max_value': -14405,\n         'shrink_towards': -24853,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8901299158634397},\n        was_forced=True,\n        index=None)),\n      length=53,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='null',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-801848210, -24534): '\\U000dcde9\u00bf\ud878\ude65\\U000bf485\u00eb\u00b8)',\n       (28253, 21493): '\\x85',\n       (21785, 36): '\u00bagE\u00a1R\\x812',\n       (47,\n        -13334): '\\U000ce825#\\x9c$\\\\\\U0006f484\\U0005a2f3\u00c1)^\u00ee\\t&\\x84\u00f6w\u00ea\\x8dD\u00d3\\tun\\U000a6e34\u00b4',\n       (-16567, 26): 'd!\u00f4\\x9d\\U000e5da6',\n       (-2_447_499_866_564_007_683, -3_091_018_219_044_056_656): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=29983, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.3333333333333333},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xe7\\x88\\xa0;\\xda\\xf8\\x99\\xf2\\xe9\\xafD\\x934&\\xa2\\x91:\\x83\\xac\\x1d\\xc2q-\\x0c\\xbe\\x1d\\xb7\\x06s\\x8f\\x89\\xba\\xabP\\xf7\\xc8\\x07\\xc4\\x18(\\xb4\\xfeq-\\x06\\x99J\\xd5\\x9d\\xd0\\xf7Gk\\x8e\\xefz`\\x13\\xf1',\n        constraints={'min_size': 36, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x16f\\x99\\xb1\\x14`\\x8eb\\xb2r\\x833\\xbf\\x92\\xe8/\\xdfY\\x06\\xd9/\\x89?\\xee\\x0cH\\xe7\\xcc\\xd1\\x19\\xce\\xe1/\\x15\\x02\\xab\\xf0[\\xbdrMX\\xff\\x19!m\\xbb\\xa1\\xf5\\x1c\\xee\\x9f\\xce\\xe7U~\\x90\\xc0\\x03\\xf7\\xefSXY\"\\x11\\xfd\\xe9\\xa5\\x0eC\\xbc\\x1a\\x84',\n        constraints={'min_size': 45, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-3_280_255_272_896_596_674,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\u00f8',\n      has_discards=True,\n      target_observations={'N\u00be': 684494239425477.0,\n       'rV\\x9c\\U0004f475\\x98\\U0001ac17b\\x83p\u00f2o\u00ee\u00dd\\x14\\x16\\x83': 3.1697385380897748e+16,\n       '': 17407,\n       '\u00ce\\x95+A\\U000671e4\\x91\\x01,zN\\x92': 6.723205616312552e+16,\n       '\\U001065c9': -9.964765305633771e-298,\n       '\\r\\U000886b0\u00da\u00ca\\x8d\\U00060dc3\\x0f\u00e3\\x98\\x8b': -1.1206753058910021e-156,\n       '\\x81': 709,\n       '\u00ba\\U000f70e7': 0.5},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-39_856_643_529_262_601, -713_761_674_099_465_823),\n       (-313008605, -31782),\n       (-30179, 40),\n       (-94, 18831),\n       (-1, 404),\n       (512, 1_863_959_243_001_898_650),\n       (25739, 53)},\n      slice_comments={(29218, 856): 'b\\x93Q\\x9a\\x9351HT'},\n      misaligned_at=None,\n      cannot_proceed_scope='other')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0022368329809978604,
          "overall:gc": 0.0,
          "generate:args": 0.056529373629018664
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878928.359047
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=125, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'e',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.4485148880439845e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 5.960464477539063e-08},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -1.55073232156868e+220,\n         'max_value': 1.5333507291613465e-232,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.553784984005615e+219},\n        was_forced=True,\n        index=None)),\n      length=-9413,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('b', 3, 0)),\n                                    (('b', 1, 1), ('a', 2, 2)),\n                                    (('c', 3, 1), ('c', 1, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('1\u00e5\\U00046df9',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '\u00e4\\x80\\x8e\u00f6\\x1a\u00dfJ\u00a6',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='\\x80\\U0009fd58\\x9f\u00d0',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(33, -5_271_482_700_802_502_329)},\n      slice_comments={(13029, 9842): '\\x1c\u00a6]\u00e9z\u00a5\\x02P*\\U00087a6c',\n       (-10615, -73): '\\x0f\\x1a',\n       (777336785, -26901): '_\\x00-\u00f0\u00f6',\n       (-98, -26359): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=53, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([275686, 447222]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-6747,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -4_881_927_904_662_368_239,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=3123,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('c', 2, 2)),\n                                    (('a', 3, 0), ('c', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('y', 0, 0, 'reason'),\n      expected_traceback='\\x99S',\n      has_discards=True,\n      target_observations={'\\x8eV': 2.220446049250313e-16,\n       '\\x1a': 8421,\n       '\\U000e8f8f\u00c9~\\U0003366eA?\\x9c}q\\x13\\x07\\x84\\xa0\u00c8\u00cd\\\\\u00e6\u00c6\\U0004c7e8\\U0003f151\\U000ef1ff\\x9ez\u00ee\u00d5\\x1a\u00ee': 575304591},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(8686, -76): '\\x1dw\u00a2',\n       (-7356, 32146): '\\U000a5c4aT\ud81a\udd0e',\n       (39, 12157): 'U6\u00e2\u00be\u00bfx\u00a9\\U0007b575?\\x98',\n       (-6_438_075_323_168_952_987,\n        -32690): '\\U000638de\\x9d\u00af\\U0008b7d0M?\\U000b4561\u00dd',\n       (56, -124): '',\n       (-1451, 1024): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=9006, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'E\\xde\\xf8\\xa2e\\xe4\\x07\\xb3\\xbe\\x85\\xf6\\xf1\\xff1\\xb98\\x84x%\\x10\\x91*v\\xf8\\x0e0\\x85\\xa1T+\\x95\\xe6\\x9f\\xcf\\x080\\x03\\xd5\\xa9\\x94\\xad\\xc6[^\\xad\\xb9\\xaf\\xf4\\x96\\x92,\\xa9\\xea*\\x9b\\xfa\\x85\\x1cz\\xbdH9>\\xec{\\x1e\\xa7\\x87o\\xb2\\x18\\x11{\\x87\\x80n\\xd2qH\\xbaD\\x9a\\xf3',\n        constraints={'min_size': 34, 'max_size': 134},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u01a4\u024f\u0220\\U0009f204\u0286\u0248\u025a\u0268\u0234\u0202\\U000ae360\u0282\u0285\\U000a4ba7\u0293\u0252\u0291\u01de\u01a9\u028f\u01a7\u0289\u0268\\U00077f0b\u024a\u0216\u0195\\U000e27a3\u01af\\U000d71be\u023a\u0269\u01fa\u0224\u01ad\u0204\u01f9\\U000826f5\u01a1\u0199\\U000ee951\u0245\u023b\u024e\\U0003c5b7\\U0008890a\u01e8\u0220\u0225',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [404,\n                  38720,\n                  233861,\n                  319286,\n                  454596,\n                  521191,\n                  532878,\n                  906131,\n                  927342,\n                  1053593],\n             ),\n         ),\n         'min_size': 25,\n         'max_size': 125},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1.7976931348623157e+308,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.6991559271074507e+308},\n        was_forced=True,\n        index=None)),\n      length=-96,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 2),\n                                     ('c', 3, 1)),\n                                    (('b', 1, 3), ('b', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\U00080f4c\\U000cd9bd\u00db\u00bc^\u00a95\u00e2\u00f5\\xad',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='+cu\u00aa\u00e5\\x11K\\U000f9f18',\n      has_discards=True,\n      target_observations={'A\\x1f\\x98': -29199,\n       '\\U00049130\u00ed7\\U000b9d6c\u00b1\\xad\\x11\\x94M\ud888\udd48': -126382670,\n       '\\x1fX\\U00064467\u00f9\\x85\\x189\\x82\u00ddJ\ud859\ude1crC\u00c5\u00d9\u00eb': 5.931264502247006e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-21320, 20317),\n       (-7339, 4_196_817_775_378_740_637),\n       (-6, -42),\n       (107, 8192),\n       (712080437, 906351403),\n       (152_594_532_183_798_844_532_065_267_985_803_147_246, -26401)},\n      slice_comments={(-14447,\n        -7535): '\\x8bXJ;UX\u00c48\\x9f\\x8a\\U000844a6\u00f5\u00d4G)\\x01\\x03\\U000fc274\u00fd(\\x12\\x99\\x94',\n       (8016, 19): '\\x81\\x19\\x90\\U000b7eaf\u00e8B\\x87\u00e9x\u8f6b\\U00053da8`\u00cf\\x9a',\n       (-2_096_439_261_195_931_062, -24368): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-73, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.6302891073231852},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\ua9da\ua99a\ua9d4\ua9e9\ua9bf\ua9b9\\U0008e0ce\uaa06\ua9c5\ua9bb\ua9b4\uaa75\uaa04\\U000897be\ua9a7\uaa08\\ua9dd\uaa4a\ua99d\uaa35\ua9d1\uaa35\ua9d6\ua9f7\uaa52\uaa73\\U0001a27b\uaa40\ua9f2\\U0007ee96\ua99a\\ua9dd\uaa26\ua9b7\ua9e0\\U000644ec\\ua97d\ua9eb\\U00083176\\U0001c5fe\\ua9ff',\n        constraints={'intervals': IntervalSet(\n             build_intervals([43383, 126860, 281035, 605269, 917818]),\n         ), 'min_size': 27, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00033876\\U00033853\\U000338cd\\U0003390d\\U0004b287\\U0003389a\\U000338c8\\U00033914\\U0003388b',\n        constraints={'intervals': IntervalSet(\n             build_intervals([211011, 402415, 448857, 461022, 976649]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=6.220969088593188e+16,\n        constraints={'min_value': 9.385590776269102e-225,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.2140066044640884e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xee\\xc6\\x96,aL *\\xfb\\x8a\\x8c\\x8b\\xd2\\x92\\xebu\\x95\\x89\\x91\\x9a\\x1d\\xd8\\x1dR\\xe0T\\xbcj\\x1duP',\n        constraints={'min_size': 3, 'max_size': 103},\n        was_forced=True,\n        index=None)),\n      length=22,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 3),\n                                     ('c', 3, 0)),\n                                    (('a', 3, 1), ('c', 3, 1)),\n                                    (('c', 0, 2), ('c', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\u00b0+Wx)8\\U0009acb9\u00a6\u00d3\\x1b\\xad\\U00046059i',\n      has_discards=False,\n      target_observations={'\\x11\\x89\u00a1': -13683,\n       '\\U0001e8e3\\x8c\\x11\u00ed\u00b1\\U0006d07a': 0.0,\n       '\u00a52\\U000e5824\u00c9\\x8d\\x80=4\\x9f1\\U0005271c}\\x10\u00db\\U000fca01\u00f3\\x87\u00e8': 16946,\n       'ascii': 17737,\n       'differing_database': 4.3148054393673814e+43,\n       '\\U00045958\u00f4\\x05.': -26259,\n       '': 47,\n       'B\\U000d5447': -29910,\n       '0=w': -123,\n       '\\U000f2fdb\\U000e3885\\x04\\U00061db1R\u00d7': -19759,\n       'm\u00af': -nan,\n       '\\x9b~\\U0009bdf7W\\U00071f56': -7387,\n       '\\U00073f23\\x1c\u60153\u00c5\\U0003ae94\\U000a8c70\u00d3': 50,\n       '\u00d5\\x18': 8,\n       '3\\x9f\\U0006536c\u00b8\u00f1R\\x93\\U0008bf25\u00dd': 28295,\n       '\u00bf\u00e9\\x19/\ud851\udd890': 4.636862112793409e-220,\n       '\\U0007d812\u00bd\u00f0': -11037,\n       '\u00bc\\x85\\U000e8cd4\ud83c\udf06\\U0005618d\\x98\\U000b0a2c\u00e4\ud885\udc29\u00fb\\x9f': 7.452219563094604e-210,\n       \"\\U000f9ee1\\x02\\U00057138\\x03\\U000641eb'\u00b3\\U000ddc6b\u00cb\\U0005b5fc'\": -6.47084127193381e-110,\n       '\\U000617e0': 4472,\n       '\\x800S \u00e0\u00e6\u00b5\\U00085a9d\\x03\u00c8\\x17\\x80\\x88WC\\U00034123\\x8dp\\xa0\u00b7\u00db\\x81\u00be': 1.153894302126392e-177,\n       '\\x05\u00c9\u00f2\\x99': 8_816_181_994_089_516_187,\n       '\u00de\u00fd\u00ee`& \u00b2': -19333,\n       'An\u00cc\\x13': 300,\n       '\\U001040d8+': 1.0766818118011994e-141,\n       '\\x01,': -2.5691117609063136e+16,\n       '\\U000d48ff6': 1.7361895484704228e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-16879, 586724622), (16810, -7_430_871_780_097_433_039)},\n      slice_comments={(-13, 45): '`\\U0007ff49\u00d2\u00fa\u00c8\u00b8\\U0008bc17F\\n\\t',\n       (-6_903_314_470_212_521_597, -112): 'T\\x06\u00ef\\x85',\n       (-460102814, -23150): 'h/8\u00ff\u00d3\\U000e2f14\u00d1',\n       (13654, -15986): '\u00b3W\u00e5&'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=21598, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U0001aebc\\U0001af78\\U0001af79\\U0001aece\\U0001ae91\\U0001aeed\ud868\udd51\\U000571ac\\U0005fc73',\n        constraints={'intervals': IntervalSet(\n             build_intervals([110204, 407114]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),),\n      length=23586,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('b', 0, 0)),\n                                    (('a', 0, 0), ('b', 3, 2)),\n                                    (('a', 0, 2), ('a', 1, 2)),\n                                    (('a', 0, 2), ('a', 3, 2)),\n                                    (('a', 0, 3), ('b', 3, 2)),\n                                    (('a', 2, 2), ('b', 1, 3)),\n                                    (('b', 2, 0), ('c', 2, 3)),\n                                    (('b', 2, 2), ('c', 3, 2)),\n                                    (('b', 3, 0), ('a', 1, 1)),\n                                    (('b', 3, 0), ('c', 3, 0)),\n                                    (('c', 0, 0), ('c', 3, 3)),\n                                    (('c', 0, 2), ('a', 2, 2)),\n                                    (('c', 1, 1), ('a', 2, 3)),\n                                    (('c', 1, 1), ('a', 3, 2)),\n                                    (('c', 1, 2), ('b', 0, 1)),\n                                    (('c', 1, 2), ('c', 2, 0)),\n                                    (('c', 3, 2), ('b', 3, 3)),\n                                    (('c', 3, 2), ('c', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-18690, 3432),\n       (-126, -15682),\n       (117, 1831),\n       (4751, -10710),\n       (19858, 7),\n       (24085, 29231),\n       (26198, -34073073),\n       (30006, 1_762_967_639)},\n      slice_comments={(116, 10050): '\u00bf\u00aa\u00cdm\\U000c5ed7)\u00cdG\u00bc\u00eeex',\n       (98,\n        -23505): '\u00a3\u00f5\\U000f9b5d\u00e8\\U00041bd7\u00fb\\x16\\U00075aa7\\U000c2338#Z\u00bd\u00f9\u00barhsU\u00ddhj\\x15\\x95\\U0004127e\\U00070843',\n       (6256, -4875): '',\n       (-22699, -481354838): 'PORT',\n       (38, -45_707_925_799_148_545_051_114_390_543_436_719_745): '',\n       (2_414_389_242_783_331_376, -10467): '\\U0009e8a71\u00fbK\u00f2',\n       (2374, -65): '',\n       (1275, 65535): 'b\\U00012a04\\x04'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.006638791994191706,
          "overall:gc": 0.0,
          "generate:args": 0.04266879515489563
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878948.69279
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=109, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\\\-w/\\xde\\xe9',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u00d1\\x82\\x82\\x8c\\U000487e4\\U0002ff6c\u00b3\\x95\u00b2=\\x9ad\\x1e/\u43e4\\U000c74b92\ud863\udf856\\U000ac171}\u00bcM\u00b2\\U000b3ef4\u00c6\\x9d:\\U000b9313\\U0005ce07\u00f3}\\U000b0c36K\u00d5\\x14F\u00a3\\x9dZ}\ud863\udcdc\\U00033aceS\\x19\\U000c4bf0\u00f9\\x1d\u9142JV\\U0004a881\u00b6Oa\\x18\u00fc(\\x1a\\x802Daz\u00f7\u00b2\u00f9.\\U000c1404fo\u00f8\u00f2\\U00043957]SI\\U0004f240\u00a3Z\u00eb\u00c3\u00f2\\x08\\x83C\\U000bd3e7\u00c4\u00eb\\x0b\u00fe\\x97\\x0c\u00aa\\x7f\\x0ff\u00dd5\\U000b6843e\u00d5\\x94\u00bc\u00f9\\U000450eb\\x85\u00d6\\x1b\u9672\u00ef\\U000a94fc\"vkY\\U0004de077=\\x8b\u00ab\\U000b4e20Z\\U000cc21f\u00fa\\U000cfda4v\u00d5\\x06\\t\\U000bbd4d\\x96\u00d6\ud883\udf4ar\u00d2\u00c8\u00a8\\U00056f3f\\U000458b2N\ud85f\udeea!\\U000c27ac-\\x04',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1,\n                  65535,\n                  154819,\n                  237999,\n                  267150,\n                  382939,\n                  679815,\n                  869633,\n                  886540],\n             ),\n         ),\n         'min_size': 44,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=4.3422027083219907e+307,\n        constraints={'min_value': 0.5,\n         'max_value': 6.737320132094653e+307,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 3.93962327854713e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00016d8e\\U00016d29\\U00016cdc\\U00016cc9\\U00016cc0\\U00016cc7\\U00016d1d\\U00016cc7\\U00016c94\\U0009cd40\\U00016cbc\\U000667ed\\U00016d7b\\U000fec92\\U00016d60\\U00016d02\\U00016d34\\U00016d4b\\U00016cab\\U00100fe5\\U000e6b71\\U00016d4f\\U00016cb6\\U00016d8b\\U00016cbd\\U00016cac\\U0010087a\\U00016d0c',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [93330,\n                  219595,\n                  223874,\n                  229017,\n                  381637,\n                  427227,\n                  438762,\n                  510747,\n                  534023,\n                  605842,\n                  642018,\n                  737118,\n                  894484,\n                  958446,\n                  1012584,\n                  1017868,\n                  1021933,\n                  1081937],\n             ),\n         ),\n         'min_size': 20,\n         'max_size': 120},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000f88aa',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [26996,\n                  54624,\n                  65535,\n                  193640,\n                  215037,\n                  260368,\n                  283684,\n                  380069,\n                  382492,\n                  413662,\n                  445293,\n                  612355,\n                  767975,\n                  850696,\n                  1005399,\n                  1066413,\n                  1105467],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 2},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\ud8bcF\\x8e',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  57243,\n                  507733,\n                  664986,\n                  684960,\n                  718739,\n                  734877,\n                  780505,\n                  818758],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b' \\xf1\\x17\\x9f\\xaa\\xa4\\x03\\x9d\\x02\\xdb\\x84WK\\xb4\\x1e\\xcf\\x0fj\\x19XpY\\x016\\xa3\\x1e\\tX}\\xdbk\\xbd\\xf0\\xd5yh\\x0ft\\xac\\x9e%\\xfa`U\\xd51\\x82Q\\xb16\\xe0\\xeb\\xb4\\x1c',\n        constraints={'min_size': 49, 'max_size': 149},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([9999, 447342, 460639, 483213, 819228, 1025494]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u04b6\\U000d092a\ud877\udf61\u0431\u04b0\u0490\u042f\u7d45\\U00019e66\\U000cfd27\u0453\u04f1\u0406\u0442\u044f\ud858\udd98\u046d\u044f\u0424\u04f2\u04ef\\U00087c5c\u04c5\u042c\\U0005a050\u046d\u041c\u043d\u0492\u0452\u04cb\u041f\u04c6\\U0009c6c4\u04dd\u4e9c\u047e\u041c\u0492\ud858\udfcf\\U00052e8d\u0412\u4a56\u046c\\U00082338\u0412\u049d\u0443\u04ce\u0416\\U00037530\u0496\\U000594b3\u048e\u043c\u04c0\u049c\u04df\u04a1\u043f\u0449\\U0009dd90\u04b1\\U000590b8\u04ce\u047b\u0458\u04a6\\U00081781\\U0009bd5f\u045c\u04f9\u04bb\u044f\u04d6\u37f6\\U0009c790\u0401\u0454\u0454',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1024,\n                  254543,\n                  325148,\n                  391750,\n                  495350,\n                  565554,\n                  597688,\n                  605487,\n                  634538,\n                  670060,\n                  673541,\n                  698959,\n                  851070,\n                  906633,\n                  942091,\n                  976740,\n                  1014645],\n             ),\n         ),\n         'min_size': 27,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=8611063049273707.0,\n        constraints={'min_value': 0.5,\n         'max_value': 1.6038678460897628e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 8611063049273707.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0003863d\\U000475fb\\U0003863c\\U00038602\\U0003857e\\U00063901\\U000385a1\\U00038631\\U00053e8b\\U00038622\\U00038595\\U00038659\\U000385e8\\U000385ef\\U000385c1\\U0005c120\\U000385cc\\U00040774\\U00051a03\\U0003860e\\U00043b93\\U000385c1\\U0003864c\\U000385c0\\U00038581\\U00038598\\U000385b5\\U000385b3\\U00041c58\\U000686e0\\U00038637',\n        constraints={'intervals': IntervalSet(\n             build_intervals([230753, 427845, 621975]),\n         ), 'min_size': 24, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xbd\\x12\\xe5\\xb7\\x92\\xa7\\xc2\\xf7\\xa9\\x04VGJC\\xefgYVV',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.020314427996027454},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.2250738585e-313},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 2.120560141117293e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.076571501766492e+133},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'M|\\xe1\\xca\\x9b\\xc1\\x81\\xb7C\\x86\\x15',\n        constraints={'min_size': 5, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-43073,\n        constraints={'min_value': None,\n         'max_value': -22728,\n         'shrink_towards': -2743,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.4171263908841376e-114},\n        was_forced=True,\n        index=None)),\n      length=5927,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 1, 1),\n                                     ('c', 3, 2)),\n                                    (('c', 0, 1), ('a', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00e3\\x913\\x1f)om',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'i': -8_651_801_902_103_866_236,\n       '': 5.755129642148399e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-280, -1_845_139_035),\n       (9, -53),\n       (17018, -9109),\n       (23695, 65535),\n       (30051, 836285411),\n       (612400079, -98),\n       (1_951_457_615, 23276)},\n      slice_comments={(21, 23): '25.05.01',\n       (-10560, -18180): '',\n       (88, 78): '+#\ud83c\udf5e',\n       (-88, -26725): '\u00c6',\n       (-3557, 300): '\\x1e\\x04\\U000ed354\u00dc\\U000a64c0_REBS\uc54c\\x1d^p\u00ee(\\x96-\u00ff',\n       (-2711, -27543): '\"\\U0007c344\\x99',\n       (18892, -31131): '\u00c4\\r\\x15\u00d2\\x8e'},\n      misaligned_at=None,\n      cannot_proceed_scope='other')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.000753208005335182,
          "overall:gc": 0.0,
          "generate:args": 0.026674788910895586
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878927.15799
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-9688, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -2.9531845030602918e+203,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.7689532052144716e-40},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1.7976931348623157e+308,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.005663486294479e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud800\udc23\\U000bdcc6\ud800\udc32',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [65535,\n                  113178,\n                  175433,\n                  207594,\n                  229333,\n                  380409,\n                  464281,\n                  554709,\n                  733788,\n                  918449,\n                  963325,\n                  1025665,\n                  1114110],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=7831,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 1, 0),\n                                     ('b', 2, 0)),\n                                    (('b', 2, 2), ('a', 2, 3)),\n                                    (('c', 1, 2), ('b', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\n(\\x99\\x86\u00e9\\U0009d805\\xa0E\\U000c31d3\\xa0=C\\x92\\x1c',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\u00a9\u00fd\u00d4\u00d4': 29267},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-26295, 72),\n       (-22186, 31593),\n       (-17369, -7_126_136_139_468_180_799),\n       (-120, 72),\n       (-120, 13789),\n       (20920, 8832),\n       (168_644_692_958_828_251_221_615_942_785_380_929_073, 15952)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=19889, context=(), group_elems=()),\n      nodes=(),\n      length=28928,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 1),\n                                     ('a', 3, 2)),\n                                    (('c', 2, 0), ('c', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\u00ea',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '\u00a9\u00ec\\U000e54b9:>j\\x89\\U000bdd5b\\x9dH\u00f0\\n',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('\u00aa\u00fb\\U0006b1ed', 0, 0, 'reason'),\n                      UnicodeTranslateError('\u00ca&', 0, 0, 'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={\"'\": -1.3993093416347728e+242,\n       '\u00d6\\U00040889\u9570\\U000727fc3\\U000c8ae2\u00ceU\u00ea\\x0c\u00bcW\u00a2!\\x9c\u00ee|\u00cf\\u0c70': -56,\n       '5y': 31628,\n       '': -159_947_727_540_622_897_637_725_570_051_755_096_780},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-28104, -10415), (17733, 12542)},\n      slice_comments={(103, 14784): '\u00f0\\U000832b8\\x86\\x02',\n       (121, -18979): '\u00d6\u70a9',\n       (-14803, 95): '\u00cf\u00d4',\n       (1_147_505_537, -10939): '\\x1an\\x1c\\U0010f461'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-11801, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=2.4745295520237273e+117,\n        constraints={'min_value': 0.5,\n         'max_value': 6.343866903167735e+117,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 4.422081885949131e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-1_688_341_528,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=16963,\n        constraints={'min_value': 1790,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u00d3\\x87\\x9a/',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  9668,\n                  173790,\n                  380092,\n                  659835,\n                  662273,\n                  741138,\n                  764823,\n                  871912,\n                  948793,\n                  1041808],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None)),\n      length=-10053,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 1, 3),\n                                     ('b', 1, 1)),\n                                    (('b', 3, 2), ('c', 0, 0)),\n                                    (('c', 1, 2), ('a', 0, 3)),\n                                    (('c', 2, 3), ('a', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'M': -2.693213165502308},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-78, 1_362_439_074)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00270641699898988,
          "overall:gc": 0.0,
          "generate:args": 0.03335228987270966
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878943.864248
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-26072, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-17,\n        constraints={'min_value': None,\n         'max_value': -16,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.314392061205286e+219,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 10000000.0},\n        was_forced=False,\n        index=None)),\n      length=404,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 1, 2),\n                                     ('c', 3, 1)),\n                                    (('c', 0, 2), ('c', 0, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('Trzzo}/\\U000c57f4',\n                     [UnicodeTranslateError('_}\\U00090bbe\u67a9\\U000a7166\\x80\\U00044c59\u00fc\\U0007712c',\n                                            0,\n                                            0,\n                                            'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '6\\U000450d5\\U000eb146\u00d3\u00f5\u00e3\\x1c\u00baeK\\U000d4d5c\\x04\u00cb',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('\\U0003e285\\U000db04d\\x7fa\\U0001627b\u0afc\u00d9',\n                                     [UnicodeTranslateError('',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      UnicodeTranslateError('\u00d2\u00de\\x97\\U00108ab0\\U0007f4b9',\n                                            0,\n                                            0,\n                                            'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\\x15e\\U000eb7a5': -7_135_363_309_495_991_910,\n       'G\\\\N\\x18w\\xa0\\x1fJ@\u00f4': 118,\n       '$\u00b6\\U000edfab\\x8c`\u00aco\ud854\udfbf': -28486,\n       '\\x93\\x14\\x1b5': -1.5900762813084653e+171,\n       ' \\U000b0510N': -1.0405545554658864e+139,\n       '\u00b5': 3.200129847358516e+215,\n       '\u00da\u00ec\\x9c0\u00b6\u00b9\\U000e6a88': -4.155413243968902e-134,\n       '': -1.7976931348623157e+308,\n       '\u00bf\\U0005aa1d\\x89': 7326,\n       '\\x10\u00d6\\x82\u71a0\\x19ez': 23099,\n       'I\u00e4J\u00e8\u00dd\u00c1\\x01a\u00d3\\x01\\x19\\U00046111\\x1e\\x0e\u00f3': 20377,\n       '\u00f3S\\x9f\u00ee': 6.816852122372161e+16,\n       'X ': -5.876772966151857e+16,\n       ';\\U0008d1b3': -4},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-7_969_898_171_257_340_023, 512),\n       (-29466, 13692),\n       (-18014, -11985),\n       (66, 16232),\n       (69, -2_424_809_481_366_741_309),\n       (8192, 38),\n       (30600, 32091)},\n      slice_comments={(-155, 8796): 'else', (5198, -46): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.00023404095554724336,
          "overall:gc": 0.0,
          "generate:args": 0.012110290990676731
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878925.982015
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00010858301538974047,
          "overall:gc": 0.0,
          "generate:args": 3.9959035348147154e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878955.587998
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00010045798262581229,
          "overall:gc": 0.0,
          "generate:args": 3.808399196714163e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878951.0691462
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "",
        "representation": "",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x108be8cb0>, min_size=0, max_size=inf).map(tuple), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text())), has_discards=one_of(nothing(), nothing(), booleans()), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), length=one_of(nothing(), nothing(), integers()), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason'))))).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {},
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 3,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 3,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878914.543518
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00010387500515207648,
          "overall:gc": 0.0,
          "generate:args": 4.0041981264948845e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878915.4374552
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011229200754314661,
          "overall:gc": 0.0,
          "generate:args": 3.662501694634557e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878968.45288
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=15045, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=6_779_139_681_659_901_035,\n        constraints={'min_value': 19195,\n         'max_value': 8_948_511_814_201_596_794,\n         'shrink_towards': 0,\n         'weights': {19330: 0.01812761140323089,\n          7_929_378_254_343_131_312: 0.020043805738488563,\n          75467: 0.018193517775617566,\n          19415: 0.018954982837753827}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1.1776019194685759e-61},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'=\\xd1\\xf9\\x8eS\\xea>\\xddL\\xc7,6[xN2\\x83\\x89\\xed\\x87\\xc5XN\\x96TN\\xa7\\xacE\\x8f\\xa6\\x05\\xbe\\xb2\\x80\\xd6\\x9f\\xfa\\xa4Y\\xc67\\xa8\\xf5g%\\xda\\x15\\x0e\\xe7\\xab0\\x90\\x80\\xa1\\xda\\xad\\xf4\\xad\\xf0\\xcb\\x86b\\x83E\\tt\\xa6G\\xb7}RE\\xf0\\x10\\x08\\xd4\\x03P\\xe2o4\\xb3\\xfa\\xd5\\xaa\\xf1h\\x13\\xbb\\xd0\\xf2\\x04\\xb2\\xb0',\n        constraints={'min_size': 44, 'max_size': 144},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.1261319421835456e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00010b94\\U00010bbe\\U000bb716\\U00083313\ud802\udf53\\U00010bb5\\U000b8171\\U00010bce\\U00010b73\\U00010bda\ud802\udfae\ud802\udf9c\\U00082120\\U00010ba4\\U00084040\ud802\udf51\ud803\udc18\\U00010b9d\\U00080c09\\U00010bef\\U00010bb1\ud802\udfaf\\U00010bcd\ud803\udc0a\ud803\udc33\ud803\udc05\\U00095a3b\ud803\udc1f\\U00044b89\ud802\udf6d\ud802\udf6a\\U00010bfa\ud802\udf6e\\U00010be8\\U00091a36\ud802\udf4d\ud802\udf90\\U00010bc8\\U00010bf2\\U00010bc4\\U00010bc4',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [68426,\n                  68672,\n                  192343,\n                  213895,\n                  224901,\n                  225067,\n                  272262,\n                  366919,\n                  477488,\n                  481603,\n                  511082,\n                  568474,\n                  595281,\n                  616598,\n                  733118,\n                  828294,\n                  1114110],\n             ),\n         ),\n         'min_size': 29,\n         'max_size': 129},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xc7\\xe2',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'b\\xfcG:Y&\\xd3!\\xd8\\xb5%\\x1c.]\\xae\\x0bu\\xb3\\xd3',\n        constraints={'min_size': 15, 'max_size': 19},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000818f5\\U00081807\\U0008180f\\U0008523b',\n        constraints={'intervals': IntervalSet(\n             build_intervals([530428, 883871]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.16771982535546484},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"m\\xa6x\\x9c\\xdb\\xd6l\\xea\\x8b/\\x12'\\xa6\\xf1\\xbf\\x04|\\xb4\\x93.\\xc4\\x11\\xf3\\x1b)\\r\\xc2\\x89+\\x98\\x878A\\x15I~z\\xea-\\xd0\\x0c4\\xbf\\x16\\x98\\x1e\\x95$\\x04PZ\\x87\\x01\\x97\\x12!\\xaa'.\\xe2\\xd2\\x1c\\x88a\\x16\\xf3>\\x87\\xdb\\x11\\xdd\\xef\\xf2\\x9b\\xd0i<\\x87\\xdf\\xcd\\x14j\\xa2S,9\\xea\\xfa\\xb7\\xc8\\xd1oj\\xe3\\xe2ot\\xc6\\xd9\\x94\\xeb\\x9fp\\xd4\\xf2\\xe4$\\x84\\xd8=\\xacu\\xd6\\x83(\\xb1\\xee`u\\x98\\xa3\\xf5QM\",\n        constraints={'min_size': 47, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-40,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 3),\n                                     ('c', 3, 1)),\n                                    (('b', 1, 1), ('a', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'': -2.2250738585e-313,\n       \"\\x10\u00cb\\U0008e765\\U000ac7f4\u00e1'\u00c8\\x8f\u00b1M\\U000ac6b5\\U000959a6\": 34,\n       'SB': 12787,\n       '\\U000b84fb\u00bdn\\U000ba6f2f\\U00079fea\u00f2g||\ud85e\udc0bp\\x1b': 30992,\n       '\u00da': -4056},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(18452, 1_013_577_496): '\\U00045049!\\x14',\n       (-8371, -126): 'P\u00c6j',\n       (-64, -25): '',\n       (60, 32259): '\\x1a',\n       (-2809, -44): '\u00cd?',\n       (-31162, 4_426_118_189_847_221_698): '\u00a7',\n       (-8032, -9350): 'P\u00eb\\x99\\x01M\\re\\x1d\u00b1',\n       (-83, 32692): '',\n       (-62, 6_151_261_137_458_957_773): '\\x05\\x1e\\x17',\n       (-8_128_672_309_103_395_093, 8): '\\x83\\U0010778d\u00d0',\n       (73, 83): '3'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-3410, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-1146,\n        constraints={'min_value': -11304,\n         'max_value': -641,\n         'shrink_towards': -76_922_456_441_176_045_407_702_939_704_832_604_965,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u3d83\u3d0b\u3d52',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [15577,\n                  50738,\n                  110127,\n                  155355,\n                  293792,\n                  459104,\n                  523788,\n                  635227,\n                  674593,\n                  726626,\n                  732294,\n                  855429,\n                  920308,\n                  927092,\n                  981007],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\nq\\x8d\\xc6\\xaa\\x9fjB\\xf2\\xf4\\xbe<Q\\x87c',\n        constraints={'min_size': 3, 'max_size': 103},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u0491\u047f\u053e\\U000df639\u0559\u051a\u0549\\U000e052a\\u0558\\U000e4e17\u04c5\\U0010051a\u04ce\u04b9\u0496\u04f1\ud862\udc91\u04e2\u049b\ud856\udf77\u04d3\\u0557\u049c\u0549\u04ee\u0465\\U0007ff10\u0485\u046b\u051c\\U0010647d\\U000e956b\u0508\u050b\u0553\u052b\u04d2\u04da\u04f8\u0533\u0462\u04b3\u054e\u046b',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1119,\n                  213066,\n                  499927,\n                  542498,\n                  817341,\n                  979558,\n                  1029367,\n                  1091188],\n             ),\n         ),\n         'min_size': 42,\n         'max_size': 142},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.2753353488676265},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.597803890958427},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=4.996584479278369e+307,\n        constraints={'min_value': 1.825132401663592e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.388345440844418e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=inf,\n        constraints={'min_value': inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.336000359031437e+145},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0003f98e\\U0003f983\\U0003f9c1\\U0003f9c9',\n        constraints={'intervals': IntervalSet(\n             build_intervals([260388, 848586, 922382, 987617]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None)),\n      length=-9_631_234_204_360_346_236_397_296_470_722_291_203,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 0, 1),\n                                     ('a', 3, 3)),\n                                    (('c', 1, 0), ('b', 0, 3)),\n                                    (('c', 2, 0), ('a', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\x8e>',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x01\\U000f3f56\\x01\u00ea\u00dd\u00c6\u00ce': -5.893110855538457e-301},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(82360630, -12706): '\u00aa\\U0003acc6\\x06?\u00a1\\x9d',\n       (28, 10048): '\u00ac\u00c6',\n       (30, 8192): ']KI',\n       (-22345, 1_918_241_587_101_453_081): '',\n       (7779, -13248): '\u00af\\x98\\U00084f8f\u00bd\u00d0',\n       (-51, 13636): '\\U000de657\\x94J\u00ca\\U000ec52c\\x06',\n       (-2020, -572): '\\x81i_\u00b0\ud852\udc17\u00bf\u00d4\\x07\\x85'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=94, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.44613987699404223},\n        was_forced=False,\n        index=None),),\n      length=-32364,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('b', 1, 3)),\n                                    (('a', 1, 0), ('a', 2, 0)),\n                                    (('b', 0, 0), ('a', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\\x03*\\x18\u00b4\\x8c,\u00a78\\U000e1e9e\\U000aaf13\u00a1': -32204,\n       '\u00bc\\U000b0171\\U000cc988\\U0010a4f6\\x1a': 6.5205043462063784e+16,\n       '\u00d9\u00ab\u00f0\u00e1': 1_249_069_318},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-24094, -1_597_281_869),\n       (-92, -119),\n       (-82, 1110),\n       (-34, -13911),\n       (15954, -14)},\n      slice_comments={(12286, -27807): '\\U000d22a3',\n       (-41_290_134_329_476_250_609_435_323_517_329_891_998, 92): '\\x16',\n       (1_318_463_299, -94): '\\x94\u00d2',\n       (77, 166_130_086_160_014_937_286_539_819_204_962_334_191): 'n',\n       (-80, -20): 'b\\U000b3806Y\u00fa\\x94\\x08g\\U000a16ccD\\U000456cfHU\u00a5',\n       (32264, 21658): '\\x82\\U000bbb2d\\x15A<-\\x7f',\n       (2_283_427_276_631_911_287, 17766): '\\U00089c56',\n       (-18347, -50): 'A',\n       (3070, -15266): '\\U00105f21',\n       (-88165201,\n        -111): '\\U00067900\u00ee\\x00\u00e7\\U000a12b7\\x05@\\U000a305au\\U00071c67?',\n       (-29150, -5074): '\\r3\\x07\u00f5\u00c6@\\xadl',\n       (-56, -29732): '\u00aeB\\x8d'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=90, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=20633,\n        constraints={'min_value': -15846,\n         'max_value': None,\n         'shrink_towards': 110,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=4814,\n        constraints={'min_value': -14,\n         'max_value': 8777,\n         'shrink_towards': 45,\n         'weights': {1910: 0.5171742228584347,\n          4256: 0.09755841814232022,\n          3410: 0.03397279053574753,\n          4814: 0.22095644549076227,\n          7571: 0.04753253228401701}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"\\x94\\xc4\\xf8\\xba\\xa8l{\\xc3O\\xf4#l\\xff\\x8b\\xc1\\x1f@K\\x98\\x08\\xb5\\xa8\\xe8\\xecG\\xd8P0/\\xe8\\x961\\xec'#\\x1d)0EE\\xdb\\x12f\\xce\\xc7d\\xe3\",\n        constraints={'min_size': 34, 'max_size': 134},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000925f2\\U000925db\\U0009258e\\U00092540\\U000ad175\\U000925fa\\U000925be\\U000925bf\\U0009251d\\U00092603\\U000925ef\\U000925ea\\U0009759f\\U00092568\\U0009259c\\U0009257f\\U0009251e\\U0009254e\\U0009251b\\U0009257d\\U000925cc\\U000ada68\\U00092582\\U000925da',\n        constraints={'intervals': IntervalSet(\n             build_intervals([599300, 712881, 774624]),\n         ), 'min_size': 9, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=98_422_629_881_604_718_142_282_966_277_290_881_077,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('a', 0, 3)),\n                                    (('a', 0, 3), ('a', 0, 2)),\n                                    (('a', 0, 3), ('a', 2, 1)),\n                                    (('a', 1, 0), ('c', 1, 1)),\n                                    (('a', 1, 1), ('a', 0, 0)),\n                                    (('a', 2, 1), ('b', 1, 2)),\n                                    (('a', 2, 1), ('b', 3, 0)),\n                                    (('a', 2, 1), ('c', 2, 3)),\n                                    (('a', 2, 3), ('a', 1, 1)),\n                                    (('a', 3, 1), ('a', 2, 2)),\n                                    (('a', 3, 1), ('c', 2, 2)),\n                                    (('a', 3, 3), ('c', 3, 2)),\n                                    (('b', 1, 2), ('a', 3, 3)),\n                                    (('c', 1, 0), ('a', 3, 2)),\n                                    (('c', 1, 1), ('a', 0, 0)),\n                                    (('c', 2, 3), ('b', 1, 1)),\n                                    (('c', 3, 0), ('a', 2, 0)),\n                                    (('c', 3, 1), ('a', 1, 3)),\n                                    (('c', 3, 3), ('c', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('i', 0, 0, 'reason'),\n      expected_traceback='\\x99\\x16\\U000506bb',\n      has_discards=False,\n      target_observations={'\u00bf\\x19': -14860, 'R': 8366, '\\x89': 1000},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_481_925_367, -64),\n       (-21709, 33),\n       (-80, 19076),\n       (-52, -11423),\n       (7, -73),\n       (62, 512),\n       (86, 2837),\n       (100, 15874),\n       (11952, 57),\n       (30040, -8547),\n       (164_352_377_587_869_560_511_820_283_587_691_877_913, 26513)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-20301, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=1.0495571701210887e+308,\n        constraints={'min_value': -9.345125500503395e+46,\n         'max_value': 1.2261963984493287e+308,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.0143737600874324e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([65535, 206721, 779931, 1114111]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -2.5130803646958324e+33,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.3033916585045824e+307},\n        was_forced=True,\n        index=None)),\n      length=4284,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('Vz', 0, 0, 'reason'),\n      expected_traceback='0M\\x1d\\U0007f4df\\x97\u00bb\\U000cabceWn\\x1e\\U0009e114|%\\x04_*\u00ac\\x0e\\U000d1298\\x8cF',\n      has_discards=True,\n      target_observations={'then': -9.329926879063433e+305,\n       '': 0.05,\n       '\u169b\u1684\u1693\u1690\u168b\u1692\u1684\\u1680\u1691\u1684\u1682\u1691\u168f\u1685\u169c': 7186,\n       'K\\x19\\U000451fc#\\x1a': 1.5229890150966125e+172,\n       '\\x91(i\\U0010e483\\x19K\\x8c\u00a5Jt\\U0005073e,\\U000c71e3\\U000baf4b\\U000b6f89\\x87j\\x00\u00de\u00c7\\x1e9\\U000d1d75\u00a8L\\\\': 5.108932399135792e-188,\n       '\\U0004a99f\\U001072573\\x91$k [\\x9e': -6.567390092654842e+16,\n       '\\U000d5b6f\u00e2\u00a1@^\\x17\\U0007c347Mi\\U0004d775\u00c5g': -1_102_670_540,\n       '{o\uc804\\U0004dd59': -1.7171598811729236e+16,\n       '\u00ee\u00a1': -6.583363234429521e-125,\n       '\\r\ud847\udf87\\U000d88c1_\\x1fZ=\\U000a2690\\U000e41d9\u00e8\\U000516d0\\x86\u00a4\\U0007e672': -8.142432490338139e-279,\n       '\\U000b5a04': 7772879046677484.0,\n       '\\U000a79eb\\U000dc397': -32698},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-29126, 56), (-3016, 512), (28113, -9976)},\n      slice_comments={(-15, -11605): '\u00b5\\x17',\n       (101, 19010): '\\x19\\U000984ff\u00fc\\U000fcad0\u00a9',\n       (31039, 76): '+\\x11'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=10885, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=5.344053479800769e+307,\n        constraints={'min_value': 0.0,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.344053479800769e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.792453195407238},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.5354915769912135},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.5},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.1989687217367691},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u375e\u37d9\u37cd\u37e7\u37b5\u37f6\\U00062b18\u37c2\u37f8',\n        constraints={'intervals': IntervalSet(\n             build_intervals([14165, 93047, 352391, 536123, 538987, 600541]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.2813596166226783e+307,\n        constraints={'min_value': 0.0,\n         'max_value': 7.450207710688562e+307,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 3.278997718842552e+306},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=4.1613121058387293e+307,\n        constraints={'min_value': 7.792334281025749e+205,\n         'max_value': 1.3432771381841433e+308,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.925922264034019e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=300,\n        constraints={'min_value': -11798,\n         'max_value': 1000,\n         'shrink_towards': 3736,\n         'weights': {-3816: 0.07395527433608079,\n          -9301: 0.1347311897329125,\n          -2581: 0.25250786612262,\n          -3012: 0.03880566980838671}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'o\\xd5/',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7096682244966928e+308,\n        constraints={'min_value': 5e-324,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 4.008332808035301e-62},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': -3.678719424565032e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.5207821676528642e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=65535,\n        constraints={'min_value': 20205,\n         'max_value': None,\n         'shrink_towards': -13427,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=404,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('a', 2, 2)),\n                                    (('a', 3, 1), ('c', 0, 0)),\n                                    (('a', 3, 2), ('b', 2, 2)),\n                                    (('b', 2, 0), ('c', 2, 3)),\n                                    (('b', 2, 2), ('a', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\x82\\r\u00e7\u00b0',\n                     [UnicodeEncodeError('unknown encoding',\n                                         \"S'\u00d4\\x8d\",\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_762_484_711, 15),\n       (-1_596_366_049, -5),\n       (-5190, 12),\n       (-353, 4341),\n       (-77, -1986),\n       (111, 110),\n       (502, -31772),\n       (22398, 103),\n       (28328, 25)},\n      slice_comments={(-47, 4117): '\u00b8\\x17w',\n       (9999, 130704619): '\\U000a1f77@\\U000e2821\\U0008550e:i\u00fc\u00cc',\n       (-1826, 28507): '\\x9e\\U000ac228\u6f8b\\x06\\U0009b17b\\x80l\\U00051e60c*',\n       (-30796, 21702): '\u00c4'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-51, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\x81\\xad1\\xf1\\x1d\\xa7\\xcc\\x97\\x06vj\\x11:,\\xb8\\xec\\xdf3~-\\xed\\xc2\\xaeK\\xd8\\x8c\\xa2\\xad\\x9d:\\x88\\x02\\xcb\\xf9\\x02\\x19Y+\\x96\\x81\\x0c\\xbf\\x8b~<-Sh+\\x1dm\\x8aeg7\\xa4o!',\n        constraints={'min_size': 48, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=34859,\n        constraints={'min_value': 6290,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=9542,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('c', 1, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\u00ac',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\U0003c91a\u00a50\\U000aebfb\u00a7@\\U000a184a': -1.6377044854220464e-269,\n       '\u00e5\u00c2\\x97\\U000351ab:\u00b4': -4.334688077051555e+16,\n       'u\\U0009f496\\U00073f66K\u00a8\\x1d|\\x9d': -864255.321644226,\n       'a': -26375},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(21026, 23824), (28794, 24612)},\n      slice_comments={(-7001,\n        -74_600_484_382_729_549): '\u00c5Gh\\x17\u00a7\\x81\\x99\\x87V\\x99\u6ebd',\n       (29814, -13576): 'd\\x8b\\x06#\\x8a\u00e7'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-3859, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.3185394596089693},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9520628274619527},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=15,\n        constraints={'min_value': None,\n         'max_value': 458,\n         'shrink_towards': 23692,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=-23693,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 2),\n                                     ('c', 3, 0)),\n                                    (('b', 0, 1), ('c', 1, 0)),\n                                    (('b', 3, 3), ('c', 3, 1)),\n                                    (('c', 1, 1), ('b', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('\\U0010a66a*\\U000e0044',\n                                     [UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='\u85f2\u00d1',\n      has_discards=True,\n      target_observations={'\\x01\\x83': 2.0069900201663176e-261,\n       '1': 21304,\n       'sp\u00e8\\x04\\U00106549\\U00085031\u00c4\u00f3\u00e1\u00daV\\U000324353\u00f3\\xa0\\U000919fd\u00f0\ud0a3*3\\x9e\u00b6\\x9b!\u00b5\u00ac\\xa0\"\\x10\u00b7\\r\\U0006e19d\\U00012edavx': 113,\n       ',>w\u00ff\\x08\\U0007b869\u00cc\\U00097aefO': 5.081036305007567e+16,\n       '-d': 9007199254740992.0,\n       '\\U00051192\u00f4+\u00f2': 14700,\n       'J\\U0010fa63a\\x9b': 16215,\n       '\\U0010d68f`^': -57,\n       '\\U0003c436': -4.6636208702220936e+16,\n       '\\U000199fb\\U000d3fc0\u00a4?=\u00bcOD\u00d9': -3.539488558530578e+123},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-8_174_877_879_100_982_320, -73),\n       (-7340, -1873),\n       (2, -8_504_991_802_452_165_726),\n       (404, -59),\n       (512, 3780),\n       (31699, 1_656_683_200)},\n      slice_comments={(-12, -1_466_271_958): '~\\U000f0bac\\U0003e57b',\n       (22043, -2_001_495_553): '',\n       (22495, 7095): '8\\x99\u00a4\\U00012864',\n       (-29556, 47): '\u00bc@i\u00ebF\\x12\\x0f\u00f3\u00fd',\n       (12946, -15488): '\u00d6',\n       (32598, 24977): '\u00c3',\n       (300, 85): '\u00d5\u00d3\u00ec\u00b9',\n       (368937535, 21725): '[\ud858\udc9d',\n       (-11094, 17895): '\u00e8',\n       (19952, -661904349): ';\\x11\u00c9'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-13419, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=2203,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 8101,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'Y=|\\xe6',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=21850,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 1, 0),\n                                     ('c', 1, 0)),\n                                    (('b', 2, 1), ('b', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00e8x\u00c3', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'': 0.5,\n       '\u00c2\\x8b\u00eb/Eh.': -3.0211489712489816e+16,\n       'jN': 61,\n       '\u00c6>\\x94\\x86\u00a7^\u00a8\\x00\\U00038df6f': 9999,\n       '999999999999999999999999999999': 22,\n       '\u00a8~\u00fb': 0.0,\n       '\u00f9\ud821\udf38\\x80\u00a8\u00e3\\x99$\\x94\u00a2#\u00be': -51,\n       '\u00b5\\U000e30e3\\x9dV\\U000e859e\\x8c\u00e3x9\\x96^\\x96\u00d0': -116,\n       '\\U000d4782l\\n': -4848,\n       '\\U00041b772': 2.5025782908504596e+16,\n       '\u00f9': -7.05586725438438e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-18164, 29448),\n       (-45, -11534),\n       (-11, 85),\n       (109, -6000),\n       (124, -15171),\n       (488, 3016),\n       (4020, 31235),\n       (4231, 31721),\n       (9999, 22620),\n       (17699, -7276),\n       (23599, 59),\n       (24111, -9697),\n       (26160, 49),\n       (29696, -17844),\n       (30100, 8349),\n       (899907524, -14519)},\n      slice_comments={(900459870, 7863): '',\n       (29281, 1000): '\u00c4\u00ed0',\n       (31249,\n        1035): '\\U00095e11\u00fe\u00de\\x98\\x0b\\U00073013%\\U0003a7dcf\\x06\\U0001be42U\\x7f'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.006712956994306296,
          "overall:gc": 1.6083999071270227e-05,
          "generate:args": 0.11378736986080185
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 3,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 3,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878936.393523
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-10, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.382501979841097},\n        was_forced=False,\n        index=None),),\n      length=-58,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('a', 2, 1)),\n                                    (('a', 1, 3), ('c', 3, 3)),\n                                    (('a', 2, 3), ('a', 3, 1)),\n                                    (('b', 1, 2), ('a', 2, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u169b\u1684\u1693\u1690\u168b\u1692\u1684\\u1680\u1691\u1684\u1682\u1691\u168f\u1685\u169c': -4.514413540518273e+16,\n       'l\u00dd\u00df\\x18\\U000d018d\u00a9\\x11': 4884,\n       '\\x0c\\x91\u00bd\\xa0': 65192582,\n       '\\U000a884c,A1\\U000491e2\u00f9\u00af\u00b8\u00f8\\x81\\x98(\u00ef\\x87Q\u00cd\\x1a9': 1_536_627_904,\n       'if': -1.0806875316539502e+160,\n       'z\\x18': 6.0174397804216664e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-2740, -564921507),\n       (13, -483055961),\n       (512, -20311),\n       (2915, 6568),\n       (9932, 12202),\n       (13863, -8914),\n       (21528, 51)},\n      slice_comments={(59,\n        -129423765): '\u00e9\\x0f\u00ba\\x0f\u00f9\u00d6_\u00e6\u00ef-\\x08s\u00c1\\x0ef\u00d0\\U00062e73\\x1d|\u00fa\u00a4\\U000b3e6c\u00f1\u00d3\\U00073f01g\\U00015451\u00c8N\\U000c519f\u00b2\\U000594a5'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0002359579666517675,
          "overall:gc": 0.0,
          "generate:args": 0.004075999022461474
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878954.417995
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=827285443, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.31406029465641266},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x16M\\xd1\\x10\\xb8hI\\x19\\x07\\xdf\\x81HKJ\\xcd\\x1b\\xda\\xd6T-Z\\x13K\\xf5\\xb8?[O\\xe02\\xd6\\x0e4\\xebY\\x84\\x18\\x86G\\x1d\\x8a\\xeb\\x94\\xf6I\\xeb\\xa8Wt\\x1b)<\\xad\\xc2\\x86\\x7f\\xb5\\x0f]y\"UK\\xe9\\xec\\xf3\\xb4\\x10\\x8d\\xae\\xa8\\xf6g\\x8fs6\\xd3\\xe4U\\x99\\x0bN\\xd0\\x8a{~\\xd9b:',\n        constraints={'min_size': 32, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.7976931348623155e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7976931348623155e+308,\n        constraints={'min_value': 3.428051789643415e-168,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.7976931348623155e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=7923,\n        constraints={'min_value': 1000,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-18666,\n        constraints={'min_value': None,\n         'max_value': 1000,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=3.755024603132553e+307,\n        constraints={'min_value': -7.78511024870724e-223,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 6.527777250259128e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=133_153_489_000_832_579_382_875_387_911_012_576_341,\n        constraints={'min_value': 133_153_489_000_832_579_382_875_387_911_012_550_716,\n         'max_value': 133_153_489_000_832_579_382_875_387_911_012_578_820,\n         'shrink_towards': 69,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=10497,\n        constraints={'min_value': -29136,\n         'max_value': 29495,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud882\udc6b\ud882\udcf5\ud882\udc22\ud882\udcc6\ud882\udc3a\\U0004d076\ud882\udc8a\ud882\udc85\ud882\udc6d\ud882\udcd3\\U0004ce95\ud882\udcff\ud882\udce3\\U000494d1\ud882\udcc6\ud882\udc37\ud882\udc48\ud882\udc62',\n        constraints={'intervals': IntervalSet(\n             build_intervals([198665, 363038, 879450]),\n         ), 'min_size': 10, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x11\\xff\\x95\\xa4\\xac\\xc9\\x82\\xff\\x88\\x9a\\x1e',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x00\\x87l*m\\x92?',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-162_003_715_494_113_877_219_125_562_586_718_646_715,\n        constraints={'min_value': None,\n         'max_value': 2052,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u04f7',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1024,\n                  332937,\n                  432148,\n                  611375,\n                  627489,\n                  837397,\n                  906504,\n                  1048009],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'.worker_identity.',\n        constraints={'min_size': 5, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u04ac',\n        constraints={'intervals': IntervalSet(\n             build_intervals([1000, 275522, 781318]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xca\\xd8F@\\xbc\\x05\\x83\\xb2',\n        constraints={'min_size': 0, 'max_size': 62},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9946279968316913},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 3.7599400015444862e-289},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.7225022662145952e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"2\\xc7\\x1d\\x89\\x1cU\\xc1\\xdf\\xdb\\x8c\\xfdJ\\xad\\xea\\xa3H\\xafV{\\x0f\\x8c\\x8d$'\\nH\\xcd|\\x96.\\x87\\xfb\\xc9\\xd4m3\\x9b\\xc8\\xb7\\xe4\\xd6\",\n        constraints={'min_size': 26, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -0.43839549032871855,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.004936107636411328},\n        was_forced=True,\n        index=None)),\n      length=9999,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('a', 1, 1)),\n                                    (('b', 0, 0), ('a', 3, 2)),\n                                    (('b', 3, 1), ('a', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\U0010f985',\n      has_discards=True,\n      target_observations={'': 1.8935893910056645e+96,\n       '\\U00081f09\\x87\u00aa\\U000eae7a\\U000f14b2\u00bf': -4.631079545427018e+16,\n       '\u00cf_': 1024,\n       'j\\x89\u00db': 1.5,\n       '\u00d4\\U000e77e2|\ua16c\u00f4x\u00bf': 1.7498738183948181e+59,\n       '\\x93Z': 0.5,\n       '\u77ae\\\\\u00b9\u00e8': 0.5,\n       \"V'u\\U001084f1\": 2127,\n       '\\x01e\\x105\u00a4\\U000bfde7\u00aaog': -6.646056802402113e+16,\n       '\\x94g\u00ac': 2.1773164358750974e+85,\n       '\u00bd\\U00044245U\u00d4\u70dd': 19147},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_529_449_415, -9805),\n       (-7394, -76),\n       (29091, 52),\n       (46_891_446_342_806_607_678_204_652_171_734_268_893, -22704)},\n      slice_comments={(-46, -56): '',\n       (-2160, -97): '\u00ae\u00ec\ud870\uddde\\x9f\\U000917b0',\n       (26425, -16061): '=\u00a9\\U0007ec53\\x08\\x8c\\U00076aa4\\U000ec1e7',\n       (93, -15373): 'x',\n       (15,\n        31679): '\\U000b9265\\x84[\u00b5\u00da\\x84,\u00eb\\x04\ub8c1r\\x0f\\x8b\\U00042704\\U00044499\u00fd\\x9a48\\U000993c5\\x1b\\x06',\n       (-57, 1446): '%gW\\U00079a66\\U00101eb0',\n       (849, 32220): ';<\\U00055354\u00f8i\u00e3',\n       (-6099, -15270): 'a\\U00050cf8p\u00e8\u00aa\u00d1\\x00\u00af\ud862\udc49\\U000b41caHXUF',\n       (-11, 8_416_908_879_874_126_864): '\\x96\ud86c\udecb7',\n       (31440, -17000): 'E\\x83Xm\u7c65',\n       (-19266, 1024): '\u00ca\u00e7\u00f1\\x9cpMm\\x83\\x03\\U0008470fISl\u00fe\u00d5(\u00e9\\U0010db35'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-11, context=(), group_elems=()),\n      nodes=(),\n      length=-74,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 1),\n                                     ('a', 1, 3)),\n                                    (('b', 1, 3), ('a', 0, 2)),\n                                    (('c', 0, 3), ('c', 2, 3)),\n                                    (('c', 2, 1), ('c', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         'n\u00f1\u00a4\u00e9\u00f9\\U000bcb37',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\U0009e98f\u00bd\\x19\\x83\u00df\\x81%\\x04\\U0008671cJ\u00af\u00d8\u00ec\\x1ac\u00f7\\x818\\x86',\n      has_discards=False,\n      target_observations={'Retried draw from ': -1.2751690678688452e+35,\n       '\u00cc\u00aa 7\u00e1\u00b4': -1.23300477270953e+24,\n       '': -3.363341387298456e+16,\n       '\\x16\ud884\udd22F\\x10\\U0010db86j\u00ef\\x9c': 5.972433733213517e+16,\n       'd\\U000d980f\\U00090ea7\\x17': 1.9267416657621646e-100,\n       'S\\x8b\u00f0': 2.9379054801355625e-122,\n       '\\U000ba1f8\\x9d\u00e8\u00db\\U000792df': -9.979186247638588e+136,\n       '\\U0010b810': -27232,\n       'then': struct.unpack('d', struct.pack('Q', 0xfff8000000000001))[0],\n       '9\u00ee\\U00093d78\\x9a4': 6.592803359576546e+261},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-14045,\n        114_916_306_525_716_471_355_722_585_639_178_056_642),\n       (13828, 1024)},\n      slice_comments={(-2661, 121): '\\x18',\n       (9999, 595_064_071_565_287_488): '',\n       (57,\n        27_431_196_228_175_918_630_083_206_021_273_435_943): '\\U000a3434\u00dc\u222a\\U000ce3b0',\n       (20572,\n        2587): \"J'_\\U00088498\\U0003d748\u00da\u00dd\\x0e\\U000fc3a3~\u00f0\\x99\\U00061ec4\\U000bd90d\u00c3\\x85\u00e5\\x1a\u00e3\u00f5\\x89\u00da\u00c3\",\n       (-61,\n        143_902_351_243_245_147_499_755_668_716_851_469_863): '\\U000c513b\\x9c\\\\\\x17o\\x10go\\U0010b6aa\u00db\u00dd',\n       (-53, 2659): '\\U000f77de'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-40, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b' \\xd3\\x8dp\\xac\\xf4+\\x04\\xd2~\\xbc]\\xf9\\xaf\\tu\\xfb-v\\x1b\\xfeg\\xa5?+\\x10\\x1b\\x10\\x89\\x113\\xc5a\\xe3\\xa1d\"\\xdf\\x96\\xb13\\xee\\xb69\\xac\\xd5\\x13oZ\\xadJX\\xcf\\x16\\x0eb\\x10\\xe6\\xec)\\xe3\\x06\\xad\\xad9/\\xb9',\n        constraints={'min_size': 39, 'max_size': 139},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0003d96e\\U000ae8ef\\ud8c9\\ud84b\\ud8c8\\ud8eb\\U0009d048\\ud8aa\\ud899\\ud8f4\\ud824\\ud8b4\\ud878',\n        constraints={'intervals': IntervalSet(\n             build_intervals([55285, 395185, 546487, 1077416]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u6df1\u6e9c\u6dfa\u6dca\u6e7b',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [28083,\n                  203282,\n                  320912,\n                  332504,\n                  381383,\n                  433302,\n                  470757,\n                  572124,\n                  658843,\n                  669931,\n                  743078,\n                  944604,\n                  1044703],\n             ),\n         ),\n         'min_size': 5,\n         'max_size': 105},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.3889094968876713e+308,\n        constraints={'min_value': 1.7023350879177308e+16,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.131634065476802e+16},\n        was_forced=True,\n        index=None)),\n      length=-6,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('c', 3, 0)),\n                                    (('a', 2, 0), ('a', 3, 3)),\n                                    (('a', 2, 2), ('b', 0, 3)),\n                                    (('b', 1, 0), ('b', 3, 0)),\n                                    (('b', 2, 0), ('c', 3, 1)),\n                                    (('b', 3, 3), ('c', 3, 0)),\n                                    (('c', 0, 0), ('b', 3, 1)),\n                                    (('c', 0, 3), ('a', 3, 1)),\n                                    (('c', 1, 1), ('a', 2, 0)),\n                                    (('c', 3, 0), ('c', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [ExceptionGroup('\u00dc[\\U0007bb28\\U0001a9be^8\u00fc\u00c9\\x1e',\n                                     [UnicodeEncodeError('unknown encoding',\n                                                         '\u00b6\ud868\udc58\u00f5\u00c1\u00de',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         'lorem \u0644\u0627 \u0628\u0633\u0645 \u0627\u0644\u0644\u0647 ipsum \u4f60\u597d1234\u4f60\u597d',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError('',\n                                                            0,\n                                                            0,\n                                                            'reason')])]),\n      expected_traceback='\\U000557ff\u00b0\\x16QN\\x03',\n      has_discards=True,\n      target_observations={'J': -721767796, '\\t': 27001},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-16611, 14642)},\n      slice_comments={(82, 8511): '\\U000f5725R\u00a1\\x17',\n       (23066, -39): '\\x8d\u00a3',\n       (-5898, -35): '\\x95\u00bf'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0016986249829642475,
          "overall:gc": 0.0,
          "generate:args": 0.0655010438640602
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878917.8950138
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=3455, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-20,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 17695,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1024,\n                  65535,\n                  85268,\n                  133231,\n                  206072,\n                  278580,\n                  322696,\n                  398613,\n                  562529,\n                  595217,\n                  637111,\n                  660952,\n                  681769,\n                  714769,\n                  783036,\n                  809055,\n                  828773,\n                  845944,\n                  1074679],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'lG\\x11\\xb9\\xf6{\\x04\\xd18\\xcf\\xe0\\xfb\\x95CH$\\xc3\\xb01\\xa2\\x1c\\xce\\x9aw\\xb1',\n        constraints={'min_size': 23, 'max_size': 42},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-39,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00012f52\\U00012f7f\\U000dc357\ud80b\udfe1\\U00019ec4\\U000ca3aa\ud80b\udfd9',\n        constraints={'intervals': IntervalSet(\n             build_intervals([77594, 482076, 717437, 1028638, 1096651]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'.worker_identity.',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-620071604,\n        constraints={'min_value': None,\n         'max_value': 1_358_070_966,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0001ecff\ud83b\udd20\ud83b\udd0a\\U0001ec64\\U0001ecf6',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [126008,\n                  257027,\n                  429123,\n                  487775,\n                  633970,\n                  839309,\n                  860139,\n                  981084],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-25830,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('a', 0, 2)),\n                                    (('a', 0, 1), ('b', 2, 2)),\n                                    (('a', 1, 0), ('a', 1, 1)),\n                                    (('a', 1, 3), ('c', 0, 2)),\n                                    (('a', 3, 1), ('b', 0, 3)),\n                                    (('c', 2, 1), ('a', 1, 3)),\n                                    (('c', 2, 1), ('c', 1, 0)),\n                                    (('c', 3, 0), ('c', 3, 2)),\n                                    (('c', 3, 2), ('b', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('H\u00f7\\U000e0ebd8k',\n                     [ExceptionGroup('\u00ef\u00fdy\\x88\u00cf\u00db',\n                                     [UnicodeEncodeError('unknown encoding',\n                                                         '~\u00d3',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('\\x8e\u00b9#',\n                                                     [UnicodeTranslateError('\u00ce\u00c1\\x10\\U0010f4da\u00b7\\U00041c0a\\x1f\\U000bc077\\x1e',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeTranslateError('q',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeTranslateError('\u00aa',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      ExceptionGroup('\u00f3\u00c8/\\U000d03ef',\n                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                         'E\\x90',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')])])]),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\u00ea\u00c4C\u00da\\U00058d87\\x7f,\u00a9\\U00102120\u00b4',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('\\U000398f6', 0, 0, 'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_797_261_712_596_988_207, 11676),\n       (-2_058_417_956, 29),\n       (-44, -157028511),\n       (-43, 68),\n       (86, -127),\n       (316, 65535)},\n      slice_comments={(148_243_694_633_362_893_982_286_182_604_074_675_892,\n        -9601): '\\x8b\\x00d\\x9f\\x84\\xa0\ud85e\udc0e]H',\n       (8627, -15193): '\u00eb\\x7f\u00ecJ\u00b1\u00c2',\n       (2269, 300): '2\\x8f'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-27550, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U000528e5\\U00019f70\\U00019f2f\\U00019f3a\\U00019f8f\\U00019fab\\U00019f8a\\U00019f89\\U00019fe9\\U00019fd0\\U00019f2b\\U00019f51\\U00019f4b\\U00019f38\\U00019fef\\U0001a010\\U00019f6b\\U00019fbb\\U00019f29\\U00019f23\\U000395d4\\U00019f31\\U00019fd5\\U0001c3ec\\U0004d2bd\\U00019ffa\\U00019f91\\U00019f9c',\n        constraints={'intervals': IntervalSet(\n             build_intervals([106270, 365100]),\n         ), 'min_size': 9, 'max_size': 109},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xfb\\xff\\xea\\xad\\xfe/#\\xeb',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'u\\xf2*\\xf5p5u}',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-11382,\n        constraints={'min_value': None,\n         'max_value': 84,\n         'shrink_towards': 23004,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=-61,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\x93\\x81\u00e1\\x1f&\\x9b\u00e7\u00f3M\u00b2\u00b0\\x10\\x91',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\U000bbc9b]\u00c5\u00c2\u00f3\u00f3r\\U0010d1eb\u00d6\\x1c!\\U000e50d7\\x0b\u00a88\\t': 27495,\n       'b\\x80\u00c7\u00efq': -1.175494351e-38,\n       '\u00f9\\U000bf034}~]Kh\u00f1\ud851\udcde*': 0.05,\n       '\u00ce\ud86b\udfec\\U0006450b\\x96': -10970,\n       '\u00c0\\x14\\U00108eb7\\x1c\u00b0': -5.940435635216775e+16,\n       '\u00d0\u00cb\\U0009e4b5\u00ba\u00db': -12529},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-17_384_301_573_048_745_292_656_765_208_129_528_201, -3621),\n       (-22230, -12162),\n       (-4259, -84),\n       (24, 5807),\n       (93, 16888),\n       (1906, 300)},\n      slice_comments={(16854, 2704): 'i',\n       (-23677, 27): '\u00a7\\U00080295A\\U0001db95\u00c7+\u00b5\u00ddA\u00b3\u00c2',\n       (14203, 7_064_844_868_185_347_045): 'Z\\U000fc4ca\u00ff',\n       (9075, 7134): '',\n       (-5_651_558_987_662_110_150, -84): '',\n       (24079, -32275): 'zKae\\U000f3990',\n       (-4306, 258487153): 'TnJ\u00cdRV\u00e3\\U00073377\u00fe\u00e7\\x93W\\U000b1d6b\u00a2',\n       (-1496, 18999): '\u00fb\u5cb6',\n       (-17, -6683): '|\u00fe\\x87h\\U000ec2a8V\\U00056e7c'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1062009581, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': 1.920689935802879e+16,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 7.86759219947814e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=inf,\n        constraints={'min_value': inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.028178858052075e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u27e2\u276d\ud802\udd06\u2786\u2718',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [9999,\n                  92824,\n                  214039,\n                  337246,\n                  450168,\n                  641100,\n                  707069,\n                  725528,\n                  869496,\n                  909968,\n                  919557,\n                  1114111],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xc0\\xe4',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9677127968911574},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.2761307730537675},\n        was_forced=True,\n        index=None)),\n      length=-12561,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-26070, -26292),\n       (-23292, 65535),\n       (-19342, -97),\n       (-14121, 116),\n       (7, 1000),\n       (93, -3),\n       (125, -8_621_961_307_540_386_386),\n       (300, 117_828_986_589_693_363_841_805_498_442_938_711_080),\n       (17661, -16809),\n       (19960, -17133),\n       (20550, 4673),\n       (31947, -740_432_415_381_416_566)},\n      slice_comments={(20903, 98): '\\x12o\\x1f\u00b1!Z',\n       (-30178, 120): '\\x8c\u00d5',\n       (1_745_827_695_389_128_110, -3): '-\\x9d\u00c0',\n       (127, 1000): 'False',\n       (-3628, 695671442): 'n\u00c5',\n       (-72, 3845): '\u00b5\\x9a\u00d7a\u00b9HC\\x84\\x13,fa\\x89(\\x18\u00aa,',\n       (48, 4385): '',\n       (22895, 74): '\u00e9=[\\U000e86a5\u00c46\u00fb\u00c3\\x1d)>\\x87\\U000c2381\\x85\\x87\\x14\u00e2',\n       (-40, -18379): '\\x10\\x91',\n       (-28381, -7283): '\\U000fbd5a',\n       (2_391_049_266_812_327_472, -13657): '\\U000ade78\\U0009a241\\U00049cc7',\n       (-113, 54): 'm\\x06\\x8a\\U000d818c\\x86',\n       (-4709, 70): 'd',\n       (-30149, -452198640): '',\n       (-7686, 86): '',\n       (1_625_557_946, -6): '\u00dc\\rP\\x8b\u00a8\u00db\u00dd0\\x80\\x173\\x8d',\n       (-6, 1_684_544_930): 'w\u00ec\u00b2\\x08\u00f8s',\n       (-6_068_439_547_694_225_927,\n        -1_517_392_575): \"\\x86\\U000e0b6c\\U000d15ee'7Ce*\u00a5\ud869\udf19nB\\x1e\\U0003c160\u00d96m\\x90\\x15|\\U00090349\u00d692\u00c6\u00aaY\",\n       (5037, -64): 'G\u00a8\\U000df088\\x97\\x12N\\x8dlAk\u00dd\u00de\\x7f\\x17',\n       (74, -58): '\u00c4\u00c8\u64de19',\n       (18519, 1024): '\\x8a\\U000863d6\u00e7\u00aa\u1326o\u00c7',\n       (-2_035_588_405, -87): '\u00cd\u00da\u00d5c\u00e6',\n       (-26, -27462): 'S'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-29096, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\u61c7\\U000575f1\u61d7',\n        constraints={'intervals': IntervalSet(\n             build_intervals([24998, 86450, 325582, 653297]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=37217,\n        constraints={'min_value': 21520,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x90T\\xc250\\xfb\\x93\\x83\\x83\\xf9\\xc0v\\xf5\\x12\\xbe\\x9c.\\x92#$F\\xa2V\\xc4[p\\xd6L\\x96(=\\xe0\\xc8Z\\xeej\\xb3:\\xa7\\xed\\x18\\x8c/\\xbb.,\\xce@\\x8cg\"\\x07\\x9b\\xcb\\x81I\\xaf\\xe7\\x05\\xdf\\xce~\\x92\\xd0T8\\x0cka\\xbeq.k\\x7f\\xde[7\\x1c\\x13\\x92>y\\xd7\\x19\\xdd!\\xe3\\x8d \\xf5\\xb4\\x02\\xf7\\xa3\\x99rj',\n        constraints={'min_size': 50, 'max_size': 123},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x0b',\n        constraints={'min_size': 1, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x0e[Q@\\x89\\x06\\x1a]\\xc2N-/q\\x80',\n        constraints={'min_size': 8, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'Oo\\xe2<\\xda\\xe3e#\\xba\\x1b\\x971\\xf2',\n        constraints={'min_size': 8, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.37311099426043665,\n        constraints={'min_value': -0.0,\n         'max_value': 0.5,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.0658237824584489},\n        was_forced=False,\n        index=None)),\n      length=-47,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 0),\n                                     ('c', 1, 2)),\n                                    (('b', 3, 0), ('a', 1, 3)),\n                                    (('b', 3, 2), ('a', 3, 0)),\n                                    (('c', 3, 0), ('b', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\U0007de24',\n      has_discards=True,\n      target_observations={'': 1.830541439469147e-125,\n       '\\U0010669dU\\U000d57c0\\U00081716Y\\x8e3\u00e0': 26222},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-18942, 12276), (-66, 1_310_171_814), (32460, 18273)},\n      slice_comments={(-28487, -10526): '6t\"\\x95Z2\\U0001ae0d\\x87',\n       (45, 14838): '\u00c3\\x1d',\n       (21866, -114): 'i\\x95\u00d0\u00be\\x85Eu\\U000942ed\\U00037a67K\\U000c2cb3',\n       (300, 209): 'Inf',\n       (-4530,\n        119): '\\x03\\U000dc33a\\U000d7b63\\x0f\\x93^\u00d5\\U0007f78e\u00e9\u00b8C]\\x01\\U000d3413\\x00\u00c9\\U000ae543',\n       (8847, -93): '\u00f0\u00f1b\u00dd\\x0c',\n       (-5_119_208_206_306_021_104, -356): '\\r',\n       (17160, -30848): '',\n       (-85, -126): '\\U0003eaf8\\U0001c223',\n       (-6109, -23042): '\u00ed\\U000bcd78y\\'w-\u00c0\u00c4\u00cb\\U000edecb\u00c1\"\\x0b',\n       (-9524, -84): '\\U00096304\u00e4',\n       (24726, -17381): '\\x03\u00b6\u00c3|\\x9e\\x1e\\x13',\n       (8192, -27703): '3\\x12\u00b8',\n       (24, -28573): '',\n       (-31273, -60): '~\u00d8\u00cd\\U00088c48\u00f2\\U000a7aaa\u00c1\\U000845e3\\x8f',\n       (-1_015_083_079, -75): '\u00bcS',\n       (61, 119): '\u00dc\\x15\\x82\\x1d\\U000881c6\\U000fea66\u00fd)\u00b4\\x95\u00d1\\x0f\\U000da298!',\n       (23875, -390): '\u00d4\u00f2\u00e5',\n       (-6354, -460732311): '\ud881\udf83\\x0fx{>\u00b9\u00f4\u00a4\u00cc?',\n       (-57, -12345): '\u00f09\\x17]\\x08',\n       (-26265, 95): 'skipif',\n       (-59, 15778): '\u00d2',\n       (18076, -3558): '',\n       (23, -20176): '',\n       (2246, 7194): '',\n       (20690, 300): '\\x9f\u00f6\u00cc%\\x1e\\x1e\\U0001e36d\u00e0\\U000bab7d',\n       (20503, -29223): '',\n       (14, -11179): 'h',\n       (-13167, 30529): 'string',\n       (-107, 10763): '\u00ddx',\n       (1000, -6570): '\u00cb\\x8a~\\x8dE\u00d7',\n       (1024, -393518943): '\u00d9eM',\n       (-18533, 9999): '',\n       (-24800, 23798): '\u00b7\u5df8\u00fa\\x83',\n       (-14414, 16): '\\x04\ud872\udfa4\u00e8\u00ce5\\x84\\x81\\U00082958k\u00c1\u00b4\\U000d6d86\\U00013ccc\u00e4!'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=65535, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-110,\n        constraints={'min_value': None,\n         'max_value': 24177,\n         'shrink_towards': 11273,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=5.783241613792904e+16,\n        constraints={'min_value': 1.7956048990017673e-277,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.846440054086548e-269},\n        was_forced=True,\n        index=None)),\n      length=-85,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 2, 0),\n                                     ('c', 1, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [UnicodeTranslateError('H\u00a1\u00d3#\\U000cfd43', 0, 0, 'reason'),\n                      ExceptionGroup('\u00acA\u00c3',\n                                     [UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('\\x9a]',\n                                                     [UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')])]),\n                      UnicodeEncodeError('unknown encoding',\n                                         'INF',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('',\n                                     [ExceptionGroup('\\U00079544e\\U00081e96\\x91+m\ud886\udc7b\\U000d3980\\U00089b57',\n                                                     [UnicodeEncodeError('unknown encoding',\n                                                                         '\u00e8\u00d5\u00fcN\\U000e52e4',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      ExceptionGroup('\\U000d153d\u00ab',\n                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                         '\\U000de213S',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                         '\\x1d\\U0007e706\\U000fd100B\\x1f\\x1b8\\x95O\\x13\\x1f',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                         'b\\x05_/\u00fb\u00df#j)t\\x9e',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')]),\n                                                      ExceptionGroup('\ud82c\uded1\u00d8_As\\U0003b25c\\U000790cd\u00c4',\n                                                                     [ExceptionGroup('{',\n                                                                                     [UnicodeTranslateError('D\\x96;',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeTranslateError('\\U000aee16\u00d4\\x0b\\U000a0c29\\x85\\x1e\\U00073450\u00dd\\U000b6dba\\x81\u00f2\u00dbC\u00d8\\x8c\\U00061e81M\u00cc\\x8d\\U0005b437\u00c3\u00c5a\\x96',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason')])])]),\n                                      UnicodeTranslateError('',\n                                                            0,\n                                                            0,\n                                                            'reason')]),\n                      UnicodeTranslateError('', 0, 0, 'reason')]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\u00a96': 2.637268999381043e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(404, 61): '\u00d6N\\U000113a6\u00db}\u00dc\\x01?5g\u0315U',\n       (-111, 100): '\\x9cM2',\n       (1000, -3242): 'U\u00d0\\U000ef46e\u00a5',\n       (-35, 12966): '\\x19\\U000de6e2^4',\n       (25041, -4729): '\u00f1\\x0c\\U000c2fd2\u00b3',\n       (14828, -982_360_836_313_500_374): '\\x0fmI\\U0004e594\u00d8',\n       (-50, -19762): 'M',\n       (26634, 106): '{\\x9c3Q;\u00a9C\\U00077198n\\U000fb631',\n       (-15927, 114): '\u00b9P\u00a8\\U000c2cbb'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-74, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-9112,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=14497,\n        constraints={'min_value': 1024,\n         'max_value': 17992,\n         'shrink_towards': 2314,\n         'weights': {8702: 0.01914476607885871,\n          16572: 0.20907713967073394,\n          5252: 0.0124121347439341,\n          1878: 0.000248242694878682,\n          3112: 0.09220280745004919,\n          8193: 0.0002482426948786821}},\n        was_forced=False,\n        index=None)),\n      length=-198907460,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 2),\n                                     ('a', 0, 0)),\n                                    (('a', 3, 1), ('a', 2, 3)),\n                                    (('b', 0, 1), ('c', 2, 3)),\n                                    (('b', 1, 2), ('b', 2, 3)),\n                                    (('c', 0, 3), ('c', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(8_070_170_520_122_147_473,\n        5_568_125_722_868_862_443): '\\x85',\n       (-17675, -21): '\\U000b39b4<',\n       (1024, 49): '_\\U000bbc10I\\x139\\U0010a552\\x92;l\u00f0',\n       (41, -9128): '\u00f7\\U000c17bcr\\U000c398a\\U00016b98',\n       (32086, 19128): '\ud84b\ude96\u00a2',\n       (65535, -12054): '\u00a4\\x87\u00e2',\n       (4_085_404_173_433_821_430, 11102): '\u00b2\u00e8',\n       (75, -66): '\u00df\\U000ba654',\n       (-87, 13655): '\\x01R6',\n       (9300, -16287): '_\\x8d\u00b1(\u00ca\u00e7\u00f1\u00f2\\U000c4a4eu\u00b3N\\x02',\n       (14, 23421): 'Ki'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-13403, context=(), group_elems=()),\n      nodes=(),\n      length=9346,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 2),\n                                     ('b', 0, 0)),\n                                    (('a', 3, 3), ('b', 0, 1)),\n                                    (('b', 0, 3), ('a', 1, 0)),\n                                    (('b', 1, 2), ('c', 0, 3)),\n                                    (('b', 2, 0), ('b', 3, 0)),\n                                    (('b', 2, 1), ('a', 0, 1)),\n                                    (('b', 3, 2), ('c', 3, 0)),\n                                    (('c', 0, 2), ('b', 0, 2)),\n                                    (('c', 1, 0), ('b', 2, 3)),\n                                    (('c', 1, 1), ('c', 1, 3)),\n                                    (('c', 1, 3), ('a', 3, 0)),\n                                    (('c', 2, 0), ('a', 1, 3)),\n                                    (('c', 2, 1), ('c', 1, 1)),\n                                    (('c', 2, 3), ('b', 1, 2)),\n                                    (('c', 3, 0), ('a', 1, 3)),\n                                    (('c', 3, 2), ('c', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\ud835\udd4b\ud835\udd59\ud835\udd56 \ud835\udd62\ud835\udd66\ud835\udd5a\ud835\udd54\ud835\udd5c \ud835\udd53\ud835\udd63\ud835\udd60\ud835\udd68\ud835\udd5f \ud835\udd57\ud835\udd60\ud835\udd69 \ud835\udd5b\ud835\udd66\ud835\udd5e\ud835\udd61\ud835\udd64 \ud835\udd60\ud835\udd67\ud835\udd56\ud835\udd63 \ud835\udd65\ud835\udd59\ud835\udd56 \ud835\udd5d\ud835\udd52\ud835\udd6b\ud835\udd6a \ud835\udd55\ud835\udd60\ud835\udd58',\n      has_discards=True,\n      target_observations={'\\x80': nan,\n       'M': -672575064,\n       '?': 108,\n       'b\u00bf': -1.1731875515097774e-216,\n       '\u00ae': -996416198654243.0,\n       '': -27},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(11795, 34): '',\n       (-12063, -9572): 'm\\U0007345c\u00c2\\x8d',\n       (-34, -100): '\\x9f\u00a6\u00b3\\rm\u00d3\\x82\\U000b1118',\n       (66_029_432_811_158_907_612_715_158_826_336_206_533, 512): '\\x9c',\n       (-96, 1947): '\\x12\u00a7~S\\U000698f3\\x19O\\x8c\\U0009b741\\x92\u00aa\\x9b\\tt\\x95',\n       (-27314, -4_843_255_960_698_152_557): '\\U00043996\\rQ',\n       (-71, 75): '\u00e0_\\r',\n       (512, 0): '\\U00062c05\\U000dd171\\x98\\U000501e1.\u00c6\\U0006ffc7[k',\n       (-29607, 16797): '\u00a6\u00a2\\U00036aad\\x81\u00a8^\u00d7\\U000a83e8\u00e7\\x87'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-768, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'.',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=19942,\n        constraints={'min_value': -53,\n         'max_value': None,\n         'shrink_towards': -75,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0004ec3c',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [322427,\n                  336713,\n                  476332,\n                  550997,\n                  567318,\n                  600134,\n                  721776,\n                  773172,\n                  774772,\n                  780346,\n                  911723,\n                  930476,\n                  1107104,\n                  1114111],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'#\\xba\"\\xfchsY\\xc9&(\\xd7\\xfc\\x04\\xea\\xbdz67\\xe7\\x84\\x0cK:<\\xb8',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=-4,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('b', 1, 1)),\n                                    (('a', 1, 0), ('b', 2, 3)),\n                                    (('a', 3, 1), ('a', 3, 0)),\n                                    (('b', 1, 0), ('b', 1, 1)),\n                                    (('b', 2, 2), ('a', 2, 3)),\n                                    (('c', 1, 3), ('c', 3, 0)),\n                                    (('c', 3, 3), ('a', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='null',\n      has_discards=False,\n      target_observations={'h': -8.791792271900226e-205,\n       'v}\\x83\\x02-\u00de\\U0004bd0f\u00d1': 26997,\n       'R=\u00e1\\U000cb410\\x9f\\x7f\\x8a:': -1.7246212696624652e+16,\n       '\\x90\\x00\\x0e': -1.3127623440018632e-194,\n       '': 13978,\n       'n\u00c9': 0.05,\n       '\\x83\\x08\\x13': -9058,\n       '\ud888\udd69m\u00e3\\x08\u00de1%': -63,\n       '\\x1a\u00ef\\x9c\\U0009fa79\\U0008c188u\\x95H\u00f8\\U0009d561~': -2.80838424025336e+16,\n       '<\"H\u00a3\\x94\\x90ZW\u00b7': 2.7023761192319493e+42,\n       '\u023a': -9.133505020342398e+198,\n       '\u00b7\u00ae': -5.9853876847124616e+16,\n       '\u00eb': 124078230,\n       '\u00ac\\x11\u00d4\u00bfB\u00d4\\x13\\x86': 8.847187613795513e-92,\n       '\u00f4\\U000860a0\\x9b': -26389,\n       '\\U0006b922': 101,\n       '\\U001053b7+\\U0005edc3\\x0b\\U00107539HY/_~\u00e0\\t\u00b0\\U00096cce': 0.0,\n       '\u00e4': -1.6573545206261268e+305,\n       '4D': 13,\n       '\u00beN\u00ea\u00a1\\x19\\U000e1db5\u00a4': -3.1310478735976606e-289},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-9823, 20),\n       (-94, -259618470),\n       (-90, 29814),\n       (-75, -2300),\n       (116, 4432),\n       (6086, -23791),\n       (13936, -896623568),\n       (31123, 18869),\n       (9_077_900_364_896_745_592, -27283),\n       (166_433_341_374_471_904_744_344_044_793_885_241_783, -100)},\n      slice_comments={(5207,\n        5_947_111_325_931_106_007): '\\U0004adce\\x10\\x89\\x84\\x82\u00ea',\n       (-20042, -25069): '',\n       (5517, -56): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-13451, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-1.9,\n        constraints={'min_value': -inf,\n         'max_value': 6.145725847988465e+267,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.4709662153535237e-85},\n        was_forced=False,\n        index=None),),\n      length=111,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-16107,\n        -45_056_435_734_479_187_333_188_664_135_450_223_789)},\n      slice_comments={(2_080_540_762, 37): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=26132, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.3251598859667451},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xff',\n        constraints={'min_size': 0, 'max_size': 30},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-1_512_153_328,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'n\\xee\\xd4\\xf0_\\xb2\\xbd\\xcaI\\x8bz\\x93\\xadEWG\\xd4A+\\x96\\xc9!o\\xbc\\xe5| \\xfb\\x8d\\x11',\n        constraints={'min_size': 21, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-3.9781149646605576e+16,\n        constraints={'min_value': -5.527573656105776e+16,\n         'max_value': -1.0246211128000278e-195,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.0075909746570458e-154},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-718,\n        constraints={'min_value': None,\n         'max_value': 9_138_530_871_294_913_431,\n         'shrink_towards': 1000,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -9.813677028457705e-191,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.464066353246925e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xa0\\xd9\\xf3Y\\xbc\\xe5\\xe6E*p\\xe3\\xbb\\xd9$\\xec\\xd4\\x13\\xfa*En~^\\x11\"\\x8fC,\\xcfI^\\xfbU\\xb7okN\\x1bbs\\x9a\\xfbn\\xd5b\\xec\\xfe\"\\xf6\\x8d\\xc9Q\\xca\\xad\\x8e\\x90F\\x80\\xf0q\\xfco\\xb2\\xe0\\xa32\\xaa\\x165\\xe8Ct\\x96\\x0c*~\\xd6\\xd8V\\xd7\\x86\\x00w\\x1d\\xc2\\xfb*\\xfa\\xa9\\xcd\\x13\\x8fWI\\xf1,\\xaf\\x05\\xbf\\xec\\x97\\xe4\\xd0b\\xe56\\xabN\\x88\\x06\\x12\\x1b\\xd7\\x7f\\xc1\\xa9\\x96f\\xfc\\xde\\xfc\\xe5\\xd8^\\xe4;\\xc3\\x86\\x12k',\n        constraints={'min_size': 31, 'max_size': 131},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1.7976931348623157e+308,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.7976931348623157e+308},\n        was_forced=False,\n        index=None)),\n      length=44,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('c', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\\U0001a8a09',\n      has_discards=True,\n      target_observations={'\u00e0': -8813,\n       '\u00c6m': -1.7638537224262202e+159,\n       '\u00a6\\U000ea929fI\u00ab\u00e3\\x82': 0.05},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-161_793_818_039_783_203_161_675_736_782_035_276_049,\n        20669),\n       (20041, -459_520_516_381_628_694)},\n      slice_comments={(571731271, 671178941): ']',\n       (-43, -16982): '\u00ec\\U00087ccb\u00d0)\\U0008b79cg\\x10\\U0004bcd7'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=16227, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xe8\\x97:',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'K\\t\\xfe\\x11\\x7f^=\\xbcA\\xe5\\x95\\xe5\\x97E\\x8f',\n        constraints={'min_size': 7, 'max_size': 107},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000462ad\\U00046278\\U000462ab\\U0007a2fb\\U00068fd6\\U00046291\\U000462f6\\U0004628b\\U000462fa',\n        constraints={'intervals': IntervalSet(\n             build_intervals([287334, 890772]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None)),\n      length=12806,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('a', 0, 0)),\n                                    (('b', 0, 1), ('c', 2, 0)),\n                                    (('b', 1, 3), ('a', 2, 1)),\n                                    (('c', 0, 1), ('c', 0, 2)),\n                                    (('c', 2, 1), ('b', 3, 0)),\n                                    (('c', 3, 2), ('a', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         'eR\\x9d\u00fb\\x13\u00ff\u00c5',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\x15ay\u00ae',\n      has_discards=False,\n      target_observations={'4,)S\\x8ca%\u00fa\\x9e\u00d3\\x1a|': 1.1657264686242456e+32,\n       '\u00e7\\x9f \\U000c0437\\x9d\u00c2zY\\U0007dec0\u00a8\\x98': -17128,\n       '\u00fb\u00cbm\\x82\\x1d\\x84': -87,\n       'A\u00a4\ud888\udc8a\u00be\\U000af3f4{\\U000b6e49a': 9.618445558961673e+162,\n       '`&\u00c7\\U00036677a\u00e0': 20672,\n       '\u00ccWq@\\U00083b84k\u00c8(': 1.1098190272746986e+121,\n       '\u00fa\\U000f2707\u00c3\\x85\\U000d9cc0': 0.0,\n       '\u00dc\\x83\\x95': 5.570780181442926e-286,\n       '': -22211},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=24989, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xcc3\\xafB',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.10391981999851987},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'Z\\xcb',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.4046714009099408e+125},\n        was_forced=True,\n        index=None)),\n      length=24751,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 1, 0),\n                                     ('a', 3, 3)),\n                                    (('b', 3, 0), ('a', 3, 2)),\n                                    (('c', 3, 2), ('b', 1, 0)),\n                                    (('c', 3, 2), ('c', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-16899, -14097),\n       (-4677, 9794),\n       (6781, 28544),\n       (65535, 1_195_555_522)},\n      slice_comments={(1024,\n        154_581_935_827_186_698_845_516_528_891_948_760_623): 'Ig[z\u00e7\u00dd\\x0f\\x19\\x8d]\u00ffs5',\n       (-4735, -2461): 'line'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-79, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U0004f8c9\\U000762d1\\U0004f831\\U0004f91f\\U0004f862\\U0004f929',\n        constraints={'intervals': IntervalSet(\n             build_intervals([325679, 865348]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.105527426070612e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00049010\\U00048fe0',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [298823,\n                  325806,\n                  621923,\n                  718386,\n                  805796,\n                  899034,\n                  925360,\n                  1009926,\n                  1082631,\n                  1091622],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=109,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 16138,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=7,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('a', 2, 1)),\n                                    (('a', 2, 0), ('a', 1, 2)),\n                                    (('a', 2, 0), ('c', 3, 2)),\n                                    (('a', 3, 3), ('a', 1, 0)),\n                                    (('b', 2, 2), ('a', 2, 0)),\n                                    (('b', 3, 3), ('a', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('c,\u00efV', 0, 0, 'reason'),\n      expected_traceback='\\U000721a5a\\U000f7045\\xa0\\x96',\n      has_discards=True,\n      target_observations={'': 32323,\n       '\\U000f07bf\u00d6w': -5.024578371041294e+262,\n       '\\xa0\\U000c2e65B\u00e1\u00dc\\x9c\\x87\u00c5\u00bc': 24266,\n       '\u00d9': -95,\n       '\\x82gg': 106,\n       '9_': 28,\n       '\\x9c\\x14b2)`\u56c2\u00a3v\u00ed\u00b5U\\x1e\u00cc\\U0007dae4': 0.0,\n       '\\U000dccc1E': 3.9449928235901384e+16,\n       '\u00e7\u00b8\\x99\u00d0\u00d1\uc09dA\\U00056070\ud853\ude1a|\u00cb`\u00ef:\\U0010ac3f\\x06\u00dc\u00d9': 29913},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(20, -10639): '\u00a1:^\u00db\u00f9M\\U00071df0,\u00c8\\x16\u00e3\\x08',\n       (-19401, -6): '\\x12\u00e1\\x8d',\n       (5483, -114): '\u00dc',\n       (29843, 300): 'O\\U001080beh',\n       (26, 21503): '',\n       (69, 1000): '\\x83',\n       (1000, 104): '^',\n       (1_017_245_594, 1_767_737_960): '\u00f1\\x19\u00f6\uc233\\r\u00e6'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1524488737, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\u68fe\u68c8\u6894\\U000eb6a5\u6919\u68cd\u6888\u68a0\u6899\\U000b6f8c\u68e1\u6856\\U0001629d\u682f\u689a\u6847\u68de\u68b3\u6850\u6884\u686c\u68de\u6852\u68af\u68a1\u6910\u68ba\u6924\\U0007f621\u6899\u6830\u6835\u6880\u68ed\u68dd\u685e\u68da\\U00104c8f\u68dc\u685f\u6895\u68bd\\U00018d52\u685f\u68f8\u6852',\n        constraints={'intervals': IntervalSet(\n             build_intervals([26661, 133746, 520858, 795259, 912057, 1088207]),\n         ), 'min_size': 26, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-0.0,\n        constraints={'min_value': -9.246573063440606e-129,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.0395184161148045e+21},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 7.85551154573241e+307},\n        was_forced=False,\n        index=None)),\n      length=-3843,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 1, 2),\n                                     ('a', 2, 2)),\n                                    (('c', 3, 2), ('c', 1, 2)),\n                                    (('c', 3, 3), ('c', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'': -42,\n       '\\U000fabc7\\U000b5eacS\u00a5\\x08G\\U000a2506\u00d4F\\U0009b867\u00be/': 9,\n       '\u00b6\u00b5,\u00bfF': -29981,\n       '\\U000e6997y\\x84\\U000beb6a\\U00065ecc\\x0f': 7669049366719373.0,\n       '#\\x16': -1.8846667379876e+46,\n       '\\x97\u00c9': -1.6665042540913438e+204,\n       '\\x99\u00f7\\x97\\U0003a928\u00cf\\x0c\\U0003d594': 4407681578969660.0,\n       '\u00a2\u00f9\\U0008ab03T\u00a1': -15183,\n       '1': 127,\n       '\\U000f7c23CD;Cj\\U000879b9\\x0bX\\x16\\U0006b210y': -5.084182933116936e+287,\n       '\\x907OC': 65535,\n       '\\x1b\u00c9': 26765,\n       '\u00e0U\\x00\\x03': 8913,\n       '\\U00040f9c\\U0007098d\\U000498e0\\x92{_': 19286,\n       '\u00e8\\U000ae95b<.\u801d\\U0005a9c4{\u00fc': 0.0},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-138_846_951_840_285_749_330_099_316_491_493_527_930,\n        -17648),\n       (-94, -32_788_660_553_338_009_654_135_946_743_443_412_122),\n       (8, -11986),\n       (8150, 13182),\n       (22675, 14)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from integers(0, 1114111).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x108be8cb0>, min_size=0, max_size=inf).map(tuple), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text())), has_discards=one_of(nothing(), nothing(), booleans()), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), length=one_of(nothing(), nothing(), integers()), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason'))))).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.01226904202485457,
          "overall:gc": 0.00019583298126235604,
          "generate:args": 0.19567628833465278
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878935.402575
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-15441, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1.680065561177883e-88},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-18246,\n        constraints={'min_value': None,\n         'max_value': -124,\n         'shrink_towards': 19801,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xfboJ&\\xc7\\x90\\xfat\\xca\\x1dNt<\\xef\\xba0\\t\\xdc\\xd2\\xa7|2\\xbb\\xf4\\xc2\\x00\\xd5\\xbc\\x83\\xad\\x1b\\x1a\\xf7Cw#+\\x16\\xabW>\\xbab\\x88&\\x07\\xcf\\x08\\x08k\\xb2\\xe9\\x11s&\\xd0\\x0e\\xd7\\x90eU\\xff\\x01\\xb0G\\xa9v\\xa60\\xe2u\\x80\\x07\\xfd3vp\\x04\\xe5\\xa4\\xe0\\xebs\"\\xeb\\x0e\\xb3E>\\x16`Y\\xda!\\x94^SQq;\\x93y\\x86\\xcdrV\\x98\\xec55\\xc1\\xb6\\x7fn\\xe8\\x04D _\\x0b\"\\xb5~\\xff\\'\\x17b\\x14Y\\x07\\xb79F[\\xa9\\xaa\\xda\\xff\\x9f\\r6\\x8f0\\x03w\\xc5\\x9b\\xcc\\xb2\\xb2NBO\\xec\\xcd\\xd8\\xdd\\xcd\\xb5H\\x9e\\xef\\x11\\xd3Y\\x1e\\xc5@\\\\\\xc9\\xb1\\x1cO\\x96\\x84\\xe8',\n        constraints={'min_size': 45, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-12295,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('b', 0, 0)),\n                                    (('a', 1, 0), ('b', 2, 2)),\n                                    (('a', 3, 3), ('b', 2, 1)),\n                                    (('b', 1, 3), ('b', 3, 3)),\n                                    (('b', 2, 1), ('b', 2, 3)),\n                                    (('b', 2, 1), ('c', 1, 0)),\n                                    (('c', 0, 0), ('a', 3, 2)),\n                                    (('c', 0, 2), ('a', 2, 2)),\n                                    (('c', 1, 0), ('c', 0, 0)),\n                                    (('c', 1, 2), ('b', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\U000d4865y\\x99\\U000b7892\u00e4',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback='H\u00f3',\n      has_discards=True,\n      target_observations={']\\U0003b055\u00fc5\u00c9\u00a3\\r\u00b4j\\x00O': 650932978,\n       '\u00f0\\x93;?\\x12\u00c9': -58,\n       '\\U000777958\u00ed': 9.754851829032848e-296},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-127, 2840),\n       (-49, -10297),\n       (29, 20132),\n       (1_803_779_845, -16019)},\n      slice_comments={(-3551,\n        9999): '\u00de\\r\\U000de7c5q}\\x05\\x08&\\U000ba87a\u00f5\ud6c4\\x82\u00b3\u00df',\n       (-643827040, 28591): '\\U000c0060\\U000e8b69\\U000f0c07\\U000dcf96\u00c7\u00ba2)',\n       (9542, 87): '\\x9c\u00eb\\U0010218d',\n       (12943, 30): 'W\u00be{\\x17\u00bd\\x08\u00fc\\x010x\\U0006fe62\\U0001cbb5\\U00107ddd\u00e4\u00cc\\x06',\n       (19, 12279): '\u00e7)\\x08\u00eb\\xa0*\\x8d\\x99',\n       (119, 701144584): '\ud878\udc27\u00d7:\u00c7\u00e5\\U000b0da5\\U0007d164\u00a9Ld\u00ba',\n       (-915, -13613): '\\U0005262d\\x1fP',\n       (29499, 13962): 'fixtures',\n       (1_931_486_866, -43): '\\x89\\U000fb6e8',\n       (25982, 1_311_110_064): '\\x83U\u00e0\\x81',\n       (-5_597_863_740_850_997_270, -11739): '',\n       (114, -29674): '%\u00fc',\n       (28866, 6817): '\\U00103ef0a$*\\U0005789c',\n       (24198, -77): '\u00caJ\u00b8\\x8f\u00fb',\n       (1516, 27871): '\u00c0',\n       (15562,\n        65535): 'L\\U000e3b06\\x8e\\U0007e0a7\u00c4\u00ebN\\U000e0b99\\U000e40b7\u00e7ar\u00d7\\U000d8c55\\x12P\\x96'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-23589, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\u04d6\u049c\u0401\u04c0\\U000bd73f\u0417\u04d8\u04c1\u047e\u0468\u04b9\u048c\ud843\ude51\u04bd\\U000d748b\u04e5\u0482\u0483\u0432\u04ac\u04e1\\U000a8ddd\u0451\\U00040c92\u042e\\U000681b8\u0484\u0427\u0420\u04a8\u0464\u0431\\U000d55dd\u0442\u040a\u04e3\\uf02f\u03f7\u0411\u04ab\u0475\\U000c6477\\U0007bed0\\U00046c21\\U000d4171\u04a1\u04ab\u04b9\u04d4\u04e4\\U0006bb53\u043c\u040b\u0411\u0470\u0471\u04d2\u04ba\ud876\udf19\u04d4\\U0006c0c6\u0454\u0423\u0428\u04b9',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1000,\n                  9999,\n                  33031,\n                  545717,\n                  584237,\n                  585098,\n                  669900,\n                  889867,\n                  1027802],\n             ),\n         ),\n         'min_size': 43,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=877845309,\n        constraints={'min_value': 877841260,\n         'max_value': 877848637,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=-27275,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 2),\n                                     ('b', 2, 0)),\n                                    (('a', 3, 3), ('c', 2, 1)),\n                                    (('b', 0, 0), ('b', 2, 0)),\n                                    (('b', 0, 3), ('c', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\U0005423e\\U0010b71bQ\ubb83\u00f6\\x93\\x1c',\n                     [UnicodeTranslateError('\\U000f01e1S\\x87', 0, 0, 'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\u00f1\\x137\u00e7\\U0007c6e3\u00f48\ud870\udcb8\\x97\u00d7\\U000e9fc3',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('\u00bbmR\\x8f\u00d0',\n                                     [UnicodeEncodeError('unknown encoding',\n                                                         '',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '!\u00eft\\x04Bp',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError('\u00b7sp\u00ca\u00ea\\x7f\\x15\\x04\\U00058683',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeTranslateError('\u00f2\u00c7\u00fa\\U000507d4:TAC',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      ExceptionGroup('\\U000f943d\\U000d7693\u00bc,\\x1cQ\u00b8',\n                                                     [ExceptionGroup('\\x99',\n                                                                     [UnicodeTranslateError('\\n\u00e9\\x1d\\U000ec35f\u00bc\\x18\u00d1\u00f4\u00cb\\x16\\U000a1fdd\u00e4',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      ExceptionGroup('t',\n                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason')]),\n                                                                      UnicodeTranslateError(':\\x08a\u00a5\\x03\\x10',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      ExceptionGroup('',\n                                                                                     [ExceptionGroup('\\U00051f60\\xa0',\n                                                                                                     [UnicodeTranslateError('\u00fc\ud86f\uddbe\u00b8',\n                                                                                                                            0,\n                                                                                                                            0,\n                                                                                                                            'reason'),\n                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      ExceptionGroup('\\x9d\\U000c991a\"',\n                                                                                                                     [ExceptionGroup('n\u00ae\\x8f\u00af\u00a3',\n                                                                                                                                     [UnicodeTranslateError('',\n                                                                                                                                                            0,\n                                                                                                                                                            0,\n                                                                                                                                                            'reason'),\n                                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                                         '\\x85\u00b5#\\x8c\\x06',\n                                                                                                                                                         0,\n                                                                                                                                                         0,\n                                                                                                                                                         'reason')]),\n                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                         '\\x0b\\x0c\\x80\u00e5\\x94',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                         b'',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason')]),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         'G(\u4fd3;',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason')]),\n                                                                                      ExceptionGroup('D',\n                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                         '\\U000a170f\\U000518db\\U0005a9a8Y\u00c2',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeTranslateError('\\U000f0b34',\n                                                                                                                            0,\n                                                                                                                            0,\n                                                                                                                            'reason'),\n                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      ExceptionGroup('',\n                                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                                         '',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      ExceptionGroup('\u092a\u0928\u094d\u0939 \u092a\u0928\u094d\u0939 \u0924\u094d\u0930 \u0930\u094d\u091a \u0915\u0943\u0915\u0943 \u0921\u094d\u0921 \u0928\u094d\u0939\u0943\u0947 \u0625\u0644\u0627 \u0628\u0633\u0645 \u0627\u0644\u0644\u0647',\n                                                                                                                                     [ExceptionGroup('/api/tests/',\n                                                                                                                                                     [ExceptionGroup('\\ue8d4B\u00ea',\n                                                                                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                         b'',\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         'reason'),\n                                                                                                                                                                      ExceptionGroup('\u00b0\u00f1\u00e7\u00b6',\n                                                                                                                                                                                     [UnicodeTranslateError('\\ueb30\\x16\\x9e\u00db',\n                                                                                                                                                                                                            0,\n                                                                                                                                                                                                            0,\n                                                                                                                                                                                                            'reason'),\n                                                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                                         b'',\n                                                                                                                                                                                                         0,\n                                                                                                                                                                                                         0,\n                                                                                                                                                                                                         'reason')]),\n                                                                                                                                                                      ExceptionGroup('\\x1c\ud875\udcb6\u00b8',\n                                                                                                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                                         b'',\n                                                                                                                                                                                                         0,\n                                                                                                                                                                                                         0,\n                                                                                                                                                                                                         'reason'),\n                                                                                                                                                                                      ExceptionGroup('utf-8',\n                                                                                                                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                                                                                                                         '\\x12',\n                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                         'reason'),\n                                                                                                                                                                                                      UnicodeTranslateError('\\U000c0efcA',\n                                                                                                                                                                                                                            0,\n                                                                                                                                                                                                                            0,\n                                                                                                                                                                                                                            'reason'),\n                                                                                                                                                                                                      UnicodeTranslateError('\\U0008541d\\U000b7e43\\x82P\\U00072dd6\u00d6\u00e8\u00b2',\n                                                                                                                                                                                                                            0,\n                                                                                                                                                                                                                            0,\n                                                                                                                                                                                                                            'reason'),\n                                                                                                                                                                                                      UnicodeTranslateError('docs',\n                                                                                                                                                                                                                            0,\n                                                                                                                                                                                                                            0,\n                                                                                                                                                                                                                            'reason'),\n                                                                                                                                                                                                      ExceptionGroup('cCY',\n                                                                                                                                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                                                                                                                                         'none',\n                                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                                         'reason'),\n                                                                                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                                                                         b'',\n                                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                                         'reason'),\n                                                                                                                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                                                                                                                         '\\U0005b40d\u00c6\u00de8\\U00091ac5\\x8a=\\U000caccb',\n                                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                                         'reason'),\n                                                                                                                                                                                                                      ExceptionGroup('m',\n                                                                                                                                                                                                                                     [UnicodeTranslateError('\u00db',\n                                                                                                                                                                                                                                                            0,\n                                                                                                                                                                                                                                                            0,\n                                                                                                                                                                                                                                                            'reason')]),\n                                                                                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                                                                         b'',\n                                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                                         'reason')])]),\n                                                                                                                                                                                      UnicodeTranslateError('\\U000843c7`\\U00072ff4\\x06\\x9b\\x15\\r\\U000aec06F\u00b0',\n                                                                                                                                                                                                            0,\n                                                                                                                                                                                                            0,\n                                                                                                                                                                                                            'reason'),\n                                                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                                         b'',\n                                                                                                                                                                                                         0,\n                                                                                                                                                                                                         0,\n                                                                                                                                                                                                         'reason')]),\n                                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                         b'',\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         'reason'),\n                                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                         b'',\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         'reason')]),\n                                                                                                                                                      UnicodeTranslateError('\u00a1.Y\\U000b6d68\ud566\\x16\\U000ee2a1',\n                                                                                                                                                                            0,\n                                                                                                                                                                            0,\n                                                                                                                                                                            'reason')])])])]),\n                                                                                      UnicodeTranslateError('3',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason')])]),\n                                                      UnicodeTranslateError('\\U000d0c4e*\\x06\u00dd\\U00067a61:',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '\u00fc\u00db\\U000806fe\u00cd\\U0003b9f4',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')])])]),\n      expected_traceback='',\n      has_discards=False,\n      target_observations={'': -28347,\n       '\u00ff\\U00057a56\u00ec': 18067,\n       '$xw4\u00cb\u00b1{': -8980,\n       '\u00d5\\x89\u84941\\U0010a699E\u00e2\\U00058a0d\\U0008843a\\U00036ae7\\U00104749\u00ce': 110,\n       '\u00bd^}8\u00e8?P\\x0f\u00aa;\\U000dd4e2:\\U00070426': -2_386_508_639_844_856_952},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-6_894_601_489_617_748_911, 1024),\n       (-3_850_475_658_331_701_222, -4976),\n       (-313182527, -11874),\n       (-29391, 8192),\n       (-28853, -11138),\n       (-27287, -22576),\n       (-16572, 1000),\n       (-4467, 32193),\n       (5, -11533),\n       (20, 1_312_598_883),\n       (571, -8001),\n       (2073, 19561),\n       (12345, 10172),\n       (15818, -2_387_588_073_942_647_040),\n       (20932, 26714),\n       (21003, 51),\n       (25586, 18274),\n       (31234, 8941),\n       (2_069_846_370_245_463_967, 27713),\n       (2_865_653_457_156_564_516, -1562)},\n      slice_comments={(1_912_230_823_371_620_047, -24693): '',\n       (21540, 21509): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=3325, context=(), group_elems=()),\n      nodes=(),\n      length=-86,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 3, 2),\n                                     ('c', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\ua3d2\\x04': 73},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-589322569, -17273),\n       (-32491, 120),\n       (-2645, 7380),\n       (-122, 17179),\n       (-94, 4_412_885_991_088_758_632),\n       (-32, -48),\n       (-21, -23570),\n       (31, 0),\n       (4581, -121),\n       (8449, 1_661_754_687),\n       (9148, -32441)},\n      slice_comments={(96,\n        11088): '1/\\U00062555\\x0c\\U000dacd8\\U0009da7e\u00d3\\x80|\\U00012ce1\u00de}\\U000e6a88.\\x1b\\x8b\\x93\\U00089daey9\\U0009fe75',\n       (-9575, -5412): 'b\\x8d',\n       (-9276, 29912): '\\U000e20f6',\n       (53, 11376): '\u00ffw\\U000deaaa\\U0009cb57\u00cf\u00c0\u00e4\u00ed(',\n       (-4, -2381): '',\n       (-97, 14632): '\u00ac|',\n       (20105, 83): 'w\\x7fd\u00a5\u0191\u00c5',\n       (4442, -12008): '\u00e5\\U0004e24c',\n       (-6580, 41_772_795_735_744_681_595_391_502_727_254_618_745): '\u00de',\n       (6_234_873_292_690_087_748, -986764791): '\\x13\\U00062c4fy',\n       (8192, -29766): '\\U000139f8\u00afC\u00bd',\n       (78, -188316198): '\u00e0\ud84c\udf72X',\n       (-20713, 1_509_327_887): '\u00c1',\n       (1_819_342_537, 7168): '\u00eb\u00b5\\U000a2ce7\\x1d\u00dd',\n       (13582, 77): '',\n       (-27994, -16827): 'intervals',\n       (-90, -20944): '\\t\u00ae',\n       (-3233, -32625): '\u00bc',\n       (-3031, -5176): '\u00fa\\x90d',\n       (1_721_558_993, 439_592_433_582_518_057): '\\x82\u00ed\\U00074377\\x9a\u00c5\u00fb',\n       (-22399, -710971015): \"\u00ab\ud807\udd15\u00da'\"},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=99, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.591765153508414},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=8_241_787_613_347_148_142,\n        constraints={'min_value': 8_241_787_613_347_139_200,\n         'max_value': 8_241_787_613_347_166_862,\n         'shrink_towards': 8192,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -1.4722519074020933e-235,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.2390632730519668e+308},\n        was_forced=False,\n        index=None)),\n      length=-1329,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 2, 0),\n                                     ('c', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'': -19167},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=7598067088980597611, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xf8~Q\\xf00\\xc4a\\xca\"\\x83\\xf3\\x89\\xb2\\xad+\\x82\\xca\\t\\x8f%\\x0fl\\x00\\n\\x19\\x83\\x8f\\xda\\xe1\\x80\\x95\\xf2\\xc8\\xb1(\\x10\\xad\\x8f=F@\\xc9S\\xe2<[',\n        constraints={'min_size': 29, 'max_size': 129},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.5},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u5ab0',\n        constraints={'intervals': IntervalSet(\n             build_intervals([23104, 709150, 957243]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xed|\\xfb\\xa9\\xc5\\xeb\\xde7W\\xc8\\x0cH@k\\xb3c\\xc0w\\xf8f\\t\\xb17[Z\\xc2\\x8b\\xd1\\xf5\\x7f\\x9d-\\xffC\\x05\\xe2@\\x8d\\xbd1<\\xd3a\\xea\\xc7\\x86\\xdei\\xd9G\\x0bP\\x84\\xda',\n        constraints={'min_size': 28, 'max_size': 62},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000d4b92\\x9c\u00fcW\u00d3LH\u00db\u00e7n\\U000a2cd2\u00e4\\U000d91df\\U000b7902',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  27430,\n                  156579,\n                  183055,\n                  405246,\n                  445538,\n                  476330,\n                  556328,\n                  561589,\n                  630698,\n                  636703,\n                  732960,\n                  749473,\n                  1014766],\n             ),\n         ),\n         'min_size': 1,\n         'max_size': 101},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xfb@y\\xd8KR\\x11\\xb3\\xbe6E\\xbc4\\xfc\\xf4\\x0c$\\xc9\\xa8,E\\x92\\xf78\\x8f\\xca\\xd0\\xd9A\\x9b\\x9cr\\xd6\\x9d\\x8f\\xee\\x0c\\x891i~Z\\xc3\\xd3-bga \\xa4\\xc6',\n        constraints={'min_size': 47, 'max_size': 78},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x0c\\x9f\\x18\\x1b=\\xaf\\x04\\x88\\x1c#f\\xcf\\x1b\\x9b4\\x0b\\xf17v\\x9f\\xc9C\\xd9\\xbf:\\xa3\\xa3>9\\x82\\xcfuf\\x86h&3L\\x95\\xb2\\xe1E\\x14j\\xac$\\x0b\\x87v\\x83\\xc0\\x8d\\xd3\\x93B\\x13a\\x932',\n        constraints={'min_size': 45, 'max_size': 72},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-6.409281316382012e+16,\n        constraints={'min_value': -inf,\n         'max_value': 2.139954308354473e+29,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 7288387082747277.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.6731653456478777e+308,\n        constraints={'min_value': -5.749891800161437e-95,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.6731653456478777e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'98\\xdba\\xb9b',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u046c\ud835\udf34\u0454\u04f4\u048c\u04ce\u042f',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1024,\n                  110751,\n                  114290,\n                  197336,\n                  225698,\n                  233106,\n                  328608,\n                  374357,\n                  544964,\n                  558517,\n                  1106267],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.3048480832737148e+307,\n        constraints={'min_value': 3.578921434408201e-66,\n         'max_value': 1.55722232392674e+307,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 9.904783594223885e+306},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.225073858507e-311},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'r\\x00\\xa08}x\\xc9\\xeaU\\x08\\xfc\\n\\xa7\\xb4?\\n\\xf3}\\xb9\\x04+Z\\xf5\\xa5\\xfa\\x80\\xb8\\xf1\\xc0K\\x9c\\x9e\\xc7\\xa2\\x10\\xbdL\\xce\\xb6\\xb4wD\\x99\\xc8\\xe6\\xf1\\xb5\\tI\\rl',\n        constraints={'min_size': 46, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.1970390234985483e+307,\n        constraints={'min_value': -1.1754943508222875e-38,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 8.306298792768502e+306},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.3339841814729545e+307,\n        constraints={'min_value': 8.273108694659837e-196,\n         'max_value': 2.744296692253056e+307,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.7865057113411653e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.37751803722447075},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1.7976931348623157e+308,\n        constraints={'min_value': -inf,\n         'max_value': -1086931488877080.0,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.9633244061353063e+52},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.25428137597059447},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u0621\u0656\u0645\u0695\\u0601\u062f\u061b\u062f\u068e\u2813\\U00042ea3\\U00047672\u0688\u0621\\u05f7\\u061c\u05e4\u0686\u0650\\U000aedb7\u0650\u06ac\u05d0\u063a\u060f\u0645\\U0004f0da\u0623',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1471,\n                  21913,\n                  28542,\n                  44650,\n                  181085,\n                  327275,\n                  488578,\n                  494682,\n                  573699,\n                  574460,\n                  702685,\n                  766015,\n                  855169,\n                  891382,\n                  991332,\n                  1016678,\n                  1047192],\n             ),\n         ),\n         'min_size': 13,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 1.9046994721781436e-97,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.05},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud800\udc23\\U00010061',\n        constraints={'intervals': IntervalSet(\n             build_intervals([65535, 192574, 551545, 738594]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ub93c\ub962\ub8bc\ub976\ub947\ub8dc\ub949\ub934\ub8ab\ub92d\ub95a\ub955\ub907\\udc4c\ub9a7\ub8f1\ub91e\ud054\ub8b8\ub8ce\ub935\ub98f\\udce4\ub989\ub8fa\ub938\ub8f9\ub8ab\ub959\ub8c4\uceda\ub90b\\udeae\ub964\ub983\ub8f8\ub90d\ub930\\udbb6\ub96d\ub990\ub8ab\ub8ae\ud411\uc141\ub8cb\ub8e7\ub8e2\ub902\ub90e\ub924\ub950\ub8ba\ub930\ub90e\ucc68\ub964\ub8e2\ub92c\ub8bf\ub8e3\ub94c\ub8de\ub915\\udec7\ub912\ub955\ub8fe\ub91c\ubd31\ub932\ub94e\ub8a8\ub8d7\ub980\ub98f\uc8c5\ub8b6\ub933\uba36\uc40d\ub8ed\ub959\ub945\\ud8a7\ubd2e\ub920\uc272\ub8ea\ub8e9\ub8c8\ub94b\ub8aa\ub8f5\ub910\ub948\ube6c\ucd76\ub8fd\ub8e1\ub8fc\ub937\ub936\ub945\ub8e3\ub992\ub95f\ub8ca\ub981\ub996\ub903\ub904\ub8fe\ub8b9\ub91e\uccac\ub98c\ub8c6\ucb2e\ub955\ub8da\ub988\ub985\ub8de\ub8d2\ubcab\ub9a0\ub8fc\ub9cc\ub975\ud1f6\ub971\uc6f5',\n        constraints={'intervals': IntervalSet(\n             build_intervals([47269, 57359, 839978]),\n         ), 'min_size': 40, 'max_size': 140},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-3071,\n        constraints={'min_value': -3836,\n         'max_value': 42,\n         'shrink_towards': 3118,\n         'weights': {-1207: 0.20202768271203123}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\x8f\u00e0',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [47,\n                  311941,\n                  431999,\n                  512665,\n                  570793,\n                  789342,\n                  848616,\n                  1011516,\n                  1107435],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00055b10\\U00043b48\\U00043bfd\\U00043c1b\\U00043bcc\\U00043b4a\\U00043c1f\\U00043c28\\U00043bad\\U00043b57\\U00043b91\\U00043b6f\\U00043bd9\\U00043bcd\\U00043bff\\U00043bf2\\U000754c2\\U0006e7ca\\U00043b54\\U00043bec\\U00043b97\\U00077dd7\\U00075b19\\U00043ba9\\U00050dfa\\U00043b75\\U00043bd0\\U00043b82\\U0005e411\\U00043b95\\U00052803\\U00043b91\\U00043bea\\U00043b80\\U00043c1a\\U00043b8c\\U00043be2\\U000587c6\\U00043b47\\U00043ba4',\n        constraints={'intervals': IntervalSet(\n             build_intervals([277312, 505821]),\n         ), 'min_size': 23, 'max_size': 123},\n        was_forced=True,\n        index=None)),\n      length=15,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('b', 2, 2)),\n                                    (('a', 1, 0), ('b', 0, 2)),\n                                    (('b', 2, 0), ('b', 1, 3)),\n                                    (('b', 2, 0), ('c', 1, 1)),\n                                    (('b', 2, 1), ('c', 3, 3)),\n                                    (('c', 1, 1), ('c', 0, 3)),\n                                    (('c', 3, 1), ('c', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\x19',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('J', 0, 0, 'reason'),\n                      UnicodeTranslateError('\u00bd', 0, 0, 'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         'shrink_towards',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(1000, 325): '}\ud841\udf05\u00a6\\U0006303e}\\x1c',\n       (37, 11): '`P\u00bd\u00c8}\u00ae\u00e6\u00f2\ua48b\\U0008889f\\x04\u00b3\\U000ffd0d'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-18988, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U000e19a9\\U000e1949\\U000e195c\\U000e190d',\n        constraints={'intervals': IntervalSet(\n             build_intervals([923845, 1057738]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1.7976931348623157e+308,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.464781116288203e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8553537064647747},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=32434,\n        constraints={'min_value': -17359,\n         'max_value': None,\n         'shrink_towards': 90,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=102,\n        constraints={'min_value': 89,\n         'max_value': 109,\n         'shrink_towards': 28494,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00033bc0\\U00033bd6\\U00033bec\\U00033b74\\U00045550\\U000acdfe\\U00033b31\\U00033b36\\U00033b67\\U00033b2d\\U00091a75\\U0004367c\\U00033b88\\U00033bb0\\U00033bc9\\U00033bb9\\U00042baf\\U00033bdc\\U00033b55\\U00033b5e\\U00033bd8\\U00033bf3\\U00033b1e\\U000d40f7\\U00033b2c\\U00094881\\U00033bd2\\U000b220c\\U00033beb\\U00033b62\\U00033bcf\\U00033b5b\\U00033bcd\\U000be833\\U00033be5\\U00033b76\\U00033b7b\\U00033bf3\\U00033b7f\\U00033bd8\\U00033bcb\\U00033b76\\U000dbb7e\\U000977f7\\U00033b1e\\U00033bab\\U000c51db\\U00033bf1\\U00033bd3\\U00033b7d\\U000587a7\\U00033b82\\U00033b75\\U00033b81\\U000a9b13\\U00033b77\\U00033b99\\U00033bc7\\U00033b15\\U00033bb1\\U000b9e0d\\U00033bc4\\U00033bf0\\U00033b92\\U00033bbb\\U0009bfbe\\U00033b21\\U00033bd0\\U00040752\\U0003de0f\\U00033b9e\\U00033b90\\U00033bc1\\U00033b2c\\U00033b44\\U00033b68\\U00033b88\\U00033bce\\U00033b56\\U00033b4d\\U00033bcb\\U00033bcf\\U00033b94\\U00033b94\\U00033bcc\\U00033b7c\\U00033b0c\\U00033bfe\\U00033b42\\U00033bd7\\U00033b8f\\U00033b43\\U00033b11',\n        constraints={'intervals': IntervalSet(\n             build_intervals([211721, 453707, 580492, 939348]),\n         ), 'min_size': 35, 'max_size': 135},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u00d0\\x81\\x81\\x8b\\U00057184\\U00034450\u00b2\\x94\u00b1\\U0008d3a4\\x1e\\U000156d22\\U0006408b\\x07d\\U00048abc\\U000ad5da\\x91:\u00ff\u00f1_K\\x14F0Z|\u7035S\\x19\\U000d114a\u00f8\\x1d\\U00101ddbJ',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  462816,\n                  529773,\n                  831177,\n                  839746,\n                  1064703,\n                  1066379,\n                  1114111],\n             ),\n         ),\n         'min_size': 9,\n         'max_size': 109},\n        was_forced=False,\n        index=None)),\n      length=-6_316_907_998_605_597_683,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('c', 2, 3)),\n                                    (('b', 3, 3), ('b', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         'assets',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='u\\x9b\u00ffu\u00f4\u00ca\\U0001a7e5',\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(55, 98)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=15797, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([0, 507300, 744731, 982285, 983747]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None)),\n      length=-7159,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('c', 0, 3)),\n                                    (('b', 0, 3), ('a', 0, 0)),\n                                    (('b', 3, 3), ('c', 0, 1)),\n                                    (('c', 3, 2), ('a', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'': -88,\n       '&\ud881\udd50': 8.844095612341476e+87,\n       '-Infinity': -17167,\n       '\u00cb\\x0e\\U0003a629\u8a1124f\\x15\u00c8\\x96\u00c2Q\\x818\u00e6?': 10330,\n       \"\\x08\u00b1\\x96\u00e0'\u00d0\": 1.3252942107685188e+171,\n       '\\x81\\U000cbf5d.=\\x988:\\U0009c3297X\u00ae\\U0005010e': 15622},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-7_079_158_329_459_062_784, -3_047_490_616_642_732_470),\n       (-971285046, -35),\n       (-20635, -27560),\n       (-32, -25006),\n       (78, -61),\n       (2743, 26806),\n       (3377, -26297),\n       (1_657_375_752, 11775)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.005847498949151486,
          "overall:gc": 5.583401070907712e-05,
          "generate:args": 0.11255908443126827
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878931.834073
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-29123, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\x06\\x11=\\xbe\\xa7',\n        constraints={'min_size': 0, 'max_size': 96},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=3083849343167611.5,\n        constraints={'min_value': -2.00001,\n         'max_value': 1.0117773107515052e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 3083849343167611.5},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-3.402823466e+38,\n        constraints={'min_value': -inf,\n         'max_value': -2.00001,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.00001},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-12061,\n        constraints={'min_value': -19925,\n         'max_value': -81,\n         'shrink_towards': 0,\n         'weights': {-6012: 0.030183053179381143,\n          -16346: 0.02981807639162262}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-10867,\n        constraints={'min_value': None,\n         'max_value': 28110,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -inf,\n         'max_value': 0.05,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.5267067126081406e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0004e045\\U0008bb15\\U0004501e\\U00044f96\\U00044fc7\\U00044fe6\\U00053830\\U000755b6\\U00045046\\U0004501e\\U00044fa4\\U00044fc4\\U0004502e\\U00044f7c\\U0004502a\\U00044f70\\U00044f71\\U0004501e\\U00044ffd\\U00045051\\U0008066f\\U00045030\\U00044ff3\\U0006394f\\U00045001\\U00044ffd\\U00044fa0\\U0004501f\\U0004503b\\U00045033\\U0006917a\\U00045009\\U00045049\\U0004500f\\U00044fbd\\U00044f89\\U00080e93\\U00074bb0\\U00045018\\U00044ff5\\U00044fb3\\U00075437\\U0004500a\\U00045046\\U00045046\\U00044f84\\U00045024\\U00044fb5\\U0004504f\\U00087f7c\\U00044ff3',\n        constraints={'intervals': IntervalSet(\n             build_intervals([282457, 580810, 877300]),\n         ), 'min_size': 18, 'max_size': 115},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 7.311798493377545e+297},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xad\\n\\x0f8(\\xb4bqnt\\xea\\xc25\\n\\x1e\\xba\\xb8\\x9a',\n        constraints={'min_size': 0, 'max_size': 80},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=25,\n        constraints={'min_value': None,\n         'max_value': 1000,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(build_intervals([1, 441038])),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-2_501_726_249_623_536_711,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('b', 1, 2)),\n                                    (('b', 2, 0), ('c', 3, 0)),\n                                    (('b', 3, 2), ('b', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\u00f4y\\x16Y/\\x96\\x9eC`',\n                     [UnicodeTranslateError('z\u00c7', 0, 0, 'reason'),\n                      ExceptionGroup('',\n                                     [ExceptionGroup('\u00c0\u00f3\u00b7\u00c6T~',\n                                                     [UnicodeEncodeError('unknown encoding',\n                                                                         '\ud81f\udc8a{\u00eex\u00e72\\x84\u00f3P\\x10tVf\\U000e8bc6',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      ExceptionGroup('\\U0010bf4b\\x96\u00a1\\x07TX,\\x7f\u00ef\u00f0\u00aa\\x17D\u00af\u00ce\u00fd-Odx\\x98\\x96\\U00103116\\U000c8e71',\n                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      ExceptionGroup('\u00b0\\x03\u00ed\\x0b',\n                                                                                     [ExceptionGroup('\u00b5',\n                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         '\\x10',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason')]),\n                                                                                      ExceptionGroup('\u00eb\\x87\\U000adfff\\U000a4744',\n                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                         '\ud853\udef8\\U000bbde7\\U000a0026\u6161\u00fa\u00d8\\tV',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason')]),\n                                                                                      ExceptionGroup('v!\u00b8/',\n                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         '\\x10',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason')]),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeTranslateError('\\x08\\x86\\U00076efd\u00b9M\\x82#M\u00a9k4',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason')]),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')]),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')]),\n                                      UnicodeTranslateError('}7)',\n                                                            0,\n                                                            0,\n                                                            'reason')]),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\\U00038779\\U00032ab1': 5.334743614661042e+16,\n       '\u00db\u00ae': 37,\n       '\\U0003568e\u00d0\u00ea\\U000150bf{\\x89\\U00099e61\\U0009b517\\x0f': -1.656581538292974e-117,\n       '?': 0.5,\n       '': -1.041571668260138e+84,\n       '\\U00103577': 5.0351971932331656e+16,\n       ':\\x10,\\x13\u00e8\\U000d8608\\U000ea3d9#f\u00cdi\\U000553b1^': 1.7976931348623157e+308,\n       'HP\\x9f\\x04\u00f0\\x90\\x06\u00e9\\U000a6372\u00d1': -3.9172573191105016e+16,\n       '\\U0009c45b\u00f0\\U00012915\u00f6\\U0010a254\u00cf(\u00b5': -27408,\n       '\u00d7\\x85\\U0005aeae\\U00042023\\U001036e8\ud850\udca4X\\U00089870': 6.196915482058131e+16,\n       '\u00df': nan,\n       ' \\x84\u00d9\u00b3K': -6.029026130636729e-22,\n       'p\\U0008f169\u00d8\u00e7\\x08': -2.07748789558307e+16,\n       '\\x94\\x89': -14_940_783_594_688_682_492_054_476_543_986_276_427,\n       '\\x06O\uba3d\\U00080a34\u00f3\\x80\u00b7': -81,\n       '\u00b6': -5.966553653311744e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-23004, 1_785_606_305),\n       (-7, 53),\n       (300, -19199),\n       (512, -12732),\n       (1701, 1647),\n       (2991, -7_143_605_067_321_934_952),\n       (5744, -12593),\n       (24984, -6468),\n       (26511, -28),\n       (30816, 10062),\n       (77_601_233_281_264_032_966_991_501_016_293_235_669, 29029)},\n      slice_comments={(-1_587_803_477, -8_577_253_270_451_754_097): '\u00ed',\n       (3_231_376_775_956_198_496, -25969): '\\U00034f1f',\n       (-41, 25360): '\\x18\u00f3',\n       (15263, 23250): '\\U000f99b8I\u00aa\\x07\\x88',\n       (-28, -5_032_654_292_594_597_052): '\\U0009445b\u00ab',\n       (55, 73): '\\U0004015b\\x7f',\n       (13416, 11889): 'V\u00caJPy\\x93\\x80\\x86\\U000ac8f9\u00c9\\x8a',\n       (12, 404): '\\U000feef0'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=50, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.5067379740406156},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud801\udc98\ud801\udcdf\ud801\udd33\ud801\udca1\ud801\udc6e\ud801\udc4d\ud801\udc62\ud801\udd01',\n        constraints={'intervals': IntervalSet(\n             build_intervals([66614, 167750, 690778]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None)),\n      length=65535,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('a', 2, 0)),\n                                    (('a', 2, 1), ('c', 2, 3)),\n                                    (('b', 1, 1), ('b', 3, 1)),\n                                    (('b', 3, 0), ('b', 1, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\U00093fb2\u00d1\u00d1', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00e4o\\U000720cf\u00de\u00d0\\x15': 22486},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_367_424_836, 30)},\n      slice_comments={(-109, 6): '@\\U000e9964\u00c4\\xad\\x95\u00cbe\\x85\\x1f\u00aa\u00a1\u00d0~',\n       (-64, -6): '\u00bb\u00f2',\n       (18023, 15254): '',\n       (-10973, -37_283_840_043_481_399_217_366_445_392_572_989_535): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1430648926, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.580243941279169},\n        was_forced=True,\n        index=None),),\n      length=-29564,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 0),\n                                     ('b', 1, 1)),\n                                    (('c', 2, 1), ('c', 1, 2)),\n                                    (('c', 2, 2), ('b', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\x14/\u00ca', 0, 0, 'reason'),\n      expected_traceback='\\x9b\\x8c\\U0008c2e4$\\x8f\\x0f',\n      has_discards=False,\n      target_observations={'\\U000c92ab': 4816},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-5649, -101), (55, -14889)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=91, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-808393697,\n        constraints={'min_value': None,\n         'max_value': -808390582,\n         'shrink_towards': -3415,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.824038450576562e-263},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'M\\xcf\\xf3u',\n        constraints={'min_size': 0, 'max_size': 13},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.33843701266817555},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u797e\ud81e\ude41\\U0006f777\u7a00\u7972\u7999\u7989\ubeaf',\n        constraints={'intervals': IntervalSet(\n             build_intervals([31037, 573673, 927705]),\n         ), 'min_size': 6, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-5889,\n        constraints={'min_value': -23563,\n         'max_value': 4423,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 5.681531989730158e-300},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value=\"\u00db\u00ca'm\u00ed\\\\|\\x8b\\ueb8b\u00e3\\x81E\u00fc\\x8b\u00b2\u00ec\",\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1,\n                  225587,\n                  242838,\n                  250279,\n                  272453,\n                  375682,\n                  522166,\n                  756674,\n                  849666,\n                  905581,\n                  963920,\n                  1019346,\n                  1107915,\n                  1114110,\n                  1114111],\n             ),\n         ),\n         'min_size': 13,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-29052,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -6_105_327_113_974_973_029,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x00\\xaeU\\xf6\\xe1\\xd7\\x88\\xa8\\xbf0\\x81MDF\\xd0',\n        constraints={'min_size': 0, 'max_size': 95},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=160,\n        constraints={'min_value': 103,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000ce2b8',\n        constraints={'intervals': IntervalSet(\n             build_intervals([266411, 988085]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=102,\n        constraints={'min_value': None,\n         'max_value': 27879,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u02ee\u0276\ud338\u02d1\u02c0\u07ad\u02b6\u906b\u02ec\u02ab\u3285\u0281\u0257',\n        constraints={'intervals': IntervalSet(\n             build_intervals([512, 62888, 282851]),\n         ), 'min_size': 13, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=1088,\n        constraints={'min_value': -16390,\n         'max_value': 23053,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.6461910019528413},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xe6\\xb3\\xe6yF\\xcb]3V\\xf50\\xa9\\x1a\\x1bE\\xa1\\x94\\x81\\x9bd\\x05\\xe4\\xedZ\\xfb\\x9e\\x1e/a?\\xc4T\\xe6\\x05\\x0f\\nV\\xc5\\x04\\x8fx\\xea\\xe048\\x13X\\xa0&c\\xb2\\xb0\\xc8\\x17T\\xec\\x98\\x97\\x02\\x94Y\\xb4>\\x8c\\xdd\\xd8^w\\x0f\\xd40\\x13\\x93j\\x17Z\\x8c\\x8fn\\x88\\xfb\\xd1\\x93\\xafy\\xe4\\xb2\\x9b\\xc7\\xce\\x8b\\x88\\x97\\x83s@\\xd4',\n        constraints={'min_size': 20, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0004babb',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [309848, 353941, 541474, 803489, 1114110, 1114111],\n             ),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-2.1639409755470202e+26,\n        constraints={'min_value': -4.461436434176866e+26,\n         'max_value': 1.117863476234899e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.05},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'.hypofuzz.failures',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9270023845321971},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.4792722164041624e+308,\n        constraints={'min_value': -3.329440563528909e-217,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.4792722164041624e+308},\n        was_forced=True,\n        index=None)),\n      length=-14068,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 3),\n                                     ('b', 1, 2)),\n                                    (('a', 3, 3), ('c', 3, 2)),\n                                    (('c', 3, 2), ('b', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00f5\\x98\u01ef\u00e1\\U0001b52d\\U00065500',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\\x10\u00e7*': -8.331984356874073e-101,\n       '\u00ac': 3.697658375630745e+16,\n       '\\U000a0e62\\r\\x18\u00af': 21421,\n       '\\U000dba5f?': 11290,\n       '': -26274,\n       'a': 6.927499954746439e-26,\n       '\u00e0\u00ac\u00e7Q\\x05': 3.562717967014737e+16,\n       '-\u00dc\\U00045d02\\x8a\u00b5B\\U00091645\u00e2\\U000d05d8^\\x02\u19fa\\U00054077\\x97n \\U00071f39/J\\x01\\U000e880f': 0.0,\n       '4\\U000dbfb9\\x03\\U0006fb5d\udb40\udd08\\U0006f654v\\U000432e2': 2.596587771026064e+16,\n       '\u234e': -8.510536790503199e+27},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-20781, 13640): '\u00ea\u00f7\u00ac\\x94\\x08\u00a2\\U00050e15\\U000dcdef\\x00K',\n       (-21372, -30640): '\u00b6\u00f5[',\n       (-111, 95): '\u00ac\u00af\u00fe',\n       (-60, -30287): '\\U000a5c95\\x0f\\x00ui\\U000c8316\u00d2y\u00d3'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=43, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=90,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=512,\n        constraints={'min_value': None,\n         'max_value': 16942,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000a19a2\\U000a431a\\U000f5dbf3^\\x17Gj\u00d9',\n        constraints={'intervals': IntervalSet(\n             build_intervals([0, 1000, 638168, 679600, 877232, 1046408]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=33_048_752_164_184_660_998_204_238_981_346_380_336,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 3, 3),\n                                     ('a', 1, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\u00e5b\u00fa\\r',\n      has_discards=True,\n      target_observations={'\\x88': -3.5988785868709625e-79,\n       '\\x93': 26488,\n       '5\u8ffd\\U0007e24asJ\\U0009cc15': 1.752956695852674e+192},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-780479891, -1_866_571_352),\n       (-29190, 31820),\n       (-15857, -25893),\n       (-5208, 11202),\n       (-91, -3006),\n       (-14, 30482),\n       (35, -2663),\n       (9999, -31892),\n       (1_052_397_667, -78)},\n      slice_comments={(28806, -16079): '\u00b3',\n       (18992, -21557): '\u00a5\u00ac\u00ea\u00db\u00d6\\U0010465d',\n       (512, 16887): '\\n\u00b5\u00d2\\x06\\x108\u59c1',\n       (20245, -2_145_240_534): '\u00c6\u00ac9',\n       (-15939, 22057): '',\n       (-25907, -25594): '\\U000b90cb',\n       (52,\n        24086): '_\u00c9\\U0003fa5c\u00aa\\x97\u00a6\\U000b8ce6_&\u00a8b\u00e9\\U0010895b$\\U0008fba9\u00e4\u00c9\\x9a'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-41, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(build_intervals([404, 65535])),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xe6\\x11\\x90\\xee\\x03Jd\\x92\\xae\\x19\\x12y\\xa0\\xbc#\\xbd\\xa4}g\\xc2\\xfe\\x15B\\xbd\\x04\\xd6m\\x96\\x1em\\xd65My\\xc5\\xe3\\x84!\\x7f\\x9a\\x82n\\x0c\\x02y\\xd9\\xc9\\x8c3\\xa8\\xd9yF\\xc6;\\xfcd?GC',\n        constraints={'min_size': 43, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'01\\x92\\xf9\\x05H(\\xd6E',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=inf,\n        constraints={'min_value': -2.225034784793586e+16,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.2092811504482764e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud842\udf29\ud842\udf9d\ud842\udff2\ud842\udf2b\\U00068f38\\U00092eaf\\U0003b261\ud842\udf46\ud842\udfd8\ud842\udf4f\ud842\udf67\ud842\udf24\ud842\udfc3\\U00079ce4\ud842\udf14\\U00037d5f\ud842\udfc5\\U000349c3',\n        constraints={'intervals': IntervalSet(\n             build_intervals([133895, 707484, 708249]),\n         ), 'min_size': 18, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000c02f6\\U000c02ba\\U000c0356\\U000d5680\\U000c033b\\U000c02a7\\U000c0375\\U000dc303\\U000e8ae1\\U000c0362\\U000edd96\\U000c0368\\U000fa604\\U000c02d5\\U000c0391\\U000c02d4\\U000c037f\\U0010479b\\U000c031b\\U000c0385\\U000c02af\\U000c0381\\U000c0350\\U000c0388\\U000c02f4\\U000c81d4\\U000c02b9\\U000c02cf\\U000c038c\\U000c038d\\U000fdd7e\\U000c02aa\\U000c02ed\\U000c0352\\U000fcef4\\U000c033e\\U000c02b8\\U000c02c9\\U000c0303\\U000c02c0\\U000ce412\\U000c0306\\U000f4c13\\U000c029c\\U000c0389\\U001046b0\\U000dc4fe\\U000c0312\\U000c02a4\\U000c0352\\U000c02e1\\U000c0342\\U000cb4a3\\U000c033d\\U000c02bc\\U000c0381\\U000c02f1\\U000c037f\\U000c0322\\U000c0332',\n        constraints={'intervals': IntervalSet(\n             build_intervals([787100, 1114111]),\n         ), 'min_size': 32, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=6086,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('a', 2, 3)),\n                                    (('a', 3, 3), ('a', 1, 0)),\n                                    (('b', 0, 2), ('a', 2, 0)),\n                                    (('b', 0, 2), ('b', 2, 2)),\n                                    (('c', 3, 0), ('c', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('.*zcn\u00c0\u00f3\\U000a9f51',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\u00b3': -6_609_524_391_062_504_434,\n       '<': 4.107533683832883e+16,\n       '&\u00a3': 28296,\n       '\\x8f': 6.84568846354797e-223,\n       'B': -13652,\n       'blackbox': -4.9367369490787224e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_042_266_925, -8_506_599_367_017_850_723),\n       (-26093, -5928),\n       (-15268, -1_309_694_085),\n       (-3964, 51),\n       (56, -92),\n       (1000, -19238),\n       (1024, -104_123_047_975_819_741_285_114_965_681_311_437_139),\n       (7596, -15687),\n       (18131, 10516),\n       (28494, -22228),\n       (6_299_008_282_158_385_337, -10214)},\n      slice_comments={(22, -19638): '\u00dc\u00df', (-25690, -5640): '\u00b9'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=31201, context=(), group_elems=()),\n      nodes=(),\n      length=-15424,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 0),\n                                     ('a', 0, 0)),\n                                    (('a', 1, 2), ('b', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='C',\n      has_discards=True,\n      target_observations={'\\x89\\x1c\u00e3': 1.6523415134956133e-300,\n       'M\\x97\\x0b\\x0c\\x8dn\u00cf\\x85\\U0010689e\\x18\u00e6w\\x95|H\\U000bee6a\\x80': -5_730_512_950_377_728_285,\n       '*t\\x07\\x10': -9497,\n       '\u00dd': -4.264081820845519e-148,\n       '\\U0004223e\\U0007a00b\u00a3\u00b2(\u00d5L': -15280,\n       '\\x1eC\\U00088317': 26354,\n       '\\U0007b80e\u00a6\u00f1c\\x8aX\u00c1q;L\u00a2': -2.1843010715161044e+16,\n       '': -3506,\n       '#0\\x87\\U0005741d': 5.335841084515839e+16,\n       '\u00ac\u00c4\\U000c8253A\\x1e\u00ccm\\x8d\\x05': -1.077658379667242e+16,\n       '\\U00087178': -5.009091539072445e+223,\n       '\u00cb\u00d4I\\x9c\u00cc\\U000a857d\ud875\udd61Z\\r\\U0005a7c1[I\u00fc\\U00064d73\\U00033a72S\u00da\\U000ede24\u00b0\u00fdK\u00f1': 2.7533574452105932e+16,\n       '%]I\u00a1\\U00012682\\x0f': -9_434_768_277_197_670_576_723_417_208_035_445_664,\n       '/\u00a7\\x8cV': 545_218_153_917_595_204,\n       '\\x8d\\x02\\x18_': -12994,\n       '\\x87~\u00ea1\\tK\\U00053fd7': -9704},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-23662, 23858), (65, 503495368), (120, 512)},\n      slice_comments={(300, -8_873_666_030_597_531_463): '',\n       (-14758, -4497): '\\U000618a5\\x8d\\U0007c9b3\u00d0\u00b0\u00fb\\x9e'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-16260, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b\"\\xb6\\xa6\\xb6\\x07\\xcb\\xee5\\xa8\\xccL'\\x99#\\x9c\\xdem\\xb9\\xfa\\x9b+\\x9f\\xb7\\xfdC\\xa1\\xb40\",\n        constraints={'min_size': 7, 'max_size': 107},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x05\\x95\\x94\\x19',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=35_096_474_428_820_143_600_757_731_074_933_617_685,\n        constraints={'min_value': 1,\n         'max_value': None,\n         'shrink_towards': -1590,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-42_374_113_732_527_685_752_949_495_443_551_258_093,\n        constraints={'min_value': -138_089_730_602_162_956_499_442_325_140_635_345_681,\n         'max_value': None,\n         'shrink_towards': -3_965_582_018_077_234_086,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\uff9f\uff0e\uff97\uff8a\\U000ee172\uff2e\uffcc\uffa7\uffae\uff0f\uffaf\uff7f\uffa2\\U000fe1b1\uffd5\uffcb\uff45\uff95\uff3f\\U0007e1b5\uff7e\uff49\\U00101196\\U00071f08\uff79\uff83\uff40\uff84\uff0c\uff1e\\U000934a3\uff8d\uff50\uff7f\\uff00\uffeb\uffd3\uff4e\\U000fb1d3\uff35\uff49\uff97\uff1d\\U00037ec0\uffa5\\uffd0\uff61\ud809\udc22\uff63\uff69\\U000eafb1\uff99\\U000f927e\uff39\\U000c0ad5\uff3d\\U000d7310\\U000e842f\uff8a\\ufff9\\U00072285\\U00077096\uff9c\uff2c\\U000bdfe5\uff83\uffaf\uffbd\uff6a\uff79\uff93\ud820\udfc3\\U001015d2\\U000f9d01\uffc3\uff36\uff1f\\U0003e20f\uffb8',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [65277,\n                  164305,\n                  201879,\n                  288363,\n                  464023,\n                  583858,\n                  601003,\n                  1114111],\n             ),\n         ),\n         'min_size': 48,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u40cd\u4168\u410c\u409f\u40ba\ud802\udfac\u40e1\u40bd\\U000898f2\\U0005a59a\u4186\u4160\u4110\u4169\u40b6\u4158\u416c\u412c\u40af\\U00084773\u4160\\U00055d97\ud81d\udc7e\\U0006671d\\U00052fe2\\U0001cb91\u409a\ud86c\ude1d\u4157\u8c27\u40c4\u40ab\u4120\u4143\u4153\\U0006075d\u40c1\u4093\u4128\u40b5\u415a\u409f\u4180\u4180\\U0008008d\\U000870a8\u410d\u413a\u40d0\u4182\\U0005ff08\\U000761ee\u40ae\u40be\u410d\u410e\u413a\u411e\u415f\u412a\\U000723b7\u415f\u40d7\u40a7\u411d',\n        constraints={'intervals': IntervalSet(\n             build_intervals([16524, 186549, 302126, 575343, 985338]),\n         ), 'min_size': 50, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 2.818234136526466e-304,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.128411078057744e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.6831259141496656},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u64db\u64bb\u657f\u656d\\U000bbe7c\u651d\u6570\u64b4\\U000b082c\u64d6\u6575\u654f\u6515\\U000d6b98\u659a\u657d\u652c\u658c\\U00090b43\u6501\u64f8\\U000c2bcc\u6509\u6586\u64f2\u64c6\u64f4\u64f9\u6581\u64b1\\U000d42a0\u649f\u6576\u6570\u6555\u651b\u6598\u6587\u64d3\u6531\u64aa\u6516\u64dc\u64fe\u6508\u64b2\u64e5\u6529\u650e\u651d\u64ae\u656c\\U000a3f5e\u64e8\\U00059e09\\U000bbd4d\u6565\u64e1\u6501\\U000e3214\u64b6\u6588\u6592\u6520\u6597\u6508\\U000710e2\u64e4\u64df\u6541\u7af0\u6521\\U000a2056\u659b\\U000a5c9f\u6554\u655c\u652d\\U00107489\\U000d425a\u656a\u652e\u64b2\u6504\u6592\u653e\u6584\u6586\\U0006b1c9\\U00044797\u64a8\\U000665bc\u6507\u6516\u64de\u64b5\\U0004c237\u6548\\U0008ed86\\U000ebf24\u6503\\U0006ccdb\u6528\u64fd\u655e\u655e\u64c8\u6528\u6526\u64fb\u6540\u652f\u6529\u64bf\u64ae\u64ea\u6568\\U000479f5\\U000f78ee\u64d2',\n        constraints={'intervals': IntervalSet(\n             build_intervals([25759, 39877, 230483, 465931, 575017, 1083664]),\n         ), 'min_size': 36, 'max_size': 136},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=1_581_679_624,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-18,\n        constraints={'min_value': -100,\n         'max_value': None,\n         'shrink_towards': 9999,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.5015316134861562},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x19\\x10\\x88',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-87,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('a', 1, 3)),\n                                    (('a', 1, 3), ('c', 0, 2)),\n                                    (('a', 2, 0), ('b', 1, 2)),\n                                    (('b', 2, 2), ('a', 2, 1)),\n                                    (('b', 2, 3), ('a', 3, 2)),\n                                    (('b', 3, 0), ('b', 3, 1)),\n                                    (('c', 3, 2), ('a', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\x83\u00e4',\n                     [UnicodeEncodeError('unknown encoding',\n                                         'n\\x1f\u00c7\\x7f\\x1b\u00ec\u00fat\u00c8}~\\x11\\x88\u00c1c\u00f7\u00b8\\x9a\u00c3\u00c2\u00ab\u00cd\\U00038407\u00ea\\x8e\u00f7\\x9a\\x9f',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('M\\U0004fc99\\U0004bf63\\\\\\U0008ff9a3\u00c6',\n                                            0,\n                                            0,\n                                            'reason')]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'': 14867},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-21939, 24),\n       (-15272, 8192),\n       (-6893, -995820469),\n       (-58, 50),\n       (-2, -4854),\n       (6, 9272),\n       (80, -17),\n       (11609, -68),\n       (14209, -977),\n       (982_201_411_141_173_919, -21303)},\n      slice_comments={(-19575, -18752): 'hypofuzz-',\n       (-26354, 19612): '',\n       (29, -18179): '\u00cf\\U0010c23c',\n       (-27, 41): '\\x9d0j\\x07\\x86',\n       (-25800,\n        4_633_566_400_083_688_843): '=\\x12\\x93\\x9cU9\u00dcR\u00a9\u00d1]\\U000ebe9d\u00e6\\x83\ud84a\udea8\\x95\\U00015d72\\x86\\U000d6a03\\U00037eec]s\\U000d913e\\U000f5ef4\u00ec\ud81e\udf86\\x0f',\n       (-8_438_589_601_424_713_944, 24): ']\u00e6\\U00062d45#',\n       (-53_466_517_094_799_989_914_668_089_907_312_664_477,\n        -14205): '\u00fc\u00fe\\U0008111c',\n       (96, 7407): '',\n       (306746865, 31409): '\u00fb\u00cb\u00ca\\U0010dd2f\\U0010ef53\\x13\\x9d\u00e4'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-32006377505509154283007664662541490679, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b\"\\x82\\xcd\\t7\\xb1~d\\xa4\\xfel\\xd1\\xa5\\xdcU\\x99\\x8d,-\\xba\\x8c|\\x9e\\x88\\x9d\\x0e\\x82\\\\\\x17q\\xf6q*kC)\\xc9 l\\x1d&\\x87'\\x8c~\\xbe\\xc0o\\xc7\\xa2\\x06\\x9f\\xd1Vv\\xe4N]\",\n        constraints={'min_size': 29, 'max_size': 104},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"\\x16\\xd5\\xbd\\xa0G\\xea@k\\x0c8\\x05 s\\xf1,\\xe5SpE8\\x1c>\\x19]\\xbe\\xeb\\x91\\t'\\xaf\\xdf4\\x10?\",\n        constraints={'min_size': 22, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=300,\n        constraints={'min_value': -6805,\n         'max_value': 300,\n         'shrink_towards': 0,\n         'weights': {-3186: 0.4082216278595712}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=9.647437381144189e+307,\n        constraints={'min_value': 8.657681447286396e-36,\n         'max_value': 1.7976931348623157e+308,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.877161508965748e+16},\n        was_forced=True,\n        index=None)),\n      length=-2_974_331_029_095_198_565,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='',\n      has_discards=False,\n      target_observations={'\\\\C\u00a5\\xa0\u00e3\\x1fa\u00ce\\U000a4d62': 7.739539255781443e-182,\n       '\u00ab': -1_769_224_547,\n       '': 5.0513223983985336e+16,\n       '\u00bc': -5.5141270150214616e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-19138, 1_007_406_626),\n       (51, -24),\n       (123, -4625),\n       (6577, 34)},\n      slice_comments={(29993,\n        3855): '?\\U000e3a3f\\x9c\\x1d\\x1f3&jG\\U00086468$p\\U000f0613'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=16457, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'Go\\xdb&\\x1a\\xde\\x97\\xeb\\n\\xdf\\x16\\xc97\\xd1\\xfd\\xd6\\xcbO\\xee\\xf2\\xe2\\xaa\\x0c[\\xd3\\x95\\x89\\x82\\x02Cwu\\xc1\\x8e\\xe45E\\xe8\\nQD\\x90\\\\o\\xaajy\\r',\n        constraints={'min_size': 48, 'max_size': 148},\n        was_forced=False,\n        index=None),),\n      length=-3816,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x97\\U00066db7\\U0004826e.\\x8e': 80,\n       '\\U000fd98bli\\x1f\\x1b\\x8e\u00ba\u00e5\\U00091113\\U00036255Y8': 2.2250738585072014e-308,\n       '\\U000eb226': -4.364369353638648e+16,\n       '': -10116},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-14454, 12),\n       (-24, 28294),\n       (20, 30),\n       (1024, 299_508_438_889_223_113),\n       (3449, -17923),\n       (31533, -84),\n       (65535, 78)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=8192, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\x8e\\x87X\\x88\\x90\\x12 \\x0b$\\x81Mn',\n        constraints={'min_size': 0, 'max_size': 52},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 7.068668487828325e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.233662122919057e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 6.4416929870454e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': 3.3371590431693984e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.440044415698861e-235},\n        was_forced=False,\n        index=None)),\n      length=23554,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\U000d7972>\u00df',\n                     [UnicodeTranslateError('', 0, 0, 'reason'),\n                      UnicodeTranslateError('~\\U0006f377J6\u00d6',\n                                            0,\n                                            0,\n                                            'reason')]),\n      expected_traceback='\u00f3',\n      has_discards=False,\n      target_observations={'\u00c0\\x9d': -17441,\n       '\\U0001c4fa*i\u00a8B': -92,\n       '\u00e4\\x19\u00cbT\u00ca]': -3854},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(18886, 15433)},\n      slice_comments={(1_276_082_798, -3531): '\u00a5Y\u00a9\u00a4L',\n       (1024, 73): '999999999999999999999999999999',\n       (10374, 67): '\\x07',\n       (22346, -32070): 'o\\U0010deec\u00e0',\n       (4450, 94_315_070_523_857_768_728_583_089_190_484_776_637): 'q',\n       (199, -25113): '\\U00077bb9\u00ff.\u00b4F\\x08\\U000e27eaFj\u00b9B\u00aaS\u00ac',\n       (-15442, -12768): '\\U000a748a'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=27939, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=26246,\n        constraints={'min_value': 76,\n         'max_value': None,\n         'shrink_towards': -25790,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.4201557454130505e+308,\n        constraints={'min_value': 2.161039903230113e+67,\n         'max_value': 1.4657338157734484e+308,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.4201557454130505e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud835\udea9\ud835\ude50\ud835\ude78\ud835\ude13\ud881\udea2\ud835\udf06\ud835\udf09',\n        constraints={'intervals': IntervalSet(\n             build_intervals([120337, 622899, 808977]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud849\udcb7\ud85d\udfa7\\U000cb97b\\U0001647e\\U0009dcae',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [91216, 171107, 418923, 776029, 807979, 834220, 836275],\n             ),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0003eb08\\U0003eb37\\U0003eb54\\U0003eb10\\U0003eb52\\U000a4d85\\U0003ebb1\\U0003eb52\\U0003ebdd\\U0007c75a\\U0003eb8c\\U0003ebd4\\U000a5058\\U0003eb04\\U0003eb45\\U0003ebb7\\U0003eb18\\U0003eb37\\U000a2a68\\U0003eb6a\\U0003eb3b\\U0003ebee\\U0005360a\\U0003ebb6\\U0003ebcc\\U0003eb74\\U0003eb5e\\U0003eb38\\U0003eb93\\U0003ebda\\U0003eb4f\\U0006064c\\U0003ebbe\\U0003ebca\\U0003ebcc\\U0003eb74\\U0003eb79\\U0003ebc3\\U0003ebaa\\U0003eb6b\\U0003ebe6\\U0003ebf3\\U00046b86\\U0009d867\\U0003ebf2\\U0003ebbe\\U0008110f\\U0003eb27\\U0003eb33\\U0003eba8\\U0003eb39\\U0003ebf5\\U0003eb75\\U0003eb1d\\U0003eb47\\U0003eb5d\\U0003eb70\\U0003ebeb\\U0003eb2e\\U0005fa7d\\U00054e76\\U0003eb5d\\U0003ebb4\\U0005b713\\U0003ebea\\U0003eb08\\U0003eb35',\n        constraints={'intervals': IntervalSet(\n             build_intervals([256759, 783575]),\n         ), 'min_size': 46, 'max_size': 101},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.5144054591939194},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00048583\\U000485b5\\U00048634\\U000485be\\U00048640\\U000485e9\\U000485ee\\U00048629\\U0008d616\\U00061fd3\\U00048624\\U0004856d\\U0007ad6c\\U000485bb\\U0004857f\\U0004863a\\U0004865c\\U00048655\\U000485f3\\U0004d06e\\U000485aa\\U00070949\\U000776a2\\U000485ea\\U0004857e\\U00048659\\U000485ab\\U000a66b3\\U00048583\\U0004863e\\U0004865f\\U0004856c\\U00048601\\U00073934\\U0007cfaa\\U000485bd\\U000485b3\\U000485f7\\U00048631\\U000485be\\U0004861e\\U00048620\\U00048651\\U000629e5\\U000485a0\\U00048667\\U000485c5\\U0004860c\\U00048669\\U00048668\\U00048584',\n        constraints={'intervals': IntervalSet(\n             build_intervals([296299, 690903, 995744]),\n         ), 'min_size': 25, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.540020482227739e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.704948806885702},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-8,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 42,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.252647231545112e+308,\n        constraints={'min_value': 4.3084633227318716e+24,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.252647231545112e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.5073674902598414},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.05},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1.192092896e-07},\n        was_forced=False,\n        index=None)),\n      length=2299,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-2_100_979_147, 30386),\n       (-63, 62),\n       (31, 5380),\n       (53, 5773),\n       (103, 329691307),\n       (3198, 8_778_679_778_868_190_351),\n       (16825, -24302),\n       (27932, -51),\n       (496320660, -14418)},\n      slice_comments={(-15, -14483): '4',\n       (44, 18943): ' \\U00108f89\\x0fQ\\x0f}A\u00b5\\x8e\u00fa\u00b0\u00ae',\n       (27781, -19102): '\u00ba2O\\U000d1fd3\u00b0\\x02\\U00044449\u00b7',\n       (8515, -12553): '',\n       (-16639,\n        -138_245_941_357_039_317_960_129_843_110_015_331_326): '\\U00104a70ln\\x90\\U00060b019\u00c1\u00bf\\U00056dad',\n       (10855, -5_100_939_364_003_975_005): '7\u00d3\u00c4a\u00d8\u00e2\u00c6 \\x0c\\U00077c84\\r;T',\n       (-139_580_315_944_952_410_134_482_815_201_220_989_977,\n        -159944903): '\\U00085704\u00cd\u00e3)W\\x1e3',\n       (-878167043, -94): '[\u00ba'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-92, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.1006970434844792e+308},\n        was_forced=False,\n        index=None),),\n      length=8_049_132_928_781_035_921,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 2, 1),\n                                     ('c', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'t\\x8c': 40,\n       '\\x18': 6.512158667155869e+16,\n       '': -99,\n       '\\\\\u00b8%': -0.99999},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-2_141_117_592,\n        -76_547_243_798_110_661_375_684_374_464_469_520_270),\n       (-3069, -98),\n       (-109, -117_219_765_207_874_472_762_705_186_430_160_683_998),\n       (-47, -79281788),\n       (-42, 133_153_579_147_163_875_815_627_537_044_361_101_156),\n       (5527, 300),\n       (30676, 8192)},\n      slice_comments={(261082693, 18412): '\u00df\\U00012dc55\u00d0H\u00f4\\x90\u00aa\\x86\ud873\udfef\\x9b\\x98'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-123, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\x05\u00dd\u00f2N\\xad',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  1000,\n                  2437,\n                  29837,\n                  49738,\n                  204203,\n                  230702,\n                  364959,\n                  609089,\n                  670200,\n                  699322,\n                  702519,\n                  704914,\n                  776876,\n                  1022860,\n                  1062480,\n                  1071549],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-1_752_812_801_449_523_765,\n        constraints={'min_value': None,\n         'max_value': -29,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.5570916098934205},\n        was_forced=False,\n        index=None)),\n      length=9999,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('c', 2, 1)),\n                                    (('a', 0, 1), ('a', 0, 1)),\n                                    (('a', 1, 0), ('b', 0, 3)),\n                                    (('a', 1, 0), ('b', 2, 2)),\n                                    (('a', 1, 1), ('a', 3, 1)),\n                                    (('a', 1, 1), ('b', 0, 0)),\n                                    (('a', 1, 2), ('c', 0, 0)),\n                                    (('a', 1, 3), ('c', 1, 2)),\n                                    (('b', 0, 3), ('b', 1, 0)),\n                                    (('b', 0, 3), ('c', 0, 0)),\n                                    (('b', 2, 0), ('a', 3, 1)),\n                                    (('b', 3, 1), ('b', 1, 0)),\n                                    (('c', 0, 3), ('b', 0, 0)),\n                                    (('c', 1, 3), ('c', 2, 1)),\n                                    (('c', 2, 0), ('c', 1, 1)),\n                                    (('c', 2, 3), ('a', 2, 1)),\n                                    (('c', 3, 0), ('b', 1, 0)),\n                                    (('c', 3, 0), ('c', 3, 0)),\n                                    (('c', 3, 1), ('c', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('Z\u00c6\u00f3}0', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(4964, -83): '\\U000c72f4|\\x1d'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=5628, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U0009526c\\U0009512f\\U00095119\\U00095115\\U0009517b\\U000955ec\\U000951d9\\U000950dc\\U00095100\\U00095877\\U00095341\\U0009515f\\U0009512c\\U00095111\\U00095156\\U000950e6\\U000950e2\\U00095152\\U00095167',\n        constraints={'intervals': IntervalSet(\n             build_intervals([610436, 612647, 1023521]),\n         ), 'min_size': 11, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.0387547838454569e+306,\n        constraints={'min_value': 5.467237953967034e+279,\n         'max_value': 1.968390944251539e+306,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.653944290801567e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.4714975587025191},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-1326,\n        constraints={'min_value': -9993,\n         'max_value': 4790,\n         'shrink_towards': -2881,\n         'weights': {-4314: 0.25599045746990107,\n          3272: 0.14894382743170262,\n          2768: 0.1060368794412867,\n          4790: 0.011662354752050122,\n          -7945: 0.08073757437119657}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 7.499675481618161e-52},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.1046741349723992e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=162_717_941_041_331_213_628_017_489_706_744_015_920,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 23795,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.5815463951789034},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.7384731815977686},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -5.893580403555006e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.5},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x9c',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0004813e\\U0004819d\\U00048193\\U000929a6\\U000b90f6',\n        constraints={'intervals': IntervalSet(\n             build_intervals([295162, 879448]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=inf,\n        constraints={'min_value': -2.225073858507e-311,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 9.065078053305633e+306},\n        was_forced=False,\n        index=None)),\n      length=-1179,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('a', 3, 1)),\n                                    (('a', 3, 3), ('b', 3, 3)),\n                                    (('b', 3, 3), ('b', 0, 0)),\n                                    (('c', 1, 2), ('a', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\u00ec',\n      has_discards=True,\n      target_observations={'pP\\x87\u00eac\\U00074109\u00dcx\u00bce\u00c8\u10b1\u00c1\\U0001642d\u00fa': -6.533607252750951e-32},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(30458, 9999)},\n      slice_comments={(447830066, 16918): '\\U0003d753\\U000de82c\\x84\\x11',\n       (-1_168_210_210, 15355): '\\x88\\x98n+\\x87\u00fd',\n       (17203, -9616): 'no',\n       (32, 69): '\u00b3\\U000e79cc,\u00a9',\n       (-55, 26211): '\\U000b223d\u00f0[?p',\n       (0, -15446): '\\U0003478c\\U000be782',\n       (-1911,\n        -17454): 'p\\x9b\\U000c46f7\\x98\u00c9ih\\U00056d1e\\r\u00e1\\U0006019b\u00cc\\U00072ddd%\u22aa\\U00087f6f',\n       (21667, 715254962): '\\x05\\U000bad41\u00ed\u00ac\\x94\\x9a',\n       (94, 65535): '\u00ae\\x02'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x108be8cb0>, min_size=0, max_size=inf).map(tuple), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text())), has_discards=one_of(nothing(), nothing(), booleans()), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), length=one_of(nothing(), nothing(), integers()), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason'))))).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.022859750024508685,
          "overall:gc": 0.00028208293952047825,
          "generate:args": 0.22238291008397937
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 3,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 3,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878941.606912
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-24779, context=(), group_elems=()),\n      nodes=(),\n      length=28,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 0, 0),\n                                     ('c', 3, 0)),\n                                    (('c', 0, 2), ('c', 2, 0)),\n                                    (('c', 3, 0), ('c', 0, 3)),\n                                    (('c', 3, 2), ('b', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\x19', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\U000b88c6': 30277,\n       '\\x0e@\\x9e0\\U0007a796\\x99F2R': 1_342_657_080},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-31912, 127),\n       (-15420, 21042),\n       (-122, -39),\n       (-44, 29),\n       (75, 13408),\n       (16757, 27009)},\n      slice_comments={(47, 110): ',\\U000d2fe9\u00e5e\\x10\\x02\u00b1\\x03',\n       (-37, -36): '\\x16',\n       (-10_227_719_717_463_468_757_046_955_932_462_699_992,\n        31132): 'g\\U0003abdd\u00a3',\n       (-19, -28205): 'SI/\u00f8\\U0004c296\u00ed'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-10, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='8\u00f3\\U00057fc2`\u00fc\u00e6\\x90\u00ef\u00f7\\U000bc83d\\U000b96c2\\x13\\U000b5d80\\U000bda01\\x80\\x0c\\x0bm',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  300,\n                  23663,\n                  58116,\n                  153287,\n                  167029,\n                  185220,\n                  243214,\n                  330727,\n                  363472,\n                  674486,\n                  678328,\n                  719427,\n                  760697,\n                  765002,\n                  877027,\n                  889773,\n                  902470,\n                  972378,\n                  997049,\n                  1050166],\n             ),\n         ),\n         'min_size': 9,\n         'max_size': 109},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -1.7976931348623157e+308,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9999999999999999},\n        was_forced=True,\n        index=None)),\n      length=73,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('a', 0, 2)),\n                                    (('a', 0, 0), ('b', 2, 0)),\n                                    (('a', 0, 1), ('b', 0, 3)),\n                                    (('a', 1, 2), ('b', 3, 3)),\n                                    (('a', 1, 3), ('c', 0, 0)),\n                                    (('a', 3, 1), ('b', 0, 1)),\n                                    (('a', 3, 2), ('b', 0, 0)),\n                                    (('a', 3, 2), ('c', 3, 3)),\n                                    (('a', 3, 3), ('a', 2, 0)),\n                                    (('b', 0, 1), ('c', 3, 2)),\n                                    (('b', 0, 2), ('c', 1, 0)),\n                                    (('b', 1, 3), ('b', 3, 0)),\n                                    (('b', 2, 0), ('b', 2, 1)),\n                                    (('b', 2, 3), ('b', 1, 2)),\n                                    (('b', 3, 1), ('b', 2, 3)),\n                                    (('b', 3, 1), ('c', 1, 1)),\n                                    (('b', 3, 2), ('c', 3, 0)),\n                                    (('b', 3, 3), ('a', 1, 1)),\n                                    (('c', 0, 0), ('a', 3, 3)),\n                                    (('c', 1, 0), ('a', 2, 0)),\n                                    (('c', 1, 2), ('a', 2, 2)),\n                                    (('c', 1, 3), ('b', 3, 0)),\n                                    (('c', 2, 2), ('a', 3, 3)),\n                                    (('c', 2, 2), ('c', 3, 0)),\n                                    (('c', 2, 3), ('b', 0, 3)),\n                                    (('c', 3, 2), ('b', 1, 3)),\n                                    (('c', 3, 3), ('b', 2, 0)),\n                                    (('c', 3, 3), ('c', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\\U00066955]t.\\x86\\x97\\U000ba079HL.': -106,\n       '@-\\x9d\u00b3\u00feEL\\x94\\tBJD,\u00df\u00f4@\\U000a9687\\x0f': 10050},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-4_428_476_164_531_494_836, 1223),\n       (-12168, -22402),\n       (-86, 10559),\n       (-81, -23399),\n       (45, -8419),\n       (25056, -2_238_525_652_382_091_546)},\n      slice_comments={(117, 52581281): '\\U0008940a',\n       (-13268, -22681): '\\x1d\\U000aead1\\x88\\x80\ud847\udc50\\x80\\x0c\u00be\u00e7\u00e4'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=24286, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'Q\\xda\\xefw\\x18\\xa8mI\\xe8\\xf4\\xbf<O06\\x9f\\xe4k\\x9e\\n3\\x7f\\x9bC\\xd9\\xe6\\x81\\xf4\\xa1 \\x8b\\rC\\xe0\\x92d\\xe1\\xf1u%\\xee\\xf2\\xb2T!j@\\xf2Z@\\xd0csL\\xca\\xb8\\xf4\\xf4/\\xb71\\x04}\\xb1h\\x08\\x1e \\xb3OR\\x11_`S\\x1e\\x96\\x1c\\xd2Ko\\xd2v\\xb7L\\xdc\\xce\\xc0u\\xde#\\xfd\\xd1\\xdc\\x1b\\x98\\x0f\\x9d\\xe3\\x87q\\xe4\\xdbS\\xfd\\xf9\\x15\\xb8\\xc7\\xdb\\xed\\x17\\x89\\x87>\\xf2\\xd4\\xfdP\\x0eNs\\xbc\\x96^G})|H\\x91',\n        constraints={'min_size': 41, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u02c6\u02f7\u02d6\\U0009fa91\u02a6\ua336\u02c5\u02a9\u0292\u023e\u02fa\u02cc\u028d\u02f7\u02e0\\U0004dedd\u020f\u021a\u0237\ud869\udfbe\u0260\u02bf\u02d0\u02af\u028b\u0241\u023e\u02e9\u02f4\\U0003aa48\u025c\u02e5\u0298\u02f9\u0229\u02c2\\U0009f8d2\u0291\u0271\u0267\\U00034329\u0244\u0279\u029a\u8826\u02a4\u0211\u0231\u1b91\u0200\u02d7\\U000e1762\u024d\u0234\\U0009ebc3\u0206\u02ce\\U000db310\ucfab\u0299\u02e0\u022d\u02ca\u02ee\u02b4\u02c5\\U0004bf67\u0228\u1e34\u02e0\u02d3\u0295\u0209\u0245\\U000a01c0\u023a\u0272',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [512,\n                  72724,\n                  173675,\n                  321915,\n                  635565,\n                  666361,\n                  737551,\n                  739167,\n                  896349,\n                  932619,\n                  954284],\n             ),\n         ),\n         'min_size': 35,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.192092896e-07},\n        was_forced=True,\n        index=None)),\n      length=30712,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('c', 2, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         'd\u00ae\\x94j\\U000594c6\\x8c1\u00b9(\\U0009b9a4\u73f6o\u00ed\u00ee\\U000fd115\u00f5E\\U0005d21e',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00f9P\u00ba\u00d1\\U000773a1\u00ff\\U00100387': -4.0877805776856773e+188,\n       '': -26897,\n       '\\U000f1e32d\\x88Ly': -0.99999,\n       ')\\U000dbe47?\\x99\u00be0\\x19pR': -12677,\n       '`(\\x82': struct.unpack('d', struct.pack('Q', 0x7ff8000000000001))[0],\n       '?\u00cf\\U0009f09c\\U000882d4\\U000b7fd8q\u00a79\\U0004f632\\U0007863f\\U000f98f6`\\x1a\ud845\udc34~': -2.225073858507203e-309,\n       '}': -1e-05,\n       'nil': 3.7288777956123514e-29,\n       '\\U0010631f': 62,\n       'V\u00ef\u00da\u00cc\\xad\\x05\\x1f': -4.0503603226760095e-19,\n       'b\\U00047e74\\U000db43f\ud852\ude18\u00b6\u00a8/': 3.3200119339998796e+255,\n       'm\u00d0M\u00d6\u00e85': 3.767931148470444e+16,\n       '\ud883\udc00': 5.03366257282914e-166,\n       '\u00b9\\x1f\\U00084467\\x96\\U000f597e\u00f4DF\u00bf\u00a2\\U000bdd6b': -84,\n       '\u9b5e\u00c5\u00ff': 6.744678043798881e+255,\n       '\u00e2\u00ff\u00da': 72,\n       '~K\\U0003b0ca': 0.05,\n       '\\t<\\x8c\ubb09\\U000cc708+~': 4.1309516357333564e+128,\n       '\\U0004edc0': -8.626064928956129e-72,\n       '\\U00107bc6\\U001019dc': -15093,\n       '\ua023\u00d8W': -6.14267641985469e+301,\n       '\u00cb\\x11\\x84\u00e8': 12571,\n       '\u00a5\\u3130\\x1a\\u245c3\u00ba.b\u00fb\u0d4b\\U00077501\\x06 ': -1930,\n       '-\u00fd\u00f781\\x1f\ud876\udcde': 14954},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(54, 1278)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0014277499867603183,
          "overall:gc": 0.0,
          "generate:args": 0.020859416108578444
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878950.027935
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=7648, context=(), group_elems=()),\n      nodes=(),\n      length=-8047,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('a', 1, 2)),\n                                    (('a', 1, 0), ('b', 0, 2)),\n                                    (('a', 2, 0), ('a', 1, 2)),\n                                    (('a', 3, 3), ('a', 3, 2)),\n                                    (('b', 3, 3), ('b', 0, 2)),\n                                    (('c', 0, 3), ('c', 3, 1)),\n                                    (('c', 1, 2), ('b', 1, 3)),\n                                    (('c', 2, 0), ('b', 3, 1)),\n                                    (('c', 3, 2), ('b', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\U0004a8d8!\u00b4\u00eb\\x9b\u00b0\u00e7#\\U0005aaf7\\x1f\\x9f\u00c7',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(83, -2): 'reason',\n       (-74_054_452_442_460_383_862_842_586_777_435_099_742,\n        19365): '`\\t\\U0005774f\u00f8\\x90u\\U000b192f\ud868\uddc1',\n       (-32, 66): '\u00fe'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=664, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b\"M\\xd3\\xf0\\xb9\\xe2\\xad\\x89\\x04\\xa8o\\xc4\\x06|\\xa1\\xe8\\xe1\\xdf{\\xdfh\\x9f\\x80\\xc3A\\xfc\\x9c\\x00Y\\xaf\\xb5\\xd30\\x06P\\xc5\\xabO\\xd0\\xea, \\xadz\\xe7\\x90c\\x92sIT\\xf8\\xe2\\x81\\xfct\\x1ei\\xa1\\xd9C\\xad\\xce\\xd0\\xfd\\x1c\\xaa'\\xa4I\\xb9e\\x8e\\xf8II\\xd1\\x9b\\xe5PCw\\xd9\\x1f%\\xaf6\\xe0\\xb9\\xb2\\x1b\\xb4\\x1b\\xb1?\\xd0e\",\n        constraints={'min_size': 50, 'max_size': 96},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 3.615575842019088e-16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-14848,\n        constraints={'min_value': -28381,\n         'max_value': -67,\n         'shrink_towards': 0,\n         'weights': {-6317: 0.025299023006816034,\n          -12220: 0.05582051652028008,\n          -15608: 0.0029550735831002065,\n          -28381: 0.06044890529492361,\n          -8051: 0.018980084475941586,\n          -3758: 0.035153345678846384,\n          -716: 0.015815621804262596,\n          -652: 0.00010546003703653916,\n          -28296: 0.07481047288966351,\n          -2204: 0.039159995666579406,\n          -1539: 0.0630087378730035,\n          -10217: 0.010833857274405974,\n          -1881: 0.02360492590002651,\n          -8978: 0.06727798827208153,\n          -11329: 0.029856391718495086,\n          -28147: 0.019240064314721198}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xaa\\x0c\\xdea\\x00\\xe6T\\xd9b\\x84*\\xd8\\xb6\\x87\\xff\\x96\\x9e\\x03G\\xf0C\\x1e\\xf1}\\xc4\\nN\\x89?\\xa6\\xda\\xa7\\xcd',\n        constraints={'min_size': 19, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00033331\\U00033373\\U000332fe\\U000333c1\\U00033331\\U00033350\\U0010bbe5\\U0008dde3\\U00038bf4\\U0003339c\\U000333ce\\U000333f2\\U00033375\\U0010bd91\\U0003330c\\U0008e921\\U00033328\\U00033396\\U00108f79\\U00033392\\U00033317\\U000333a1\\U00033399\\U00033386\\U0006f6f1\\U000923da\\U000333ec\\U00033399\\U00033353\\U000333b4\\U000333d7\\U00033337\\U000333a2\\U0003cfcd\\U000333f1\\U0003330a\\U00059fa9\\U000333d9\\U00033304\\U00033327\\U00033340\\U00033327\\U000333d3\\U00033377\\U000332ff',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [209661,\n                  256313,\n                  333252,\n                  464490,\n                  565133,\n                  637926,\n                  1070155,\n                  1104653],\n             ),\n         ),\n         'min_size': 30,\n         'max_size': 130},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-5.826152623731175e+16,\n        constraints={'min_value': -inf,\n         'max_value': 3.899441474338319e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5e-324},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.0287661594732456e+16,\n        constraints={'min_value': -inf,\n         'max_value': 2.1813007706602253e+248,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.1515310655238824e-225},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'^\\xea\\xa4~\\xc2\\x86)\\xf3\\x1c4\\xdf\\xcb9\\x05\\x83\\xc1\\xb1\\xc0\\x1f|\\x8d\\x925\\x96n\\xd9n\\x1b\\xec+\\x92 \\xe2\\x7f\\xf7\\x1a\\x0bK\\xec\\xcc]\\x9c{\\x96',\n        constraints={'min_size': 19, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7359669680272284},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=5.497054822025756e+307,\n        constraints={'min_value': 6.092162294686303e+16,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1e-323},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9681117161067279},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00099677\u00afZ\u00dd?\u00a9\u00aa\\x032>_S\\x03\\x8dc\\U000d0746_\u00d3\u00f3\\U0001a7a4\u00e2\u00a4\u00cb;h\\U000b64e8\\x1f\\n\\U00041b73\\x19\\U0007c62b\\x0e\\x14\\U0003bc76/U\\x93u\u00eaPV\\x0bt',\n        constraints={'intervals': IntervalSet(build_intervals([0, 930923])),\n         'min_size': 35,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='2{\u00df\u00ca\\U0008543c\u00a7\\x95\\U000de6f2\u00ba\\U000e03f1\\U0004115a\u00e8\u00bc\\x8a',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  6900,\n                  9999,\n                  128190,\n                  256336,\n                  305099,\n                  523275,\n                  562716,\n                  581890,\n                  598650,\n                  791404,\n                  1083719],\n             ),\n         ),\n         'min_size': 5,\n         'max_size': 105},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.141200883513515e+306,\n        constraints={'min_value': 3.787252121221543e+16,\n         'max_value': 3.169060558557089e+306,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.141200883513515e+306},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.3063679480198898},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=114,\n        constraints={'min_value': None,\n         'max_value': 19200,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=-9_066_707_457_860_157_092,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'': -126},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-25, 82): '\u00e9\\x1by)',\n       (18488, 15923): ';\\U00075387\u00ca',\n       (-73, -7359): '\\x01\\x1a',\n       (-31533, 1000): '\\x89I\\U00096878\u5b8a\ud879\ude02\u00f1\\x82\u00f4\uc79f\\x13B\\x05\\U000442cd\u00b8',\n       (-29, 6_328_912_945_483_956_764): '\u00c6\\U0004cbaf',\n       (-30559, 1000): '\u00a3H\\U000c670bf',\n       (37,\n        751911363): '8\\U000a3437p\\U00032dfc\\U000565e5\\U00065616D\\U000ce1a0\u00a2(\u00f2\\U0004a131',\n       (-1_142_644_503, -8500): '\\U000705ce\\U00092e4a\u00dan',\n       (30670, -30308): '2',\n       (25485, -8_187_015_753_978_783_809): '\\r\\x8c\ud86a\udf85h',\n       (124, 68): '#',\n       (4840, -84): '-\\x9d(@\u00fa\\U00033717\u00ddow',\n       (6869, 9): 'X\u00c1\u00b4',\n       (19553, -30832): '\\U000954fe\\U0009380b\\x7f86',\n       (-30502, 9819): '\\x89',\n       (30140, -6304): '\u00e2',\n       (14948, 111): '\\x7f',\n       (62_761_557_120_489_054_983_999_380_971_296_435_840,\n        202897971): 'u\\x17',\n       (-18655, 6079): 'port'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-21601, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'.hypofuzz.reports',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-3.6807951579838296e+16,\n        constraints={'min_value': -inf,\n         'max_value': 6.268429519300225e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.5870141132655692e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xde\\x87\\x8c\\xff\\x00\\x7f\\x88+\\xeb\\xdd_\\x8a\\xa4\\x19\\x97\\xf9[\\x945o\\xfe\\xb3\\xd4\\x06\\xdc\\x060\\x03:\\x87S\\x0c,\\xa5\\xfd\\x10\\xba5\\x93V3)\\xb2\\x15*_\\xd0',\n        constraints={'min_size': 24, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00062444\\U00035de9\u0263\u027e\u0232\u025c\u029e\u027d\u026e\\U0003dbcf\u02b5\u0249\u025a\\x00\u02ab\u0275',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  1,\n                  512,\n                  1000,\n                  1024,\n                  118644,\n                  141919,\n                  649521,\n                  650820,\n                  718503,\n                  818863,\n                  869424,\n                  1024084,\n                  1042207,\n                  1088853],\n             ),\n         ),\n         'min_size': 13,\n         'max_size': 60},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 7.0034506287512e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.1359876501731257e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': 5.593852012037872e-214,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.1459869654384324e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': -8.63970763279487e+119,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 9.560588151512769e+306},\n        was_forced=False,\n        index=None)),\n      length=0,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 2),\n                                     ('b', 3, 0)),\n                                    (('a', 1, 2), ('c', 2, 1)),\n                                    (('a', 3, 3), ('b', 3, 1)),\n                                    (('b', 0, 0), ('a', 2, 1)),\n                                    (('b', 1, 3), ('a', 2, 2)),\n                                    (('c', 1, 2), ('c', 0, 1)),\n                                    (('c', 2, 2), ('b', 1, 0)),\n                                    (('c', 3, 1), ('c', 1, 1)),\n                                    (('c', 3, 1), ('c', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'y\\x06': 9.913821477923045e+97,\n       '\\x91\\x06\\U0007892cO\u00db\\U000e90ec\\U00045ccb': -4.208998040444603e+46,\n       '=': 4.3163372680719397e+42},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-25206, -4931),\n       (14, -62),\n       (120, -81),\n       (2_880_752_440_697_053_980, -5_520_664_046_892_851_048),\n       (6_644_368_040_024_072_687, 19605)},\n      slice_comments={(-92_882_879_745_357_130_334_020_413_401_409_679_570,\n        -19480): '!\\x13\\x1fy\\U00046b6d\u00e9{L\u00cb',\n       (512, 9999): '\u00be\u00f8<\\x82\\x8d',\n       (30980, -5344): '\\x87\\U00042343\u00af\\x14',\n       (68, -12598): '\\x82K\u00e5\\x1f\u00ce\u00a7\\U000380de\\n',\n       (2126, -13524): 'o\\x0f\u00d9',\n       (1_647_606_042, 62): '\u00d1\\x05\\x89\\U0007a80b-m\u00a8\\x08\u00ab\u00d9\\U000db1cc\\U000ecdec',\n       (6_344_330_305_733_787_389, -30902): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-17628, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.25942821642389197},\n        was_forced=True,\n        index=None),),\n      length=12210,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\U000be978',\n      has_discards=True,\n      target_observations={'\\x89m\u00fc\\x8aQx': 21854,\n       '': 4.788189918371486e+16,\n       '/\\x05\\U0007dd88\\U0005667b': -2.0437274165481827e-269},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-3_837_815_788_223_513_465, 508175801),\n       (-572094239, 17156),\n       (-18161, 7215),\n       (-8785, -17332),\n       (12163, -17476)},\n      slice_comments={(-32422, -32627): '\u00b3',\n       (-27899, 67): '\\U0005f8f5',\n       (-70, 300): '\u00d5\\U00037499\u00ca\u00d9'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from integers(0, 1114111).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0013881669729016721,
          "overall:gc": 0.0,
          "generate:args": 0.0699091637507081
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878924.947628
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "",
        "representation": "",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x108be8cb0>, min_size=0, max_size=inf).map(tuple), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text())), has_discards=one_of(nothing(), nothing(), booleans()), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), length=one_of(nothing(), nothing(), integers()), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason'))))).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from integers(0, 1114111).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {},
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 2,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 2,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878939.108887
      }
    ],
    "corpus": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=65535, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),),\n      length=-25266,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 2, 1),\n                                     ('c', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         'In\\U000de25b\u00e0\u00feN)\\U000dce9b\u00c4!\\U000829a3\u00dfJi\u00a6\u00f0\u00af\u00dd\\U000e3446\u00f7\\x88\u00a5\\x14\u00c0\\x85\u00fd\u00f6\\x10',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\U0003fb50\u00fa': 2.8258829107486816e+16,\n       '\\U00037bd2': -43,\n       '\\x0eL\u00ca\u00d8}': -2.00001,\n       'capture': 1000,\n       '': 1.7827478736424104e+16,\n       'HOSTNAME': 1000,\n       'shrink': -30047,\n       '\\U0004f90f': 300},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(300, 29502): 'H\u00ce\u00d6\\U00037b27\\x8b\u00e6L\u00e4',\n       (28559, 25899): '\\U00064b58\u00ef\\x17\\U000bd01a\u00af\\U000a1ce2\u00a10\\U0008cb15\u00fa0\u00db\u00f8'},\n      misaligned_at=None,\n      cannot_proceed_scope='other')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0002085830201394856,
          "overall:gc": 0.0,
          "generate:args": 0.0038304160116240382
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878918.301004
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-27364, context=(), group_elems=()),\n      nodes=(),\n      length=-25419,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('b', 2, 0)),\n                                    (('a', 3, 3), ('b', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00021716603077948093,
          "overall:gc": 0.0,
          "generate:args": 0.006013457954395562
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878936.682
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-29764, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-8_328_391_532_451_473_032,\n        constraints={'min_value': None,\n         'max_value': -8_328_391_532_451_472_937,\n         'shrink_towards': 9999,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b',\\x82\\xd5\\x16Q\\xe5\\x17\\x92\\xf5\\xd3\\xe0\\xd8\\x88\\xf8\\xa0V\\x9b\\xee\\xced\\xa6H\\xaaqa2\\tA\\x00H\\x9f\\x8f!Q\\x86\\x04\\xe08\\x11(k;\\xe7%\\xcf~\\x0f{0\\t.',\n        constraints={'min_size': 45, 'max_size': 81},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x00\\xaeU\\xf6\\xe1\\xd7\\x88\\xa8\\xbf0\\x81MDF\\xd0',\n        constraints={'min_size': 0, 'max_size': 72},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.05},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.46012570018875054},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=3.797426921954051e+70,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.3333333333333333},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.6682653969659965},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-25183,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -3586,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=-1299,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 2, 3),\n                                     ('a', 0, 0)),\n                                    (('c', 2, 2), ('c', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(14846, 119)},\n      slice_comments={(8576, 29487): '\u00e0h\\U000d356f\\x8a\u00a6!]'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00033312500454485416,
          "overall:gc": 0.0,
          "generate:args": 0.012338960252236575
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878949.5391202
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=23362, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.0494635030117215e-294},\n        was_forced=False,\n        index=None),),\n      length=-1_196_969_863,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00a4\u00d9\\x1alU\\U000c7adb\\U000901d7',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_999_687_492, 50), (-23, -21437), (1403, -2513)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00017079198732972145,
          "overall:gc": 0.0,
          "generate:args": 0.0026855840696953237
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878946.5727549
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-54, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U000327bf\\U000327e4\\U000752aa\\U00091f37',\n        constraints={'intervals': IntervalSet(\n             build_intervals([206678, 657997]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-4.696098524645993e+16,\n        constraints={'min_value': -3.250343755815158e+58,\n         'max_value': 5.240903376640765e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.7625243983258032e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=4_565_424_788_820_745_128,\n        constraints={'min_value': -101,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=5.627963893674145e+307,\n        constraints={'min_value': 1.2162288308459653e+198,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.778241940668285e+204},\n        was_forced=False,\n        index=None)),\n      length=-948182199,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 0),\n                                     ('b', 1, 1)),\n                                    (('a', 2, 3), ('b', 1, 2)),\n                                    (('a', 2, 3), ('b', 2, 1)),\n                                    (('b', 0, 3), ('a', 2, 1)),\n                                    (('c', 2, 1), ('a', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00f8',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\u00f2\u00bd',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='verified')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00035729201044887304,
          "overall:gc": 0.0,
          "generate:args": 0.010621499910485
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878969.2351239
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-731068328, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-26762,\n        constraints={'min_value': -31296,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u37aa\u381e\u379d',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [14182,\n                  250920,\n                  307196,\n                  345588,\n                  422815,\n                  601506,\n                  711060,\n                  873635,\n                  1005657],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [186987, 296095, 770071, 775090, 822984, 1082922]),\n         ),\n         'min_size': 0,\n         'max_size': 0},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'v',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x1182v\\x02,',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None)),\n      length=-54,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('', 0, 0, 'reason'),\n      expected_traceback='N\u00ab\\x83\\U000a95ac\"',\n      has_discards=False,\n      target_observations={'\\x1d\u00bd': -1.3111010143617399e+19},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-21309, -104): '\\x154',\n       (-32215, 97): '\\x16\\U00013b1e5B',\n       (8419, -27668): '\\U000e9717'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00017458299407735467,
          "overall:gc": 0.0,
          "generate:args": 0.00817779207136482
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878907.25766
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=28267, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'=\\xf0y',\n        constraints={'min_size': 0, 'max_size': 10},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9054156676462852},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.5},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.4055164815386684e+308,\n        constraints={'min_value': 1.8943495382283256e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.1636418335785224e-273},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=8.770896996866127e+307,\n        constraints={'min_value': 0.05,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.486128010033941e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.894121237186833},\n        was_forced=True,\n        index=None)),\n      length=-28507,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'kk\u00c7\u00bd\\x00': -45192168493.669044,\n       '\u00eb\\U0004b7a3r\u00c6\u00c78\u00a2:\u00d0\\x00\ud834\udf61\u00d9Q': -8.24101699659717e-266,\n       '\u1e70\u033a\u033a\u0315o\u035e \u0337i\u0332\u032c\u0347\u032a\u0359n\u031d\u0317\u0355v\u031f\u031c\u0318\u0326\u035fo\u0336\u0319\u0330\u0320k\u00e8\u035a\u032e\u033a\u032a\u0339\u0331\u0324 \u0316t\u031d\u0355\u0333\u0323\u033b\u032a\u035eh\u033c\u0353\u0332\u0326\u0333\u0318\u0332e\u0347\u0323\u0330\u0326\u032c\u034e \u0322\u033c\u033b\u0331\u0318h\u035a\u034e\u0359\u031c\u0323\u0332\u0345i\u0326\u0332\u0323\u0330\u0324v\u033b\u034de\u033a\u032d\u0333\u032a\u0330-m\u0322i\u0345n\u0316\u033a\u031e\u0332\u032f\u0330d\u0335\u033c\u031f\u0359\u0329\u033c\u0318\u0333 \u031e\u0325\u0331\u0333\u032dr\u031b\u0317\u0318e\u0359p\u0360r\u033c\u031e\u033b\u032d\u0317e\u033a\u0320\u0323\u035fs\u0318\u0347\u0333\u034d\u031d\u0349e\u0349\u0325\u032f\u031e\u0332\u035a\u032c\u035c\u01f9\u032c\u034e\u034e\u031f\u0316\u0347\u0324t\u034d\u032c\u0324\u0353\u033c\u032d\u0358\u0345i\u032a\u0331n\u0360g\u0334\u0349 \u034f\u0349\u0345c\u032c\u031fh\u0361a\u032b\u033b\u032f\u0358o\u032b\u031f\u0316\u034d\u0319\u031d\u0349s\u0317\u0326\u0332.\u0328\u0339\u0348\u0323': -99_400_491_685_600_380_413_055_390_102_407_803_630},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-31151, -60),\n       (3_822_856_299_903_043_581,\n        -20_340_532_485_139_904_090_515_437_196_335_915_450)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='other')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00014341704081743956,
          "overall:gc": 0.0,
          "generate:args": 0.007206417096313089
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878958.347392
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=13106, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\ud836\udce5\u8a9c\u8a9a\\U0010e2ff',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [35286,\n                  139780,\n                  245428,\n                  401613,\n                  402487,\n                  470251,\n                  854022,\n                  966362,\n                  1068328,\n                  1114111],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),),\n      length=-22651,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 2),\n                                     ('a', 0, 0)),\n                                    (('a', 3, 1), ('c', 1, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\\x96\\U0001eabd\\U000950f9\u00a1\u00cd^',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(512, 16629): '\\x91\\U00072711\\x1c',\n       (3924, 14005): '\\x15\\x01\\U0008b2a9\\x8f\u00e6G',\n       (25650, 27593): '\u5be8\\x11O\\x05\\x8a\\U000de86f\u00fa\\U000b1f0e\\x15\\x14\\x9e\\x8b-',\n       (4_862_472_943_083_121_988, -58): '\u00eb',\n       (-113, -9750): '\u00b5$\u00bf\\x94\ud83b\ude2e\\U00035195\u00dd>\\t\u00d2f\u00b9',\n       (-1, -871068783): 'v\\x15\\U000afca3%\\U000605f0\\x13o!'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0002174170222133398,
          "overall:gc": 0.0,
          "generate:args": 0.0071037899469956756
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878917.095928
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=19, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=8192,\n        constraints={'min_value': 6908,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),),\n      length=10403,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('a', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\x12\\U0003263b\\U00094cb2\\x02>\u6a98\u00c7',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'0\u00cb8\\x81\\U000dfcd2\\x9f\\U00066da2': -1.7976931348623157e+308,\n       '\\x05g\\U000f8f1e\u00dd\u00dd\\U000ebfc2\\x95': 6.400369270477647e-217,\n       '\ud821\udccd\\x9d\\x05`\u00de\u00fb\\x1e\\x9a\\x87\\U001066df0Z\\x04\\U00070045\\x84\\x19k\\x00\u00c8': 3.248639001977304e+16,\n       '\\U000ae0cd': -9.592124623285077e+169,\n       '': 20,\n       'V\\x90=\u00bfY\\U000f6327wwm\u00f7m\u00c3\u00dd~\u00ba\\x84\\x0b\u00b5\\U000fee20R\\x90': -2_134_210_647},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-18130, 21750),\n       (-14322, -113),\n       (5_139_219_099_441_407_118, -8371)},\n      slice_comments={(-19732, 59): '--numprocesses', (92, 17): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='other')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0001806250074878335,
          "overall:gc": 0.0,
          "generate:args": 0.0038132090121507645
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878968.9554691
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-39, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=24407,\n        constraints={'min_value': 85,\n         'max_value': 31980,\n         'shrink_towards': 0,\n         'weights': {24407: 0.7461028682832442, 1024: 0.0033038006176431688}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1.401298464324817e-45},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [101108, 377649, 422117, 436891, 550160, 570269, 963186],\n             ),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00034db8\\U00034dd2\\U00034da2\\U00034e7f\\U00034e71\\U00034e84\\U00038a62',\n        constraints={'intervals': IntervalSet(\n             build_intervals([216457, 308778]),\n         ), 'min_size': 6, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-7_484_184_498_833_343_981,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 2, 2),\n                                     ('a', 0, 0)),\n                                    (('b', 3, 3), ('c', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError(\"'\u00f93\\x0f\\x8b\\U0010feca\\U000cca4cu\",\n                                            0,\n                                            0,\n                                            'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\u00e0S\\x11',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='\\U0010a5f0\\x9f',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00030141696333885193,
          "overall:gc": 0.0,
          "generate:args": 0.008268789038993418
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878927.007401
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=31216, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-30967,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"F\\x832\\xf7\\xfa\\x0e\\xdb\\xda3\\xd5;$\\xc1~j\\xcc'\\xc4w\\xc6E\\x98\\xdaj\\x82\\xa2\\x93*\\x1b*|\\x15J;\\xef~\\x01\\x95\\xd8rf\\xc5\\xbb\\x82\\xdc?\",\n        constraints={'min_size': 44, 'max_size': 50},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'.hypofuzz.observations',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 2.6072978802800596e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.215193271252177e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=23459,\n        constraints={'min_value': -19888,\n         'max_value': 28030,\n         'shrink_towards': 300,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=-11,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 3),\n                                     ('a', 0, 1)),\n                                    (('b', 3, 1), ('a', 0, 3)),\n                                    (('b', 3, 1), ('a', 3, 1)),\n                                    (('c', 2, 1), ('b', 1, 0)),\n                                    (('c', 3, 3), ('c', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='S\\U000a07c2\u00a1\u00a8\\x19F;',\n      has_discards=False,\n      target_observations={'\u00a7\u00f6A\\U0009ca93\u00cd': 15941,\n       '\u00f8\ud83d\uddb1': 7.01541571055208e+64},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-8_169_656_607_173_204_835, 3138),\n       (-7472, -1_024_438_319),\n       (-59, 17679),\n       (73, 2832),\n       (99, -24304),\n       (8192, 1538),\n       (12958, 8302),\n       (1_687_819_780, -98)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00033062504371628165,
          "overall:gc": 0.0,
          "generate:args": 0.01170533406548202
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878952.304683
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=37, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u08e6\u0923\\U000ec249\u08b6\u0867',\n        constraints={'intervals': IntervalSet(\n             build_intervals([2124, 390131, 439152, 524080, 791676, 1020661]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-30046,\n        constraints={'min_value': None,\n         'max_value': 119,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=30440,\n        constraints={'min_value': 123,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=300,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 0),\n                                     ('a', 3, 3)),\n                                    (('a', 2, 1), ('a', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('6\u00a3\\U0007b793\u00c5',\n                     [UnicodeTranslateError('3\\x9f', 0, 0, 'reason')]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'UB': 8192},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-8857, -20380), (9999, -28770)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='verified')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00025941699277609587,
          "overall:gc": 0.0,
          "generate:args": 0.018657042004633695
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878910.631246
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_coverage_tracking(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-22594, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b\"\\xb0'\\xf3A\\xdc\\xafu\\x04\\xc4_s9\\xe5\\xa6c\\x8d\\x06\\x1a\\x8d\\xeeOj6\\xe7\\xd6Sp\\xa5\\xc3T]K\\xd2?\",\n        constraints={'min_size': 23, 'max_size': 123},\n        was_forced=True,\n        index=None),),\n      length=5192,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 0),\n                                     ('b', 1, 3)),\n                                    (('b', 2, 0), ('a', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [UnicodeEncodeError('unknown encoding',\n                                         'O\u00aez',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'Q9\u00aa': 23608,\n       '^\u00e5\u00e3': 180802468,\n       '': 0.5,\n       '\u00ed5\\U000c8b46Y>\u00e1\u00d2\\x98{6B\u00e6G\u00e8\\x99\u00fc\\x08\\U00048effF_\\U000935da\\x1e\\x00n\\x05\\U000beb4cS': 9007199254740992.0},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-22680, 21605), (-103, 10665), (300, -16100)},\n      slice_comments={(2_223_783_557_231_469_643, 68): '',\n       (-8910, -29): '\\x83\u00fe',\n       (-19984, 24): '',\n       (2_119_012_300, -14): '\\U000dd1180',\n       (126_519_378_012_606_578_604_783_094_007_752_792_310,\n        21998): '\\x91\u00fe\u00b8\u00e4\u00fb\u4605H\\x99\u00ec'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0002151660155504942,
          "overall:gc": 0.0,
          "generate:args": 0.003920708026271313
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "run_start": 1747878958.8277571
      }
    ]
  },
  "tests/test_corpus.py::test_corpus_covering_nodes": {
    "rolling": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-762192545, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=58,\n        constraints={'min_value': None,\n         'max_value': 1_369_565_186_209_100_422,\n         'shrink_towards': -28579,\n         'weights': None},\n        was_forced=False,\n        index=None),),\n      length=-3_018_353_764_606_042_566,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 3, 0),\n                                     ('b', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00fb#$',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='',\n      has_discards=False,\n      target_observations={'\\U000c2c62e\\x9c': 4.75692110477563e+16,\n       '': 65535,\n       '5': -682_699_970_018_066_079,\n       'report': -20,\n       '\u00d9': 1.2670204234916434e+120,\n       '\u4d25F\u00c70\\U00042a60\\U000b85fa\u00b0\\U0010afe9\u00dc\u00c3\\x01\\x1b/\\x16\\U0010f249\u00c8': 7.525002887975519e+213},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-587_031_701_311_149_122, 85),\n       (-1_754_102_265, -6623),\n       (-600282184, 1_879_097_265),\n       (-28624, 11251),\n       (-22521, 102015451),\n       (-20826, 29497),\n       (-19822, 23024),\n       (-17741, -18),\n       (-3681, -12442),\n       (-1817, -6094),\n       (4, 20905),\n       (10, 1_711_266_177),\n       (12, 22506),\n       (12, 24512),\n       (76, -20814),\n       (79, -4_945_528_807_081_967_540),\n       (105, 4175),\n       (3145, -124),\n       (5427, 2450),\n       (16739, 17921),\n       (24778, 18715),\n       (25626, -110)},\n      slice_comments={(-8_292_989_114_596_839_101, -16880): '\\x06',\n       (12673, 126): '\\U0006b815\u00cbu\u00bcK\\x9c',\n       (-1_088_045_515_959_263_355,\n        2_603_698_740_188_042_652): '\u00de\\U000bdd34\u00cf\\x9d\\U000b7ce0l)\u00bd\u00b9\\x9a'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-56, context=(), group_elems=()),\n      nodes=(),\n      length=1_343_984_091_233_805_610,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('c', 2, 3)),\n                                    (('a', 1, 2), ('b', 3, 1)),\n                                    (('a', 3, 1), ('c', 0, 3)),\n                                    (('b', 0, 3), ('a', 0, 2)),\n                                    (('b', 2, 0), ('b', 0, 0)),\n                                    (('b', 2, 1), ('a', 3, 3)),\n                                    (('b', 2, 3), ('b', 0, 0)),\n                                    (('c', 2, 1), ('c', 1, 2)),\n                                    (('c', 3, 0), ('a', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'#': 8268},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-5000, 64)},\n      slice_comments={(25, -113): '\u00c4\u00b3^\u00a3W\u00d0\u00d4d',\n       (-9940, 59): '\\x13\u00f6\u00b8yg\\x13C',\n       (21216,\n        6483): '\\x81!\u00a4\u00a4\\U000a18f2\u00c6Q\\U000638dc\\x15\\U0005e76d\\x17{\\U0004063c',\n       (74, 17857): '',\n       (-118_926_590_240_314_588_779_127_085_191_632_071_315, 122): '|\u00fc'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=11, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.6317446980507192},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x86',\n        constraints={'min_size': 1, 'max_size': 101},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xd8Ep\\xbb \\x0e\\xec\\xa4k\\xf4\\x1cOQ\\x1fs\\xb2Z[\\x17\\xb7\\xc1\\x16\\x99\\xb12\\x1c\\xc6\\x9e\\xa8V\\x95\\xdb\\xef\\x98fN\\xe8~/\\x8aj-w[\\xdb0\\xc5\\x83\\xc8  B+\\xf6\\x99',\n        constraints={'min_size': 39, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xd0\\x15\\xe1\\xa9b\\xbaF`2\\xf8\\x14L6.3\\xb6\\xdaQ0\\x1c0\\x15\\xea\\x88\\xfd6\\xb1\\xe9\\xb9\\xfdXT',\n        constraints={'min_size': 22, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=7.0821430511114664e+16,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.4800827317939844e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=12988,\n        constraints={'min_value': -26675,\n         'max_value': None,\n         'shrink_towards': 26360,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-13266,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 27277,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.5},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': 2.656578497423733e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.005809890706154e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xc0l\\x06\\xdf\\xb3[oOI\\x16\\xf8\\x84$s\\xaf\\t\\xef\\xed\\x88\\x0e\\xbd\\x15\\xc0\\\\Vc\\xbf\\x11Qs\\xe2\\x83\\xafT\\x18\\xcc:\\xd5\\x16\\x1b\\x190\\xd0e\\x93\\xc8\\xaa\\x91(\\xe8\\x8d\\x1f<&\\x1e\\r\\x7fR \\xe4\\xfb\\xe0;\\xff\\x17E\\x92\\xea\\xebk\\xe8\\xed2\\x82v\\xf6\\xd8r\\x91h\\xd9?Y\\x80Vo\\xf9\\x15\\t\\xb9\\\\P\\xf6\\xa9\\xac\\xa93?,\\xb1\\x0fz\\xb9`\\x9eE\\xb5\\x9a\\xbd\\x8bm\\xba\\xa6\\x06\\xf4\\xdb\\x88\\x10-G\\x91\\x16\\x99{=5m\\x8f\\x11u2r\\x9b\\xda1\\xfdJ\\x9b4\\x07\\xd8\\x80\\xf8&\\xcf\\xcfB\\xc0\\xb3\\x91\\xb5A\\xb6\\x8fut]@\\xf24Y\\xef\\x93',\n        constraints={'min_size': 41, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1.214771138148158e-169},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0008c2df\\U0007bd56',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [9999,\n                  138168,\n                  214175,\n                  291058,\n                  363925,\n                  518226,\n                  553405,\n                  621744,\n                  739011,\n                  1038774,\n                  1060837,\n                  1069779],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-108_106_702_525_810_131_590_581_341_179_254_768_065,\n        constraints={'min_value': None,\n         'max_value': -108_106_702_525_810_131_590_581_341_179_254_751_881,\n         'shrink_towards': 169_082_103_603_819_303_059_121_809_819_513_927_443,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0004190f\\U00041974\\U0004197b\\U0004199a\\U00041988\\U0005791b\\U00041965\\U000419ba\\U00041998\\U000419b2\\U0004199b\\U000419d2\\U00041931\\U000419ca\\U000419cf\\U0004199e\\U00041934\\U00041957\\U000419c3\\U00041949\\U00041922\\U00041918\\U0004198b\\U0007ceff\\U00044d30\\U000419a6\\U00054c2b\\U0006c12f\\U0004199b\\U0004197d\\U00041990\\U000419d2\\U0004195b\\U000538c8\\U0004199f\\U000419b4\\U0005a13f\\U000419f5\\U00041903',\n        constraints={'intervals': IntervalSet(\n             build_intervals([268547, 559403]),\n         ), 'min_size': 25, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=22137,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 1),\n                                     ('c', 1, 3)),\n                                    (('b', 0, 2), ('b', 0, 2)),\n                                    (('c', 0, 3), ('a', 0, 3)),\n                                    (('c', 2, 2), ('a', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-3_574_016_361_080_982_373, -4234),\n       (-234_520_086_765_784_066, -28),\n       (-1_460_953_190, 75),\n       (-11412, -18999),\n       (-6472, -21618),\n       (-74, -5_336_830_175_971_736_385),\n       (-55, -28279),\n       (-40, 11291),\n       (64, -12734),\n       (9999, -20970),\n       (11830, 9895),\n       (577014665, -25208)},\n      slice_comments={(-10, 548982987): '',\n       (-7358, -16): '\\U000f2884',\n       (65535, 5227): '\\x04\u00c03\\U000e1d74\\x0fL\\x81n\\U000b157a\u00c8h',\n       (-3, 1000): '&',\n       (-37, -17): '\ud885\ude56\u00c6\\U0005275b\\x85\\U000545fe\\x91}p\\U00044132(',\n       (19830, -834): '\u00b5\ud875\udd60'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=512, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-9245,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1.7976931348623157e+308,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.1151549947577959e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.230449748794136e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 7.914200203740711e+307},\n        was_forced=True,\n        index=None)),\n      length=12885,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('a', 0, 1)),\n                                    (('a', 1, 3), ('a', 3, 3)),\n                                    (('a', 3, 0), ('c', 0, 3)),\n                                    (('b', 0, 1), ('a', 0, 1)),\n                                    (('b', 2, 3), ('a', 3, 0)),\n                                    (('b', 3, 2), ('c', 1, 1)),\n                                    (('c', 2, 2), ('a', 0, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\x87\\xad',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x1e': 10,\n       '\u00d4': -4203,\n       '\\U00067c16L\\\\5': -6.727483059417505e+16,\n       '\u00f4\\U000854bb\u00d7\\x94\\x1d\\x91\u00fd\u00cd\u00c3<\\x1fY': -89,\n       '\\x7f\u00a5\\td\\x12\\x9f}M\u00c2': -14221,\n       '\u0627\u0644\u0643\u0644 \u0641\u064a \u0627\u0644\u0645\u062c\u0645\u0648 \u0639\u0629': -611427335,\n       'R': -3.557193378366863e+16,\n       '': -nan,\n       '\\U0009a77a\u00fd\\x11': -3.8247883833234653e-205,\n       'NIL': -99,\n       '\u00f3': 8192,\n       '\\x16~\\rG': 6_987_723_463_733_488_629},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(5773, 2734), (31570, -23801)},\n      slice_comments={(-2373,\n        -2614): '\u00b2V\u00a5\\x02\ud845\udc17H\ud865\udc0ea\u00ec\\x81{@\\U00013922^\u00b4\\x05\\x16E\u00cf\\U000668d5\u00c3)\u00f7\u00dc\u00c2\\U000d3a5f\\x89\\x04\u00c0e\\x82g\\x9f\\U0006ab0c\\U000828a7\\U000acc0e\u00bd\\U000b268c',\n       (-79, -14009): '',\n       (113, -14379): '\\U000cc358\u00d3\\x15',\n       (-14195, 7518): '\\U000d9904\u00d2\u00c7\u00b0\\x98'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=19466, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.3511544328452603},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=96,\n        constraints={'min_value': None,\n         'max_value': 7591,\n         'shrink_towards': 21678,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.05,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.0357002519881254e-94},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.9644775804026636e+16,\n        constraints={'min_value': -1.046392795864823e-145,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5854616860505139.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='aVz6\u00f2\u00f7&F\u00a2\\x1e\u00da\\x98\\U0003df85\\U00092c0f,B*\\x92\u00ac\\x9eh\\U0001987eN\\U000dcc74E\u00f4\\x91\\x82\\x7f&\\x85R\\n\\x93\u00be\\U00016518\u00a7\u00bb\\U00092947\\x08\u00ce\\U000dec23\\x97\u00d8\u00e0d\\U000b7282\\x1b\u00c47\u00c7\\U0009e07d\\x99\\x94\u00ca\\U000e28ac\\x97\\U000eb462\u00e7\u00fd\\xad\u00da\\U000d64a2\u00b5I\\U00044416\u00a8\u00a7\\x0b\u00f2\\U000b6557!\\x02\\U000ef1ef\u00a1\u00dd\u00b1\u00c9\\U00090669\\\\\ud859\udf41F\u00f5?\u00c5\\U0001e754\\\\\u00bc\\U000e8b09\u00d4k\u00fb\u00e6\u00b8\\U000161abb\\x94\u00b8\\x8a\\U0008dded\\x02~\\U0008e025\u00edd\\x11\\x94\u00d3\u00f0(\\x14j@\\x1b?\\U0003d925',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  300,\n                  404,\n                  1000,\n                  46624,\n                  176408,\n                  231827,\n                  361913,\n                  547413,\n                  683080,\n                  741881,\n                  756488,\n                  855240,\n                  980595,\n                  1020786,\n                  1041848,\n                  1076995],\n             ),\n         ),\n         'min_size': 47,\n         'max_size': 147},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'~2',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -10000000.0,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.33768717666375e+308},\n        was_forced=True,\n        index=None)),\n      length=-3911,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'c\\\\\\U00101678(\\U0006d704': -117},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-31598, -9872): '\\x85\\x14\u00b6',\n       (10790, -8813): 'G\u00c76Y\u00b9\\U000c3439',\n       (-96, 18709): '\u00bb<Jq\\U00055ebb*',\n       (78, 9180): '\u00a2(m\\U000f5156FH\\U00065a64\\U0005dd64\\x9b\u00d6\\U0007c2e7\u00ca\\x05',\n       (-1_454_654_934_052_598_166,\n        16425): '\\U000f7a17\u00b1\u00ae\\x92\\U000dfd36(M\\x05\\U000b262e\u00e6',\n       (-20, 19848): '\u00f8o'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=9999, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'l\\x90C\\x1bP\\xd8\\xb5\\x08(\\x91',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xf7xUM\\xd8sG\\x80\\xe8\\x06N\\xef!',\n        constraints={'min_size': 9, 'max_size': 19},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=3669070013483627.5,\n        constraints={'min_value': 0.5,\n         'max_value': 9007199254740992.0,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1539923239392160.2},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0027220731744490583},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud313\ud3de\ud316\ud3c6\ud3aa\ud334\\U00059fce\ud323\ud329\ud327\ud366\ud313\ud3e4\ud333\\U00011981\ud309\\U0005ca24\ud374\ud318\ud37f\\U00059b9b\ud33f\ud3c7\ud37a\ud2ff\ud31d\ud3a1\ud37c\ud37e\ud38b\ud382\\U0005a0fd\ud323\ud391\ud304\ud355\ud397\ud30f\ud37b\ud39e\ud383\\U00015795\\U00015082\ud304\ud3b3\ud333\\U0005c0ed\ud360\\uf00f\ud42c\ud379\ud3ae\ud3af',\n        constraints={'intervals': IntervalSet(\n             build_intervals([54014, 88273, 361373, 395018, 433618]),\n         ), 'min_size': 50, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7647872090506314},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'~\\xfd\\xf8\\xff\\x03\\xf6c@\\x93\\xfd\\x9e\\tQ\\\\\\xc6d,z\\xc2\\xda\\xce)\\x08Z\\x88\\x7fxYMd\\xce\\xf0=\\xb6\\xe9A\\x92p\\xe8\\xba\\x16 \\x8a\\x07mI\\xa1\\xfd\\x17\\xc9\\x06\\x91\\x88\\x1a\\x07\\\\\\xf0\\x83o\\xe3\\xbf\\x9a\\x96\\xa8\\x14\\xbe\\xc93\\x96}L(\\x81\\xd0\\x9f\\x04\\x17\\xaa\\x06\\x0bt\\x1bH\\xf15F\\x1c(@u\\xeb\\xd80BJ\\x84\\xb5[\\x9d\\xc8=JW%\\x86\\xdfo\\x00\\xf0\\x07BGr\\xd1+\\x19e\\x98\\xbd/\\xd7\\xed\\xb0\\x1cf\\x05\\xb6\\xa5\\xc3\\xfd\\xc4\\x04r2 \\x10\\xa4\\x19E\\xf0\\xa6\\nC1\\xdb\\xd6G',\n        constraints={'min_size': 47, 'max_size': 147},\n        was_forced=True,\n        index=None)),\n      length=2876,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('c', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\n@\\U000a3b0a\u00c8\u00ce\u00a4u\u00ca+\u00cf\\x87^\\x9bX\u00c09F',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00e0': 36,\n       'x\u00f1\u00ed': 65535,\n       '\ud882\ude3b\u00dd': 9438,\n       '/assets': 0.5,\n       'L\u00da': 21411,\n       '\u00b8\u00fcu\u00c3\u00d7': -29161,\n       '\\x9a': 4.894585144551144e+16,\n       '}*\\x83\u00c0\u00c2J\\x12\u00cf': -1.3852745046327202e-127,\n       'NUM': -16348,\n       '\u00ec\\x849': -8339,\n       '\\x95_\u00b5': -7.101555819494325e+16,\n       '\\x15\u00aaKK\\x88\u00f9\u00dfR1\\U0010fb78\u00aev\\U00059f51': -685660533,\n       ' \ud84b\udd51^\u00e9z\u00ee\\U000a23bd;\u00e4\\x07\u00f1\\x82O\\x7f\u00d0': -22720,\n       '\\U000e9ab2\\x88\u00d5\u00abB[': 32288,\n       'T\u00ef\u00cd': 5.7285172248535954e+222},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-23134, -25258),\n       (-18040, -2_513_081_311_860_492_732),\n       (-17690, -7705),\n       (-34, -142_225_912_922_156_544_103_527_506_884_268_725_352),\n       (-2, -103_920_258_472_986_365_053_369_650_811_497_335_589),\n       (70, 23925),\n       (6691, -67),\n       (9289, -8993),\n       (27528, 22)},\n      slice_comments={(5682, 29466): 'V'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-9894, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\u044e\u048e\u04c9\\U000e6c33\u04e7\u0447\u045e\u043b\u04b9\\U000f3aa2\u03f9',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1000,\n                  7945,\n                  63013,\n                  97947,\n                  161399,\n                  300877,\n                  579713,\n                  798848,\n                  862083,\n                  962075,\n                  991548,\n                  1114111],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),),\n      length=29433,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 2, 3),\n                                     ('b', 1, 0)),\n                                    (('c', 2, 0), ('c', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'j\u00d9\u00b0': -25803,\n       '\\U0010c423\u00b9\\x10': -99,\n       '\u00c2\\r\u00b4': -1.9,\n       '\\x1b`\u00c0\u00deh\\U0004ecbd\\U000cdda0\\U000fcf43': 2_063_219_106,\n       ',m': -26324,\n       '': 2.148878706455824e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-163_458_025_101_453_084_211_102_175_987_852_960_299, -75)},\n      slice_comments={(-14433, -111): '\\x12K\u00d3',\n       (-14868, -5822): '\u00bb\\U0008b725Pp\\U00012dee',\n       (-106, 4_924_588_648_947_066_750): '\u00e7'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-3052864904337873501, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000be53a\\U000f6f7d\\U000be4c2\\U000be507\\U000be516\\U000be4ad\\U000be59c\\U000be4dd\\U000be50e\\U000cf424\\U000be584\\U000be50c\\U000be589\\U000be559\\U000be563\\U000be554\\U000be53a\\U000be5a0\\U000be57a\\U000c53f2\\U000be529\\U000be54d\\U000be4e2\\U000be4cd\\U000be589\\U000be4d4\\U000be526\\U000be51f\\U000be51e\\U000be55f',\n        constraints={'intervals': IntervalSet(\n             build_intervals([779426, 1059855]),\n         ), 'min_size': 24, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.1961209756270535},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 1.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 3.11674844073841e-227},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([188490, 291076]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.3333333333333333},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xe3$\\xbf>\\x15.\\x9a\\x14\\xa7\\xf9\\xa9/}`dd\\xc7(\\xfa\\x17\\xc9\\xda\\x8em@\\xd3\\xb0=@\\xab\\xd9\\xc3\\xebpHA\\xe4S(*\\xad\\xbd\\x03Y\\xe6\\xf7\\n',\n        constraints={'min_size': 38, 'max_size': 138},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000a7d5d\\U000541b4\\U000541e5\\U00054196\\U0005418d\\U000541f9\\U000cf083\\U00054216\\U0005417f\\U00062ea5\\U000541b7\\U000541ba\\U00054192\\U000541f1\\U000541b5\\U000541e5\\U000541aa\\U00054146\\U0005420a\\U0005419a\\U0005414f\\U000541e6\\U000541fb\\U00054190\\U000541e6\\U000541da\\U0005415b\\U0005416a\\U0005417e\\U000541e6\\U00054141\\U00054198\\U000541f8\\U0006affa\\U000541ac\\U00061f2e\\U000541c4\\U000541de\\U000b2ab3\\U000c5b17\\U000541c2\\U000cd1a3\\U000541fe\\U000541ed',\n        constraints={'intervals': IntervalSet(\n             build_intervals([344375, 470388, 677848, 861322]),\n         ), 'min_size': 40, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=35040,\n        constraints={'min_value': 22965,\n         'max_value': None,\n         'shrink_towards': 105,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=3.766447907026748e+16,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5335040087951766.0},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.225073858507203e-309},\n        was_forced=False,\n        index=None)),\n      length=-3278,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('c', 2, 2)),\n                                    (('a', 1, 1), ('a', 0, 3)),\n                                    (('a', 1, 2), ('a', 2, 1)),\n                                    (('b', 2, 2), ('c', 3, 0)),\n                                    (('c', 0, 1), ('b', 1, 1)),\n                                    (('c', 1, 2), ('b', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='BX6\u00a4\u00c6\\U00036e84j*<v\u00d8',\n      has_discards=True,\n      target_observations={'\u00f0': -24,\n       '\u00c3LgG\\U00075a10f}\u00d9T\\r@\u00e6\\U0005f158\\x9e': -769100.2089315814,\n       '\u00c8\\x0e': 9007199254740992.0,\n       '\\U000708c6\u00db': 1.1,\n       'w\\U00090bffS\\x87\u00a8\\U000eff10\\U0003f2c3]\\x1a': 16128},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-118, -78)},\n      slice_comments={(-5_442_114_785_958_183_552, 25376): '\\x92\\U00064f96',\n       (-17463, 14069): '\\x8fr',\n       (100, 116): '\\x19\u00f0\u00e2\"\u00a8',\n       (6106, -7_468_004_976_675_620_800): 'max_value',\n       (-32681, 6_387_065_437_006_362_211): 'Y',\n       (-83, -10832): '',\n       (31, -122): '\\U000efadcP\u00c4',\n       (27630, -55): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='other')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x106d0c800>, min_size=0, max_size=inf).map(tuple), length=one_of(nothing(), nothing(), integers()), has_discards=one_of(nothing(), nothing(), booleans()), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason')))), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text()))).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0082958759739995,
          "overall:gc": 7.73330102674663e-05,
          "generate:args": 0.09327524557011202
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878961.4391448
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=79, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=16902,\n        constraints={'min_value': 11754,\n         'max_value': 28556,\n         'shrink_towards': -80,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xdd\\xc5',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u60c7\\U000e9622\u60da\u6171\u610a\u60e0\u60df\u6103\u60fd\u6123\u6147\u6158\\U00035a5c\u6190\u610e\u60c1',\n        constraints={'intervals': IntervalSet(\n             build_intervals([24762, 923017, 934600, 1032488]),\n         ), 'min_size': 11, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u478f\u47c5\u4773\u476a\u47db\\U000e2c26',\n        constraints={'intervals': IntervalSet(\n             build_intervals([18212, 89985, 703221, 952703]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='A\u00ddt\\U0009c399\u00f8\\r(\\U000b4913',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0, 300, 521902, 741592, 959584, 990173, 1012417]),\n         ),\n         'min_size': 5,\n         'max_size': 105},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000f2141\\U000f7380\\U000f2164\\U000f21ee\\U000f2155\\U000f2177\\U000f216f\\U000f66ce\\U000f21e3\\U000f219b\\U000f2164\\U000f2206\\U000f218c\\U000f216d\\U000f216e\\U000f2192\\U000f21e0\\U000f3105\\U000f2189\\U000f3bf2\\U000f2161\\U000f21c6\\U000f2183\\U000f2143\\U000f21fb\\U000f2196\\U000f2232\\U000f2150\\U000f214a\\U000f222a\\U000f2151',\n        constraints={'intervals': IntervalSet(\n             build_intervals([991543, 1027485]),\n         ), 'min_size': 12, 'max_size': 112},\n        was_forced=False,\n        index=None)),\n      length=26424,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 2, 2),\n                                     ('c', 2, 2)),\n                                    (('b', 2, 3), ('b', 3, 0)),\n                                    (('b', 3, 0), ('b', 0, 3)),\n                                    (('c', 0, 3), ('a', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\x12x', 0, 0, 'reason'),\n      expected_traceback='\\x92\\U000978c9',\n      has_discards=True,\n      target_observations={'': -4.8272148131281256e+57, '\\x12\u00bb': 99},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(89, 6739), (20345, 31244)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-15, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\u00ed',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  180414,\n                  225360,\n                  253028,\n                  264725,\n                  303051,\n                  416696,\n                  566974,\n                  615397,\n                  771326,\n                  823364,\n                  909116,\n                  960331,\n                  979803,\n                  1003934,\n                  1093303,\n                  1093370],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u0216\u0282\u01a8\u01c1\u021d\u0201\u0282\u019d\u7504\\U0004f4cc\u01e6\u0282\u0282\u633f',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [404,\n                  72884,\n                  207482,\n                  244457,\n                  245043,\n                  400722,\n                  439855,\n                  580440,\n                  1026751],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u01c5\u0177\\U0001267f\u0162\u01b4\\U000f385b\u01c4\u0138\\U00081f5f\u01c4\u0205\u01e7\u018a\u0174\u01db\u01a7\u015f\u0147\u01e9\u0212\u0207\\U00081c81\u0145\ua7b9\u0176\\U000ee23d\u015f\u01a5\\U000bb71d\u0183\u0164\u0164\u018c\u0137\u0215\ua871\\U000f7d1f\\U000ee2d7\u0195\u012c\u014e\u017a\\U000e1d67\u022b\u0143\u013a\u0214\u021d\u0154\u01dd\u01f9\u01ab\u019c\u0225\u01dc\\U00083ca2\u01b0\u01e6\u012f\u0225\u01b4\u020a\\U0004506d',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [300,\n                  111727,\n                  188342,\n                  213529,\n                  268563,\n                  306089,\n                  511813,\n                  553125,\n                  756443,\n                  768613,\n                  922690,\n                  1026902,\n                  1109106],\n             ),\n         ),\n         'min_size': 26,\n         'max_size': 126},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=24761,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 13,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=3244,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='',\n      has_discards=True,\n      target_observations={'': 2.1490243260686988e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-34_996_906_098_305_591_202_746_661_305_614_599_851, 20672),\n       (-17997, -101_585_723_163_769_436_584_465_413_561_278_975_792),\n       (16, 20775),\n       (1024, 11208),\n       (77_153_670_533_743_387_811_835_821_508_430_739_649, 1456)},\n      slice_comments={(9500, 109): 'i\u00f6\\U000b8f0cR\u00a4',\n       (29136, 1000): '\\U000723d7\\U000c4c01\u00d1\\U000ddcdb\\U001076e9',\n       (300, 106): '',\n       (1_402_703_337,\n        8192): 'O\\U000d583d\\x04\\x8a\\r\u00c6-\\x19VEr\u00f0\u00fc\u00c2 3\u00f2\u00d8\u00fd\\x1f\\x94\u00c1',\n       (-9, 512): '\\x1e\u00db',\n       (11828, 14280): '.',\n       (-2_120_737_089, -24897): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-23482, context=(), group_elems=()),\n      nodes=(),\n      length=1127,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 3, 1),\n                                     ('a', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\x0c',\n                     [UnicodeTranslateError('\u00b8 ', 0, 0, 'reason')]),\n      expected_traceback='',\n      has_discards=False,\n      target_observations={'\\U000c56c4E\\x15': 84,\n       '\u0230x\\x93\\U000eaeb2\\U000162649': 5428,\n       '\u00ac8': 1.2171738667198472e-260,\n       '{\\x0fe\\x0b\u00a6': 22547,\n       '\\U0010d2fb\\U0001a924\u00d9\u00fa\ud884\udc83\u00a7': 61},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-18172, 8192), (-4324, 5185), (19531, -1_010_621_862)},\n      slice_comments={(-1_959_345_150_090_550_446, -31719): '\\x94*\\U000f1509',\n       (155_827_397_037_798_702_567_717_950_767_583_783_556,\n        -6_856_694_142_211_409_757): '\\U00060e36\u00ec\\x12i'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=44, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\x9c\\x8b\\xbb\\xc9\\xbe\\xf4\\xee\\xefyc\\xad\\\\\\x85>\\x82',\n        constraints={'min_size': 14, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.4689387449708455e+307,\n        constraints={'min_value': -4.3708602844284017e+291,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.389731507048484e+107},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"\\x83\\xde\\x1dQ\\x1e\\xccO.\\xe0\\xdb\\xef7Y\\x1eq\\xcdt\\x86\\xecGr+PG\\x80\\x9f\\x00\\xb0\\x83\\x0b \\xf2\\xd2:p'\\xf4\\x98k<DA\\xfe\\xa9\\xdfo\\x00\\x8d\",\n        constraints={'min_size': 48, 'max_size': 110},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xde\\xd1\\xd7\\x1fOE\\xff1\\xed;\\x9bzR\\x1c\\xe5\\xaf\\xe4',\n        constraints={'min_size': 9, 'max_size': 109},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"D]\\xa3\\xe4>\\xb1y\\xc4\\xf8T\\x15\\x89Q9\\xad\\x8e\\x15\\xee'X\\xd3\\x19\\xfaXQ80\\xdd\\x9am\\xea\\x10\\xd3\\xb0nV\\xee\\xfb\\xe9\\xe7u\\x9f\\x94\\xae\\xb2\",\n        constraints={'min_size': 27, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"\\xaaj\\xe0\\x02Ux\\x05\\xe0\\x10\\x9a\\xb8\\xae\\xb2\\xe1\\xf8\\xe7\\xe2\\x91@\\xd3\\x87\\xf4\\xb1F\\x91'\\xc1D\\\\\\x01\\xc26jq\\x067\\xad\\x97\\xccT\\xf7u\\xd8\\xb6\\x13\\xa0\\xf6@\\xdb|\\x87FR\\xf6\\x97\\xaeng_\\x9d\\xf6\\xcb\\xa8,\\xb8\\xdfHbD%\\xf5\\xcb\\x98R\\xc4\\xfe\\xefFJ\\xff\\xff\\xda\\xef\\xa2\\xd3\\x82\\xa0AT\\xdeK;\\xd6.Py\\x83\\x1d_.\\xb0\\x82<\\x02:\\x95\\x12d\\x0f\\xd1\\xbc\\xab\",\n        constraints={'min_size': 37, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u0210\u016e\u014c\u0229\u01e6\u0192\u0226\ufea2\u01f4\u01f9\u0205\u0173\u0213\u0142\u021f\u014a\\U00011b7e\u0206\u01a8\u01c6\u0189',\n        constraints={'intervals': IntervalSet(\n             build_intervals([300, 249637, 391790]),\n         ), 'min_size': 0, 'max_size': 21},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u5869\u03a8\\u0380\u0432\u040b\u6469\u538d\u03b3\u0416\\u038d\u03cd',\n        constraints={'intervals': IntervalSet(build_intervals([830, 65014])),\n         'min_size': 10,\n         'max_size': 110},\n        was_forced=False,\n        index=None)),\n      length=17852,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('a', 1, 0)),\n                                    (('a', 3, 2), ('b', 2, 3)),\n                                    (('b', 0, 2), ('b', 3, 3)),\n                                    (('b', 3, 0), ('b', 2, 2)),\n                                    (('c', 2, 0), ('a', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\x17YS\\x84',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('R\u00d8}\\U0010e5f9\u00d3B', 0, 0, 'reason'),\n                      ExceptionGroup('\u00fa',\n                                     [UnicodeTranslateError('\u00c2g\u00cf',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason')])]),\n      expected_traceback='F',\n      has_discards=True,\n      target_observations={'': 7633},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-4_509_300_272_387_209_225, -3360),\n       (-2_056_521_954, -8),\n       (-28647, 8885),\n       (-12306, 16571),\n       (-92, -18047),\n       (-65, 404),\n       (4870, -6_711_843_865_007_181_475)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-28865, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=74831,\n        constraints={'min_value': 29250,\n         'max_value': 2_968_340_549_944_550_997,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.4587940666296014e+308,\n        constraints={'min_value': -2.6728688537129726e-277,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.4587940666296014e+308},\n        was_forced=True,\n        index=None)),\n      length=-17617,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('a', 3, 0)),\n                                    (('b', 3, 3), ('a', 0, 0)),\n                                    (('c', 1, 1), ('b', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'': -1.6979158982347924e+16,\n       '\\U000ce752': 2.225073858507203e-309,\n       '\\x8c#a\u00b4': -23618,\n       '.\u00e5[|#3\u00d0': 2.1389040821767275e+104,\n       '\u00b6s\\U000e0729\u00e9': 28850,\n       'undefined': 0.05,\n       'INF': -46,\n       '\\x87\u00f6w\u00a8\\U000f6ff1': -51},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-15156, 343377432),\n       (-75, -30643),\n       (-33, -40),\n       (-31, 1_254_528_167),\n       (-29, 5791),\n       (-2, 12838),\n       (22, 100)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from integers(0, 1114111).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x106d0c800>, min_size=0, max_size=inf).map(tuple), length=one_of(nothing(), nothing(), integers()), has_discards=one_of(nothing(), nothing(), booleans()), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason')))), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text()))).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0037971660494804382,
          "overall:gc": 0.0,
          "generate:args": 0.06637508317362517
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878913.846804
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=39, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -6.286091890002398e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2456424868162772.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0008ac7f\\U0008ac29\\U0008abf8\\U0008ac29\\U000996fb\\U0008d442\\U0008abe2',\n        constraints={'intervals': IntervalSet(\n             build_intervals([568243, 638357, 702896]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None)),\n      length=16702,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('c', 0, 2)),\n                                    (('c', 1, 3), ('c', 1, 0)),\n                                    (('c', 2, 1), ('a', 2, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\U0005b7b7J\u00f9x\u00a8x\\x15 )\u00b8\\x98\u00ae\u00af\u00c5f',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\U000d9ca8\ua5a0',\n      has_discards=True,\n      target_observations={'H\\x16\\x06\u00a8(\\U000606e9=\\U000e615fC.W\\x0c': -1.732042172907412e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-29324, -7310),\n       (-18662, -6),\n       (-7934, 60),\n       (-64, -14),\n       (404, 10678),\n       (8550, -32732),\n       (23782, 534022818),\n       (30480, 125)},\n      slice_comments={(199966275, 10885): '',\n       (30518, 9715): '\u00b7',\n       (-16410, -7987): 'None'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=6084423319264448610, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b\"\\xbe\\xdc\\xcc\\x8d\\xb5V\\xb5D\\xc3B\\xc4+h\\xca\\xd0\\xd2\\x15\\xe2\\x0c\\xc4\\xe5\\x02Y\\x94|\\xa0\\xba\\xb2UC\\xd1\\xc5'\\x16\\x16\\xaa=b\\x07\\xfc3\\xc4\\xe0\",\n        constraints={'min_size': 13, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=3.0959196674258134e+261,\n        constraints={'min_value': 1.177124019961132e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.99999},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=4.199968209383679e+270,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.7703244125226817e+76},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u01fa\u0201\u01b8\u0203\u0242\u0264\u0236\\U0010d997\u0210\u01e9\u028e\u0219\u0261\\U000afd6f\u0207\u026f\u0202\\U000acbdc\u01f3\u021a\\U0003a359\u0222\u01f8\u01b8\u01c2\u01d9\u0263\u021d\u0226\u0216\u019b\\U000a9b48\u019e',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [404,\n                  52157,\n                  144659,\n                  255087,\n                  312612,\n                  338854,\n                  344633,\n                  369041,\n                  683578,\n                  752503,\n                  895245,\n                  923146,\n                  1059788,\n                  1114111],\n             ),\n         ),\n         'min_size': 4,\n         'max_size': 104},\n        was_forced=False,\n        index=None)),\n      length=52,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('a', 1, 3)),\n                                    (('a', 0, 0), ('a', 3, 3)),\n                                    (('b', 1, 0), ('c', 2, 0)),\n                                    (('c', 0, 0), ('b', 1, 3)),\n                                    (('c', 0, 2), ('b', 1, 0)),\n                                    (('c', 0, 3), ('a', 2, 3)),\n                                    (('c', 1, 0), ('a', 0, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('T=F\\U000a5fe7\u00fbc!M\\x9d',\n                     [UnicodeTranslateError('\\x16\\x9d#l\\x08', 0, 0, 'reason'),\n                      ExceptionGroup('',\n                                     [UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup(';\u00c3\\U0006460d\\x9e\\x16\u00bdC\u00eci',\n                                                     [ExceptionGroup('\\x9e\\x06\\U000d23ff\u00d6',\n                                                                     [ExceptionGroup('\\U000cd7f9\\rG\u00e1',\n                                                                                     [ExceptionGroup('\u00f5}\\x8f\u00c7\\U000f02033\ud876\udcd4',\n                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeTranslateError('\u00b7_\\U000fb9bb\u00c9',\n                                                                                                                            0,\n                                                                                                                            0,\n                                                                                                                            'reason'),\n                                                                                                      UnicodeTranslateError('\u00ac',\n                                                                                                                            0,\n                                                                                                                            0,\n                                                                                                                            'reason'),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         '\uc4f8\\x9c\\U0009adee\\x84\u00a4',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason')]),\n                                                                                      UnicodeTranslateError('\\U00081448\\x99\\x02.\\U000ce6e1\u00ba\u00e7\\x1bp\u00c1\\x82\\U00082fd3\\U00061ed2\\x0b\\U00074fe6',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      ExceptionGroup('\\U0005adbaWF\u00e4',\n                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         '',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason')]),\n                                                                                      ExceptionGroup('\\x80\\x8bX\u00ee',\n                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         '',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      ExceptionGroup('',\n                                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                                         b'',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      ExceptionGroup('W\\x14\\U00108285M',\n                                                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                                                         b'',\n                                                                                                                                                         0,\n                                                                                                                                                         0,\n                                                                                                                                                         'reason'),\n                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                         b'',\n                                                                                                                                                         0,\n                                                                                                                                                         0,\n                                                                                                                                                         'reason'),\n                                                                                                                                      UnicodeTranslateError('3\u00b0\\x0eN\\x12\\x8d\\U000f5d75\\U000f0227\\x8c\\x02\u00c0\\U000f0684\\x90\u00e73\\U000fd47e\ub204\\x7f\\U00014f7b\\xa0\ud85c\udc5b\u00ea\\x80\u00e8',\n                                                                                                                                                            0,\n                                                                                                                                                            0,\n                                                                                                                                                            'reason'),\n                                                                                                                                      ExceptionGroup('\\U0006ee12\u00ff',\n                                                                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                         b'',\n                                                                                                                                                                         0,\n                                                                                                                                                                         0,\n                                                                                                                                                                         'reason')]),\n                                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                                         '\\U00090b76\u00f8\\U000447f8\u00f2\\U00086fb1\u00be0',\n                                                                                                                                                         0,\n                                                                                                                                                         0,\n                                                                                                                                                         'reason')])])]),\n                                                                                      UnicodeTranslateError('\u00c0\u00f4Y\\U000fa569\\U000e2124',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason')]),\n                                                                      ExceptionGroup('\\x9f\\U000a71c5\\U000ac36b\\x04K\\U000e630c\\t\\U00058e20p',\n                                                                                     [ExceptionGroup('\\U000b5846',\n                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                         '/v\\U000d0f8e',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason')])]),\n                                                                      UnicodeTranslateError('-',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeTranslateError('\\U000b1771q\u00b1\u00a2Af\u00f3\u00a3\\U000deaa3I',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason')]),\n                                                      ExceptionGroup('min_size',\n                                                                     [UnicodeTranslateError('\\U0005e392\\t1\\U000867f3\u00c9Y\u00c2\\U000ab0de',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason')]),\n                                                      UnicodeTranslateError('',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '\\U000ad075\\x00\\x11\u00be\u00af\u00fb\u00e4\\U000164f6\u00a5\\x88\u00e7\\x87Ww:\u00c5t\\x18\\x18',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')])]),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00e4-\\U00033b8e': 72, '': nan},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-18919, 30449),\n       (-10192, -47),\n       (1024, -359308072),\n       (4981, 1_356_299_069_470_071_992),\n       (11921, 1_899_313_200),\n       (21724, -9),\n       (26231, -25)},\n      slice_comments={(11100, 17178): '>\ud87a\udf7f',\n       (21067, 7_576_014_094_459_666_823): '',\n       (-1,\n        -21295): '\\U0010968d,M\\x04@,\\x88V\\U00019071\\x84\\x0b|\u00f4\\x1f\u00b5\u00a2\\x9b\\U0008832eG(\\U000b1825]\\U000acb89'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0018927499768324196,
          "overall:gc": 0.0,
          "generate:args": 0.020223876053933054
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878921.6003468
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-17878, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -4.281153027233779e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.05},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [6605,\n                  24744,\n                  172654,\n                  179725,\n                  245219,\n                  249200,\n                  403008,\n                  407410,\n                  407541,\n                  449444,\n                  477832,\n                  496696,\n                  499668,\n                  758477,\n                  766303,\n                  809029,\n                  834658,\n                  979309,\n                  1013374,\n                  1023933,\n                  1074433,\n                  1083530,\n                  1084231],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=8192,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"\\xb1\\x83\\xb8~\\x14 \\x14\\xe9\\xe7.\\xca<\\x93\\x9f\\xce\\xfa\\x8fm'\\x11\\x7fj\\xd1\\xa4\\xe9~#\\xf3\\xadE\\xe9\\xfb#\\xf1\\n\\xe8cx\\x9cSO\\xa0\\xbb\\x0bk\\x17\\xdf\\x1d@g\\x0c\\x84Z\\xaf\\x03\\x92\\xc0\\x9a\\x88\\x1e\\xff\\xc3\",\n        constraints={'min_size': 47, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'l?\\x94)\\x1d',\n        constraints={'min_size': 2, 'max_size': 102},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -5.758163797320926e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.028130388328284e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u00b4\\x7f\\x94\\U000d6dd4\u00c9k\\x8bT\\U0001a299\\x85\u00a3\u00c7\u00f5\\U0001c287\\U001099a2\u00a8?\\x82;\\U000d668f\\U0010f4ba1\\U000d99c0cv\u00d5^\\x1aj\\x97\\U000fee22\\U000d9eaf\\U0001ac3b',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0, 512, 105494, 118998, 877333, 896198, 1015472, 1114110],\n             ),\n         ), 'min_size': 28, 'max_size': 128},\n        was_forced=False,\n        index=None)),\n      length=2066,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('a', 2, 2)),\n                                    (('a', 0, 1), ('b', 0, 2)),\n                                    (('a', 0, 3), ('b', 0, 3)),\n                                    (('b', 1, 1), ('b', 1, 0)),\n                                    (('b', 1, 3), ('a', 3, 1)),\n                                    (('c', 0, 0), ('a', 0, 1)),\n                                    (('c', 0, 1), ('a', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\\x0c': 119,\n       '\\U000baf12': -421739951,\n       '(\u00af\\x89\\x87\\U000bbb10\\x89u5l': 0.05,\n       '': 1000,\n       '\u0627\u0644\u0643\u0644 \u0641\u064a \u0627\u0644\u0645\u062c\u0645\u0648 \u0639\u0629': 1.8522461452834702e+292,\n       'q': -inf,\n       '\\x9d': 4.018241102837273e+16,\n       '\u00c7\\\\': 0.5,\n       '\\x12\u00bf': -1.9},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-32641, 1_412_166_549),\n       (-31293, -1_694_509_155),\n       (-22200, 1947),\n       (31808, 27522)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-741, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.05},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 5.960464477539063e-08},\n        was_forced=False,\n        index=None)),\n      length=57,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('', 0, 0, 'reason'),\n                      ExceptionGroup('\\x14\\U000f9e48\u00cb\u00d5\\U00070d97\\U000931b2',\n                                     [UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError('\u00bfP5\u00a5Errs{\u00f0W\u00b5r\\U0001daef\u8b19\\U000e1e76',\n                                                            0,\n                                                            0,\n                                                            'reason')]),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\u00b1\u00d8=\\U00040969\u00bb\u00c3R\u00cc\\x0c\\U000cfa9b)\u00a8 \u00c1\\U0007d79d\\x031\u00fc\\U000ff4c1\\U00107b71M\\x97\u00c8\\U0004d73e`\\U0005d913',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'^\u00dfz': -1.5630123927822047e+264},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-5_774_879_562_553_555_724, 97),\n       (-3_264_286_682_712_626_217, -99),\n       (25448, -22818)},\n      slice_comments={(-668, 99): '\u00b2',\n       (-1_701_384_930, -25547): '\u023e',\n       (17739,\n        -55_504_589_675_933_971_308_450_871_235_466_860_257): 'undefined',\n       (-93, 19006): '',\n       (-6249, 27706): '',\n       (-21200,\n        -5879): '\u00c8\u00e3~vH\\x13\"\\U00086625<\u00a5\u00f5\u00d6!L\u00d8\u00c7\\x90\u00be\\x9dC\\x93e\\U00033dd4',\n       (17683, -3): 'S\\U000894f5',\n       (14056, 32): '\u00bd\u00cd',\n       (13172, 300): '\\x8e\\x1c\\x98\u00d2\\x914',\n       (-25592, 20): '\u00d1\\U000af115#\\x0f\u1a0a\\U000878ce\u00cf\u00da\\U000d3165\\U0009a641',\n       (-900900641, 533532956): '\\x0f\\x18\u00ae\u00ff\ud858\udcb3'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0018114169943146408,
          "overall:gc": 0.0,
          "generate:args": 0.01864154194481671
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878912.499774
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=108, context=(), group_elems=()),\n      nodes=(),\n      length=7601,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 2),\n                                     ('c', 0, 3)),\n                                    (('b', 1, 3), ('b', 1, 2)),\n                                    (('b', 2, 1), ('c', 1, 1)),\n                                    (('c', 0, 0), ('b', 2, 0)),\n                                    (('c', 1, 1), ('b', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-4_207_627_644_180_798_962, -19280),\n       (-29344, -18790),\n       (-92, -15562),\n       (126, -30657762),\n       (2608, 31654),\n       (27301, -25669),\n       (3_720_474_094_150_507_764, 69)},\n      slice_comments={(1_456_735_691, 815): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=404, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=False,\n        index=None),),\n      length=19,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\x92\u1f54',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('\\x04\\x98', 0, 0, 'reason'),\n                      UnicodeTranslateError('', 0, 0, 'reason'),\n                      UnicodeTranslateError('\u00ee\\U00060b0c\\U000860f7k\u00dd}g\\x14\u00f1Q',\n                                            0,\n                                            0,\n                                            'reason'),\n                      ExceptionGroup('C',\n                                     [ExceptionGroup('\\U000c7be9',\n                                                     [UnicodeEncodeError('unknown encoding',\n                                                                         'q\ud886\udd5b',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')]),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason')])]),\n      expected_traceback='',\n      has_discards=False,\n      target_observations={'\\U0009a23f\\x98\u00c7': -2.3255367143322886e-72,\n       '\u00beI\\x8e\\U0008a13dp\\U0010fcf6\u00bb\\x93\u00ee\\U0001dc95eo?{$': 2.2689618565249344e+16,\n       '\u00cd\\x90\\U0007cec5:=\\U000b621dT\\x19': -1.7976931348623157e+308,\n       '\u00fb\ud861\udef1\u00b1\u00ae\\U00050e48\u00c8H\u00e9r\\x0c': -10195},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-8_676_971_525_489_697_268, 3467),\n       (-30308, 13606419),\n       (-23191, 62),\n       (-20316, -23022),\n       (-14803, -23029),\n       (-13306, -2249),\n       (-12005, 82),\n       (-84, -8_191_872_668_084_586_351),\n       (-16, 5_418_474_712_445_751_983),\n       (12, -31369),\n       (39, -18861),\n       (100, 8_755_415_262_357_469_753),\n       (2320, -5721),\n       (8678, 3975)},\n      slice_comments={(-1_818_875_021_653_908_867, 404): '\u00c0|\\x84\u00b31\\x8c\u00dduH',\n       (-88, 404): 'F\u00ea\\xad',\n       (7991, 201940842): '',\n       (508_407_728_282_577_722, 5781): 'w\u00e5)\\U000d0b77\u00f2\u00c3\u00cc|\\x079K\u00ef'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=76, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 3.8734743481452893e+164,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.821866548015072e+306},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u00fb%\u00c7\\U00045559\\x17\u00e9\\x92\\x95',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  404,\n                  10347,\n                  552774,\n                  849359,\n                  878070,\n                  908191,\n                  975487,\n                  1091754],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x00\\xe43\\xcb\\xa4\\x97\\x06\\xab',\n        constraints={'min_size': 7, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=8.054668343093754e+306,\n        constraints={'min_value': -3.1749190237243794e+44,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.022555578676715e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b' $\\xf0\\xa1\\xd7j0\\xa5\\x1dR*\\xa1U=\\xc6\\xec\\x08\\xcb\\xf5\\xc7\\x04[\\xcb\\x07\\xf9\\x1a\\x82\\xf9\\xb5I~o\\xfc\\xb7\\xa6\\xd8M@\\xaf\\xbf\\x85\\xfa\\xf1\\x16Xa\\x86\\x85\\xff\\xc5\\x9a\\xf0\\xb1\\xa4\\x93\\x19\\x8d\"\\xae',\n        constraints={'min_size': 39, 'max_size': 139},\n        was_forced=True,\n        index=None)),\n      length=-67,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'Z': -13606,\n       'z': -inf,\n       '\\U000a53f9\ud84f\uded14f\\U00101a9e\u00e7\\x9c\\U00078101\ud84e\udffe5\u00ae': 718679902},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(3854, 21764), (8192, -13793)},\n      slice_comments={(3476, 11213): '\u00e3\u00ae\\x95\\U000e0647\u00aenF\\U000d0219\ud859\udde0\u00e7\ud868\udd9f',\n       (5588, -21279): '.\\x8b\u00bc|\u00bf',\n       (8_594_421_813_061_219_908, 92): '\\x8e\\x9e\u00d2\u00ab\\x0f\u00f5',\n       (404, 8192): '\\U0010d6ae\u00c2',\n       (-85, 25117): '\\x19\u00c5\\U0005de72\u00c0V\\x99\u00db\\U000ac722\\U000796c1\\U000ebe15',\n       (25842, -761596474): '\\U0010bcbd\u00da\\x1a\\U000ed9e61\\U0010b59fLy',\n       (20726, -17636): '\\x13\\x96R\u00c4',\n       (-8957, 75): '\u00e4',\n       (-11455,\n        -90_590_588_313_626_419_628_305_422_471_360_050_291): '\u00e6\\x98\\x9f'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-808, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.7886129336380808e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'.hypofuzz.observations',\n        constraints={'min_size': 21, 'max_size': 121},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.5683984191730443},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=32052,\n        constraints={'min_value': 10590,\n         'max_value': None,\n         'shrink_towards': -4570,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.5120359173081291},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 4.623608113454844e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0003c288\\U0003c274',\n        constraints={'intervals': IntervalSet(\n             build_intervals([246313, 618839, 803485]),\n         ), 'min_size': 2, 'max_size': 102},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': -4.2191357905629447e+226,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 3.1447162100637136e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x1f-%\\xbcm',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.1965607019216345},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-160,\n        constraints={'min_value': None,\n         'max_value': -75,\n         'shrink_towards': -17345,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u00f4\\U000387f7|\\x05\\U0001393f\\x19;\ud844\udee0\\x80)=\u00ce\\x93\u00e7\u00b9y\u00fdhF',\n        constraints={'intervals': IntervalSet(\n             build_intervals([0, 313432, 628045, 783059, 945355]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u0279\u0204\u0247\u02ee\\U000a74df\u02cb\u021f\u0227\u3cf8\u0252\u025f\\U000badfd\u021f\u0214\u02af\u17e3\u0225\u02c4\u0269\u025c\u0216\u0296\u0261\u02e6\ud873\udcad\u021a\u024d\\U000a406c\u0221\u026d\u027c\\U0009cd0b\u5ec3\u026b\uc038\u02ce\u02f6\u028c\u0256\u026a\u024e\u0218\u0287\u02b0\u0277\\U000b92e3\u0221\u02aa\u02c7\u027b\u025f\u6a51\u0297\u02d4\u0237\\U000bebca\u0224\u028f\u0237\u0273\u02ba\u0293\u022d\u0271\u026d\u0244\ud854\udf97\u6fac\u0227\\U000ac8e4\u027a\u0277\u02c2\u0271\u02fc\u0296\u0251\u028d\u02bf\u0281\ub6aa\\U000a0d95\\U000acb16\u02c1\u02d1\u02d1\u0202\\U000b81fd\\U000ba878\u025d\\U0009d127\u026d\u023d\u02c0\u02ee\u02fc\u02d5\u0214\u022d\u0272\u024f\u02b6\u02e5\u02ef\u02c4\u02a4\u029b\\U000b5322\u02a4\\U000ac541\u026d\\U000a191c\u025e\u0206\u0251\u02d1\u02ed\u02aa\u0287\u0204\\U000bbe15\u51da\ud858\uddba\u020d\u0231\\U000b9976\u0213\u02fd\u4479\u027a\u0278',\n        constraints={'intervals': IntervalSet(\n             build_intervals([512, 202362, 634547, 795748]),\n         ), 'min_size': 35, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-727517733,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 31705,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=38,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('b', 1, 1)),\n                                    (('a', 1, 0), ('c', 2, 2)),\n                                    (('a', 1, 1), ('b', 0, 0)),\n                                    (('a', 2, 2), ('a', 0, 3)),\n                                    (('b', 0, 1), ('a', 1, 1)),\n                                    (('b', 1, 3), ('b', 0, 3)),\n                                    (('b', 1, 3), ('c', 3, 1)),\n                                    (('b', 2, 3), ('c', 2, 0)),\n                                    (('c', 0, 1), ('b', 2, 2)),\n                                    (('c', 3, 0), ('c', 3, 1)),\n                                    (('c', 3, 1), ('a', 2, 1)),\n                                    (('c', 3, 2), ('c', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\x1b',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\u00e8\u00be\\x01b\\x91': -2.9581157930610386e-183,\n       '\\U000a6a7f': -10,\n       '\\U0005a3e0': -105,\n       \"\u00ddv\u00b2N\\U000b7d77\\x04!\\x03\u00ab\\x83<\u00ef\\x9cc\\U0008bba2]\\x8a\\U000ed267\\U000eecf4'\u00a8\\U00075e82\\x061\\x88\\x86\\x96\u00a8\\U00047da1\\x114\": 8192,\n       '\\x8c': -82,\n       'v\\x1f\\x89\u00de\\U0001fdc7\u00f9': -2.4317844987583097e-57,\n       '': 2.2250738585072014e-308,\n       'E': 24399,\n       'U\\x14\u00c9': -22539,\n       '\u00ff\ud835\udd93\u00e8\u00a7\\x1a\\\\': 2.2250738585e-313,\n       '\u00c5': -2433,\n       '\\x10': 5.771210259199896e-65},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-525415534, 24329),\n       (-32245, 1183),\n       (-19729, -11325),\n       (-4119, -2_061_995_199),\n       (-144, -2342),\n       (-59, 26393),\n       (355, 9999),\n       (1173, -37),\n       (7353, 20682),\n       (11968, 12694),\n       (1_039_863_678, 111),\n       (2_807_936_685_538_326_037, -18080)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.005169750016648322,
          "overall:gc": 0.0,
          "generate:args": 0.04411787400022149
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878925.300831
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-28589124926486836895534986311067615585, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([1024, 121211, 183300, 205158, 510582]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.1259472439986982e+308,\n        constraints={'min_value': -2.6217940153107204e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.9099752852780166e+307},\n        was_forced=False,\n        index=None)),\n      length=15509,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00a1\u00dee', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\\x17\\x82\u2313\\U0010bc0e\u00b5': -9574},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-31385, 52_121_466_218_618_509_820_978_863_221_716_365_669),\n       (-23, -89),\n       (-21, 53)},\n      slice_comments={(-22719, 27875): '\\U0010cd0b'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1151489094, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-28295,\n        constraints={'min_value': None,\n         'max_value': 14639,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u7057\u7044\u7028\u6fc8\u70a3\u7071\u7026\u6fe0\u7066\\U00040bf8\u6ff9\u70b0\u70a4\u7055\u7091\u7063\u7012\\U000faabd\\U000c1d44\u6ffe\u703a\\U000f1363\u7044\\U00071598\u70b7\u702e',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [28616,\n                  33893,\n                  186578,\n                  198239,\n                  224431,\n                  337123,\n                  372226,\n                  382513,\n                  402943,\n                  465883,\n                  732966,\n                  766484,\n                  789151,\n                  961644,\n                  975709,\n                  1028580,\n                  1051628],\n             ),\n         ),\n         'min_size': 7,\n         'max_size': 107},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x8b!^\\xea\\x9ay\\xa0\\x94\\x10\\x9b\\x03\\xe8\\xd6xB\\x8d;1\\xfe\\xb7x\\x8a\\xd6\\x8cye\\xa3\\xdc&;\\xa2&\\xde\\xed\\x85c\\xbd\\x03\\xab\\xc6\\x10(\\xc2\\xf5\\x97\\nM\\xc7\\x07D\\xb8c\\xeb\\xbaq\"\\x18~\\xf7\\xc7M\\xd5Yh\\xe7\\xea\\xdb\\x9b)S\\xe7\\x1a6\\xfcH{\\xfdXi\\x05\\xc4\\x1e\\x9d`T\\xec\\x81\\t\\x13\\x892J\\'\\xfaP#`\\xde\\xa4\\xae\\x9e\\xcfn\\xb7MB\\x8c\\xc9\\x94`\\xa1\\xa2w\\xea\\xb4}\\x0f\\x05@LQ/^C`\\xd0\\x91!8D/\\xa6\\x1a\\xf2\\xd5\\xcf+\\xbd\\xe2E\\x1e\\xf5\\xce\\x93G\\xd3\\xce\\x96J',\n        constraints={'min_size': 49, 'max_size': 149},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0001c1a5\\U000360ed\\U0006eaf6\\U00070676\ud81d\udf09\\U0005329a\ud81d\udf1e\ud81d\udf3f\ud81d\udef8\ud81d\udf2f\ud81d\udf66\ud81d\udf78\ud81d\udf89\\U0005fc0c\ud81d\udf6f\ud81d\udf75\ud81d\udeb0\ud81d\ude98\\U0005bd10\\U0006fdab\ud81d\ude97\ud81d\udf8c\ud851\udc1a\ud81d\udf59\\U00053760\ud81d\udf26\ud81d\udf05\\U000577b4\ud81d\udf07\ud81d\udee3\ud81d\udf31\ud81d\udf82\ud81d\udf71\ud81d\udf1a\ud81d\udeca\ud81d\udf56\ud81d\udf14\ud81d\udebe\ud81d\udea4\ud81d\udead\ud81d\udee0\ud81d\udf85\ud81d\udf8e\ud83d\uddee\ud81d\udeb8\ud81d\udf7b\ud81d\udf74\ud81d\udeba\\U0006a7af\ud81d\udeab\ud81d\udf73\ud81d\udf6b\ud81d\ude96\ud81d\udf55\\U0003799c\ud81d\udf38\ud81d\udf30\\U00044f58\ud81d\udead\ud81d\udec6',\n        constraints={'intervals': IntervalSet(\n             build_intervals([95887, 470972, 837208]),\n         ), 'min_size': 47, 'max_size': 147},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'P\\x93\\xf99',\n        constraints={'min_size': 1, 'max_size': 101},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7672182679274397},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.6595772089625994e+308,\n        constraints={'min_value': -3914135524217047.0,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.6595772089625994e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-4.576109389442273e+16,\n        constraints={'min_value': -inf,\n         'max_value': 6.411552981776398e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 3.462645494804953e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-33741,\n        constraints={'min_value': None,\n         'max_value': -1530,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=1_713_561_460,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('b', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(6972, -1818)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=11859, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=1.4795218536731109e+308,\n        constraints={'min_value': -4.797179343206566e+16,\n         'max_value': 1.7976931348623157e+308,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.4795218536731109e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.0150774792068738e+308,\n        constraints={'min_value': 0.5,\n         'max_value': 1.7329902978847523e+308,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 9.215316102645523e+307},\n        was_forced=False,\n        index=None)),\n      length=-29463,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 2),\n                                     ('b', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\U0001eb28\u00b1\u00a6',\n      has_discards=True,\n      target_observations={'\u00c4': -0.99999,\n       '\\x81\\U000cda16\u00eb\\x0b': 6318520780329714.0,\n       '\\x00[\u00db\u00ea \u00f4\ud86c\udf65': -378767736},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-75, 12723),\n       (-4, -2_507_542_834_719_262_742),\n       (24923, -9979),\n       (2_721_397_584_373_667_521, -24),\n       (90_764_084_175_923_475_054_802_770_285_061_441_831, -102)},\n      slice_comments={(-101, -44): '\\t',\n       (-156_515_916_811_718_866_624_858_948_892_221_651_220,\n        -28266): '\\U0009fbde\\x1c',\n       (-8_144_935_197_389_723_087, 918_004_545_307_789_606): '8\\x97',\n       (9999, 100): '',\n       (98, -15): '41\\U00042a15\u00df\\U000bde1c\\U0010ea36\u00f2D^',\n       (-21145, 570728197): '\\x9f\\x9c\\U0010d43d\\x989D\u00e4\u00ce\\x0e'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-23211, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\u5690',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [22146,\n                  147809,\n                  271026,\n                  306538,\n                  379470,\n                  505823,\n                  738004,\n                  746572,\n                  751146,\n                  784365,\n                  1030828],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),),\n      length=-112,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('b', 3, 2)),\n                                    (('a', 1, 2), ('b', 1, 3)),\n                                    (('a', 1, 2), ('b', 2, 1)),\n                                    (('b', 0, 1), ('b', 2, 3)),\n                                    (('b', 2, 2), ('c', 3, 0)),\n                                    (('b', 2, 3), ('b', 2, 1)),\n                                    (('b', 3, 0), ('b', 1, 2)),\n                                    (('c', 0, 3), ('a', 1, 3)),\n                                    (('c', 1, 3), ('c', 1, 1)),\n                                    (('c', 1, 3), ('c', 2, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\x12\\U00059566\u00fc\ud868\udeccRp1\\x03\\U000c3f8c\\x05',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\\U0003920f\u00ec',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('', 0, 0, 'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'w\\U0007330b\\tC\u00d6\u00a3\u00dd': 7.236710049183002e-84,\n       '\\U000c4d22\u00fa\u00b7H\\U0010bfde': 0.05,\n       'FALSE': -9007199254740992.0},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-32713, 28),\n       (-28630, -2_119_540_659_360_586_804),\n       (-26068, -25528),\n       (-18964, 520177780),\n       (-17493, -125_557_488_852_854_360_160_570_401_478_029_717_529),\n       (-260, 18742),\n       (-120, 4281),\n       (-43, -3_415_089_759_695_138_355),\n       (4064, 28161),\n       (18140, -56_747_150_844_962_428_157_889_950_180_393_953_922)},\n      slice_comments={(-32169, -4770): 'X\\U00099051a',\n       (-67, 113): 'C',\n       (50, 11439): 'allow_nan',\n       (-26, 65535): '\u00f2\\x17\u00d4\\U000fceb7L\\U0009f2de\\r\\U000dbfcb',\n       (6860, 1024): '\u00ae\\x9b\u00dc'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=9189058451299133042, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xe4G^',\n        constraints={'min_size': 2, 'max_size': 102},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.5953339303220332e+264,\n        constraints={'min_value': 2.933977028479529e+16,\n         'max_value': 2.770119234897575e+264,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.5953339303220332e+264},\n        was_forced=True,\n        index=None)),\n      length=-17875,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 0),\n                                     ('c', 0, 0)),\n                                    (('b', 0, 0), ('b', 1, 1)),\n                                    (('b', 1, 1), ('c', 2, 0)),\n                                    (('b', 1, 3), ('b', 1, 2)),\n                                    (('c', 1, 2), ('b', 3, 3)),\n                                    (('c', 2, 1), ('b', 0, 3)),\n                                    (('c', 3, 3), ('b', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x11\\x89': -54,\n       '': -2.220446049250313e-16,\n       'x&z\\U0009853eXZ\u00b4\\U0005d180\u00b8': 61,\n       'Infinity': -9852432050042220.0,\n       '\u00d0\\x019*}\\x89': -5.607769940338043e+16,\n       '\u00bev\u00ec\\U0002fac2\\x86\u00b9\u00f2&,O,_\u341e\u00af\\xadl\u00d1\u00ac\u43fb\u00f3': -25344,\n       'V\\x88I\\x10\u00b8\\U0003f95a\\\\\\U000b9985\\x9d\\x85': 7444,\n       '\\x1f\u00eb\u00c2\\U00051384\u00ec': -5.056453068156278e+40,\n       '\u00a6\\U000a1bb9\\U000d8363G': 22295,\n       '\\U00102dde\u00e38\u00a2': 6.664585244349298e+207,\n       '\u00f9\u00fc': 4.544241656933523e+16,\n       'delete': -1.843305286948427e+16,\n       '\u00d9\\U000458c8\\x15\u00c8\u00ae': 1.1754943508222875e-38,\n       '\u00fd': struct.unpack('d', struct.pack('Q', 0x7ff8000000000001))[0],\n       '\u00c0\\U000c4e62': 0.5,\n       '@{\\U000f006b\u00det\\x91': -28_643_644_449_691_394_447_708_320_134_030_313_355},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-20497, 30434), (21828, -17926)},\n      slice_comments={(-16906, -22381): '\\x99', (10919, 4151): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-1013472867, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U0003f9c9\\U0003f991\\U0003f9ce\\U0003f949\\U0003fa05\\U0003fa16\\U0003fa23\\U0003f9e4\\U000a4321\\U0003f978\\U000bb132\\U000c1b8f\\U0003f97c\\U0003f9d6\\U0003fa2b\\U0003f9bd\\U0003f9fe\\U0003f956\\U0003fa40\\U000420f8\\U0003f9fa\\U0003f9e8\\U0003fa0d\\U0003f95a\\U0003fa14\\U000ba0d7\\U0003f9ac\\U0003fa00\\U0003f9b0\\U0003f99e\\U000c653d\\U000af8bf\\U0003f94b\\U0003fa37\\U0003f952\\U0009e0f0\\U0003f951\\U0004cc82\\U0003f966\\U000a4345\\U0003fa3f\\U0003f970\\U000c8f2a\\U000b765b\\U000b888b\\U0003f9d7\\U0003f9e7\\U0003f995\\U0003fa0f\\U0003f9d3\\U0003f94a\\U0003f94d\\U0003f9bd\\U0003f99f\\U0003f98e\\U0003f9d7\\U0003f951\\U0003f9b0\\U000bb835\\U0003f981\\U000bc9ae\\U000c0e08\\U0003f9b3\\U0003f9c5\\U0003fa2a\\U0003fa2b\\U0003f985\\U0003f957\\U0003f97e\\U0003fa17\\U0004afe5\\U000bd70c\\U0003f9f8\\U0003f9d6\\U0003f9a7\\U0003f988\\U0009ac60\\U0003f9e6\\U0003fa14\\U0003f985\\U0003f9a3\\U0003f965',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [260422, 322371, 378272, 406796, 625476, 864990, 956489],\n             ),\n         ), 'min_size': 36, 'max_size': 136},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-37,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -11,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=26795,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 2, 3),\n                                     ('b', 1, 2)),\n                                    (('c', 3, 0), ('c', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '\u00ec\\x84\\U0009c7d5\u00ac\\U000977ab',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\\x8a,\\U00056066\ud84f\udc43',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('\\x12\u00cc-',\n                                     [UnicodeEncodeError('unknown encoding',\n                                                         '',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\ud859\ude0c\\U000486e1',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      ExceptionGroup('\\U00046608b',\n                                     [UnicodeEncodeError('unknown encoding',\n                                                         '\\x8b',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='>',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-865445705, -3251), (-22827, 2693), (9799, 30333)},\n      slice_comments={(-123, -10911): '\\x9f\\x15\ud820\udfdaH',\n       (-98, -16364): '\u00b7\u00a9\u00c1~\u00e3\u00a3#',\n       (1_903_597_924, 5): '\\U000de5a4'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1864672640, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=False,\n        index=None),),\n      length=-14325,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('c', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='Cm\\U00084783Y\\x18\u00f4n~\\n\\U00035c6d\\U0004332c\\x0f\\x98\\U0003f23b)E\\x9a4\\x03\u00a3',\n      has_discards=False,\n      target_observations={'\u00dd\\x01\\U000b0a71': -50_085_495_928_028_650_631_488_559_671_279_201_493,\n       '\\U0004c94e\\x14Q\\U000da18e\\U000ca9da\u00af\u00b7\\U0005e466\\U0003c71a\u00b0\u00fa\\x02\u1131!\\x1e/\u00e1\u00fc-\\x8c\\x91mk\u00ae': -3882,\n       '\\x80': 270_669_577_017_582_049,\n       '\\n0V\u00b1\\U000d77e3\u00c1': 0.16856508321870733,\n       '|L': 15166,\n       '\\U000b58d8n\\x7f\\U000f4e0e\u00a7\u00c6\\x88\u00ca\u00e4\\r_\\U00014ec7\"\u00e8\\x00@': -4.67521124332163e+16,\n       '47\\U00092026\u00c3\u00aa\u00a8\\U000a7f90\\U000b406f': 10134,\n       '\\x00\\t\\x81\\x06\u00f8\\U0009e8b6\\U000d5995\u3ea6\\x94:\\x87\"\u00baG\u00ac\\x96H\\x06': -1_661_694_911},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-848, 25)},\n      slice_comments={(-42,\n        -32_945_576_002_297_130_986_894_281_554_370_879_025): '\\x8d\\U00090be9\u00b8\\U000a6257\u00e4rI'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=19518, context=(), group_elems=()),\n      nodes=(),\n      length=-967826640,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 2, 2),\n                                     ('b', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='f,^g\\x87',\n      has_discards=False,\n      target_observations={'': 10873,\n       'v\\U0001cea9': -7_066_957_999_484_782_202,\n       '\u00cf': -37,\n       'm': -3.673709369775187e+16,\n       'hg&c': -88,\n       '\u00b0\\x83\\x15z\\x95n\\x91\\x12\ud1d9\u00f1u': 0.05,\n       '\u00fa\u00ea\\U00041f7c': 4.7200294163254456e+16,\n       '1\u00c2\u00aa\ud876\udfa0qU\\x12\\x00N\\x94\u00f5\u00be\u00f7\u00bf\\U0006b123': 15808,\n       '\\U00052c0b\\U000cf95c\\x03\\U000456ba\u00a1a': 19401,\n       '\\U0005388f\u00fa/': 3.1931435125368148e+16,\n       '\u00db\u00a9t': -5998,\n       '\\U0005ce91$': 39,\n       'R\\n': -inf,\n       ';': 1.0974720163453125e+282,\n       \"hO\u00d1\\x99g\u00b5\u00f9\u00ec\\x82_\u00e5\\U000c13ee\u00cb\u00ccv\\x1f\\U000a96b8\\x94u\\U000bc56c\\x82#\u00ca\\x00\u00ce\\x17\\x10'\u00f1\u00c7B\u00d7\u00df\\x1d\\U0007ec10\u00c6\u00f6\\x1a\": -2.003252463696217e-281,\n       '\\x87\\x82\u00b5\u00a1\\U000a8c6b\\x8e\u00b0\\x9b': -1.5223255072340003e+294,\n       '\\x8d\u00a5*\u00e5\\x9b\u00e9?\u00c5eK\u00bb': 2924380503824553.0,\n       '\u00e0\\x1a\\x03': 178,\n       '\\U000d0a73\\U00058f9a\\U000d5ecd': 3300,\n       '\ud835\udc7b\ud835\udc89\ud835\udc86 \ud835\udc92\ud835\udc96\ud835\udc8a\ud835\udc84\ud835\udc8c \ud835\udc83\ud835\udc93\ud835\udc90\ud835\udc98\ud835\udc8f \ud835\udc87\ud835\udc90\ud835\udc99 \ud835\udc8b\ud835\udc96\ud835\udc8e\ud835\udc91\ud835\udc94 \ud835\udc90\ud835\udc97\ud835\udc86\ud835\udc93 \ud835\udc95\ud835\udc89\ud835\udc86 \ud835\udc8d\ud835\udc82\ud835\udc9b\ud835\udc9a \ud835\udc85\ud835\udc90\ud835\udc88': 0.5,\n       '\uc15e': nan,\n       '\u00b8\\U00078cbd\u00bb;.\\x87}\u3cdd\u00cdO/c\\x83': 74,\n       '\\x8b\u00eb-\u00d6>\\x069\u00c7': 2.693274520834445e+119},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(300, 101),\n       (30473, 4701),\n       (3_681_330_782_878_861_797, 28342)},\n      slice_comments={(-954093538, -47): '0',\n       (29764, -416401875): '\\U0007ecf0|',\n       (23039, -6687): '\\x19\u00fc\\x07',\n       (12946, 115): 'S\u00bb\\x10'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=8324631115759679013, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=3.402823466e+38,\n        constraints={'min_value': 1.1526737799875146e+16,\n         'max_value': 3.402823466e+38,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.5},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.05},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x8eD\\xf7',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=24724,\n        constraints={'min_value': 23702,\n         'max_value': 29166,\n         'shrink_towards': 0,\n         'weights': {23703: 0.13120003810302677,\n          27172: 0.013120003810302677,\n          26219: 0.124087814692024,\n          25079: 0.06302918473017327,\n          24724: 0.237812964593045,\n          23899: 0.22617040383544415,\n          26882: 0.1354383926040444}},\n        was_forced=True,\n        index=None)),\n      length=84,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 1),\n                                     ('a', 2, 2)),\n                                    (('b', 0, 1), ('c', 1, 1)),\n                                    (('b', 0, 3), ('a', 1, 2)),\n                                    (('b', 3, 1), ('c', 1, 3)),\n                                    (('c', 0, 1), ('a', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='^\u00c8e\\x10\\U000a74b0',\n      has_discards=True,\n      target_observations={'F\\U000ab304\u00ba\u00aa\\U0001527a[t\\U000f6b22': -5.4928803892011e+16,\n       'h\\x1fX': 5.169043145333085e+16,\n       '': -7338,\n       '\\U000e4e49\\U0004eb87`M\u00dc)': 6.3999373536087915e-130},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-5738818432409152242, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'ZwRU\\xec\\x06!\\xe4\\x0e',\n        constraints={'min_size': 4, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.4804676841037102},\n        was_forced=True,\n        index=None)),\n      length=9999,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('b', 3, 1)),\n                                    (('a', 1, 2), ('c', 0, 0)),\n                                    (('a', 2, 3), ('a', 3, 1)),\n                                    (('b', 3, 2), ('b', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00f9\u00c2', 0, 0, 'reason'),\n      expected_traceback='\\U000d65cbX\\U000ca95c\u00b1\u00eaa`',\n      has_discards=True,\n      target_observations={'lorem \u0644\u0627 \u0628\u0633\u0645 \u0627\u0644\u0644\u0647 ipsum \u4f60\u597d1234\u4f60\u597d': 1.401298464324817e-45,\n       '\ud83c\udffb\ud83d\udc4d\ud83c\udffb': struct.unpack('d', struct.pack('Q', 0xfff8000000000001))[0],\n       '\u00aa': 8.752935057511298e-21,\n       '\\x86': -1.594271829956364e-198},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-26_382_173_781_471_010_616_187_569_167_694_390_030, 30514),\n       (-7_969_065_457_761_232_330, 1000),\n       (-1_321_713_689_421_448_374, -31330),\n       (-32604, -115),\n       (-28143, 300),\n       (-26906, 23001),\n       (-20811, 17825),\n       (-16442, 24377),\n       (-15214, 18803),\n       (-8516, -1_547_680_110),\n       (-8298, 28675),\n       (-4955, -20625),\n       (5, -6212),\n       (40, 117),\n       (89, 125),\n       (467, 23),\n       (3124, 16712),\n       (3525, -1_843_862_998),\n       (14256, -81),\n       (26597, 2_887_307_815_220_492_189),\n       (31356, 512),\n       (87737691, -80)},\n      slice_comments={(-46, -6101): '*W)T\\x1c\u00c6\\x0b\\x0f\u00d0\\U000c6d18\u00cd\\x1c\u00b9W\u00d7\u00c9?\u00aa',\n       (-75, 11756): '\\U000a33e5;\\x05\u00ce{-\\U0002fc66e0\\x94\u00f1_:\u00d5v\\U0007c5dc\u00a8'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.013120457995682955,
          "overall:gc": 6.716698408126831e-05,
          "generate:args": 0.09610083210282028
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878907.4305449
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-70, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b':\\x90\\xde6\\xd0\\xdcj\\xa1;\\x92\\xc9O\\x17\\xcf\\xb3\\xeaq\\x8c\\xa1\\xd2\\x9c\\xdcUs\\xfd;\\xbbX\\xfb\\xed\\x9e~\\x9a#\\x13Z\\xaf\\xa8\\x12\\x1a\\x8b\\xbb\\xd7l\\x91\\xd4f@\\xc1|R\\x03\\xa7B\\xeb;',\n        constraints={'min_size': 44, 'max_size': 144},\n        was_forced=False,\n        index=None),),\n      length=28537,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('a', 2, 0)),\n                                    (('a', 3, 3), ('a', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\x06',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'': 1.8190577351315904e+63,\n       'Y': 1.3626441698466728e-220,\n       '\u00bdp\\U0010632d\\x88\\x1f\u00d7': 0.0,\n       '\\x9bt\\U000b795a\\x93': -5.072886494806061e-69,\n       '\u00f0\\U000bd053\\x87n\u00b8.\u00c3\u00aa\\U000a2993\u00e2\u00ea\\U0010b3d6#}\u00a5K\u00f6\u00ae\\x85': 750_606_721_861_129_684},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(2022,\n        -126_025_480_219_130_122_483_906_660_429_629_988_868)},\n      slice_comments={(-41, -676149417): '\\x97\\U000f0a6b\u00c9\\U000a1d83',\n       (1_759_184_600, 71): '\\x0b',\n       (3201, -17642): '\u00afi\\x95\\U00106eb8\\x8c',\n       (-26522, -22419): 'r\u00e2o\\U00049eda\u00bb\u00a5x',\n       (3152, -6083): '\\U00048e5e\u00bbi\u00f48\u00cd',\n       (65535, 7057): '',\n       (-68,\n        -8_835_234_699_559_895_463): '\\x0c\\U000e0d3e\\x10s!\u00fc\\U000f87ef\u00aa\\U000f8faf\ud84f\udd24\u00d7\u00e8N\u00ac\\x961'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.00045304204104468226,
          "overall:gc": 0.0,
          "generate:args": 0.003938500944059342
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878936.639179
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "",
        "representation": "",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x106d0c800>, min_size=0, max_size=inf).map(tuple), length=one_of(nothing(), nothing(), integers()), has_discards=one_of(nothing(), nothing(), booleans()), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason')))), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text()))).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from integers(0, 1114111).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {},
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 3,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 3,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878967.903455
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=24915, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\ud83c\udffb\ud83d\udc4d\ud83c\udffb',\n        constraints={'intervals': IntervalSet(\n             build_intervals([12597, 432799])),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=579,\n        constraints={'min_value': 512,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=-15346,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 0),\n                                     ('b', 2, 0)),\n                                    (('a', 2, 2), ('a', 1, 3)),\n                                    (('a', 3, 1), ('b', 3, 1)),\n                                    (('b', 0, 1), ('a', 2, 1)),\n                                    (('b', 1, 1), ('a', 3, 2)),\n                                    (('b', 3, 1), ('c', 0, 0)),\n                                    (('c', 1, 3), ('a', 1, 2)),\n                                    (('c', 3, 2), ('a', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00e6\u00bdT',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-18, -4), (29574, 114), (31102, -102)},\n      slice_comments={(-19138, 23629): '\u00bf\\r\\x89', (9999, -21): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=77, context=(), group_elems=()),\n      nodes=(),\n      length=17516,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\u00a5j\\nb3;\\U0005f4bd\\x12g\u00ba\u00c4\u00baIX',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='o;',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-10930, 3437), (22, 24320)},\n      slice_comments={(71, 24092): '}x\u00ccP\u00c4*)\\x82\u00cc', (-7155, -19317): '\u00ec'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1000, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7719269991561478e+308,\n        constraints={'min_value': 3.186610230261882e+276,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.7719269991561478e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1030067582685268.0,\n        constraints={'min_value': -3.2712404283479412e+16,\n         'max_value': -0.5,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.05},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000436f6\\U0004376d\\U00043688\\U000436d7',\n        constraints={'intervals': IntervalSet(\n             build_intervals([276091, 428123, 903344, 974012]),\n         ), 'min_size': 1, 'max_size': 6},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0004fd4c\\U0004fd73\\U0004fcfa\\U0004fcff\\U0004fdaa\\U0004fcbe\\U0004fcd3\\U0004fcf8',\n        constraints={'intervals': IntervalSet(\n             build_intervals([326841, 691972]),\n         ), 'min_size': 6, 'max_size': 106},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0003c3e1\\U0003c511\\U0003c455\\U0003e4f3\\U0003c3e0\\U0003c412\\U0003c400\\U0003c3c5\\U0003c38b\\U0003c45c\\U0003c42f\\U0003c42c\\U0003c3c1\\U0003df64\\U0003c45e\\U0003c862\\U0003c397\\U0003c394\\U0003c369\\U0003c42b\\U0003c41e\\U0003c3a6\\U0003d3ec\\U0003c3e1\\U0003c3e0\\U0003c447',\n        constraints={'intervals': IntervalSet(\n             build_intervals([246626, 256581]),\n         ), 'min_size': 17, 'max_size': 117},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([276560, 739975]),\n         ), 'min_size': 0, 'max_size': 22},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00076434\\U000419bf\\U00041985\\U00078047\\U0007ba2a\\U00041938\\U0004193c\\U0004199f\\U000418fe\\U0004197f\\U00041940\\U0004191e\\U000419a3\\U0004197f\\U000419b0\\U00080ff3\\U000419d7\\U00041939\\U0004193c\\U000419ee\\U000419a2\\U00041938\\U000808cb\\U000419f2\\U00041981\\U00041975\\U000419ad\\U000419f0\\U0004195b\\U000419b2\\U000419db\\U000419a2\\U00041940\\U00041957\\U00084bb6\\U000418fc\\U00082582\\U000419f3\\U000419dc\\U00084701\\U000419a6\\U00041903\\U000419f1\\U0007c0b8\\U000780a4\\U0006fa32\\U00041936\\U0004190e\\U0004198d\\U000419da\\U0007acc1\\U00041925\\U0004196c\\U0004195a\\U0004197b',\n        constraints={'intervals': IntervalSet(\n             build_intervals([268532, 291320, 454460, 546329, 1114111]),\n         ), 'min_size': 34, 'max_size': 129},\n        was_forced=False,\n        index=None)),\n      length=-1984,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 0, 3),\n                                     ('b', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\U000820a4\\n\\x05\\ue12f\\x8a\u00a8\\x88\u00aa%\u00c5\\x95': -2.369602960404283e-133,\n       '\u2e0e': -3.7844459154390376e-298},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-61, 1024),\n       (-60, -15412),\n       (-16, -8946),\n       (106, -82),\n       (4142, -3951),\n       (17278, 23829),\n       (24398, 9439),\n       (30125, -90),\n       (30996, -7040),\n       (1_862_359_529_570_349_652, 76),\n       (4_969_055_453_293_872_858, 22276)},\n      slice_comments={(52, 14): '\\x06\u00d3\u00a2\\x0c\u00e4\ud867\udef5',\n       (62, -8_531_902_238_123_862_754): ',./;\\'[]\\\\-=<>?:\"{}|_+!@#$%^&*()`~'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0016948750126175582,
          "overall:gc": 0.0,
          "generate:args": 0.034279418003279716
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878932.967524
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.358295938000083e-05,
          "overall:gc": 0.0,
          "generate:args": 4.037498729303479e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878955.59911
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-41, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=1.1171509375585517e+221,\n        constraints={'min_value': 2.2277610622927263e+140,\n         'max_value': 9.469266693324081e+307,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 6.907945477666012e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 3.923719559981501e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 7.340749096239798e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [512,\n                  67172,\n                  129973,\n                  135756,\n                  281965,\n                  325317,\n                  360929,\n                  421927,\n                  486146,\n                  502449,\n                  536822,\n                  797270,\n                  798135,\n                  829715,\n                  864137,\n                  885575,\n                  953038,\n                  981630,\n                  1010777],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None)),\n      length=-9474,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('b', 0, 2)),\n                                    (('b', 0, 1), ('c', 0, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('g\u00a5',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '\\U00090bf7\\U00048738\\U00078949',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('\\x15iu', 0, 0, 'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('D', 0, 0, 'reason')]),\n      expected_traceback='\\x8f',\n      has_discards=True,\n      target_observations={'\u00fd': -1670,\n       '': 0.0,\n       '-\"': -3.362647056322534e+70,\n       'I\u00f1\u00b8\u00fb\u00d8\\U00079682xJ\\x17\\U000aa5223\\U0006e46e\\U000c0478,C\u00f9\u00fe': -5.0285955166103666e+181},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-15900, 36),\n       (-7621, 16),\n       (-3836, -109),\n       (-37, -327130095),\n       (-27, 7975),\n       (-15, -18215),\n       (4111, -28705),\n       (6154, 21)},\n      slice_comments={(-27191, -7): \"M\\x0bX'5\",\n       (-32562, 5144): 'A\\x8f\u00de\\U0001ceaa\\U00039d4e\\x8e',\n       (-7_164_590_427_424_277_255, 125): '`\\x82\u00dc\u00f3',\n       (10662, 884): '',\n       (106, 7_508_111_018_281_074_333): '\\U0005db10.\u00edf\u00e2',\n       (-49, -2229): '\\U000691d1W\\x0f\ud85f\ude28',\n       (59, -11839): '\\x10',\n       (17325, 22312): '',\n       (84, 111): '\\x1c\u00cd\\n\u00d4\u00b2\u00f1\u00b4?HO\ud596\\U000ddb5e\\x08\u00a3',\n       (84_069_905_102_504_260_240_356_569_947_568_336_006, -242): ')\u00d6'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0004982089740224183,
          "overall:gc": 0.0,
          "generate:args": 0.010060459026135504
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878918.939861
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-1441503370, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=False,\n        index=None),),\n      length=43_349_573_659_283_205_572_697_078_678_751_007_865,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('c', 2, 2)),\n                                    (('a', 2, 0), ('c', 2, 1)),\n                                    (('a', 3, 0), ('c', 1, 3)),\n                                    (('b', 2, 1), ('a', 0, 1)),\n                                    (('c', 1, 2), ('a', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\u00bb\u00ba\u00f2\\U000c90b0\\x13',\n      has_discards=True,\n      target_observations={'': 115,\n       '\u00fe\ud873\udd8f\\x1bjO\u00d3;': 49,\n       '\u00d9\u00e9\\U00080de1BK\u00e4': -31871,\n       '\u00cb\u00a2<\u00bf\u00d5\\x95v\\x04\u00f1\\U000b9336\\x0f\u00dd)\\U000b34f6\\U000a0ae3Q\\x04k\u00a6\u00a4': -8840},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-109_210_340_794_232_396_307_549_053_712_873_346_433, 126),\n       (-91_324_654_397_459_105, -116),\n       (-18515, -109),\n       (-1414, 9999),\n       (-64, 29105),\n       (-15, -18642),\n       (32, 115),\n       (61, -1_759_637_949),\n       (3470, -22389),\n       (8235, 21366),\n       (12793, 1_463_956_064),\n       (12897, -104),\n       (22427, 404)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='verified')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0007106249686330557,
          "overall:gc": 0.0,
          "generate:args": 0.004037292092107236
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878922.826984
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=7295, context=(), group_elems=()),\n      nodes=(),\n      length=11705,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 2),\n                                     ('c', 3, 1)),\n                                    (('c', 0, 2), ('a', 2, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         'T\\x803\u00df\\U000891e7',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-28879, 5420),\n       (-25292, 5_031_851_905_003_561_537),\n       (-20249, -10632),\n       (-16796, 601425801),\n       (-14266, -26187),\n       (1000, -42),\n       (29146, -1_083_818_122)},\n      slice_comments={(-65, 3331): '\\U0005f96dJ|',\n       (-5606,\n        111): '\u00e2\u00a2\\U0003f1266Q\\x06\\U000670d7\\x98\u00fc\u00ee\u00fd\u00ac\u00cc\\x02\u00dc\\U0010b99d\u00a8fv\\x0b\\U00071969\\x81\u00be'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00037979200715199113,
          "overall:gc": 0.0,
          "generate:args": 0.0023622100125066936
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878934.1492538
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-31474, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-30173,\n        constraints={'min_value': -31450,\n         'max_value': -26149,\n         'shrink_towards': 525531462,\n         'weights': {-30173: 0.6101691540457294}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'q',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-62,\n        constraints={'min_value': None,\n         'max_value': 73,\n         'shrink_towards': -36_965_076_493_489_606_718_773_144_594_409_327_789,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=82,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 1),\n                                     ('c', 3, 3)),\n                                    (('c', 1, 2), ('b', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'~\\x86': 8.562079500477361e-18,\n       '\u00ba\\x1eT\u00c5\\U0009e7b7\\x1e/\u00e8': -9007199254740992.0,\n       '\\U0003a30b\u00fa,\\U000cff1c>': 3.9060814219192776e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-7_468_910_427_951_840_542, 97),\n       (-9210, -18712),\n       (-23, 20754)},\n      slice_comments={(87_610_422_784_486_101_628_777_622_831_272_966_034,\n        6657): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=84, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\ud855\udfd4\u01d7\ud855\udfde\u019b\u01a3\u01a6\u01ea\ud856\udc21\u01b6\u01ee\u01ef\u01cc\u01fa\u0194\ud856\udc07\ud856\udc0b\ud855\udffb\ud856\udc1a\u01f1\u019f\\U000376fb\ud856\udc1b\ud856\udc09\ud855\udfa4\u01cd\ud855\udf9d\\U000f67e1\ud855\udfe7\u01f7\u01ec\u01ef\\U000ffabd\ud855\udfd9\ud856\udc05\ud855\udfd0\u01f7\u01ce\u01f2\\U000ee615\ud855\udff7\u01b7\u01ac\ud856\udc0a\ud855\udf97\ud856\udc0a\ud855\udfed\ud855\udfeb\ud855\udfe2\u01c8\ud855\udfac\\U0002fb4a\u01b2\\U000e5b9b\ud856\udc18\ud855\udfc4\u01b6\u01b3\u01e6\\U000f2d8f\ud855\udfe4\ud856\udc02\ud855\udfad\u0198\ud855\udfa2\ud856\udc1d\ud856\udc22\u01c7\u01cd\u01cd\u01fd\u01b1\u01ac\ud855\udf9c\ud855\udfb9\ud856\udc1e\ud856\udc22\u01a1\u01d2\ud855\udfd6\u01b9\ud855\udfc0\u01a1\ud855\udf9d\u01eb\u01a4',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [404,\n                  512,\n                  153494,\n                  232404,\n                  303713,\n                  360266,\n                  445263,\n                  478940,\n                  520603,\n                  520793,\n                  777757,\n                  778683,\n                  911044,\n                  1055445],\n             ),\n         ),\n         'min_size': 37,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),),\n      length=-60,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('c', 3, 0)),\n                                    (('a', 0, 2), ('c', 3, 3)),\n                                    (('a', 2, 3), ('a', 1, 3)),\n                                    (('a', 3, 0), ('c', 1, 1)),\n                                    (('b', 1, 3), ('b', 0, 0)),\n                                    (('b', 1, 3), ('c', 0, 2)),\n                                    (('b', 3, 2), ('b', 0, 1)),\n                                    (('c', 0, 2), ('c', 0, 1)),\n                                    (('c', 3, 3), ('c', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\\x91': 4.4394495143594504e+16,\n       '': -inf,\n       \"'\\U000cf140\": -5.404143720078935e+251,\n       'h\\x04\\x86': 5.556047160689088e+16,\n       '\\U000e1be8\u00fd': 1.046979906080204e+22,\n       '\"c': 10358,\n       '\\x10e\u00ab}>\\x82': -1.3510851586035791e-95,\n       '\u00be\u00f8\\U000dcc8b\u00d6\u00ee\\x17\u00b1\\U000cb9a8': -1188,\n       '\\U0005a6dd\\U00089858\\x8d\\U000939c4\\x19/o\u00b2\u00db': -7.60705217419487e-121,\n       't\\t\u00a6': 2_805_088_435_047_713_127,\n       '\u00c3': 104,\n       '[\\U000fe2a4\u00d6\u80c0o\\r\\U000abf1d\u00f0^\u00b7': -12405,\n       'Uw\\x8f\\x18\\U0001613a': nan,\n       'X)\u00c8': 5.280183720119124e-175,\n       '(': 1.192092896e-07},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-8264, -78), (-35, 2_005_909_365_268_148_792), (89, 11353)},\n      slice_comments={(0,\n        -22691): '\\U0004cb33\\x8a\\x83\\U000e0074\\U00080b05\\U000e98ce\u00a5\u00e9n|\u00e6\\x1e1',\n       (-31251, 20): 'R',\n       (-58, 31661): '+Q\\x0f\u00feM\u00fbd\\x9f\\U000c7871<Sw\u00e9',\n       (-4267,\n        -814): '\u6c10\u00cf\u00f8\\U000d7e43\\U000d64bf\u00ba\\U000d9b06n\\U00107367\u00ba\u00cc\ud880\udc7f\u00a8\u00e4\\U00046d6a',\n       (115, 18895): '4\\x1b\u00dbU\\U000e52e6y',\n       (-69, 23220): 'K',\n       (13453, -14346): '\\x18w\u00fb',\n       (29179, 8896): 'INF',\n       (10178, -56): '\u00f6\u00eb\u00d1\u00b9\u00d8\\x8f\\x16\\U0003aa41\u00c5e/\\U00036657\u00bb^\u00df\u00caaZ\u00c7\u00ac',\n       (-31483, 512): '\ud83a\udd2f^',\n       (103, -29171): '',\n       (24066, 1024): '\\x89\u00ed\u00ebw\u00fd',\n       (-3199, -15557): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-10, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.9224574914903754},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-4_288_744_972_368_847_675,\n        constraints={'min_value': None,\n         'max_value': -25846,\n         'shrink_towards': 21739,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=29488,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 25612,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-1558,\n        constraints={'min_value': None,\n         'max_value': -1474,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=540128821,\n        constraints={'min_value': 540121812,\n         'max_value': 540139233,\n         'shrink_towards': 11935,\n         'weights': {540136501: 0.13573282824622654,\n          540126207: 0.3331194396634733,\n          540128821: 0.3353752316980009,\n          540133553: 0.0903658770276474,\n          540132064: 0.06982278353283877}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000d610b\\U0005f123\\U0005f11c\\U000b8b3c\\U00090e95\\U0005f154\\U0005f18c\\U000bac17\\U0005f150\\U0005f10a\\U0005f197\\U0005f108\\U0005f15f\\U0005f182\\U0005f1db\\U0005f143\\U0005f16d\\U0005f198\\U0005f13d\\U0005f101\\U0006b7ed\\U0005f188\\U0005f1ba\\U000b887d\\U0005f1dc\\U0005f166\\U0005f14e\\U0005f195\\U0005f126\\U0005f16e\\U000b63d4\\U0005f1cb\\U0005f171\\U0005f12d\\U0005f1d3\\U0005f140\\U0005f10d\\U0005f1e7\\U0005f1d3\\U0005f1db\\U000b7d78\\U0005f142\\U0005f164\\U0005f1b7',\n        constraints={'intervals': IntervalSet(\n             build_intervals([389354, 902456]),\n         ), 'min_size': 41, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 3.393969491763295e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.927736118983894e+222},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-114,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -10946,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.1769669178643121},\n        was_forced=False,\n        index=None)),\n      length=-63,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('b', 3, 3)),\n                                    (('a', 1, 3), ('c', 3, 2)),\n                                    (('a', 3, 1), ('b', 3, 1)),\n                                    (('b', 0, 3), ('b', 0, 2)),\n                                    (('b', 2, 1), ('b', 0, 0)),\n                                    (('c', 0, 0), ('c', 3, 0)),\n                                    (('c', 3, 2), ('a', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00a3\u00af',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='z',\n      has_discards=True,\n      target_observations={'\u00bb\u00c2\u00a9\\U00069076W&\u00b4': -9706478991794774.0,\n       '\\x07\\rf\\n\u00d6s': -inf,\n       '\\t\u00af\u00dc\ud804\ude09\\U000673af\\x15\\x92': -1938,\n       '\\x04\\U000622a9\\x04\u00b8': -3.862494159298767e+99,\n       '@': -113_409_240_945_252_787_899_712_382_197_066_531_511,\n       '\\U0005ec27f\u00dds\u00dc\ud81a\ude20\u00d0\\U0010d2a1': -2.6068308047313686e-52,\n       '\\x97\u00c1\u00cc\u00f1\u00e6X\u00a1\u00db\u00d1\u00d6\\x96\\U000aec4e': 56,\n       '\u00abK\\x08\\U0007f9da\u00fd!\u00b9\u00e2rU,>\\x05\ud862\udcd5\\U000d5124l\u00f8\\x0c': 0.5,\n       'S\\x7f': 3031,\n       '\\U00071542\\U00016cb8\\U0007f1f5': -7278,\n       'NKD\\x9a\u3921\u00b1|\u00b0\\U00087b32\u00b1\u00be!\\U00100db3\\x80!\\r\\U000b7a49\\U000fc953\u00c4\u00b7\\t7\u00e4': -23932,\n       '+': -17805,\n       \"o\u00ac\\x90\u00b9'M\\U000e49ac\u00de\": 22425,\n       '': -3.1095764354785556e+16,\n       '\\x15\\U00098c13': 8861,\n       '\\x0f': 110},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-184647987, 25609),\n       (-26952, 21509),\n       (-26811, -61),\n       (-26396, 13),\n       (-25983, 25),\n       (-23762, 1_701_906_142),\n       (-10216, 87),\n       (-8406, 90),\n       (-54, 228494422),\n       (-44, 20253),\n       (-41, 97),\n       (-13, 23301),\n       (53, -30),\n       (73, 19363),\n       (82, -4_270_809_675_135_751_171),\n       (91, 6_585_000_545_696_545_905),\n       (124, -29512),\n       (404, 7848),\n       (1000, -54),\n       (3877, -23991),\n       (4374, 9979),\n       (22768, 114),\n       (23192, 21),\n       (27261, 93)},\n      slice_comments={(-66, 572): '\\U000c87bfs\u00d4\u00fa\\r\u00d5\u00e0\\x12',\n       (74, -27102): 'false',\n       (-85,\n        27454): '\\x8a\\x98\\x02\u00f5\u00ab\u00f8\\U000a1d64YA\\x95q\u00f0\\U000f6ea6\\U0001a5ba\u7da8\u00ea\\x052\u00fa6r',\n       (4, 10748): '',\n       (2_769_420_716_167_296_260, 9999): 'u*Z9\\U00072a99',\n       (-102, -1_611_098_235): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=20539, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=4.798938220648267e+307,\n        constraints={'min_value': 1.4045740591967095e+159,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.05},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.054682664980323e-161},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000b967f\\U000cf0a1\\U0001bb1e\\U0001bb1f\\U0001ba78\\U0001baad\\U0001bb38\\U0001bb53\\U0001bad3',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [113252, 169335, 445135, 849713, 1012732, 1083198],\n             ),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.5},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.1582638372340268e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.08282232125535406},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"\\xe6z\\x04\\x8e\\xf1\\x86\\xd2y\\x0e\\xf4\\xceB\\xcd\\x100\\xcf\\xf8~]os\\xbd\\xa7H\\xb09\\xbfwG\\xb6{\\xa5#.F]}Y\\x13IYT\\xd0\\xddn\\x17\\x19\\xcaqO\\x7f=$'R\\x8d!\\xf1\\xd4\\xd1\\xf4\\xfebk\\x86\\xc0\\xdf\\xb6\\x97X\\x10\\xc4\\xb7\\x84\\x8c\\x03\\xd4k96\\xa3\\x8bN\\xe5\\x1a\",\n        constraints={'min_size': 44, 'max_size': 144},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.1892956345460242e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -6.427691564994785e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.0263740470962702e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1.6300581968966747e+80,\n        constraints={'min_value': -6.95508323341879e+80,\n         'max_value': 2.89814016454712e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 7.956256547580608e+79},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=2399,\n        constraints={'min_value': 2153,\n         'max_value': 4142,\n         'shrink_towards': 0,\n         'weights': {2240: 0.0008830418306020635,\n          3222: 0.005521033982818625,\n          2680: 0.004139344318455345,\n          2812: 0.0058914392859147,\n          3899: 0.0062776105120848046,\n          2632: 0.0032288052222407,\n          3477: 0.002580139926549681,\n          3841: 0.0032288052222407,\n          3091: 0.0027840721787712234,\n          2419: 0.00032288052222407003,\n          4141: 0.0036180396724456053,\n          2891: 0.005964925893794532,\n          2879: 0.004139009553539505,\n          3525: 0.0021525368148271333}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u02a4\u023d\u02c4\ud84e\ude49\u02ec\u02d4\u02ca\u02ba\u02b8\u022f\u02fd\u02d1\u021d\u02e5\\U0009445b\u022e\u9cf7\\U000efc0c\\U00090502\u022b\u022e\u020f\u0274\u0279\u0211\u029a\u02f7\\U0001a6d7\u028d\u02b4\u02d3\u028d\u02df\u0214\u029c\u02f3\u021c\\U00012a67\u02fa\\U00019041\\U000b47ab\u0260\u02f6\u02a2\u0220\u025d\u025c\u02a3\u0229\u024d\u02b8\u028b\u0215\\U000cf748\u02e4\\U000471ce\u02dc\u0215\u027a\u0288\u0266\u02b9\\U000d1d04\u02f4\u0232\u0243\\U000cfd9e\u02c6\u0264\u02c3\\U0003db09\u02e4\u029d\\U000d914f\u0217\\U0005159e\\U000c9f0e\\U000dbbf9\u027e\u0296\u02e7\u02f5\u02de\u027f\\U00044666\ud876\udc96\u024a\u0204\u02b3\u02f4\u02a5\u0293\u029c\u02a5\u02b9\u020c\u0263\u02e1\\U000d98ca\u021f\u02be\u0234\u028e\\U00041c67\u0213\\U000bc93b\u02af\u0222\\U00093845\u02fa\u02c5\u02c5\u02dc\u0274\u02fb\u0212\u0224\u0265\\U000b891a\u02db\u021d\u0269\\U000f1b7e\u02aa\u0253\u0206\u0214\\U00088c59\u02fa\u02a7\u0292\u0221\u02e7\ud851\udce0\u0290\u02f5\u0212\u024d\u0268\u02b7\u023e\u0259\u02e3\u0298\u02ba\u02e0',\n        constraints={'intervals': IntervalSet(\n             build_intervals([512, 339183, 547890, 1010965]),\n         ), 'min_size': 46, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\r\\U000bd4f1\u00cd\\U000b751c{\\x87=j\u00c3\\x87^\u00c3\\x17\\U0005f0cd\uaadc\u00f3I\\x19+\u00e4\u00c7\\x06\u00d6\u00fd\u00d9\u00f5O\u81c1^^{\\U000b7a1am\\U0007db8d\\x10\u00f1\\x1a\u00ff\\U0005bbfe\u00c3\\x94k\\x8eX\\x0e\u00c0\\U0006b62a\\U0007b265\u00afT\\n3\u00b8v\\x81|b\\x07`\\x98\")\\U000c7fee+\\x13O',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  404,\n                  21196,\n                  54129,\n                  324163,\n                  580276,\n                  735196,\n                  753376,\n                  772136,\n                  828451,\n                  947284,\n                  977589],\n             ),\n         ),\n         'min_size': 46,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1e-05,\n        constraints={'min_value': -inf,\n         'max_value': 5.155294933506242e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.8480728422577136e-157},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.642858418353078},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=36,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 9.35504690789421e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7003375434751813e+308,\n        constraints={'min_value': 6526655103507006.0,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 6.852088393866332e+307},\n        was_forced=False,\n        index=None)),\n      length=16120,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('a', 2, 2)),\n                                    (('a', 0, 2), ('c', 3, 0)),\n                                    (('a', 0, 3), ('a', 2, 1)),\n                                    (('a', 1, 0), ('a', 1, 2)),\n                                    (('b', 0, 2), ('b', 2, 2)),\n                                    (('b', 0, 3), ('b', 1, 1)),\n                                    (('b', 1, 3), ('c', 1, 3)),\n                                    (('b', 2, 1), ('b', 3, 1)),\n                                    (('b', 2, 2), ('c', 0, 0)),\n                                    (('c', 0, 0), ('b', 0, 3)),\n                                    (('c', 1, 3), ('a', 0, 2)),\n                                    (('c', 1, 3), ('c', 0, 1)),\n                                    (('c', 2, 1), ('c', 3, 2)),\n                                    (('c', 2, 2), ('a', 1, 3)),\n                                    (('c', 2, 3), ('b', 2, 0)),\n                                    (('c', 3, 1), ('b', 0, 0)),\n                                    (('c', 3, 3), ('c', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\x95\ud871\udcca+', 0, 0, 'reason'),\n      expected_traceback='\\U000e2a26w\u00b8\\x9dG',\n      has_discards=False,\n      target_observations={'\u00fb0\ud877\ude92\\x86;\ud851\udd14C': 2_087_270_884},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-92_714_423_073_057_255_394_032_414_672_241_994_085, -54),\n       (-49_173_831_968_673_144_379_212_331_883_246_870_471, 71),\n       (-655442542, 3165),\n       (-463022010, 5590),\n       (-31365, -27382),\n       (-23981, -54),\n       (-19570, 17264),\n       (-16488, 8536),\n       (-82, -36),\n       (-78, 11),\n       (-50, 108),\n       (55, 13820),\n       (121, -7083),\n       (6540, 75),\n       (7523, 19709),\n       (19027, -67),\n       (21203, -1_775_085_296),\n       (23364, -13660),\n       (1_707_163_747, 21222),\n       (621_633_039_361_805_721, 8461),\n       (1_699_629_365_845_468_664, -2),\n       (6_543_383_535_739_376_648, 9999),\n       (6_963_798_822_285_998_126, -96)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='verified')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.01288529101293534,
          "overall:gc": 0.0,
          "generate:args": 0.07762617006665096
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 3,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 3,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878935.494742
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-9897, context=(), group_elems=()),\n      nodes=(),\n      length=-5_580_432_174_866_049_346,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\U000d4803a', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\u00ae\u00ba\u00eaa\\U00039e9c\\x1f': 5.3852663223811755e+128},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(12, -19206), (780417826, 29869)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=87, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'p\\x1af\\xbd\\x96\\x056\\xdce$\\xa25,32\\xf3\\xb6\\xdb\\x02',\n        constraints={'min_size': 10, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x98\\x0b*\\xcfa\\x99',\n        constraints={'min_size': 4, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.5},\n        was_forced=True,\n        index=None)),\n      length=-10554,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('c', 0, 1)),\n                                    (('a', 2, 2), ('a', 1, 0)),\n                                    (('b', 2, 0), ('a', 0, 3)),\n                                    (('c', 3, 3), ('a', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\x95:\u00ec\u00a8', 0, 0, 'reason'),\n      expected_traceback='0\u6a0a',\n      has_discards=True,\n      target_observations={'': -0.022691566016548356,\n       's\\U000f4ea9w;\\x80\u00b8\\U000558fb': 2.2854318832811733e+47,\n       'q': -13398,\n       '\\U0001a62a\\U0005fd8e\u00d2\\U000ebd3fL(\u00f7': 2.715066653925079e+16,\n       '\\U0005730f\u00e4 \\U000fcb7b\\x15C\u00bei\\x0e\\x84': -30614,\n       '`\\x97\\U001017c2\\x87@': -37},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(281568832, 19168): '\u00ea\"\u00d1|\\x1a',\n       (-14222, 23): '\u00e6\\xad\u00e0',\n       (-69, -5604): \"{\u00ed\\x91N:\\x83\u00fe'\",\n       (-2, -15): '\\x1d\u00b2',\n       (-80, 26767): 'r\u00bc'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-45140884, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9936204544958447},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.1630550324595418e+308,\n        constraints={'min_value': 0.05,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 8.502837940605958e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': -8.596484959187434e+111,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.942942661906517e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.05},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=54769,\n        constraints={'min_value': 61,\n         'max_value': 1_018_391_885,\n         'shrink_towards': 0,\n         'weights': {184: 0.28272824967761595,\n          91: 0.14136412483880798,\n          34487: 0.08179384382406396,\n          62: 0.20045849295360466,\n          54769: 0.08922733051437103,\n          47858: 0.06712423478110842,\n          8192: 0.09424274989253864}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.6127253142947543},\n        was_forced=True,\n        index=None)),\n      length=-6641,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'h\\x1bU&\\x9d\\x04\u00d3': 1.1511700779046856e+16,\n       '\u00f37\\U0004e299\\U000e86bd\\U000df417\u00d5\\x8b\\U000a6716\\U00050072e': 52},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-127, 45),\n       (105, -641_522_832_974_964_719),\n       (1024, 109),\n       (3841, -19583)},\n      slice_comments={(13697, 27720): '~\u00ae\ud86a\udf59\\U0005a25dW\\x1d>',\n       (9141, -29): '',\n       (-107, 28481): \"'\u00cb\\U000d7316\\x12\\x08N\u00ee\",\n       (13396, -98): '\\x99\\U0004de79\u00ff(\u00ed',\n       (-2366, -601_627_613_200_948_555): '',\n       (119, 7_975_640_778_398_578_988): '\\x93\u00f9\\x9aD\\x81',\n       (-22624, 19097): '5\u00ab\u00de\\x02\u00b2\u00b9|\\x80\u00f9\u00c84\\U00098884\\U000e777b',\n       (-18907, 18553): '*V\\x90p',\n       (-17512, 9866): '@\u00fc\u00e6\u00cb\\x02\ud881\udf54\u00d5',\n       (-16429,\n        -9_212_523_354_636_535_913): '\\x0c\\U000f33799\\U0009ebf3\u00eb\\U000c882d^\u00a4#\u00d6\\U00088d0f\u00cd\u00f0'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=17165, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U000dc753\\U000e13fe',\n        constraints={'intervals': IntervalSet(\n             build_intervals([902789, 935953, 1096493, 1098080]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9177640139215664},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8194597181906367},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xf0\\xad\\xa8\\x06\\xe8',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-1_603_665_801,\n        constraints={'min_value': None,\n         'max_value': 26,\n         'shrink_towards': 4778,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=3.593180766641033e+307,\n        constraints={'min_value': 4.60505880719756e+16,\n         'max_value': 4.534838485555689e+307,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 8.536938607378472e-24},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.09694796612301107},\n        was_forced=True,\n        index=None)),\n      length=19337,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 0),\n                                     ('b', 3, 1)),\n                                    (('c', 1, 3), ('c', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00f5L\\U00046fc4(\\U000c55ccFa;{',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\u00b0\\U00040bc8d\ua91e',\n      has_discards=True,\n      target_observations={'\\U000e659fN>FM\\x93Q}\ud83e\udd5a|\ud802\udda8\\U00056fa88\u00fd': -3.46755680960319e+16,\n       'U\u00e9\\U000beb4f': -7_145_383_189_874_154_606,\n       'Jy.\\U0009a444\u00cb': -2.121772361090045e+294,\n       '\\x98\\U0004a3b6': -6.865499875498769e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-29424, 88),\n       (60, -58),\n       (85, 18585),\n       (13009, -1_150_083_022),\n       (13484, 27),\n       (28449, -32)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=23173, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xff\\xaa\\xe0\\xc3\\x00\\xcb',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),),\n      length=-12366,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 3),\n                                     ('b', 1, 2)),\n                                    (('b', 1, 2), ('c', 1, 3)),\n                                    (('c', 3, 0), ('c', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('4?\u00ca\u00be',\n                     [UnicodeTranslateError('', 0, 0, 'reason'),\n                      ExceptionGroup('98\\x1d\\x8f\\U000353df\\U000572cd\\x9d\\x94\\x94\ud811\udde3\u00a9\\U000e19a6K\u00e03\\x1d!\u00a2\\U000a6ce4\u00b3\\x1a\\x13$\u00b7\\U000a99e5',\n                                     [UnicodeEncodeError('unknown encoding',\n                                                         'failure',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('v',\n                                     [UnicodeEncodeError('unknown encoding',\n                                                         '\\x9e;\\U00057611\\x82V\u00d5\\U000aac03I\\x02\\\\\u00ea*\u00d4\u00db\\U00105073}\\U0007b180\\x88\u00ee',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '7\\U0006bbd2',\n                                                         0,\n                                                         0,\n                                                         'reason')])]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x14z\\U000835b9\u00a2\u00fbO\\x9b\\x8d\\U0004a7e5~.D': 1_573_577_463,\n       '\\x1f\\U000e47e8\\x8f\\U0006a52cxA': 8_139_141_917_614_186_519,\n       '': -1_372_990_815,\n       '\ud84c\udd7brx\u00a8-\\U0003bbb0\u00c6\\x00': -18005,\n       '\u00c2': -544872181},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-792_448_758_386_108_877, -26585),\n       (-26166, 1960),\n       (-11011, 1_151_564_632),\n       (-71, -27441)},\n      slice_comments={(-27613, -8807): '\\x83\u00c6\u16d6\\U000e1b98n',\n       (-14536, -80): '\\U0004b048\\r\\U000839d6\u00e0',\n       (42, 31875): '\\U000bb7c6',\n       (1000, 84): '\\x99\\x9b?\\x9f\\U00041866',\n       (19379,\n        23_487_682_998_785_162_364_183_448_032_323_433_335): '\\x99\\U000bc672',\n       (24, -88): '3\u00c5a4\\x08\\x03',\n       (-7, 99): 'G\\x0c\u00cb\\x92\\n\u00f7DZ\\x94\\U00070135',\n       (404, -807309016): '\u00d3\\x03y'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=0, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-1_145_284_141,\n        constraints={'min_value': None,\n         'max_value': -1_145_284_112,\n         'shrink_towards': 2405,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00076d9f\\U00051801\\U00041875\\U0004186c\\U00041856\\U000417f5\\U0004182a\\U000418b7\\U00041818\\U00055b3c\\U0004182f\\U00041893\\U000417e2\\U00049c8b\\U00041892\\U0004187e\\U000417d2\\U0004186b\\U000417da\\U0004186f\\U0004180a\\U000417be\\U000417ed\\U0006ebf8\\U00053ed6\\U0004186a\\U000417ce\\U00041824\\U00041823\\U0005ed9d\\U000417fc\\U000417c7\\U00041800\\U0004189c\\U0004185f\\U00041804\\U0004187e\\U000417e2\\U000418af\\U000418b6\\U00041898\\U00041866\\U00041881\\U00041866\\U00041805\\U000417f2\\U0004184d\\U000417d0\\U00055790\\U000417e2\\U0005bd64',\n        constraints={'intervals': IntervalSet(\n             build_intervals([268217, 518255, 830729]),\n         ), 'min_size': 44, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00044b64',\n        constraints={'intervals': IntervalSet(\n             build_intervals([216261, 399034, 1015837]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-80,\n        constraints={'min_value': -99,\n         'max_value': 43,\n         'shrink_towards': 1225,\n         'weights': {-16: 0.03587230204738034,\n          -36: 0.03306951911773774,\n          -95: 0.021999294648878447,\n          -67: 0.021999294648878447,\n          -40: 0.0027987748038685264,\n          -96: 0.024395161357075566,\n          -19: 0.011493196642068352,\n          -60: 0.021999294648878447,\n          24: 0.04061278465019046,\n          -44: 0.006018402902261777,\n          -22: 0.01771923888658227,\n          -64: 0.025914007154115196,\n          22: 0.003832951634278288,\n          15: 0.0371532520211487,\n          -86: 0.02394187779385703,\n          -68: 0.038609605799689826,\n          -81: 0.03811167954973929,\n          -7: 0.021999294648878447,\n          42: 0.01856010734622006,\n          -25: 0.03190066504939437,\n          -14: 0.021999294648878447}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00033e8f\\U00033efc\\U00033f47\\U000c0adf\\U00033f63\\U00033e7f\\U000c3ae3\\U00033f47\\U0004ccad\\U00033ea2\\U00033ebc\\U000b2cc2\\U000bd761\\U00033f14\\U00033ed4\\U00033edd\\U00033f34\\U00033f02\\U00033ec8\\U00066767\\U00033eb5\\U00033ef4\\U00033f31\\U00033e79\\U000697b5\\U00033f6d\\U00033e99\\U00033f1d\\U00033f50\\U00033f6b\\U00033e86\\U00062144\\U000b11c0\\U00033e91\\U000ce390\\U00033ecd\\U00033f6f\\U00033f23\\U00033efc\\U00033f54\\U00033f2e\\U00033ea1\\U00033e8b\\U0003ba94\\U00033f17\\U00033f30\\U00033f6f\\U000d04c8\\U00033f04\\U00033eab\\U000f5c7d\\U00033ef0\\U000d880f\\U00033eb5\\U00033f00\\U000c8895\\U00033eb2\\U00033e91\\U00033f3e\\U00033ed2\\U00033f58\\U00033f3f\\U00033f54\\U00033eb4\\U00033f01\\U00033f3f\\U00033f21\\U00033f6d\\U000b505b\\U00033ec5\\U00033f03\\U00033ed1\\U00033e9d\\U00033eaa\\U00033e7a\\U00033f51\\U00033ecf\\U00033f35\\U00033f07\\U00033ec3\\U00033f4c\\U00033ee0\\U00033ed9\\U00033eb7\\U00033ea6',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [212595,\n                  335256,\n                  401666,\n                  436525,\n                  695696,\n                  759164,\n                  760407,\n                  893037,\n                  991167,\n                  1037932],\n             ),\n         ),\n         'min_size': 19,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'-\"@\\x87\\x89\\x9fk\\x96\\xe6\\xd2\\xaev\\xd9\\x15',\n        constraints={'min_size': 0, 'max_size': 91},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud844\ude8c\ud844\uded3\ud844\ude82\ud844\uded8\ud844\udf04\ud844\udef4\ud844\udf47\ud844\udf06\ud844\udeba\ud844\ude8f\ud844\ude9e\ud844\udec6\ud844\udf0b\ud844\udf4b\ud844\udee8\ud844\udec1\ud844\ude95',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [135786,\n                  141886,\n                  224247,\n                  297490,\n                  435027,\n                  496604,\n                  522914,\n                  620710,\n                  840177,\n                  974202,\n                  983500,\n                  1000287,\n                  1083341,\n                  1114111],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xfb\\xff\\xea\\xad\\xfe/#\\xeb',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -2.592744458003053e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.129181673802904e+16},\n        was_forced=True,\n        index=None)),\n      length=60,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 3),\n                                     ('b', 3, 3)),\n                                    (('a', 3, 3), ('a', 3, 1)),\n                                    (('a', 3, 3), ('c', 3, 3)),\n                                    (('b', 0, 1), ('a', 2, 3)),\n                                    (('b', 0, 1), ('c', 0, 3)),\n                                    (('b', 2, 2), ('b', 0, 0)),\n                                    (('b', 3, 1), ('c', 0, 2)),\n                                    (('c', 0, 0), ('b', 3, 0)),\n                                    (('c', 1, 0), ('b', 2, 0)),\n                                    (('c', 3, 0), ('b', 1, 0)),\n                                    (('c', 3, 1), ('c', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='delete',\n      has_discards=True,\n      target_observations={\"'\u00a15\u00d8\": -5.960464477539063e-08},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-9219, -11886), (6504, -26019), (914725442, -109)},\n      slice_comments={(-3231, 23082): \"'\\U00100d07\\U0006bf90\",\n       (11079, -5_015_663_236_524_517_101): '\\x13',\n       (-7251, -8_537_594_999_645_337_168): '\\x7f\\x1e\u00f3',\n       (13717, -2748): 'NUM',\n       (-20709, -6277): '\ud835\udc13\ud835\udc21\ud835\udc1e \ud835\udc2a\ud835\udc2e\ud835\udc22\ud835\udc1c\ud835\udc24 \ud835\udc1b\ud835\udc2b\ud835\udc28\ud835\udc30\ud835\udc27 \ud835\udc1f\ud835\udc28\ud835\udc31 \ud835\udc23\ud835\udc2e\ud835\udc26\ud835\udc29\ud835\udc2c \ud835\udc28\ud835\udc2f\ud835\udc1e\ud835\udc2b \ud835\udc2d\ud835\udc21\ud835\udc1e \ud835\udc25\ud835\udc1a\ud835\udc33\ud835\udc32 \ud835\udc1d\ud835\udc28\ud835\udc20',\n       (-22,\n        15027): '\u00ac\u00aa\u00a8\\x9a\\U00058749XU\\U000a1551{\\U0005eb36\u00e6\\x83\u00c4\\U0003ca86*\u00c3\\r\\U000d9147\\U0008c920\u00be\ud880\udd1c\\U001008eb\\x8f\\U000711a3\u00caa'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=27807, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'g\\xe4\\x00\\x84\\x17\\xae\\x98\\x18U\"e\\xf6\\x19\\x05\\xe1\\xa7\\xaa\\xd7z\\x17\\x88\\x01-\\xa8\\x95\\xfe\\xbf\\xa9/0$\\xea\\x81\\xbb!Mh\\xbeD\\x8e\\x0bFV\\xef\\xd0\\xe4\\x8b\\x975E\\xfdm\\x8cc\\xc7\\xb3\\xbbY@k',\n        constraints={'min_size': 49, 'max_size': 149},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=62,\n        constraints={'min_value': -119,\n         'max_value': 113,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=4650,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 2, 1),\n                                     ('a', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('vC\\U000ac4b3',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\U0007c128\\U000cb054\\U00064c04-MU\\U000568f7\\x08 \u00f8z`-\\xad\u00c4\u00c3': 2.6246928324098487e-153,\n       'DI\u00c0\u00b2': 3219,\n       '(\\x8f\\U0006646a\ud805\ude64e\\x1a\\ueba0)\\x0b}\u00c5': 122,\n       '\u00a9\u00a1': -114430087,\n       '': 8.832796090934785e-261,\n       '\u00a6\\U000e7b11e\\x9a\u00ebg\u00bcE\u00f5S': 5_983_996_507_080_980_535,\n       ' #\u00db\u00ff\\U001026ec,\u00f1}\u00d4\ud846\udec0\\U000aa330': 4.0050867927757144e+16,\n       '\\nQ\\xa0\ufa8a\u00ab\u00e8-\u00e1': -8_448_339_668_434_491_297,\n       '\\x91\\x98': -3926,\n       '/\\x98\u00c1\u00bf\u00da': -4.729815795618372e-287,\n       'X\u00a8': -25727,\n       'kv\\x01\u00fa\u00efz': -3.0765117405025828e+16,\n       '\u00d9\\U00060b13\u00e5\u00fd\\x15\u00b53': -4.71619678368235e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(32766, -23422): '\u00b9re\u00c4\\x83k\u00c3\u00d5\\U000e5b77\u00bc'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-19304, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\x81\\xd6\\x9c~SW',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),),\n      length=30209,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('a', 0, 1)),\n                                    (('a', 0, 3), ('a', 3, 1)),\n                                    (('a', 1, 1), ('c', 1, 0)),\n                                    (('b', 2, 3), ('b', 1, 2)),\n                                    (('b', 3, 0), ('c', 3, 3)),\n                                    (('b', 3, 3), ('c', 3, 0)),\n                                    (('c', 0, 3), ('b', 0, 2)),\n                                    (('c', 2, 0), ('a', 1, 2)),\n                                    (('c', 2, 0), ('a', 2, 2)),\n                                    (('c', 2, 2), ('a', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\ud835\udd4b\ud835\udd59\ud835\udd56 \ud835\udd62\ud835\udd66\ud835\udd5a\ud835\udd54\ud835\udd5c \ud835\udd53\ud835\udd63\ud835\udd60\ud835\udd68\ud835\udd5f \ud835\udd57\ud835\udd60\ud835\udd69 \ud835\udd5b\ud835\udd66\ud835\udd5e\ud835\udd61\ud835\udd64 \ud835\udd60\ud835\udd67\ud835\udd56\ud835\udd63 \ud835\udd65\ud835\udd59\ud835\udd56 \ud835\udd5d\ud835\udd52\ud835\udd6b\ud835\udd6a \ud835\udd55\ud835\udd60\ud835\udd58': -5.486537090453102e+16,\n       'a\\U00100b3c\\x80{\\x0f\\U00043496': 0.05,\n       'p': -135_569_189_292_330_538_382_898_426_588_938_152_250,\n       '': -13021},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-20684, -5557),\n       (-8698, 28548),\n       (596, 949841240),\n       (5112, 2_961_890_991_209_938_013)},\n      slice_comments={(-86, 84459773): '\u00b0\\x8a\\U0009a2b3\u00c6<\u00cf\u00dc\u00c7\u00bb\\U000524f1\"\\x80r',\n       (-8519, 11438): '\\U0005c554\u00c5\\x98',\n       (18552, 12928): '\u00a8',\n       (300, 13326): 'l\u16f2\\U000cd12a',\n       (-21707, 226953850): '\\U000899f9|\u00d5i\u00da\u00db'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=32012, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b\"8\\xd4\\xce\\x99M\\x91\\xbc.Y&\\x9bN\\x9d\\xa1\\x01\\x13\\xb5\\xa3'x\\x81\\xab\\xd3j\\xa2\\x19\\xc0AK(/\\xef\\xec\\xb5\\x88\\x07\\xa3\\xb2)m\\x97`\\x852\\xf8\\x91\\xc3\\x02\\x8aU\\xc4\\xf7\\x9aEu\\xd7L\\x12lt-\\xa3\\xef\\x1c\\x98Q\\x96\\x1f,\\xcfw1\\xb0\\xd5Rt\\xf0h\\x93v\\xccW\\x86\\x81u\\x9c\\x9a\\x13\\xcar\\xe4cY\\xec\\xc6\\xcd\\xe2\",\n        constraints={'min_size': 30, 'max_size': 130},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=3,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-6,\n        constraints={'min_value': None,\n         'max_value': 8_800_840_601_985_665_104,\n         'shrink_towards': -16,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=67,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 709,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.03392620256571011},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=7.944407004774664e+307,\n        constraints={'min_value': -1.192092896e-07,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 7.944407004774664e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-4.112159744628946e+16,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.673811035216625e-82},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-3_675_326_810_183_748_906,\n        constraints={'min_value': -3_948_199_817_303_352_139,\n         'max_value': -24638,\n         'shrink_towards': 0,\n         'weights': {-3_675_326_810_183_748_906: 0.24515508244752826,\n          -3_948_199_817_303_351_985: 0.25484491755247174}},\n        was_forced=True,\n        index=None)),\n      length=-72,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 2),\n                                     ('a', 0, 3)),\n                                    (('b', 0, 0), ('c', 1, 3)),\n                                    (('b', 0, 3), ('b', 0, 3)),\n                                    (('b', 1, 0), ('c', 3, 3)),\n                                    (('b', 2, 2), ('a', 3, 2)),\n                                    (('c', 0, 3), ('c', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x8d\u00b8\\U0007c229\u00ac\u00fe\u00ce`\ud842\udd45x\\x92?\"\\U000af110\\x9e': 8192,\n       '': -15614,\n       '\\U00105aa9\u00e4\\x91A\\U000b4f28\u00a4\\U00085654\u00d4\u00f2\\\\p\\U000aa738': -28744,\n       '\\\\3\\x1f\\r\\U000ddaaf\\x1d\u00da[n\\x0f': 1_839_082_454_375_259_356_324_961_884_083_742_580,\n       '\\U0008f0f3\"\\x9b\\x12\u00fb\\x82!\u00e7jA': -4.857478274220782e-135},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-16545, 91), (86, -144), (21429, -19748), (23889, 68)},\n      slice_comments={(-43, 3587): '',\n       (-82_186_907_365_794_026_206_930_352_065_643_213_432,\n        83): '\u00c5\\x03\u00ce\\U000b70f4',\n       (-840, 7094): ';\u00f1\\x14\u00af',\n       (51, -1_416_283_707): '\u00be\\U000cd187\"',\n       (30197, -6000): '^\\U00103be0',\n       (-12034, 870645715): '\u00d6\u00b4\u00e1\\x04\u00af\ud881\ude4a\\U00050769c~\u00c9'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-7753, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.225073858507203e-309},\n        was_forced=False,\n        index=None),),\n      length=-42_693_461_615_835_462_884_169_473_099_040_145_721,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('c', 1, 0)),\n                                    (('a', 2, 1), ('a', 0, 1)),\n                                    (('c', 2, 0), ('b', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\u00d2wg\\x95\u00d1\\x1b\\x81U',\n      has_discards=True,\n      target_observations={'': 2.6817825892643973e-52,\n       '\\x11\u00db\\x9e4\\U000fe087\u00b1E': 0.05,\n       '\\x1cD\\U00060d4f\ud888\ude66$\\xa0\\x05q\\U000ba4f4E\u00c7': -5769},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-12_200_860_445_068_693_848_736_512_323_514_691_171, 8192),\n       (-27696, -1608),\n       (-13294, 27759),\n       (52, -6641),\n       (390, 8_682_982_123_346_918_231),\n       (84_309_167_791_216_253_368_633_987_573_448_054_007, -63)},\n      slice_comments={(-6973, -28847): 'R\\U0005819e\\x8a\u00b0\u00e7',\n       (-13737, -105): '[)\\x99\\x98-\\x04\\xad',\n       (-18_748_595_932_465_860_266_177_547_509_307_998_773, 107): '',\n       (-1_580_598_684, -80): '\u00bc\\x95#\u00e6\u00bf\\U00043777',\n       (-7850, 21590): '\\x08\u00eb>Vz\\x04\u00fa\u00f5\u00be+\\t\\x02\\x03',\n       (12216, 17239): '',\n       (8, 6_499_174_688_860_990_600): '\\x1d\u00c9\\x92\\U00013d57\u00d7\\U000406d9B\u00fc\u00fd:',\n       (56, 21336): '\\U000411fb\\x1b\u00ef',\n       (-12678, -83): '\\x04',\n       (29196,\n        117): '\\U0003ff56H\\x03\\U000649e4c\\x81\\U000aeab2\\x14\\x08C\\x07\u00ee\\x94\\x9e\u00e0\u00d6 \\U000bc7cb\u00de\u00e3W\\x94\\U000ece3f',\n       (15, 15002): '\\x1d',\n       (-93, -63): '\u00ee\\U00082948',\n       (-6392, -24): '\\U000737ee',\n       (3_683_189_937_071_264_622, -117): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x106d0c800>, min_size=0, max_size=inf).map(tuple), length=one_of(nothing(), nothing(), integers()), has_discards=one_of(nothing(), nothing(), booleans()), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason')))), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text()))).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.011081290955189615,
          "overall:gc": 1.4042016118764877e-05,
          "generate:args": 0.13538274890743196
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 3,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 3,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878951.969019
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-28158, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U000d3feb\\U000e2417\\U000dae48@',\n        constraints={'intervals': IntervalSet(\n             build_intervals([1, 27593, 856147, 936070, 1114110]),\n         ), 'min_size': 1, 'max_size': 101},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9528272169999445},\n        was_forced=True,\n        index=None)),\n      length=-25815,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 3),\n                                     ('c', 2, 0)),\n                                    (('c', 1, 3), ('b', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('r\u00e3\\x9b\\U0006f692\u00bdoX\\x0fZ\\x91 g\\U000ac82b',\n                     [ExceptionGroup('\ud801\ude60\u00d0\\U0005d61e\u00f9',\n                                     [UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      ExceptionGroup('',\n                                     [UnicodeTranslateError('\u00fa\\x11',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '',\n                                                         0,\n                                                         0,\n                                                         'reason')])]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'O\\U000cdda2': -3.573833120400907e+296,\n       '\u00dc\u00ed\\ufdd80Ji': -36_999_013_892_446_376_229_588_438_423_093_449_378},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-2_600_989_855_325_358_106,\n        111_384_111_376_481_091_622_899_704_530_328_401_103),\n       (60, 45_724_608_797_670_948_861_356_270_391_413_899_619),\n       (6568, -1_779_336_901),\n       (13068, -15)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-76, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-4381,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -7_656_133_191_294_945_083,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'<\\xb9\\x0e\\x98\\x97\\x7fE=\\x15\\x1e\\xee\\x9b\\xfb\\x19_h\\x19;Q\\xe3\\xd0',\n        constraints={'min_size': 7, 'max_size': 107},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x1c+\\xf4\\x90?\\xab\\x8d\\xbb\\x14uMO\\xb7p\\x1d\\xde\\x1f\\xdb\\xe7\\xe2\\xce\\xc4\\xc5\\xfa\\x8btPQf\\xa7\\xcb\\xd0\\x06L\\xff\\x90\\x19\\x10\\xf5D',\n        constraints={'min_size': 14, 'max_size': 114},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.5323707459220145},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0006a951\u00a2\u00deo\\x91\u00cf\\U00083633\u00c6l\\U000a8c1b\u00e1qn^\\x98a\\x15\u00c4\\U0006c478o\\x0b\\x05\u00d75Q%\\x02{\u00fc\\x17\\U00043ce9u\u00e6Bbx\\U000352c9\\x98\\x07\u00b8%\\x96\u00bd)\\t\\x12\\x88M\u00ba\ud869\udd17\u00e5\\U0008c546GG\\x83\u00c4\\x07\\x11%\\x08\\U000a2a5b\\x06\\x1df\u00be\\U00093197\\x00\\U000ad28d\u00eey\\x89\\x02x\u00e5',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0, 1000, 86910, 302427, 356700, 358062, 363658, 751042],\n             ),\n         ), 'min_size': 47, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'v\\xc7\\x81?9\\x91GmP\\xfe\\x0bB\\xad\\x01f/8\\xab]\"\\xd9\\'\\xb0\\x05\\r\\x97W\\x89\\x8d\\x8b\\xf7Ou\\xed\\xfd2\\xfc\\xd5(\\xbag',\n        constraints={'min_size': 35, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000495a5\\U0004959b\\U00049580\\U0004950b\\U0004954d\\U00049532\\U00049578\\U000495b1\\U0004952d\\U000495c3\\U000494fa\\U00089869\\U00049520\\U000d543d',\n        constraints={'intervals': IntervalSet(\n             build_intervals([300255, 970839]),\n         ), 'min_size': 13, 'max_size': 113},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=inf,\n        constraints={'min_value': inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.1324706159956918e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u3598\ud871\udee8\u35e3\\U00046d11\u3629\u3610\ud807\udd7f\u3586',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [13630,\n                  23223,\n                  63357,\n                  392839,\n                  430706,\n                  434275,\n                  498367,\n                  527702,\n                  634098,\n                  684185,\n                  708560,\n                  716132,\n                  741842,\n                  790156,\n                  828229,\n                  842465,\n                  921596,\n                  1012725],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=1513,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -122,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-0.3333333333333333,\n        constraints={'min_value': -inf,\n         'max_value': 2.662573938869237e+69,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.7955230169232908e-61},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xb1aB|\\x04o,\\x96gY\\xc6K=\\xccNP?E\\xf6E\\x81wK',\n        constraints={'min_size': 13, 'max_size': 74},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xbd',\n        constraints={'min_size': 0, 'max_size': 4},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000a1ba0\\U000b6406\\U000ac08a\\U000a1bed\\U000a1c36\\U000a1be3\\U000bd730\\U000a1c3b\\U000a1bb8\\U000a1bb2\\U000a1bf7\\U000a1bec\\U000a1b87\\U000a1c41\\U000a1c2b\\U000a1b8d\\U000a1b6a\\U000a1bc1\\U000a1be4\\U000a1c21\\U000a1bf8\\U000a1b9e\\U000a1c03\\U000cfdcd\\U000b3418\\U000a1b86\\U000a1b74\\U000a1bab\\U000a1ba2\\U000a1c28\\U000a1bd7\\U000a1c50\\U000a1ba7\\U000b8a23\\U000a1b74\\U000a1bd4\\U000a2245\\U000a1b8c\\U000a1bbe\\U000a1b6f\\U000a1c4c\\U000a1b80\\U000a1c07\\U000c3860\\U000a1bae\\U000a1c59\\U000a1c34\\U000e0e4c\\U000a1bc6\\U000a1ba7\\U000a1c2c\\U000a1b7f\\U000a1c38\\U000a5f0a\\U000a1ba6',\n        constraints={'intervals': IntervalSet(\n             build_intervals([662369, 926376]),\n         ), 'min_size': 48, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-39772,\n        constraints={'min_value': None,\n         'max_value': -18683,\n         'shrink_towards': -22632,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [404,\n                  22402,\n                  48180,\n                  65535,\n                  116831,\n                  159996,\n                  209429,\n                  530637,\n                  543943,\n                  626881,\n                  687332,\n                  687950,\n                  1000521,\n                  1064074,\n                  1068194,\n                  1114111],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.3098460295249947e-07},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 8.139620178336047e+307},\n        was_forced=False,\n        index=None)),\n      length=-29940,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('a', 1, 2)),\n                                    (('a', 0, 1), ('c', 0, 2)),\n                                    (('a', 1, 0), ('b', 2, 1)),\n                                    (('a', 1, 2), ('c', 2, 3)),\n                                    (('a', 2, 2), ('c', 2, 2)),\n                                    (('a', 2, 3), ('c', 2, 0)),\n                                    (('b', 2, 3), ('b', 3, 3)),\n                                    (('c', 0, 1), ('a', 1, 3)),\n                                    (('c', 0, 3), ('b', 0, 2)),\n                                    (('c', 3, 1), ('b', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         'g\\x17',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='MO\\U000eaa41r\\U000fd7f1\u00c9\\U00041451[B\\U0007d462@c\\x14y\u00a8\\tM\u00db\ud80c\udc90/3\u00f2~\u00d8n\\U000fb7eb\u00d0{',\n      has_discards=True,\n      target_observations={'\\r\u00b6': 65535,\n       '\u00fb\\x18o\u00b5\\U0003894b0k\\x81': -6.011096663896471e-190,\n       '\u00d7y\u00db\\x8b\\x86Y\\U0006cf00\u00c2\\x1a\\x96\u00c4\ud845\udc51\\U0008898cg\u00b7\u00c8Ot\u00e9h\\x1b\u00cdV\u00e8<\\x06\\x08~\u00a4 \\x80E\u00b4': 1397,\n       'm': 6.5501737224503176e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-25151, 1024),\n       (31275, -525481413),\n       (48980133, -25956),\n       (3_904_640_643_648_309_712, -10159)},\n      slice_comments={(-3101, -11799): 'G\\xadn\\U0005cbcd\u00f9',\n       (-12933, -17362): '\u00be',\n       (-8_734_805_439_913_700_155, -1_714_608_365): '@'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=77, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-5_198_282_430_952_818_613,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -2026,\n         'weights': None},\n        was_forced=False,\n        index=None),),\n      length=22952,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 3),\n                                     ('a', 1, 0)),\n                                    (('b', 3, 3), ('a', 1, 0)),\n                                    (('c', 3, 0), ('a', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\x7f',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-5_797_431_406_056_932_494, 311_704_111_190_619_018),\n       (-12545, 1_729_072_303)},\n      slice_comments={(-32521, -15): '9\u00bbN\\x94\\x8b\\x834\u00cbn\\x97S\\x08,\u00a6N\\x0e\\x16',\n       (572724908,\n        -13643): '\\x16\\x8b\u00e6\\xa0\\x7f=\\U0001afc8\u00f5@\\U0007bd39\\x1c\\x93\u2820]\\x9b8\u00ca\\x96\u00fd\u00a6\\U0005aa4e\\x8f\\U000f650e\\U000e0d57@\\x9c}m\\U000a07e2\ud84f\ude5f(\\x1d\u00bc'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-114, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xf7\\x9e\\xb5',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.9858996726284504e+16,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.05},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x86\\x83',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xd5Rlz\\xeb=m\\xd5\\x95o5R',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=-500,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 3, 3),\n                                     ('a', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\n',\n      has_discards=True,\n      target_observations={'\u00b3\\U000757f1\u00c5\\x9b\\x8b\u00eeC\u00a6$': 3648165855652612.0,\n       '\\x98\u00b8\u00b1\u00e4\\U00059456n\\x817\\U00040adbC\u00a9\\U00081cee\u00ed\\x89h\u8cda\\U000bfa85': -4.301104797016556e+231,\n       \"\\x8e\u00f1\\x9b\u00d3\u00b9\u00c8\\x838j\\x8f2\\U00058f93\\U0010db47\\U000e8629\\U0005c739\u00b7\\x9f\\U00046b0f\\x19\u00b2\u00f7l'\": 15728,\n       '^d;\u00d6X': -2.4783974525868977e+110,\n       'Jf': 1.5913255328997513e-250,\n       '}]\\x8a\u00b8': 5.960464477539063e-08,\n       '': -21256,\n       '\\U000c1730\u00fc~\\x8c': 2.3814347327373284e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-5_448_193_000_760_728_654, -1206),\n       (-16807, -21223),\n       (-7383, 1485),\n       (-109, 120),\n       (-85, -8629),\n       (-84, -671_412_166_793_683_501),\n       (39, -78),\n       (142, 65535),\n       (22326, -126),\n       (1_275_465_944, 64)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-3371, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=98,\n        constraints={'min_value': None,\n         'max_value': 339,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=6526,\n        constraints={'min_value': 5935,\n         'max_value': 7789,\n         'shrink_towards': 29,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=24230,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 2),\n                                     ('a', 2, 3)),\n                                    (('c', 0, 0), ('b', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='f*',\n      has_discards=True,\n      target_observations={'': 1.828330886304957e+16, '\u161eRN\\U000c6eea': 13108},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-23380, -3364), (-98, 783688895)},\n      slice_comments={(24265, -30811): '\u00c1\u00db\u00c6\u00acb0\\U00106a958;\\x8d?(T',\n       (-2460, 121): '\u00bd\u00cd',\n       (-21, -69): '\\U00047639\\U000e1c97U\\U000f36fd\\x0e'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-18455, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 3.015597681288403e+306},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xaf7\\x08j\\xf0\\xa5\\x89\\x02\\xd1W[U\\xd7\\xcb',\n        constraints={'min_size': 10, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=-5491,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 1, 1),\n                                     ('b', 1, 2)),\n                                    (('b', 3, 1), ('a', 2, 0)),\n                                    (('b', 3, 3), ('a', 0, 2)),\n                                    (('c', 1, 1), ('c', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\U00042b5e\u00b7v\\U000f6d32\\U000556b3',\n                     [ExceptionGroup('r^j',\n                                     [ExceptionGroup('\u00c6\u00ac\u00a1s-^',\n                                                     [UnicodeTranslateError('\\x86\u00b4\u00de\u00c6\u00ec-9\u00f1\\x86',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeTranslateError('\\x86a\\U0008d271\u00b3N',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeTranslateError('M',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      ExceptionGroup('^\u00e3',\n                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                         '\\U001015e2\\U000829e1\ud822\udf01\u00ab\\U0008de2b\u00bb\\U000a6da8\\U0007202b\u00d7\\x9e(\\x00',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')])])]),\n                      UnicodeTranslateError('\\x1d', 0, 0, 'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\\x93a\u00b1\\U00104684\u00a2\u00e2\u00fa\u00e7\\U000b9118\\x89q\u00e6\u00be\u00f6\u00f1\\x18\u00cd\u00c9\u00f3\u00d1',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-88, 1_527_549_482),\n       (16, 10954),\n       (44, 17),\n       (6012, -8_802_887_151_704_951_165)},\n      slice_comments={(100, 1000): '\u00ba',\n       (-76, 70): '\u00e8\\U00035a37',\n       (-18542, 13): '',\n       (-10795, 512): '\\x05\\x80\u00b3\\U000d9dea\\\\\\x014\u00cb,\\x8f\ud808\udceb',\n       (6749,\n        -24158): '\\x01\\x92\\x08\u00a5\u00b4H\u00f6%\\U000668e9\\U00033552(\u00c1\u00af{\\x06bV\u00c0<\u00af\u00a4xz\\U000ee9af'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.00814225000794977,
          "overall:gc": 8.550001075491309e-05,
          "generate:args": 0.08090888115111738
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878944.2901068
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=11622, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=16910,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.11839004657816579},\n        was_forced=False,\n        index=None)),\n      length=74,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('b', 3, 1)),\n                                    (('a', 0, 1), ('c', 2, 1)),\n                                    (('a', 1, 0), ('c', 1, 3)),\n                                    (('a', 1, 1), ('b', 2, 3)),\n                                    (('a', 3, 2), ('b', 1, 1)),\n                                    (('c', 1, 1), ('b', 3, 3)),\n                                    (('c', 3, 0), ('a', 0, 1)),\n                                    (('c', 3, 2), ('a', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'': -24111,\n       '\\U000ccc22\\U0006cece\u00ce': -15291,\n       '\u00c1\u00a1\\U00094a4f\\x91\\U000a74a8N\\U0004aea8|\\U0009d908\\x89\\U000c6e00\u00d8\\x87': 0.5,\n       ':\\U00109ff9\ud841\udd22\u00c0^,\\x19=\u00b5\ud878\uded2\u00f4\\x99i\\x02\\U000893b7\u00a3': 1.83655208775786e+154,\n       '\\U000ad460': -4718,\n       '\u00f0': 47,\n       '\u00aeI\u00e5': 6.683386115687991e+16,\n       '\u00da\\x18\u00df\\x1cd\u00af': -8702,\n       '\\x8d': struct.unpack('d', struct.pack('Q', 0x7ff8000000000001))[0],\n       '\\U000e19eb': 20,\n       '\u00e7\\U000d7a6fm': 10249,\n       '\\x16\\x82\u00a6]r\u00bd\u00c6': 28352,\n       '>\u00eb\u00a3\\x1f': 1770,\n       'G': 1.1783285014806664e-65,\n       'n': -937,\n       '\\n\\x0c\\x9e\\x8e': 0.0},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-457200686, 100),\n       (-317728734, -93),\n       (-26135, -107),\n       (-25558, -24899),\n       (-11672, 17090),\n       (-9097, 1_578_448_938),\n       (-9022, 98),\n       (-6306, -30176),\n       (-1028, 30434),\n       (-104, -2),\n       (-25, -8459),\n       (10099, 13424),\n       (16049, 4),\n       (17968, -106),\n       (19348, -31),\n       (25544, 14372),\n       (640802656, -5_979_223_750_721_899_012),\n       (2_629_114_758_590_743_455, -70),\n       (72_578_453_862_717_045_797_261_093_593_304_075_947, -86)},\n      slice_comments={(103, -20602): '\\U000fa7ba\\x92\u00fb\\x0c',\n       (512,\n        109_945_463_845_057_126_810_875_277_168_368_627_494): 'r\\U000ae8a0\u00a7\\x01',\n       (26827, -32731): '',\n       (27577, 19_125_356_490_599_117_119_129_350_826_564_857_913): '\\xad\u00bd\u00de&',\n       (-26929, -30988): 'shrink_towards',\n       (-103, 10): '%\\U001014ad\\U000eee55',\n       (-10606, -36): '6C\u00c5l',\n       (30493, -59): '\u00c5',\n       (-31503, -23758): '\\x99\u00a2\u00bb@\u00ee\\x9e\u00b7\u00c5',\n       (12244, -32004): 'f',\n       (-215_600_247_614_684_046,\n        58_642_609_192_633_687_493_459_803_343_435_402_236): 'g;\\x89\\U000726eb',\n       (8192, -60): '\"\u00c5\\U000d222b',\n       (-56_747_074_669_942_144_996_085_181_566_128_397_724, 11289): 'D',\n       (4_668_450_796_910_609_240, 300): '',\n       (22405, 3880): '\\x9a\u00d6\u00e6Qm5\u00b7\u00f0\\x07\ud853\ude3b\u00c6\u00e4\u00f5qi:\u00beD\u00cd',\n       (118, -47): '',\n       (-20452, -28627): '',\n       (19660,\n        -45): '\\x98\\U000fa45e\u00e4\\x90\\x18\\U0008bb7c\\U0010ad5a)\\x03:=%\u00b1\u269b\u00bd+#\\U0009f729',\n       (27952, -101): '.gP\u00a20a\\U000e6754',\n       (50, -5_391_470_008_542_954_166): '\u00b6\\x90\\x0f\\U000513e7\\x8bm'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=987002281, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=1.4995776143655306e+308,\n        constraints={'min_value': -2.378474987105825e-51,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.2250738585072014e-308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\"\\U000f3b71A\u00ee=*\\U000407eb\u00d4\u00a6',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  1000,\n                  50628,\n                  74907,\n                  77607,\n                  289126,\n                  343648,\n                  346092,\n                  354927,\n                  531198,\n                  757330,\n                  818865,\n                  950398,\n                  1114110],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 64},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': 1.3235353532650755e-210,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.4517726513362678e+308},\n        was_forced=True,\n        index=None)),\n      length=27729,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 0, 1),\n                                     ('b', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '\\x1d\\U0005465b\u00d2\u0a4c\\U000bfaa2\u00d0g\\x82K\\x87\\U00080390\\x00\\U0006d4bfO3\u00d0x\u00fem\u00cf\\U0006ecbd',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('\\x19K\\U00091bec\u00cc\\x8b',\n                                            0,\n                                            0,\n                                            'reason')]),\n      expected_traceback='\u00b2\u00c5',\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-12336, -13), (-8086, 9159), (-14, 15)},\n      slice_comments={(-121_617_387_792_112_734_131_312_985_729_767_030_672,\n        -24726): '\u00ff\\U0005f560\u00e7',\n       (-5129, 8970): 'FW\u00eb\\x00\u00ef\u00a1\u00ce5',\n       (-2044, 33): '\u00da',\n       (65535, 65535): '=',\n       (12849,\n        104_780_030_156_516_420_241_505_185_665_668_526_893): '\\x16\u00efBP'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-25418, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U0010a1a8\u2283\u0404\u04ed\\U0003b0a3\u0458\u04a5\u0447\u043d\u04ac\\U0010a1d8\u04e2\u0407',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1024,\n                  9999,\n                  186391,\n                  292566,\n                  451548,\n                  668791,\n                  938875,\n                  1005860,\n                  1015948,\n                  1105826],\n             ),\n         ),\n         'min_size': 12,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),),\n      length=-99,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('a', 2, 1)),\n                                    (('a', 0, 2), ('a', 1, 3)),\n                                    (('a', 2, 2), ('c', 1, 0)),\n                                    (('a', 2, 3), ('a', 1, 1)),\n                                    (('b', 0, 1), ('b', 0, 2)),\n                                    (('b', 0, 3), ('a', 2, 0)),\n                                    (('b', 1, 1), ('c', 1, 2)),\n                                    (('b', 3, 3), ('a', 3, 1)),\n                                    (('c', 0, 1), ('a', 3, 2)),\n                                    (('c', 3, 3), ('b', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x16\\U0001fd479\\x1b\\x97': 6.064006596959836e-43,\n       '\\x9b': -6,\n       '\\U000544ba\\U000cd08d\u13e7\\x0c\ud821\udd6e': -10277},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-143_689_569_032_380_569_684_888_677_304_672_030_549, 512),\n       (-5_394_783_268_439_457_705, -1_515_242_903),\n       (-32576, 2346),\n       (-28279, 26231),\n       (-23007, -55),\n       (-21825, 1_769_200_653),\n       (-20556, 25495),\n       (-9749, -11158),\n       (-99, 1884),\n       (30, 60),\n       (38, -29318),\n       (46, -26),\n       (121, 0),\n       (1884, 23950),\n       (11997, -39),\n       (13832, 21293),\n       (29602, -105)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=20291, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=65535,\n        constraints={'min_value': -57,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),),\n      length=-12025,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('a', 3, 3)),\n                                    (('a', 3, 2), ('a', 0, 0)),\n                                    (('b', 3, 3), ('b', 2, 3)),\n                                    (('c', 0, 2), ('c', 0, 0)),\n                                    (('c', 1, 3), ('a', 2, 3)),\n                                    (('c', 3, 3), ('a', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='elapsed_time_diff',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_753_635_446, -1517),\n       (12791, -6_198_667_676_976_960_579),\n       (16760, 15416)},\n      slice_comments={(28887, 12418): 'passed',\n       (-605, -114): '',\n       (71, 69): '\\U000f1c9a',\n       (12406, -26139): '',\n       (-16109, -160_524_252_297_255_071_335_573_945_158_865_163_645): ':',\n       (619, 30794): '\u00aa\u00a4',\n       (-62, 2405): '\u00d1Si\\U000388b93',\n       (-117, 29035): '',\n       (-5163,\n        8730): '\\U000688c7!b\\U0010bec8\u00b6\\U000803ed3\\xa0\\x9a\u00d8\\x06\\U0004e361',\n       (17, -104): '\\U000c1c81\\U000b5c7c\\x02\u00f8\u00db\u00ac\\U000fe5a0',\n       (699, -35): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0034984159865416586,
          "overall:gc": 0.0,
          "generate:args": 0.03200979402754456
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878917.645288
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=30254, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'W \\x1f\\xd5\\xd6]',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00011cf7\ud855\udf79\ud807\udd0b\\U00011cbf\\U0003be46\ud807\udca7\\U00011cdb\ud807\udc9f\\U00011cd1\ud807\udc66\\U00011cee\\U00011cf7\\U00011c4c',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [72751,\n                  181253,\n                  183319,\n                  266996,\n                  527874,\n                  636475,\n                  639972,\n                  856162,\n                  967062],\n             ),\n         ),\n         'min_size': 12,\n         'max_size': 86},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xf1;\\x960\\x83z\\xa8\\x82\\xfcf\\xc6\\x87\\xf6\\x15\\x8b\\x0eJ\\x92\\xcf.ywA\\x9c\\xfc\\xf4\\xba[\\xc3\\xa2\\xfdc\\x90\\x08\\x99\\x0e0\\x19\\xd5\\xf1z\\xc2\\xc5\\xce\\x8d\\xb7\\x19\\x9c\\xf6\\x99v%\\x8cf\\xdd\\xc4\\x0c',\n        constraints={'min_size': 47, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-80,\n        constraints={'min_value': None,\n         'max_value': 12,\n         'shrink_towards': 1_802_328_492,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.6571108718276347},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=9.183684270201518e+307,\n        constraints={'min_value': 7.577483962422675e+173,\n         'max_value': 1.7976931348623157e+308,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 9.183684270201518e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.3707260335762795},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.49768186890871025},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'v\\xa6\\x99\\x1d\\x0c\\xb2\\x8b\\xac-{\\xb8\\x9b\\xc0',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-94,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('b', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('j\u00b7', 0, 0, 'reason'),\n      expected_traceback='',\n      has_discards=False,\n      target_observations={'': -8534,\n       '(\u00f9\u00d6k': 0.5,\n       '\\x97\u00e1\\x94\\x97\u00fd>\\x85': -411_222_644_410_481_184},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-29155969, -15018), (6584, -7262), (65535, 1_773_694_671)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=112132218767495143027262345138317673291, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U0003aade\\U000567e2',\n        constraints={'intervals': IntervalSet(\n             build_intervals([240125, 389769, 902922]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00056188\\U000c78ad\\U000c1225\\U0005616a\\U000560d8\\U000560fa\\U000560fe\\U000560a2\\U00056131\\U00056163\\U00056178\\U0005612f\\U00056187\\U00056131\\U00056158\\U00062f04\\U00056169\\U00056144\\U0005615b\\U00056190\\U0005611a\\U0005615b\\U00056121\\U0005b68a\\U0006184f\\U0005618c\\U00056171\\U000b38df\\U000560fe\\U000560b2\\U000560fd\\U0005617f\\U00056190\\U00056149\\U000560ae\\U00056134\\U0005618e\\U000560a4\\U000560a2\\U00085fdd\\U000560de\\U0005610e\\U000560ee\\U0005618d',\n        constraints={'intervals': IntervalSet(\n             build_intervals([352403, 900363, 905323, 1018930]),\n         ), 'min_size': 24, 'max_size': 124},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'*]n\\xf9',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=40,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00f9', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(1_814_603_321, -10): '!V<t\u00f0\\U00070403\u00b4\u00ee',\n       (100, 404): ')T\\U000eb3657\ud857\udc0cT\u00a4\\x10\\U00060837\u00d1T\\n',\n       (-46, 27126): '',\n       (-117, 1682): '\\U000e1120^^\u00e4',\n       (4442, 31436): '4\\x80q\u00aaf\\x1a',\n       (18, 109): 'U\\U000ce0b9\\U0004ce74',\n       (-7, -65): '\u00e5',\n       (34, 433436249): '\\x7f\\rI',\n       (19666, -61): 'J\\x8f\\U000701ff\\x96\\U0010ba2c\\x95+J|\\x95^?\\x16'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=103, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-4.4870369259784984e+16,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.005022564328055037},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9824428294781362},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x9d\\xcb\\x88\\xcc\\x1bu\\xa4\\xf2\\xf7SN\\x81^\\xa7',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'_\\xcf',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None)),\n      length=-9686,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 0, 2),\n                                     ('b', 3, 3)),\n                                    (('c', 3, 2), ('a', 2, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00c0\\U00096613c\\U000a0d9f\"\u00cd\\x1f\u00ff\\x1e',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-44, -19894),\n       (64, 25),\n       (8217, 51),\n       (20994, -32355),\n       (25192, -23031)},\n      slice_comments={(7_617_479_390_505_834_084, 98): '',\n       (11, 5718): '',\n       (404, 73): '}\\x0b\\U0003f048\u00da',\n       (-31422, 28): '',\n       (-7_893_982_418_410_344_045,\n        -4485): '\u00d3\u00c0\\U000e7640\\U000d0e67\u00b2\\x0e\\x1f\\x8e',\n       (855882074, 25978): '\\x89\u00ecK',\n       (26045, 3351): '\\x1a\u00bcv\\x9f\\xadF\\U000b57ff\u00bf\u00cd@\u00cb\u00d0',\n       (-21569, 44_296_473_562_001_132_620_566_782_519_699_403_046): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-34, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=3.0959196674258134e+261,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.7422620533748216e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=11985,\n        constraints={'min_value': None,\n         'max_value': 13376,\n         'shrink_towards': -25101,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=-83,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 3, 0),\n                                     ('b', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00d0\u00c4\\x14\u00c9=\\x10]\\x1a2\u00d5\\x88',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='qD\\U00035527\\U000d7985\u00fb\u00bb.',\n      has_discards=True,\n      target_observations={'\u00ed\\x0f\u00ba`\u00d9Pm': 90828.36123636816},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-165_693_041_038_453_570_541_274_385_280_261_048_752,\n        -2685)},\n      slice_comments={(1_176_143_501, 27079): 'A\\t\u00aa\\U0005266b',\n       (-22377,\n        -3_440_023_072_877_506_387): '$\\x04\\U000401cf:\\x83\\x14\ud800\udd5f{\\U00077527\u00e3,',\n       (-7481, -108): '',\n       (-8824, -1749): 'nil',\n       (-20208, -2526): '\\U000eb0cf\ud888\udd25\"\u00f9\\x8b',\n       (-30029, 82): '\\x0f\\x91'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-1028160887, context=(), group_elems=()),\n      nodes=(),\n      length=-116,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('a', 0, 1)),\n                                    (('a', 2, 2), ('a', 1, 1)),\n                                    (('a', 3, 0), ('a', 0, 3)),\n                                    (('a', 3, 3), ('a', 1, 2)),\n                                    (('b', 0, 0), ('c', 0, 0)),\n                                    (('b', 0, 1), ('c', 2, 3)),\n                                    (('b', 1, 1), ('c', 2, 0)),\n                                    (('b', 2, 0), ('a', 2, 0)),\n                                    (('b', 2, 0), ('b', 1, 3)),\n                                    (('b', 2, 2), ('b', 1, 3)),\n                                    (('b', 2, 2), ('c', 3, 0)),\n                                    (('c', 0, 3), ('a', 1, 1)),\n                                    (('c', 1, 0), ('a', 1, 0)),\n                                    (('c', 2, 0), ('a', 1, 3)),\n                                    (('c', 2, 0), ('a', 3, 1)),\n                                    (('c', 3, 0), ('c', 0, 3)),\n                                    (('c', 3, 2), ('b', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00f7',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='',\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_717_773_984, 31507)},\n      slice_comments={(22436, 12203): '\u00c0\\U000980a1\\x88h\ua4fc_\u9c36=\\U000dfe00',\n       (64, -30706): '\\x15@\\U000a90f9u\\U0008ace3\u00f2'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=19993, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.3885443788426717e+194},\n        was_forced=False,\n        index=None),),\n      length=512,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 2, 1),\n                                     ('b', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='',\n      has_discards=False,\n      target_observations={'4u:\\U0010c4b7\\U000dfe91\\x86i|V\\U0003ec527\\x92|\u00e9&M\"\u00f0\\xad\\x0e\u00d5c\\x80\u00f8\\x83\u00a1': -3.0017666244321516e+16,\n       '\u00f1\\x1c\\U000d5ad7\u00ff\u00fc\u00fb': -5.576820927345932e-125},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-6_132_469_927_135_952_302, 1_128_542_707),\n       (-1_290_062_453_386_862_584, 30341),\n       (-30910, 99_208_123_340_469_940_625_953_048_631_437_672_256),\n       (-19063, -44),\n       (-4245, 24290),\n       (-1382, -41),\n       (-121, -1_246_401_496),\n       (-91, -123),\n       (39, -26350),\n       (126, -2_768_000_858_422_033_789),\n       (512, -1_679_746_852),\n       (179825682, 23903),\n       (2_079_123_689, -1_670_774_985_973_682_850)},\n      slice_comments={(-17510, -32): '\\U00066f34\u00de\\x89,7\\x84\\x0b\\x1c\u00b7\\x0ft\u00ce<M',\n       (8192, -29885): '',\n       (100, 1_037_780_902): '',\n       (20392, -72): '(\u00c1\u00c3R\\U000b57c6\\x9c\\x80\u6e9a\u00a2',\n       (3613, 156_473_200_419_176_165_548_894_887_520_548_846_454): '',\n       (11679, -4719): '\u00ba\u00c5',\n       (-4258, 19): '\u00a5\\U000454a5,\u00bd',\n       (145_156_952_097_040_397_110_951_573_025_274_683_197,\n        -1_084_979_938): '\\U000868db\\U00070f05'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-794, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'3LJf\\xe8\\x02\\xb8',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'88\\xee\\xf6\\xf4',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'6',\n        constraints={'min_size': 1, 'max_size': 101},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'wlm;\\xc5e+3\\xe4\\xab\\xb3<',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u02d2\u0226\\U00049f61\u0235\u02f8\\U0004ec1c\u02fd\u02b0\u028e\u02e0\u0251\u02cf\\U000342a6\\U0003749c\u02b3\u025d\u0221\u0298\u02f8\u02cd\u022e\u0201\u0209\u024c\\U000387e5\u026b\ud86b\udfed\u0252\u027b\u02d9\u02fe\\U00034f78\u02ef\\U0004286b\u026b\u027c\ud847\udcd6\u02aa',\n        constraints={'intervals': IntervalSet(\n             build_intervals([512, 1000, 118320, 327658, 468009]),\n         ), 'min_size': 36, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000bdb0b\\U000cce9b\\U000b3f95\\U000b3fcf\\U000b3fa7\\U000beca9\\U000b4026\\U000b3f57\\U000b3f9f\\U000b3f91',\n        constraints={'intervals': IntervalSet(\n             build_intervals([737076, 1023150]),\n         ), 'min_size': 10, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=3.1147356981041576e+38,\n        constraints={'min_value': 1.2338305863983516e+16,\n         'max_value': 3.402823466e+38,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.34899474285884e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u2722\u2795\u27c7\u275e\u2788\u2712\u278d\u27b5\u280b\u2725\\U000ae176\u2797\u2780\u27a6\u271f\u27fa\u27cb\\U000ada50\u27c3\u276a\u27ca\u27fd\u2808\u27e8\\U0004a876\\U00075945\u27b2\u2743\\U00041536\u2726\u2798\u27cf\u27c2\u2725\u2796\u272f\u27b5\ubed7\u27dc\u272d\u2740\\U00036955\u27a7\u2794\u27bc\u272a\u27d1\u280c\u271a\u275b\uaf51\u270f\u2781\u2769\u277f\u27c9\u2731\u280c\u272a\u280a\u2792\u277f',\n        constraints={'intervals': IntervalSet(\n             build_intervals([9999, 353694, 380206, 799114]),\n         ), 'min_size': 44, 'max_size': 66},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 9.551523671583455e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'b\\x0618e\\xba\\x90\\x01\\xa5\\xccA\\xad[\\xb5-\\xf5\\xd0\\x06K\\xac\\xe1\\xd8\\x12]\\x02\\x1bl\\xca\\xde\\x94\\xb7nR\\xb9\\x0b\\xea\\x9e\\xc0\\xcd\\xcf',\n        constraints={'min_size': 27, 'max_size': 61},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-2_087_863_455,\n        constraints={'min_value': None,\n         'max_value': 4564,\n         'shrink_towards': -31116,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([1, 138214, 358985, 363811]),\n         ), 'min_size': 0, 'max_size': 56},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.45623654741879693},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.6112631666429506},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.13300475821731664},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=15,\n        constraints={'min_value': -6_310_972_903_763_175_937,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=959_797_217_951_647_686,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('c', 2, 3)),\n                                    (('a', 0, 1), ('c', 3, 1)),\n                                    (('a', 1, 0), ('c', 1, 0)),\n                                    (('a', 1, 1), ('a', 3, 2)),\n                                    (('a', 1, 1), ('a', 3, 3)),\n                                    (('a', 2, 2), ('c', 3, 0)),\n                                    (('a', 2, 3), ('a', 1, 1)),\n                                    (('a', 3, 0), ('a', 1, 2)),\n                                    (('b', 0, 0), ('b', 3, 2)),\n                                    (('b', 0, 3), ('c', 2, 2)),\n                                    (('b', 2, 0), ('c', 1, 0)),\n                                    (('b', 2, 1), ('b', 3, 2)),\n                                    (('b', 2, 1), ('c', 1, 0)),\n                                    (('b', 2, 3), ('b', 3, 3)),\n                                    (('b', 3, 1), ('c', 1, 2)),\n                                    (('b', 3, 2), ('a', 3, 3)),\n                                    (('c', 0, 1), ('c', 0, 0)),\n                                    (('c', 0, 3), ('a', 3, 1)),\n                                    (('c', 0, 3), ('c', 2, 1)),\n                                    (('c', 1, 3), ('b', 0, 0)),\n                                    (('c', 2, 1), ('c', 1, 2)),\n                                    (('c', 2, 3), ('a', 2, 2)),\n                                    (('c', 3, 2), ('b', 3, 2)),\n                                    (('c', 3, 3), ('a', 1, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u3ff8 S',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\u00fbV\\U00061ee1',\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-23154,\n        -113_465_222_962_090_118_304_175_413_270_948_079_991)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-9024, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\ud847\udde6\\U000cab9a\ud86a\udf23\ud847\udd87\ud847\uddc7\\U000678d7\ud847\udd8e\ud847\udddd\\U000a4b3e\ud847\udd80\ud847\udd49\ud847\ude01',\n        constraints={'intervals': IntervalSet(\n             build_intervals([138498, 196130, 390691, 447241, 549396, 943358]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),),\n      length=27,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 3),\n                                     ('a', 1, 0)),\n                                    (('b', 1, 0), ('c', 1, 1)),\n                                    (('c', 2, 1), ('c', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('Branch',\n                     [UnicodeTranslateError('\u00c9^\\U000f3ef6z\\U0009fb6f',\n                                            0,\n                                            0,\n                                            'reason'),\n                      UnicodeTranslateError(\"'\u00a4QH$\u00cbl\", 0, 0, 'reason'),\n                      ExceptionGroup('\\U000d2a99\\x05e\u00c3E\\x9e\u00b2\u00db\\x98',\n                                     [UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('\\U00108342',\n                                                     [UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '\\x87q\\x96\u00c8\u00f5.',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      ExceptionGroup('\u00f6X',\n                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                         '(\\x83=\ud86b\udee6\u00b7\u00bc)\\U000f9b88\u00c4\\x05\\x0c,\u00d8',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeTranslateError('',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      ExceptionGroup('\ud848\udc6e\u00e8\ua515\u00daC+\u00b2',\n                                                                                     [ExceptionGroup('\u00eb\\x826\\x9c\\x83\u00cd\\x94]g\\U000bdaab\u00d9lK\\x10\u00e2\\x1d\u00fb',\n                                                                                                     [ExceptionGroup('\u00ed\u00d1\\x8e\\U00037ee0z\u00b9\u00bf',\n                                                                                                                     [UnicodeTranslateError('\\U000398f5\\x9e\\U00069dd3\\x11C',\n                                                                                                                                            0,\n                                                                                                                                            0,\n                                                                                                                                            'reason')])]),\n                                                                                      UnicodeTranslateError('o1#',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      UnicodeTranslateError('\\U000a9783*N',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                         '\\U00082745O8}\u00b3x\\x82\u00ce\\U000d0f6d\\x15o',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      ExceptionGroup('\\x1a',\n                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                         '\u00cf0d\\x05\u00d1}\u00efC\\x85\u00a6\\U000b92b0',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      ExceptionGroup('\\x86\u00b7\u00c7{\\x19\\xad',\n                                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                                         b'',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                         '&\\x8b\\x94\u00e0\\U000a0a77\u00b9L\u00c2\\x10\\x9e\\x9e\\x9f\\x9a',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                         '\u00a2@X',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                         b'',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      UnicodeTranslateError('\\x0b\\x00M',\n                                                                                                                                            0,\n                                                                                                                                            0,\n                                                                                                                                            'reason')])])]),\n                                                                      UnicodeTranslateError('+\\U00034e75A\\x12\u00f2.}\u00f3',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason')]),\n                                                      UnicodeTranslateError('\\U000f3596\u00f8',\n                                                                            0,\n                                                                            0,\n                                                                            'reason')])]),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='\\x83S\\x84',\n      has_discards=True,\n      target_observations={'': -123.58399597245665,\n       '\u00c2\\x89q\u00b3\\U0008a973\\U00088cc9\\U000b467a\\x19\u00b2\u00ec\u00db/B\\x92\u00c9': 3.715458669698498e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-13746, -3984),\n       (-10173, 30272),\n       (-67, 29144),\n       (106, -2_043_488_000),\n       (1643, -14710),\n       (5304, -15),\n       (8192, 21354),\n       (18934, -14525),\n       (19985, 22886),\n       (24243, -1392),\n       (6_168_963_385_877_173_877, -42)},\n      slice_comments={(-11787, 8192): '\\\\',\n       (-15551, 1_067_236_572): '\\U0006ecdc\u00e8$\\x9f\\U000c0573\u00a8\\U0006532bH'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-15060, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.4697924628757931},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000138e4\\U000139d6\\U0001397a\\U000138ee\\U00013977\\U000138df\\U00013961\\U00013984\\U0006062c\\U00013952\\U000139b2',\n        constraints={'intervals': IntervalSet(\n             build_intervals([80094, 108063, 370874, 1021378, 1114111]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.6701141485789793},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.3202474799385e+181,\n        constraints={'min_value': -4.797141035390923e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.67457339819096e+16},\n        was_forced=False,\n        index=None)),\n      length=7358,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('a', 0, 2)),\n                                    (('a', 3, 3), ('c', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00da\u00baA\u00a4\\x94\\x9bF\\U0010865f\u00ab\\x1c\\U000f1c94(x\\U0010c54c\u00c3',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback='node',\n      has_discards=False,\n      target_observations={'': -30490,\n       '\u00ceTneO\\U000458e8\\U000675c4\u00d2q*\u00cf\\U0001edf6\u00fd\\x8fM\\x9c1\\U000ea79b\\x9cz\\x10\u00f5\\U00078e39\\x0e': -1.8408637152833575e-56,\n       '\\x96Q\\x18\u00e8\u00b4\u00c5f\\x1c': -6.913082432747799e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-26451, -48),\n       (-8453, -32651),\n       (-3406, -46_418_157_396_902_824_574_547_855_517_337_914_981),\n       (-104, -121),\n       (-99, -29071),\n       (-81, 10777),\n       (-55, -100),\n       (21, -1_352_092_567),\n       (91, -55),\n       (5237, 22847),\n       (65535, 2_232_379_587_584_802_355),\n       (247984718, 12704),\n       (358221864, -9312),\n       (1_895_537_843, -66)},\n      slice_comments={(1_760_034_831, 22216): 'None'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x106d0c800>, min_size=0, max_size=inf).map(tuple), length=one_of(nothing(), nothing(), integers()), has_discards=one_of(nothing(), nothing(), booleans()), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason')))), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text()))).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.015987582970410585,
          "overall:gc": 4.216702654957771e-05,
          "generate:args": 0.11434574896702543
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878941.7959218
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-31885, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-67,\n        constraints={'min_value': None,\n         'max_value': 15779,\n         'shrink_towards': -30418,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u0286\u0296\u021b\u024a\u02fa\u02d5\u0244\u025d\u0292\u0299\u0207\u02cc\\U00071a40\u02b6\u026a\u0231\u029f',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [512,\n                  1024,\n                  8192,\n                  153617,\n                  217857,\n                  224612,\n                  227992,\n                  309648,\n                  311569,\n                  340612,\n                  461461,\n                  480808,\n                  488199,\n                  549204,\n                  559884,\n                  620179,\n                  646693,\n                  664881,\n                  674265,\n                  683291,\n                  715388,\n                  728652,\n                  743846,\n                  748545,\n                  772070,\n                  805571,\n                  862092,\n                  878658,\n                  885012,\n                  926012,\n                  948116,\n                  1007097,\n                  1082779],\n             ),\n         ),\n         'min_size': 15,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud850\udda2\\U0006149e\ud850\uddec\ud850\uddec\\U00053baf\ud850\udda7\ud850\uddcf\ud850\uddb2\ud850\ude4f\\U000416d9\ud850\udde0\ud850\udddb\ud850\ude3d\ud850\ude96\ud850\ude4a\ud850\ude7a\ud850\ude88\\U00083df8\ud850\udda8\ud850\uddb8\ud850\ude21\ud850\udddf\\U0003e5be',\n        constraints={'intervals': IntervalSet(\n             build_intervals([147874, 639447, 784985, 1018659]),\n         ), 'min_size': 18, 'max_size': 48},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud800\udc39\\U0009fcfa\\U0005ca71\uffb4\ud800\udc33\ud800\udc13\uffb2\ud81e\udcc8\\U000f38f1\\U0010a612\uffd6\\U00010065\uffc5\\U00054ca8\uff93\\U0009fe4f\\U00010061\\U00010070\uff9e\ud800\udc13\\uffd9\ud800\udc3f\\ufff9\uffd5\\U0001004e\uffa2\ud800\udc49\\U00091a5a\\U00010060\\U00014a1f\ud800\udc01\uff9f\ud800\udc15\\U00104d18\\U000e9908\ud800\udc05\uff95\ud811\uddd9\\uffef\\U000865cd\uff95\ud800\udc20\uffc6\ud800\udc51\uff99\\U000e3c3c\ud800\udc19\\U000db4fd\uffab\\U0001006c\\U000e6626\uffda\\U000b1f18',\n        constraints={'intervals': IntervalSet(\n             build_intervals([65411, 169680, 296542, 739710, 807269, 1113647]),\n         ), 'min_size': 11, 'max_size': 111},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'@\\x1fD\\xa8l\\xea6\\xd3I',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.5520828154556484e+16,\n        constraints={'min_value': -449032348557039.0,\n         'max_value': 4.379552604610915e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.518648276569889e+16},\n        was_forced=True,\n        index=None)),\n      length=111,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 1),\n                                     ('b', 1, 1)),\n                                    (('b', 2, 0), ('c', 3, 1)),\n                                    (('c', 1, 3), ('b', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '\u00b4F\\x90\\x89',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\\x12\\x0c': -1.5963858132591652e+16,\n       '\\x98\\x1e': -6_726_789_665_663_754_827,\n       'p': -4.4184706821849955e-261,\n       '': 12686,\n       '\u00d3\u00b1\\x8e': 0.0,\n       ':oq\u00fe': -11},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(18299, -9959)},\n      slice_comments={(-1_784_459_956, 27): '\u00ac'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-17, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-7623,\n        constraints={'min_value': -17912,\n         'max_value': 2060,\n         'shrink_towards': 14263,\n         'weights': {1319: 0.19284153136930485,\n          1000: 0.008044501792007908,\n          -15292: 0.17823646623148925,\n          421: 0.10058836502138034}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.48176269865729615},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=1_220_588_445,\n        constraints={'min_value': 11088,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.5},\n        was_forced=False,\n        index=None)),\n      length=-7_250_413_387_254_986_288,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('b', 0, 1)),\n                                    (('a', 1, 1), ('b', 3, 0)),\n                                    (('a', 1, 1), ('c', 2, 3)),\n                                    (('a', 2, 0), ('c', 3, 3)),\n                                    (('a', 3, 1), ('a', 1, 0)),\n                                    (('b', 2, 2), ('c', 1, 0)),\n                                    (('b', 3, 1), ('a', 1, 2)),\n                                    (('b', 3, 3), ('b', 1, 1)),\n                                    (('c', 1, 2), ('b', 0, 1)),\n                                    (('c', 1, 2), ('c', 0, 1)),\n                                    (('c', 2, 3), ('a', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('', 0, 0, 'reason'),\n      expected_traceback='K9\\x08\ud84c\uddd0\\x93',\n      has_discards=False,\n      target_observations={'\\x89i': 7.067738980610194e+150,\n       '\u00c5&>\u00ef\\x89\u00ed\\x06\u00d0\u00b3': 26496,\n       '': 4.913275061906499e+16,\n       '\ud883\udc2e\\x81\\x82\\x91': -5486882799931814.0,\n       '\\x85\\U000cb323\u00b3\\x99': 1.1083630500610376e-12,\n       '\u00df\\x93X\\x1a\u00d2\\xa0H)\u00c3\\U000ec019#\ud811\udc3a': 9367,\n       '\\r\\x06': -4.713070392198923e+16,\n       '\ud86e\udec3\u00d6\\U000b254a\\x89\u00c0\\U000f5e75': 32497,\n       '\u03a9\u2248\u00e7\u221a\u222b\u02dc\u00b5\u2264\u2265\u00f7\u00e5\u00df\u2202\u0192\u00a9\u02d9\u2206\u02da\u00ac\u2026\u00e6\u0153\u2211\u00b4\u00ae\u2020\u00a5\u00a8\u02c6\u00f8\u03c0\u201c\u2018\u00a1\u2122\u00a3\u00a2\u221e\u00a7\u00b6\u2022\u00aa\u00ba\u2013\u2260\u00b8\u02db\u00c7\u25ca\u0131\u02dc\u00c2\u00af\u02d8\u00bf\u00c5\u00cd\u00ce\u00cf\u02dd\u00d3\u00d4\\uf8ff\u00d2\u00da\u00c6\u2603\u0152\u201e\u00b4\u2030\u02c7\u00c1\u00a8\u02c6\u00d8\u220f\u201d\u2019`\u2044\u20ac\u2039\u203a\ufb01\ufb02\u2021\u00b0\u00b7\u201a\u2014\u00b1': 2.080169429025399e+216,\n       '\u00a9': 144_530_177_101_949_901_993_650_294_288_440_739_482,\n       '\\x8a\u00c8\\U000e8af7,\u00ee\u00da\\x8d': 5.347109987774447e+16,\n       '\\U00070de5A\u00f2,\\U000f537c\\U0005c778\\x19': 19645,\n       '\\U0008c60d\u00b1\\x9d}\\x0f\u00e5\\x1b\\U00108b840\\U0010bf5e': 15,\n       '\u00eb\\x8e\u00cd\u00f9\\n\\x98\u00cbK\\U0006972b': 8.955350913564728e+48,\n       'inf': -10000000.0,\n       '[[': 86,\n       '\u6a08': 5.46885424648762e+16,\n       '\\U000c07db0\u00b4': -6.315310691588148e-112},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-8_152_681_528_679_708_689, 1000),\n       (-17097, -1885109),\n       (43, -2976),\n       (300, -23511),\n       (726, 20385),\n       (8535, 35),\n       (12888, -4467),\n       (20297, 13295),\n       (22433, -18888),\n       (32176, 7_929_186_249_297_859_335),\n       (281472563, 29),\n       (1_732_764_214, -24),\n       (7_165_231_022_767_766_421, -26),\n       (19_498_458_926_408_710_320_258_404_223_904_173_283, -29270),\n       (104_773_997_084_253_537_903_625_136_342_752_238_066, 87)},\n      slice_comments={(12761, 101): '\u00d6R\u00f6\\x03',\n       (10, -28979): 'A\\x13\u00dc\u00b6',\n       (17901, -23191): '\\U0001c507\\U00033723\u00bd\\U00058390\\x98\u00a1!Q',\n       (-29829, -6_700_963_485_941_668_001): 'J\u00bb\u00ac|<\u00c6\ud835\ude1f',\n       (-2616, 14852): '\\x18P\\x05',\n       (22482, 1983): '\u00faj\u00aa\\x0c\u00d2_\\x87\\x96\\U000b0f53\\U0003baa2\\x97',\n       (-94, 10333): '!\\U0005cfae\u00ae0\\U0003b702u\u00f2'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-27797, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([230113, 584168, 650006, 670440, 671094, 750690]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=4.1370275146508504e+16,\n        constraints={'min_value': -2.1376690925263568e+200,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.05},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-8.330126759280487e+42,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.3942444437157285e-105},\n        was_forced=False,\n        index=None)),\n      length=1_605_458_228,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 3, 3),\n                                     ('b', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\U0007400b',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\\x11Lt\\x96\u00cd\\x91\\x14~',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('~\\U000f9434\\x84', 0, 0, 'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='',\n      has_discards=True,\n      target_observations={\"'\\U000d2f65\": 1.9366854113414532e+16,\n       '\\U000c4103\\x8c2\u00ab\u00f3\\x96\u00af': -7.0579432335453064e+16,\n       '\u00f1\\x99': -6},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_321_151_076, -971359805),\n       (-6997, -68),\n       (-92, -18764),\n       (-37, -1682),\n       (2760, 104_351_531_525_990_082_380_908_513_629_749_950_868),\n       (3236, 65535),\n       (28286, 1000)},\n      slice_comments={(15112, -8533): '\\x9d\\x8a\u21b6\u00eb',\n       (-2224, -91): '\\x8e\u00fa\\x9c$',\n       (-122, 11): 'VJ\\x84\\U00069c98\\x9d\\U00094095\u00deA\\U000b1d3e',\n       (-4731, 30501): '\\x8f\u00a4\\U0005c787\u00b4\\x1f',\n       (-6948, 113): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=3420107190084019490, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-1.7976931348623157e+308,\n        constraints={'min_value': -inf,\n         'max_value': -1.1937282529287176e+266,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.217693490276012e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.5164396756606079},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-22,\n        constraints={'min_value': -118,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u4d70\u4c78\u4cdd\u4c8c',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [19576, 30912, 118726, 385522, 477593, 737162, 1098796],\n             ),\n         ), 'min_size': 0, 'max_size': 60},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=16211,\n        constraints={'min_value': 16150,\n         'max_value': 16233,\n         'shrink_towards': 0,\n         'weights': {16155: 0.0713911629694099,\n          16173: 0.2773784446574965,\n          16211: 0.35499455494902016,\n          16151: 0.0021528432982737197}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'.hypofuzz.reports',\n        constraints={'min_size': 16, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00101194',\n        constraints={'intervals': IntervalSet(\n             build_intervals([1052924, 1070163]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.2428625949354802e-243},\n        was_forced=False,\n        index=None)),\n      length=4_174_508_308_386_966_298,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('b', 0, 2)),\n                                    (('a', 2, 0), ('b', 2, 2)),\n                                    (('b', 0, 1), ('c', 1, 3)),\n                                    (('b', 3, 2), ('c', 1, 2)),\n                                    (('c', 1, 3), ('a', 1, 2)),\n                                    (('c', 2, 2), ('b', 0, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\x85\u00db\u00bb\\x1d1Z6\\U00050722\\U0008d8e8/\\x05u\\U000557fe\\U0001b792\u00e4\u00e8\u00c9_Y\u00af',\n                     [ExceptionGroup('c\u00dc\\U0004bda1',\n                                     [UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\u00e0XPe',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError('',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      UnicodeTranslateError('\"', 0, 0, 'reason'),\n                      ExceptionGroup('T',\n                                     [UnicodeTranslateError('',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\u00cf\ud853\ude23\\U000ec1ad',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError('',\n                                                            0,\n                                                            0,\n                                                            'reason')]),\n                      ExceptionGroup('\\U0008e3c9\u00b9\\t\u00b7\u00f5\\x03\\r\\U0006ab52\u00f3\u00e0\u00f5y\\U000abf83\\x81',\n                                     [UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\u00b3c\u00ef1',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      UnicodeTranslateError('\\U000e71c2\\x1a\\U000eea80\u00e8',\n                                            0,\n                                            0,\n                                            'reason')]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-30845, -2_513_754_207_833_699_339),\n       (-27418, -20650),\n       (-25243, -12997),\n       (-21971, 31647),\n       (-20223, -26462),\n       (-12419, -25539),\n       (-4394, -25484),\n       (-92, 9999),\n       (-26, -122),\n       (16, 115),\n       (82, -3403),\n       (9119, 26437),\n       (14906, 21463),\n       (1_240_673_131, -19149),\n       (6_222_240_375_641_163_627, 15472)},\n      slice_comments={(-23859, -31238): '\\U000cc397\u00a66i',\n       (-7391, 25789): '\u00bcK',\n       (-3155, 300): '\\U00051de5\u00cf\u00c4\\x8bCa@P\u00dcI\u00c7\u00ae',\n       (65, -12010): '',\n       (1_148_240_489, 2115): \"7\\x80'\\U0009822c\u00fe\u00eb\u00a6\u00a7\u00ca\\x9f\u00b6\",\n       (-1251, 404): '{\\U0006beb7\u00b6[',\n       (81, -1854): '\\U000e0251\\U00051ed4+\\x80\\U000af374\u00f1\u00a2H$\\x9c',\n       (1024, 81): '\u00e4',\n       (11381, -4_355_242_808_435_998_057): '\\U000952eb5\u00b1Qj\\x99&M',\n       (-42, 6354): 'EW',\n       (112, 20027): '\\n(+',\n       (-3_149_142_043_182_082_971,\n        -83): '\u00b5\u00f13H\\x01/\\x87a\u00bc\\x80\\U0010cb34\u00ee\\x84\u00e2\u00dc\\x8d\u00fa3\u00c93-E\u00b8\u00dc\u00b2\\U000966ea\u00d5\u00f4\u00ceG\\x07\\x1b',\n       (29, -30594): '\u00e2`\\x89'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-19217, context=(), group_elems=()),\n      nodes=(),\n      length=108,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('a', 0, 1)),\n                                    (('a', 1, 3), ('a', 1, 3)),\n                                    (('a', 2, 1), ('a', 0, 1)),\n                                    (('a', 3, 1), ('a', 1, 0)),\n                                    (('a', 3, 1), ('b', 0, 0)),\n                                    (('b', 0, 3), ('c', 1, 0)),\n                                    (('b', 2, 1), ('b', 3, 1)),\n                                    (('b', 2, 2), ('b', 3, 3)),\n                                    (('b', 3, 1), ('a', 0, 2)),\n                                    (('b', 3, 2), ('b', 0, 0)),\n                                    (('c', 0, 0), ('a', 0, 1)),\n                                    (('c', 0, 1), ('a', 0, 3)),\n                                    (('c', 0, 2), ('a', 0, 1)),\n                                    (('c', 0, 3), ('a', 0, 3)),\n                                    (('c', 1, 1), ('c', 0, 2)),\n                                    (('c', 1, 1), ('c', 2, 2)),\n                                    (('c', 1, 3), ('c', 0, 2)),\n                                    (('c', 2, 0), ('a', 2, 3)),\n                                    (('c', 3, 0), ('a', 3, 1)),\n                                    (('c', 3, 0), ('c', 2, 2)),\n                                    (('c', 3, 3), ('c', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\U001080d8\\x95\u00b1f\u00e6\\x88\u00d3',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x8a-(': 5.695802354516296e+16,\n       '\u00cc\u00e9\u00a8\u00d8\u00d0\u00a5': 404,\n       '\u00ae\\x02': 61,\n       '\u00e8\\U0003cd7b\u00c1': 542299046587047.3,\n       '\\U000ddb43H\u00fe': 1.0766945368736159e+158,\n       '6': -4.085433406543358e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_725_845_431, 26274),\n       (-19838, 58),\n       (-13646, 65535),\n       (-53, -33),\n       (12676, -18246),\n       (1_734_324_554, -4287)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from integers(0, 1114111).filter(not_yet_in_unique_list) to satisfy filter": "",
          "updated size": ""
        },
        "timing": {
          "execute:test": 0.011060541961342096,
          "overall:gc": 3.704201662912965e-05,
          "generate:args": 0.0625492061371915
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 2,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 2,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878956.96206
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=512, context=(), group_elems=()),\n      nodes=(),\n      length=-32334,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 2),\n                                     ('b', 1, 1)),\n                                    (('a', 3, 2), ('c', 2, 2)),\n                                    (('b', 1, 3), ('a', 0, 2)),\n                                    (('c', 3, 1), ('a', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00b3{\u00e3\u00e0\\U000d6623H': 3.36852382388383e+16,\n       '\\U0010bc6b': -22723,\n       '\u00ce\u00e0\u00b7\u00a7\u00cd\\x14': 10787,\n       '\\x87\\x07\\x07': 6812,\n       '\u00b5': -25},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-124_296_030_269_573_906_737_524_527_496_907_353_506,\n        -6466),\n       (-602054041, 27265),\n       (-152814202, 1_731_760_610),\n       (-31600, 3254),\n       (-27705, 25414),\n       (-24956, 6767),\n       (-18275, 104),\n       (-7765, -748_559_830_329_097_421),\n       (-93, -5),\n       (-34, -22447),\n       (82, 30781),\n       (16692, -9021),\n       (18811, 16797),\n       (21943, -20134),\n       (26361, 76),\n       (28378, 5491)},\n      slice_comments={(9999, -19803): 'U\u00cf\\x8a\\U000c6d9f\\U0005c640',\n       (25473, -32085): '\\U0004d5a9',\n       (12661, -1021): '\u00e2',\n       (11917, -18832): '\u00f2\\U0005f4cf\u00f1\u00f3',\n       (111, -49): '\\U000b5e26',\n       (-7681, 300): '',\n       (8_819_372_698_885_756_649, -10369): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-4793, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 3.84833255101371e+168,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.834371741077285e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.3712849250830673e+308,\n        constraints={'min_value': -9.983119915850375e-229,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.3712849250830673e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000bfb2b\\U00061189\\U00057bca\\U00057b21\\U00057b5b\\U00057afe\\U00057aed\\U00057ba6\\U00057b8d\\U00057b92\\U00057b2a',\n        constraints={'intervals': IntervalSet(\n             build_intervals([359128, 483556, 729221, 825489, 932109]),\n         ), 'min_size': 1, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-12645,\n        constraints={'min_value': None,\n         'max_value': 13654,\n         'shrink_towards': -1148,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.47231265202500927},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [137463, 352920, 612414, 880245, 1014166, 1053796, 1092645],\n             ),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xf8\\xad\\xe7\\x18\\xd2\\x9c\\x0f\\xafM\\xf1\\x82\\x9d\\xf7\\xd2\\x93\\xec\\xfe\\xb5\\xe2GZ^\\x03\\x08`\\xde\\xdaE\\x9d\\x02\\xb1\\x1d\\x00\\xcc\\xe6\\xc2\\xdea\\xca\\x89\\xf0\\xb9Y\\x06E/',\n        constraints={'min_size': 35, 'max_size': 135},\n        was_forced=True,\n        index=None)),\n      length=-115797346,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('a', 1, 1)),\n                                    (('b', 2, 2), ('c', 0, 0)),\n                                    (('b', 3, 0), ('b', 1, 0)),\n                                    (('c', 1, 3), ('c', 2, 1)),\n                                    (('c', 2, 1), ('c', 1, 0)),\n                                    (('c', 2, 2), ('a', 0, 3)),\n                                    (('c', 2, 3), ('b', 2, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('-\\U000ebf89', 0, 0, 'reason'),\n      expected_traceback='\\x04\\x95\u00e8=hS\\U000a94e1',\n      has_discards=False,\n      target_observations={'\\\\\u00cd\u00e7\u00eb\u00bd\\x02\\x93\u00e9\\x95\u00e5\\U000e0365\\U000341c3\\U001057b2e\u00bf': -92,\n       '\\x1e6e\\U000ae00cU\\x1e*': -2.8350021765129184e+16,\n       '\\x03YG8\u00d1_\u00af': -1.1568738711374128e+198,\n       '': 7316849464129219.0,\n       'N\u00e8\u00dd': -3.685582957563757e+16,\n       '\\x13\u00d4\u00a7': 11932},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-29330, 14699),\n       (-27231, 30899),\n       (-25940, -32081),\n       (-21226, 77),\n       (-16295, 115),\n       (-12802, -6612),\n       (-5241, 10430),\n       (-4729, -32472),\n       (44, 6),\n       (60, -13582),\n       (9505, 119),\n       (13412, -78),\n       (29502, -9001),\n       (31528, -30906),\n       (1_058_759_778, 5517),\n       (1_645_459_758_757_694_953, 512)},\n      slice_comments={(65535, 1_557_969_891_204_376_279): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x106d0c800>, min_size=0, max_size=inf).map(tuple), length=one_of(nothing(), nothing(), integers()), has_discards=one_of(nothing(), nothing(), booleans()), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason')))), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text()))).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.001796333002857864,
          "overall:gc": 0.0,
          "generate:args": 0.01971308415522799
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878942.886961
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=113, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=7687,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -62,\n         'weights': None},\n        was_forced=False,\n        index=None),),\n      length=-7471,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 1, 2),\n                                     ('a', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-51_094_733_181_529_469_395_217_620_633_127_977_983, 3),\n       (-2978, -31400)},\n      slice_comments={(-17653, -21364): '\u00f5eP', (14707, 22738): ' k3'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-3847, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.25491948503631084},\n        was_forced=True,\n        index=None),),\n      length=23,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'none': -2.1510149937272364e+222,\n       '': -1506,\n       '\u00c6G;\\U00055fe3\\x8f': 2322017551726416.0,\n       'W2\u00e8': 0.0,\n       '\\x8bS\u00ca': 15280,\n       '\\x84\u00de': 8102,\n       'd\u00da\u00d4': 0.5,\n       '\u00b9=e\\U000f2c5f\\x18': 94},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-15200, 10761): 'W c\u00e5\u00d0\u00ed',\n       (-9323,\n        -40_008_343_976_442_026_326_630_366_919_282_796_548): '\u00ce\\U000ac2f1\u00f1\\U000b2f17AL\u00dfU\\U000bc960\u00bb\u00fb',\n       (3679, -13365): '-Infinity',\n       (-97_619_004_594_719_203_940_790_876_870_818_146_991,\n        8): '\ud808\ude92\\x81w/\u00fc\u00c5\u00cf?\u00b6\\U0007811b\u00a8\\x83',\n       (92, 20762): '\ud863\udf10',\n       (-23480, 20629): '',\n       (2006, -38): '\\x8e\u00cf\\U000c660c',\n       (-169_441_241_182_548_379_172_436_543_463_045_692_738, -10354): '|\u00b9T\u00e2',\n       (-20969, -1_898_537_121_311_788_602): ';',\n       (-11_011_315_427_099_069_781_900_796_330_167_732_018, 1024): 'a',\n       (6_754_074_748_878_262_639_705_749_845_717_479_610, 57): '\\U0007bdf4'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-11, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xe0\\xce',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -2.8324409317960628e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.663428132403999e+207},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 1.1,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.3435010268265186e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.38224252002024584},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9536163177340009},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xb0',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0003c59a\\U0003c56e\\U0004041c\\U00053c39',\n        constraints={'intervals': IntervalSet(\n             build_intervals([247132, 589845, 639216]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-42,\n        constraints={'min_value': -109,\n         'max_value': None,\n         'shrink_towards': 23857,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=-17011,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('b', 2, 0)),\n                                    (('a', 3, 0), ('a', 1, 1)),\n                                    (('b', 0, 3), ('b', 3, 0)),\n                                    (('c', 2, 3), ('a', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\U0004c667Z', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(29969, -23671): '5\ud84b\ude22\u00c37\\U0006c659N\u00fc\\U00066d8aZ\\x05',\n       (16094, -12682): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-6405, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.5565195754945923e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=1_908_136_250,\n        constraints={'min_value': 1_908_136_176,\n         'max_value': None,\n         'shrink_towards': -1_599_119_868,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=-20772,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('a', 0, 2)),\n                                    (('a', 1, 1), ('c', 0, 2)),\n                                    (('a', 2, 1), ('a', 0, 1)),\n                                    (('a', 2, 1), ('b', 1, 0)),\n                                    (('a', 2, 1), ('b', 3, 3)),\n                                    (('a', 2, 3), ('b', 0, 1)),\n                                    (('a', 3, 0), ('b', 0, 1)),\n                                    (('a', 3, 3), ('a', 3, 1)),\n                                    (('b', 0, 2), ('a', 2, 0)),\n                                    (('b', 1, 0), ('a', 2, 1)),\n                                    (('b', 1, 0), ('b', 0, 2)),\n                                    (('b', 3, 0), ('a', 3, 1)),\n                                    (('b', 3, 0), ('b', 1, 1)),\n                                    (('b', 3, 1), ('b', 0, 0)),\n                                    (('b', 3, 2), ('a', 2, 3)),\n                                    (('b', 3, 2), ('b', 1, 2)),\n                                    (('c', 0, 0), ('c', 2, 3)),\n                                    (('c', 0, 2), ('a', 3, 3)),\n                                    (('c', 1, 2), ('a', 1, 1)),\n                                    (('c', 1, 2), ('b', 1, 2)),\n                                    (('c', 2, 0), ('a', 3, 2)),\n                                    (('c', 2, 0), ('c', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('4',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '\\x01',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='',\n      has_discards=True,\n      target_observations={'not_a_function': 31968,\n       '\\U000ac538\\x92g#F\u00b8\\x9d': 62,\n       '\u00e0wn\\U000ed190(\u00cd\u00eb': 1117,\n       '\u778d\\x04|\\U0003f890!\\U00090a17\u00f9\u00f3': -6.557526076140429e-241,\n       '0x': 28122,\n       '\u00cd/': -2.281310606104089e-111,\n       '\\x1d8': -117},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-17589, -97),\n       (-36, -19235),\n       (25, 2_772_992_234_194_984_618),\n       (47, 29832),\n       (82, 512),\n       (101, -15608),\n       (6749, -72),\n       (31137, 29136)},\n      slice_comments={(1024, -17739): '\\x91u\\\\6\u00ef\u00cb',\n       (-24280, 23420): '\u00c1\\\\h\u00f1\\x00',\n       (15, -6706): '',\n       (99, 126): '\\x91'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-15104, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=46_589_371_078_880_306_617_666_339_112_137_279_968,\n        constraints={'min_value': -10813,\n         'max_value': 150_718_208_644_237_235_670_965_943_614_595_922_603,\n         'shrink_towards': 0,\n         'weights': {32691: 0.22277354389853835,\n          21543: 0.16039386789802956,\n          28_763_499_694_506_966_609_771_510_353_539_462_033: 0.16867090693018888}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'0U\\xe7/\\xa0\\x03\\x86\\xc4\\xb2\\x02\\xdaW\\xafv\"9\\xfd\\xf3\\x1f\\xb0#\\x9a,qiR\\xabo#N)\\x1ev\\xd3\\xdcV\\x0f\\'\\xe7\\xf2?q\\xe128-\\xeb<',\n        constraints={'min_size': 47, 'max_size': 108},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xe5U\\xfb\\xd4\\xed\\xc4\\xdf\\x86\\xf2\\x8e\\x9a]H\\xf9\\x03[\\xfc\\xf0\\xbbK\\xa0\\xa7\\x84]\\xc3u\\x96\\xaf/\\xd4PB\\xbb\\x97\\xe0*\\x8e\\xc4\\xdd\\xfbF\\xe8O\\x08v\\xe9\\xab\\xaf\\x03',\n        constraints={'min_size': 25, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=1024,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('a', 2, 0)),\n                                    (('a', 2, 1), ('a', 3, 3)),\n                                    (('c', 1, 3), ('b', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\x13\\x07>x\\x92\\x99',\n      has_discards=True,\n      target_observations={'\ud835\udc7b\ud835\udc89\ud835\udc86 \ud835\udc92\ud835\udc96\ud835\udc8a\ud835\udc84\ud835\udc8c \ud835\udc83\ud835\udc93\ud835\udc90\ud835\udc98\ud835\udc8f \ud835\udc87\ud835\udc90\ud835\udc99 \ud835\udc8b\ud835\udc96\ud835\udc8e\ud835\udc91\ud835\udc94 \ud835\udc90\ud835\udc97\ud835\udc86\ud835\udc93 \ud835\udc95\ud835\udc89\ud835\udc86 \ud835\udc8d\ud835\udc82\ud835\udc9b\ud835\udc9a \ud835\udc85\ud835\udc90\ud835\udc88': -3.4554162566174136e+16,\n       '\u00d1K\\U0008d0fd[\\x83\\x025\\U001037ba\\x0e\\U0004b56f\\x1f\\x92p\\U0003e910\\x89)\\r': 1024,\n       '': -7.181655859884511e+16,\n       '\u00cb\\U00102d90<Y': -30749},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(20772, 109), (2_602_619_005_835_362_076, 64)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-81, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\u0402\u03f2\u04e0\u0437\u04ba\u0426\u04bd\u0449\u03ef\\U00080684\u03fe\u0476\u03ed\u0493\u0428\u0483\u0450\u04a7\\U000141df\u0415\u7d95\ud821\uddfb\u042f\u043c\u04aa\u0455\u0414\u0415\u04bf\u042f\u04c5\u0461\u04d4\u04c1\u9bef',\n        constraints={'intervals': IntervalSet(\n             build_intervals([1000, 120041, 302263, 598052]),\n         ), 'min_size': 24, 'max_size': 70},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0006ad03\\U000d192e\\U0006ad2c\\U0006ad18\\U0006ad99\\U0006acff\\U0006ad64\\U0006ad32\\U0006adb8\\U0006acfc\\U0006ad7f\\U000ea237\\U0006ad9f\\U0006ad2b\\U0006ad9b\\U0006ad43\\U0006bec5\\U0006acdf\\U0006ad84\\U0006ad0c\\U0006acea\\U0006ad0a\\U0006ad15\\U0006ad93\\U0006ad7e\\U0006adb2\\U0006ad57\\U0006ad54\\U0007dd93\\U0006ada5\\U0006ad03\\U000f9756\\U0006ad7c\\U000d1c02',\n        constraints={'intervals': IntervalSet(\n             build_intervals([437466, 576575, 854761, 1032496, 1060327]),\n         ), 'min_size': 32, 'max_size': 132},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xc7J\\x11\\x0fK>\\x96\\xe9Y\\x9fY@',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x0b\\xf7`\\x8b\\xdf',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=13_807_024_350_623_583_764,\n        constraints={'min_value': 4_949_563_676_104_778_701,\n         'max_value': None,\n         'shrink_towards': -7634,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00038670\\U00038701\\U0003869d\\U00038648\\U00038678\\U0003a0ec\\U0003862a\\U000386be\\U0003866d\\U0003868e',\n        constraints={'intervals': IntervalSet(\n             build_intervals([230946, 523228, 742277]),\n         ), 'min_size': 10, 'max_size': 110},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xcd\\x94\\xc7\\x96\\xc9(',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u015f\u01e8\u0173\\U00034a43\u01dd\u0159\\U000e17de',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [300,\n                  18466,\n                  152232,\n                  331092,\n                  336082,\n                  365129,\n                  478182,\n                  497056,\n                  513726,\n                  584616,\n                  638521,\n                  651280,\n                  848276,\n                  931954,\n                  987103,\n                  1016845],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=49,\n        constraints={'min_value': 29,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'AZ\\xfa\\xb2p\\x02\\xa5l\\xc0=\\x9cb\\x9c\\xea\\x11\\xdbP\\x1c\\xc89\\x8f\\xd1\\xe3\\x17\\x9eR\\x15a\\xf2m\\x90\\xe9\\xb5>\\x04xr\\xf9\\xa5k\\x8a\\xd0\\x9a\\x11gg\\xb3\\xc3\\xf2.)\\x0b\\xdb\\xb5\\x01\\x06H\\xe2\\xb7\\xec\\x8c\\xaf\\x1dA\\xc7Xk\\x85\\xa9\\xa5\\xd1<\\xf3\\x01\\xcc}\\xe7.\\xa18\\x90',\n        constraints={'min_size': 36, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.02035715314030107},\n        was_forced=True,\n        index=None)),\n      length=-1_242_978_670,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 3),\n                                     ('b', 1, 1)),\n                                    (('b', 1, 0), ('c', 0, 2)),\n                                    (('c', 3, 1), ('a', 0, 0)),\n                                    (('c', 3, 3), ('a', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\\U000d9703': 63,\n       '\u00bc': -5.94382952891652e+16,\n       '\\x0bR5\u00fe\\U000e9ad0g>\u00fe4z\u00fe\u00cf': -6055,\n       '': -4.883425414457566e+16,\n       'Ks\\U000f708d\u00ff\u00e0': -15296,\n       '\\U000caadb\\U00033f46O\\x95\u00e2Y\u00a5\u00a5': 512},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-31444, 9460),\n       (-28013, 24058),\n       (-22693, 25791),\n       (-21732, -9700),\n       (29, 5320),\n       (87, 8682),\n       (512, 79_649_432_579_075_079_672_804_373_399_140_116_202),\n       (9898, 12565),\n       (30405, 21487)},\n      slice_comments={(17539, 12069): '\u00af\u00d7a;\\x7f9\u00f0',\n       (3273, -13723): '',\n       (26210,\n        -59_316_645_307_063_159_775_121_653_650_266_532_326): '\u00c8\u25ef)\\U0003ec56\u00c2\\x86O\\x91{',\n       (2215, 2979): '\\U0010fc8f\\x19\u00bc\\U00066e52\\U000f276d\u00b4\\x10',\n       (93, -30062): \"/2\\x12\u00f0\\U000c30bcx\u00e1\\U000c1e2b'mYy\\U000be430\u00e8\u03ba\u00f0unt\u00acH\",\n       (5_817_770_343_489_765_799, 103): '\u00b2\\x9e\u00f5\u00c3;z\\x8b:\\xa0',\n       (5356, 300): '\u00ecYtEp\u00c7\u00e2\\x99\u00b1',\n       (1_462_571_439, -117): '\u00a2'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-25956, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xdb\\x1b\\x9eY\\xcd\\xc9\\x96\\xff\\xc5\\x92\\x05\\xb1G8\\xc6\\n\\xca\\x12\\x9b\\xb7A\\xf5d24\"\\xbe\\x9fu\\xf31\\x11\\x02\\xba\\xfe\\xc8\\xed',\n        constraints={'min_size': 0, 'max_size': 41},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u27fb',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [9999,\n                  63745,\n                  253213,\n                  334766,\n                  356832,\n                  456995,\n                  588715,\n                  761541,\n                  986819],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x97-<\\x1a\\xb2',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'S\\xf6`',\n        constraints={'min_size': 0, 'max_size': 55},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -5.419025174550859e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 9007199254740992.0},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([1000, 241813, 757329]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=8.913324054646551e+307,\n        constraints={'min_value': 1.5227606836510752e+16,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.6579221211102504e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00099577\\U0008c861\\U0008c84a\\U0008c8a9\\U0008c85b\\U0008c893\\U0008c86f\\U0008c879\\U0008c919\\U0009fd69\\U0008c8e1\\U0009a0af\\U0008c8a8\\U0008c8e3\\U0008c896\\U0008c87e\\U0008c862\\U0008c893\\U0008c8b4\\U0008c943\\U0008c8ed\\U0008c932\\U0008c92f\\U0008c8bd\\U00093663\\U0008c91c\\U0008c874\\U0008c892\\U00092a82\\U0008c847\\U0008c91c\\U0008c86a\\U0008fcad\\U0008c904\\U0008c847\\U0008c8e0\\U000a00b0\\U0009e180\\U0008c92f\\U0008c8a3\\U0008c90e\\U0008c8ee\\U0009cf28\\U0008c87a\\U0008c8df\\U0008c861\\U0009c791\\U0008c922\\U0008c8fc\\U0008c930\\U0009c5e5\\U0008c876\\U000a09fc\\U0008c8a6\\U0008c8f6\\U0009d812\\U0008c884\\U0008c8b5\\U0008c901\\U0008c938\\U0008c861',\n        constraints={'intervals': IntervalSet(\n             build_intervals([575557, 658418, 756220]),\n         ), 'min_size': 31, 'max_size': 131},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000b65b5\u03ff\\U000c2b35',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1000,\n                  49525,\n                  672391,\n                  799660,\n                  836763,\n                  931213,\n                  1045701,\n                  1104305],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 43},\n        was_forced=False,\n        index=None)),\n      length=-2_009_690_899,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 2),\n                                     ('c', 2, 0)),\n                                    (('c', 0, 3), ('b', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('j\\x84', 0, 0, 'reason'),\n      expected_traceback='\u00c7\u7676\\U000da020\\x9e\u00a2',\n      has_discards=True,\n      target_observations={'\u1701': -29238},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-144_762_481_457_592_527_760_601_779_470_138_556_520,\n        -22639),\n       (-31546, 4),\n       (-28157, 70_820_660_542_488_033_714_179_726_485_753_225_306),\n       (-8979, 8192),\n       (-7643, -6_969_554_978_002_582_378),\n       (-117, 4196),\n       (-53, 4206),\n       (-40, 16502),\n       (-26, -26495),\n       (-20, -29362),\n       (63, 512),\n       (66, -126),\n       (72, 31851),\n       (98, 28617),\n       (113, 13283),\n       (124, -22625),\n       (300, -13195),\n       (404, -44),\n       (28525, 24308),\n       (31410, 21430)},\n      slice_comments={(65535, 4837): '\\x98\\x13\u00e2]\u00a2l', (-36, -29035): 'O'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=7028, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-19267,\n        constraints={'min_value': None,\n         'max_value': 111,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'g\\xf8\\x11\\x98A\\x10~\\xe6\\x8f',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xfe\\x9b~',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"\\x93\\xcd\\xda\\x86\\xef\\xd2\\xb1\\xdf:##^\\x93\\x0e'\\xf9\\x10\\xcd\\xee\\x02Q\\xaap\\xa2O\\xbe\\x84yaA@\\xc7\\xa8\\xe0;\\xbe\\x83\\xf8q\\x10t\\x81S\\xd4\\xaeDk\\x16\\x99\\xfd\\x16ST\\x9f\\xc3\\x12\\x97[^\\xfd\\xee\\x8c\\x07Z\\xfa\\x0b\",\n        constraints={'min_size': 45, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0508518793610422},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.3299713117779962e+111},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=inf,\n        constraints={'min_value': inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.715992963884469e+307},\n        was_forced=True,\n        index=None)),\n      length=-11043,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 2),\n                                     ('c', 0, 2)),\n                                    (('b', 1, 3), ('a', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\U000a02d5\\x83aL\u00a8\u00b5\u00c8',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'': -1.3220531488452132e+16,\n       '$': 5.963635553190493e+16,\n       '\\x983\\x93': 7.207938739853743e+302,\n       '.\u00b3': 21883},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1323, 21854),\n       (-32, -17651),\n       (38, -20233),\n       (4049, 27402),\n       (9716, -111)},\n      slice_comments={(31290, -19140): '\\x9ai\\U000aa5a4>\u00f2\\x9b\\x1a\ud86b\udf7c\u00a2',\n       (61, -13194): '\u00b2\u00d9L',\n       (2454, -100): '\u00d4\\U000fdb73\u00cc\\rk\u00f4\u00f0\\U001067b7',\n       (1024, 20615): 'c\u00cfp\\x83j\\x80\\U0001ef22>{\\U000cfda8\\x15',\n       (-32154, -64): '\u00f7\\x02\u00a5\\U0005783b\u00ae\\x96oP\\U000c089c',\n       (-68, 51): 'P\\U0008de3bN\u00df\u6598',\n       (21725, 1_803_336_114): '\u00d2\u00cfS\u00baU\\U000c627a',\n       (11103, -23896): '\u00df8i',\n       (-2518, 2): '\u00c9\\U0004e45b\\U000e40e4\u00fee\u00e2',\n       (-271140624, 25147): '6E',\n       (-7, 50): '0/0',\n       (2_097_458_178, -10369): ')\u00f8\\n',\n       (-9, -19741): '5\\U00074aba\u00f92',\n       (3629, -26624): 'T\\U000b1d8d<\\U0006a4fb\u00a6=',\n       (771664448, -23): '\u00a4\ud802\ude11'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=11724, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -inf,\n         'max_value': 0.5,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.1621159942451692e+308},\n        was_forced=False,\n        index=None),),\n      length=-19900,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('a', 1, 1)),\n                                    (('a', 1, 0), ('b', 2, 0)),\n                                    (('a', 1, 2), ('c', 2, 0)),\n                                    (('a', 3, 1), ('b', 2, 2)),\n                                    (('b', 1, 0), ('b', 1, 2)),\n                                    (('b', 2, 1), ('c', 0, 0)),\n                                    (('b', 2, 2), ('a', 1, 1)),\n                                    (('c', 0, 1), ('c', 1, 2)),\n                                    (('c', 1, 0), ('a', 2, 0)),\n                                    (('c', 1, 3), ('c', 0, 3)),\n                                    (('c', 2, 0), ('a', 2, 0)),\n                                    (('c', 2, 3), ('b', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\u00ea',\n      has_discards=True,\n      target_observations={'\\x9e\u00a3\\U0002f493{%\\ue0a2\u00b7\u00c1\\x904\\U0003f12e\\U000915b6\\x93\\U000b8d33\\x8c\\x81\u00c3\u00e8': -4.203323023479655e+16,\n       'h*x-g': 18009,\n       '\u00b0\\x17\\U0008cc73\\U0007358a\\x19\\x0e': 6.3181145134218456e+16,\n       '': -32,\n       'undefined': -1.1584197253610366e-26,\n       '\u00de\\U00071e22\\x03\ud84f\udd74\u00b8L\\x14e\u00df\\U00034edfl\u00db\\x1e\u00c9': -2396,\n       '\\U000d48b4\u00b1wI=\\U0003d422': 5.432043501207377e+16,\n       '\u00fc`IF\\x16 \u00d0\u00c8Z\u00de/\\U000a5b56\\x83\u00d4\u00fc9`\\x8c\\U000a180f\\U0008a3cd\u00e9u': 67_215_873_279_430_168_645_020_357_832_321_864_184,\n       '\\x8e\\x93X\ud873\ude80\u00db_': -1.2488879387257396e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-26076, -9708),\n       (-8882, -23721),\n       (-6155, -9275),\n       (-108, 9),\n       (-7, -21928)},\n      slice_comments={(20024, 10436): '\u00c3',\n       (3_026_423_630_395_743_944, 23): 'O1',\n       (17058,\n        -4853): 'O\u00c1\u00ac\\x8b\\n\\U0005ed3d\\x9d\\U0010b59eTw\\U000cf46c\u00c0-\u00aa4\\U000bc3ae',\n       (6896, 9999): '(\u00f9\\r',\n       (1000, -7556): '|\\U00070a0c\u00c5\\x97'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0113489999785088,
          "overall:gc": 1.5625031664967537e-05,
          "generate:args": 0.10223167081130669
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878954.348877
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=110, context=(), group_elems=()),\n      nodes=(),\n      length=-93,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 2),\n                                     ('c', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'0': 3.683843500253966e+16, '\u00cc\\x9bAk@': -8764},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_530_145_938,\n        -51_430_208_183_486_245_843_611_794_571_328_320_813),\n       (-237062671, 112_090_350_721_090_804_621_670_432_375_118_498_178),\n       (-28869, -5631),\n       (-23905, 470710906),\n       (-17128, 9396),\n       (-5520, 9999),\n       (31, -30377),\n       (94, -30660),\n       (14335, -2_323_616_012_275_964_716)},\n      slice_comments={(-888590669, 13988): '2a\u00eb',\n       (-1325, 3004): '\u00c5\u00ab\\x93R\u00c4\\x97I',\n       (-26455, -28): 'f\\U00109ec5\\x83\\x97$\"\\x88?',\n       (-27534, -12919): '',\n       (87, 4486): '\u00ca\u00ff\\x84\\x1a',\n       (31085, 24596): '\\U0004b712\\x80R',\n       (8_309_434_426_934_442_710, -61): 'n\\x0c\\U00094718\\x1a',\n       (23571, 79): '\u00a8_/\\U0003cdfc\\U000534ae\\U000e40ea\u00ea]3(\u00ec',\n       (9_865_637_155_056_147_337_153_247_814_687_279_039, 2226): '{\u00d52\u00c8\u00ebT',\n       (249704477, -8910): '',\n       (20785, -909): 'norecursedirs',\n       (-3602, -29115): '',\n       (-20569, -279171151): '&\u00f1.\u00e8\u00dc\\U00077b26S\u00c2\\x10\u00ca',\n       (-1_609_770_115, 19721): '\\x9c'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=36, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=1986,\n        constraints={'min_value': 114,\n         'max_value': 20337,\n         'shrink_towards': 0,\n         'weights': {1986: 0.9737109035495143}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xfa\\x86',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000b2463',\n        constraints={'intervals': IntervalSet(\n             build_intervals([729964, 831717, 923690]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=79,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 2, 3),\n                                     ('b', 0, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\x04\u00c6\u00e9&\\x9f\u00d4\u00d2\\x8eDr',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='',\n      has_discards=True,\n      target_observations={'\u00d7\\U0004291f\ud881\udeddK': -3907282451490456.0,\n       '\u00db\\x0b': 10195,\n       'C\\x9a\u00fatl\u00be.o\\U000d68cfz\u00fb': 5.935340416088603e-54,\n       '\\x9b\u00f4?S\\x02': 15992,\n       '\u00dc\\x10\u00a1': 1.664457039189047e+16,\n       '\u00e2.\u00ce\u00d8': -9849,\n       '\\x97\u00e1\\U00093a12k\\x18r\u00dd\\U00096220{\\x7f\u00e7D`\\U00042d6f': -6854,\n       '\u00d577\\x8a0': -5.154719162687025e+255,\n       'S\u00e2': 300,\n       '': 294578595,\n       '\\U00072ae1\\x1d\\x9b\u00f5^pG': 15428,\n       '\\x04': 1.8343416864521236e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-6_815_143_540_413_038_225, 8076),\n       (-5_160_334_689_329_537_145, 531399106),\n       (86, -8600),\n       (4804, 32),\n       (8192, -93)},\n      slice_comments={(13, 57): '',\n       (8192, -1_815_045_041): 'g',\n       (1_536_455_182_142_153_753, 31743): '\\U000ad009\\x19',\n       (9767, 5638): '\u00ffWY\u00e1'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=65535, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=8192,\n        constraints={'min_value': 1024,\n         'max_value': 9521,\n         'shrink_towards': 0,\n         'weights': {7399: 0.04542323715282232,\n          9387: 0.11431014419580342,\n          2445: 0.17003212968496034,\n          6221: 0.00885058797011557,\n          3710: 0.02563345945466282,\n          8617: 0.17701175940231137,\n          1024: 0.16413444248001155,\n          7805: 0.1145283606997626,\n          6043: 0.15103967807606003}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u00be(\u00e4\\U00054da4',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  512,\n                  74959,\n                  144575,\n                  146293,\n                  153266,\n                  167967,\n                  475298,\n                  809500,\n                  903547,\n                  1015570],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None)),\n      length=15,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('b', 1, 3)),\n                                    (('c', 3, 3), ('a', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [ExceptionGroup('\\x9c9\\U000d7826uy\u00bc\"\\x02n\u00df',\n                                     [UnicodeTranslateError('\\x188\\U000904eb\\x9f\u00cf\u00a3C\\x84',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         \"HY\u00bb\\U0004bf9f\u00f2\u00c4\\U00076c2br\u00a9\\U00103fdf\\U000c3d9b\\U0008b089\\U000796d9'd\",\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError('\\x02a\u00ef\u00ed\\x92$BOm\\x8d\u00d0\\x96\\U000fb66f\u00b1\u00d1',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeTranslateError('\u00c4b\\x00/',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         'M',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\\U000398e6Y',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('\u00df<\u00ca\\t~\\U0005e1ab\u00e1',\n                                            0,\n                                            0,\n                                            'reason'),\n                      ExceptionGroup('\\U00085967\\x9b\u00aa\\x82',\n                                     [ExceptionGroup('F\u00c6\\x06\\U00058602a\u00fd\\x8a\\x97\u00d8',\n                                                     [UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      ExceptionGroup('\\x14{2\u00bd',\n                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                         ',\\x9a\u00a7',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')]),\n                                                      ExceptionGroup('\\x90\\U000cf8b3\u00af(\u00bb\\U000ac94d',\n                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                         '',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeTranslateError('uF\\U00102a84',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      ExceptionGroup('=\u00c2LZ\\x12u\\x89\\U0005d6fd\u00casO\u00f8',\n                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                         '',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      ExceptionGroup('Z\u00cdT\u00d5\\U000788fe',\n                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                         '7\u00dd',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason')])]),\n                                                                      UnicodeTranslateError('<\ud85a\udc81\\U000cfdad',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason')]),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         'T',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')])]),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\u00ec\\x16r\\x08\\x95\\U00046a20\\x93\\U00105b0a\\U000cefccI\\U000e85d7\u00f4',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'teardown': -3.1996689681960202e+190,\n       '\u00d7\u00b0>\\x9eE': -118,\n       '\\x8d3;': 8387,\n       '\u00e7\\x16)\u00f8[': 0.05},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-44_055_551_125_087_969_906_494_752_366_045_470_332,\n        17650): '\\U000f6d67'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x106d0c800>, min_size=0, max_size=inf).map(tuple), length=one_of(nothing(), nothing(), integers()), has_discards=one_of(nothing(), nothing(), booleans()), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason')))), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text()))).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from integers(1024, 9521).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0008678750018589199,
          "overall:gc": 0.0,
          "generate:args": 0.029291042068507522
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 2,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 2,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878909.099184
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1196690459720239034, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-6045,\n        constraints={'min_value': None,\n         'max_value': 9388,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7591245867074596},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 5.2490976593792565e-136},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=82_872_983_460_284_085_870_900_517_233_932_940_561,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1.5063645774946224e-161},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-6337,\n        constraints={'min_value': -18806,\n         'max_value': 9999,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=12229,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 3),\n                                     ('b', 3, 2)),\n                                    (('b', 1, 1), ('a', 1, 1)),\n                                    (('b', 2, 0), ('b', 1, 1)),\n                                    (('b', 2, 1), ('c', 1, 0)),\n                                    (('b', 2, 2), ('c', 3, 1)),\n                                    (('c', 0, 1), ('b', 3, 3)),\n                                    (('c', 0, 2), ('c', 2, 0)),\n                                    (('c', 2, 0), ('b', 0, 0)),\n                                    (('c', 2, 0), ('b', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\\U000ffbe4\\U000866aa8\\x99\\x13',\n      has_discards=True,\n      target_observations={'U\u00ba': -51_317_520_613_460_039_787_672_139_356_547_074_800},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-246503996, -4_631_389_786_507_736_192),\n       (-18617, 25166),\n       (-17491, 61),\n       (-14861, -31),\n       (-11990, 121),\n       (-7470, -14919),\n       (-1236, 1695),\n       (-98, 16342),\n       (-33, -5_688_794_517_569_191_566),\n       (7442, 77),\n       (23335, 50),\n       (27280, 18187),\n       (407786876, 102),\n       (964362749, 31771)},\n      slice_comments={(512, 121): '\\U00069b4bj\u00d1\\x0f9', (32414, 7772): 'r'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-1234053218206832392, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=10901,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 65535,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.2345146592306665e-92,\n        constraints={'min_value': 2.2724328313093063e-172,\n         'max_value': 4.2317136827472885e-92,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.2250738585e-313},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u0243\u02b0\\U0003a2f2\u02a0\u02e4\u020e\ud858\udcf5',\n        constraints={'intervals': IntervalSet(\n             build_intervals([512, 405487, 478959, 522627, 679401]),\n         ), 'min_size': 5, 'max_size': 104},\n        was_forced=True,\n        index=None)),\n      length=26,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 2),\n                                     ('b', 0, 1)),\n                                    (('c', 1, 1), ('b', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\U00075cb5\\U0007be10',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='{~',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-98, -9976)},\n      slice_comments={(-3193,\n        -3_799_989_376_086_351_804): '\\U0010104b\u00dc\\U00079eb3',\n       (27021,\n        1_008_077_964_690_785_413): '\u00d9D\\U000ce32f \u00cf,\u00b9\u00c1\\U00100e29\\x1bk\\x95\u00c6\ud81a\udd36\u00b1w',\n       (12590,\n        4577): '\\U0009ccaa\\U000ee12f\\t\\U000ab5df\\U0008a05a\\U000c23ff4\u9f8c\u00f4X/\\x9a2\u00b2\\x01\\x92\\x94\\x015\\U000f5862^-\\x8b^/\\x1a\\U0010e1ba',\n       (-627485876, 21552): 'g\\U000e35c3',\n       (57, -25199): '\\U000a08a2o_\\U000eb5e1\\U000a064d\\U00091504',\n       (28530, 42): '\u00ce\\U000d98fc\u00faD\\U000b6d43',\n       (15517, -72): '\\U000a1001'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-25, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9810725890525369},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=43188,\n        constraints={'min_value': 27987,\n         'max_value': None,\n         'shrink_towards': -12803,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=61,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 2),\n                                     ('c', 0, 3)),\n                                    (('c', 3, 0), ('b', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\ud845\udc4b', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00e1?!&P': -2125,\n       '\u00a56~K': 5.913818058467336e+16,\n       '\u00ff\\x9c\\t': 3.941076810742293e+16,\n       '\u00e8\\x9a\\U000da478L\\U00098c8d\u00a3W\u00aa\\x89c': 3_954_623_404_773_781_148,\n       'FALSE': 0.05,\n       '': -1.163380059688237e+16,\n       '\u00d9\ud850\udf11': 9815963236275152.0,\n       '+\ud874\ude50\u00c6\\U000cd92ef\\x90\\\\\u00e5': -4877,\n       '\\x871E\ud867\ude34\\x0e\u00c2?': -1_920_873_859,\n       '\u00da\u00e8\u00db\\U000b18636m@': 3.7476173226197176e+16,\n       '\u00e9\u00cbW\\U000b24c0': 20547,\n       '\\x8f\u00f3\u00c1\u1517\u00e7\\U0004b2dd\u00c3\u00a9\\U00084b5a': 42},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-5_546_613_802_336_427_822, 9979),\n       (-14358, 19955),\n       (-46, -6169),\n       (85, 6535),\n       (106, 118),\n       (106, 2966),\n       (10652, 11),\n       (15720, 5_392_538_581_392_425_503),\n       (29349, 24946),\n       (124_384_591_903_730_871_946_700_559_217_826_587_030,\n        -7_437_763_586_026_150_659)},\n      slice_comments={(-107, -9902): '9\u00fd\"',\n       (15033,\n        -8_165_980_575_633_793_298): '\\x03\u00d3\u00eb\\U000495d8\u666ba\\U00047a9e\\x98\\U0003a05c\\U000f6cac\\U000e3933\\U000acaed\u00c2\u00ff\\x08\u00ea\\x94c\\x0f\\x06'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=10676, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\x00\\xaeU\\xf6\\xe1\\xd7\\x88\\xa8\\xbf0\\x81MDF\\xd0',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0005c4a5',\n        constraints={'intervals': IntervalSet(\n             build_intervals([377895, 931019, 1114110]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=5.360512381930099e+307,\n        constraints={'min_value': 6.27847437048221e+16,\n         'max_value': 1.4585013486843973e+308,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.360512381930099e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.07370664840749443},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.42735661657335455},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 5e-324},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.19619995245531335},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.6776522371950833e+307,\n        constraints={'min_value': 5.138746109351722e+16,\n         'max_value': 1.5005147528948052e+308,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 7.204547058254132e+306},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00081960\\U0008195b\\U000819d1\\U0009daaa\\U00095d1f\\U000819c7\\U000819a0',\n        constraints={'intervals': IntervalSet(\n             build_intervals([530758, 723008, 812975]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -1.5537752176197859e+100,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.354946970008505e+16},\n        was_forced=False,\n        index=None)),\n      length=20430,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'nil': 2339,\n       '\\x02\\x17}G\u00e5l\\x04d\\U00051a2c\\U0006d9b7\\U00064652': 19865,\n       '': 18890,\n       '\\U0005a507T\u00ae?': -1.2966248624813113e+29},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-22919, 103),\n       (-20712, -10135),\n       (-82, 1955),\n       (431423155, -17034)},\n      slice_comments={(-112,\n        -131_266_189_809_732_731_558_178_817_264_652_369_857): '\\x9e\u00f1\u00fep\\x81',\n       (68, 1024): ',\u00a1\\U00033123\u00b9\u00a7\u00fac',\n       (-675633572, -16557): \"+\u00cf'\\U0004361ds\u00de\\U0004c7fc\",\n       (69, 20261): '\\U0010fcee',\n       (-98, 8_625_026_949_129_725_769): '\\U00070708\\\\~\u00b8\\U0003822b\u00be',\n       (34,\n        8_847_280_190_505_356_223_713_874_850_137_625_617): '5\u00db\u00d7*\u00ac\\x16p\\x99\\x07a\\x82C\u00f4\u00b1',\n       (36, 2540): 'all',\n       (11825, 5418): '\\U000ec043\u00eb\\U000a2658',\n       (-6387, 29393): '\\x8b\u00b8\"\\U000347d6',\n       (-17, -22189): 'Y\u00f9\\x1f\\U0005ed04',\n       (20968,\n        14_965_041_867_447_478_416_265_199_548_528_630_732): '\\U0001edcf',\n       (6179, -4619): '\u00d2g\\x94\u00d9B\\x8a2{A\u00c1\u00e2',\n       (-25, -30047): 'd\u00a4',\n       (-11,\n        14997): '\\U00076c47\\U00106914\\x16B\\U000a27ea\\U000aba9f\\x1c\\x83\\xa0\\x06\\x18\u00f9',\n       (-957, 65535): '\\x16\u00d0(U\u00d7',\n       (8352, 404): '\\U000ba42c.\u00a5\u00dc',\n       (32277, 19640): '\\x90EL\\U0009162c',\n       (-6206, 31969): ')@\u00a5\\U000a4ba6\u00a2o\u55b1\\x1e\\U0006ed76W\\xad',\n       (-425000127, -92): '\\x82\\U000c547f\u00fcJ\\x1b',\n       (19834, 21599): 'c\ud80c\udc03|\\x94\u00bd\ud80c\ude09\u00cd:',\n       (551847639, -141_806_095_276_624_097_093_232_883_753_737_451_078): '',\n       (23, -8_222_798_045_047_972_976): '\\U0009d377\\U0005382c\\x91\u5c82s\\x06'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=22499, context=(), group_elems=()),\n      nodes=(),\n      length=-41,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('a', 2, 3)),\n                                    (('a', 2, 1), ('c', 2, 2)),\n                                    (('a', 3, 1), ('c', 3, 3)),\n                                    (('b', 0, 0), ('b', 2, 0)),\n                                    (('c', 0, 2), ('c', 0, 1)),\n                                    (('c', 2, 3), ('b', 1, 1)),\n                                    (('c', 3, 2), ('b', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\x08\\x89\\U00071095\\x8f',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-558591277, 114),\n       (-17855, -3792),\n       (-13807, -21106),\n       (6751, -17825)},\n      slice_comments={(-37, -65): ']\\U0006d5e1\u00cba\u00ac\u00d4\\x9f\\x11\\x84',\n       (17964, 32290): '',\n       (-27506, 1000): '\\U0007ad09\u00c8\\x0b',\n       (-124, 1_702_468_744): '\u00a8F\u00f8[,U\\U001008a1\\U0005952bkgy',\n       (31994, -12): '\\U000a426d\u00ac\u00e6\u00aa'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-30254, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xaa',\n        constraints={'min_size': 0, 'max_size': 49},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -7972830709368926.0,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 8416417790323033.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-3_667_961_228_075_452_779,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -27603,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xcbgf\\xc8\\xf7v\\xb2)\\x1b\\xa9\\xb4{\\xff\\x98/\\x81\\x1a\\xfd\\xcb\\x9e\\x9a\\x9eD\\xd049\\x1a\\xc3\\xb3\\x92b\\x7f\\x0c\\xfd\\xb0\\xae\\xc7\\xc2',\n        constraints={'min_size': 22, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.0314438670303812e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': 1.703573127725454e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.65263096358116e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-82,\n        constraints={'min_value': None,\n         'max_value': -26,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=25464,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 18403,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 7.949226930393033e+298},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\x0bl\\U0008b2b9\\U001054d8\u00cf\\U00061202\u00c0',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1,\n                  32877,\n                  65862,\n                  85067,\n                  245703,\n                  299699,\n                  308866,\n                  436279,\n                  456674,\n                  694840,\n                  729985,\n                  888304,\n                  903159,\n                  944903,\n                  963543,\n                  1105896],\n             ),\n         ),\n         'min_size': 6,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u27f2\u272e\ud86c\udca4\u279f\\U0001ac59\u27d0\u274c\u277e\u27d6',\n        constraints={'intervals': IntervalSet(build_intervals([9999, 442111])),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=False,\n        index=None)),\n      length=184374672,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 1, 3),\n                                     ('a', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\u00ba',\n      has_discards=False,\n      target_observations={'\u00a3\\x89\\U000c7df8\u00bd\\x84\\U000d0b8a}': -8.544058425676962e+98,\n       '\\x96y': 4.509330254185011e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-82, 51),\n       (-15, -10989),\n       (29, -7141),\n       (123, 16),\n       (26210, 65535)},\n      slice_comments={(-30612, 109): '+\u00c9\\U00072535',\n       (28988, 859438983): '\\U000e9abd]omfq\\x84\u00b2[\\x12\\x07',\n       (38, -3_936_246_171_087_925_967): '0',\n       (-7, 19813): '-hg'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=81, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': 5.125082179351879e+281,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.038135939182451e-232},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud81d\udf58\ud81d\uded7\\U0009fe8c\ud81d\udf3e\\U000bc3fd\ud81d\udec2\ud81d\udea0\ud837\udf28\ud81d\ude78\ud81d\ude80\ud81d\udf36\\U00033e1b\ud81d\udeab\\U000b003b\ud81d\udefd\\U00050e0a\ud81d\udeb8\ud81d\uded8\ud81d\ude86\\U0001f1bd\ud81d\udf15\ud81d\udefc\ud81d\udf13\\U000a53af\\U0009f76e\ud81d\udecc\ud81d\udea3\ud81d\udf40\ud81d\ude66\ud81d\ude7c\\U00036cc5\ud81d\udef6\ud81d\ude91\ud81d\udf39\ud81d\udf20\ud81d\udec4\ud81d\udf1d\ud81d\udeb6\ud81d\udeba\\U000a3a34\ud81d\udecd\\U0003ec56\ud81d\udf3e\ud81d\ude8d\ud81d\udf06\ud81d\udecc\\U000c0f7e\ud81d\udf12\ud81d\udf39\ud81d\udf44\\U000a8e1b\\U000afbbd\ud81d\ude94\ud81d\udeaa\ud81d\udeda\ud81d\udf3f',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [95841,\n                  161233,\n                  189381,\n                  261498,\n                  308672,\n                  377851,\n                  631652,\n                  736049,\n                  764754,\n                  832113],\n             ),\n         ),\n         'min_size': 34,\n         'max_size': 134},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-6.224228320899446e+16,\n        constraints={'min_value': -inf,\n         'max_value': -1.0642255775334128e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 3.0875629921251444e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\u2062\u54c7\u20d1\\U000d2684\u2057\u20a6\u2030\\u2008\\U000d87cc\u2057\\u202e\u20b1\u20a4\\u20fe\\U0006ca75\u470c\u20ae\\ue69d\\U0006b44e\u20f0\u20d6\u2039\\u20cf\\u20fd\\u20c8\u20e7\u207d\u2014\\U0006f8d5\u2023\u20ef\u2032\\u206c\\u20c3\u2031\u2016\u20e7\u205c\\u2009\\U00065c96\u2023\u20e3\u94b0\u2056\u20dc\u2031\\u20c3\\u202d\u208d\u2091\\U0005d588\\U00066b09\u208c\\u20ce\\u20f6\\u2064\u201e\ub0e3\\U00012d7d\u20d0\\U00065771\u2046\u20c0\\u20ff\u20d0\\u2066\\u200c\\U000150dd\u2071\u204f\u20a3\u201d\\U000d366c\u6547\u78d0\\U0007417e\\u20ff',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [8192, 128549, 367603, 491704, 859412, 893139, 942423],\n             ),\n         ), 'min_size': 42, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00033a37\\U00033968\\U000339ab\\U000339ec\\U0005b24a\\U000339a4\\U000339be\\U00033a0a\\U000339c2\\U00033977\\U00033998\\U00033a21\\U00033a24\\U0004c350\\U000339bb\\U000339d8\\U000339a8\\U00033985\\U0006b7f5\\U0003399f\\U00033968\\U000339b4\\U0004babe\\U00033a10\\U00033a01\\U00033a08\\U0003395a\\U00033a2d\\U00033a33\\U00033a14\\U000339bd\\U000339a3\\U0003396d\\U00033a37\\U000738c0\\U0003397e\\U000339c6\\U00033944\\U00033a05\\U0003398a\\U000339f4\\U00033940\\U00085390\\U000339ab\\U00033962\\U000339ab\\U00033a28\\U00044288\\U000339dd\\U00086e7c\\U00072e72\\U00033978\\U00033949\\U0003398e\\U00036c6c\\U00033a19\\U000339c0\\U000339f9\\U000339fd\\U000339c5\\U000339f7\\U000339ac\\U0003399f\\U0004de1a\\U00033a31\\U00033976\\U00033941\\U00069a09\\U000339d8\\U000339af\\U00033990\\U00083ddd\\U000339da\\U00033986\\U00033a02\\U00033a08\\U000339f7\\U00033953\\U00033984\\U00033988\\U0004f6c5\\U00033a1d\\U00033982\\U000339f5\\U000339b4\\U000339b8\\U00051e06\\U000339a4',\n        constraints={'intervals': IntervalSet(\n             build_intervals([211257, 562013]),\n         ), 'min_size': 39, 'max_size': 139},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ua2ed\ua232\ua311\ud801\udefb\ua238\ua318',\n        constraints={'intervals': IntervalSet(\n             build_intervals([41513, 127924])),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-2.3441075609650904e+16,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.960464477539063e-08},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'!',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00036b25\\U00036ae9\\U00036af6',\n        constraints={'intervals': IntervalSet(\n             build_intervals([223976, 446617, 647943, 765535]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'Q\\xa1S\\x84\\x9f\\x8e%\\xb5\\x17R\\x10\\xe2\\xc7\\xf7\\x8b\\x98\\xda$`\\x1f\\r\\x9e\\x9a\\x0b\\x94\\xc3\\xc63\\x8bV0\\xaf\\xca2\\x83\\xa9\\xeeL\\x8e\\xddA$3\\xac\\x9d\\x0f\\x1b\\x95\\x86h\\x8d8\\t}\\x1f\\x11\\x13|\\x89O',\n        constraints={'min_size': 34, 'max_size': 63},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xe0\\x1a\\xc8\"\\t',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.2248593700986123e+308,\n        constraints={'min_value': 8.521368541424787e-145,\n         'max_value': 1.7105212156392124e+308,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2479203180474982.0},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xaft>\\x0c\\xd2[\\xea\\xd3S\\xbf\\xaf\\xc6\\x97 ~\\xd1)\\xac\\xf8?\\xc3\\x88\\xeaP\\x05\\xef\\x14\\xdd4\\xb9\\xf7ANX#\\\\S\\x871@r]\\xdd\\xa5\\xdd\\xe7\\xe9\\x19=S\\xad\\xca\\xa7_\\xc0\\xccg\\x8fF\\xa8\\xf6\\x87\\xf48\\x9f\\x00\\x19\\xb4\\xc8T\\xf1\\x97\\x03\\x0b\\\\ \\xb5\\xb5\\x1bO+292\\xdb\\x89\\xce\\xe6~g(\\x87$F\\xd7\\xdb6!g\\xdb\\xa4\\xa8\\xee\\xe5\\x12BQb\\xa6\\x89\\x94\\xb8',\n        constraints={'min_size': 50, 'max_size': 150},\n        was_forced=False,\n        index=None)),\n      length=-1_725_370_040_745_380_808,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('b', 3, 2)),\n                                    (('a', 3, 3), ('c', 1, 3)),\n                                    (('b', 3, 2), ('c', 3, 0)),\n                                    (('c', 2, 1), ('a', 3, 2)),\n                                    (('c', 2, 1), ('c', 2, 3)),\n                                    (('c', 3, 2), ('b', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00eb\\x98\u00b7*', 0, 0, 'reason'),\n      expected_traceback='',\n      has_discards=True,\n      target_observations={'\u00fc\\x85\\U000ad3e9\\x11\u00e9': -11503,\n       '': 9.347463561355634e+194,\n       '\\U000dc498\\x1e\\U000dc328\\x9f\u00c6n\\x97': -20_079_524_600_802_756_123_054_205_947_340_321_416,\n       '\\x0c\u00bb\\U00095a43\\U000685b3': 1,\n       '\u00b2': 1_276_807_888},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-21299, 28627),\n       (-35, 80),\n       (69, 31284),\n       (72, 9888),\n       (79, -653055537),\n       (30436, -29772),\n       (3_542_506_988_953_814_166, -7)},\n      slice_comments={(65535, 11890): '\u00ca'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-32, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.225073858507203e-309},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xc8\\xfe+\\xed\\x05\\x0b\\x92i\\xc5\\xe4\\xa8\\xdf\\xfa\\xf6\\r\\x13\\xa9',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=-19420,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('a', 0, 1)),\n                                    (('a', 3, 3), ('b', 0, 3)),\n                                    (('b', 3, 0), ('b', 0, 0)),\n                                    (('b', 3, 2), ('b', 3, 0)),\n                                    (('c', 3, 3), ('c', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='+v\\x1b\u00d9\\x01\u00b8\\U00010d96\\x8c\\x05\\U001063ed',\n      has_discards=True,\n      target_observations={'_\u00f8\\U000146b8\\x89\\x05YB\\x96a`\\x1d\\x84\\x8eP\\x14': -7_677_609_660_384_596_513,\n       '\u00c2': -3,\n       '\\U000c002c': 2.220446049250313e-16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-111, 169)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-21477, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=0.5,\n        constraints={'min_value': -5.053551592012865e+21,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 6.039877250903973e-247},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x9e}\\x7f~\\xe1\\xb6',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.011788511730657317},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.6134540009169643},\n        was_forced=True,\n        index=None)),\n      length=-2_791_149_146_534_485_021,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 1),\n                                     ('b', 3, 3)),\n                                    (('a', 3, 3), ('b', 0, 2)),\n                                    (('b', 2, 1), ('b', 2, 1)),\n                                    (('c', 1, 2), ('c', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\U000b0379u\\x17\u00b2\u00d7\u00aa\\U0007cf53\u00f3\\n\u00f2\u00a8\u00e5\\U000d0100\\x9d\u00bd\u00c9\\U000f0bef\\x1e\u00c9\\U0001c7a9Q',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback='\\x94\\x9cn\\x02\u00b4\\U00081996\u00df~\u00f4\u00ce\\x01',\n      has_discards=False,\n      target_observations={'\\x83\u00f7\\U0004c47a\u00a4\\U000a76f0\\U000fc306c?\\U0003df58P\\U0001db05\\U000a7e19\u00d7\\U0006d6e5\\U0005bc8e\\U00058b40': 4701715912144807.0,\n       '': 6.637908202562461e+16,\n       '\\U000c5c44-\u00cc\u00e8\u00cb$\\x07': -15830},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-5090, -30287), (23998, 1525)},\n      slice_comments={(13147, -27557): '\u00b4r\\U0008a3e4',\n       (1024, -14805): '\u00e4F\\U000a971dz\u00ca\\U0009304d',\n       (7372, 31): 'G\u00e7\u00d3+T}Z\\U000d1352&\\U0007e1db',\n       (30189, 16253): '|',\n       (93, -27860): '\u00f0=\ud872\udf21\u00aaa\\U0007bacf\u00cc',\n       (17322, 16768): '\\x88\u00c2\\U000e08d7'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1000, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=11731,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-72,\n        constraints={'min_value': None,\n         'max_value': 101,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.6243754556736453},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-11849408386016.098,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.1754943508222875e-38},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='%\\x99\u00d3m\\x801N\\x94\\x18N\u00f8I\u00a1M\\U000380d5\"\\r\u00bf\u00c5\\U0003b394\ud862\ude36\ud878\udea9\\x95\u00de',\n        constraints={'intervals': IntervalSet(\n             build_intervals([0, 301445, 867865, 871453]),\n         ), 'min_size': 21, 'max_size': 121},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-3.402823466e+38,\n        constraints={'min_value': -inf,\n         'max_value': -7061324502379406.0,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.610809202244547e+16},\n        was_forced=False,\n        index=None)),\n      length=-17983,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'': -1.7976931348623157e+308,\n       '\\U0009164e\\x1f\\x92\\x86\\U0008936c\u00a6\\U000f00bd\\x87\u00c2FV\\x01\ud821\udd1d\\x82\u00d4Q\\U00066211\\x08': 2.3980199216479407e+109,\n       '\ud835\udce3\ud835\udcf1\ud835\udcee \ud835\udcfa\ud835\udcfe\ud835\udcf2\ud835\udcec\ud835\udcf4 \ud835\udceb\ud835\udcfb\ud835\udcf8\ud835\udd00\ud835\udcf7 \ud835\udcef\ud835\udcf8\ud835\udd01 \ud835\udcf3\ud835\udcfe\ud835\udcf6\ud835\udcf9\ud835\udcfc \ud835\udcf8\ud835\udcff\ud835\udcee\ud835\udcfb \ud835\udcfd\ud835\udcf1\ud835\udcee \ud835\udcf5\ud835\udcea\ud835\udd03\ud835\udd02 \ud835\udced\ud835\udcf8\ud835\udcf0': 114},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-10272, -114),\n       (-29, -23541),\n       (0, 3026),\n       (63, 28058),\n       (19971, -24180)},\n      slice_comments={(-35, 8_243_180_679_974_787_706): '\\x9a',\n       (29560, 81_594_284_928_104_222): 'all'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-10599, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\u169b\u1684\u1693\u1690\u168b\u1692\u1684\\u1680\u1691\u1684\u1682\u1691\u168f\u1685\u169c',\n        constraints={'intervals': IntervalSet(\n             build_intervals([1000, 97005, 1092740]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.10770820791031468},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xfc\\x1d\\x0bP3)',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xb3\\xcfO\\xb3\\xcb\\x12\\xfb\\x7f\\xe9Y\\x05\"\\x04\\xfb\\xe9\\x01q\\x9b\\xa0\\xf5\\xae\\x8c\\xc7\\xca\\xd6}\\x98SC\\xc1\\x18\\x0c\\x05V\\xd3\\xcb\\'j\\x87\\xf1\\xb6e',\n        constraints={'min_size': 19, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-8394,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 2, 0),\n                                     ('c', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\U000dc593j{\u00fd\\U000b7ae4<',\n                     [ExceptionGroup('',\n                                     [ExceptionGroup('\u00cc\u00e3\\U000639d3',\n                                                     [ExceptionGroup('\\U0003bcb8\\U00077145\u00ae\u00eb|]\u00bf\\x1a',\n                                                                     [ExceptionGroup('\\U000e38f9Bq\\U000c9af0\u00c5\ud86e\udeff\\\\^4E',\n                                                                                     [ExceptionGroup('\\U000b9305\u00b1J',\n                                                                                                     [ExceptionGroup('J\u00cb\u00e6\u00c3\\x9e\u00e5\\x88',\n                                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                                         \"'\u00d2\u00ee\u00dc\",\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      UnicodeTranslateError('NULL',\n                                                                                                                                            0,\n                                                                                                                                            0,\n                                                                                                                                            'reason'),\n                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                         b'',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                         'M',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      ExceptionGroup('\u00f3z\\x88S\\x10\u00b5\u00b0-#VA\u00b4\u00bd\u00c6\\U000c6207\\U0005d3d3\u00a7\u00dc',\n                                                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                                                         b'',\n                                                                                                                                                         0,\n                                                                                                                                                         0,\n                                                                                                                                                         'reason')])]),\n                                                                                                      UnicodeTranslateError('',\n                                                                                                                            0,\n                                                                                                                            0,\n                                                                                                                            'reason'),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         'V|\u00d0\u00dbX+\\U000d5580\u00eaX\\U00012e96\u00b4\\x06\\r\\x85\\x1e\u00db',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      ExceptionGroup('\\x9e\u00c8\\x858\u00be`\\U000eb38b>',\n                                                                                                                     [UnicodeTranslateError('d\u00f5\\U000b2faa\u00a9',\n                                                                                                                                            0,\n                                                                                                                                            0,\n                                                                                                                                            'reason')]),\n                                                                                                      ExceptionGroup('\\U000b5a89\\U0008be71\\x9e\u00e5\\U00018d28Q\u00ebk\u00fb',\n                                                                                                                     [ExceptionGroup('\u00b8\\x88#\\x87\u00c1Vkd',\n                                                                                                                                     [ExceptionGroup('\u00a1',\n                                                                                                                                                     [ExceptionGroup('\\U00071977\\U000c0e4c',\n                                                                                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                                                                                         '\\U000d0c30',\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         'reason'),\n                                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                         b'',\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         'reason'),\n                                                                                                                                                                      ExceptionGroup('n2',\n                                                                                                                                                                                     [UnicodeTranslateError('\u00f3',\n                                                                                                                                                                                                            0,\n                                                                                                                                                                                                            0,\n                                                                                                                                                                                                            'reason'),\n                                                                                                                                                                                      ExceptionGroup('\u00a5',\n                                                                                                                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                                                                                                                         '\u00fb\\x1a\u00c2',\n                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                         'reason'),\n                                                                                                                                                                                                      ExceptionGroup('S',\n                                                                                                                                                                                                                     [ExceptionGroup('\u00e8\u00b7\\U00097417\u00a9\u00d5\\U00054fac.\\U000ab65a',\n                                                                                                                                                                                                                                     [ExceptionGroup('\\x13\\U0008c269\\U0006e483',\n                                                                                                                                                                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                                                                                                                                                                         '\\x8d\u00dd\\U00109781\\U000a6adc\\x0e\\x0f\\x02\ub464',\n                                                                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                                                                         'reason')])]),\n                                                                                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                                                                         b'',\n                                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                                         'reason'),\n                                                                                                                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                                                                                                                         '\u00ed\"\u00ffI',\n                                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                                         'reason')]),\n                                                                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                                                         b'',\n                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                         'reason'),\n                                                                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                                                         b'',\n                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                         0,\n                                                                                                                                                                                                                         'reason')]),\n                                                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                                         b'',\n                                                                                                                                                                                                         0,\n                                                                                                                                                                                                         0,\n                                                                                                                                                                                                         'reason'),\n                                                                                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                                                                                         '\u00ef\\\\\u00e2H',\n                                                                                                                                                                                                         0,\n                                                                                                                                                                                                         0,\n                                                                                                                                                                                                         'reason'),\n                                                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                                         b'',\n                                                                                                                                                                                                         0,\n                                                                                                                                                                                                         0,\n                                                                                                                                                                                                         'reason')]),\n                                                                                                                                                                      ExceptionGroup('G\u00e6\\x85',\n                                                                                                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                                                                                                         '\u00c0\u00c5E\u00c7\\x82\\U0006f830',\n                                                                                                                                                                                                         0,\n                                                                                                                                                                                                         0,\n                                                                                                                                                                                                         'reason'),\n                                                                                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                                                                                         '1e100',\n                                                                                                                                                                                                         0,\n                                                                                                                                                                                                         0,\n                                                                                                                                                                                                         'reason'),\n                                                                                                                                                                                      UnicodeTranslateError('}\u00bd{H\u00db',\n                                                                                                                                                                                                            0,\n                                                                                                                                                                                                            0,\n                                                                                                                                                                                                            'reason')]),\n                                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                         b'',\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         'reason')]),\n                                                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                                                         '\\x02\u00e4',\n                                                                                                                                                                         0,\n                                                                                                                                                                         0,\n                                                                                                                                                                         'reason'),\n                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                         b'',\n                                                                                                                                                                         0,\n                                                                                                                                                                         0,\n                                                                                                                                                                         'reason'),\n                                                                                                                                                      ExceptionGroup('\uad03\ud84f\ude23',\n                                                                                                                                                                     [UnicodeTranslateError('F',\n                                                                                                                                                                                            0,\n                                                                                                                                                                                            0,\n                                                                                                                                                                                            'reason')]),\n                                                                                                                                                      ExceptionGroup('\\x93\\U000ba42f\\x1e',\n                                                                                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                         b'',\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         'reason'),\n                                                                                                                                                                      ExceptionGroup('O\u00ac\\n\u00bd\\U0007557c',\n                                                                                                                                                                                     [UnicodeTranslateError('\\U000c9095P\\x80\u00b8Z\\x84\\x06\\U000a65be\u00eb\\x07\\x1b1\\x9d\\xad\\x93\u00b9',\n                                                                                                                                                                                                            0,\n                                                                                                                                                                                                            0,\n                                                                                                                                                                                                            'reason')]),\n                                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                         b'',\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         'reason'),\n                                                                                                                                                                      UnicodeTranslateError('',\n                                                                                                                                                                                            0,\n                                                                                                                                                                                            0,\n                                                                                                                                                                                            'reason'),\n                                                                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                                                                         'y\u00cf\\U000e0fe7\\U000c97a8\\U00042732\\x15\\U000e7615\\U0010b19f',\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         'reason')])]),\n                                                                                                                                      ExceptionGroup('\u023e',\n                                                                                                                                                     [UnicodeTranslateError('\u00d0c\u00ee?\\U000844af\u00e4\u00e4\u00d0',\n                                                                                                                                                                            0,\n                                                                                                                                                                            0,\n                                                                                                                                                                            'reason'),\n                                                                                                                                                      UnicodeTranslateError('\u00e3\u2055\\x886?p\\U000b11ff',\n                                                                                                                                                                            0,\n                                                                                                                                                                            0,\n                                                                                                                                                                            'reason'),\n                                                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                                                         '\\x8c\u00c6',\n                                                                                                                                                                         0,\n                                                                                                                                                                         0,\n                                                                                                                                                                         'reason'),\n                                                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                                                         '\u00f4\\U00011bcb|\\U00075edd\u00e6',\n                                                                                                                                                                         0,\n                                                                                                                                                                         0,\n                                                                                                                                                                         'reason'),\n                                                                                                                                                      UnicodeTranslateError('\\U0005ed63',\n                                                                                                                                                                            0,\n                                                                                                                                                                            0,\n                                                                                                                                                                            'reason')]),\n                                                                                                                                      UnicodeTranslateError('f\u00c2\u00f6\u00c1\\x9d\\U000b0a53',\n                                                                                                                                                            0,\n                                                                                                                                                            0,\n                                                                                                                                                            'reason'),\n                                                                                                                                      UnicodeTranslateError('',\n                                                                                                                                                            0,\n                                                                                                                                                            0,\n                                                                                                                                                            'reason'),\n                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                         b'',\n                                                                                                                                                         0,\n                                                                                                                                                         0,\n                                                                                                                                                         'reason')])])]),\n                                                                                      UnicodeTranslateError('Z\u00c5.}',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason')]),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeTranslateError('\\U000e4f3bg\\U0004a0ee\u00c5f\\U000ec998\\U00044b72',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')]),\n                                                      UnicodeTranslateError(\"\u9814\\x0f'\\x9c\\U000ef7b6\u00ab\\U0003e801\\xad\\x88\u00ac}QM\",\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeTranslateError('\u00db',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      ExceptionGroup('',\n                                                                     [UnicodeTranslateError('',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')])]),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('\\U000ab966E\u00ae\\U0006d949\u00a57',\n                                                     [UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeTranslateError('',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')])]),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='\u00da<\\U000a2e41\\x99\\U0003b7d7\\U000dd6eb\u00fe\u00e9\u00d2\\U000f7cdd',\n      has_discards=False,\n      target_observations={'\\U0007ac24tC': 1.6837044572702172e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-31382, 58),\n       (13, 30025),\n       (13099, 2_948_793_074_941_678_253),\n       (16145, -9397)},\n      slice_comments={(16449,\n        -53_501_415_557_830_753_314_120_500_854_316_223_896): '0\\x9d\\x89P\u00f4\u00a8i0n\\U000f1f77\u00cbJ1\u00bb\\x1eU',\n       (-19411, 78): 'eE\\U001028a3\u00fa\\x10\u00feE\u00ff\\U00090465}J\u00fc\u00e3\u00b2\u00bf>\\x02\u00abK3\u00a8',\n       (-26729, 2569): '\\x8f\\U0005329fD',\n       (-94, 512): '',\n       (115_499_243_354_844_218_903_254_009_757_856_877_056, -6682): '\u00ea ',\n       (-2_063_655_644, -38): '\u00ed',\n       (90, 551534732): 'C\u00ed\\U001043fc\\U000d9b21\ud872\udf5d\\U000f23e3',\n       (29900, 54): '\u00e4\u00f4H\\x17\u00df&c\\U000e447d{',\n       (3_068_885_839_214_293_173, -2): '\\U00080b6a\\x9e',\n       (-15199, 17934): '\u00db5\u00a2\\x8bA',\n       (-2_020_676_679, 2104): '\u00b0\u00ce'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.012597209075465798,
          "overall:gc": 2.4207925889641047e-05,
          "generate:args": 0.17529724992346019
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878916.6260989
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "",
        "representation": "",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x106d0c800>, min_size=0, max_size=inf).map(tuple), length=one_of(nothing(), nothing(), integers()), has_discards=one_of(nothing(), nothing(), booleans()), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason')))), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text()))).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {},
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878938.011654
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "",
        "representation": "",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x106d0c800>, min_size=0, max_size=inf).map(tuple), length=one_of(nothing(), nothing(), integers()), has_discards=one_of(nothing(), nothing(), booleans()), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason')))), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text()))).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from integers(0, 1114111).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {},
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 2,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 2,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878947.023526
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=14290, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.6759862270733311},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xda\\xb8`',\n        constraints={'min_size': 2, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0001ab9a\\U0005dddc\u00dc\\x1cj#',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1,\n                  136687,\n                  255099,\n                  259158,\n                  297880,\n                  337059,\n                  377345,\n                  458308,\n                  465859,\n                  509810,\n                  579952,\n                  696482,\n                  893760,\n                  907109,\n                  945115],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0008fab4\\U0008fa5c\\U0008fa4a\\U0008fa5f\\U0008fb0f',\n        constraints={'intervals': IntervalSet(\n             build_intervals([588342, 614064, 623333, 842414]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u00a6\\U0004130d\u00a1Q\\U000d5529\u00e31\u00be\u00e6\\x07\\x1b\\x1bT6#\u00d5C\\U000972afU',\n        constraints={'intervals': IntervalSet(\n             build_intervals([0, 723863, 742639, 1114110, 1114111]),\n         ), 'min_size': 11, 'max_size': 111},\n        was_forced=True,\n        index=None)),\n      length=8192,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00a8\u00ac<\\x8d6\u00a6\u00ea\\x0f',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'LPT1': 0.5,\n       'a\\x19\ud883\udc7b\\x17\ud801\udcbck': 0.0,\n       'q\\x0b%L\\x0b\"\\U000965a9': -1.0575139776727592e-169,\n       'f\\U0004cf1f@|\\x81\\U000e6143\u00bcE': inf,\n       '2\\x06\u00c5': 4285},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-7298, -26), (-107, 80), (-74, -271628084)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=87, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=1.6104664891051008e+308,\n        constraints={'min_value': -3.8025927504685877e-255,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.2250738585e-313},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-176_755_016_956_101_526,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.5714932313199498},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.6985702373702017},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.640069992207567e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=6.59326186991969e+16,\n        constraints={'min_value': -6.047251638015817e+163,\n         'max_value': 1.0329014664244536e+307,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.318366627991645e-214},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00090e8a',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [210281, 231715, 392786, 518187, 539160, 744384, 777008],\n             ),\n         ), 'min_size': 1, 'max_size': 101},\n        was_forced=False,\n        index=None)),\n      length=-4_262_663_739_242_787_137,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('c', 2, 1)),\n                                    (('a', 1, 2), ('c', 0, 1)),\n                                    (('a', 1, 3), ('b', 3, 3)),\n                                    (('b', 1, 0), ('a', 0, 1)),\n                                    (('b', 3, 0), ('c', 0, 3)),\n                                    (('c', 2, 0), ('a', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00bc*', 0, 0, 'reason'),\n      expected_traceback='\ub4c52\\\\\\U0003bdab',\n      has_discards=False,\n      target_observations={'\u00c5\u00f5\\U0009fcba': -27217,\n       '': 1.5050629124505451e+268,\n       'E\u00ff\\x95\u00df\u00da\u00e6?@\\x92\\U000d9894\\xa0\u00ef\u00d0\\x8f\u00c2': 8.602510272174285e-296,\n       'no': -1709,\n       '\u00d6C\\xad': -4.990799558163396e+16,\n       '8\u00ac@\\U000aeef1\u00cf\\U000ed397\u00aeS>\u00b1': -1.1741736403351968e+16,\n       '\u00b8\\x99\\x18\\U000e4853': -25868,\n       ',\\U000e46fc\uff8d0\\x95\\U000e2d22\u00c9\\x93\u00a2': -1.117536711563198e+16,\n       '\\U00082566S\u00b7\u00b4': -1.2406995539850081e-143,\n       '\\x13\\U0007b60e\u00e7\u00fd\u00dd!\u00e2k': -2.220446049250313e-16,\n       'x\u00dd\\U0010fc1c\\U0004b58f': -5.879160302230988e-211,\n       '\\U000bf358\u00c4\\x04': 11320,\n       '\u00fe\u00dd': 55,\n       'C': 3.463468865194738e-240,\n       '\u00a1:\u00e6\u9642\u00ec\\x16\u00a1\\x99-c': 1.1164777338894843e-32,\n       '\u00c0\u00fe\u00b4\u00af\\x95\\x98\\U0009544f\u00e4\u00b5\\x8b': -6.8034126986994216e+16,\n       '\u00dc\\U000485ba\u00d0\\x8c': -24361,\n       '\u00c0uC': -8.1391041506664e+110,\n       ')\\U0001e675\\U000ef2964\u00b4': 36},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-71_805_295_753_136_913_405_763_304_953_577_543_053,\n        -16233): '',\n       (67, -11452): '\u00bc',\n       (-1975, 19379): '\\U00100ea0\\x13*',\n       (27534, 18053): '\ud862\udc81}\\U0003ae92\u00d5\\U000caa96\\x03t\u00cb\\x14w\\x8c\u00f0J\u00ab\\x16\u00f1',\n       (-20_068_026_568_981_851_557_836_727_885_511_856_120,\n        -6971): '\\U000a1f23]%\u00da\\U0003fc50\\x1f',\n       (1_758_925_986, 20590): '',\n       (0, -20856): '\\U000ef857\\x15'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=26069, context=(), group_elems=()),\n      nodes=(),\n      length=6_548_551_488_967_170_873,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 3),\n                                     ('b', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\\xad',\n      has_discards=False,\n      target_observations={'\\x8c\\x9c\\U000b4acf\\U000a9140T\u00f0\\U000955b6': 0.05,\n       '\\x0cp\u00e8\u00b6': 21573,\n       \"\\x80\\x12'\": 8.196422888714496e-204,\n       '\\U000348b2\u00fb\\U000c7467\\U00013fbch%\\U00056f52F': 5236,\n       '\ud84f\udc01m': -23771,\n       '\u00b0': -3.664119624585559e+16,\n       '': -5.567808855195427e+16,\n       '\u092e\u0928\u0940\u0937 \u0645\u0646\u0634': -32298,\n       '\u00ba,\ud86b\udd21\\U00050abfY\\U000a8f20\\U000d8e1c\u41ba\u00d2\u00f1\\x9bZ\\U0003ee48\\x1c\u00e6': -4700,\n       '+\u00e4': 7_271_296_675_400_506_361,\n       '`\\U0010f697\u00f8\\U0006ebb6\\x15s\\x00\u00fe+': 37,\n       '\u00b4\\U000ed6ed*D\\U00087eb9\ud843\udd14\\U000956bd': 4.317668625778746e+16,\n       '\u00f5S\u00a97\\U000a1d6f\\x7f\\x1bd{\\U00063360\\U000bb51e\u00f1S': -24668,\n       '\\x9f\u00a4\\x03z\\U000885bb&\u00ed\\x8b\\U000d841dh\\U0002fe04': -39,\n       'lp\\x8d': 4.099683485807518e+16,\n       'ZV\\x833\u00f2\u00c0b': 29},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-3_323_715_910_124_888_271, 6_782_209_832_149_193_893),\n       (-29394, -87),\n       (-123, -118),\n       (-111, -9616),\n       (-88, 893026581),\n       (-5, 228),\n       (46, 1024),\n       (474, -93),\n       (6017, 63),\n       (12569, -11388),\n       (12859, -16711),\n       (16768, 26563),\n       (17169, -71),\n       (64_792_620_861_576_147_095_938_013_751_664_998_976, -16153)},\n      slice_comments={(-8221,\n        65535): '\u092a\u0928\u094d\u0939 \u092a\u0928\u094d\u0939 \u0924\u094d\u0930 \u0930\u094d\u091a \u0915\u0943\u0915\u0943 \u0921\u094d\u0921 \u0928\u094d\u0939\u0943\u0947 \u0625\u0644\u0627 \u0628\u0633\u0645 \u0627\u0644\u0644\u0647',\n       (-28759, -948324154): \"\\x1c\u00fe\\x96'\\U0007e40b\u5eb3\u00c1\\x7f\\uf45d\\xa0\u00d0\"},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-15482, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=962,\n        constraints={'min_value': 10,\n         'max_value': 5633,\n         'shrink_towards': -25_032_717_191_918_992_643_291_816_078_331_360_987,\n         'weights': {962: 0.7826771002960071, 1363: 0.034163900963080494}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.7361298911216264e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\u200d\u2017\\u2003\\u206e\u269f\u21b2\u2225\u20d4\u236f\\u2061\u2111\u256f\u20d8\\u209d\u20e8\\u20c2\u2015\u20de\u20b8\u2097\\u20cc\u203e\u26e4\\u206a\u205c\u2075\\u206c\u2604\u24ca\\u20ca\u20d6\u2092\u20c0\u2031\u20d1\\u2003\u2088\u20e3\u2080\u23b7\\u2061\u2053\u2025\u20b1\u2027\u20e1\u247a\u2535\\u209d\u2044\\u20fc\u2031\u205d\u20d2\u2019\u201f\\u20c7\u2095\\u206d\u2099\\u2061\u20c0\u20b1\u249e\u266f\u2565\u2026\u2087\u2087\u2046\\u2061\u208a\\u2062\u2657\\u20fb\u221a\\u20ce\u2046\u255c\u20ae\u2010\u2512\u2518\u2372\u207f\\u2008\u20b4\u20b1\\u20c4\u25a8\\u2029\u20e4\u2015\u201d\u208b\u2080\u2057\u20ad\u25bb\u2697\u2047\u20d8\u24cf\u20a3\u23b1\u2021\u2032\u20e2\u21fa\u2035\u2036\\u2009\u25b4\u2079\u2046\u203b\u22b9\u2055\u2041\u2702\u23a4\u20be\u205a\u203e',\n        constraints={'intervals': IntervalSet(\n             build_intervals([8192, 9999, 948183]),\n         ), 'min_size': 35, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-5_587_136_847_866_710_809,\n        constraints={'min_value': None,\n         'max_value': -115,\n         'shrink_towards': 32367,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000a0661\\U00092b82\\U0008f48d\\U0009b727\\U0008f4dd',\n        constraints={'intervals': IntervalSet(\n             build_intervals([586778, 719444, 890719]),\n         ), 'min_size': 5, 'max_size': 105},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u0264\u0215\u0215\u021f\u2e18\u1cae\u0246\u0228\u0245\u01a1\u022d\u01f7\u01d0\u01bf\u06c2\u646a\u0196\u15b0\u019a\u4936\u0210\u024f\u01b1\u0245\u510e\u0259\u0230\u019e\u5650\u427a\u0286\u0210\u4de2\u01af\u0268\u01da\u01aa\u0236\u0230\u01be\u0210\u1585\\u2064\u01b7\u01d5\u01f5\u0252\u0260\u01d1\u019e\u5bff\u3aff\u01d2\u0280\u0248\u357c',\n        constraints={'intervals': IntervalSet(\n             build_intervals([404, 29032, 967370]),\n         ), 'min_size': 50, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-28636,\n        constraints={'min_value': None,\n         'max_value': 9999,\n         'shrink_towards': 29985,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'(\\xd9@\\x89\\xa0J',\n        constraints={'min_size': 5, 'max_size': 105},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-4.112159744628946e+16,\n        constraints={'min_value': -6.2482750657591464e+16,\n         'max_value': 2.6138142588533846e-62,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 9007199254740992.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00019324\\U00019353\\U000193ed\\U0001932d\\U00019418\\U00019804\ud86f\udff8\\U00019381\\U000369ab\\U00019366\\U0001933a\\U0001938d\\U000193fc',\n        constraints={'intervals': IntervalSet(\n             build_intervals([103203, 228600, 448486]),\n         ), 'min_size': 10, 'max_size': 22},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9043407037954645},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ucdd0\uce4d\\U000627fa\uce62\ucde9\uce35\\U0004923d\uce97\ucdef\\U0006527a\uce44\uce56\uceb2\uce6f\uceb2\ucecc\ucea7\ucdf2\uce14\ucdef\uce82\uce9a\uce5b\\U00048a23\ucdf7\uce22\uce39\uceb0\uce59\uce48\uce69\ucdde\\U0005ab6c\\U000556b1\uce06\\uddc0\ucdf3\uce71\uce84\uce34\ucde2\uce06\\U00073fc9\uceb1\uce5a\uce46\uce6b\uce1e\\U0005758c\ucded\uce51\uceca\uce02\uce04\uce0f\uce23\uce66\uce40\\U0006fa50\\U0006d8e2\ucdf9\uce9a\ucee2\ucecb\uce53\uce41\uce6a\\U00061126\uce5a\uce03\uce03\uce6c\\U00049c59\\U000487da\ucdd3\\U0007177c\uce97\uce3e\uce09\ucdf1\\U000136e5\uce13\ucdd0\uce40\uce47\\U000730ca\uce80\uce66\uce38\\U000128d9\uce24\ucdd5\uce5d\uce2d\\U00058d6b\uce5e\uce24\\U00053a0c\uce05\ucea4\uce91\uce4d\uce77\uce04\uce5b\uceaa\uce9f\uce8f\uce98\uce55\uce38\\U00075ad0\uce54\uce07\\U0004793f\uce63\ucdd2\\U0005d16c\ucdfb\uce2a\ud803\udca8\\U0005a5b4\uce4c\uce91\uce33\uce23\uce4e\ucde0\ucdd5\\U00069c39\uce1e\uce0e',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [52687, 88975, 289618, 309255, 341308, 482012, 758158],\n             ),\n         ), 'min_size': 32, 'max_size': 132},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.5200488403517923},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.2093993995978775e-267},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.20490252000614634},\n        was_forced=False,\n        index=None)),\n      length=-37,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 3),\n                                     ('a', 1, 0)),\n                                    (('b', 2, 0), ('b', 0, 2)),\n                                    (('b', 2, 1), ('b', 2, 0)),\n                                    (('b', 3, 0), ('a', 3, 3)),\n                                    (('c', 2, 0), ('a', 2, 1)),\n                                    (('c', 2, 1), ('a', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\\x8e\\U00097ed4{\\x83~\u00c0/',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_980_956_215, -117), (116, 88), (7665, -70)},\n      slice_comments={(15859, 20616): 'T'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=25, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=20322,\n        constraints={'min_value': 20074,\n         'max_value': 58_152_037_289_717_267_918_449_146_906_845_465_119,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'{6\\xc1\\xd4',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 0.0,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.8688948472196264e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.4558422450250218},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00074621\\U00074588\\U000b2dc8\\U00081cdb\\U000e16fb\\U00074647\\U00074581\\U00074599\\U000745b6\\U000745e1\\U0007461a\\U00074658\\U000745a9\\U0007466c\\U000745ec\\U00074625\\U000c36f3\\U0007459b\\U000745f7\\U000745d6\\U000cc2c7\\U000745ec\\U00074656\\U00074636\\U000745fc\\U000745fa\\U001087ab\\U00074585\\U0007458b\\U00074648\\U00074639\\U000745c8\\U0007458d\\U000745fb\\U00074600\\U000745bc\\U00074582\\U0007458c\\U0007458b\\U00074621\\U0007466f\\U00074646\\U000745f9\\U0007464e\\U0007459b',\n        constraints={'intervals': IntervalSet(\n             build_intervals([476542, 1050832, 1067107, 1114111]),\n         ), 'min_size': 23, 'max_size': 123},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1.766935815296422e-114},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.3099697052151991},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-3864,\n        constraints={'min_value': -31908,\n         'max_value': 300,\n         'shrink_towards': 50,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=1_938_950_663,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 0, 1),\n                                     ('c', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00c3Q\\x85\\x9a\u00b6\\U0007b4d1',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00dc': 83},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(1_314_241_389_282_928_594, 15)},\n      slice_comments={(1_238_763_201, 23799): '\\U0005a1a1\u00d9',\n       (22459, 28193): '\u00c0R\\x01 \ud857\udfcc',\n       (31912, 65535): 'u',\n       (-13_203_653_857_303_975_935_952_236_695_803_011_868,\n        -12113): '\\x05\u00d6\\x1fw\u00ed}\u00ee',\n       (-27330, -7194): '\u00bb\u00f8\u00a2\u00ab\u00f8d',\n       (-38, 6): '\\U00068a06+\\U00109b57',\n       (-1822, -80): '}\\x18#\\U000607a5\\U000a3c6cs\u00bc8',\n       (-13, -124): 'H\u00dar\".p\\U000f4793\u00b5\\x80.\u00d9',\n       (16475, 61): '\\x81\u00e9\\U0005fd78V\\x8d',\n       (13614, 87): '\u00d5\u00ab\u00b71\u00bd9(\\x8b\u00ee\\x94q\\r\\U0003fdcdE}\\U000141b4#=r',\n       (113, -12555): '0_\\x91\\U000504bc9\\U000f872a\\x8e'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=20575, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 5.714932514572033e-291},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.0589718752251702e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.05664114128226029},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u2d10\\U0005a24d\u2cd3\u2c52\u2d22\u2cfe\u2c66\u2c91\u2cfc\u2c60\u2c37\u2ceb\u2c6d\\U000b9e46\u2cfb\\U000750e1\u2cc1\\u2d29\u2d14\ud868\uddd5\\U00062dd6\u2c96\\u2d2a\u2d17\u2cc2\u2c8b\\U00050877\u2cab\u2c78\u2c55\u2cdb\u2cfc\u2cc2\\U0003428d\\U0009a64f\\U00086a9d\\U0009ad6b\\u2cf4\u2c64\u2c66\u2c58\u2cbd\u2ca9\u2c6a\u2c75\u2d03\u2c89\u2c83\u2c74\u2cd7\u2cd8\u2c4a\\U000c110e\\U000a191e\u2d18\u2c36',\n        constraints={'intervals': IntervalSet(\n             build_intervals([11315, 874134, 926125, 976729]),\n         ), 'min_size': 45, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=13499,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 1),\n                                     ('a', 1, 3)),\n                                    (('b', 1, 2), ('c', 3, 1)),\n                                    (('c', 1, 3), ('a', 1, 0)),\n                                    (('c', 1, 3), ('b', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\\U000a4020\\x80Y\\U0006030b2\u00c3',\n      has_discards=False,\n      target_observations={'\\x0bA\\x9e\u00b9\\U00103669\\x95C': -9_099_248_623_457_019_483},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_844_668_093, -1_909_938_928),\n       (-1_238_892_323, 1000),\n       (29760, -2),\n       (31493, -21501),\n       (3_136_111_504_284_621_615, -155098396),\n       (25_625_012_802_653_513_080_183_582_083_404_628_148, -82)},\n      slice_comments={(13057, -118): '\\U000e3fdcV\\x12fP=w\\xad\u00cd|',\n       (9_185_116_120_385_716_146, 6777): '\\U000fdd54'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from integers(0, 1114111).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.007769584015477449,
          "overall:gc": 3.1333009246736765e-05,
          "generate:args": 0.09487907803850248
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878962.70454
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=6, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=1_268_927_672,\n        constraints={'min_value': 1_268_904_727,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'C\\xcao\\xb2\\xc0\\xa6\\xf2\\xc0\\x1b\\xa0d#\\xc8',\n        constraints={'min_size': 6, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-7,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('b', 0, 0)),\n                                    (('a', 1, 1), ('b', 3, 3)),\n                                    (('a', 3, 1), ('c', 2, 2)),\n                                    (('b', 3, 3), ('c', 2, 1)),\n                                    (('c', 2, 0), ('a', 3, 0)),\n                                    (('c', 2, 2), ('c', 3, 0)),\n                                    (('c', 3, 0), ('b', 1, 1)),\n                                    (('c', 3, 0), ('c', 2, 3)),\n                                    (('c', 3, 2), ('c', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'Zz': 23542, '\\x19\"': -5.571062618669947e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-26467, 4338),\n       (-6870, -28037),\n       (-4723, 65535),\n       (29272, -1788),\n       (29853, -1874),\n       (2_344_686_703_452_958_117, 8192)},\n      slice_comments={(-12986, -27669): '\u00f7',\n       (22439, -2314): '\u00f3;W]\u00ef\\U0003c66a\\x9c)B\u00a7!\\U00047b07\\U0008ed2ai\u00ef$\\x17',\n       (300, -599354222): '',\n       (-8_116_666_830_563_814_073, -25387): '\\x8f'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=9999, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U00052dfa\\U00052dd1\\U00052e2b\\U0009ec22\\U00052e88\\U00052dc4\\U00052e04\\U00052dbd\\U00052de2\\U00052e16\\U00052e1c\\U00052e02\\U00052e21\\U00065da9\\U00052dfd\\U00052e02\\U00052dda\\U00052e93\\U00052e0e\\U00052e28\\U00052e00\\U00065c28\\U000bb71d\\U000bd4f5\\U00052dd4\\U00052e87\\U00052d9c\\U00052de1\\U00052e6e\\U00052db0\\U00052dad\\U00052e59\\U00052dd8\\U00052dd4\\U00052e07\\U00052dd2\\U00052de4\\U00052dc1\\U00052db7\\U00052e4e\\U00052e98\\U00052e23\\U00052da9\\U00052e70\\U00091a4d\\U00092714\\U00052dc3\\U00052dec\\U00052db4\\U00052e78\\U00052dc0\\U00052e90\\U00052e84\\U00052dae\\U000a90b7\\U00057c75\\U00052da9\\U00052e09\\U00052e2c\\U0009d76e\\U00052e8a\\U00052e72\\U000d2615\\U00052da5\\U000be0ab\\U00052e10\\U00052e3c\\U00052dcf\\U00093f4c\\U00052dd9\\U00052dcc\\U00052db6\\U00067a9a\\U00052e0b\\U00069300\\U0006e3e8\\U00052de1\\U00052df9\\U000c23cf\\U00052df3\\U00052e00\\U000b8b8e\\U0005c48f\\U000c3d9d\\U00052e3d\\U00052e6c\\U00052e6b\\U00064215\\U00052dd5\\U00052df5\\U0007efae\\U00052dee\\U0005f357\\U00052e8d',\n        constraints={'intervals': IntervalSet(\n             build_intervals([339354, 901628]),\n         ), 'min_size': 37, 'max_size': 137},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 5e-324},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=5.888374413650899e+16,\n        constraints={'min_value': 2.599206605122102e+16,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 9.512234673496958e-257},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000158e7\\U00015858\\U000158ef\\U00066b53\\U0005336e',\n        constraints={'intervals': IntervalSet(\n             build_intervals([88075, 100169, 314991, 596254, 813147, 967452]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 9.854034116911746e+307},\n        was_forced=True,\n        index=None)),\n      length=-11067,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 2, 1),\n                                     ('b', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         'c',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00c1': -2326748116857448.0,\n       '': 4.888859592770739e+16,\n       '\\U0007170dMo\\x1c': -7334,\n       '|\u00f5\\x88': 71,\n       'hh\u00b5': -2.022900008671095e+184},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-16507, -52): \"'\u00ff\\x86\\U00097195\u00eb\\x17\",\n       (32390, 512): '\\x94\\U000a0923V\\U0005abcd'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-15899, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\x94\\x1fF',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=67,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=10788,\n        constraints={'min_value': None,\n         'max_value': 22135,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00053ba7\\u206a\\u2004\u2018\\u206a\\U0005f837\u20e6\u20e3\u209b\u208d\u20d1\\u202e\u2041\u20e5\u204b\u203e\u2081\u207a\u20bb\\U0003d00f\\U0005b349\\U00087ddb\u2046\\U000c9485\u20d7\\udc85\\U00084985',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [8192,\n                  250027,\n                  275274,\n                  566374,\n                  630664,\n                  652181,\n                  674313,\n                  871544,\n                  955972,\n                  960562,\n                  1012555,\n                  1087141,\n                  1114111],\n             ),\n         ),\n         'min_size': 6,\n         'max_size': 106},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1.6482047925984848e+121,\n        constraints={'min_value': -inf,\n         'max_value': 1.9963967256635882e+223,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6879768835829674.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.1065318395939224e+308,\n        constraints={'min_value': 7.009504968088119e+16,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.1065318395939224e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0003fcf6\\U0003fd0a\\U0003fd3c\\U0003fcc0\\U0003fc9c\\U0003fd46\\U0003fcab\\U0003fd5b\\U0003fd11\\U0003fcfe\\U0003fd52\\U0003fd2b\\U00042700\\U0003fd3d\\U0003fd69\\U0003fcc0\\U0003fd63\\U0003fd07\\U0003fd1f\\U0003fd5e\\U00088b36\\U0003fc8a\\U000cc336\\U0009806d\\U00048af7\\U0003fcdb\\U0003fcf2\\U0003fcf3\\U000916b5\\U0003fd6a\\U0003fc88\\U0003fd18\\U0003fc6e\\U0003fceb\\U000ec303\\U0003fd13\\U00072f59',\n        constraints={'intervals': IntervalSet(\n             build_intervals([261229, 876537, 925101, 967644]),\n         ), 'min_size': 29, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=46397,\n        constraints={'min_value': 87,\n         'max_value': 6_811_274_626_654_762_708,\n         'shrink_towards': 60,\n         'weights': {6179: 0.011419662463648629,\n          6034: 0.16392740916753837,\n          49883: 0.08972621458845223,\n          9999: 0.08337680114806736,\n          56576: 0.04543198620182506,\n          29053: 0.03813407807205005,\n          1_554_309_489_985_476_789: 0.08482374254907189,\n          111: 0.021793440848490237,\n          46307: 0.15190107386603344,\n          46397: 0.04810333461662879,\n          33258: 0.0014814785933238944,\n          2_816_111_589_734_894_008: 0.07407266293664751}},\n        was_forced=True,\n        index=None)),\n      length=394699356,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\U0002f4ac\\U000dccbd',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\u00db\ud855\udd36\u00d4\\x9c': -3.4656458763764824e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(3478, -108)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0019114169990643859,
          "overall:gc": 0.0,
          "generate:args": 0.031756205891724676
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878968.846355
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.629101259633899e-05,
          "overall:gc": 0.0,
          "generate:args": 3.791600465774536e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878964.810585
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "",
        "representation": "",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from integers(0, 1114111).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {},
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 3,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 3,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878964.060517
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=25027, context=(), group_elems=()),\n      nodes=(),\n      length=-24617,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 1),\n                                     ('c', 0, 2)),\n                                    (('b', 3, 2), ('a', 1, 1)),\n                                    (('c', 1, 1), ('b', 3, 2)),\n                                    (('c', 2, 1), ('b', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('U2\ud849\ude91\\t\\U00059580\\U0009a8b2\u00e4i\u00c90R\\U000ed4ca2\\x99',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\u00b3?\\U000b9f8c\u00f0',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00ef': 5.591284319815746e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-23620, -9910)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0005599999567493796,
          "overall:gc": 0.0,
          "generate:args": 0.0022637080401182175
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878952.946047
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=89, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([84657, 595384, 638693]),\n         ), 'min_size': 0, 'max_size': 37},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000a763d\\U0009fe32',\n        constraints={'intervals': IntervalSet(\n             build_intervals([654828, 687145]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None)),\n      length=3768,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('c', 0, 2)),\n                                    (('a', 2, 0), ('c', 3, 2)),\n                                    (('b', 1, 1), ('a', 3, 0)),\n                                    (('c', 0, 1), ('c', 2, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('x\u00e4\\x84\u00e0A\\x1e\\U000f254f\u00bek\u00da\u2413\\U0001bbb3-\\U000a67bd\\r\u00a8T',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback='\\U0009dd0f}\\x9cK',\n      has_discards=True,\n      target_observations={'': 3.3491733303169132e+16,\n       '\\U0009737a\u00a6a\u00fa\\U0003601f': 16303},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-4_593_225_608_780_464_923, -4128): '',\n       (87, 7_763_938_072_250_759_690): '',\n       (-30116, -4035): '\u00e4\\x17\\x93',\n       (-498136139, 18610): '\u00afk\u00c0\\U000ecdd3\\U0007b2450\\xa0\u00a5\u00a7\u00f1\u00b8',\n       (404, 16239): '\\U000759cf\\U000888da',\n       (83, 32264): '\u00b9\u00b5\\U0005b832\u00e5',\n       (1_770_012_939, -89): '\\x85c\\x03\u00c8\\x86\u00c0y\u00cbTZ'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0006800420233048499,
          "overall:gc": 0.0,
          "generate:args": 0.0055234580067917705
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878945.493484
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-2, context=(), group_elems=()),\n      nodes=(),\n      length=9999,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 1),\n                                     ('c', 2, 3)),\n                                    (('b', 1, 3), ('c', 3, 1)),\n                                    (('c', 0, 2), ('a', 1, 2)),\n                                    (('c', 0, 3), ('a', 2, 1)),\n                                    (('c', 1, 2), ('a', 3, 2)),\n                                    (('c', 1, 3), ('b', 3, 3)),\n                                    (('c', 3, 3), ('b', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-31214, -16174), (-18898, 115), (-17329, 24)},\n      slice_comments={(-48, 16698): '\u00f8\u00e5\u00f1\\x85\\x10\u00ac\u00ac',\n       (-23690, -14000): 'nodeid',\n       (-21508, 20939): '!\u00fc\\U000d4d8dw\u00ea-o',\n       (120, 9_206_552_616_453_327_376): '\\U0004d836',\n       (1_796_090_945_463_598_779, -17100): '\u00a8\u00f5A\ud87a\ude60\\U000f87e0\\x13v\u00c1\\x96',\n       (-335, 300): '\\U0007aa0f\\x94',\n       (-24026, -16648): '5K\u00ec\ud804\uddb5\\x83\\x0f\u1305',\n       (19208, 2_140_769_405): 'I\\U000c44e7\u00ed\\U000ef4c3^',\n       (-5504, -53): '\\U00040ba5\u00b5\\U000349e7k_',\n       (4, 10666): '\ud820\udd3b\u00ae\u00a7`D\u00d8',\n       (-685, -22861): '\\x86S\\x9cG\u00ff\\U00084d8d',\n       (9999,\n        -41): '4\\U0005195eUt\\U000a8cd0z\\x87\\x83/\\x1c\\x0b\u6606\\x94\\r\\x84\\x03\\t',\n       (69, -23767): '\\x85+\u00c5\u00e1\u00d1\\x94]!\\x10{\u00c4^4\u00da\u00df\u00eb'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-5368, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1.5278817422634023e-246},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\x87\\x03',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  34839,\n                  51435,\n                  87180,\n                  147260,\n                  231228,\n                  250371,\n                  253453,\n                  320541,\n                  321246,\n                  367217,\n                  403417,\n                  435467,\n                  444135,\n                  513930,\n                  541195,\n                  615975,\n                  617198,\n                  640318,\n                  673053,\n                  721818,\n                  724354,\n                  776408,\n                  805337,\n                  866530,\n                  886247,\n                  903202,\n                  907279,\n                  972098,\n                  1018037,\n                  1037864,\n                  1062389,\n                  1066535,\n                  1098032,\n                  1114111],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'tG@\\xae',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=1,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 3),\n                                     ('a', 2, 3)),\n                                    (('c', 3, 1), ('c', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00bb\\x14\\x84&w': 112_305_212_145_007_284,\n       '\u00e1': -15834,\n       \"'C\u00d0\u00f2\\U0010d8d4N,\u00f3\u00ba\\U000f61f5\\U000c543f\\x19\\xa0\\U0009a962\u00f6\\x9b\\x91\u00fb\": -4.026325301029104e-292,\n       '': -27419},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-27648, 1_726_281_099)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=55, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xfe\\xec\\xea\\xdc\\xf7AIa\\xab\\xf3P\\xd0\\xbe\\xa9J\\x8bf\\xcaa\\xa9\\x11/\\x02M',\n        constraints={'min_size': 24, 'max_size': 124},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"L\\x9b\\xcfs\\xae\\xea\\xb6\\x1e=\\xa4\\x0e\\xe5'\\xc7x6\\xe0'\\xdd\\x15#&wB\\xf6(\\xeb\\x95\\xd7\\x9a\\x171\\xf8swDX\\x1c\\x15\\xa2\\xe6e*o\\x19u\\xc6\\xbc\\xf0\\xc5\\xc8\\x16\\xf0\\xa5x\\xe6Xl\\x880\\xf1\\x06\\x12z\\x80\\xa1\\x02\\xd7Y\\x7f\\xb1\\x16\\xd8}\\x9a+\\x9c\\xd9Y\\xdb\\xbbO\\xf3u\\xfd\\x16\\xc3\\x18'\\xb9\\xa6\",\n        constraints={'min_size': 41, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xeaG\\xab',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=8962,\n        constraints={'min_value': 7963,\n         'max_value': 9183,\n         'shrink_towards': 0,\n         'weights': {9059: 0.5}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-16016,\n        constraints={'min_value': -19464,\n         'max_value': -14625,\n         'shrink_towards': 89,\n         'weights': {-16748: 0.2762855356270545,\n          -14625: 0.07081331495739723,\n          -14795: 0.15290114941554822}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.7778255632088611},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00057c29\\U00069f2f\\U00057ce3\\U00057c53\\U00057ca9\\U00057c45\\U00057d0e\\U00057c4c\\U00057ca3\\U00057ca6\\U00057c62\\U000a5c55',\n        constraints={'intervals': IntervalSet(\n             build_intervals([359442, 692171, 864321]),\n         ), 'min_size': 11, 'max_size': 111},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=False,\n        index=None)),\n      length=22872,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='l',\n      has_discards=True,\n      target_observations={'\\x8d\\U00082b0ce': -18,\n       'w\\x9a\\x93ux\\x05n\u00b8\u00d5': 30842,\n       '\u00c2~\u00f0t\\xad7\\t\u00f7\u00d3': 2176},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-16189, 15147),\n       (-111, -67),\n       (49, -57),\n       (1000, 87),\n       (1000, 1_012_852_562),\n       (4503, -21423),\n       (8579, 404),\n       (14986, 20023)},\n      slice_comments={(7761,\n        -80): '\ud835\udd7f\ud835\udd8d\ud835\udd8a \ud835\udd96\ud835\udd9a\ud835\udd8e\ud835\udd88\ud835\udd90 \ud835\udd87\ud835\udd97\ud835\udd94\ud835\udd9c\ud835\udd93 \ud835\udd8b\ud835\udd94\ud835\udd9d \ud835\udd8f\ud835\udd9a\ud835\udd92\ud835\udd95\ud835\udd98 \ud835\udd94\ud835\udd9b\ud835\udd8a\ud835\udd97 \ud835\udd99\ud835\udd8d\ud835\udd8a \ud835\udd91\ud835\udd86\ud835\udd9f\ud835\udd9e \ud835\udd89\ud835\udd94\ud835\udd8c',\n       (-93_380_093_183_995_780_740_137_088_749_627_091_576,\n        -2_616_348_383_348_249_102): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=73, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U000116d0\ud870\uddb0\\U0003b74c\\U0001175d\\U00011777\\U0001172f\ud805\ude95\\U000116dd\\U00011778\ud805\udec6\\U000116ec\\U0003b308\ud805\udec3\\U0001176f\\U000116ec\ud805\udf38\\U000116ee\ud805\udf44\ud805\udf14\ud805\udf25\\U00011763\\U00011764\\U000116e4\ud805\ude8c\\U00074723\\U000c2438\ud805\udf30\ud805\udeb3\\U000cbbca\\U00011756\ud805\udf2a\ud805\udeac\\U000116db\\U0006121a\ud805\udf13\ud805\udf06\\U000116de\\U000116f2\ud805\udf18\\U00011785\\U000116d3\ud805\udec9\\U0001175f\ud805\udf21\ud805\udeb9\\U000116ed\\U00011778\ud805\udea6\ud805\udf06\\U0005f3af\\U000116d8\\U0001171b\ud805\udf27\ud805\udf44\\U000116dd\\U0001175a\ud805\udeb3\ud805\udf27\ud805\udf43\\U000116f2\\U0004ddf7\\U00011754\ud805\udf46\\U000116eb\ud805\udf0a\\U000116ec\\U0001a0f4\ud805\udf00\\U000116f9\\U0001177e\\U00011775\\U00013543\ud805\udec6\ud805\udf11\\U00034bde\\U000116d7\\U00011750\ud805\udea3\\U000116ff\\U00038bba\\U00011779\\U0001176b\\U000b9e3a\\U000116cf\ud805\udec6\ud805\udf32\\U00011781\ud805\udf41\ud805\ude9b\ud805\udeae\ud805\udea9\\U000116f2\ud805\udf01\\U000116eb\ud805\udeb7\\U00011753\ud805\udeb8\ud805\udf35\\U000ad430\ud805\udeac',\n        constraints={'intervals': IntervalSet(\n             build_intervals([71306, 849057, 998943]),\n         ), 'min_size': 42, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'X\\xf7\\x00}X\\x87\\xd2\\xe5l\\x92\\x94*)\\x1fmT^\\x92#\\xa1?\\xdd\\x18\\xe5\\xde\\x99\\x80\\xea\\xb0J\\x8e\\x82Y\\xce\\x9f\\xd1\\xeb\\xcd\\x08,\\xbb\\rE\\xae\\xa4ehG\\x85m\\xc0\\xa3\\xc3',\n        constraints={'min_size': 27, 'max_size': 127},\n        was_forced=True,\n        index=None)),\n      length=87,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00cc\\x9c\\x88\\U000e0f83\u00c2\\x93j',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\U000adfb5aM\u8adej',\n      has_discards=True,\n      target_observations={'\u00fe\\x0e\"\\x14': 37,\n       '\u00c9F': 1.74699281989415e+16,\n       '\u00fc\u00e6\\x16\\u0893\\x94I\u00b2\\U000fd7b3\u00e3\\U0005e35d\\x16\\U000ec85d': -3.411005774253789e+16,\n       '\\U000a3cfd\\U000ea89eb\\x01\\U00064105': 2615867372123326.0,\n       '\\U000b52c1': 5.647934824519352e+16,\n       '\\U00013822\\U000dd25b': -94,\n       '': -0.5,\n       '\\x87\u00befR': -1.40559046075407e-146,\n       '\u00c1\\x98\u00f8': -3.079932696908844e+16,\n       '\\U000c91c2\\x9d\u00d9\u00b5': -1.7551917790895808e-23,\n       'K\u00c0': 21881,\n       '>\\x1f=\\x13\\U00093ace\\\\': 12973},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(404, -45_921_812_032_950_792_098_921_698_906_970_732_523)},\n      slice_comments={(-11, 2393): '\u00cf'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-4244119215306397239, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 0.05,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.3995961150840852e+306},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'^',\n        constraints={'min_size': 0, 'max_size': 5},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-27921,\n        constraints={'min_value': None,\n         'max_value': -27882,\n         'shrink_towards': -6606,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xbf\\xae\\xb1\\xec',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xd1\\xf4\\x96\\xd3\\x8d\\xdf\\x08\\xdev\\xb8\\xe7I\\x94DUP \\x05\\x13K\\xa03@\\x9b\\xe93\\xaef\\xadh\\xb7\\x1e\\xeaV\\xddk\\xbc^=\\x0f\\xf4W\\xda\\x0c?\\xbb8\\t\\xbd\\x94\\x9e\\xf3u\\x91\\xda\\xff\\x1a\\x94',\n        constraints={'min_size': 24, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-8365,\n        constraints={'min_value': -21444,\n         'max_value': 50,\n         'shrink_towards': -8597,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=5879,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -58,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=11554,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -53,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xda9\\xe4\\\\\\xac\\x9d^\\xe5KR\\x9c\\x95+\\xf1\\x8fh\\x0c^\\x13\\x1c\\xf3\\x9a\\x08\\x9d\\x16\\xd7\\xd6\\x14gN=\\xa0\\xf8X$\\xb9/\\xc5\\xd3k\\xa1\\x80\\x1a\\x9d\\xa1a\\xeb\"\\xcb\\x12se',\n        constraints={'min_size': 25, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=13590,\n        constraints={'min_value': 13340,\n         'max_value': 16189,\n         'shrink_towards': 0,\n         'weights': {13866: 0.011218834389089976,\n          14312: 0.0861937098724654,\n          13961: 0.1021710562546495,\n          14483: 0.10149721063207015,\n          14496: 0.07891951530220842,\n          15846: 0.032089731302769826,\n          14900: 0.01703048201242297,\n          14016: 0.10119894543020527,\n          15256: 0.09317156570434525,\n          14228: 0.03690878635964338,\n          15155: 0.009203447770862258,\n          13590: 0.07145398818960808,\n          13433: 0.0770007988558827,\n          13965: 0.05844632214340394}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'g\\xe0\\xbf\\x1a\\xa6\\xfe\\xc2\\xc8\\x06\\x88]R?',\n        constraints={'min_size': 10, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u00be\u00f3Q\u00f1x\\U000648bb\u00f4\\r\\r\u00c8P\\U00074034\ud871\udd25\\x8a\u00c7\u00db\u00e4\\x16)\\U00067b27\u00e0\\x9b\u00c6\u00d1\\xad>\\x07\u00a8%m\\x89P\u00f8\u00d3\\U0005f06bF\u00c2\\x8f\\x9f\\U0006ce7f\\U0005c916E',\n        constraints={'intervals': IntervalSet(\n             build_intervals([1, 2048, 167074, 523710, 903682]),\n         ), 'min_size': 32, 'max_size': 132},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.0580489657927133e+308,\n        constraints={'min_value': 0.0015475839596649315,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.994675284393597e-30},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 8.22661327220121e+94},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-67,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 24325,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=-1_775_185_229_656_379_562,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 0),\n                                     ('b', 2, 1)),\n                                    (('a', 2, 0), ('b', 2, 2)),\n                                    (('b', 1, 1), ('c', 1, 0)),\n                                    (('b', 1, 3), ('b', 3, 0)),\n                                    (('c', 2, 0), ('c', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\x12\\x85*\u00e1\\U000a1e65n',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback='\\x82\u00c3\u00e9\u00f1',\n      has_discards=False,\n      target_observations={'\\U000612c6A^': -17731,\n       '': -10625,\n       'C\\x90': -5.427683628575393e-230,\n       '\\U000b7912WZ\u00cc\\U000394f0\\r': 3.4561955441254956e-46,\n       'yL\\U000d1bf7\\U0001561e': -7980,\n       'g\\x1e\u00bd\\x1a\\x90': 10900},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(54, 30), (21182, 90)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-30596, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9505653869917949},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.753255787426859e+16},\n        was_forced=False,\n        index=None)),\n      length=66,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 1, 1),\n                                     ('c', 3, 1)),\n                                    (('c', 2, 1), ('b', 2, 1)),\n                                    (('c', 2, 3), ('c', 3, 2)),\n                                    (('c', 3, 2), ('b', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         ' w',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='L{',\n      has_discards=False,\n      target_observations={'M\u00c6\\x06': -651536010,\n       '': -59_256_988_318_227_847_451_989_713_756_147_247_948},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-56, 4_303_778_382_527_043_025), (12626, 28025)},\n      slice_comments={(-13,\n        159_149_677_232_364_393_420_814_611_842_417_505_324): '\\r,',\n       (1_404_375_467, 16558): ')\u00d3',\n       (25826, 30332): '\\x01xY',\n       (41,\n        -25297): '\\U0010eef8\\x07<\\U000968f2\\U000d0a84\\x163\u00aeG\\x9e\\U00063166Ea',\n       (1_628_208_986, -31631): '\u00f0D',\n       (9476, -12): '\u00d9\\U000ac4d3\\x93\\x1eZ\\U00068269j\\x0e\u00dc\u00c5p'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=59, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=1000,\n        constraints={'min_value': -8096,\n         'max_value': 20555,\n         'shrink_towards': -27412,\n         'weights': {-2337: 0.09710583750137701, 16762: 0.33213972405804526}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u464a\u4596\u4663\u4589\u4636\u4575\u45ab\u45cf\u45cf\u4602\\U000568de',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [17766,\n                  34712,\n                  35312,\n                  495646,\n                  657319,\n                  712226,\n                  880007,\n                  1059630,\n                  1114110],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'L}\\x0ej\\x88}\\xc8x\\xa0Mfj\\t\\x0b\\x03I\\xd6\\xba7\\x98]W\\xf7\\xdd\\xce\\x87n\\xc1\\xa0\\x88\\x8ee3\\xa7{\\xaa\\xda\\x8f\\x06%}^i^jN\\x86B\\x0c?\\xc7;F\\xb0o\\x83\\xb1B\\x7f\\x90\\xbe',\n        constraints={'min_size': 44, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 4.592753005112747e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-5.07754752407764e+112,\n        constraints={'min_value': -8.440176264995421e+112,\n         'max_value': -2.9234160807827764e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.5},\n        was_forced=True,\n        index=None)),\n      length=28797,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('a', 2, 1)),\n                                    (('a', 1, 3), ('c', 2, 3)),\n                                    (('a', 2, 0), ('b', 3, 1)),\n                                    (('a', 2, 1), ('a', 3, 3)),\n                                    (('a', 2, 2), ('b', 0, 3)),\n                                    (('a', 2, 3), ('b', 3, 3)),\n                                    (('b', 0, 1), ('c', 2, 3)),\n                                    (('b', 0, 2), ('a', 0, 0)),\n                                    (('b', 1, 1), ('b', 1, 0)),\n                                    (('b', 1, 1), ('c', 0, 0)),\n                                    (('b', 1, 2), ('b', 0, 2)),\n                                    (('b', 1, 3), ('c', 2, 3)),\n                                    (('b', 3, 2), ('a', 1, 3)),\n                                    (('c', 0, 0), ('a', 1, 3)),\n                                    (('c', 3, 1), ('b', 3, 0)),\n                                    (('c', 3, 2), ('b', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'<-;': -97, '\ud854\udd49\\x0e': 6.9981914696728216e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(6230, 29712)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-116, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b\"\\x15\\xd5C\\xa0\\xb3K\\x84-V\\x9d\\xa8]\\x07\\xd6\\xf9N\\xcc\\xa4c]\\xf7'\\xebE\\xc9\\xc6x\\x8e\\x04|\\x0bY\\xce\\x13\\x98A\\xebI!\\x90+\\x07\\xb2\\xab\\xbeyb\\x13\\x8a4\\xbb\\x1e\\xc5\\xa4\\xef'n-c\\x08\\x8c\\x06\\xa4\\x80S\\x1b\\xb5%\\xfe'\\x89\\xa9\\x84\\xb3g8#\\xb2\",\n        constraints={'min_size': 47, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),),\n      length=65535,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('b', 2, 0)),\n                                    (('a', 0, 3), ('c', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\ud83d\ude0d',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('\u00c7j\u3107\u00e9\\U000d6e41\\U0008011a',\n                                     [UnicodeEncodeError('unknown encoding',\n                                                         'lorem \u0644\u0627 \u0628\u0633\u0645 \u0627\u0644\u0644\u0647 ipsum \u4f60\u597d1234\u4f60\u597d',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError('',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         'U',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\\x13\u00d8\\x85\u00e8\u00a8',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      ExceptionGroup('\\U000704e1\\x1d}\u00b7\\t\\U000982a6u\\x0c\u00db\u00af\\U0008ac29\u00ee\\U000902f2\u00b2t\\x88\\U000feda6e\u00bd\\U000a2dd4\\x18\u00ac\uafcd',\n                                     [UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('\u00fc\\x04',\n                                                     [ExceptionGroup('\u00e6@\u00b9',\n                                                                     [ExceptionGroup(':\u00ab\u00e5\"\\U0003be6e\\x9cP\\x9a\u00baf\\r\u00fcU\\x91Z\u19a7j\\U000ac08c',\n                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                         '[\u00fa\u00ec',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeTranslateError('\\x87\\x13\"\\x84',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason')]),\n                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                         \"[\u00e3\\x0c\u00cb'\u00ee\\x7fO\u00cf\",\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeTranslateError('\\U000d1db4\\U000ac36e\\x90\\x90q\u00de',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')]),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         'ny',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      ExceptionGroup('C',\n                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                         '\\U0010bace',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')])]),\n                                      UnicodeTranslateError('_store',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeTranslateError('\u00f6\u00cc4\u00b1\\U000c11b4\\x81\\U001076bf<\ud840\udf71',\n                                                            0,\n                                                            0,\n                                                            'reason')]),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='\\U000c4292\u00e3_\u00b6\u00d4|',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-3_557_908_475_774_738_648, -106),\n       (-1_762_984_556, 51),\n       (-32259, 33),\n       (-23082, -17807),\n       (-19324, 58_593_159_522_005_123_968_192_171_567_329_945_679),\n       (-16948, 20886),\n       (-14746, 11284),\n       (-14068, 20006),\n       (-8658, -4569),\n       (-123, -23683),\n       (-123, 32435),\n       (-47, 3443),\n       (69, 126),\n       (11480, 58_801_152_796_808_449_897_730_364_251_479_132_409),\n       (12504, -22231),\n       (27132, -23706),\n       (27866, -3549),\n       (31480, -27293),\n       (3_954_743_777_343_797_317, 117),\n       (7_226_694_476_219_029_117, -23069)},\n      slice_comments={(-20219, 8_406_653_738_171_794_374): '^\\U00075a3b\u00df',\n       (-106, -10538): 'INF',\n       (-63, -32612): '\\xad',\n       (-25408, 11): '\\x15\\U000a4175'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=9999, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U00069775\\U000463ef\u024e\u9e48\\U000704aa\u026f\u0297\\U00075acc\u0222\u026f\u0223\u028c\u0267\u02fa\\U0004aa9d\u0285\u0227\\U0006eb96\u02d4\\U000523fe\u0277\u02c4\u02f0\u02bb\\U0003a9b6\u0236\u02cd\u020e\u0270\u02ca\\U00059afb\u0252\u0291\u02c3\ud800\udeb2\u0282\u02c8\u02ff\u02cf\\U0004fd7a\u0247\u02e3\u02b8\u02d3\u0230\u02ec\u02c0\\U0006bab5\u020c\u02b5\u0261\u02a2\u02ff\\U000566c1\u0257\u02b9\u026f\u02e2\\U00046bdd\\U00062950\u02e9\\U0005bfb5\\U00075468\u0206\u022b\u029d\u0298\\U00046181\u024d\u028b\u026a\u0276\u02c1\u0293\u0284\\U000324e2\u02d0\u02f6\u029f\u0220\u0253\\U0006c0e3\u0275\u0215\u02ec\u0271\u0256\u02be\u0214\u0238\u028a\u02b3\u0263\u0281\u02ad\u0233\u0226\\U0003a7cb\u0281\u02c8\u0220\\U0003aea0\\U000596f3\u0256\ud85a\udec7\u020c\u02cf\u02bd\u02cc\u0272\u02da\u0201\u02dc\u027e\\U0005accd\u029b\u02ec\u02a2\u02bb\u0268\u02b1\u02c3\u0298\u02b0\u02da\u0229\u0269\u02d1\u02ad\u02c1\u02f7\u028b\u02ea\u0223\u0208\u02cd\u02d5\u0291\u02db\\U0004c6dc\u020e\u021d\\U00046f38\u02ff\u02a1\ud874\udc04\u02fe\u02db',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [512, 15381, 31030, 68362, 154563, 483437, 974112],\n             ),\n         ), 'min_size': 48, 'max_size': 148},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x91J8Iv\\x88o\\x13J\\xc9\\x05\\x94 p\\xc2\\x85\\xefC\\xd2\\xf8\\x04Q\\xa9G\\xd2@\\xbfZ\\x84\\xc7\\xb0Z \\x87\\xa7\\x82CR\\x90\\xda\\xf3g0\\x06\\x94\\x07\\x9ds{\\xc10$',\n        constraints={'min_size': 44, 'max_size': 144},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"T\\xef\\xa4\\x99\\x8d\\xd4\\xc9\\x8a\\x92\\x85\\xbfp\\xe5S\\xf7\\xc1;[0\\x0b7o\\x17\\xe0Q\\xa7\\xbd\\x9f1\\xcb\\x1e\\x11\\x11\\x0c\\xce\\xda\\x03I&m\\xa6\\n\\xa2\\xa9\\xc87\\xe1\\x8f\\xc8'\\xe7i\\xb2\\x94:\\x19\\xe3\\xb2g\\xe4ghU*\\x94]\\x07\\\\S\\x12\\xbd\\xaf\\xb5\\xcb(\\x0cTtm+\\x86\\xe4a\\x8c\\xc74\\x0fzT\\xd9{cF\\x05\\xa0\\x83\",\n        constraints={'min_size': 50, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=5.853880907281275e+307,\n        constraints={'min_value': -4.537275016581889e+16,\n         'max_value': 7.95461522840055e+307,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.853880907281275e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u02fc\u025a\u0272\u0265\u0201\u028b',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  1,\n                  512,\n                  95954,\n                  102960,\n                  131562,\n                  295598,\n                  413474,\n                  441881,\n                  471114,\n                  523748,\n                  676679,\n                  756966,\n                  1001002,\n                  1058585,\n                  1083214],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1.7976931348623157e+308,\n        constraints={'min_value': -inf,\n         'max_value': -2.0598038163364837e+98,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.419383421689929e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xdb\\xc4\\xcc@\\xa1\\x95',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=300,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 2, 3),\n                                     ('a', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('native',\n                     [UnicodeTranslateError('', 0, 0, 'reason')]),\n      expected_traceback='\\x97\\U00054911\u00e2\\x06\\U000abade\\x0e\u00eb\u00b4\u00fa\u00e1_P\\U000acad2',\n      has_discards=False,\n      target_observations={'Iq\\U000837bb2\u00a3\\x1f\\U000722d9\\U000dabe5': -6.2999393577639736e+16,\n       '\u00fc\u00c9': 3_495_569_759_142_793_215,\n       '\\x8e\\U0010b03d\\U00061e73\\x92\u00a6': 15910,\n       '2': 11326,\n       '\u00b0\\x0f\u00e6\u00f3i\\x1b\\U000a2d42': -25128,\n       '\u00f8': 4.779943425239319e+16,\n       'A\\U000c7d80\\U000991b0\\x149\\x82\\U00072b20': -4.214047489925487e+16,\n       '%}\\x7f\\x81\\x9eY\\x8a\ud81a\udf35u': 5.6670626192457336e+16,\n       '\\x82\u00d1\\U0006fd27\ud83c\udf55\\x1b': 2684438214012736.0,\n       '\u00d2C=\\x92T\u00caX\u00be': 19826,\n       '\\U00044a7e\u00bd\\U0001487c\u00ef\\U000f24ce\\x12\\r;\\x04\u00a7': 21777,\n       '.hypothesis': 6.490963676004367e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-150, -43): '\u00c1A\u00d0T\u00c6',\n       (-6_630_559_529_100_433_806, -24894): '\u00df\"\u00f5'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-122, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b\"\\xe2\\xee\\xc3,\\xf8L\\x8eE\\x86\\xe79\\x06O'\\xect\\x8b\\xaa\\xff\\xbf\\xee\\x995\\xef7\\xce\\xd8|\\x80\\x8eG\\xa8R\\x8eX\\xd0\\xe1\\x8e;\\xf6\\xba7BHn\\xd8\\xefU\\x17\\xf4\\xd73'\\x1a\\x15]\\xa6_\\x7fzp\\xaf\\x958[o\\xdd W\\x8d\\xae\\xb4\\x80&6l\\x10m\\x86\\xd9\\x95-\\xd4\\x9b\\xf9\\xdd\\xa4\\x87\\xd2\\x86i\\x102}B\\xeb\\xc6\\x9c\\x8e\\xcb\\xc7_flu/\\xfe\\x8e(\\xa65\\xe8jB\\xd1{(\\x93+\\x17*\\xf3F\\x7f\\x81\\x105X\\x87PGPb\\xdd\\x15\\x95;\\xab\\xaf\\xd5 \\xf8\\xabB\\xf66?\\xf5\\xe4\\xffu\\xd7\\x96\\xdf\\xc8^\\x89\\xc0\\x8bfQRK\\x19\\xc0\\x175\\tFa\\xa2/\\xeb@\\x9an\\xdf\\xc2f\\xae\\xec/b\\xf2\\xfb\\x86q\\xb9=\\x13E\\xde5_\\xf3\\x07\\x7f\\x89wS\\x08\\xf2\\x06\\xfb\\x91\\xb2b\\xa9a\\xfe \",\n        constraints={'min_size': 43, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x04\\xda\\xc0\\xb3\\x03b\\x97\\xfa\\r',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'-',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=4.3563357357712366e+307,\n        constraints={'min_value': -6.787158968829941e+16,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.5146679482480746e+16},\n        was_forced=False,\n        index=None)),\n      length=-3_452_259_234_378_661_859,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('b', 0, 1)),\n                                    (('a', 0, 1), ('a', 3, 3)),\n                                    (('a', 2, 1), ('b', 1, 0)),\n                                    (('b', 0, 2), ('c', 3, 1)),\n                                    (('b', 1, 2), ('a', 0, 3)),\n                                    (('b', 1, 3), ('a', 2, 3)),\n                                    (('b', 3, 0), ('c', 3, 0)),\n                                    (('b', 3, 2), ('b', 1, 0)),\n                                    (('c', 0, 1), ('b', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00f8\u00e5\u00d5\\U000be183\\x00\\U0007ee03\\x15\\x99\\U000f37e1\u00a2\\n)\\U000aaf77\u00df\\U0001c1ad',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\x0b\\U000a8ab9\\x15',\n      has_discards=True,\n      target_observations={'\\x07': -2_019_277_422},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-26662, -98), (10624, 8192)},\n      slice_comments={(13560, -5_068_879_994_113_389_251): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=28968, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=1.445709893552218e+16,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.1125369292536007e-308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.5},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u46dc',\n        constraints={'intervals': IntervalSet(\n             build_intervals([17973, 59213, 321106, 898131, 1002487, 1114111]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.16666594610602117},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.5610706665611712e+308,\n        constraints={'min_value': 6.779011415737208e+16,\n         'max_value': 1.5610706665611712e+308,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.5610706665611712e+308},\n        was_forced=True,\n        index=None)),\n      length=1588,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 3),\n                                     ('b', 1, 0)),\n                                    (('b', 2, 1), ('c', 1, 1)),\n                                    (('c', 1, 1), ('c', 3, 2)),\n                                    (('c', 3, 1), ('b', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\U000af457': -3.845805960304042e+16,\n       '\u00afs\\U00061893S': 15,\n       '\\U0010b834\\x8c': -6.101068973573314e+16,\n       '\u00b5\\x0b3Dn': -25950,\n       '\u00cfJ\\x03\\U0003faaa': 26167,\n       \"\ud82c\udeda'\\U0003d9dd\": 18643,\n       'EG,)\\x9f': 6.074131792976809e+16,\n       \"'\u00b4\u00f9>\\U000ef126\u00aa\\x08\\xa0\\x90\": 4.916598175571164e+16,\n       '': -8.050622997962012e+211,\n       '[\ud863\udc55': 8192,\n       'N\u00c0\\x8e\\U000fbf83': 4.695535117652171e+66,\n       'vJ\\t\u00a6\\U000325a6': 728708653,\n       ',rX@X\\U00060b25\\U0006ee44\\U000485cdM\u00c5\\x00<': -1187520691785.4382,\n       '\\x8f\\U000523a4\u00a94\u00ab\u00a5a\u00c99\\x8b\\U00015550': 1000,\n       '\u00a3\u00f4': 9172,\n       '!\\x85': 4.199858781364154e+16,\n       '\u00d8\\x9a2}': 3_773_772_416_813_534_884,\n       '\\U000f8ce4\\U00015947': 118,\n       '\\x0c\\U0010575bo[\\U0003f7ea\u00e0\\x80\u00ce\\U000df55cO\\x1f\\\\\u00d6M\\U000f64e8\u00bd\\x1d\u00cf': 3.22089749308386e+16,\n       '\u00b1\u00dd\\U000d96b0\u00d0\\U000fe864\u00ae': -inf,\n       '\u00b7T^9(\u00a7\u00b1\\U00041631y\\U00019524>\\x02v\\U00102df9\\x0c': -67,\n       '~': 4.6853773217343544e+16,\n       '\\x06\u00b0\\U000583f2': 0.05,\n       'b': -2.8120172379189652e+16,\n       '\\U000d6996\\x07\u00c5\\U000c81be\\x87O\\x97\\x1bOQd\\U001072f2\\U00066aac\u00a9\u00ce\u00e3\u00f8\u3d23\\x00': 2.2193935254755212e+16,\n       '\\U00047a94': 88,\n       '\\x06\\U000bdc30\\x9e\ud872\udf0e\u00ea\\U00040b7f': 3.846712137081661e+16,\n       'Y': -9761,\n       '`\\x1aa^\\x93\u00cc\u00a7\\x16\\U00059c82\u00b30\\x95': 20575,\n       '}': -27127,\n       '\ud863\uddeaS\u00a3\u00b3\u00b1q': -39_110_212_031_385_741_112_079_961_618_281_568_738,\n       '\u00c2\\U000674a1\u00beY\\U000916f4\u00ff\ud859\udf72\u00e9\\x88A\u00c8\u00bb\u00c5q;\\x8e': 11,\n       '3\u00c4\u00f0\u00ef': 4.409476726118377e-298},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-5_115_669_950_691_878_239,\n        -58_351_459_960_887_209_348_305_718_665_583_591_428),\n       (-31006, -96),\n       (-19438, -6_748_511_848_477_698_535_634_615_042_038_830_847),\n       (-10998, -44_994_475_028_857_514_562_663_147_153_449_955_505),\n       (-3829, 8_489_375_806_494_325_531),\n       (-1311, 29426),\n       (51, -19811),\n       (94, 20),\n       (95, 6_674_829_254_384_559_541),\n       (3895, -11411),\n       (10492, -21568),\n       (21394, -70),\n       (4_655_141_544_817_043_489, 86)},\n      slice_comments={(65535,\n        -5_828_052_594_409_491_645): '\\x98\\x03~\\x12U\\U00074db0\\x06\\U0003c846\\U00055546\\U00098c00\u00b3\u00d8\\U000ccc51\u00de\u00b3i\\x16g',\n       (-30851, 18): '\\x91\\U0007f950}',\n       (-1194, -1998): '',\n       (7,\n        -64_306_214_394_332_509_698_175_311_845_918_101_942): '\u00a1g\u00d60\u00f6\u00d1\\t\u00bb\u00f1\\x8a\\x8b',\n       (44_984_351_557_959_564_033_906_043_383_995_992_641,\n        -2_841_666_178_041_535_086): '\\x1e'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-26876, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b\"'\\xcf\\xd3\\xc9\",\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00012875\\U000128dc\ud873\udc51\\U000128da\\U0001291b\\U000128d3\\U000128bb\\U0001292b\\U00012925\\U000128e9\\U00012885\\U000128f9\\U00012859\\U000128bc\\U000128f6',\n        constraints={'intervals': IntervalSet(\n             build_intervals([75840, 234719])),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=3,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\u00ff\u00f1\u00f2\u00ff\u00d5\\x0eNq\\U000ffacf\\U00086c30k\u00a2\u00be`',\n      has_discards=False,\n      target_observations={'\ud84a\udd66\u00f3\\x84\ub4cc]\u00a2\u00be\\x10\\U000e4b14/\\U001079ab\u00dc': -2.4719838345421084e+16,\n       '\u00a3': -68,\n       \"\\U00107103'\": -1.4160623889399196e+16,\n       '\u749f\\U000b7919': 2.2250738585072014e-308,\n       '\\x03s\\x8aT\u00d9\\U000cb90b\u00e0\\x9b\\\\\\x02\u00fc \u00ec\u00b5\\x8c\\x9a\\U00035f66u\u00d5': -7.093199148647743e+16,\n       'A\u00de\u00f9\\U000f7f07': -13,\n       '&r\u00c2I': -5_216_749_851_931_750_380,\n       '\\x02\\x19\\xa0\\x134\u00f7\\U00065039\\x8a': -1204,\n       '\\U000670fe\u00e77;': 3.0432749271737093e+31,\n       \"\u00ead\u00d9\\r'\u00ac\u00b7\\x83\u00dd\\U00013d22\u00a2\u00e0\u00c7:(-\u00e7%\\U0009dbf4\u00af\": 3.7499793215571045e-172,\n       '\\x10\u00e2?\u00c7\\n)@\\x0e\\x0b': 71},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(15125, 6_286_167_706_431_290_992)},\n      slice_comments={(-20850, 21): ')\\x86\\x1b\\x8f\u00d2',\n       (125, -20506): '',\n       (-14948, -60): '',\n       (-64, -60): '\\U0009a57f(\u00a4\\U00013a43',\n       (31, -7_789_102_720_936_885_974): '\\x03\u00e2\\x9b\\\\i',\n       (13, 404): 'report',\n       (-642019508,\n        -35): '\u00c2\u00c4\\U000586aa\\x9aH\\U000c6b9f\\U000978dc|\\x94\\U00101533',\n       (80, 27098): '\\U00100490\u00d9',\n       (-21914, -48): 'S+\u00f0',\n       (-8959, -79): '',\n       (30783, -7746): '\u00cf\u00f0\u00bf\u00a4'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "updated size": ""
        },
        "timing": {
          "execute:test": 0.015373793023172766,
          "overall:gc": 0.00020474899793043733,
          "generate:args": 0.18992400768911466
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 4,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 4,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878928.0714161
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-121, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\ud880\udeff\ud880\ude27\ud880\udeff\\U00076c79\\U0008728d\ud880\ude42\ud880\ude1e\\U00056771\\U00075f74\ud880\udeb6\\U00062614\\U0003ba25\ud880\udeef\ud880\udedd\ud880\udecb\\U0006a45b\ud880\ude37\ud880\udf12\ud880\ude76\ud880\ude47',\n        constraints={'intervals': IntervalSet(\n             build_intervals([197145, 558921, 833078]),\n         ), 'min_size': 15, 'max_size': 115},\n        was_forced=False,\n        index=None),),\n      length=25_137_075_204_010_999_346_873_119_044_524_729_058,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 0),\n                                     ('a', 3, 3)),\n                                    (('b', 2, 1), ('c', 0, 3)),\n                                    (('c', 3, 3), ('b', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\\U000371c3\\U0010ee49\\x06\\U0005ca12\\x03\u00e8\\x12\\x1f\\x8a',\n      has_discards=False,\n      target_observations={'\\x1a': -7495, 'failure_observation': 20586},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-11091, -26894),\n       (-6140, 28332),\n       (-44, 31882),\n       (2157, 9999)},\n      slice_comments={(77, 24674): '',\n       (-68, 67): '',\n       (952_356_927_997_050_318, -19): ']Y*\\x87\u8a96\\U000d37e0\\x18\\U00033f96'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=7259446161312436567, context=(), group_elems=()),\n      nodes=(),\n      length=-1_217_798_913,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('c', 3, 3)),\n                                    (('a', 0, 3), ('b', 1, 0)),\n                                    (('a', 1, 0), ('b', 0, 3)),\n                                    (('a', 1, 1), ('c', 0, 3)),\n                                    (('a', 1, 3), ('b', 1, 2)),\n                                    (('b', 0, 2), ('a', 0, 1)),\n                                    (('b', 0, 3), ('c', 2, 1)),\n                                    (('b', 3, 1), ('a', 2, 1)),\n                                    (('c', 1, 0), ('b', 0, 3)),\n                                    (('c', 1, 2), ('a', 2, 1)),\n                                    (('c', 2, 1), ('b', 1, 0)),\n                                    (('c', 2, 1), ('b', 3, 3)),\n                                    (('c', 2, 1), ('c', 3, 0)),\n                                    (('c', 3, 2), ('a', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00e0\u00d7\\x1a\\x0e', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x15I\u00b3\u00a7\u00c8,\\x9f\u00d2\u00cc\u00c5\\U00015162': 5.322537763150462e+101,\n       '+0.0': 1123705532061117.0,\n       '#\u00c9\u00cfi\u00f2\udb40\uddad\u00fe': -1.401298464324817e-45,\n       '\\U0004e210\\U00084095X\u00f6\u00bb\u00ea': -8.882821832913489e+225},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_103_672_336, 14),\n       (-23032, 123),\n       (-22085, 18251),\n       (-9095, -10449),\n       (-16, -8096),\n       (41, -22764),\n       (55, -27),\n       (125, 14104),\n       (11713, 21),\n       (22342, 31590),\n       (906028925, 119)},\n      slice_comments={(78_870_723_282_769_262_088_027_921_797_624_503_924,\n        -106): '\\U000ff15d',\n       (404, -23): '0..0'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-30321, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xe7+\\xf8<\\xcbj\\x0f\\xb2-\\x81\\xbb\\xa5\\xee\\xaa\\x8ax\\xff\\xf0\\x7f\\xf2\\xec\\x01\\xda\\x87%\\xd6p\\x9d:_c\\x99f%\\x863\\xf0\\x14\\xaaV\\r@\\xd8',\n        constraints={'min_size': 14, 'max_size': 114},\n        was_forced=False,\n        index=None),),\n      length=-1_216_392_842,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\u00e9',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('[A\\U000def16\u00d3\u00ec\\x11',\n                                            0,\n                                            0,\n                                            'reason')]),\n      expected_traceback='\u00fb\\U000a7259\\x1e\\U000102d6g\ud801\udef8\\x9c\\x0bG\u00dd\u00ca\\x1b',\n      has_discards=False,\n      target_observations={'\\x13f\\U000a96fe': 4.750667271579825e+173,\n       '\u00bf': -3.9257361852526204e+148},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_840_905_751, -28786),\n       (-23841, 86),\n       (-11937, -2_345_105_339_512_901_487),\n       (-11923, 65),\n       (-104, 122),\n       (-75, -22753),\n       (-31, -6249),\n       (17, 300),\n       (35, -130_393_787_834_473_070_473_963_301_814_893_826_217),\n       (36, -10966),\n       (71, -19925),\n       (99, 10402),\n       (14389, 8069),\n       (28019, -8532)},\n      slice_comments={(17953, -62): '\\x18\\x02;\u00d7'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.002095417003147304,
          "overall:gc": 0.0,
          "generate:args": 0.011544707987923175
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878948.144511
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=82, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-1.7976931348623157e+308,\n        constraints={'min_value': -inf,\n         'max_value': -5.798948567445103e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.0832405687686976e-63},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x9b\\x83\\x92\\xef\\xaf\\x06\\x02',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=6.753561832564723e+16,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.0095980626940468e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=21672,\n        constraints={'min_value': 14745,\n         'max_value': 65535,\n         'shrink_towards': 43,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-547.7151362489492,\n        constraints={'min_value': -759.3281724648807,\n         'max_value': -0.0,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 338.20460532184546},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'(c',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=1000,\n        constraints={'min_value': -7302,\n         'max_value': 3598,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=18515,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('b', 0, 2)),\n                                    (('b', 0, 1), ('a', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='I',\n      has_discards=False,\n      target_observations={'': 7.139951492856403e+223,\n       '\u00a8\\x15\\U000eac25': 1.7144909985772078e-174,\n       '\u00c5\u00dbZ\\t*\\U000d3108\u00db<%Q': 560873998,\n       'True': -2.5849622033982864e+16,\n       '\u00eaD\u00d7': 0.0,\n       '\u00f6\\U00080331\u00f7': -105,\n       '\\x89\\x9a\\U000a71ea\\U00101c4a\u00f0\\U0007bb22\\U000cb726[\\x99\\x93_\\x98#<\\U000e8b4a': -28950},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-30056, -72), (9641, -30308)},\n      slice_comments={(4986, 10856): '\\x97,\u00ed}\\U00058518\u00c3\u00e9\\x9f\u00ff\u00ddk',\n       (-4137, -4414): '|]\\U0005179c\\x92',\n       (300, -13): '\\r\\x05]\\U000b98e9P\\x99\u00a8'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0005649169906973839,
          "overall:gc": 0.0,
          "generate:args": 0.011253999953623861
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878926.4836092
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-14412, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-13485,\n        constraints={'min_value': None,\n         'max_value': 26718,\n         'shrink_towards': 32621,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=16183,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -3747,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'{\\xd9cR\\xd4\\xca\\xde\\x85\\x19q\\x83\\xce\\xb7\\xcb',\n        constraints={'min_size': 11, 'max_size': 111},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-140_126_386_036_500_855_235_302_025_776_579_597_955,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 9018,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud862\udc82\ud862\udc1f\ud862\udca8\ud862\udc48\ud862\udc89\\U0007d968',\n        constraints={'intervals': IntervalSet(\n             build_intervals([165917, 737025, 834292, 904283, 940287, 975235]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 8.716294023540534e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-3.626330398397323e+16,\n        constraints={'min_value': -inf,\n         'max_value': 1.3705794483774542e+271,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.886211228705006e-44},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00052421\\U000523cb\\U0005239a\\U000523cb\\U0006f8e5\\U00057373\\U00052384',\n        constraints={'intervals': IntervalSet(\n             build_intervals([336725, 468332, 879463]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-66,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError(' \\U000d169f+\u00d8\u00ec?\ud84f\udd90\u8700',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback='\u00bc\u00e2t\\x86\u00b2K,\\x92',\n      has_discards=False,\n      target_observations={'': inf, '\\U000a4ffdo%\u00bf\u00b4': 118},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-450, 4550),\n       (404, -158_241_729_319_017_751_058_839_209_067_799_937_221),\n       (8513, -11085),\n       (12122, -92),\n       (17836, 19)},\n      slice_comments={(11357, -9543): '{'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=9762, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b\"\\x9dC\\xb5C'\\n\\xd1G\\xd0V\\xcc\\xe4\\xdb(\\xbd\\x1d\\xc0_\\xa1\\xe49\\tn\\x06|\\xde\",\n        constraints={'min_size': 18, 'max_size': 118},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.2720929654466684e+307,\n        constraints={'min_value': 2.911114284973236e+16,\n         'max_value': 6.601780992897157e+307,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.2720929654466684e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0003adc3\\U0003ae1f\\U0003adb6\\U0003add0\\U0003ae5d\\U0003adf1\\U0003ae7b\\U000c3e06\\U000c0c66',\n        constraints={'intervals': IntervalSet(\n             build_intervals([241052, 279657, 761064, 966194, 1049903]),\n         ), 'min_size': 9, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([256892, 402369, 551074, 576717, 710224]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-12,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 2),\n                                     ('c', 3, 2)),\n                                    (('a', 3, 0), ('b', 2, 2)),\n                                    (('a', 3, 2), ('b', 3, 2)),\n                                    (('a', 3, 3), ('a', 3, 2)),\n                                    (('b', 0, 3), ('c', 2, 1)),\n                                    (('b', 2, 2), ('b', 0, 1)),\n                                    (('c', 1, 2), ('b', 3, 3)),\n                                    (('c', 3, 2), ('c', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-33, -15339): '\\U00082882\\x91\\U000ffeb2]0',\n       (404, 2): '\\U0003f1ce\\x02\\x14\\x99\\x91\\x9br',\n       (2_696_540_005_264_808_550, 404): '\u00eb',\n       (-30583, -579421195): 'W\\x9b\u00bb ',\n       (4_046_730_986_827_261_856,\n        412): '\\x0c\u00ca\u00f1\\U000572d2\u00a9BJ\\U0008e59e\u00d0\\x18\\U0008159e\\x9c>\\xa0',\n       (42, 2691): ',\u00f6\u00d6\"\\x15\\x80\u00d3\u00ae',\n       (26_642_082_262_115_747_670_734_727_612_623_158_563,\n        4669): '\\x0e\u00d3x\u00ef\\x0f\\x8f\u00da\u00a6Z\u00b9\\U0003a70f\\x86\\x04'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-1666, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-18151,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -54,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.897673732175412},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-11913,\n        constraints={'min_value': None,\n         'max_value': -11835,\n         'shrink_towards': 3_650_616_622_204_097_912,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9343600003734847},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 5.960464477539063e-08},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xb7\\xbeS\\xe6*\\x8f:\\x1b\\x94\\x7fOe\\xa8\\x8e\\xf0\\xca\\xabL\\x102\\xfe\\xfc\\x15\\xedu}\\xb9)\\xce,t39q\\xe4\\xdc-n',\n        constraints={'min_size': 31, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 1.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 1.3968134605075556e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.560273638030356e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-4.82796183946915e+22,\n        constraints={'min_value': -7.532584886128525e+22,\n         'max_value': -2.164961803456236e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.0771445791422727e+22},\n        was_forced=False,\n        index=None)),\n      length=-3_569_450_356_375_318_555,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 3, 0),\n                                     ('a', 1, 3)),\n                                    (('c', 3, 1), ('b', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [UnicodeTranslateError(\"X'\u00bfC<k\\U000803c4\",\n                                            0,\n                                            0,\n                                            'reason')]),\n      expected_traceback='0..0',\n      has_discards=False,\n      target_observations={'N': -2.53718480603259e+297,\n       '\u3aeb': -571962477,\n       '\\U0010cfa6>1\\x108-7\u00e9': -68,\n       '\ud849\udec9': 9007199254740992.0},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(512, -66)},\n      slice_comments={(24325, 100): '\\t'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-122403120459619542199945280617995141033, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=6,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 100,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8409568458207397},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.4598035335047218},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-2.0279572476356039e-171,\n        constraints={'min_value': -2.281485341292012e-171,\n         'max_value': 0.0,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.8528543434530342e-171},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-3.402823466e+38,\n        constraints={'min_value': -inf,\n         'max_value': -6.171647118950865e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 9.390522128115953e-35},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u048b\\U0010588a\u0495\\U000567f1\u0410\u04aa',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1024,\n                  374081,\n                  596999,\n                  798369,\n                  826732,\n                  889693,\n                  927098,\n                  1114111],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=4187911520880752.0,\n        constraints={'min_value': 2.220446049250313e-16,\n         'max_value': 1.956945518191509e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1e-323},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=7.1167117978970696e+16,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.192092896e-07},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -1.9,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.577666765464996e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud86c\ude62',\n        constraints={'intervals': IntervalSet(\n             build_intervals([44577, 177735, 540135, 586196, 790321]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-6620,\n        constraints={'min_value': -13143,\n         'max_value': None,\n         'shrink_towards': -9742,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.980792032571482e+307,\n        constraints={'min_value': -1.7035076507160512e+16,\n         'max_value': 1.7725336777369677e+308,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.2250738585e-313},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 1.0135158533151288e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 3.402823466e+38},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 5.458932467548336e-234},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1.6326306740558895e-201},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\udf7f\\udfa4\\udf9b\\U000a0543\\udecc\\udf69\\udf01\\U000b76fb\\udf53\\udfa7\\udfa2\\udfb6\\udf6b\\U000da013\\udf4e\\udee2\\U000877ec\\udf05\\udf11\\udee1\\udf1f\\udf72\\udf66\\udf98\\udf17\\udeef\\udfa1\\udf10\\udf7c\\udf9e\\U0009eaf5\\udee3\\udf80\\udfbc\\U00039732\\udf24\\udee9\\udf63\\udeed\\udfba\\udf13\\udf74\\udee7\\udf74\\udf53\\uded6\\U000aba9b\\udf06\\udf54\\U000e03dc\\udfb5\\udf2d\\udf0e\\udf74\\udf89\\udf66\\udfb8\\U000546fa\\U0009a3aa\udb40\udd7b\\udf9a\\udee4\\udf17\\udf2a\\udf25',\n        constraints={'intervals': IntervalSet(\n             build_intervals([57025, 346630, 525934, 931235]),\n         ), 'min_size': 41, 'max_size': 141},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=3397,\n        constraints={'min_value': 88,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=nan,\n        constraints={'min_value': -8848480514318321.0,\n         'max_value': 1.683911485818626e+308,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.5},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.266978016425886},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-3_903_940_776_690_513_721,\n        constraints={'min_value': None,\n         'max_value': 31619,\n         'shrink_towards': 80,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xf3s\\xafR;\\x9c\\xd8:\\x8c\\xa7\\x0e\\x0fQq\\x90\\xac\\x0b.\\xc7\\x1b\\xc8Qy\\xba\\xc9I\\xb5\\xd7\\x08\\x02w\\xb6\\xd9\\x87\\x9eh',\n        constraints={'min_size': 27, 'max_size': 127},\n        was_forced=True,\n        index=None)),\n      length=-1_208_029_200,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('b', 2, 0)),\n                                    (('a', 0, 0), ('c', 0, 0)),\n                                    (('a', 1, 2), ('b', 1, 2)),\n                                    (('a', 3, 0), ('b', 2, 1)),\n                                    (('b', 0, 0), ('b', 2, 1)),\n                                    (('b', 0, 1), ('b', 1, 1)),\n                                    (('b', 3, 2), ('c', 1, 3)),\n                                    (('c', 0, 0), ('a', 3, 3)),\n                                    (('c', 1, 0), ('b', 2, 1)),\n                                    (('c', 1, 1), ('c', 3, 1)),\n                                    (('c', 3, 1), ('b', 0, 1)),\n                                    (('c', 3, 2), ('a', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-24099, 13018),\n       (-12457, -23550),\n       (76, -9027),\n       (10108, 21412),\n       (18180, 7501)},\n      slice_comments={(-30133,\n        155_538_423_003_626_873_240_315_247_192_527_536_929): '',\n       (-15069, 5856): 'u\u00fd0\u00d5',\n       (-103, 62): '\u00ce]\u00f5\u00c2',\n       (22609, -10342): '\u00b2\\x0e\ud847\udc9d',\n       (-4_607_344_770_370_272_351, -1_140_955_833): '6',\n       (-1_092_247_238, -23353): '\u00f0',\n       (-66, -9352): '',\n       (65535,\n        -8037): '\\U0009c480\\U000fadb2Hv*\u00c8\\x90o3\\U000de01d\\U0001ef3f\\x19\u00e8\\x7f\u00dd\\x07\\x0c[c\u00b0\\x07',\n       (-12428, 30460): '\u00a7\u00f4',\n       (-29652, -108): '',\n       (31047, 8619): '\u092a\u0928\u094d\u0939 \u092a\u0928\u094d\u0939 \u0924\u094d\u0930 \u0930\u094d\u091a \u0915\u0943\u0915\u0943 \u0921\u094d\u0921 \u0928\u094d\u0939\u0943\u0947 \u0625\u0644\u0627 \u0628\u0633\u0645 \u0627\u0644\u0644\u0647',\n       (-7_707_142_125_247_553_622, -10241): '\\U00076cde\\x82',\n       (161689241, 65535): 'HOSTNAME'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from integers(0, 1114111).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.006241541996132582,
          "overall:gc": 0.0,
          "generate:args": 0.1268276308546774
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878966.4377038
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "",
        "representation": "",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x106d0c800>, min_size=0, max_size=inf).map(tuple), length=one_of(nothing(), nothing(), integers()), has_discards=one_of(nothing(), nothing(), booleans()), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason')))), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text()))).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {},
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878950.7799659
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=30440, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=1.3361666329558232e+308,\n        constraints={'min_value': 3.8536078925733213e+205,\n         'max_value': 1.7976931348623157e+308,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.5},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9999999999999999},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0006e519\\U0006e54c\\U0006e54e\\U0010fa2b\\U0006e492',\n        constraints={'intervals': IntervalSet(\n             build_intervals([451703, 712351, 1109555, 1114110]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.2830320910311555},\n        was_forced=True,\n        index=None)),\n      length=-20125,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('a', 2, 3)),\n                                    (('b', 0, 1), ('c', 3, 1)),\n                                    (('b', 1, 1), ('a', 2, 3)),\n                                    (('b', 2, 3), ('a', 0, 3)),\n                                    (('b', 2, 3), ('b', 1, 2)),\n                                    (('c', 0, 1), ('b', 1, 1)),\n                                    (('c', 2, 2), ('a', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00e2\\U000a8a27\\x9b\u00e6\u00b1\\U00104a7d-3\u00d3\u00ef\u00f37\\U0008d75a\\U00062f7a>\\x13.\\U000fe3a9': -8790,\n       '\\x1a\u00da\\x1af\u00bb\\U000b66b8\u00d1^p': 97,\n       '\\x0f\ud86d\udc56\u00c3\u00c3\\x95;\\x80\\U00041e86a=I\\x82\u00f1\\U001009876\\x80\\U000af8a8': 3.188811975039479e+62,\n       '\u00ba6\\U0007efe0\u00d4dc': -5.438978788651685e+16,\n       '': -20077,\n       '\u00eb{\u00e5m\u00c3\\U0007b747\u00a5': -27050},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-21660, -15512), (25819, -84)},\n      slice_comments={(-8744,\n        -51): '\\U00091d6a\\x0b\\U000d0a95\\x8e\\U000e1097\\x1eC\u00ba',\n       (6, 98): 'W\u00b6\u00a5)\\x82c',\n       (-43, 11844): '\\x12\u00e2%\u00b0\\U000be26c',\n       (-152_420_369_082_419_485_055_817_728_735_716_430_614, -22940): '',\n       (10912,\n        16_670_058_840_199_265_356_390_861_172_535_580_788): \"W6M\u00fdq$\\\\\\\\'\",\n       (404, -11221): '\\xad',\n       (300,\n        -41_353_001_860_125_368_185_055_597_383_692_395_507): '\\t%\u00c3\u00c8\u00cd\\x84'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1354137662, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'hH\\xaeB5',\n        constraints={'min_size': 2, 'max_size': 102},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=4.186997696393797e+16,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.5},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=569937220,\n        constraints={'min_value': 27581,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=30932,\n        constraints={'min_value': None,\n         'max_value': 72_650_761_695_789_825_856_329_709_854_806_564_736,\n         'shrink_towards': -30495,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1.905389453647874e+54,\n        constraints={'min_value': -2.096948018734757e+54,\n         'max_value': 5.974145672108012e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 4.529313836566048e+16},\n        was_forced=False,\n        index=None)),\n      length=-24749,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 3, 0),\n                                     ('b', 0, 3)),\n                                    (('c', 0, 0), ('a', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\x95', 0, 0, 'reason'),\n      expected_traceback='',\n      has_discards=False,\n      target_observations={'\\U000c7439t\u00a9\\U000f6275\u00a3\u00a1\\x86\\x03\\x19&i<': 1.3175486150277976e+98,\n       '%\\\\': 12857,\n       '': 1.1,\n       '\\U000eb4af\u00b1\\x1d': -29397,\n       '\u00c8\u00bf': -5.687531793268816e+16,\n       '\\x12\\U000b52d6\\x04\\U00074154\\x04\u00c9\u00db': 11882,\n       'p\\U0006afa5': -389971909521705.0},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-72_287_518_214_740_867_427_890_041_124_358_590_259, 108),\n       (-121, 27436),\n       (-116, 22),\n       (50, -8037),\n       (19825, 836_409_039_947_812_687),\n       (31434, -88)},\n      slice_comments={(53, 15075): '',\n       (53, -86): '\\U0003d2ca_\u00fb\\U00050d1d\u00af\u00fe\u00fc',\n       (99, 37): '\u00dcPs\\U00097c41\\x1c',\n       (-18635, 9999): 'G\\U000128b6\ud81a\uddce\\U00037bd4\\x90',\n       (22931, 416062108): '\\x9c\u00e3',\n       (-2887,\n        -20161): '\u00f2\\x81Q\\x18+p\u00ecA\\U00083f45y]\\U0009c762e\\U00050846\\x04q\\x9c\u00f4\\n\u00ce\\U0007f90b\\U0003d843\\U0008e279E',\n       (1969, -12770): '\\t~\u00b9\u00edK\\U000f0f6e\ua154'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=68, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U00016755\\U0001672b\\U000166ea\\U000167b7\\U000167de\\U00016762\\U000167cf\\U00016733\\U0001673b\\U000167af\\U000167af\\U00016734\\U000167ac\\U00016748\\U0007d228\\U00016771\\U0001679c\\U00016794\\U00016709\\U000166e5\\U00016704\\U00016701\\U00016791\\U00016705\\U0001677f\\U0006df57\\U000166e4\\U00016727\\U0001675f\\U00016789\\U0001675b',\n        constraints={'intervals': IntervalSet(\n             build_intervals([91873, 1114110]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),),\n      length=-39,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 0),\n                                     ('b', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'g\\x92\u00d4\\x9d\\U0008f8888\\to ': -2.0757996808680196e+16,\n       '\u00b7': 4_365_103_189_862_777_368,\n       '\\U000dfcb9\\x19\\x19\\xa0\u00ae': -1_468_474_974_154_725_779,\n       'K\u3441D\u00a1\\x80': -17503,\n       'markers': 5.4467533278056324e-33,\n       '\u00c4\\U00015702\\x95': -6.586345043407895e+16,\n       '\u00a7\u00ac\\x84\u00b0': 12483},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-10491, 2): '',\n       (-78, 21332): '\ud888\uded2',\n       (1024, -11203): '\u023e',\n       (5823, 9900): '\\x1cw',\n       (1_095_245_389, 122): '\u00d3$\u00d95DO\u00b9\u00b0',\n       (-119, 20): '\u00fa\u00c5r\u00af\u60c3\\U000affb5\u00dc\\U000c44eb\u00a19\\U000dbd4f',\n       (5555, 16206): '',\n       (26629, -715051787): '\u00ec\ud872\uddad\\U000f925f\u00f9I\\x12\u00a5',\n       (7605, -894): '\u00d7\\x7f\\x8exB\u00f583\\x91\ud2e1n\\x14\\n\\U000cd86a\u00e4\\x02'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-28876, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 8.434431113719928e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9859866867932776},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value=\"y\u00fb\\x051\u00b7\u00e5\\U000b31f6U\\x88}r\\U0007258d\u00cb\\n\\x08\\x8a\\x8e\\x12}\\U000793d5\\x1e\\x84\u00c0\u00bb\u00fe'\\x0b\u00d5\u00bc/\u00bb*\\U00081828\\x8d\u00a9>\\U00077ef55\\t(9<\u00fcS\u00c5\u00f9`J\\U00038d95T\u9f7c\u00b0Y\\x01\",\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1,\n                  8192,\n                  25255,\n                  57984,\n                  219706,\n                  272308,\n                  337686,\n                  349021,\n                  424402,\n                  591328,\n                  627489,\n                  756135,\n                  871466],\n             ),\n         ),\n         'min_size': 23,\n         'max_size': 123},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=69,\n        constraints={'min_value': None,\n         'max_value': 13445,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u02af\u02fd\\U000bf144\\U000c26b8\u02f2\u020b\u02d0\u0218\u02aa\u02eb\\U000c4d7f\\U0002fb6c\u0273\u02f3\u024a\ud850\udd27\u02fe\u024c\u02c2\\U000ba0e6\u021f\u020a\u02a6\u0216\u0269\u02bf\u02b9\u02eb\\U000c4cc1\\U00037a77\u0267\u02b8\ud866\udfa0\\U000d26ee\u0239\u02f0\u02bb\u02d1\u024f\ud85e\ude29\u02ef\u02a8\u024a\\U00053a7e\u02c6\u021d\\U000d75f8\u0245\u028c\u0266\u02ac\u027e\u02fa\\U000a5ae7\u0217\u02f8\u02dc\u02f3\u02be\u0222\ud85f\udff3\u029e\u02f3\u02ed\u02d3',\n        constraints={'intervals': IntervalSet(\n             build_intervals([512, 1000, 127690, 356217, 627142, 887618]),\n         ), 'min_size': 42, 'max_size': 142},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 5.026971469034327e+196,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.923309269659151e+286},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xff\\xd4\\xf6\\x17\\xe0\\x89\\xf2l',\n        constraints={'min_size': 0, 'max_size': 17},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 5.960464477539063e-08},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-9093,\n        constraints={'min_value': None,\n         'max_value': 404,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'U\\xf3~KC\\xe6S\\xc3\\xdd',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=25293,\n        constraints={'min_value': 25079,\n         'max_value': 753050238,\n         'shrink_towards': -25521,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000966d1\\U00058b66\\U00058bb9\\U000bbb6e\\U00058b73\\U00058ba1\\U00058bcf\\U0006ccd2\\U00058b2a\\U00058b43\\U00058be4\\U00058bd8\\U000a7233\\U00058b3a\\U00058b46\\U00058bcb\\U00058bbe\\U00058b60\\U00058b8e\\U000c0231\\U00058be6\\U00058bda\\U00065685\\U00058b3d\\U0006530f\\U00058b8a\\U0007a719\\U00058b1f\\U00058ba0\\U00058aff\\U000b7048\\U00058bca\\U00058b31\\U00058b1b\\U00058b43\\U00058bc4\\U00058b51\\U000bfec1\\U00058b70\\U00058b54\\U00058bbb\\U00058b73\\U00058bfb\\U000bb216\\U000bb92e\\U00058b19\\U00058b2c\\U00058ba7\\U00058ba3\\U0005fb56\\U00058b91\\U00058bdc\\U000b78ed\\U00058ba2\\U00058b06\\U00058b84\\U00058b19\\U00058b4f\\U00058b3e\\U000bdcaf\\U00058b28\\U00070a4e\\U0007a41c\\U00058b3a\\U000bd809',\n        constraints={'intervals': IntervalSet(\n             build_intervals([363261, 794249, 886199]),\n         ), 'min_size': 39, 'max_size': 139},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-9072,\n        constraints={'min_value': -20407,\n         'max_value': 25151,\n         'shrink_towards': 0,\n         'weights': {-9072: 0.4176103990100287,\n          -12882: 0.3715656525471673,\n          18218: 0.17775550885282862,\n          1024: 0.02099065524877811}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8142622559742991},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u0473\u04ab\u0447\u04ad\u0479\u0451\u0463\u041a\u04cc\u045d\u04b4\\U0001352a\u048a\\U000199be\u046d\u0438\u044e\u0460\u0471\u03fa\u0451\u0435\u0493',\n        constraints={'intervals': IntervalSet(\n             build_intervals([1000, 183382, 817798]),\n         ), 'min_size': 9, 'max_size': 109},\n        was_forced=False,\n        index=None)),\n      length=1714,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 0),\n                                     ('c', 1, 1)),\n                                    (('a', 2, 1), ('b', 3, 3)),\n                                    (('b', 2, 3), ('a', 2, 0)),\n                                    (('c', 0, 2), ('b', 2, 3)),\n                                    (('c', 3, 0), ('a', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\x98\\U000da567\\x8f\u00bd',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'(\\x97\\U00061b4f\\U000c8d91\u00d0\\U000525a7\\x883\u00c4J\\x82\u00e0e\ud869\udc7d': -11450,\n       '\u00d4\u00e4': 113,\n       '\\x96\\x96': 6.934269302183781e+227,\n       '': 1.2606195536676247e-70,\n       '\u00d1u': 8192,\n       '\\U000d7e68\\x90\\x08\ufc67\\U00064e0f': -1.3616587649733584e+16,\n       'tv\u00c7\\x1d\u00ef\\U000793b3z\u00cf': -2.845141637466638e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(480928361, -7_966_789_436_832_539_909)},\n      slice_comments={(-6977, 15837): '',\n       (-1_008_304_831_497_056_719, 96): '~',\n       (-19691, 31330): '\\U00052512\\U00013b41',\n       (-16550,\n        86_046_279_868_178_525_937_435_010_084_621_700_919): '\\x82\u00db\\x0c',\n       (111, -5_958_864_295_787_373_725): 'q\\U0005424c\u00ba\u00ceP',\n       (18744, -2238): '\u00bd\u00ea\\U00071d4b\u00f9',\n       (-10330,\n        -1_170_021_289): 'e\\x05\u00fb\u00b4\\U00087b9a\u00b7\\x0e\\U000a18ca\u00b7\u00d6P\\U000e02e0'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-7054, context=(), group_elems=()),\n      nodes=(),\n      length=-15092,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='4\u00bc7Z',\n      has_discards=False,\n      target_observations={'\\U001092db\\U0005b76a\\x897\u00d3\u00a1': 4.895404873895661e-85,\n       '\\x83\\U0008605ah\u00de.\u00cd|\\x86y\u00c7': 2.5975485095440276e+16,\n       'nil': 0.0},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(107, -987421644), (24631, 79)},\n      slice_comments={(67, -10427): '',\n       (9_360_611_615_669_587_210_582_199_583_417_227_486, 28895): '\\r\\ue176',\n       (-12221,\n        1_335_284_710_763_896_906): '\\x17\u00d6\\U000e357e\\U000fdee4B\u00d6\\U000a69d4\\U0007a937\u00c1',\n       (-12371, 1024): '\u00e3\\x15\u00d5\\U00092159\\U0004a9ed.\u00bd\u00c0\\U0001a266\u00c4\u00f6\\x04'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=20051, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.5},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='K7v\u00ccMdg\\x81\u00b7J\\x9f\u00f3\\x9dCc\\U00101851\u00c7',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  32844,\n                  52677,\n                  69928,\n                  508621,\n                  596764,\n                  723174,\n                  901218,\n                  936843,\n                  947683,\n                  1034812,\n                  1074114],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.14385468558492745},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.032719853534271065,\n        constraints={'min_value': 0.0,\n         'max_value': 0.05,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.02769065952510695},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u540b\u5494\\U000e2c8d\u5467\u5499\\U000c5202\u5462\u53ec\u5409\\U000ec4cb\u540c\u5483\\U00013bab\\U000e5868\\U000b46ad\u541b\u5424\u53d4\u53da\u5444\u54a5\u53f0\u54bd\u5487\u5486\u5473\u53db\u53ce\u5438\u5480\u545d\ud86b\uddfe\\U000993ae\u5483\u544a\u5436\u5430\u542f\u541a\u53d1\u53f5\\U00041619\\U000385bb\u5490\u540d\u5452\u53f8\u5481\u541c\u544b\u53de\u542a\u54ab\u5421\u543a\u53d1\u541b\u54b0\u53fb\u5412\u5471\u53d6\u5430\\U0009b86b\u541c\u5422\\U00014c1c\u5416\u5446\u5418\u5472\\U000b6d82\u5479\u54b6\\U000b363f\u54ac\u549d\u5440\u541c\u5412',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [21454,\n                  144154,\n                  164166,\n                  275464,\n                  424124,\n                  758739,\n                  785353,\n                  825905,\n                  883033,\n                  985013,\n                  1052534],\n             ),\n         ),\n         'min_size': 37,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=2323,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=3.784558705132417e+16,\n        constraints={'min_value': -2.967292049874946e+16,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.05},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1.2166467681512495e-13},\n        was_forced=True,\n        index=None)),\n      length=42_457_758_894_152_673_020_319_527_458_523_085_027,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 0, 0),\n                                     ('b', 2, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\x99\\r\\x85\u00fe\\U0007017a',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'': -6.5587692418876264e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-85_135_904_153_035_047_467_248_033_227_826_271_862, 512),\n       (-11401, -3_229_546_252_377_450_749),\n       (-21, 32232),\n       (7998, -26539),\n       (21394, 24656),\n       (29869, -28965),\n       (1_607_713_147, -10211),\n       (101_322_447_333_823_933, 115),\n       (321_127_588_569_701_475, 16754)},\n      slice_comments={(6_065_475_815_798_295_146, -18460): '\\t',\n       (6_416_734_199_762_240_200, 29553): '\\xa0',\n       (7_578_231_561_939_099_787, 11494): '',\n       (9461, -27431): '\\U000e6f8e\\x8c\\U0003d79a\\U000cc3cd]\\x19',\n       (-19, 13): 'd\u00f3\\U0006e215\\U0006d3fdQ',\n       (69, -1211): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-3543, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=1.7845561526937775e+308,\n        constraints={'min_value': 6.198117731710691e+209,\n         'max_value': 1.7976931348623157e+308,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.569014138967732e-236},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u943e\u93c9\u9375\u942e\u9443\u9387\u9432\u944f\u93aa\u944a\u9450\u9387\u9414\ud85e\uddcc\u93ec\u93dd\u9378\u9457\u93f7\u9428\u940f\\U00059bb7\u9457\\U00078f17\u93b9\u9378\u93c7\u937f',\n        constraints={'intervals': IntervalSet(\n             build_intervals([37728, 541522, 758695]),\n         ), 'min_size': 15, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-14535,\n        constraints={'min_value': None,\n         'max_value': 1_318_879_558,\n         'shrink_towards': 9999,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-106,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -5532,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=-86,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 0),\n                                     ('b', 1, 3)),\n                                    (('a', 3, 1), ('b', 0, 3)),\n                                    (('b', 1, 0), ('a', 0, 2)),\n                                    (('b', 1, 1), ('c', 2, 3)),\n                                    (('b', 1, 2), ('b', 1, 2)),\n                                    (('b', 2, 2), ('c', 3, 0)),\n                                    (('b', 3, 1), ('a', 1, 3)),\n                                    (('c', 1, 0), ('c', 0, 1)),\n                                    (('c', 1, 2), ('c', 3, 3)),\n                                    (('c', 1, 3), ('b', 0, 1)),\n                                    (('c', 2, 2), ('b', 0, 2)),\n                                    (('c', 3, 3), ('b', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\x96U', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'hypofuzz-': 3.466188313626199e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-19496, -8845), (31687, 104)},\n      slice_comments={(-105_862_639_876_133_588_227_270_451_931_350_913_723,\n        -22108): '',\n       (-9810, 43): 'X<\\x1cy\u00e8&\u00c1\\x1c\ud83b\udd28\\U000af379\ud1ce\\U000e34e2',\n       (-7648, -19414): '{',\n       (66, -9153): '\ud84d\udd78\u00e4\u00f6u\\U000a192c\u00bb\\x7f',\n       (-109, -8_210_574_116_866_249_710): '\\x1d',\n       (68_320_905_278_817_194_722_292_373_269_689_950_572,\n        6_181_077_294_304_354_546): '\u00e3\u00b2'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-98021421172054008166019699987134395842, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U0001e6db\\U0001e649\\U0001e6c5\\U0001e647\\U0004ed78\\U0001e6c2\\U0001e70d\\U0001e6a9\\U0001e6f7\\U0001e708\\U0001e6b4\\U000f9626\\U0001e6bb\\U0001e6ec\\U0003aa39\\U0001e683\\U0001e6a7\\U0001e694',\n        constraints={'intervals': IntervalSet(\n             build_intervals([124461, 567345, 942089, 1114111]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.00010080348445832241},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\uc401\uc449',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  1,\n                  50163,\n                  54349,\n                  59826,\n                  65535,\n                  198398,\n                  255402,\n                  292970,\n                  480046,\n                  557480,\n                  572286,\n                  636424,\n                  639535,\n                  698411,\n                  700515,\n                  860175,\n                  1100259,\n                  1105909,\n                  1111080],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x85N\\xb3e\\xcd\\xcf\\x11\\xae\\xfc\\x03\\x04\\x92\\x0f\\x83K\\xde\\xf2',\n        constraints={'min_size': 11, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x07jH\\x05I\\xefd65KN\\x9c\\x10\\xcf\\x96\\xef.F[o\\x99\\\\\\xfa\\xd7\\xfa\\xed',\n        constraints={'min_size': 20, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=3.402823466e+38,\n        constraints={'min_value': 1.0823045431529712e+16,\n         'max_value': 1.7976931348623157e+308,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.0584272906981846e-266},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.3101826639384538},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000c75c9\\U000c764c\\U000f5dbb\\U000c7694\\U000c81f2',\n        constraints={'intervals': IntervalSet(\n             build_intervals([816567, 1027899]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.5535309009334356},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=8_068_311_090_237_678_698,\n        constraints={'min_value': 8_068_311_090_237_678_694,\n         'max_value': 8_068_311_090_237_678_750,\n         'shrink_towards': 0,\n         'weights': {8_068_311_090_237_678_697: 0.0012666230140505404,\n          8_068_311_090_237_678_724: 0.0070208419754401955,\n          8_068_311_090_237_678_723: 0.010545913344466043,\n          8_068_311_090_237_678_741: 0.0026549917165726686,\n          8_068_311_090_237_678_726: 0.0013033287806859487,\n          8_068_311_090_237_678_727: 0.006357811993044833,\n          8_068_311_090_237_678_699: 0.005282061470793606,\n          8_068_311_090_237_678_702: 0.00545813406323578,\n          8_068_311_090_237_678_715: 0.0013229239900589167,\n          8_068_311_090_237_678_708: 0.008787369651651472}},\n        was_forced=True,\n        index=None)),\n      length=77,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 2),\n                                     ('a', 1, 0)),\n                                    (('a', 3, 0), ('a', 2, 2)),\n                                    (('b', 1, 1), ('b', 3, 2)),\n                                    (('b', 3, 1), ('a', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'null': -500080272246358.0},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-19014, 38),\n       (124, -1534),\n       (7059, -16113),\n       (23437, -3749),\n       (24874, -12604),\n       (31786, -13121)},\n      slice_comments={(-41, 371): '\u00e3',\n       (5988, 86): 't\u00b7\u00a6',\n       (38, 39): '\\U00073e30*\\xad\\x1a\u00d2\\x83\uc4aa'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=2120306082446035342, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\u1c86\u1c30\ud878\udf33\u1c79\u1be5\u1c7b\u1c7c\ud84b\udd16\u1be3\u1bc1\u1c5e\\U00033f79\u1bd0\u1c63\u1c59\u1c83\u1be3\u1be5\u1c6d\u1bf2\u1be5\u1c46\u1be7\u1bfe\u1c0d\u1c9b\\U000c8326\u1c44\u1c51\\U000be6d2\\U00090ba8\u1c99\u1c28\u1c00\\U00060b18\u1bf3\u1cba\u1c78\u1c13\u1bed\u1bff\\u1c8b\\U000b5b4a\u1c5b\u1c1f\\u1c8a\u1c9e\u1c4d\u1c06\u1bc4\u1c61\u1c94\u1bbe\u1c73\u1bc7\u1c01\u1be1\\u1c8e\u1c6a\u1c9d\u1c0e\u1c55\u1c29\u1ca1\\U0007c5cf\\U000ac3f9\u1be6\u1c82\ud87a\udf6f',\n        constraints={'intervals': IntervalSet(\n             build_intervals([7100, 284465, 367241, 645765, 671230, 846543]),\n         ), 'min_size': 43, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x80W\\xe7\\xb2\\\\_\\xa5\\xc5\\xc1\\xef\\xa6R\\xb1\\x01\\xf0\\xc1W\\xb7\\xad',\n        constraints={'min_size': 6, 'max_size': 106},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-4_061_195_304_009_856_447,\n        constraints={'min_value': -5_510_293_246_473_410_326,\n         'max_value': -1_465_636_547,\n         'shrink_towards': 0,\n         'weights': {-4_061_195_304_009_856_447: 0.5689335792377048}},\n        was_forced=False,\n        index=None)),\n      length=16723,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('c', 3, 3)),\n                                    (('a', 0, 1), ('b', 0, 3)),\n                                    (('a', 0, 2), ('a', 1, 0)),\n                                    (('a', 0, 2), ('a', 2, 3)),\n                                    (('a', 0, 2), ('b', 2, 0)),\n                                    (('a', 3, 0), ('b', 2, 0)),\n                                    (('a', 3, 3), ('a', 1, 0)),\n                                    (('b', 1, 2), ('c', 3, 1)),\n                                    (('b', 1, 3), ('b', 2, 3)),\n                                    (('b', 2, 1), ('a', 3, 2)),\n                                    (('b', 3, 0), ('c', 3, 2)),\n                                    (('b', 3, 2), ('b', 0, 3)),\n                                    (('c', 0, 0), ('b', 2, 2)),\n                                    (('c', 0, 1), ('c', 1, 3)),\n                                    (('c', 0, 3), ('b', 2, 0)),\n                                    (('c', 0, 3), ('c', 1, 1)),\n                                    (('c', 1, 0), ('a', 3, 2)),\n                                    (('c', 1, 3), ('a', 0, 0)),\n                                    (('c', 3, 1), ('c', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\\U0009e49c': -1.2345123813719928e+16,\n       '': -32358,\n       '\\x9a\u00e0': -2_551_070_122_827_403_628,\n       '\u00f8~\\x04': -5370109453653994.0,\n       '\\U000d220a\\x94\\U000b58da\u00e4\\U0004b1f2\\x0f': 1.1754943508222875e-38},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-16205, -23101),\n       (-15957, 113),\n       (-2274, 243305669),\n       (-37, 8192),\n       (-32, -83),\n       (51, 9820),\n       (81, -2211),\n       (11373, 512),\n       (14463, 102),\n       (18264, -32074),\n       (65535, 29554)},\n      slice_comments={(556667411, 17254): '\\U000795ec\u00f2\\x86\u00e1\u00b1',\n       (1024, -1_589_472_819_696_270_215): '',\n       (-1346, 5477): '',\n       (1_202_524_420_594_216_152, 24050): ']g\u00f7:\u00ca\\U000ce06b\u00bd\u00b3\\x06\\x03',\n       (115, -17511): '\\U000432a3',\n       (94, -60): '',\n       (7_813_248_706_502_411_343, 5819): '\u00dc4\\x9a\u00e4O'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x106d0c800>, min_size=0, max_size=inf).map(tuple), length=one_of(nothing(), nothing(), integers()), has_discards=one_of(nothing(), nothing(), booleans()), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason')))), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text()))).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.024046374950557947,
          "overall:gc": 0.00013700005365535617,
          "generate:args": 0.11748812679434195
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 3,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 3,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878971.622118
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00010370800737291574,
          "overall:gc": 0.0,
          "generate:args": 7.574999472126365e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878905.718455
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-11142, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [8192,\n                  90480,\n                  200509,\n                  257336,\n                  279132,\n                  326026,\n                  492681,\n                  581236,\n                  616798,\n                  629548,\n                  810420,\n                  822606,\n                  840918,\n                  891874,\n                  1050066,\n                  1088946,\n                  1114110],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0007ffe9\\U00067322\\U000672be\\U00098c7f\\U000673af\\U00067323\\U0006732d\\U000673ae',\n        constraints={'intervals': IntervalSet(\n             build_intervals([422588, 861545, 908262]),\n         ), 'min_size': 8, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u794b',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [31047,\n                  195802,\n                  306620,\n                  335790,\n                  374550,\n                  473121,\n                  483007,\n                  803788,\n                  916715,\n                  1092654,\n                  1114110],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=97614484,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 3),\n                                     ('c', 1, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\U000ee460',\n                     [ExceptionGroup('--numprocesses',\n                                     [UnicodeTranslateError('',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\\xa0',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\\x93E\\U000e370c\\x91',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '|',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('\\x1e\ucba0;\\xa0\\U000b918f\\x14\\U0009c57a\\U00048122\u00b4\\x0c\u00cc F',\n                                            0,\n                                            0,\n                                            'reason')]),\n      expected_traceback='\u00cc9',\n      has_discards=True,\n      target_observations={'\u00b9H+\\x98\\x90.': -6.606607104198781e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_354_959_212, 8192),\n       (-32256, 17634),\n       (-20982, 9999),\n       (-20303, -27248),\n       (-22, 1024),\n       (20574, -23001)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=57, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'zF\\x1c>\\xba\\x1c\\\\P\\xa1V\\xf9\\xa5\\xd8U:aO\\x16\\xad\"w\\x8b`TF|\\xa7l\\xdf\\xc7\\x94\\x1d\\x973I\\xb7\\xb9\\xdb\\xc8\\xf6t6\\x0b\\xb8\\xa9 \\x7f\\xbaq\\xb8{\\x91\\xb4\\xd0\\x9f\\xc5\\xdc\\x88\\xc2\\x05Z\\x95\\xf7\\xda\\xfc:\\xa7S\\xe7/\\xfa\\xca\\xbd\\x05\\xe7`\\xfc\\x05\\x8c\\xcd\\x1d\\x15\\xa0\\x07?\\xe3\\x172\\xb2@\\xb7\\xf9\\nW+\\xd5\\x8b}\\x90`\\xe7K\\x1e]\\x1f\\x18\\x89M\\xaf\\xb2\\xd4]3\\xd1Z$\\xff\\xe2\\xf4\\xd6\\xfdy\\xc5\\xcdx=]\\xb0\\xea\\x00\\x08\\xab*Z\\x14\\x85Y\\x11',\n        constraints={'min_size': 38, 'max_size': 138},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.9130195775680587e-158,\n        constraints={'min_value': -2.6963313317433664e-162,\n         'max_value': 2.0351232221060167e-158,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.9130195775680587e-158},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.225073858507203e-309},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u298c\u28a4\u2976\u298e\u2998\u293c\u2934\u28a8\u2928\u28db\\U0006bc51\\U0009ab53\u2966\\U00038832\u28fc\u297c\u290e\u2954\u2913\u2952\u2940\u2916\u2994\u28fd\u28a6\u2991\\U0007057c\\U00074ab6\u28c8\u2995\u28f4\u2995\u2933\u297d\u299d\u2986\u294c\u2939\u28bc\u2971\u294e\\U0006c70e\u2957\u2946\u2940\u28cc\u2996\u28e7\u28f4\u299d\u2910\u2923\u2919\u2915\u2977\u28ad\u293e\\U0004750c\u28e3\u2918\u28ae\\U0007c5b7\u2948\\U0003b8b0\u297a\u2908',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [10401, 26371, 218995, 655393, 773124, 814603, 942141],\n             ),\n         ), 'min_size': 38, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=28091,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('a', 0, 2)),\n                                    (('a', 1, 3), ('c', 3, 1)),\n                                    (('a', 3, 3), ('c', 0, 3)),\n                                    (('b', 2, 0), ('b', 2, 1)),\n                                    (('b', 2, 2), ('c', 2, 3)),\n                                    (('c', 1, 2), ('c', 1, 2)),\n                                    (('c', 3, 0), ('c', 1, 0)),\n                                    (('c', 3, 3), ('a', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00b4\u00d7\\U000369a7\u00dc',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\U00105dbeO': 0.5},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-58, -2_116_276_297): '\\U00087f32',\n       (66, 8192): '\\x16',\n       (108, -29547): '\u00e9',\n       (-131_429_972_218_847_078_769_312_517_991_331_518_682,\n        3475): '\\U0010c813\u00af\\x85l',\n       (11322, -6_306_570_161_093_373_107): '\\x18\ud84d\udf27\\U0006899c\u00d7\u00ab\\U000b19b6',\n       (-22409, -4_185_627_379_002_479_966): '>\u00bb5\u00b3y\\x04\\U00089d8d',\n       (-24718, 26386): '\\x84'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-23, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U00038e58\\U00038e00\\U00038e44\\U00038d90\\U00038def\\U00038e02\\U00038e77\\U00038e16\\U000bdab1\\U00038e4d\\U00038e56\\U00038e58\\U00038e72\\U00038e12\\U00038db4\\U00038e70\\U00038da5\\U00038e51\\U00038e15\\U00038d9e\\U000c72c2\\U00038e2f\\U00038dfe\\U00038e6c\\U00038e7c\\U00038ddd\\U00038de4\\U00038dfc\\U00038e05\\U00038da1\\U00038e2d\\U00038de7\\U00038e30\\U00038dd0\\U00038dc5\\U00038de8\\U00038e61\\U000d269b\\U00038df5\\U00038dd8\\U00038dbd\\U00048320\\U00038d95\\U00038db1\\U00038e0b\\U000de46e\\U00038e1e\\U000455a3\\U00038da3\\U00038d8f\\U00038e7e\\U00061d89\\U00041df4\\U00038e3c\\U00050ba7\\U0003a265\\U00038e0b\\U000c4481\\U00038de3\\U000cbf65\\U00038db8\\U00038d9b\\U000e2cc6\\U000d0bb2',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [232834, 431620, 468458, 533338, 775977, 952315, 1111378],\n             ),\n         ), 'min_size': 42, 'max_size': 142},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1e-05},\n        was_forced=False,\n        index=None)),\n      length=-29025,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 0),\n                                     ('a', 2, 2)),\n                                    (('b', 0, 0), ('a', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'5A\u00e6c\u00eb\u00ba\\x18\\U000eb85c': 6.228220227122968e+16,\n       '\u00bf': -18949},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-20168, -28357),\n       (-12604, 3735),\n       (-3650, 9999),\n       (-53, -23236),\n       (84, -29107),\n       (111, -106)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=2625, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\x9c\\xd0',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.6111828532399258},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u01fb\u0136\u01a1\\U0002f1ad\\U000d96c1\u016b\u0212\\U00095464\u01da\u014c\u01bc\u01b0\u0153\u01ce\u01b2\u0132\u0197\u01f2\u0196\u016c\u01f6\u0176\\U00066ed9\\U0007c87f\u0203',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [300, 98331, 148397, 215960, 337080, 393905, 401336, 936356],\n             ),\n         ), 'min_size': 16, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-20289,\n        constraints={'min_value': -28135,\n         'max_value': -16041,\n         'shrink_towards': 0,\n         'weights': {-26577: 0.0522965193199023,\n          -20697: 0.006112514276648805,\n          -22099: 0.04000798950176594,\n          -22953: 0.016734599319182863,\n          -21180: 0.003170302565209131,\n          -19270: 0.12002276826561278,\n          -18233: 0.022772782097767837,\n          -16382: 0.07277581265439091}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.5271416367688034},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9963325186865946},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=388,\n        constraints={'min_value': -55,\n         'max_value': 4966,\n         'shrink_towards': -6247,\n         'weights': {388: 0.7137744376243303}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8468309059005628},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=17595,\n        constraints={'min_value': 72,\n         'max_value': 20221,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'I\\x08\\xe5\\n',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-12388,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 1),\n                                     ('a', 3, 1)),\n                                    (('b', 3, 1), ('c', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='',\n      has_discards=True,\n      target_observations={'': 28085,\n       '(': 354.0157675645597,\n       '<\\x04o1\\U00059259\\x90\ud875\udecc\\x0b\u00fa\\U00099d21\\x19\\U0001d3fb\\x1b\ud81c\udd5b\u00f4': 2.197299226096132e+16,\n       '!\u00d5,5': 7_685_801_237_951_069_486,\n       '\u00bf': 2.8942690219569063e+196,\n       '\\U000cc119\u00d7\u00ff': -4.900132105319829e-71,\n       '\\U000afe80V\\U000c57f3\\x00\\x99': -5.048255585712245e+16,\n       '\u00e7\u00d6*\u00e5': 16,\n       '\\U00102a59': -1_952_726_244_082_044_384,\n       '\u00c7\ud84d\uddbb\u00ec\\x85\\x06~': -18606,\n       '\\x0b6\u00d5\\U000506b9>': 14216,\n       '\\U000fc28e': -2.5956113101164516e+210,\n       'YY\\x12\\U000f7bd3T\\x15': 9999,\n       'R{/\u9ad7r': 8.555849367765713e+67,\n       '\u00b1\u00e8\\x99\\U0009a30c\\U000cd480\\x1c\u00f0': 15348},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-7381, 7): 'failure',\n       (-23611, 80): '\u00c5\u00a2\\x0b',\n       (-11913, -5): '@\u00c0\u00ac%\u00ee\\U000721aa\u00e4',\n       (12020, -189): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=8174, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\u2082\\u20c4\\U000d729e\\u2060\\U000c9468\\U000dbb38\\U000f6916\\U000d1026\\U001093f1\\u2064',\n        constraints={'intervals': IntervalSet(\n             build_intervals([8192, 20903, 676226, 925513, 981280, 1106610]),\n         ), 'min_size': 5, 'max_size': 105},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.7285494244862812e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.1158300165380757},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0003c8ac\\U0003c8db\\U0003c865\\U0003c871\\U0003c836\\U0003c8c3\\U0003c882\\U0003c86f\\U0003c908\\U0003c850\\U0003c8dc\\U0003c841\\U0003c840\\U0003c861\\U0003c834\\U0003c8cf\\U0003c8ad\\U000973aa\\U00046d4b\\U0003c824\\U0003c85b\\U0003c84d\\U0003c82a\\U0003c8d0\\U0003c896\\U0003c85f\\U0003c897\\U0003c861\\U0003c81e\\U0003c880\\U0003c88d\\U000b6261',\n        constraints={'intervals': IntervalSet(\n             build_intervals([247836, 810040, 874195, 888667, 1015612]),\n         ), 'min_size': 18, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.3242867976672965e+308,\n        constraints={'min_value': 0.0,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.026087633204904e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0008dd90\\U00051663\\U0005169b\\U00051657',\n        constraints={'intervals': IntervalSet(\n             build_intervals([333330, 664482]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.8391928923142336},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x89\\xb2{\\xefu\\x14\\xc0P\\xb7\\x86\\\\\\xf2\\x9b4\\x00\\xe4\\xf7\\xd2\\x11D\\xfd\\xd7\\x8d\\x0c\\r',\n        constraints={'min_size': 23, 'max_size': 123},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.6749828941067889e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b':z\\xf1\\x1bn\\xb6\\xe2Y\\xd7\\x99\\xbf\\xba$F\\x00s4I\\xfbv\\x0b&o\\xaa\\xc1K:\\x1fA\\x9cn\\x02\\x92\\x90\\xbblS\\xffw-\\x00,mL\\xa1\\xb4E]\\xd3Qz\\xd3 p\\x95d',\n        constraints={'min_size': 31, 'max_size': 131},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-22677,\n        constraints={'min_value': -30462,\n         'max_value': 83,\n         'shrink_towards': -506140993,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.112608916584831e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.066861279062504e+308,\n        constraints={'min_value': -4.466004693020993e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.095064092167545e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x8d\\x00',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.683811069616739e+307,\n        constraints={'min_value': 1.1754943508222875e-38,\n         'max_value': 1.2503764707356006e+308,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.683811069616739e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 3.960151337468095e-216},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xfc\\x9bl',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-21885,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': 4.081212201674851e+16,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 7.053991346746077e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.4126059602959843},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0001bb21\\U0001ba90\\U000b45cd\\U0001bac0\\U0001bac0',\n        constraints={'intervals': IntervalSet(\n             build_intervals([113240, 372069, 519246, 902718, 972743]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.3698484741635762},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=3.228915383502885e+75,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.5656282312676315e-62},\n        was_forced=False,\n        index=None)),\n      length=-96,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('b', 3, 1)),\n                                    (('a', 1, 0), ('c', 3, 0)),\n                                    (('a', 2, 2), ('c', 3, 1)),\n                                    (('a', 3, 1), ('c', 3, 0)),\n                                    (('a', 3, 2), ('a', 3, 3)),\n                                    (('a', 3, 2), ('b', 3, 1)),\n                                    (('b', 0, 3), ('b', 2, 3)),\n                                    (('c', 1, 0), ('a', 0, 0)),\n                                    (('c', 3, 3), ('b', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00e3\\U00062e91x\u00fe': 0.05,\n       '-\\x93\u00cb\u00b6v': 8192,\n       'host': -1.74678560447655e+16,\n       '\u00cf\\U0006de42\\x18\\x8e\\x8a\\U000fbd81\u00d9\u00b5\\U0001b5fdH|': 814507858,\n       '\u00f4\u00e8\u00eem\\x0fU\u00a8\\x90': -6.786947971893948e+16,\n       '\\x0c9\u00f2\u00f5b\u00d0\u00bf\\U000a4d98': -6.466318211169398e-135,\n       '\\x81\\U000d1b14\\U00102559\\U0003643a': 3.402823466e+38,\n       \"'\u00f8\\U00104737\\U0005f379\": -113,\n       '\u00c7\u00f8j\u00de\u00cb\u00ed\\x00\u00efX\u00eb\\x8a': -2.8441078086029875e+107,\n       \"\\U000ed33a\\U000562af'\": 5.402245538539484e+16,\n       '\u00bc\u00fb\\x81\u00c0\\U0007e92f': 51,\n       '\u00e1': 8.834770293900476e+240,\n       '\\r\\U000c9f84s\\x85\ud81d\udd49\\x19\\U000c2c5f\\x91k:\\x9c\\U00058e37\u00bd\u00e8\\x85d\u00b9': -9309},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-7_965_539_927_683_326_214, 83),\n       (-298073003, 2409),\n       (-21994, -114),\n       (-20078, 19524),\n       (-17857, -8713),\n       (-10053, -60),\n       (-101, 34),\n       (-32, -25912),\n       (-7, 3504),\n       (35, 6853),\n       (40, -1368),\n       (79, 29047),\n       (121, -5),\n       (2844, -8718),\n       (20973, -66),\n       (25296, 27658),\n       (27571, 9),\n       (1_137_942_557, 2_462_254_746_854_994_624)},\n      slice_comments={(8192, 13548): '\u00f5\\x053\\U000d1c49\u00f1S\\U000e54f5\u00a8',\n       (-4_905_363_576_581_045_518, 2097): '\u00ef6\u00ea',\n       (7286, -5_311_655_278_002_052_485): '\\x04\\x87\u00d3\u00df'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-25066, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b\"\\xa6'*y\\xc7X\\xb5\\x07\\x87nV\\xbd\\xafp\\xa1o\\x81\",\n        constraints={'min_size': 17, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.76540391245528e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.7638158643116719},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'^\\xe9JJX\\x8fz\\xc4\\xe3hM',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-3,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('a', 3, 2)),\n                                    (('a', 2, 2), ('c', 2, 3)),\n                                    (('a', 2, 3), ('c', 2, 3)),\n                                    (('b', 2, 0), ('a', 2, 1)),\n                                    (('c', 1, 0), ('b', 3, 2)),\n                                    (('c', 3, 2), ('c', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\U0005cedc\u00b1\\U00043cd9\\xadf',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00d4': -nan},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-4753, -2_491_566_655_462_038_145),\n       (11947, -1_321_249_417),\n       (22848, -1_021_120_175)},\n      slice_comments={(545, 95): '\\x82\\x99',\n       (-621989781, -2053): '',\n       (29542, 70): '',\n       (4, 32525): '',\n       (4, 1_920_681_721): '|',\n       (-119, 512): '',\n       (-78, -7): '\u00eb\\U0004a8cb\\nC\u00e4\\x92\u00e8$\u00bf',\n       (456309616,\n        300): '\u00d4p+5s\u00a9\\x87\u00c2\\U000599a9\\U000a0f6e*U\ud862\udf69\\U00057554\\U0003d87eXH{T@',\n       (-159_320_208_857_987_143_785_718_298_298_840_319_906,\n        40_936_603_629_027_714_086_112_829_501_910_851_870): '\\U0007279d\u00a7\u00df\u00b3\\x1b\u00f2\u00e6m\\\\',\n       (-67, -71): ',\\U00104305\u00c1?B\\x12\u00c8\\U0005b6451\\U000d4d4c\u00ec;s\\x98\u00e48',\n       (-19593, -45): '\u00fd\\U000bcfed'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-20665, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\x83\\xde\\x1dQ\\x1e\\xcc\\xe07q\\x86',\n        constraints={'min_size': 6, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=4.87425890173887e+307,\n        constraints={'min_value': -1.0635881688882355e-104,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1593167114853380.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'W\\x0fUPh\\x1fl0t^4|v-\\xdc\\xeb\\x08\\xa4\\x8a\\x89\\xcaZ\\xa7\\x1a\\x16\\xec\\xc1\\xc7\\xd1\\xe5\\xad\\x85>\\xc7kie',\n        constraints={'min_size': 34, 'max_size': 98},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7642606425218434},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=319,\n        constraints={'min_value': 59,\n         'max_value': 411,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=-56,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('b', 1, 0)),\n                                    (('a', 3, 1), ('a', 2, 0)),\n                                    (('b', 0, 3), ('a', 3, 0)),\n                                    (('b', 1, 0), ('c', 0, 0)),\n                                    (('b', 1, 1), ('c', 3, 1)),\n                                    (('c', 0, 2), ('b', 1, 2)),\n                                    (('c', 1, 0), ('c', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '\\x9d\\x9a\u00aaz\u00a1\u00bb4_\\U000ebe83',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='?\\U00092137\\x91\u00b9\\x1a\\U00040439\u00ea\u00f3\\U000c26b5',\n      has_discards=False,\n      target_observations={'\u00ed\\x85\\U000d59ff\u00a1\u00cc\\xa0': -54201082,\n       '': -5645,\n       '\u00d3\\x80\u00fe\u00b0y\u00eb': 3.1244401740140434e+106,\n       '\\x0f\u00b7Q\u00fa\\U0007b595\\x1d\\U000c7b4c\\x81(\u00a4M\u00ef<\\U000ce5c0\u00dc,\u00a4p\\x8e\u00eb\\x0b\\U0010e660!': 32590},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-374792666, -3_316_580_213_190_138_781),\n       (-21632, 14832),\n       (13066, -3368),\n       (18213, -5720)},\n      slice_comments={(-27136, -23384): '\u00e6\u0153\u00c6\u0152\ufb00\u02a4\u02a8\u00df(\u256f\u00b0\u25a1\u00b0\uff09\u256f\ufe35 \u253b\u2501\u253b)',\n       (-6571, -7014): '\ud83d\ude0d',\n       (862025939, -23174): '\ud85b\udc0ai\\U00057484\\x86\\x01\\x08',\n       (-14784, 5_123_017_900_818_803_304): '\\U00068e26P',\n       (-123_590_857_717_642_696_490_343_983_542_877_966_821,\n        4): '\ud87a\udc7d\ud861\udcc4eo\\U000476f6\\x91\u00b8\u00b6=\\x1e\u00bb\u00e4\\U0002ec14\\x02',\n       (24334, -31756): '',\n       (-86, 24289): '\u00c0\\x07\u00ffK\u00de\\U00046a78\\U0009f3b8\u00ec\\U0001fee0\\U0006a346Y',\n       (17419, 5312): '\u00ebv\\x002',\n       (-23278, -14457): '\\U000fc1e5\u00ab3\\U00052c4cW',\n       (512, -25080): '\\x05\\x85\\x96',\n       (-1085, -113): '',\n       (1000, -8): '\\x0e\\U0006fb40\u00a6',\n       (300,\n        36): '\\x0e\u00d8\u00f1K\\x04&\\x7f\\U000566c0\u00eb?\\x9b!`\ud860\uddf0\\U000921e4\u00ea\u00d8\ud85a\udc85\\x9e\\U0005d5f0',\n       (137_731_281_313_651_742_235_120_142_563_680_300_483,\n        -59): '\\U000b0d7a\\x9cm\u00a9\\x9c\\U000923ce\u00c3\u7776u\\x81\u00c4\\U0010131d\u00a3\u00a8',\n       (-21886,\n        5939): '\u00e4\\U000a8eaa\\xa0\u00bf\"\u00a4\u00ec\ud81c\udc65\u00a2\\x03\u00bc,\\U000c2235\\x1c\\x03\\U0002fec1\u00c6\\x01~2\\x10\\U000ec5dc'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=15353, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 1.1462063037519847e-208,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.011331940901945e-44},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=8.197591259966119e+307,\n        constraints={'min_value': 5.280037951890027e+16,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.20447569881751e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'.',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-5780,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 3.916879204658415e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u8a7f\u8afd\u8b12\u8a7d\\U000f3444',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [35409,\n                  83853,\n                  144003,\n                  144326,\n                  179459,\n                  227357,\n                  317576,\n                  389136,\n                  438053,\n                  508395,\n                  989987,\n                  1027889,\n                  1044200],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 78},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=struct.unpack('d', struct.pack('Q', 0x7ff8000000000001))[0],\n        constraints={'min_value': -inf,\n         'max_value': -5.0709657018397395e+126,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.229173893492085e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=1000,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00032647\\U000326b5\\U00032621\\U0003263c\\U00032600',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [206284, 452728, 778699, 889782, 895359, 1018693, 1114111],\n             ),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ubc24\ubc2b\ubca9\ubbe4\ubc2c\ubc8f\ubc0f\\U00012912\ubcb0\ubc3f\ubc18\ubca0\ubbf1\ubbfd\ubc8f\ubca8\ubcaa\ubc12\ubc23\ubbf2\ubc64\ubcaf',\n        constraints={'intervals': IntervalSet(\n             build_intervals([48078, 134705, 503547, 811306, 930696]),\n         ), 'min_size': 21, 'max_size': 121},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-1_338_909_608,\n        constraints={'min_value': -1_517_547_118,\n         'max_value': 30958,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -33592230237447.457,\n         'max_value': 1.403095152586552e+238,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.9042090731784308e+102},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.31813697081895725},\n        was_forced=True,\n        index=None)),\n      length=-201,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 3, 1),\n                                     ('c', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '.c\\x0f\\x1c\\x8df',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\U0007be27\\x18A\\x817\u00e1&\u00ed~\\x13\u00d2\u00b9',\n      has_discards=True,\n      target_observations={'\\x85\\U0010484f[^': 82,\n       'b\\\\\\U000f8eee\u00cb\\U000c9ba4\\x96,\u00ce\\x06\\x19\\U000ce764\\U000e75a0x\u4b18X': 52,\n       ']': 4.539952216144075e-244,\n       '\\x0b\u00eey': 1.5,\n       '': -9.345812275150742e-293,\n       '\\U00050ee8\u00d6': -8_988_328_107_563_606_816,\n       '\u00f1': -3.2181345916432304e+16,\n       '\\x85': -28738,\n       '9\\x80\\U0004c3c0\\x81\\x04\\U00109ce1Q': -2.1608141687234164e+16,\n       '\u00ca\u00d0\u00a5W': -16690,\n       '_\"': 5.697436649665675e+16,\n       ')E\u00d1\\U0007ac501\\x8a-\\U000d5cb9\u00b6j': nan,\n       'O)j!\u00e9l\\U000ed23b\\r\\x9a\u00cc\\U00086589.\u00a7\\x8b\\U00048c03\\x81\u00e0\\U000f50e5': 590765931},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-12918, -16465): '\\x0ce',\n       (-26744, 127): '=',\n       (-13446, 6_724_950_953_596_815_338): '',\n       (91, 10507): ' l}\\x05',\n       (-1_129_372_012, 10953): '\u00c4+\\x12\u00a6\u00c6\ud83e\ude01\u00fd\u00e9\u00bb\\U000af956N'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=17682, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xd7\\xe28C\\xea\\x00=\\x12\\xb0DdC\\xe7YLD\\xfb\\x1d\\x1b\\x06\\xb1\\x82\\xb7\\x7fyX\\x1c?C\\xd3\\xd1\\nPf4\\x82y\\xad2-0TO\\xdb:\\x87\\xc99\\xea\\xb7)\\xf8\\xb9in\\xca\\xf2S\\x9f\\xdd\\xcb\\xa7\\x16\\xd4\\xc1b\\x9c\\xcb\\xc8\\xc9\\x8c\\xcf\\xf7_\\xbf\\xa7e\\xc2',\n        constraints={'min_size': 37, 'max_size': 137},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x96\\xe3\\x84\\x89',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=22444,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 3, 2),\n                                     ('b', 2, 2)),\n                                    (('c', 2, 3), ('c', 1, 2)),\n                                    (('c', 3, 2), ('a', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'': -17346,\n       ',\u00a5|\u00ee': -4_212_839_317_353_525_204,\n       'b\\x0c\u00e0': 2.0331365377089854e-172,\n       'N\u00f2': 4791},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-3_078_388_176_428_635_811, -9803),\n       (-32359, -21016),\n       (-103, -7303),\n       (66, 13879),\n       (512, 20906)},\n      slice_comments={(20197, 27641): '',\n       (-27469, -65): '\\U0003caef\u00cb',\n       (-122, 23090): '\\x877\"\\x00\\u0adf\u00d4\u00c0\\x97\\U0003f95b87\u00e6\u00d3',\n       (-14339, 8192): '\u00c8\u00dc\\U0008b8d0`\\x9b\\t\\x9b\u00d6F',\n       (-15779, -122): '\u00db\\x90)\u00f0|\\x01\\x87\u00ff\\x8c8D',\n       (300, -25597): '',\n       (30841, 4964): '\u00f8%\u00bb\u00dc\\x015\\U000e22db\\U000a3c97\ud81e\ude79^\\x96`\u00cc\u00b7\\U0006ae3b',\n       (-74,\n        1_600_109_169): 'v\\U000cc9f7\\U000a6eaf\\U00062338\u00b9\u00ab\\x17T\u00dd\u00c0\u00c0\\x12`\u00ec\\U0004c805',\n       (-2234, 21242): 'initial',\n       (1000,\n        -18695): 'V\\x85g\u00d1\\U00107bf1$\\xa0\\r\\t0U\\x89-\u00fa\\x16r\\x81,\u00f6\\U0008e8c9\u00d6\\x1fZ',\n       (23815, 19519): '%\u00f5\u00ec\\x9d]\\xad\\x95_\u00e8\\x98',\n       (-22007, -18512): '^~g!\\x84\u00b2\u00b3\u00bdN',\n       (5_319_220_698_426_923_082, -32112): 'C',\n       (13072, 17843): '\u00f2M$\\x12\u00dbz\\U0008aa0fF\\x97',\n       (1619, -17200): '\u00bf\\x1b\\U00015510)\u00cc\\n\u00db\\x1d9;\\U000558a7\u00e9\u00bb/S',\n       (-103, 10456): '',\n       (-12649, 1_287_155_597): '\u00f5',\n       (-131_809_848_311_685_825_115_172_232_261_875_555_490,\n        -79): 'IA\\x0e\\x99\\x94\u00a8',\n       (16955, 96): 'tp'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=119, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.225073858507e-311},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.15759167144693745},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.3713874645965025e+308,\n        constraints={'min_value': 5.255941805432308e+304,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.3713874645965025e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'M-l\\xa6G\\x98D',\n        constraints={'min_size': 0, 'max_size': 11},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000a1b6a\u9769\\U000a3213\u97cf\u9759\u97f3\u9793\u97c1\u9748\u97c0\u979e\\U00086787\u97f9\\U00092b29\u97ba\\U000b58f9\u97d4\\U000870f4\u97da\u979e\u97ce\u978d\u97bf\u9751\\U000b2c41\u97ca\u982c\u9785\u979f\\U0007034c\u981c\u97f1\u97df\u97a0\u976e\u97b0\u97b4\\U00036f6e\u9748\\U0001ea9a\u97cd\u97e2\\U000864e3\u9789\u980d\u9762\u979d\u97d0\u978c\\U00014fb8\u97f4',\n        constraints={'intervals': IntervalSet(\n             build_intervals([38715, 228165, 436276, 807038, 951566]),\n         ), 'min_size': 48, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=8332,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 3, 0),\n                                     ('c', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-29964, 15379),\n       (-29681, -17440),\n       (10, -9_009_831_700_441_301_794),\n       (59, 6_372_723_987_745_928_337),\n       (88, -156_885_744_200_128_278_229_617_041_453_864_809_351),\n       (300, -97),\n       (404, 8859),\n       (13344, 575134489),\n       (17546, 24604),\n       (20756, 27720),\n       (381523852, -90),\n       (6_036_445_378_782_343_560, 22)},\n      slice_comments={(-27419, -12237): '\\x08\\U000e2f1e',\n       (1554, 60): '\u00e0\u00fd\\U000f52fc\u00e21,',\n       (95, -9_183_485_562_784_271_101): '\\x94\\x9c]\\x8f\u00b9\\x15\\x08',\n       (18135, -8893): '\u00a5\\U00093d3aE\u00b4\\xa0',\n       (-104, -22039): '\u00e2',\n       (-9284, -11055): '#L26\u00eb7&',\n       (300, 10870): '\u00bcJ\\U0007f03e\\U000e5b59\\x05Z2\ud803\udcef6',\n       (-11899, 6206): '\\U00055ec3',\n       (-2569, -38): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=25806, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=9.486745248334864e+307,\n        constraints={'min_value': 6.474633688189731e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.1794782657309132e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 9.097866299030671e-132},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.4635982350480138},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': 0.0,\n         'max_value': 1.2222075677280413e+308,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 8.661043143203068e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.6794184656269517e+308,\n        constraints={'min_value': 3048413667105669.0,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.6794184656269517e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0003824b\ud83d\udd04',\n        constraints={'intervals': IntervalSet(\n             build_intervals([91188, 310122, 830653, 852587, 1034633]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None)),\n      length=-13238,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('a', 3, 1)),\n                                    (('b', 2, 3), ('b', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '+',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'4\\U00091c47cQu': -1.8275243931154254e+22,\n       '\\x8f\\x02': 0.5,\n       '\\U000c9f03\u00fa\\U00054e99i': -39,\n       '\\U000b0e23\u00b9\u00f1\"\u00b2\\x90\u00ed\\U00062254': -16645},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(1341, -27110)},\n      slice_comments={(15362, 11858): '\u00b7'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=11104, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=1.5661461844389355e+308,\n        constraints={'min_value': 6.9134679625835314e+162,\n         'max_value': 1.7976931348623157e+308,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5e-324},\n        was_forced=False,\n        index=None),),\n      length=-11585,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 2),\n                                     ('a', 1, 1)),\n                                    (('a', 3, 3), ('b', 3, 1)),\n                                    (('b', 0, 1), ('c', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '5\u00cb\u00fcO\\U00059d9e\\U000975fbb\u00a5\\U000414bc\u00ba\\U00058ac4\u00aa\u00f0\\x9e\\x96\\x1a\u00eaeE',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\\U000da20a\\x19\u00a4': 2.8143496708676366e-30,\n       '': 2.9071745004056064e+16,\n       'm\\x93\u00ffY\\U000357d0VI': 0.5,\n       '\\x08\\U000b0668': -1.6541511672381916e+16,\n       'F\\U000f2ce7E': -28705,\n       'obj': -36,\n       '\u00e0\\x99\\x97': 2.566998615569191e+16,\n       '\\U000d47a6\u00c6\u00c2\u00b2\\x0bk': -4140,\n       '68': 31574,\n       '\\x01\\xa0': 2.126810103889631e-154,\n       'xR.\u00d2': -1.4683374921924374e+48,\n       '\\xadf}|3\u00b3\\U0005c9a1': -4_887_551_963_088_958_089,\n       '\ud847\udcda;\\U000da118\"\u00a77S\\x00\\x8eO\\U000da721f\\x9f\u00b5m': 24629,\n       '.\\x08u\\x0b=\\x95\u00ae\u00d5\\x9c\\U000f51c5\u00e2': 21182,\n       'W\\ue7ccT\\U000f5cbe\u00dc\u00ae\u00c7\u00dd\u00e5\u00fek\u00d3\\x17': -8.934930042199012e-156,\n       '\\x97\u00c8\\x82\\U000859dfh\u00a9\\U000a67dc': 112},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-29724, 300),\n       (-2551, -5_290_478_560_635_469_628),\n       (-485, -4977),\n       (16755, -57)},\n      slice_comments={(13586, 15635): '\u00a7CFC\\x91K]\\U000a56e4\\x08a'},\n      misaligned_at=None,\n      cannot_proceed_scope='other')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.04947287403047085,
          "overall:gc": 0.0002690840046852827,
          "generate:args": 0.15377220493974164
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 2,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 2,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878924.447723
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=24240, context=(), group_elems=()),\n      nodes=(),\n      length=-18089,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('b', 1, 1)),\n                                    (('a', 1, 0), ('a', 2, 2)),\n                                    (('a', 1, 2), ('c', 1, 1)),\n                                    (('a', 2, 2), ('a', 3, 2)),\n                                    (('a', 2, 3), ('a', 3, 0)),\n                                    (('a', 2, 3), ('b', 2, 0)),\n                                    (('b', 0, 2), ('c', 0, 1)),\n                                    (('b', 2, 2), ('b', 3, 2)),\n                                    (('b', 3, 1), ('a', 1, 3)),\n                                    (('c', 0, 1), ('b', 3, 3)),\n                                    (('c', 1, 0), ('b', 1, 2)),\n                                    (('c', 2, 1), ('a', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('d]\u00a1\u00ec', 0, 0, 'reason'),\n      expected_traceback='\u00a7\u00a9\u00e0\u00a7\u00c0',\n      has_discards=True,\n      target_observations={'\u00be\\x1b': -5.335642755677279e+16,\n       '\\U0007de0a`': 1_045_577_527,\n       'n\\U00066dc5\\U00105294\\U00032dd8': -1.1844176213197964e+206,\n       '\\xadP\u00b0+\\x8d\\x91kj\u00cb\\U0006eadf*:\\x9f\u00ef': 3_975_460_349_903_820_294,\n       '\\x80\u00e5': -108,\n       'I\\U0003914d\\x03\\U000c0a34\\x0b': -14373,\n       '\\x08\u00ec\\U000bd224\\U00058b1cM\\\\\\U0008e867\u00ee\u00ae': -10330},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(28, -53)},\n      slice_comments={(-9348, -18128): 'f|\u00b3\\x07',\n       (-6_589_741_802_146_675_442, 1_949_856_273): '\u00f6n',\n       (18478, 15963): \"\u00e8\\U000f3752\\x93\\U000bd9d7'\u00cf\\U0001c4e2\uc00b\\x10\\x98\",\n       (11490,\n        28405): 'W\\U000af080\\xa0\\U00104bb4\\x94\u00f8\u00d3\u00e3V\\U0004823b\\x00\\x9b\\U000d4ff6\u00ef>\\x1c\\U000e17d5',\n       (-29037,\n        -34_246_199_556_071_872_178_281_163_108_129_263_016): '\\U000bb491\\x07\u00a7\u00ce\u00fc',\n       (-18785,\n        1_976_156_769): '\ud0aef\"\u00c5\\U0004913e\\x0b\"G\u00c0\ud887\udcef\\U0006cf88\\x1b\\x9d\u00faF\\U00043702\\U000a4ba4\\U000da1f7BY\\x88\u00b8'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-26897, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\ud800\udc03\\U0001004e\\U00010065\\U00010065\\U00010062\ud800\udcba\ud800\udce9\ud800\udcb1\ud800\udc11\ud800\udc0e\\U00010060\ud800\udca3\ud800\udcde\ud800\udc30\ud800\udc09\ud800\udc4a\\U000d5248\ud800\udcb4\ud800\udc07\\U00010069\ud800\udc22\\U0001ca1d\ud800\udcd3\ud800\udcb6\ud800\udc2f\\U0001006d\\U000886b2\ud800\udca3\ud800\udc83\ud800\udc0b\\U0003b0d6\ud800\udca5\ud800\udc9c\ud800\udc89\ud800\udc1a\ud800\udcee\ud800\udc2d\ud800\udce0\ud800\udcee\ud800\udc83\ud800\udca2\\U000100fb\\U0001006d\ud800\udc93\\U000865b5\ud800\udc4c\ud800\udcaf\\U0008021e\ud800\udc90\ud800\udc9d\ud800\udc88\ud800\udc80\ud800\udce5\\U000436e3\ud800\udcde\\U000100fe\ud800\udc40\\U000d5843\\U00038a1d\ud800\udc06\\U000d0905\\U0001004e\ud800\udcf4\\U0007edbb\\U00072582\ud800\udc85\ud800\udc08\ud800\udc8d\ud800\udce5\\U00073ea4\ud800\udc95\\U00043f6c\ud800\udc90\ud800\udca9\ud800\udc21\ud800\udce8\ud800\udcca\\U00074ada\ud800\udc98\ud800\udcda\ud800\udc20\ud800\udc2b\ud800\udc2d\ud800\udc2d\\U000380b7\\U000c6e38\\U00010063\ud800\udcf6\ud81f\udd5e\ud800\udc8b\ud800\udcf4\\U0007a00b\\U00038bdb\\U000c91e7\ud800\udc59\ud800\udcd8\ud800\udcfa\\U0003988c\ud800\udca5\ud800\udc97\\U000cf279\\U0004384c\ud800\udc8c\ud800\udcda\ud800\udc0e\ud800\udc07\ud800\udc1b\ud800\udcf2\\U00038fd8\\U00010075\ud800\udcbc\\U0003ea1a',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [65535,\n                  146087,\n                  223207,\n                  280801,\n                  462952,\n                  528579,\n                  530894,\n                  628489,\n                  787943,\n                  880231],\n             ),\n         ),\n         'min_size': 41,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'j\\x01\\xa8<\\x02\\xd0$',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None)),\n      length=-1055,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 3, 0),\n                                     ('c', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\u00d4',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         'collected_tests',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\U0007706a\\U000592d7': -25,\n       '\u00f8E\"_(\\x9c': -5.917913576435371e+16,\n       'simplest': -1.0069625669763336e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-31220, 1702),\n       (-30930, 49),\n       (-14696, 9043),\n       (-5167, -485853012),\n       (-107, 1732),\n       (-63, -22258),\n       (67, 14017),\n       (100, 116),\n       (6592, 89),\n       (10344, -6619),\n       (11350, 118),\n       (16406, -18081)},\n      slice_comments={(3531, -69): '\u00d6\u00f4L\u00f1\\\\\\x7f3\\x8c\\x08\\x9aX\u00da\u00e4',\n       (-16343,\n        -164_126_278_244_389_004_917_131_800_756_351_828_573): '\u00d5u\u00caB\u00e4'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=9482, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\x86+\\ny\\xa0A\u00e1=\\x8f\u00bd\u00c9$\"\\x95\u00d7\u00d4\\U000b1d90\u00fa\u00ab4',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1,\n                  1445,\n                  26707,\n                  46968,\n                  65535,\n                  133453,\n                  145131,\n                  152997,\n                  182892,\n                  199432,\n                  248441,\n                  307900,\n                  380623,\n                  399873,\n                  474376,\n                  477864,\n                  542015,\n                  543503,\n                  642801,\n                  728647,\n                  1048897,\n                  1063011,\n                  1105543],\n             ),\n         ),\n         'min_size': 15,\n         'max_size': 115},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.18679813894873e+141},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -6.106383509749358e-240,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.3889874658221473e+307},\n        was_forced=False,\n        index=None)),\n      length=-8541,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 1),\n                                     ('b', 1, 3)),\n                                    (('c', 2, 1), ('c', 2, 1)),\n                                    (('c', 3, 0), ('b', 0, 1)),\n                                    (('c', 3, 1), ('a', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-18570, -1_534_849_993): '\u00e1\\x08\u00d6\\x0f',\n       (-72, 78): '\u00dfw|\\x01',\n       (-21802, 25): '\\U0009b5ad\u00f4',\n       (65535,\n        -252_358_683_532_701_283): '\\U000323e7\u00f3\\x8e\\U00093da8\\U000560f8Nk',\n       (-24198, 10326): '',\n       (16453, -5_634_322_271_842_843_238): '\u00e8\\U000cac82',\n       (-2896, 25584): '\u00c0\u00b2\\x01(\\x07\u00a9\u00dd]\ud871\uddb5\\x8a',\n       (-19356, -16): \"'\u00c5\u00e3\u00d1\\U0010410c\\x80\u00f8\\x8e\\x15I\u00c0\\x02\u00f7\",\n       (97, 22541): '\\x02`\u00ab\u00ae\u00aa\\U00075e0d',\n       (404,\n        -95_146_496_817_338_247_132_467_490_852_781_152_474): 'corpus_observation',\n       (-34,\n        112_723_900_376_430_168_731_147_763_703_332_714_360): '\u00cb\\x92XI\u00bf\\U000df16b\\U000ffa50\u00c9V\\U000b7bd3.\u00efm\u00e9{\u00ce0',\n       (-21681, -9595): '',\n       (-23, -16128): '--numprocesses'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-19315, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U00042aa5\\U00042a93\\U00042b52\\U000d3671\\U00042b6d\\U00042b2e\\U00042b5d\\U000f2fd3\\U000e9ce3\\U00042ad9\\U000f92cc\\U00042ae2\\U00042acd\\U00042aaa\\U00042b05\\U000dccac\\U00042af6\\U00042aaf\\U000d9f92\\U00042ae7\\U00042b6b\\U00042ab0\\U00042b5d\\U00042b02\\U00042a79\\U000ee29f\\U000d9fa7\\U000e4009\\U00042ab8\\U00042b1c\\U00042b67\\U00042b3f\\U00042aee\\U00042b47\\U00100382\\U000e8d05\\U00042b3e\\U000dac3e\\U000ce689\\U00042abb\\U000d6db4',\n        constraints={'intervals': IntervalSet(\n             build_intervals([273011, 283464, 749904, 1050303]),\n         ), 'min_size': 26, 'max_size': 126},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xb5',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None)),\n      length=-8403,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 2),\n                                     ('b', 0, 0)),\n                                    (('b', 1, 3), ('a', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('P&M\u00bf',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '\u00cd\\x1d\\x9a\\x81',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('gO\\n5\\U00068fac\u00b3#\u00dd\\U00056ff2\\x81',\n                                     [UnicodeTranslateError('\u00df\\U0006af54\\x8a\\U000a01da6\\x02',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      ExceptionGroup('\\x06\\U00035289Cy\u00d7\u00fe\u00d7\\U0006c312\\U000b86fc',\n                                                     [ExceptionGroup('Report',\n                                                                     [UnicodeTranslateError('\\x11j\u00b1w',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      UnicodeTranslateError('',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      UnicodeTranslateError('\u00d7',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeTranslateError('\u00ca\\x80',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason')])]),\n                                      ExceptionGroup('\\x04',\n                                                     [UnicodeTranslateError('\u00e9\\x95\\x9dHS\u00c7\\x0c\\\\',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '\u00e4',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '\\U00093364\\x1b',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      ExceptionGroup('c\ud855\uddc6G\\x02\\x182\\x9c',\n                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeTranslateError('\\x80',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason')])]),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '(\\x05',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError('\\U0005d605\u00b3\\U00063c74\\U0009d6d7\\n',\n                                                            0,\n                                                            0,\n                                                            'reason')]),\n                      ExceptionGroup('\\x04}\u00f4g\u00b6\u00ca\\x1b\\U001042dd',\n                                     [UnicodeTranslateError('/docs',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      ExceptionGroup('',\n                                     [ExceptionGroup('\u00de\\U00048dd7\u00db',\n                                                     [UnicodeEncodeError('unknown encoding',\n                                                                         'j1G\u00ea\\U00106af2>',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')]),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         'corpus_observations',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('\\U000f1881',\n                                                     [ExceptionGroup('%\\x071\u00f0\\x8a',\n                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeTranslateError('\\x1a',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                         '',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      ExceptionGroup('C\u00c5\u00d6\u00bf\u00d6\u00e2\ud863\udedc\u00a21tF',\n                                                                                     [ExceptionGroup('\u00c8\u00e7\\x9e\u00a3\\x88\\x18\u00ecG/',\n                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                         '{\u00bb\\x9dw\u00ca\u00cf\u00cd\u00ec\u00eb\\x0e',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      ExceptionGroup('\u00c1\u00f3]\u00e1H\\x88\u00a7\u00c0\\x13\u00b7N\\x8e',\n                                                                                                                     [ExceptionGroup('\u00df',\n                                                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                                                         '\\x84\\x84\u00aenJ',\n                                                                                                                                                         0,\n                                                                                                                                                         0,\n                                                                                                                                                         'reason'),\n                                                                                                                                      UnicodeTranslateError('\\U00088289\u00ef(\\x8c\"\\U000da7e5',\n                                                                                                                                                            0,\n                                                                                                                                                            0,\n                                                                                                                                                            'reason')])]),\n                                                                                                      UnicodeTranslateError('\ud83d\ude0d',\n                                                                                                                            0,\n                                                                                                                            0,\n                                                                                                                            'reason'),\n                                                                                                      UnicodeTranslateError('\\x01\u00d6\u00e2',\n                                                                                                                            0,\n                                                                                                                            0,\n                                                                                                                            'reason'),\n                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason')]),\n                                                                                      ExceptionGroup('2',\n                                                                                                     [ExceptionGroup('',\n                                                                                                                     [UnicodeTranslateError('\u00be',\n                                                                                                                                            0,\n                                                                                                                                            0,\n                                                                                                                                            'reason'),\n                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                         b'',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason')])]),\n                                                                                      UnicodeTranslateError('',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason')]),\n                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                         '\\x14\\x9f',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')]),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '\\U000c5694\u00ce5\u00da\\U000d6de3\\x97\\x8fxP\\x17',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      ExceptionGroup('\u00b3\\x84\\U00061672',\n                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                         '\u00ac\u00d2\u00a3',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      ExceptionGroup('null',\n                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason')]),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')])]),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError('\\x11',\n                                                            0,\n                                                            0,\n                                                            'reason')])]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00ca': -96,\n       '\\r\u00ef\u00cb\\xa0\u2a12\u00fc': 5.724524917946195e+16,\n       '\\U0008149d\u00f9\u00a1T\\x0eS': -6.597382996996094e+16,\n       '\\U000887ad\\x19l\u7d9b\ud876\udeed': -3.2336286216008963e+84,\n       'f=+}\\U000b9208\u00be\\x01\\U0009fd5c': -17689,\n       '\u00bbT\u00fcT\"\\U0006125fy': -2603,\n       '\u00bf\\U00012dc7\ud862\udc86\\x84\ub6b0\u00fc\uc750M\u00ba': -430753839,\n       '\u00bf': 2472},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-53, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=1.5737699197143901e+308,\n        constraints={'min_value': -3.008967034434335e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.0272667507015857e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'9)\\x04\\x07YX;Q\\xd0#\\x17-\\x1b\\xe8\\xde',\n        constraints={'min_size': 12, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000f78d3\\U000a4ea9\\U000a4e16\\U000a4e9e\\U000a4ec7\\U000a4e3f',\n        constraints={'intervals': IntervalSet(\n             build_intervals([675329, 988829, 1004546, 1058643]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 5.950792832000158e-177},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xd0',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00012642\\U00012614\\U00050cd0\ud860\uddd9\\U00012629\ud858\udf36\\U00012634\\U0001269d\\U0001265b\\U00012617\\U0001268a\\U0001263d\ud872\uddbc\ud879\udf2e\\U00012688',\n        constraints={'intervals': IntervalSet(\n             build_intervals([75257, 344431, 879218]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=3.71014354989377e+307,\n        constraints={'min_value': 4.6619338701181896e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.04235202431212e-267},\n        was_forced=True,\n        index=None)),\n      length=-154_030_355_926_861_308_839_758_528_994_757_821_189,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\x95i\u00d8%g\\U000945d3\u00f4\\U000a95b6\u00a2',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('kN\u00c8\\U000a122e%\u00bd\\x8bp\u00a2',\n                                            0,\n                                            0,\n                                            'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('0',\n                                     [UnicodeEncodeError('unknown encoding',\n                                                         'G',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError(\"'\u55b5{\\U000db4f90P\\U00082891\\U0003440e{a\u00fc\\x8a\",\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeTranslateError('O\\x1d',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      ExceptionGroup('\\x1c\\r\\x9a\u00b1\u00b2\\U00086884LC/',\n                                                     [ExceptionGroup('',\n                                                                     [UnicodeTranslateError('',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason')]),\n                                                      ExceptionGroup('\\x89',\n                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                         'p\\U0007a15c\\x97/s\u00eco7',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeTranslateError('\u00ef\u00df\u00ceKd\\x1d\\U000a6eb3\u00dc\\U000c665c\u00b3\\x99\u00a1\u00b7\u00f1>',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason'),\n                                                                      ExceptionGroup('\u00df\\x8f\\U000c4f02\\x07\u00b0<',\n                                                                                     [UnicodeTranslateError('\\x0f\\U000441cc\u00fa\u00e2\u00ebOp\\x9b\\x92`\u00b9\\U00070485F\\U000f1b13',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      ExceptionGroup('Q\\U000bbdb5\\U00049217\u00ed',\n                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason')]),\n                                                                                      ExceptionGroup('\u00fc',\n                                                                                                     [ExceptionGroup('v\u00c1\u3b7a\\U000aec3bu\u00f1\u00d7P',\n                                                                                                                     [UnicodeTranslateError('',\n                                                                                                                                            0,\n                                                                                                                                            0,\n                                                                                                                                            'reason'),\n                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                         b'',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      ExceptionGroup('',\n                                                                                                                                     [UnicodeTranslateError('\\U0009c43d\\x7f\\U0006ec19\u00ea`',\n                                                                                                                                                            0,\n                                                                                                                                                            0,\n                                                                                                                                                            'reason')])]),\n                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         '\u00c7\\U00081bdf*|\\U000fb6e7K[\u00ca\u00bc\\xad6\u00a6\u00f9\u0d28\\U0006de3b',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         'd\\x05',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason')])]),\n                                                                      ExceptionGroup('\\x16C\u00f6\u00d9\u00ba\u00f3',\n                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                         '',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      ExceptionGroup('',\n                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      ExceptionGroup('P\\U00085b17\\U00105abbO0j\\U0008d8ea\\U0002eded\u00f4\\x91\\U00061754\u00e8x\u00cb\u00bb\\U000b63ba\\x82\u00e4\u00ec\\x9a\\x8c\u00ecH\\U0003e318\\U0003b9d0;&\\U000656e9\u00f7=',\n                                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                                         b'',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                         '\\U000e532c\\xad\u00c0L\u00ce\\U000aaf3cU',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                         '\\U000a8d9f\u00af\\U000d51e9\u00c1',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason')]),\n                                                                                                      ExceptionGroup('\u00bb\ud856\udd31q[\\x12\\x91\\x8b\u00f9',\n                                                                                                                     [UnicodeTranslateError('\\x94\u00b24\\U000ecad9:',\n                                                                                                                                            0,\n                                                                                                                                            0,\n                                                                                                                                            'reason'),\n                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                         '',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason')]),\n                                                                                                      UnicodeTranslateError('\ud83c\uddfa\ud83c\uddf8',\n                                                                                                                            0,\n                                                                                                                            0,\n                                                                                                                            'reason')]),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason')]),\n                                                                      ExceptionGroup('',\n                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeTranslateError('\ud835\udce3\ud835\udcf1\ud835\udcee \ud835\udcfa\ud835\udcfe\ud835\udcf2\ud835\udcec\ud835\udcf4 \ud835\udceb\ud835\udcfb\ud835\udcf8\ud835\udd00\ud835\udcf7 \ud835\udcef\ud835\udcf8\ud835\udd01 \ud835\udcf3\ud835\udcfe\ud835\udcf6\ud835\udcf9\ud835\udcfc \ud835\udcf8\ud835\udcff\ud835\udcee\ud835\udcfb \ud835\udcfd\ud835\udcf1\ud835\udcee \ud835\udcf5\ud835\udcea\ud835\udd03\ud835\udd02 \ud835\udced\ud835\udcf8\ud835\udcf0',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      UnicodeTranslateError('\u00a1\u00ed',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason')])]),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '\u00bb',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeTranslateError('\\x12\u00a4w9\\x85?\u00e94\\U00045308\u00f4g\\x8e\u00b9\\x06q\u00aa\u00bd',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeTranslateError('k\u00b5\\U000c400d\\x17SZ\\x0c?\\x19\\x99\\U00098f91',\n                                                                            0,\n                                                                            0,\n                                                                            'reason')])]),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00e4\u00f5k\\x96Q\u00c2\\U0006559d': 124,\n       's': 5208,\n       '\\U0001ced0\\U0003c01fy': -17398,\n       '\\x9e\u00f0\u5b1f\\\\\\U000da87e0V\\U0006d0a0\\x9d\u00af\\x9f': -4.82939340687055e+16,\n       '': 1.7094260757492378e-214,\n       '&!\\x8f\\x12\u00ccF\\U0010b641\u00dc=\\x89x\u00f9!\\U0003f151\\x1c\\x17\\x8c\\x15\u00ba0\\U0003bf76\\x82-\u00bf': 4.335122720505165e+16,\n       '+0.0': 7_085_946_883_455_082_822,\n       '\\U000d3741': -788188846.5988958,\n       'frontend': -3.671840749499245e+16,\n       '+': 6.8856869933925416e+16,\n       'KS\\U0001937a\\x86': -1.1348716431706265e-73,\n       'w\u00c4{\u00fbx': -3.2833145466958404e+16,\n       '\\x18\\U0010d369H': 20073,\n       '\\x8f\u00f1\\U000a44c9\\x17\u00fa\"\u00fc\\U0010d15e\u00ee\\x10\\U0008412f\u00ce\u00be': 62,\n       '\\x13\\x9e\u00a4u\\U000be626\u00e6I5\\x99\u00ea\\x03\u00f3': -15863,\n       'L\u00f8O\u00fc\\x1b\\x9c\u85b9\u00df\\U000e98cc\\x0e\u00b7\\x822\\U0006e425\u00cb,`': -8096,\n       '\\x13': 98_862_217_241_561_871,\n       'B\u00d3K': 4118760645619165.0,\n       'f\\x1b\u00fe\u00a7\u00b0\u00b1': 500,\n       '\u00c2': 1000,\n       'None': 4367},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_800_349_073,\n        -165_686_035_141_380_250_848_315_603_329_399_233_097),\n       (-23361, 31142),\n       (-17738, 1024),\n       (-11107, 25),\n       (-126, 300),\n       (64, -10115),\n       (118, 9943),\n       (1881, 72),\n       (1_828_474_949, -17730),\n       (137_438_083_584_626_886_197_932_527_585_194_796_299,\n        40_528_893_934_671_994_557_242_338_810_664_375_067)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=21660, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'.hypofuzz.observations',\n        constraints={'min_size': 21, 'max_size': 121},\n        was_forced=False,\n        index=None),),\n      length=594899457,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 1, 3),\n                                     ('c', 1, 1)),\n                                    (('c', 1, 3), ('b', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\\tO\\x0fw\\U000dfa84,\\U000dc0c3\\x136Z\u00c7\\U000ef513\\x07kOgu\u00cf\\U00067399\\x0c \\U00100b99': -2.025810208105166e+16,\n       '\ud835\udc7b\ud835\udc89\ud835\udc86 \ud835\udc92\ud835\udc96\ud835\udc8a\ud835\udc84\ud835\udc8c \ud835\udc83\ud835\udc93\ud835\udc90\ud835\udc98\ud835\udc8f \ud835\udc87\ud835\udc90\ud835\udc99 \ud835\udc8b\ud835\udc96\ud835\udc8e\ud835\udc91\ud835\udc94 \ud835\udc90\ud835\udc97\ud835\udc86\ud835\udc93 \ud835\udc95\ud835\udc89\ud835\udc86 \ud835\udc8d\ud835\udc82\ud835\udc9b\ud835\udc9a \ud835\udc85\ud835\udc90\ud835\udc88': -4.371897961632977e+16,\n       '\\x96\\U000ea58c\u00bb0%\u00c6y5&': -6.0660109019374e+16,\n       '\\x19\\x12\u00d4': 3.0584740953971484e+16,\n       '\\x7f\\U000cd639!': -416_753_612_062_521_767},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-96, -29701),\n       (-18, 6791),\n       (22, 40),\n       (8813, 16136),\n       (9477, -21210),\n       (20091, -95),\n       (28504, -4)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-12419, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=141,\n        constraints={'min_value': 125,\n         'max_value': 233,\n         'shrink_towards': -12,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud83c\uddfa\ud83c\uddf8',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1024,\n                  17127,\n                  82336,\n                  198416,\n                  222308,\n                  231420,\n                  522263,\n                  610894,\n                  615429,\n                  638821,\n                  643645,\n                  731684,\n                  831511,\n                  838527,\n                  869977,\n                  1008383],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-41,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -16041,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-8_028_331_200_574_993_274,\n        constraints={'min_value': None,\n         'max_value': -24641,\n         'shrink_towards': 1024,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u4f4f\u4ef9\u4ec8\u4ef9\\U0003f8a3\\uedbf\u4eb2',\n        constraints={'intervals': IntervalSet(\n             build_intervals([20099, 329771, 1087128]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xf6%O\\x86)\\xfe\\x86!\\xb1j\\xca\\xddBh\\x99]\\xe3Q\\x9f\\xa3\\xb2\\xac\\x93\\xac\\x12Q\\xda\\xf0j\\xf0\\x8e\\xf6\\x88\\x9b\\xaf',\n        constraints={'min_size': 15, 'max_size': 45},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\udbf3\\U0006251a\ud835\ude1c',\n        constraints={'intervals': IntervalSet(\n             build_intervals([56223, 500325])),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x92\\x1c\\x00\\x81\\rgP\\xfc\\xaa\\xc7\\x06\\xd3\\x8c\\xc9\\xb8\\x99\\xbdj\\x88\\xf9',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x1dO\\xf6',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.10175764516974775},\n        was_forced=False,\n        index=None)),\n      length=11231,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('a', 0, 2)),\n                                    (('a', 1, 2), ('b', 0, 3)),\n                                    (('a', 2, 3), ('a', 3, 2)),\n                                    (('a', 2, 3), ('c', 2, 2)),\n                                    (('b', 0, 1), ('b', 1, 3)),\n                                    (('b', 0, 1), ('c', 3, 0)),\n                                    (('b', 0, 3), ('a', 1, 0)),\n                                    (('b', 1, 2), ('a', 1, 2)),\n                                    (('b', 2, 2), ('b', 0, 1)),\n                                    (('b', 2, 3), ('a', 3, 1)),\n                                    (('b', 3, 3), ('c', 3, 1)),\n                                    (('c', 0, 0), ('a', 3, 1)),\n                                    (('c', 0, 0), ('a', 3, 3)),\n                                    (('c', 0, 1), ('b', 2, 0)),\n                                    (('c', 1, 3), ('a', 2, 2)),\n                                    (('c', 2, 2), ('c', 2, 0)),\n                                    (('c', 3, 1), ('b', 3, 1)),\n                                    (('c', 3, 1), ('c', 1, 3)),\n                                    (('c', 3, 3), ('c', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         'P&\\x89R\\x8fu\\x86\\U0007fcb3\\xa07>R\u00ce\\x04\\x90\u00d9\\U00066b21\\x8e\u00ab\u00bd',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\u00d8\u00a1\u00e1\\x04l\\U000822ad\u00dc\u00ef\\x0c\\x16^': 1.175494351e-38,\n       '\\x98\u00b3]\\U000deb4c': -5.705268178926738e+16,\n       'patch_name': -92,\n       '\u00e8': -14259,\n       \"\\U0009ca6a\ud882\udc8e\\U00103a9f\u00de#\u00f1G\u00c2'\u00a7\\x88O\": 31843,\n       ',\\U00102e8a\u83e2': -5021,\n       'j\u00af\u00d8\\U000f729b&l\\x10\\x99\u00f3': 2.3508791595875636e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-21744, 8_469_600_786_423_513_810): ':r',\n       (18290, 26461): '\u00e6\u0153\u00c6\u0152\ufb00\u02a4\u02a8\u00df(\u256f\u00b0\u25a1\u00b0\uff09\u256f\ufe35 \u253b\u2501\u253b)',\n       (-50, 11821): 'rev-parse',\n       (-20146, 20488): '',\n       (-22, 30565): '.:\u00dd\\U000e759a\u00b5',\n       (-35, -9817): '9\u00f3!ai\u00fd,\\x19C',\n       (-30593, -97_301_558_785_881_956_026_692_698_173_270_038_261): '\u00f3',\n       (1_796_698_705, 25122): '',\n       (-105,\n        -1_877_340_586): '\\U0003a56de\u00ce\u00bf\\U00106b6d\\x1f\u00f1\\x16\u00ee\\x92e\\U0006fa7adW'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-15241, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\x0e\\xf6\\x12[\\xd0+',\n        constraints={'min_size': 3, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),),\n      length=20839,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='1/0',\n      has_discards=True,\n      target_observations={'U\u00d1\u00a5\u00e3\\x0f': -8.453965862703566e-153,\n       'COM1': 10134,\n       '\\x06\u00f2\\x14\u00ea\\U0008d58a\u00a1\u00dc\\U000a70ab\\U0009b0f6': -1.1310680578640906e+225,\n       '': -25_236_064_034_479_529_100_780_128_751_252_158_882,\n       '\u00ac\u00ec\\U0004661d\\U000141ab\\U000a7d62\\x85\u00db': 2.8825765383444296e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-521966261, -4),\n       (-30679, -7_731_249_669_291_742_688),\n       (-7163, 67),\n       (-58, -4114),\n       (13239, 7_308_068_732_595_670_686),\n       (22275, 9999),\n       (1_160_904_861, 3617)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=0, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.508749214867787e-35},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1.7976931348623157e+308,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.4131138393917713e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.1840365253870771e+308,\n        constraints={'min_value': 0.3333333333333333,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.197187236854943e-214},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 0.0,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.2389796345618404e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=6.542996749256113e+16,\n        constraints={'min_value': -5.6108671629147855e-258,\n         'max_value': 6.428337665404405e+307,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.6258120281759866e-37},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.05},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8080740544731346},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.28072681706204033},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'c\\xeb^huh\\x18b\\xe1\\xea\\x89(\\x8d.\\xf3\\x12{Eo\\xe2I\\xd7-l],\\x85',\n        constraints={'min_size': 20, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xc6x',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-5463,\n        constraints={'min_value': -20639,\n         'max_value': 17044,\n         'shrink_towards': -123,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=-28738,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 2),\n                                     ('b', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\x0f:\\U000c0563\\x80\u00d2\\x1f\u00c2\\x12\\x95',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='0..0',\n      has_discards=True,\n      target_observations={'': -2608},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-32137, -11681),\n       (-3876, -9714),\n       (-253, 15329),\n       (-14, -31300),\n       (5, 9_211_624_650_061_355_292_062_614_573_088_413_658),\n       (19, -68),\n       (52, -31954),\n       (58, 125),\n       (73, 1_876_484_013),\n       (98, 5856),\n       (7439, -111),\n       (8379, -30211),\n       (13407, -9377),\n       (65535, 24983)},\n      slice_comments={(-26212, -2_468_019_132_102_579_300): '\\U000edd5f',\n       (-21754, 104): '',\n       (66_561_061_395_633_842_670_173_555_907_883_893_209,\n        -105): '\u00fd\u00cc{\\U00105a4c',\n       (19166, 24736): '',\n       (-46, 15631): '\\x89\\x0b\\x82\\x9b\u00b2\u00ef\u00bd;\u00cd{',\n       (-31343, 0): '\\U000d8504\\x80\u00b5{\u00bb\\U0007076fq\\xad\u00ccSd',\n       (1000, -8729): '',\n       (18834, -178): '\\x1b',\n       (-17, 2903): '\u00b0\\x04g\u00da',\n       (-3883, 12052): '\\x95\u00fd',\n       (7_341_160_130_654_903_381, 492): ':',\n       (-5072, -61): '',\n       (-27218, 88): '',\n       (778633108, -31947): 's\u00b9\u00a1\\xad',\n       (-28372, 657359936): ')\\x81',\n       (-1010,\n        2013): '\u00a96\u00ff\\n\u00f1\\x1f\\U000adcf1P\ud866\uddac\\x8b\\U0009b5b2\u00e2`\u00acG\\x96\\x08\u00da\\U000db054\u00e3lRM\\U000117a4l\u00dcv',\n       (18088, -30918): '4\\x8e\\x84\u00fb\\x18\\U00086cb1\\x0e\u00cf\u00c0\\x97\\x1a\u00e4'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.02804512600414455,
          "overall:gc": 4.516600165516138e-05,
          "generate:args": 0.10801087279105559
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878930.774053
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=12859, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\u2026\u205b\u2025\\u20fe\\U0009313f\\u20f1\\u20f2\u2038',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [8192,\n                  19014,\n                  197474,\n                  223489,\n                  262613,\n                  293100,\n                  460913,\n                  602526,\n                  663537,\n                  795566,\n                  846515,\n                  948249,\n                  1072954,\n                  1091020],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),),\n      length=-26820,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 0),\n                                     ('b', 2, 0)),\n                                    (('a', 2, 0), ('a', 1, 0)),\n                                    (('b', 0, 0), ('c', 0, 3)),\n                                    (('b', 1, 3), ('c', 1, 0)),\n                                    (('b', 3, 1), ('c', 1, 2)),\n                                    (('b', 3, 3), ('c', 0, 3)),\n                                    (('c', 0, 0), ('a', 3, 1)),\n                                    (('c', 0, 3), ('c', 3, 1)),\n                                    (('c', 1, 0), ('a', 2, 3)),\n                                    (('c', 1, 2), ('c', 0, 3)),\n                                    (('c', 1, 3), ('c', 3, 2)),\n                                    (('c', 3, 0), ('c', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'4\\U0009279a\u00cb\\x0f': 65535,\n       '\u00b3\u00a3': -5.0135245872231976e+16,\n       '\\U000ac8ab\\x9e\\x1b\\U00067733\u00c9\u00a9': -2.4475878766021252e+16,\n       'S': -15472,\n       '\u00c3\\x8e\u00d8:~': -53,\n       '\u00a6\\x1f\\x9d\\x15': 91,\n       '\\U0010dcef': -32176,\n       '\u00e5': -396,\n       '\u00a1\\x0f\\x96': 5201,\n       '0': 3.033657206801196e+286,\n       '\\U00108cb8\\U000efbae': 82,\n       '\\x16\\U000ef487\\U0004e978[\u00fb\ud888\udc30\\U00060f84\\x88\u00e6\u00e4As\u00c0\\x01\u00f2\\x9e\u00fd': 63,\n       '\\x81B\\x85\u00d0\u00a7\u00d6\u00b5\\x17\u00ed': 3.27239414898287e+16,\n       '5\\x8a\\x94\u00a5\u00c6\\x8a': -4_207_419_683_832_253_881,\n       '\u00eb\u00ea\u00ba\\U000ecec0\\x08\\x84\ud864\udd3a\\U0001591f\\U000da142\\x8d\u00f8': -6.245285936797271e-85,\n       '': 4952,\n       '\u00e0': -4.686386186724912e+16,\n       '\u00e2\\x17x \ud834\udc5d\u00fa\ud856\udec2\\\\\u00ea@': -563,\n       '\u00d6': -24528,\n       '\\U000c834c\\U0004586f\\U000ce37f\\U0003d1e5\\U000c4c86': 5.038838430443059e+16,\n       '\\U0006075f\\x0cK': 7315885088365307.0,\n       '`n\u00a2\\U0008b58e\\x96\u00cb': inf,\n       '1\u00d1\\U000aea24\u00fb\\x8b': -2.1504099031191332e+16,\n       '\u00b9\\x9b\\U000b7a62\u00f2\\U00073efd': -3_932_289_587_088_902_278,\n       '\\x98hV\\U000de8beL;\\x91\u00b3': -4.503550497238046e+16,\n       'r': 0.5,\n       '\\x06U\u00e0B\\x9f*\u00a4R\u00b4^': 19916,\n       '\u00d2\u00f1\\x9bo\u00cb8\\U000df741\\x93': -29,\n       'true': 18164,\n       '\\U000a12c5\\x18\u00ef\\U000d5dda': 2.369709288403831e+16,\n       '\u00cal\\x80n': 22278,\n       '\\x94\\x96\u00d5': -2.0017954115600338e+151},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(512, 404), (25754, 6_378_788_116_841_112_140)},\n      slice_comments={(-24, -23272): '\\U0006f972\u00c1\\x95\u00ff\u4493\u00a8',\n       (24903, 1000): '\\x7fG\u00dd\u00ae\\x12M\u00d6\ud865\ude15\\x9c\u00c6',\n       (5_238_860_775_222_325_370, 1_083_713_104): 'then',\n       (-74, -5876): '\u00b6\u00a7\\x83*',\n       (1000, -29987): '\u00c9\\x97Y\\t',\n       (65535, 1): '3b8\\x98%\u00ba\\U000c0260+\u00beQ\\x16\\U00097e45\u00dc\u00d2\u157a]\\t',\n       (23285, 21841): '[',\n       (25840, -8291): '\ud862\udda7',\n       (20732,\n        55554598): '\\t\\U000afbe972Ea\u00ce\\U0004d2eb.:i\\U00037366\\x1e\u00c5\\x8c\\x19\u00ba)\\U0005bdfay\\U000aa0a6\u00d2!\\x16\\U00099b8f',\n       (8_697_022_357_370_213_669, -102): '\u00b7<',\n       (15800, -43): '',\n       (153_279_914_922_210_284_443_332_951_493_016_815_570,\n        -11002): 'w\u00f1a\"&{\u00ed\u00b9\u00cf\ud845\ude40.\\U0007990d',\n       (-7378,\n        1_843_105_561): 'U\u00b4\u00a8\\x17\\x8d\u00e1z\u00b4\\U00061245\ud840\udf56\\x1c\\x1bHT\\x03\\x0f\\U000acbb4(\\x1d',\n       (2_264_775_664_679_997_977, -3): '\\U00039bf0i',\n       (29686, 140_766_360_596_886_600_380_689_990_770_182_250_429): 'O\u00c04O',\n       (-89, -117): '\u00fb\u00c0\u00d2',\n       (-14903, 37): 'T\u00ca',\n       (-3187, -42): '\\U0006f30e}\\U0009f049\\x1a'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-5635, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xafr\\xbe\\x08G=<\\xfb\\x07Yt\\xcd\\x95',\n        constraints={'min_size': 0, 'max_size': 23},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ub8b9\u044c\u0412\u03f0\u04de\u04ca',\n        constraints={'intervals': IntervalSet(\n             build_intervals([1000, 315108, 642168]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-26557,\n        constraints={'min_value': None,\n         'max_value': -12169,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.11451057403941703},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': 4.422567465698593e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.171004559010294e+284},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 2.225073858507e-311},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.1616839403304199e+28},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=31426,\n        constraints={'min_value': -46,\n         'max_value': None,\n         'shrink_towards': 74,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0005499e\\U00054a49\\U00054a04\\U000549ed\\U00054984\\U00054a5e\\U00054a61\\U0005498b\\U00061d46\\U000e28f0\\U00054a2d\\U0005499b\\U000549a9\\U000ea741\\U00054a1e\\U00054a29\\U0005587d\\U000549b2\\U000549e5\\U00054a27\\U00054a74\\U00054a6c\\U000f6429\\U000549f3\\U0006d458\\U000549da\\U00054a6d\\U00054a3a\\U0005c839\\U00054a4a\\U000549a7\\U000549c3\\U00054978\\U0006df3d\\U00054988\\U00065af4\\U000549a5\\U00054a72\\U00054985\\U000549a6\\U0008590e\\U000549ff\\U000549ca\\U00054a63\\U00054a05',\n        constraints={'intervals': IntervalSet(\n             build_intervals([346485, 572824, 923784, 1027688]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7005716849244311},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.14650619161381642},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.2519483085243209},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-938,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 13,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=4,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('b', 1, 0)),\n                                    (('a', 1, 0), ('c', 2, 2)),\n                                    (('a', 1, 2), ('b', 3, 3)),\n                                    (('a', 2, 3), ('a', 2, 0)),\n                                    (('b', 0, 3), ('b', 1, 0)),\n                                    (('b', 2, 0), ('a', 2, 3)),\n                                    (('b', 3, 0), ('a', 3, 0)),\n                                    (('c', 1, 1), ('c', 1, 0)),\n                                    (('c', 3, 1), ('b', 0, 1)),\n                                    (('c', 3, 3), ('b', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'c\u00f2\\U000f33bb': 6.854683301725402e+260,\n       '': -7.039204446255882e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-32675, -31517),\n       (-25467, 694154978),\n       (-17517, -13531),\n       (-15513, -9881),\n       (-14754, -21),\n       (77, -4975),\n       (117, -3406),\n       (1000, -2379),\n       (14561, -16295),\n       (19948, -51),\n       (20682, -16116),\n       (26_195_941_572_912_657_770_301_093_814_783_229_129, -28278)},\n      slice_comments={(37, 82): '\u092e\u0928\u0940\u0937 \u0645\u0646\u0634'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-18471, context=(), group_elems=()),\n      nodes=(),\n      length=73,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'': -1_211_281_218,\n       '\u00c7\\x10\\U000be1c5Y`': -1.255259613982951e+16,\n       'P\u00b0\\U00047514\u00aaRhj\\x04-': 1.192092896e-07,\n       '_': -302_823_102_978_311_021,\n       'I\\x11\u00c2U\u00ff\\x99': -6233842787950702.0},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(6862, 113)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-17605, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-16,\n        constraints={'min_value': None,\n         'max_value': -16,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=4.457852632751148e+306,\n        constraints={'min_value': 940489594398464.0,\n         'max_value': 9.128274426570896e+307,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.5},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b';',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-24390,\n        constraints={'min_value': None,\n         'max_value': -17117,\n         'shrink_towards': 28677,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-2_022_322_297,\n        constraints={'min_value': -2_022_334_062,\n         'max_value': 93,\n         'shrink_towards': 16124,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u496b\u493e\u6545\u4986\u4952\u497d\u895f\\U00056e5e\\U000fc8cb\u48ef\u48d3\u48d9\u49a2\u48f8\u4981\u495c\\U00106edf\u4965\\U0010da6f\u48b2\u492a\\U000fccb8\u4968\u8b77\u4912\u48f2\u494d\u4953\uaa0f\u493b\u48c9\u4962\\U001008ca\u48cb\u494e\u49a8\\U000532cc\u4978\\U000ff332\u48e8\u48c9\u494c\u4951\u48c9\\U00109ecc\\U00103110\u497e\u48db\u492b\u4903\\U0010e43e\u4921\u4993\u491f\u4910\u4988\u4906\u4950\u491c\u48df\u4912\u490b\u48f6\u48b6\u5212\u4958\u48b7\u494a\u48e2\u48bd\u4921\\U00108b53\u48cd\\U000ffe61\u4985\\U00104d26\u48c1\u4956\u492c\u4992\u4987\u496b\u48fd\\U0010b1c5\u48fe\\U00103674\u4940\u4928\u4928\u4992\u4943\u4911\u495b\u4971\\U0010218b\u499c\u4938\u48f9\u4933\u496d\u493a\u4918\u8736\u497e\u494a\u4903\u491a\u4914\u4972\u4965\u49a7\u48dc\u4979\u49a8\u492a\u491d\u49a2\u49a6\u49ae\u4915\\U0005247b\\U0010213b\u494f\u48c1\\U00101584\u48cc\u49a6\u48e7\u4994\u49ac\u48ea\u4973\u48d8\u48e8\u4914\u4939\u48e1\u4949\u48b8\u499c\u4955\u48cd\\U0010d109\u48fe\\U00103bb3\u4916\u48db\u48cc\u4936',\n        constraints={'intervals': IntervalSet(\n             build_intervals([18608, 50960, 336503, 356897, 1031883, 1114111]),\n         ), 'min_size': 49, 'max_size': 149},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.44605767317954637},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=7.693978323714192e+307,\n        constraints={'min_value': 3.2573298363816167e-201,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.4374151309912714e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.19263874803185438},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000f8f3d',\n        constraints={'intervals': IntervalSet(\n             build_intervals([70306, 1114110]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=82,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xf5\\x12\\xd3@\\xd0?',\n        constraints={'min_size': 0, 'max_size': 84},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.5751152282530265e+307,\n        constraints={'min_value': 1.4904731770033123e+50,\n         'max_value': 1.6802730475484343e+308,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 3653048325242567.0},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xbd\\xd1xb\\xeb\\x19~v\\xca\"\\xdc\\x13\\xa2\\xbc\\x052\\xdd\\xe6\\xca0\\x85\\xd7\\xc1\\x0cp\\x98xU\\x07\\x83\\xaa\\xb5;S\\xf49\\xb2V\\xf1',\n        constraints={'min_size': 38, 'max_size': 39},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [20242,\n                  39863,\n                  154638,\n                  233930,\n                  329729,\n                  444467,\n                  656805,\n                  731201,\n                  837521,\n                  874510,\n                  959508,\n                  1045501],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([239702, 1112586]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=114,\n        constraints={'min_value': -64,\n         'max_value': None,\n         'shrink_towards': 12702,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=65535,\n        constraints={'min_value': 30437,\n         'max_value': None,\n         'shrink_towards': -25929,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0009a743\\U0009a694\\U0009a67e\\U0009a6de\\U0009ab82\\U0009a747\\U0009a6b1\\U0009a710\\U0009a6b2\\U0009a770\\U0009a6dc',\n        constraints={'intervals': IntervalSet(\n             build_intervals([632444, 652721]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-7098,\n        constraints={'min_value': None,\n         'max_value': 42,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ubfc3\uc089\uc040\ubfd2\uc08a\\U000e783b\\U000e30fe\uc03b\\U000a7e66\uc0a0\uc053\uc086\uc040\uc09a\uc08a\uc001\uc043\uc037\\U0004cf36\uc03a\uc0c0\ubffd\uc06d\uc053\uc00c\uc069\uc054\\U0006770f\ubff2\uc032\ubfc5\uc03b\uc01f\uc099\\U000e0c27\uc042\uc08b\ubfe6\\U000ae757\\U000d375b\uc085\uc023\ubfde\\U000b8584\uc041\uc033\uc036\uc01a\uc09d\uc06d\uc060\uc09c\uc07a\\U000e60e3\uc03b\uc079\uc08e\ubfe7\uc00a\uc013\ubfc6\uc0a7\uc0a5\uc014\uc029\uc08b\uc048\ubfd6\\U00042eac\uc095\uc04f\uc030\uc01e\uc058\ubff8\uc082\\U000c1d49\\U000bf2ac\uc09c\uc016\uc010\uc076\ubfd9\uc02c\uc02f\uc08f\\U000620ea\\U000cc83c\uc075\\U000b713f\ubfe4\ubfc2\uc034\\U000dc3c0\\U000d0351\ubff7\\U000af4a3\ubfd5\uc01c\ubfd7\ubfe3\uc088\uc051\\U000a3534\uc04e\uc041\uc01f\\U000ac1f8\\U00098018\uc02b\uc023\ubfda\ubfe6\uc0a6\uc07f\uc03b\ubfd5\ubfd4\uc09e\uc0a7\uc0bb\ubfea\ubff4\ubff5\uc00a\ubfe2\uc081\uc0b6\uc007\uc058\uc0ab\uc02b\ubfdf\\U000d8325\ubff2\uc066\uc081\ubfc3\ubfcf\uc0c0\ubffe\uc040\uc03f\\U000ad33b\ubff1',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [49090,\n                  54327,\n                  266264,\n                  318278,\n                  397455,\n                  430077,\n                  564270,\n                  577467,\n                  587241,\n                  587745,\n                  619315,\n                  755586,\n                  782216,\n                  978891,\n                  1059710],\n             ),\n         ),\n         'min_size': 45,\n         'max_size': 145},\n        was_forced=False,\n        index=None)),\n      length=-8918,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('a', 0, 0)),\n                                    (('a', 1, 1), ('a', 0, 3)),\n                                    (('a', 1, 3), ('c', 1, 2)),\n                                    (('a', 2, 3), ('a', 1, 3)),\n                                    (('b', 0, 2), ('b', 1, 1)),\n                                    (('c', 0, 3), ('c', 1, 2)),\n                                    (('c', 2, 3), ('b', 2, 0)),\n                                    (('c', 3, 0), ('a', 0, 0)),\n                                    (('c', 3, 3), ('b', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('', 0, 0, 'reason'),\n      expected_traceback='',\n      has_discards=True,\n      target_observations={'': -1.673092369716568e+16,\n       'INF': 99,\n       '\u00bb\u00a72W \\U000794b9\\U00067ef2 1': -4.871571215419131e+16,\n       'Y\u00dd': -3.5444765465316812e+16,\n       'passed': 15538,\n       '\\x96': -5.9529171118515004e-90,\n       '&\u00b8\u00f9A': -91,\n       'A}': 0.0,\n       '\u00c8\\x02\\x81t\u00f0c\\x00\\x9f': 3509,\n       'v\\U0005fc78\u00del\\x16\\x00\\U0008d93b\u00fb': 20065,\n       '\u00edC\\x7f\\U0005a3e1\\x7f\\U0004c121\\r\\x07': -41,\n       '\\x9f[\u00be\u00ed\u00ce\u00e7\u00ea': -70,\n       '\u00fe*': 644244872,\n       '\\x8e': -66},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-167_193_972_374_097_058_589_548_462_050_895_786_536, 74),\n       (-4_384_774_662_185_985_996_997_315_139_855_474_520, -26701),\n       (-2_096_518_670, 1008),\n       (-10477, 108),\n       (-35, -5041),\n       (28, -23022),\n       (1024, 65535),\n       (10548, -22),\n       (12277, -676),\n       (14308, 120)},\n      slice_comments={(-1_567_687_467, 65535): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=91, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=135_259_457_157_833_326_124_683_428_193_236_893_484,\n        constraints={'min_value': 135_259_457_157_833_326_124_683_428_193_236_862_577,\n         'max_value': None,\n         'shrink_towards': 1_431_885_196,\n         'weights': None},\n        was_forced=False,\n        index=None),),\n      length=-30,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('b', 2, 1)),\n                                    (('a', 0, 2), ('c', 1, 3)),\n                                    (('a', 1, 3), ('c', 3, 3)),\n                                    (('a', 2, 2), ('c', 1, 0)),\n                                    (('c', 0, 1), ('b', 2, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='2(\u00e3U',\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(24469, 13), (32395, 19964)},\n      slice_comments={(-2532,\n        -65): '\u00be\u00bcM\u00aa\\U00045f47\\x94\\U00068625B\\U000ef81e{\\x9f\\U000851b8\u00ba',\n       (-120, -7): 'null',\n       (1000, 57): '\\U000d8c3c.\u00ba',\n       (-290227409, 114): 'n',\n       (8321, -1312): '\u00de\u00bf\u00af(\\x97\u00a4L\\x1c',\n       (-1817, 28122): '',\n       (-15019, 31837): '',\n       (1_472_639_321,\n        512): '%\u00d4\\x150\u00e3\u00ccV\u00f8o\\x0f\\U0004421b\\U0009f308\u00b2;M\\U000e45b0C\u00fd\\x01\\x83\\x89\\x8c\ud882\uddb0\u00ffU\\x10W9\u00c7\\x86\\x05~.\u00a5v',\n       (-9774, 4475): '',\n       (-17, 15461): '\\x13\u00f8=kK',\n       (-1_814_101_046, -12): '\\x1eQ\\x9b\u00ae\u00e9\u00b3\\U0010ad76',\n       (26881, 18927): '{\\U0007b0fb\\x08\\x89/\u00fc\u00dd8',\n       (15310, -2): '\u00a6\u00c6\u00de\\x953y\\t)\\x11\\x9a\u00d3d\\U0007d404',\n       (-10234, 101): 'surrogatepass'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x106d0c800>, min_size=0, max_size=inf).map(tuple), length=one_of(nothing(), nothing(), integers()), has_discards=one_of(nothing(), nothing(), booleans()), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason')))), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text()))).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.012263583950698376,
          "overall:gc": 8.716603042557836e-05,
          "generate:args": 0.08684049622388557
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878949.5367749
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=81, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'U\\xf3~KC\\xe6S\\xc3\\xdd',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000ba5ff\\U000ba672\\U000ba597\\U000ea6af\\U000ba604\\U000ba630\\U000ba64b\\U000ba625\\U000ba67d\\U000ba674\\U000ba5e6\\U000ba686\\U000ba687\\U000c87d5\\U000ba623\\U000ba5e3\\U0010223c\\U000ba60f\\U000ba650\\U000ba62a\\U000ba5fb\\U000ba62e\\U000d6903\\U000ba61b\\U000ddea5\\U000ba654\\U000d1bab\\U000ba635\\U000cc538\\U000ba600\\U000ba5aa\\U000ba67f\\U000d8d0b\\U000ba67a\\U000ba589\\U000ba5ea\\U000ba64f\\U000ba5a2\\U000ba680\\U000ba66c\\U000f6735\\U000ba5fb\\U000ba5e3\\U000c8c1f\\U000ba5e1\\U000ba637\\U000ba67b',\n        constraints={'intervals': IntervalSet(\n             build_intervals([763272, 1081286]),\n         ), 'min_size': 16, 'max_size': 116},\n        was_forced=True,\n        index=None)),\n      length=-11646,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 0),\n                                     ('b', 2, 1)),\n                                    (('a', 2, 1), ('b', 3, 0)),\n                                    (('b', 0, 3), ('a', 0, 1)),\n                                    (('b', 2, 1), ('a', 0, 2)),\n                                    (('c', 0, 0), ('a', 0, 3)),\n                                    (('c', 0, 1), ('c', 1, 0)),\n                                    (('c', 0, 2), ('c', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\x8d\\x8e\\U000c2d0d\\x04\u00de',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'': 70,\n       '\u00d0\\x92\u00fd\u00ef\\U000c285a\\x08)\u00c8\u00ee': -3.524394959794055e-141,\n       '\\x1f': -9.764384106646133e-117},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-19389, 3711),\n       (-15014, 30),\n       (-112, 11),\n       (31, 6917),\n       (48, 102),\n       (15230, 1_952_151_201),\n       (31023, -6986)},\n      slice_comments={(31000, -17899): '',\n       (76, -4): '\u00a9',\n       (64, -12515): '\"\u00a8\u00c21%\u00d3 \\x9fUM',\n       (13018, -7435): '\\x8e\\U00056474\\\\\\U00036a7d\\x0f\\U000e4f32\\x0ct\u00ba',\n       (-9712,\n        45_738_266_738_500_934_655_462_276_184_010_732_426): 'J\\U000c137f',\n       (-18868, -1259): '',\n       (-30696, -4947): '\\uf46a\u00b5',\n       (-12151, 19369): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-25547, context=(), group_elems=()),\n      nodes=(),\n      length=-18250,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 2, 0),\n                                     ('a', 2, 2)),\n                                    (('b', 3, 0), ('b', 2, 2)),\n                                    (('c', 3, 3), ('b', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00ef\\U0005111b\u00a8\u00fc\ud841\udf2f\u00e6': 2_095_928_572,\n       '': 512,\n       '999999999999999999999999999999': 15582,\n       '\u00e5\\r': 25278,\n       '\u00b9\\x83{\\U000cd339\u00f8\\x1dW\\x10': 128_157_559_414_136_074_576_804_650_204_610_271_139,\n       '\\U0003f031\\x06Z\\x9cX\\x1f\u00f1\u00b5\\U000ce2a3\u00cb\u00df\\U000477d4': 4.917102840799116e-279,\n       '\\U000856820\\U000564b4\\x8f': -19374,\n       '\u00d6\\x14': 1024,\n       '\ud81e\ude7dk\u00ebFt\\U000c1d8a\u00c3[F': -4_258_851_833_350_829_752},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-25777, 31_195_333_688_995_210_111_847_945_889_741_309_460),\n       (-8217, 28789),\n       (86, 9169),\n       (789, -2450)},\n      slice_comments={(88, 124): '\\t\u00a5',\n       (-799293356, -99): 'B\u00ed\ud80c\udf01\\x0f',\n       (1000, 20985): '',\n       (-24, -15224): '',\n       (-21307, 26714): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=8192, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 1.6012810564921894e-187,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.661842180439788e+307},\n        was_forced=True,\n        index=None),),\n      length=-9127,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 0),\n                                     ('a', 1, 0)),\n                                    (('a', 1, 0), ('a', 1, 1)),\n                                    (('a', 1, 1), ('c', 0, 3)),\n                                    (('a', 1, 3), ('a', 0, 0)),\n                                    (('a', 3, 0), ('a', 3, 2)),\n                                    (('a', 3, 1), ('c', 3, 2)),\n                                    (('b', 0, 0), ('a', 1, 1)),\n                                    (('b', 1, 0), ('b', 2, 3)),\n                                    (('c', 0, 3), ('a', 2, 1)),\n                                    (('c', 1, 0), ('a', 2, 3)),\n                                    (('c', 3, 1), ('a', 0, 0)),\n                                    (('c', 3, 1), ('b', 2, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\x9d\\U000c075d\u00e4',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x97\\x19d\u00ef\\x17\\U000bd01a\u00af\\U000a1ce2\u00a10\\U0008cb15\u00fa0\u00db\u00f8': -1.718408983564718e+201,\n       '\u00e0\u00b0': -2.8728483253608455e-217,\n       '\u00de.E4\u00dc\u00c4!\\U000829a3\u00dfJi\u00a6\u00f0\u00af\u00dd\\U000e3446\u00f7\\x88\u00a5\\x14\u00c0\\x85\u00fd\u00f6\\x10': 99,\n       '': -3_570_976_405_773_757_096,\n       'bN': 4.094863622750772e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-69, -429140195): '\u00bc0\u00fc]\ud862\ude2c\u00e4\u00de\\x07\\x86\\U0007a4b3\u00cb',\n       (24994, -125): '',\n       (12136628, 123): '\u00a3\\x02\\x9e\u00bf',\n       (5728, 7716): '\\x99',\n       (-4_844_139_898_546_605_571,\n        18440): '\u00c1%\\U000af615\\x80A\u00a3\\U000333cc\u00f1\\U000b4d39',\n       (-13, -21778): ' ',\n       (1_623_956_482, -53): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-39914045805893555757693423242992834341, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-2.3509840476859485e+146,\n        constraints={'min_value': -inf,\n         'max_value': 0.5,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 10000000.0},\n        was_forced=False,\n        index=None),),\n      length=21,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 2),\n                                     ('c', 1, 1)),\n                                    (('b', 2, 3), ('c', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\U000deb18\u00c4\u00be\u00d0\u00d7y\u00e7',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='\u00b8\\x13:\\x98\\x14\u00f8',\n      has_discards=False,\n      target_observations={'\u00be/': 300,\n       '\\x9c1\u00b8}[\\U000f36bb\\x16\\U000443f2\\U000e8258\\U000e020f\u00a4': 4.566608964047825e-213,\n       'U\\x1b\\x9b\u00c7\\x8b0\u00c2': -3.61054050975309e+208,\n       '\u00a4\\U0003691f\\U000f40feG\\x13\\U00083d46\\U000d8bfd': 0.5,\n       '\\x8a\\x02g\u00fa': 1024,\n       '\u00c8': -8_988_427_473_107_559_053,\n       '': 55,\n       '\u00e5\\x85| \\xad\\U000b4918\u00e36H~': 32683},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(30393, -16805): '\u00f3',\n       (-1_947_244_896, -2981): '\\x83\\x8c',\n       (28926, -3660): '\u00a6\\U0007f5ff',\n       (12205, 38): '',\n       (-101, 32104): '',\n       (-2737,\n        6_980_108_531_527_174_042): 'L\\U00086382\u00e7\\U000655af}\\x02\\U0007408b\\x0e',\n       (27922, 91): '\\x1c\u00a3\\x87',\n       (24833, -9445): '\u00d7\u00abJa\\x89\\x10\u00e6#\u00d8+\\x18',\n       (-15445,\n        9044): '\\U000abb82\\U0001004e\\U000efa1e\\x0f\\U00016e0eFi\\U000b45dd\\U000a528a',\n       (-4_889_812_340_185_894_797,\n        44): 'H\u00a2\u00f6\\U0007d7a5\u00ed\\x93~O\\x17\\U00081d39\u00a8F\u00b83\u00b3\u00c9\\x80\u00d4\\x18\\U00060563+\\U000841a8!\\U000bffb6\\U000a702a8\\U0003eec9\\U0009e68d\u00a8r',\n       (26792, -23902): '\u00bd\\x9f\\x9e\\x13\\U00080751\\x95\\x7f\u00d8\\U000f83b2J\u00c5X\u00deS',\n       (30429, 27037): '\u00db',\n       (1_167_000_616, -23312): 'W\u00a3\u00d7\\x8d\u00ee\\U0007c005\\U00060172\ua583',\n       (-6_825_930_646_686_399_632, -13964): '',\n       (-9687, -1322): '',\n       (94,\n        28177): '\\x04\\U0010462a\u00bc\\x0b\\x85\u00caW\\x15\\U000d9fa7\\U00019472\\r\\U000f215b\\U0009da41&\\U00079858\\U000df971',\n       (1024, 10): '~',\n       (87, 16): 'm\\x10R\u00a2',\n       (12413, 13315): '\\U000d4b5e#r',\n       (-13624, 1_260_312_407): 'x]\u00b9\u00da\\U000ce81e\\U00053730[5\u00b5\\x9d\u00f0\u00e0>\\x0b\u00ab\u00d5',\n       (-1_971_968_766, -46): '\\x85\u00d4p\\U000fd6a1\"',\n       (-26, -4290): '\u00dc',\n       (30224, 27636): '~4'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-32745, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.5409092445445508},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=29486,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x00\\x97',\n        constraints={'min_size': 0, 'max_size': 77},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=26720,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=-1_348_230_412,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('b', 3, 1)),\n                                    (('a', 1, 2), ('c', 1, 2)),\n                                    (('a', 3, 3), ('b', 2, 3)),\n                                    (('b', 1, 0), ('b', 1, 0)),\n                                    (('c', 1, 2), ('b', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\ud836\udd72': 4272},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-27640, 74),\n       (-4088, 25499),\n       (-126, 2503),\n       (87, 9999),\n       (89, -14),\n       (403, -30),\n       (5679, -5689),\n       (6967, -4538),\n       (14985, -3_885_166_242_417_837_184),\n       (17385, 113),\n       (26474, 25820),\n       (27935, -25167),\n       (2_093_637_221, -140_339_694_488_601_137_704_094_566_759_049_089_442),\n       (8_217_055_652_078_155_744, -113)},\n      slice_comments={(-1670, 31663): '\u00cf',\n       (74, 9333): '\ud863\udda7f&\u00b5l',\n       (-14768, -839107547): '\\x9aF\\x97/<\u00be\\U0001c7a7\u00ce\\x0eK\u00a3\\x8f\\x1d',\n       (-11330, 25923): '',\n       (-22798,\n        58_086_564_610_062_528_412_510_937_759_994_629_993): '\\x8d\\x14',\n       (2208, 9215): ',w\u00db\\U0007cc19\\x96\u00f4\u00ee-\\U00089819OF\u00e6\u00e6\u00fc',\n       (-37, 16217): '\\x97\\x80\u00e7\\U000cdfd7',\n       (-23458, 126): '\\x1c\\U0010cf18',\n       (-73, 13752): 'Q\\x8f\u00db\\x02yjB\ud85b\udcd5\\x8b\\U00057ae5',\n       (110, 12404): 'coverage',\n       (30492, 107): '\u00a5\\U000b9d6b'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=67, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.6850797763259503},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-4.667889180918585e+16,\n        constraints={'min_value': -6.268326151442136e+16,\n         'max_value': -1.8695440759386864e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.7728050475801292e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.30103779313817564},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000d2479\\U000d246e\\U000e0b7c\\U000d2484',\n        constraints={'intervals': IntervalSet(\n             build_intervals([861167, 956434, 1039981, 1080996]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.055452448215885145},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=13680,\n        constraints={'min_value': -32433,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xf0\\xb0\\xbf\\xd3',\n        constraints={'min_size': 4, 'max_size': 104},\n        was_forced=True,\n        index=None)),\n      length=-533,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 2),\n                                     ('a', 3, 0)),\n                                    (('b', 2, 3), ('a', 3, 0)),\n                                    (('b', 3, 2), ('c', 2, 3)),\n                                    (('c', 1, 3), ('b', 1, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('G\u00f9\\U000b2806', 0, 0, 'reason'),\n      expected_traceback='',\n      has_discards=True,\n      target_observations={'\\x0f\\U00046188\\U000b13cb\u00abH': 1_782_546_507,\n       'c': 0.0,\n       '\\x89\u00da\\U00055525': 1.556837354812802e-147},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(65535, 74): 'u\u00f56e\u00fc\\x8c\\x1a\\U000d5891\\x92tk\\r',\n       (254686945, -2551): '\\x9d',\n       (-30251, 117): '\u00ebF\u00f3\\U000bf616\\tk\u00ae\\U00095866\u00f6\u00c3\u00e9',\n       (-14798, 5_832_112_532_327_125_810): '\\U00079c78\u00fb\\U0001990f\u00a7',\n       (28217, 15864): 'y\\x82\\x8e@/\u00a6\\U00103d89\u00c0\u00e3\\x85\\x15\\U000fb365\ud870\udd6b\\x0e\u00c4'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1045211043, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U000361db\u7b16',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [31371,\n                  284465,\n                  489658,\n                  502714,\n                  507174,\n                  567092,\n                  746062,\n                  878702,\n                  1075728],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xe5\\x8a',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xfaw\\x86FL[\\xbd\\x8e~\\x8fs\\x04G',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.0199333939643103e+307,\n        constraints={'min_value': -5.259930410613626e+16,\n         'max_value': 4.4791928857211747e+307,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.292964742090751e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'h\\xc0\\xe7\\x83V\\xf0\\xd8\\xda\\x8cA7m-Z&\\xf5fAI/\\xa3\\x1e\\x13\\xc3\\xe8',\n        constraints={'min_size': 12, 'max_size': 112},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': -5917340741816953.0,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 8.36926367955201e+184},\n        was_forced=True,\n        index=None)),\n      length=10546,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 2),\n                                     ('b', 1, 0)),\n                                    (('b', 0, 0), ('a', 3, 2)),\n                                    (('b', 1, 1), ('c', 3, 0)),\n                                    (('b', 1, 3), ('b', 1, 1)),\n                                    (('c', 0, 0), ('c', 3, 2)),\n                                    (('c', 0, 1), ('a', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup(':\\x8f\\x8b\u00d6\\x07\\U000d7d55\u00ce',\n                     [ExceptionGroup('X\\U0001a533\u00ae\u00fd\u00db',\n                                     [ExceptionGroup('shrinking',\n                                                     [ExceptionGroup('\\x14\ud84c\udf8f\u00ecd\u00a44',\n                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                         '\\x07\\U0007ba4c\u00a1\\U000f1c28,\\U0001544c\\U00052d2d\\x01\u00ed1\\U0003b61e\u00dd\\U00078626\u00f5\\U000c54f6\\x06',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                         '\u00ce\\U000b91df\"O\\U001089a352\u00b4\\x9e',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                         '`\u00e2\\U0010d8d5spy\\x80\\U0009136a\\x91v',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeTranslateError('h\\x93s\u00e6\\x93',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason')])]),\n                                      ExceptionGroup('\\x9b',\n                                                     [ExceptionGroup('s\u00b4\u00e8\u00ba~\u00b4',\n                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                         '\\x06\u00ce\\x97H\u00c2',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')]),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      ExceptionGroup('\\U000d490d\\U0008ad87i\\x9c\\x93\u00c7\u00a1\\U0001a26a\u00cc\\x01',\n                                                                     [UnicodeTranslateError('\u00f5\\x1d',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason')]),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      ExceptionGroup('\\U0003efba\\U000921eda\\x0e\u00c2',\n                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      ExceptionGroup('F\\U00076adb\u00eem\\x0b\u00de\u00cb\\x16\\x18',\n                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                         '\u00ed.\\xad\\U000d8141\\x81H',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason')]),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')])]),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '_\\x82\u00ff',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError('l\\x0c\\t',\n                                                            0,\n                                                            0,\n                                                            'reason')]),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      ExceptionGroup('\u00f2\\U0005c05a~$\u00dfq',\n                                     [UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError('\\x0c5\u00eb\u00bb&',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeTranslateError('~\\U000510d0\u00a2',\n                                                            0,\n                                                            0,\n                                                            'reason')])]),\n      expected_traceback='\\x18\\x00\\U00060211@ r\\U00012ca0',\n      has_discards=False,\n      target_observations={'\u00bf\\U0008c6db\u00ff': -8.45739947935297e-110,\n       'I': 1_131_084_378,\n       '\\x890\\U000ffc38\u00b0\u00c5\\x12\u00a3\\U000ce664\u00d3\\xa0r\\U000473be\\x92\\uee6d-\\x98p\u00f7\"\u00a5': 3443,\n       '6\\U000be47e\u00fe': 1024},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-15818, -14317)},\n      slice_comments={(-9770, 3_961_483_939_597_026_506): '\u00ce\u00a7\u00c3',\n       (404, 101): 'R\\U00090981B\\U000cbd3a\\x16\u00df\u457f',\n       (-116,\n        55_152_963_655_285_121_267_313_213_970_660_778_640): '\\x8b\\U0003c676\\U00102a55',\n       (4, 126): '\\x1a\u00e40\u00cd\\U00048a10~\\x9eTs\\U00087d0e\u00bf\u00f0\u00a5',\n       (300, -5480): '\u00a9',\n       (-25, -1_759_989_701): 'fixtures'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-24270, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.05},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=12275,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -24688,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0005dc53\u04d1\u0484\u040c\\U0005ab99\u04f3\u04de\u04f8',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1024,\n                  9999,\n                  365760,\n                  423244,\n                  433001,\n                  523007,\n                  622140,\n                  672843,\n                  982993,\n                  985840,\n                  1114111],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-8575,\n        constraints={'min_value': -14833902,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\x8d\\U000869a2\u00a7\u00c9\u00a3&\u00bfW\\tJ\\x1e*\u00b48%\\U0008b9437\u00ba\u00car\u00b8\\x8f',\n        constraints={'intervals': IntervalSet(\n             build_intervals([1, 615894, 689903]),\n         ), 'min_size': 19, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.842390710654565e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'e\\xf6/\\x96\\xf4_\\xd1\\x16\\xce\\xcc,\\xc4\\x1e\\x16L\\xce$B\\x12\\xa4^\\x146<\\xe6\\xa0\\x83\\x15\\xd3\\xe2\\xa0y',\n        constraints={'min_size': 23, 'max_size': 123},\n        was_forced=False,\n        index=None)),\n      length=-18288,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('c', 0, 2)),\n                                    (('a', 2, 2), ('b', 3, 2)),\n                                    (('b', 3, 0), ('c', 0, 3)),\n                                    (('c', 3, 1), ('a', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('lorem \u0644\u0627 \u0628\u0633\u0645 \u0627\u0644\u0644\u0647 ipsum \u4f60\u597d1234\u4f60\u597d',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-31213, -20663),\n       (-12127, -29138),\n       (-3606, -5_131_250_047_900_714_721),\n       (2026, -43),\n       (6799, -6037),\n       (16166, 8623)},\n      slice_comments={(94, 84): 'replay',\n       (6287, 1244): '\\U000ddf1f\u00c6\u00fa\u00ce\u00d5',\n       (9548, -51): \"O'i\\U000a2890\u00b6\\U001008bf\\x14\u00bc\\x90\\x16\\U000c9209\u00b8\\x86\u00df\",\n       (-994,\n        -18384): '\u00ed~\\x88\\U00102be9\\x14\u00f5\\x92\\U0004c341z\\x817\\U000f3377\u00fa\\U0009c549q\\U000a8589',\n       (99, 58): '\u00b8'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=8479960369737638506, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-25187,\n        constraints={'min_value': -25520,\n         'max_value': -95,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=True,\n        index=None)),\n      length=19239,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 1),\n                                     ('b', 2, 3)),\n                                    (('b', 0, 3), ('a', 2, 1)),\n                                    (('b', 3, 2), ('a', 1, 0)),\n                                    (('c', 0, 2), ('a', 3, 3)),\n                                    (('c', 1, 1), ('b', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'': -1.7976931348623157e+308, 'patch_name': -96},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-59, -3), (12547, 11395), (183678966, -1_025_217_053)},\n      slice_comments={(-14466, -64): '1\ud881\ude14\\U000fff59\u00a5',\n       (7734, 8152): '\u00fe',\n       (-24494, -29537): 'fd',\n       (-6260, 31150): 'R',\n       (-36_481_407_575_933_381_872_960_971_864_211_317_874, -16576): 'r\\x8fc',\n       (51, 94): '\u00f5\u00dcw\u00e2\u00bd\u00ef\\U000e530bV\\U0001a802,\\x8a',\n       (24527, -52_146_434_947_937_560_407_583_488_164_928_889_481): 'u',\n       (9999, 20514): 'W\u00b1\u00e4\\U000e3603\\t\u00cb\u00e2\u00ed\\U0006580f\u00dd\u00d6\u00fb',\n       (-15200, 14773): '\\U000f0700\\x07\\x893-\u00b9\\x1e\u2dfa\\x0f',\n       (-9202, 404): '',\n       (27118, 9186): '\u00e0\u00b3f',\n       (-69, 72): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-562851468, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'o\\xaag',\n        constraints={'min_size': 0, 'max_size': 61},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0003a9b1\\U0003aa00\\U0003aa17\\U0003a96e\\U000beb7d',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [239968,\n                  325417,\n                  540875,\n                  699270,\n                  700027,\n                  720124,\n                  724789,\n                  792644,\n                  858301,\n                  915158,\n                  1035473],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 22},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'D\\xd9\\x02Vr(\\x95',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=-9660,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('a', 2, 0)),\n                                    (('a', 1, 1), ('c', 3, 1)),\n                                    (('a', 2, 2), ('a', 2, 1)),\n                                    (('a', 3, 0), ('b', 1, 3)),\n                                    (('a', 3, 2), ('b', 2, 0)),\n                                    (('b', 0, 3), ('a', 3, 1)),\n                                    (('b', 0, 3), ('b', 3, 2)),\n                                    (('b', 1, 0), ('a', 0, 2)),\n                                    (('b', 1, 0), ('b', 3, 1)),\n                                    (('b', 1, 1), ('a', 3, 1)),\n                                    (('b', 1, 1), ('c', 0, 1)),\n                                    (('b', 1, 2), ('a', 0, 2)),\n                                    (('b', 2, 0), ('a', 1, 2)),\n                                    (('b', 2, 0), ('c', 2, 0)),\n                                    (('c', 0, 2), ('a', 0, 3)),\n                                    (('c', 1, 2), ('b', 1, 2)),\n                                    (('c', 2, 0), ('c', 2, 1)),\n                                    (('c', 2, 1), ('b', 1, 0)),\n                                    (('c', 2, 1), ('c', 3, 0)),\n                                    (('c', 2, 3), ('b', 0, 3)),\n                                    (('c', 3, 0), ('c', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\x16\\x80\\x17\u00de\\x11\u00b2\u00d4&\u00d0j\\x81\\x03\\x9c\\x8d\u00d9\"X\\x91\\U000938d5\u00de\u00a7\\U000f00fc\\U000fa410p',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback='',\n      has_discards=True,\n      target_observations={'\\x8dy\u00ae\\U00094d88$\u00d7': 0.05,\n       '\\x05\\x04p': -8467,\n       '\\U0003d68e\\xad': 2.9333217223661756e+16,\n       'GA\\x18\\U0009402d\u00a2\\x7f\u00e7\u00c8r\u00d4$\\\\\u00ccO\\x98\\U0004c7db?\u00b5\u00c0': 1.2952581671871923e-207},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(9999, 86)},\n      slice_comments={(14438, 31587): '',\n       (-14242, -60): '+',\n       (-65, 34): 'NODE_NAME',\n       (-35, -19804): '\\x18T',\n       (-7037, -103): 'I',\n       (25547, -5409): '>\\U0007f9f6`6dP~\u00d8\\U0003d1909\u00ed\\U00085fb9\\U000dacd7'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1460, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-84,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -27776,\n         'weights': None},\n        was_forced=True,\n        index=None),),\n      length=-20817,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         \"\\x1e\\n7\\x95\\r\\U00106a6a\\x1c\\x16\u00f3\u00e1{\u00c3V\u00b6\\U000bc054\\x15#18\u00f5\u00ce'r\u00ec\\U000ae6f4\",\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'I\\U000e9bbd)k\\x9b\\U00056ae9\\x91s\\x03f\\U00036640\\x9fs\u00b9\\x8d\u00bf\\U0006a830\\U00085b87\\x92Lo\u00d0': -5737855204509135.0,\n       '\\x80\\x17\\U000cbcaf': -1.2461146468263016e+16,\n       '': 18977,\n       '\ud851\udfe3\u00d9&\u00e9\u00ec\u00c0E\\U000629b5\\U000d929f\\x0fH\\n\\U000946e9\\r\u00ab': -6.6769636035498104e+16,\n       '\\x84\\x19\\x06\u00f1\\x14\u00d5\u00e1\\U000808dd\\U000f390b\\x8f\\x80\u00cc\u00c1$\\x01\\x84\\x9f\\t\\U00034cbb\u00d7\\U00086dce\u00dd-': -31794,\n       'e+\u00f6\u00cb6>\\x0c\u00f2\\U000d636e\\U000f03fbs\u00ce': 22132},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-8326, -16568): '\\tR\\x97\\x15\u00b6\\U000d0573\\x86\u00c8'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-12, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=246763972,\n        constraints={'min_value': 91,\n         'max_value': None,\n         'shrink_towards': 3984,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-0.5,\n        constraints={'min_value': -inf,\n         'max_value': 0.0,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.05},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'vb\\x89',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=False,\n        index=None)),\n      length=-134_436_320_971_661_847_969_455_363_240_535_778_363,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 0),\n                                     ('a', 0, 1)),\n                                    (('b', 1, 1), ('b', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\U000ea0c6t\ud81f\udcf5': 62,\n       '\u00b7Y\u00b7': -81,\n       '\u00a6K\\x80\\U000c5582N\u00e9{\\x0f\\x84\u00d7\u00c5\u00e8\u00e9\\x90\u00c2\\U000e2e90\u00b8': 3.725454532393263e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-22, 17119)},\n      slice_comments={(5627, -24097): '\u00f6\u00ec\\x17\\U000afa84;t\u00cd\\U000be359\\x80\u00f8!',\n       (-6_431_119_591_392_165_758, -17764): '\\U00061393(\\U0001c801',\n       (10439, 31746): '--host',\n       (19, 106_310_891_063_368_337_650_871_802_512_960_882_729): '',\n       (-24453, -1991): '}\u00ab\u00e7\u00b4U\ud843\udc3djT\\x8cG.Qf1\\x83\\U000605a7\\x1e',\n       (-13647, 112): '',\n       (-109, -30720): '/api/patches/',\n       (-2, -24207): '[',\n       (-847608934,\n        160_220_697_709_868_405_610_278_268_508_143_460_849): '\u00b5\\x83\\U000ad202x\\x9e\\xa0\u00d8',\n       (6362, 108): '\\x7f\\x1c\\U0005c852\\x94\u00fe\\U00082f9d)<\\x81[\u00e0'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=91, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=9_099_810_322_254_409_554,\n        constraints={'min_value': -116,\n         'max_value': None,\n         'shrink_towards': -15948,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=30322,\n        constraints={'min_value': 30302,\n         'max_value': 30324,\n         'shrink_towards': 27706,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=-13527,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 3),\n                                     ('a', 3, 1)),\n                                    (('b', 0, 2), ('c', 2, 3)),\n                                    (('b', 1, 2), ('a', 1, 2)),\n                                    (('b', 1, 2), ('b', 0, 2)),\n                                    (('c', 0, 2), ('a', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00e9\u00a8': -1183,\n       '5A\\xa0': 31065,\n       '>\\x14\\x12)9*\u00b3\u00ab\\U001022a4': 0.5,\n       'aa\\U000b8d52n0': 300,\n       '\\U00059ea3': 0.99999,\n       \"]\u00f4\\U00094f58\\U000c1ec1\u00d5\u00b0\u00bf\u00d0'\\n`N\": 3.0333765690366594e-124,\n       '\\x9f\u706c\u00cf\u00fa': -21834,\n       '0': 4.651053650831353e+46,\n       'initial_type': -4.67610695231742e+16,\n       '\\U0004bc20\\U000f96d6': -8.682852380232953e-44,\n       '\\x17\\U0010ab36': -30_381_516_468_583_833_103_937_176_473_690_329_342,\n       '\\U000f2975\u00b5\u00eeA\u00ce=\u00ab': 30824},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-9214, -18767), (109, -112)},\n      slice_comments={(10056, -9553): '\\x00\u00ac\u00aa\u00f7\u00fal\\U000d9ff1'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x106d0c800>, min_size=0, max_size=inf).map(tuple), length=one_of(nothing(), nothing(), integers()), has_discards=one_of(nothing(), nothing(), booleans()), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason')))), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text()))).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from integers(0, 1114111).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.024470084987115115,
          "overall:gc": 5.574902752414346e-05,
          "generate:args": 0.1306024602963589
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878920.4849331
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=9999, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=7.047883534068764e+305,\n        constraints={'min_value': 1.4482746576157262e+16,\n         'max_value': 1.8767771856287962e+306,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.282335557927682e+305},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=13553,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-9753,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=-5_349_893_381_216_789_613,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 2),\n                                     ('c', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\x1e9', 0, 0, 'reason'),\n      expected_traceback='\u00c2$\u00f8w\\U000c5ce7)',\n      has_discards=True,\n      target_observations={'': 76_322_360_395_128_502_859_208_956_348_753_358_199,\n       '>': 5.262431827671388e+16,\n       '\u00bf%\\x19\ud867\udd39\\U000e105e\u00c8\\x109': 1.8222620159124064e+16,\n       '\u00aa\u00b1|\\U0010baaf\u00e3\\U000fad8f': 45},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=27816, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U000778f4\ud849\udf3c\ud849\udf9a\\U0007b38b\ud849\udf9f\ud849\udf62\ud84a\udc0a\ud849\udf88\\U0003ae12\\U0004ba5f\ud849\udfa4\ud849\udfeb\\U0004fb6c\ud849\udf5a\ud849\udfa0\ud849\udf4d\ud849\udfe1\ud849\udf92\ud849\udf6b\ud849\udf87\\U000454a3\ud84a\udc1f\ud849\udfc3\ud84a\udc03\ud849\udfae\ud849\udf5f\ud849\udff0\ud849\udf97\ud84a\udc09\ud849\udfc5\ud849\udfbe\ud84a\udc15\\U0004611e\ud849\udfd9\ud849\udf95\ud84a\udc21\ud84a\udc1c\ud875\ude8b\ud849\udfdc\ud849\udfda\ud849\udf99\ud84a\udc2a\ud849\udf70',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [141105, 349561, 463693, 572772, 600383, 645898, 655226],\n             ),\n         ), 'min_size': 38, 'max_size': 138},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'Z\\x0e&\\x12\\x00M\\xb6\\x84\\x92\\xc1',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=719060338,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 1, 3),\n                                     ('b', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('ma\u00d2',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('h\\x1cA', 0, 0, 'reason'),\n                      ExceptionGroup('',\n                                     [ExceptionGroup('',\n                                                     [ExceptionGroup('\\x1b\\xa0',\n                                                                     [ExceptionGroup('\\x8d\u00f2',\n                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                         'Q\\x9as\u00fa\u00f5e\\U00079cb9p!+',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      ExceptionGroup('\u00e3\\U00098ada',\n                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                         '\u00a5!',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason')])])]),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeTranslateError('\\U000e965e\ua5a8\\tw\\U0005e7e9\u00a4\u00e2',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '\u00f6\u00a7h\u00a2e\u00ce8',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '\\U00094930\u00d4\\U000fbecc-',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')]),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('\u00f3',\n                                                     [UnicodeEncodeError('unknown encoding',\n                                                                         '\u00b3\u00b6\u00f0\u00b7\"\\U000afec5\u00d7\\U0005f820\u00e9\\x1a\\U000e8ec9',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '$\\U00057df0\u00cc0M\u00fcVRH\\nS\u00bb\u00f4\u00d9y\u00bdu\\x92\u00cf[\u7839',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      ExceptionGroup('\u00cf\u00f7\\x96\u00ac-<',\n                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeTranslateError('\\U0010e8a1Y',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason')]),\n                                                      UnicodeTranslateError('\\U001002b1\u00da\\x00X\u00c5\\U00105825\u00d4\u00c6\\x94',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '\\U000d1555\u00cb',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')]),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         'x\u00f4}C',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('',\n                                                     [UnicodeEncodeError('unknown encoding',\n                                                                         '\u00a1',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')])]),\n                      UnicodeTranslateError('', 0, 0, 'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\\x05',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_207_798_232, -22), (1000, -738524829)},\n      slice_comments={(53, 7_295_326_184_293_386_331): 'q\u00dc\u00c3Y\u00d9['},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0006722499965690076,
          "overall:gc": 0.0,
          "generate:args": 0.01570933492621407
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878910.576673
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=8, context=(), group_elems=()),\n      nodes=(),\n      length=923009673,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 1, 2),\n                                     ('c', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '/Q\\U000d68c5\\U0004284c\u00f5i\\U000c6281\\x9f\\U000981e3\u00f1\\x9a',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'*m:L': 3.691415966557723e+16,\n       '\\U0004994bG\\U0006d494\\U000a00fa,\\U0005e78e0\\x87\u00a6\u00e7': -910283506,\n       '\u00ecE\\x82\\x1b\\U0009f9bf': 6.005527028592024e+109,\n       '\u00f9': 5749770381674545.0,\n       'c\\x1a\ud842\udca2*\\U000ab546': -5.559539358056456e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-6_877_599_885_927_623_640, -47),\n       (-13947, 7067),\n       (25696, -6044)},\n      slice_comments={(-23588, 300): '\u00f7\uac3e\\x89D\ud80b\udfb8',\n       (1_706_599_478, 21829): '|\\U000abde1C\\U0008c628]\u00c2.}\\U000facfc\u00ff',\n       (512, -6522): '\u7375|\u00d4\\x1a-',\n       (-3_229_232_689_494_325_691, 80): '\\x11\u00a4\\U000466e4',\n       (-21076, 2958): '',\n       (21590, 18465): '(\\U0008640a\\U00054f28L\u00e2R',\n       (24207, -12828): '\\tEb',\n       (512, -3725): '\\U000d1e25\\U000fa62f'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-110, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-4915279,\n        constraints={'min_value': -627827004,\n         'max_value': -4224,\n         'shrink_towards': 0,\n         'weights': {-627780680: 0.026715265005617977,\n          -627826977: 0.010953336179723288,\n          -627827003: 0.03919128052030906,\n          -627793963: 0.016307650025347183,\n          -627808000: 0.023818740444754703,\n          -627777362: 0.02167255952686282}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 8.756363647514404e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value=']\\x05\\U00076fd0\\r\\x916\\x1f\\U00080d3b\u00e3\u00ff/\\x82\\n\\x9c\\U0009a372A\u00a1S}\\x0c\u00fa\\x88\\x8c+\\x0ce\\x17s\\x15u\u00ce\u00a6\\U000b4c1e\\x7f\\U000a4f38-\u00d1\u00d1\\x90\u00ac\\U000b551d\\U0008cd18\\U000a0e7b\\x95\u00be\u00cbR\\x1am\\U0007177c\\U000893d8\u00fa\\x9e\\U0007d435\u00fe\u00e8\\x0b\\U0007edf7\u00aev\\U0007803by`\u00f3\u00e9\\U000712b1\\U00083846wz\\x95?\\x96t\u00c9\\U000a41ad\u00e5A\\x9aSdmm\u00bd\u00e5\\x91\\U000b9665{\\U000ac693\u00f8u)\u00af\\U000b8989',\n        constraints={'intervals': IntervalSet(\n             build_intervals([0, 1000, 439999, 768452, 857776]),\n         ), 'min_size': 25, 'max_size': 125},\n        was_forced=True,\n        index=None)),\n      length=18963,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 0),\n                                     ('b', 3, 3)),\n                                    (('a', 2, 3), ('c', 3, 3)),\n                                    (('b', 0, 1), ('c', 2, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00c2!\u00df\\U00099fa1\\x88\\x9a\\x03\\x80\\U000548c5\\x82',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'l\\x9ds\\U000ef4ad\\x0b\\t<\\\\\\x06': 48},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(75, 24312), (732117242, -30397)},\n      slice_comments={(-2_114_768_861,\n        -1_600_016_360): '= \\U0001ae5e\\U000b89cd\\xa0\\x8f\\x84Zc\\x07\"z',\n       (-31749,\n        6_418_237_638_813_837_784): '\\U0001ad68\\U00094758\\U000dbef2\\x18\\x85{',\n       (-9117, -29): '\u00feG\\U000e46b6',\n       (-10356,\n        6540): '\\U000f20429\u00cc\u00c7\u00abO\\r\u00e0\\x99\\U00081372\u00e3\u00a1\\U000a2cb6\\r9\\U00056f99'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=20727, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7192030499455152},\n        was_forced=False,\n        index=None),),\n      length=-95,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 2),\n                                     ('c', 0, 2)),\n                                    (('c', 0, 1), ('a', 1, 1)),\n                                    (('c', 0, 1), ('c', 3, 1)),\n                                    (('c', 2, 1), ('b', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('=z',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError(')H\u00aa\u00cc\u00c0', 0, 0, 'reason'),\n                      ExceptionGroup(\"\u00fa7\u00f9'\\U000c8455\",\n                                     [UnicodeTranslateError(',',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      ExceptionGroup('',\n                                                     [UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')]),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason')]),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\u00cf\\x9b\\x1c\u00f8@\\x9d\\x84\u00dc\u00e9\u00c3\\U0003c6bd\\x0f\\U0005de0e\\U000f5ebc\\U000835aay\\x1d\\x0cf\u00a1+\\ru\\x96\u00ab\u00e2\\x82\u00eeYw': 69_536_274_859_156_427_917_451_491_190_959_411_250,\n       '\u00bd%\u00dc': 6.189424647507177e-206},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_055_053_337, -12745), (-50, 3776)},\n      slice_comments={(25196, -11170): 'mI\u00b9\\U00053a70\u00e1\\U00043c0c\u00ee\u00a7_c',\n       (-90, 2412): '',\n       (-19455, -16383): 'Hp\\x83\u00a5\\U00086eed\u00d2\\x89=',\n       (-27046, 1_919_103_510): 'W\\U000759a8\u00fd\\U0010b337\u00f5\\U000a6040\u00a1Y\\x9ey\u00c5\uc381\ud879\udc04',\n       (-3_055_313_737_402_484_826,\n        1024): \"\u00b5'Z\ud86d\udd7eI\\x8e\\U0008f989\\x8e\\U000a9476U\\x88u\u00bd\\U000dd60db\u00ca\",\n       (-1923,\n        102_240_826_326_873_245_506_002_982_660_428_496_661): '\\U0005cc47\\U000b06b5\\U00086bd8',\n       (122, 8175): '',\n       (-21076, 14458): '\u00c9',\n       (16893, -91): 'None',\n       (2_298_758_345_882_430_757,\n        -5_621_502_199_265_877_200): '\u00d0B\\U000875c9\u00acG\u00d5\u00a2E\\xadZ\\U000f51c6\ud85f\udde5.\\U000a2e34\\U000940c2\u00d7L',\n       (-132_431_049_804_255_708_182_690_093_250_871_660_865, -19): '',\n       (7_588_139_819_112_775_483, -1_241_476_503): '',\n       (7718, 104): 'Retried draw from ',\n       (-63, 243): '\\x16',\n       (-105, 14): '\u00d3',\n       (-26415, -7_414_174_183_495_104_530): \"\u00fb\\x85*\\U000f1ef1~\u00a6\\x1a*'\u00a8r\",\n       (-118, -30751): '0%\u00d0\\x1b',\n       (-27757, -12782): 'V\u00e3\\x12\u00df\\x1d\\x95\\U0003480d\u00daE\u00eeb',\n       (86, 62_252_440_506_864_137_666_193_028_071_540_925_295): '',\n       (-6427, 126): '',\n       (-3, 85): '\\x03\u00b0\u00bb\ud86e\ude86G\\x18\u00bf',\n       (16207, -58): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=25777, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xb1I}\\xb4\\xd7\\xda\\xa7\\x10\\x14s\\x93\\xbb\\xb7\\x18\\x8d#\\x8b\\xe7P\\xe4$\\x03\\xf9[O))\\xe1\\xeb{he\\xcc\\x10\\xf4D\\xe3\\x8e\\xdf>\\x90\\n,\\xb4\\xeeQ\\xdc\\xe5=\\xbcx\\x11\\xf3\\xa7\\xb95\\x94q5',\n        constraints={'min_size': 34, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -inf,\n         'max_value': 1.2178932727241032e+215,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 7.239636754326242e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 3.58200126138051e-246},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xc8tbY\\xe0d#\\xc5\\xe4<f \\x12\\x12;f\\xa1\\x12\\xab\\x0bG\\x18q\\x0cm1w+\\xa3\\x1bs\\x98Q\\x16~]\\xa9\\xa9\\xe7u\\x8f\\xe6\\x85\\xf2\\xab\\xbe1\\xdd\\x14\\x89RE&\\xe8\\x12\\xee\\x89\\xfai\\xc7\\xcd\\xaf\\xbb\\x07\\x1c@\\x0eR',\n        constraints={'min_size': 42, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-93,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -1_506_108_637,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 3.8637400270863465e-56},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.6872186638526722},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 21},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 88},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.376838638361472e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.6729491297744757e+308,\n        constraints={'min_value': 0.5,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.781292688626332e+61},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0009ee26\ud861\udf05\ud861\udee5\ud861\udf43\ud861\udfb1\ud861\udef5\ud861\udf44\ud861\udf8b\ud861\udf9f\ud861\udf23\\U0009e410\ud861\udede\ud861\udef6\\U000364e3\ud861\udf37',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [165566,\n                  256833,\n                  630752,\n                  657945,\n                  897378,\n                  909002,\n                  1107091,\n                  1114110,\n                  1114111],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=9999,\n        constraints={'min_value': 7778,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-2.5550206478592164e+16,\n        constraints={'min_value': -5.95961986787895e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.19939361499482e-47},\n        was_forced=True,\n        index=None)),\n      length=-11191,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('c', 0, 1)),\n                                    (('a', 1, 0), ('b', 0, 1)),\n                                    (('a', 1, 3), ('c', 0, 1)),\n                                    (('a', 3, 0), ('c', 0, 1)),\n                                    (('b', 3, 0), ('b', 3, 0)),\n                                    (('b', 3, 0), ('c', 1, 0)),\n                                    (('c', 0, 3), ('a', 0, 2)),\n                                    (('c', 0, 3), ('a', 3, 1)),\n                                    (('c', 3, 2), ('c', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\\U000f4d5eR\u00b0',\n      has_discards=True,\n      target_observations={'\\x87b\\x97=\u00d1s\\t\\x13E\\U000ec818': 29713,\n       '\\x97': 0.5,\n       '\u00d2\u00c4\\U000add2f': -6_202_996_001_756_674_691_144_870_079_848_404_321,\n       '\\x89\\U000557e7\\U000c54790oeaV\\U00035499\u00fdn\u00c3\u00b1\u00ae': -67,\n       'FuzzProcess': -8.265149662920904e+183,\n       '\\x10\u00ec\u00aa\u00e0\u00aa\u00d2\u00c9I\\x19\\U000525e5\u00e4\\x197\u00f8\\x08': 300,\n       '': 2.2250738585e-313,\n       '\u00ba\\U00087d10=\u00a2\\x19\\U000d37ff&\\U000c2b51\\x0cXJ\\x0b\u00e9KH[b\\x08\\U00082e01': 74},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-20565, 22257),\n       (-7205, -125),\n       (-6483, 2498),\n       (-769, -76),\n       (-111, 20104),\n       (1000, 8192),\n       (18854, 467),\n       (24475, 20281),\n       (65535, -29470)},\n      slice_comments={(1024,\n        -20915): '\\x94\\x03\u00d0C\u00d5\ud842\ude61\\U0005f33f\u00e1\\x14\\U000ec4ee\u00d9\\U00080f79\u00e3'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=118, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=3.731318330517062e+307,\n        constraints={'min_value': 0.5,\n         'max_value': 4.563282854197797e+307,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.5},\n        was_forced=True,\n        index=None),),\n      length=29222,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('a', 1, 2)),\n                                    (('a', 3, 1), ('c', 0, 0)),\n                                    (('b', 3, 0), ('c', 3, 1)),\n                                    (('c', 1, 0), ('b', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'c\u00ac': 121,\n       '': 6_635_770_940_370_837_154,\n       'ZAl\u00c3': 3.0585495638479963e-158},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-15260,\n        -17879): '\\x067.\u00fa\u00a3\\U000456ab\u00a3\\U00098a32\\U00088493\u00ab$',\n       (-28270, 45): '\\U0005bf58C',\n       (23138, 10323): '\u00e6',\n       (-23567, -21717): '\u00ef\\U00089b1a0\\x98',\n       (-27492,\n        -1): '\\U0006c16a\\U000c6828g\u00c1\\x84\\x97\\U00078f9a\\U0004e151\\x90\\\\\\x07\\x90\\U0001cfc9\\U0007a45f\\U00067e282\u00b5\\U0009598eO`\\x8c',\n       (40, -7): 'undefined',\n       (97, 27809): '\\x140\\x03\\x12\\x96GkA\\x8e\u00f8'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1633045662072275555, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 6.103515625e-05},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-4.045870548289118e+16,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 2.225073858507203e-309},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-61_330_424_365_265_042_245_913_982_735_733_422_719,\n        constraints={'min_value': -61_330_424_365_265_042_245_913_982_735_733_479_313,\n         'max_value': 19,\n         'shrink_towards': 0,\n         'weights': {-61_330_424_365_265_042_245_913_982_735_733_422_719: 0.454480348393578}},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([49277, 187140, 330255, 995524, 1018283]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=-62,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 0),\n                                     ('a', 0, 2)),\n                                    (('a', 2, 3), ('b', 0, 0)),\n                                    (('c', 3, 2), ('c', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\u00d1\\t\\x9a\u00d2j\\U0009623e\\x9e',\n                     [ExceptionGroup('h!',\n                                     [UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('True',\n                                                     [ExceptionGroup('\\U0003d749\\U0010cd90',\n                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                         '\\x81\\U000da7c7\u00da',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                         '\\U000efac4O',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      ExceptionGroup('\u00b2\u00bf\\x060',\n                                                                                     [ExceptionGroup('7\\U000b04bf',\n                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                         \"'\\U0010762d$\u00bd\\U0004b122\u00a4\\U000d86b7\\x0e8\",\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      ExceptionGroup('\\U00086546\u00f3[l(\\x90\\U0004846f\\U00053a87\\x83\\x16\\x1dK\\U0004d319\u00d5',\n                                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                                         '',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                         b'',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                         b'',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      ExceptionGroup('\u00b4\u0501%\u00e4\u00a4',\n                                                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                                                         '\u00d2\\U000b6faa\\x88\\x7f\\U000a45d9HXp\\x01\ud86f\uddc2I\u6ab2\u00e0\u00d6*\u00b2\u00a1Z\\U0008431f\u00c51\u00fc\u00bd\\U000b78bb',\n                                                                                                                                                         0,\n                                                                                                                                                         0,\n                                                                                                                                                         'reason'),\n                                                                                                                                      UnicodeTranslateError('\\x16\u00ac',\n                                                                                                                                                            0,\n                                                                                                                                                            0,\n                                                                                                                                                            'reason'),\n                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                         b'',\n                                                                                                                                                         0,\n                                                                                                                                                         0,\n                                                                                                                                                         'reason'),\n                                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                                         'A\u00aa\\x17\u00d3\\U000d7a9d\\x7f\\x96\u00afc\\x15\u00c6u\\x0f\u00b5\\x8b#\\x0f',\n                                                                                                                                                         0,\n                                                                                                                                                         0,\n                                                                                                                                                         'reason'),\n                                                                                                                                      ExceptionGroup('\\U000a9d7c',\n                                                                                                                                                     [ExceptionGroup(')>!\ud100',\n                                                                                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                                                                                         'q\\x9d',\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         'reason'),\n                                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                         b'',\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         'reason')]),\n                                                                                                                                                      ExceptionGroup('\u00fe\\x1a)\u00e3\ud843\udf73\\x06\\xad\\U000a2990\u00aa\u00d0F\u00b8\\x1b=\\x10-',\n                                                                                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                         b'',\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         'reason'),\n                                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                                         b'',\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         0,\n                                                                                                                                                                                         'reason')]),\n                                                                                                                                                      ExceptionGroup('\\x1b\\U000512e9\u00aa\u00df\\U00014f79!\\U0007b512I',\n                                                                                                                                                                     [UnicodeTranslateError('\u00ba\\x11\\U000529c1',\n                                                                                                                                                                                            0,\n                                                                                                                                                                                            0,\n                                                                                                                                                                                            'reason'),\n                                                                                                                                                                      UnicodeTranslateError('',\n                                                                                                                                                                                            0,\n                                                                                                                                                                                            0,\n                                                                                                                                                                                            'reason')])])]),\n                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                         b'',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason')])]),\n                                                                                      UnicodeTranslateError('\\U000c7ad4',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                         '\u00f0\\x9b\\x0c\u00d2\u00d0Y',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason')])]),\n                                                      UnicodeTranslateError('\u00d8\u00ec\u00d1c\\U000c16ea',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '\u00d1',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')]),\n                                      UnicodeTranslateError('\u00e5\\x9a\u00fa',\n                                                            0,\n                                                            0,\n                                                            'reason')]),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\u00e3\u00e7\u00b1',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\t\u00b4Y\\x1f': 26399},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-7_639_282_936_761_872_706, -863_983_712_772_849_558),\n       (-1_014_145_241, 909720602),\n       (-30562, -94),\n       (-28648, -18432),\n       (-28363, 9097),\n       (-15953, -44),\n       (-11195, -28366),\n       (-9573, 109),\n       (-83, -4),\n       (-58, -15268),\n       (-27, 1209),\n       (43, 18350),\n       (48, 76),\n       (48, 16582),\n       (1000, 1024),\n       (7370, -845538313),\n       (25218, -27561),\n       (151_147_529_819_250_955_289_301_801_758_469_454_060, -4505)},\n      slice_comments={(-4341, -29333): '',\n       (28925, 90): '\u00b2;2\u00ce\\x92a',\n       (1_540_148_010, -1_586_190_540): '',\n       (1000, 120): '\\U000ada9b',\n       (-68, 118): '\\U000ebd9d(s'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=7777, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\ud885\ude08\ud885\ude3e\ud885\uddd3\ud885\ude7d\ud885\ude83\ud885\ude36\ud885\ude2f\ud885\ude1b\ud885\ude7e\ud885\ude2f\ud885\uddc1\\U0003d88b\ud885\ude71\ud885\ude5a\ud885\ude4b\ud885\uddfa\ud885\udddb\ud885\ude75\ud885\ude05\ud885\uddf1\ud885\ude8d\ud885\ude63\ud885\udda8\ud885\ude87\\U000d737b\ud885\ude88\ud885\uddda\ud885\ude3c\ud885\udde1\ud885\ude51\ud885\ude0f\ud885\uddff\\U00064b37\ud885\ude93\ud885\ude50\ud885\uddc9\\U000c3a0a\ud885\ude1e\\U0005fb5a\\U000835d3\ud885\ude98\ud885\udddb\ud885\uddcc\\U0007322f\\U00055ece\ud885\uddd3\ud885\uddb0\ud885\ude29\ud885\ude77\ud885\ude6a\ud885\uddee\ud885\ude1a\ud885\udea3\ud885\uddec\ud885\ude7f\ud885\ude65\\U00053906\ud885\ude9b\ud885\ude3e\\U000d8c25\ud885\uddf9\ud885\ude41\ud885\ude00\ud885\uddf9\ud885\ude1b\ud885\ude62\ud885\ude46\ud885\ude9c\ud885\udde0\ud885\uddd4\\U0004ce22\ud885\ude96\ud885\ude25\ud885\uddc0\ud885\udde3\ud885\ude93\ud885\udde3\ud885\ude1a\ud885\ude29\ud885\udde8\ud885\ude0c\ud885\uddf2\\U000b03dc\ud885\ude82',\n        constraints={'intervals': IntervalSet(\n             build_intervals([202152, 937337]),\n         ), 'min_size': 37, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': -1.2846616742519048e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.464685686901816e+307},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'_o~%\\xc5\\xca\\xb1\\x12\\x80\\xa5\\xb7\\x82\\xce\\r\\xa9\\xc8\\x9c$un',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.05},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0006ce57\\U00051277\u24e3\u24bb\u2510\u24e5\\U00084c45\\U00073724',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [9389, 42240, 305309, 557062, 621190, 654908, 887654],\n             ),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000b68d1\u277a\u2774\\U000a633b\u27ac\u27f7\u27d2\u27f7\ubade\u275b\u2763\u27f5\u2782\u2786\\U000b103b\\U000b22cc\u27a9\u27ad\\U000b3727\u2715\u27f9\u276d\u271a\u2744\u2787\u2731\u2732\u36c6\u27e4\u2723\u272d\u2759\u280d\u85b8\\U000adfc3\u27f9\\U000a0dd9\\U000c9de6\u27b8\u27cc\u2720\u27d3\\U000a35c7\u279f\\U000c6dcf\u280c\u274a\u2807\u2729\u2756\u2748\u277b\u2733\u2761\\U000d20a9\u27ce\\U000a56c3\u2719\\U000a81fb\u27a2\\U000cc08a\u2786',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [9999, 59426, 653179, 762946, 778335, 868241, 907747],\n             ),\n         ), 'min_size': 46, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.6354892135136113},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=7836,\n        constraints={'min_value': 5921,\n         'max_value': 16908,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xec\\x97\\xc3N\\xbb\\x07\\xf2m\\xd1\\xe5\\xac\\xa0:.\\x08S$\\x0c',\n        constraints={'min_size': 13, 'max_size': 113},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud86b\udc7d\ud86b\udc60\ud86b\udc39\ud86b\udcc2\ud86a\udfe0\\U00106ad3\ud86b\udc22\ud86b\udc47\ud86b\udc2e\ud86b\udc33\ud86b\udca6\ud86b\udc4e\ud86b\udc60\ud86b\udc0d\ud86b\udc86\ud86b\udca5\ud86b\udc76\ud86b\udc75\ud86b\udc54\ud86b\udc16\\U00057142\ud86a\udff4\ud86a\udfe1\\U000ea605\ud86b\udc61\ud86b\udca9\ud86b\udc05\ud86b\udc6b\ud86b\udc51\ud86a\udff1\ud86b\udcb2\ud86b\udcc8\\U0008c982\\U000b518e\ud86b\udc27\ud86b\udcb4\ud86b\udcd3\\U000b5acd\ud86b\udc26\ud86b\udc1e\\U000e9420\ud86b\udc63\ud86a\udfec\ud86b\udc09\ud86b\udc4f\ud86b\udca8\ud86b\udc41\\U000a13ca\ud86b\udcbf',\n        constraints={'intervals': IntervalSet(\n             build_intervals([175060, 1114110]),\n         ), 'min_size': 25, 'max_size': 125},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=5_009_242_783_121_479_603_725_877_164_611_883_404,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8702025647131113},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000a0da8',\n        constraints={'intervals': IntervalSet(\n             build_intervals([658687, 719838, 1114111]),\n         ), 'min_size': 1, 'max_size': 101},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1.189686171393913e-182},\n        was_forced=False,\n        index=None)),\n      length=-4713,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 0, 1),\n                                     ('b', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'': 94,\n       '\u00d3\u00f3\u00d9|\u00e3J\\x8b4': 8272174783918088.0,\n       '\\\\\u00e0\\x84\u00c2\u00bb\\x10\\x85\u00d1\uab9aI\\U000913b7\\U000642ab\u00ac\\U00065418R': -1_346_670_141,\n       'w': -17942,\n       '\u00aaI\\x7f}\\U00069528\\U000c596e': -2.4573817759489864e+16,\n       '\\x83': -6.073011614984046e+16,\n       'l\\x15Z\\x9e': -58},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-20626, 9198), (-2320, 4017), (-46, 9484), (3352, 47)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=15038, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'[KhW\\xce\\xcbxd\\xf3\\xf0\\xb9!\\x19\\xa3\\xce\\xc0\\xf7\\xc8#7\\xa7',\n        constraints={'min_size': 21, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xfa\\x8d\\xea\\xc5\\xf7\\xb8\\xfd',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-26504,\n        constraints={'min_value': None,\n         'max_value': 10131,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u022e\u0210\u01ef\\U00044310\\udbb5\u01db\u0204\u020c\u0200\u0260\u01db\u019d\u0228\\U000dd41c\u0229\u0227\\U000b7b2e\u0242\u01d2\u028c\u0202\\U0004117e\u0276\u01a2\u025d\u022e\u027c',\n        constraints={'intervals': IntervalSet(\n             build_intervals([404, 353309, 626783, 770409, 848616, 1114111]),\n         ), 'min_size': 18, 'max_size': 118},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0006e4c2\\U0006e4b7\\U0006e517\\U000ab8a4\\U0006e492\\U0006e48f\\U0006e4da\\U0006e526\\U0006e526\\U0006e46a\\U000d099a\\U0006e4ff\\U0006e481\\U000a7e22\\U0006e44a\\U0006e4bb\\U0006e4c6\\U0006e503\\U0006e50b\\U0006e444\\U0006e4cc\\U0006e473\\U0006e43f\\U0006e531\\U0006e4bc\\U0006e446\\U0006e520\\U0006e4a9\\U0008cf11\\U0006e50c\\U000b9266\\U000853c0\\U0006e4d1\\U000964e1\\U0006e46b\\U0006e44d\\U0006e455\\U000d1042\\U0006e4a0\\U0006e537\\U0006e4ef\\U0006e527\\U0006e4e5\\U0006e491\\U0006e511\\U0006e4a1\\U0006e471\\U00079f2c\\U0006e441\\U0006e4ec\\U0006e456\\U0006e4a7\\U0006e4e0\\U0006e4a5\\U0006e52c\\U0006e47b\\U0006e47b\\U0006e4b2\\U0006e4fd\\U0006e4c1\\U0006e516\\U0006e513\\U0006e521\\U0006e51b\\U0006e537\\U0006e50f\\U000a3b30\\U0006e4fc\\U0006e497\\U0006e445\\U0006e512\\U0006e4b0\\U0006e44c',\n        constraints={'intervals': IntervalSet(\n             build_intervals([451645, 874265]),\n         ), 'min_size': 40, 'max_size': 140},\n        was_forced=False,\n        index=None)),\n      length=-33,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('b', 1, 0)),\n                                    (('b', 3, 0), ('c', 0, 1)),\n                                    (('c', 2, 3), ('b', 1, 1)),\n                                    (('c', 2, 3), ('c', 3, 2)),\n                                    (('c', 3, 0), ('c', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\U000ef058W',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'': -28498},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(9981, -32053)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-11954, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-2.3603152001495956e+16,\n        constraints={'min_value': -2.375778849609271e+16,\n         'max_value': 2.2250738585072014e-308,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.323548062573789e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-13702,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': -7.400868870556352e-63,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.983457468692048e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.4174590435064399},\n        was_forced=False,\n        index=None)),\n      length=1000,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 1),\n                                     ('a', 0, 0)),\n                                    (('b', 0, 2), ('c', 0, 1)),\n                                    (('b', 1, 3), ('b', 0, 3)),\n                                    (('b', 3, 0), ('b', 2, 0)),\n                                    (('c', 1, 0), ('c', 2, 0)),\n                                    (('c', 1, 0), ('c', 3, 1)),\n                                    (('c', 3, 1), ('a', 2, 3)),\n                                    (('c', 3, 1), ('c', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\x985\\U000996a0\u00cc[,',\n                     [UnicodeEncodeError('unknown encoding',\n                                         'X\u00b0A \u00d5`',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='\u00c5\\x13\\x9a(\u00ae\u00f7\u00ab\u00d8\\x11\u00cfe\u00a2x`|\\\\',\n      has_discards=True,\n      target_observations={'\\x9c\\U0004afe9': 25790,\n       '\u88ae\u00c3\\x18ll\u00f9\\x12\\U00043677M}8\u00e0\\U000bb18d': -2.680340758758348e+16,\n       '\\x8a\\x97\\x02\u00ae\u5a52(\\x05': -17817,\n       '\u00a7\\x19': 1.0983303359539636e+16,\n       '\\x8c\u00f7': 8.01557020695676e+295,\n       '\\U0006781a\u00d7': 1_100_435_537_867_248_584,\n       '': 904281586,\n       '\\U000af2bb.': 15878,\n       '\u00b4\u00c3\\U000bb060\u00a5\u00a5l\\x16k\u00f1\u00cc\\x01\\x18': 1024,\n       '\u00c1\\U000d14a4\\U00036d94': 3_342_702_445_543_648_092,\n       '\ud835\udd7f\ud835\udd8d\ud835\udd8a \ud835\udd96\ud835\udd9a\ud835\udd8e\ud835\udd88\ud835\udd90 \ud835\udd87\ud835\udd97\ud835\udd94\ud835\udd9c\ud835\udd93 \ud835\udd8b\ud835\udd94\ud835\udd9d \ud835\udd8f\ud835\udd9a\ud835\udd92\ud835\udd95\ud835\udd98 \ud835\udd94\ud835\udd9b\ud835\udd8a\ud835\udd97 \ud835\udd99\ud835\udd8d\ud835\udd8a \ud835\udd91\ud835\udd86\ud835\udd9f\ud835\udd9e \ud835\udd89\ud835\udd94\ud835\udd8c': 2.6027618588952304e+16,\n       '\u00b1\u00a2': -364864196,\n       'N\\U000ab4ec\u00f7\u00a9g\u00eb': -112,\n       '\u00a4\\x00\u00e1y^\\x97\u00e0': -1.1982836142368595e-232,\n       '\\U000a939d\u00f6\u00db\u00a1': 5.112530840811552e-207,\n       's\\x1c': 2.3544633528324407e+233,\n       '\\U0010f7c4\\x12\\x95\\x9b\\x85\\U000139ca\u00b7\ud850\ude39A': 512},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_518_638_954, 30396),\n       (-29657, 25732),\n       (-8648, 28763),\n       (-62, -12209),\n       (29315, -18967),\n       (98_188_987_775_841_462_571_933_837_026_750_124_677, -6824)},\n      slice_comments={(1963, -112): '\u00d2M\\x08\u00ffl\u00df)\\U0010bf69X\ud852\udc75\\U000835f4\u00b1\u00a1',\n       (-4916, 77): '',\n       (9980, 65535): '$\\\\1\\U000a2cfe\u00c7\\x9a\u00cf',\n       (-70, -116): '\u00f6\u00b5F',\n       (-100, 5_568_386_195_653_691_583): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x106d0c800>, min_size=0, max_size=inf).map(tuple), length=one_of(nothing(), nothing(), integers()), has_discards=one_of(nothing(), nothing(), booleans()), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason')))), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text()))).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from integers(0, 1114111).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.014065499999560416,
          "overall:gc": 6.125000072643161e-05,
          "generate:args": 0.14883791870670393
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 2,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 2,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878960.072948
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.80410079844296e-05,
          "overall:gc": 0.0,
          "generate:args": 3.554200520738959e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878931.837166
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=2645, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xe1P`\\x14F\\x86\\xf91\\xd9\\xe6m',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),),\n      length=-31912,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('c', 0, 0)),\n                                    (('a', 1, 1), ('c', 2, 1)),\n                                    (('a', 1, 2), ('b', 2, 0)),\n                                    (('a', 1, 2), ('c', 0, 1)),\n                                    (('a', 3, 1), ('c', 1, 0)),\n                                    (('b', 1, 0), ('b', 2, 1)),\n                                    (('b', 1, 0), ('c', 1, 3)),\n                                    (('b', 2, 0), ('b', 2, 0)),\n                                    (('b', 2, 2), ('a', 3, 2)),\n                                    (('c', 0, 0), ('a', 3, 1)),\n                                    (('c', 0, 0), ('c', 2, 3)),\n                                    (('c', 0, 1), ('a', 2, 1)),\n                                    (('c', 0, 1), ('c', 2, 3)),\n                                    (('c', 1, 1), ('a', 0, 1)),\n                                    (('c', 2, 1), ('c', 1, 1)),\n                                    (('c', 2, 2), ('b', 0, 3)),\n                                    (('c', 2, 2), ('b', 1, 1)),\n                                    (('c', 3, 1), ('b', 2, 0)),\n                                    (('c', 3, 1), ('c', 2, 3)),\n                                    (('c', 3, 3), ('a', 3, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\u2615\u00d0C',\n                     [UnicodeEncodeError('unknown encoding',\n                                         '\u00e89\u00d8\\U0009a792',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('\u00ef\\U000c07e6!K\u00e2', 0, 0, 'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         ':\\U000b2700\\x17\\U0003e0c0\\U000812d3\\x8e\\U00102c38\\x95',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='\u00feI\\U000d5253\\x97\\U000a646a\\U0006799f\u00faA\\x80\u00f4',\n      has_discards=False,\n      target_observations={'\\x98h\u00b7': -8_875_805_312_020_110,\n       '\\U000a3cac`\u00a2\u00bf\\U000f626fm\\x0fb': inf,\n       '\\x0b\\U0006f69f&\\x83\\x9cC\u00bc\u00dd\u00be\\x84\\x1aC\u00af\\x852': -72,\n       '\u00ef\u00fb\u00df\\U00037955\\x8b\u00f8U': 1_127_434_930},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-92_005_255_542_603_333_889_531_084_104_718_728_698, 13658),\n       (-1_510_318_955, -273477042),\n       (-32125, 19),\n       (-28956, 15),\n       (-23898, -12379),\n       (-21074, 12),\n       (-2074, 9),\n       (9802, -5350),\n       (9999, -27048),\n       (20188, -98),\n       (65535, 12239),\n       (1_861_887_417, -8806)},\n      slice_comments={(27453, -27): '\\x05\\U00053c39',\n       (-1008, 637): '2\\U000911d5\ud85a\udd8f',\n       (-55, -29898): '\\U000f7915\u00cfLC\\x00\\x9b',\n       (-48, 325386539): 'jn8&\u00ae\u00a5\u00ed\u00be\\U0009ede2\u00a3p`\u00b5\\x89\u00d9\u00f3\u00c3\\x97\u00fa]\u00aa',\n       (-1_198_099_765, 99): 'x\u00d2\u00aeI\\U000b19acd\u00d5\\x1c^\\U0010bf06\u00b2\ud84f\udfa5'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=14019, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.932440615820328},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xfe8\\xef\\xd5\\x1a\\x0fk\\x90\\xc5\\xf2Tv\\x10\\x01\\x0c\\xdc\\xb6F\\xa1x\\x16\\x8b\\x1d)\\xf1\\xf3\\xc6\\x1a\\x85U\\xe4',\n        constraints={'min_size': 11, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=4.875809822472305e+306,\n        constraints={'min_value': -2.3564401143157988e-222,\n         'max_value': 7.992395841246015e+306,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 4.875809822472305e+306},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.43958170078170256},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.776815712508278e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.41568441603490525},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([1000, 82118, 246924, 351478, 882949]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000ba8e4\\U0007819e\\U000b1e5a\\U0007821c\\U00078244\\U000781bc\\U000781b5\\U00078272\\U00078220\\U00078264\\U000781fc\\U000781f8\\U00078231\\U000781b8\\U000781ca\\U00078206\\U000781e8\\U000781b0\\U000d556e\\U000781b0\\U000873f0\\U000b4318\\U0007823e\\U000781ac\\U000b01f3\\U000af1a1\\U0007820f',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [491910, 565135, 662534, 776087, 839495, 907650, 1107854],\n             ),\n         ), 'min_size': 18, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=7.574286571394929e+306,\n        constraints={'min_value': -2.934403445208585e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.5272457691850824e+122},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud876\udcb9\ud876\udcb4\ud876\udc9f\ud876\udc85\ud876\udc83\ud876\udc36\ud876\udc5f\ud876\udcf9\ud876\udcb9',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [186365,\n                  264461,\n                  301353,\n                  324127,\n                  445439,\n                  573640,\n                  749611,\n                  880074],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=False,\n        index=None)),\n      length=-10793,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 1),\n                                     ('b', 1, 0)),\n                                    (('a', 3, 2), ('b', 3, 2)),\n                                    (('b', 0, 2), ('c', 3, 3)),\n                                    (('b', 0, 3), ('a', 0, 0)),\n                                    (('b', 1, 1), ('c', 2, 2)),\n                                    (('b', 1, 2), ('a', 1, 2)),\n                                    (('b', 2, 0), ('a', 1, 3)),\n                                    (('c', 0, 0), ('b', 3, 0)),\n                                    (('c', 0, 3), ('b', 3, 2)),\n                                    (('c', 1, 3), ('b', 0, 1)),\n                                    (('c', 1, 3), ('c', 3, 1)),\n                                    (('c', 3, 2), ('c', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\u00a8\\U000b1c7f\u00c1\u00d5\u00d7_\u00bb',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\\x8f': -1.0661669136427744e+179,\n       '': -7_111_506_257_544_018_549,\n       'Y\u00c2A\\xad': -1_781_244_469,\n       '\\U000383ae\"\\x81a\u00b4': -25422,\n       '&J\\U00087d55\\U0009da0b': -5.863136283750046e+16,\n       '\\U000998ec\\x1a\\x11\\U000ad3cd': 5.10825051980066e+49,\n       'U': 6.1139946921688574e+85,\n       '\\\\\\U00101a87\u00f0\\U0009fade.\\x9a\\U000db161': -3.582079607785672e+41,\n       '\ud858\udfd8\\U0004d9e1\u00f9\\xad\u00cc\u00e7\u00a2v': -32723,\n       'O>\\x08b\u00d8T': -19_220_862_618_085_745_648_493_259_286_445_154_094,\n       '\u00ebm{\\x1f\u00f9\u00d6\\x02\\U000b88d3\u00e49\u00c7\ud876\udde7': -6.852769661314859e+284,\n       '\\U0008d89c\u00c2\\U000b360c\\U00043568\u00ee\\U000a037e\u00c1\\x17\u00cbY\\U000357c6\u00a9\\U000c3afc:': -58,\n       '\u00d7\\x1a': 569,\n       '~a\\U000fe297\\U000e6805WE\u00f5': 64,\n       '\u00c9\\x85\u00f0\u00a8#\\x9f\\U0003b47a\\x1c@:\\U00063e3b\u00d00\u00a9\\x82\\x94oJ\\xa0': 0.5,\n       '\u00ac': -7.002702627516517e+16,\n       '\\x93\\U000947b4': 9.394500804244942e+185},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-11235, 37_802_425_687_764_388_929_554_201_880_582_204_768),\n       (104, 29448)},\n      slice_comments={(-1_300_490_796,\n        -5492): '\u03a9\u2248\u00e7\u221a\u222b\u02dc\u00b5\u2264\u2265\u00f7\u00e5\u00df\u2202\u0192\u00a9\u02d9\u2206\u02da\u00ac\u2026\u00e6\u0153\u2211\u00b4\u00ae\u2020\u00a5\u00a8\u02c6\u00f8\u03c0\u201c\u2018\u00a1\u2122\u00a3\u00a2\u221e\u00a7\u00b6\u2022\u00aa\u00ba\u2013\u2260\u00b8\u02db\u00c7\u25ca\u0131\u02dc\u00c2\u00af\u02d8\u00bf\u00c5\u00cd\u00ce\u00cf\u02dd\u00d3\u00d4\\uf8ff\u00d2\u00da\u00c6\u2603\u0152\u201e\u00b4\u2030\u02c7\u00c1\u00a8\u02c6\u00d8\u220f\u201d\u2019`\u2044\u20ac\u2039\u203a\ufb01\ufb02\u2021\u00b0\u00b7\u201a\u2014\u00b1'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=77, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'a\\ths\\xaa\\xef\\x95\\xb4\\xa3\\xcc\\xf5>q\\x00K\\xee\\x9b-\\x97C\\xabB!\\xdf\\xe0\\x9a\\x13+\\x80\\xfe\\x8a\\x0bS2\\x0e\\x1eb\\xb7\\xec\\x03\\xcf{\\x8c\\xe1\\x98\\xcd\\xa4g',\n        constraints={'min_size': 43, 'max_size': 66},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=27111,\n        constraints={'min_value': -8915,\n         'max_value': None,\n         'shrink_towards': -9756,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([4941, 431758, 530676, 588436, 1106153]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u0282\u0287\u0235\u0234\u020a\u01b6\u01f9\u01fd\u01e7\u01df\u01d6\u01c9\u01cc\u024e\u026c\u01f9\u01fe\u024f\u0267\u022b\u0224\u01d8\u027c\u023d\\U000791d4\u0232\u01d2\u01bf\u01ce\u020f',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [404,\n                  183965,\n                  195653,\n                  237945,\n                  394498,\n                  440634,\n                  493933,\n                  562887,\n                  917008,\n                  959550,\n                  1047673],\n             ),\n         ),\n         'min_size': 18,\n         'max_size': 118},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=26013,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.11247511072379293},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.867498558985814e+242,\n        constraints={'min_value': -2.1109893342080986e-225,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.743303252578782e+16},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=6.699281118298807e+306,\n        constraints={'min_value': 1.6872353613459935e+100,\n         'max_value': 6.564067526689643e+307,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 4.744711004724367e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u7bb4\u7b53\u7b68\u7b90\u7bf2\u7b57\u7bb6\u7b51\u7b3b\u7bf6\u7b17',\n        constraints={'intervals': IntervalSet(\n             build_intervals([31503, 719403])),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8855459547930458},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([7526, 243697, 408494, 781955]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-13758,\n        constraints={'min_value': None,\n         'max_value': -13651,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=817819733,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('a', 3, 3)),\n                                    (('a', 1, 0), ('a', 1, 1)),\n                                    (('a', 1, 2), ('c', 3, 2)),\n                                    (('a', 2, 1), ('c', 3, 2)),\n                                    (('b', 1, 3), ('c', 3, 2)),\n                                    (('c', 0, 0), ('b', 1, 1)),\n                                    (('c', 0, 0), ('b', 3, 3)),\n                                    (('c', 0, 2), ('c', 1, 0)),\n                                    (('c', 0, 2), ('c', 3, 3)),\n                                    (('c', 3, 3), ('a', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('7\u08a4\\x1f', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\n$': 125},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-30225, 39)},\n      slice_comments={(-6811, 25331): '\u00be\\x19x\u00e1',\n       (9337, 1): '3\u00e7\\x9c\\xa0\\x13\\U000bbd42a\\U0009f5e9\u00f1',\n       (1024, -14579): '\u00d2',\n       (22270,\n        79): '9 >\\U000fdec7\u00e6y\u00d3\\U000b7607vy\u00c5\u00f0\u00ee\u00d8D\u00e9n\u00d8\\U0010b2e3\u00cc\u00f6\\x95\\x96\\x9f\u00d3\\U000c8fde'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-30850, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-748993970,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 29951,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\uc66d\uc6f8\uc62d\uc63e\uc701\\U0007093d\uc6c3\uc6ed\uc640\uc657\uc6a2\uc6f3\uc6d4\uc6c7\uc64f\uc6e3\uc6de\\U0006c95f\uc6fa\\U00033286\uc60e\uc6a2\uc6f3\uc6e5\uc6f9\uc665\\U000494fd\\U0005299f\\U000141da\uc60e\uc650\uc694\uc638\uc67e\\U0003d05d\\U0003afc9\uc6a4\uc637\uc6ca\\U00049168\uc63a\ud858\udf25\\U000709d2\uc64c\uc62b\uc61a\uc60a\uc61f\uc667\uc6ab\uc6f2',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [50694, 102684, 139531, 366975, 408049, 466358, 1095625],\n             ),\n         ), 'min_size': 33, 'max_size': 133},\n        was_forced=False,\n        index=None)),\n      length=25978,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('a', 2, 0)),\n                                    (('b', 0, 2), ('a', 0, 2)),\n                                    (('c', 0, 2), ('b', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         'status_counts',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'4\\x17I\\U000aef025\u00cd\u00db\\U0003f7a0{\u00cc\\U00105360\\U000385b5\u00ba\u00d7\u00d3\u00ce\ud86f\udcc2\\x14\\xad': -4.5370489452197785e-299,\n       '\\U000ca5cc\\U00080c35\u00c6\\U00094c32\u00c9\\x14\\x9c\\U0010d279\\U00037815': -6.64784958035361e-268,\n       '\u00f2\\U0007af1eJ\u00ae\u00c0\u00d5X': -6.016160614541462e+16,\n       '\"+\ud853\udd5bA\\U00059cbd': 1.9552995904928963e+146,\n       '': 0.0,\n       'teardown': -4.218382596509078e+16,\n       '\\U000a037a\\x8aq\u00ee\\U00094154LcG\\x9a\\x90\\U00019d8f\\U00034f14\\x86\\U0009ed61\u00c9\\x98': 6.366247510833365e+16,\n       '\\U000c6ea9\\x80': 9.605767979273942e+94,\n       '\\x06O\u00df\u00a6': 6093,\n       '\\\\\\U0009f52a': 1511,\n       'c\\U0001e3e1\\\\Z\\U00035b98`;': -69,\n       '\u00a9\u00b8\u00ae': -83},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(124, -7563),\n       (11691, -57),\n       (474_364_601_183_036_980, 12358)},\n      slice_comments={(-73, 19133): '\u00beU\u00e4\u00cf\\x13\\x81\u00ef\\U0008e051\u00d9\u00d5\\x13',\n       (-142_732_488_426_458_152_084_714_053_371_448_542_260,\n        12507): '\u00b2\\U000fc588\u00d4\\x1a\\x80\\x1e',\n       (-24976, -91): '\u00b0Z\u00bc\u00f4\u00c0\u00ef\\x80\\x13\u00ee6p',\n       (1000, -23): 'A\u00be\\U0010f60e.q',\n       (-7294, 16): 'P\u00b6',\n       (5405, 9999): '\\U001074ff;x\u00e2tk',\n       (-21446, -19364): '',\n       (-1707,\n        5_472_628_562_603_112_676): '\u00c1a\u00e3\\U0005071fM\\U000a836d\\x1d\\U000d985e\\x8fut\u00cc#\\U00067e70'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.011039083008654416,
          "overall:gc": 0.0,
          "generate:args": 0.047725583775900304
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878958.570077
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "",
        "representation": "",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from integers(0, 1114111).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {},
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 4,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 4,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878915.50847
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=22, context=(), group_elems=()),\n      nodes=(),\n      length=8192,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('b', 0, 0)),\n                                    (('a', 1, 3), ('a', 1, 1)),\n                                    (('a', 2, 3), ('c', 3, 2)),\n                                    (('b', 0, 3), ('b', 2, 0)),\n                                    (('b', 3, 1), ('a', 0, 0)),\n                                    (('c', 1, 0), ('b', 0, 0)),\n                                    (('c', 3, 0), ('c', 0, 2)),\n                                    (('c', 3, 2), ('b', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\x9bys',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\u023a',\n      has_discards=False,\n      target_observations={'5O': -4.572534211511239e+120,\n       '\u00bb\\U0009094b\u00ce\\x01\\U0007f723': 1.192092896e-07,\n       ',./;\\'[]\\\\-=<>?:\"{}|_+!@#$%^&*()`~': 4693,\n       '\u00aeD>\\U000dc8b7\u00ce\\U0006434c+\\x95\u00c83\u00c1\\U000e785d\u00b0#\"\\U0002f709\u00b2': 1.192092896e-07,\n       '\u00ba\\U00051113OI\\U0008a117\u00e2`': -9.336061254487301e-79,\n       '': -7.80021843471141e-130},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-23401, -110), (-10548, 24153)},\n      slice_comments={(65535, 21861): '',\n       (7863, -6240): '\ufbaf\\U000c83bd\\x13\\U0006b117\\U000ee686',\n       (95, 28849): '\\x1b\\U000ade8c',\n       (464, -47): '\\x9cM,\u00b7\ucf47Q\ud84a\udf20\\x94\\x06\u00a5f?p\\U000c2e31b',\n       (-1_724_897_428_085_069_848, -42): \"'\\U00072da7\\U00019ec6\u00da\",\n       (-23_956_281_700_757_825_847_859_202_295_705_208_332,\n        4_531_259_540_142_926_300): '\\x92'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-32033, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [43586,\n                  140463,\n                  287630,\n                  296944,\n                  353806,\n                  417781,\n                  505706,\n                  535693,\n                  641105,\n                  684326,\n                  704391,\n                  834547,\n                  884073,\n                  916120],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=False,\n        index=None),),\n      length=-10890,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 2),\n                                     ('c', 2, 3)),\n                                    (('b', 3, 3), ('b', 0, 3)),\n                                    (('c', 0, 3), ('b', 0, 2)),\n                                    (('c', 3, 2), ('a', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('',\n                     [ExceptionGroup('t?\u00fdZM\\U0005010e\u00f9\\xa0\u00ba\u00de\u00b1\\U0002f38f\\x00\\x80',\n                                     [UnicodeEncodeError('unknown encoding',\n                                                         '\u00f4',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError('\\U0003dfe1I\u1706@\\U00069674\u00d9#\\x1f\\U000751b8z\\x07\\x0b\\x01',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         'x\\\\\\U000f4656\\x05\u00dc\\U00069fd5\u00c7S',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('\\U00011e0d\\x1f\\x1c',\n                                                     [ExceptionGroup('\\x11Q\\x1bx',\n                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                         '8\\U000f823a@\u00f2k\\x15',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      ExceptionGroup('\\U0004001b\u00f3\u00c5\\x1d\\x9fT\u00e7\\x99u\\x02\u00d5\\x15\u00df\\x02t\u00d3~\u00f3',\n                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason')]),\n                                                                      ExceptionGroup('\\x14h\u00de\\U000d9ff3\u00ac',\n                                                                                     [UnicodeTranslateError('\\U0001437e\u00bf4\\x80y\\x10',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason')]),\n                                                                      ExceptionGroup('\\U0001ef17\\x1e\\x8c\\t',\n                                                                                     [ExceptionGroup('\u00ff\u00dc',\n                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      ExceptionGroup('J ',\n                                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                                         b'',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      ExceptionGroup('',\n                                                                                                                                     [UnicodeTranslateError('\u00e2\u00a9\\nL',\n                                                                                                                                                            0,\n                                                                                                                                                            0,\n                                                                                                                                                            'reason'),\n                                                                                                                                      ExceptionGroup('initial_type',\n                                                                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                                                                         '\ud867\udf34',\n                                                                                                                                                                         0,\n                                                                                                                                                                         0,\n                                                                                                                                                                         'reason'),\n                                                                                                                                                      UnicodeTranslateError('',\n                                                                                                                                                                            0,\n                                                                                                                                                                            0,\n                                                                                                                                                                            'reason')]),\n                                                                                                                                      UnicodeTranslateError('\\x83',\n                                                                                                                                                            0,\n                                                                                                                                                            0,\n                                                                                                                                                            'reason'),\n                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                         b'',\n                                                                                                                                                         0,\n                                                                                                                                                         0,\n                                                                                                                                                         'reason'),\n                                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                                         'text/x-patch',\n                                                                                                                                                         0,\n                                                                                                                                                         0,\n                                                                                                                                                         'reason')]),\n                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                         '\\U0010ec61\\U000d7906\u00d4',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason')]),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         '\\U000b27dd\\x89',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         '',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         '\\x90',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason')]),\n                                                                                      ExceptionGroup('c\\x08x\\x84',\n                                                                                                     [UnicodeTranslateError('U',\n                                                                                                                            0,\n                                                                                                                            0,\n                                                                                                                            'reason')]),\n                                                                                      ExceptionGroup('',\n                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         'NUL',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         '',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      ExceptionGroup('\\x7f6',\n                                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                                         '[\u00a8R\\U000ae03a',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      ExceptionGroup('\u00b6&e#\u00b2',\n                                                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                                                         b'',\n                                                                                                                                                         0,\n                                                                                                                                                         0,\n                                                                                                                                                         'reason')])])]),\n                                                                                      UnicodeTranslateError('',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      ExceptionGroup('\u00ec;Z\\x94\u00aa\u00b8\u00be',\n                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                         'Q\u00a9\u00bd\\x01\\U000a4fe6\\U000e8d2f\u00e9{\u00aa',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         '',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                         b'',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      ExceptionGroup('\\U0005786b\u00fcQ\\U00054054\u00d7(\u00a4\u00ddE>#=y\ud860\udcf5\u00abG\\x01\\x18d\\x18\u00a6k\u00ce\\x9c\\x0b',\n                                                                                                                     [ExceptionGroup('\\x85H\u00f0&@g',\n                                                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                                                         b'',\n                                                                                                                                                         0,\n                                                                                                                                                         0,\n                                                                                                                                                         'reason'),\n                                                                                                                                      ExceptionGroup('\\x0fske\\x19\u00a1\\x90W\u00f3:\ub8c0',\n                                                                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                                                                         '\\U0010dc15\\U0006c317\\U00012702V\u00a5\\x1b\u00c3\u00f6\\x9f\\x8c\u00a7',\n                                                                                                                                                                         0,\n                                                                                                                                                                         0,\n                                                                                                                                                                         'reason'),\n                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                         b'',\n                                                                                                                                                                         0,\n                                                                                                                                                                         0,\n                                                                                                                                                                         'reason'),\n                                                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                                                         '<\"\\U000f8116\\U000955f5\\x87F\\U000e58ac\u00a4\u00b5\\U000d97b9\u00ae\\U0003ab8a\\xa0R\u00b7b',\n                                                                                                                                                                         0,\n                                                                                                                                                                         0,\n                                                                                                                                                                         'reason'),\n                                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                                         b'',\n                                                                                                                                                                         0,\n                                                                                                                                                                         0,\n                                                                                                                                                                         'reason')]),\n                                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                                         b'',\n                                                                                                                                                         0,\n                                                                                                                                                         0,\n                                                                                                                                                         'reason')]),\n                                                                                                                      UnicodeTranslateError('\\x9b',\n                                                                                                                                            0,\n                                                                                                                                            0,\n                                                                                                                                            'reason'),\n                                                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                                                         b'',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason'),\n                                                                                                                      UnicodeTranslateError('q\\x95\u00d2\u00b3\\x84',\n                                                                                                                                            0,\n                                                                                                                                            0,\n                                                                                                                                            'reason'),\n                                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                                         'f\u00daO\\U000949d2\\x0es',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason')]),\n                                                                                                      ExceptionGroup('\\U00063206',\n                                                                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                                                                         b'',\n                                                                                                                                         0,\n                                                                                                                                         0,\n                                                                                                                                         'reason')])])]),\n                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason')])])]),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback='\u00b6',\n      has_discards=False,\n      target_observations={'h2c\u00f7': 30114,\n       '#\u00ce\\x9b\u00c7': -1.7976931348623157e+308,\n       '': 20462,\n       's\u00ee\\x08\u00ae\u00b0': 16178},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-3_506_044_555_009_131_077, -124852395),\n       (-13494, -3),\n       (-97, 3),\n       (5738, -66)},\n      slice_comments={(113, 99): '\u00ef\u00a9', (-79, -87): '\\U0004a3af'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.009155792009551078,
          "overall:gc": 0.0,
          "generate:args": 0.016200582904275507
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878929.202677
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-1649702693, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8894752025115333},\n        was_forced=True,\n        index=None),),\n      length=3282,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('a', 1, 1)),\n                                    (('b', 0, 2), ('a', 2, 3)),\n                                    (('b', 1, 0), ('c', 3, 0)),\n                                    (('b', 2, 3), ('a', 1, 3)),\n                                    (('b', 3, 1), ('b', 0, 3)),\n                                    (('c', 0, 0), ('c', 2, 1)),\n                                    (('c', 0, 2), ('c', 1, 2)),\n                                    (('c', 2, 0), ('a', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\u00e8\\U00108145k~',\n                     [UnicodeTranslateError('\u00a1\u00c7\u00c4\\U000fb7dc\\x19[\u00db\\U0008191f\\x18\\U00083006r',\n                                            0,\n                                            0,\n                                            'reason'),\n                      UnicodeTranslateError('/\u00b5\u00b9\u00f3-)\\x96\u00fa', 0, 0, 'reason')]),\n      expected_traceback='\u00c9\\U0003cbcd\\U000a8229\u00ccA5\u00b4\\x1e',\n      has_discards=True,\n      target_observations={'\u00df\u00bc\\x08\u00c3\\U00105d35\u00a8': 1.5,\n       'string': 27634,\n       '': -23161},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-12_806_433_827_671_097_989_523_994_501_240_710_140, -84),\n       (-11286, -117),\n       (-1114, 16344),\n       (-827, -20492),\n       (-99, 755),\n       (6, 4_472_975_143_183_051_598),\n       (26, -48),\n       (61, 53_367_487_322_190_767_923_052_900_853_822_838_323),\n       (81, 3),\n       (83, 74),\n       (89, -21755),\n       (101, 99),\n       (102, 11674),\n       (4992, -12940),\n       (8530, 6),\n       (15969, -51),\n       (23882, 105885071),\n       (30771, 21684),\n       (2_138_348_425, -153_788_832_773_067_532_257_815_765_278_328_611_903)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-79, context=(), group_elems=()),\n      nodes=(),\n      length=-941899989,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('b', 1, 3)),\n                                    (('a', 2, 1), ('c', 2, 1)),\n                                    (('a', 2, 2), ('a', 1, 0)),\n                                    (('b', 3, 2), ('b', 1, 2)),\n                                    (('c', 1, 2), ('a', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\\\',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x19': 32666,\n       '\\U000411d9\\x8ej\\x1a\u00af\u00de5\u00fa!\\U000eec82\u00b5\\x1e\\x1a': 3.026332290518015e+16,\n       '\u00f5\\x91\\U00076463l': 1000,\n       'H0': -3.258209310864539e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(32006, -27),\n       (70_992_680_714_942_104_924_121_864_914_629_661_800, 117)},\n      slice_comments={(16410, 16): '\u00d0',\n       (-6_317_220_668_192_681_357, -17): '](\u00c2uj\u00c9',\n       (-1_935_760_477, 27673): '\\x88'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-12723, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.1673220417905761},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=90,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00034ea4\\U000546a0\\U00034e92\\U00034e71\\U00034e23\\U00034e3f\\U000fefc4\\U00034e88\\U00034ec1\\U00034de4\\U00034e1a\\U00034de4\\U00034e1b\\U00034eb1\\U00034e02\\U00034ebe\\U00034e81\\U00034e3d\\U00034e09\\U00034e9d\\U00034e61\\U0003f531\\U00034e21\\U00034e41\\U00034df7\\U00034ddb\\U00034e4b\\U00034e8d\\U00034e3e\\U00034dee\\U00034e14\\U00034e17\\U00034e59\\U00034e89\\U00034de3\\U00034e94\\U00034e9d\\U00034e83\\U00034ec9\\U00034e7d\\U000d2cb5\\U00034df4\\U00034e43\\U00034e45\\U00034e28\\U000ca371\\U00034ea1\\U00034ebd\\U00034e64\\U00034ec4\\U00034ed7\\U00034de1\\U000c8dc2\\U00034e41\\U00034e88\\U00034e97',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [216537,\n                  387244,\n                  629387,\n                  636763,\n                  762597,\n                  870420,\n                  997768,\n                  1113659],\n             ),\n         ),\n         'min_size': 28,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=13852,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('b', 0, 1)),\n                                    (('a', 2, 1), ('a', 3, 0)),\n                                    (('a', 3, 3), ('c', 3, 1)),\n                                    (('b', 0, 3), ('b', 2, 1)),\n                                    (('b', 2, 0), ('a', 3, 0)),\n                                    (('b', 2, 1), ('a', 1, 2)),\n                                    (('b', 3, 0), ('a', 2, 1)),\n                                    (('c', 1, 1), ('b', 0, 1)),\n                                    (('c', 1, 2), ('a', 2, 0)),\n                                    (('c', 1, 3), ('a', 3, 2)),\n                                    (('c', 2, 3), ('b', 1, 1)),\n                                    (('c', 2, 3), ('c', 3, 3)),\n                                    (('c', 3, 0), ('a', 3, 2)),\n                                    (('c', 3, 1), ('c', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00d9\\xa0\\x85\u00da4',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'': -4.0370644886705816e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-27603, 15764): '',\n       (-16473, -4_963_818_740_951_015_374): '',\n       (-16, 1462): '{%\u00e8\\U0010f5fe\u00bb\\x80\u00d1',\n       (-55, 19): '\u00b8\\U00093c17BGf\u00cb+\u00a4E',\n       (284398546, -17723): '',\n       (975020935, 133_843_221_607_728_700): 'zI>\u00c1\\x133',\n       (-32167, 21573): '\u00c8;\\U000be07c\\U0009f401\\U00033983',\n       (-64_934_205_932_046_479_309_963_009_801_416_067_371,\n        -29864): '\\x05\u00dd\u00dd\\x8e\u00c3P\\x05w\\x97\u00c0\u00b3\\x02\u00e7\u00c1\\x04\"',\n       (-23457,\n        153_439_115_106_882_641_964_186_146_968_314_562_341): '\u00b4B\\U0007ee0d\\U000c2e39\u00d0',\n       (40, 16063): 'L'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=32751, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\uf2eb\\uf231\\uf2d0\\uf254',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [61954,\n                  102851,\n                  106406,\n                  129128,\n                  228749,\n                  306944,\n                  323399,\n                  401354,\n                  509002,\n                  511602,\n                  969660,\n                  976905],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 1.4645215520011117e-88,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.7966748470562515e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=67,\n        constraints={'min_value': 33,\n         'max_value': 96,\n         'shrink_towards': 0,\n         'weights': {67: 0.21753452019145642, 95: 0.21239202120650252}},\n        was_forced=True,\n        index=None)),\n      length=404,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 1, 0),\n                                     ('a', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\U000f252a\u00bc',\n                     [UnicodeDecodeError('unknown encoding',\n                                         b'',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeTranslateError('\\U00043af4~c\u00b2', 0, 0, 'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\u00c1#\\U0006406e\\x0cn\u00d5\\x1226\\x9a\u00d2\\U0010e1eb\\U000711c8r',\n                                         0,\n                                         0,\n                                         'reason'),\n                      UnicodeEncodeError('unknown encoding',\n                                         '\\U00014eddl\\U000d5eb0\u00d9\u00b5\\x90z\u00bf',\n                                         0,\n                                         0,\n                                         'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'': -5366,\n       '\u00f1k': 22826,\n       '\\U0007bc27': -28228,\n       '\u00c9\u00cc,\u00db': 5.113766759398522e-278,\n       '\\x97': -1_892_643_780,\n       '`g\u00be\u00fc\u00a2\\U000698b9\u00a7\\U0007416e\\U00097e73\u00eb\\x18\\U000d695b\\x95': -1.2412005674605452e+176,\n       'lorem \u0644\u0627 \u0628\u0633\u0645 \u0627\u0644\u0644\u0647 ipsum \u4f60\u597d1234\u4f60\u597d': -31716,\n       '\\U0006e6d2X\\x17x\u00c9\u00c9Cp': -31043,\n       '\\x1f6\u00b8L': 4658,\n       '\u0287\u01dd\u026f\u0250 \u0287\u1d09s \u0279olop \u026fnsd\u1d09 \u026f\u01dd\u0279o\u02e5': 6_132_320_162_014_553_366},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-153_777_174_136_317_696_202_597_954_913_251_413_024,\n        -6_244_639_170_863_438_322),\n       (-1_835_981_793_480_126_460, -47),\n       (-18585, 13075),\n       (-5814, 29829),\n       (-32, -55),\n       (65, -125),\n       (93, 44_655_101_235_221_458_914_504_965_453_025_416_832),\n       (117, 29437),\n       (5210, 8_885_575_565_908_249_837),\n       (8192, -127),\n       (12136, 4249),\n       (12590, -10321),\n       (18650, 44),\n       (19556, -17941),\n       (20101, 8192),\n       (28261, -22058),\n       (28461, -28286)},\n      slice_comments={(-23843,\n        99): '\\x80\\x7fr\u00f1\u00a7?0\u00b90[\u00f4\\U000ea2da\\U000b6830\u00b1\\xa0\u00abw\u41a4\u00d7\\x96I\\x83\\x86\\U0003b546d\u00c7\\U000a84ca\u00bdS\u00fe'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=15553, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=87,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x19\\n\\x9cvc9\\xbd9\\xec\\xca\\xdb\\xec#\\xce\\x18\\xfel\\r\\xb8-\\x07\\x17\\x8f>+\\xd7^\\xa6\\xfdZ\\xa1$\\tR \\x91\\xe0\\xffzB\\x06x\\x0e%\\xf2\\xa2\\xfa\\x01d\\x06\\xa2\\xed\\xce\\x1e\\x134\\xa776\\x81ZF\\r\\x92\\xac\\xfeLm%\\xe8\\xf9}\\x1a\\xa5\\x9ff\\x02\\x15\\x13p\\x9e\\xb7Ox=\\xd5\\x85\\xe4\\x8f1\\xaf\\xb8\\xdc\\x0f\\xedU\\x18F\\xcdY\\xc1E\\x0c\\xfaR+\\xea\\x1a\\x19Z\\xca\\xb9',\n        constraints={'min_size': 42, 'max_size': 132},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'N\\xf9\\xbc9\\xd7 \\xe58\\xf8?/UB\\xea\\x86\"\\xa6\\x811\"\\xbd>F\\xf2\\xadn\\xa4\\xa9N|l\\x1e\\xaf\\xa8\\x8d\\xfe\\xf0]\\x19',\n        constraints={'min_size': 36, 'max_size': 136},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1.9378612699868016e+16,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5e-324},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud821\udcc2\ud821\udcc0\ud821\udc9c\ud821\udc71\ud821\udd3c\ud821\udc6c\ud821\udc70\ud821\udcac\ud821\udd12\ud821\udc72\ud821\udc41\ud821\udcb2\ud821\udc97\ud821\udc86\ud821\udca1\ud821\udd2a\\U0006803a\ud821\udd36\ud821\udcf1\ud821\udc56\\U0003736c\ud821\udc67\ud821\udcdc\ud821\udc78\ud821\udc96\ud821\udc84\ud821\udcf6\ud821\udc85\ud821\udd09\\U0001ca2f\ud821\udd28\\U000630ee\ud821\udc74\ud869\udc5b\ud821\udcf7\ud821\udd20\ud821\udc82\\U0006a7cd\ud821\udc54\ud821\udcc9\ud821\udcc5',\n        constraints={'intervals': IntervalSet(\n             build_intervals([99391, 239810, 385688, 446222, 527025]),\n         ), 'min_size': 30, 'max_size': 130},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00075dff\\U00075de1\\U00075e35',\n        constraints={'intervals': IntervalSet(\n             build_intervals([482712, 1110749]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.2892475526465617},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud86b\udeb5\ud86b\uddbd\ud86b\ude22\ud86b\uddd1',\n        constraints={'intervals': IntervalSet(\n             build_intervals([175549, 450291, 735998, 985524]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.8159548062028525},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=85,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.486471148309518e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u9730\u9719\u9755\u9702\u97cf\\U00040f67\u9794\u9741\\U00037505\u9782\\U0001ff78\u97a3\ub70a\u978e\u96fe\u973a\u96ef\u9743\u9727\u97b7\u972f\u972f\\uf748\u97ab\u9701\u9798\u973b\u9741\u9715\u96f1\u9722\u9706\u972f\u9778\u9758\u9734\u96da\\U00040de3\u97a1\u9704\\U00068f9f\u97b8\u9748\u9775\u9754\u96fe\u9758\u9779\u9758\u9726\u97b6\u973a\u976c',\n        constraints={'intervals': IntervalSet(\n             build_intervals([38613, 504795, 662859, 737590, 847492]),\n         ), 'min_size': 23, 'max_size': 123},\n        was_forced=False,\n        index=None)),\n      length=1,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\u00ff', 0, 0, 'reason'),\n      expected_traceback='',\n      has_discards=False,\n      target_observations={'\\U000726d3': 43, '\u00c6\u00b2': 2.2250738585e-313},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-8_367_369_389_945_750_029, -112),\n       (-1_006_366_483, 14081),\n       (-27747, -11531),\n       (-24067, -25041),\n       (-19695, 184),\n       (-16329, -18),\n       (-11470, 1),\n       (-10597, 14452),\n       (-6780, -5779),\n       (-6038, -9807),\n       (-715, 19),\n       (-113, 1_248_874_634),\n       (0, -9_014_588_520_111_385_298),\n       (8, 3483),\n       (58, 197_064_927_344_706_826),\n       (1000, -11139),\n       (3444, -19),\n       (11799, 37),\n       (12237, 7),\n       (16177, -22413),\n       (17094, 9999),\n       (25380, 27306),\n       (64_074_449_321_808_482_783_247_246_505_044_927_239, -101)},\n      slice_comments={(20, -2_024_410_467): '',\n       (29848, 29757): '',\n       (18166, 287): 'f\\x19\\U000334ea\"Q\\U0005d1aa\u00e8\u00d0(',\n       (1000, 8192): '\\x84\u00f3\u00db\u00bdJ',\n       (979, -21637931): '\\x03\u00c2s\ud850\udfb9\u00c7S\\x1a\u00af',\n       (-42_283_025_031_235_606_876_604_487_545_762_685_900,\n        -48): '\\U000e2894\\x12o\\U000e08f1\u816er',\n       (-104, -65): 'k2\\x14',\n       (-23062, 2726): '\\U0008854d\u00df',\n       (486949615, 1167): '',\n       (-108, -98): '\\U00091471\u00ac',\n       (-9706,\n        397): 'R\u00df\u00aa\\xad\\U000c88b2\\U0010bcfa\u00e9\u00ee\\U00081526%b>\u00b20\\x80\u00e6\\U000a007e\u00b6',\n       (-27381, -821330327): \"\\U000adaec\\U0006e6e5+\\x06#\u00f4'\\x9d\"},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=16, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.6127232152043843},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x93\\x1a',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'q\\xa1\\x01N\\xacm?\\xcb&ad\\x06\\x87\\xa3,e',\n        constraints={'min_size': 11, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1.4996168734269522e+308},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.6682457182711595},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-1e-05,\n        constraints={'min_value': -inf,\n         'max_value': -1.3442809832272003e-232,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.2250738585e-313},\n        was_forced=True,\n        index=None)),\n      length=2_742_793_565_782_303_622,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 2),\n                                     ('a', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('f\u00b9',\n                     [UnicodeTranslateError('G', 0, 0, 'reason'),\n                      ExceptionGroup('KR\\x12\\U0009a937y',\n                                     [ExceptionGroup('\u00ddVJ\\x9a\u00b3\u00c3\u00b0W\\U000abfbb\\x9eV\u00bc\u00aa\\x9e\u00afD\\U00053b6e\\U000ab5bc\\U000c372a\u00e6*!\u00d72 n=\ud881\uddbf\\x93\u00ac\u00f6\\x96o\u00a8T\u00c1',\n                                                     [UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeEncodeError('unknown encoding',\n                                                                         '\u00c0g\u00b9\\x89',\n                                                                         0,\n                                                                         0,\n                                                                         'reason')]),\n                                      UnicodeTranslateError('x',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError('/\\U000fd3d7\\U000841c7\u00e9ZAlc2\u00e3',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      ExceptionGroup('\u00c0\\U000526f1\\x96\\x03\\U000c497aW',\n                                                     [UnicodeTranslateError('y\\x87\\x99\u00e3`\\U00093b06\\U000768cc\\U0004e156/\\U00092360@\\U00036df4\\x16\\x15\u00aa\\U000627a6',\n                                                                            0,\n                                                                            0,\n                                                                            'reason'),\n                                                      UnicodeTranslateError('\u00c0\\x04\u00b5\\U000ba93f\\x17\u00femt\\x18\u00a4\\x87\u00c4\\x00\\U0001616fH',\n                                                                            0,\n                                                                            0,\n                                                                            'reason')])])]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'B\ud850\udcca\u00f1\\U00013771\\x95-\\x1e\\U0005aa92V\ud855\udef5\u00f2\u00d0C\\U00051047\u00c1\\U000dd6f8': -4.996280314683699e+16,\n       '#\\x16\\U00076294\\U000381b6\u00cc?\\U000b3720i%': 1_169_239_461,\n       '\u023e': 1325,\n       '\\U000de89b\\U0009cae4\\x14\\x11wn\\x9b\\U0005d5fc\\x16\\U000acc03;6\u00c3e\u00f6': 2,\n       '{+\\U000f1d41': -3.560213380943134e+16,\n       'f': 1.5019811626253741e-99,\n       '\\U00070a5d': 1.3406165573236112e+286,\n       '\\x83\\x90\\U0004bf2d\\x03\\x90': -4.0238587861313896e+16,\n       'F\u00c5': -1.7714529015516606e+16,\n       '\u00ab': 30425},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-18443, -1_960_622_400): 'undefined',\n       (32192, 23604): '\u00a2\\x89U\u00b2\\U00037fbd\\x03\\U0005ab5d',\n       (-15182,\n        -42_554_906_917_686_754_999_210_508_505_921_561_136): 'N\u00b3\\U000b2613\\x90\\U000723d1\u00bf\u00a3\u00d9'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1207, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\ud81d\ude6b',\n        constraints={'intervals': IntervalSet(\n             build_intervals([95724, 380713, 421777]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),),\n      length=31049,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 2),\n                                     ('c', 3, 2)),\n                                    (('b', 1, 1), ('c', 2, 2)),\n                                    (('b', 1, 2), ('a', 1, 0)),\n                                    (('b', 3, 1), ('b', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\u00c5\\x80\u00a8m\\x9b\\U0005e332n_\u00aa\\U000ce039_\\U0008b63d': -3.869296708602807e+16,\n       '\u00e9': 28363,\n       '': -2_723_922_632_523_041_961},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-8_216_424_001_629_051_267, 22),\n       (-6_862_636_660_898_583_194, -123),\n       (-9488, -16),\n       (-51, -25),\n       (4_930_850_708_038_360_897, 55),\n       (47_498_162_081_939_316_015_833_847_578_834_403_668, 4355)},\n      slice_comments={(-30574, 31): '\\x17\\U000714a6\\\\',\n       (10,\n        4_860_725_461_776_800_281): '\"\\U0004c9f1\u00f0e\\U000f3d64\u00ac\u00c5\ud85f\udf30\u00f7\\x92Q\"\u00f6+\\x92\u00ae',\n       (30985, 112): '\u00a5',\n       (-41, 300): '\u00f4\\x13j\\U0004a1e1\u00e3\u00e5\u00fb\u00d3(\u00ab\u00b7\\U000ac51bD\u00dd\\x12Gb\u00aa',\n       (-91, 3666): '\\x84',\n       (9925, 7880): '',\n       (2, -32): '\u00fbT',\n       (-15270, 20978): 'mG',\n       (12, 101_456_107_981_048_622_461_017_914_568_102_739_650): '\\x01',\n       (10550, 1100): '\\U0005db8aT(\\U000b4c8aJ\\x8f\\x07Z',\n       (12054, 28792): '\\x0b\\x1b\u00ce',\n       (-24833, -79): '\u00b1[\\U000544c0\u00ed\u00b8=\\x1d\u00f9\u00e0'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=13413, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=6.938205836344572e-270,\n        constraints={'min_value': 0.0,\n         'max_value': 7.2269774411049644e-270,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.938205836344572e-270},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\ud90c\\ud9a6\ud86f\uddda\\ud8fb\\ud9ab\\ud9b0\\ud8fb\\ud8ca\\ud92b\\ud932\\ud9a8\\ud9ac\\ud98c\\ud921\\ud90c\\ud8e0\\ud967\\U00049e21\\ud952',\n        constraints={'intervals': IntervalSet(\n             build_intervals([55489, 317682, 697525, 868939]),\n         ), 'min_size': 16, 'max_size': 107},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.336522138062791},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.0292173305330509e+21,\n        constraints={'min_value': -5.960464477539063e-08,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 3.39199426840774e+16},\n        was_forced=False,\n        index=None)),\n      length=-537_028_608_523_758_443,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('b', 1, 2)),\n                                    (('a', 0, 3), ('c', 2, 0)),\n                                    (('a', 1, 0), ('b', 2, 2)),\n                                    (('b', 3, 0), ('c', 0, 3)),\n                                    (('c', 2, 3), ('b', 2, 0)),\n                                    (('c', 3, 3), ('c', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\u00aav S\u00c7\\U00089756\\x92|\\U001005ec\\x85\\U000d0d5f\u00a5',\n      has_discards=True,\n      target_observations={'e\\U0004af35T\u00e2\\x92\\x18\u00d4\\U0009b879\\x1e4\\U000355bez': -4533,\n       '\\x8c\u00c3': 26358,\n       '': -16606,\n       '\\x00\\x88\ub628\\x06\u00dfm\u00b0l\\U000d3ea1k': 4066531004440037.0,\n       ',\ud854\udd2c\\x14\\U000ddcf6\\x9d\ud855\udd99\\U00103ac1\u00a7{': 1.7216493039321327e+301,\n       'True': -8601,\n       '$\u00c0\\x85\\U000ac518\\x19A\u00bd\u00e9D': -24591,\n       '\ud820\ude89\u00f0': 1.3071237357893732e+108,\n       '\\x05V\u00be@\u00e8\\x9d\u00e88': -2,\n       '\u00ea\\U0006539cj*\\x94': 153,\n       '\u00de\\x94\\U000afaf0\\x04W\u00c4\\x14\\U0007044c': 12954},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-127, -30)},\n      slice_comments={(65535,\n        -1_492_189_624): '\u00c9\\U000ff7f5\u00c1m\\U000c2901\u00d9\\x80\\U000be5e3!\\U00044253\u25d3\u00b7\\U000b21498\\U000a8b21\u00d1\\U0010320f>\\U000f0f72\ud844\udfb9\\U000b979b\\U000ac176\\x15',\n       (-2950, -19515): ',\\x08',\n       (72, -94): '\u00e1\\x97',\n       (71, -14877): '\\x9e\u00d3\\U0001eb61\u00fa/\\U000a0c20\\U000af695\u00e7u\u00fd\\x94\\x82'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-22821, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9836479459087708},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u0204\u01ba\u01cc',\n        constraints={'intervals': IntervalSet(\n             build_intervals([300, 556425, 959397]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000410b8\\U0008d30d\\U000410d1\\U00041057\\U000410fc\\U0004108f\\U000885ab\\U000410ff\\U0004112f\\U000410e4',\n        constraints={'intervals': IntervalSet(\n             build_intervals([266316, 760128, 788970]),\n         ), 'min_size': 8, 'max_size': 108},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'J\\xad\\x17{\\xe5nU\\xf9\\x9ax\\xe3\\xdbp\\xeegX\\xe9nTw\\x88\\xb3\\xc6H\\x07<B\\xa7\\xd4\\x9f\\x14,\\xc7.\\xd9\\x84Y\\xf8u\\x82(\\xf3X\\xda+\\xcbNk\\x00\\xf5a\\xc9\\xba\\x1b\\xd4a\\xaf\\x884\\xee)0\\x1b\\x8b\\x1b\\xc7\\xb4\\x8aB\\xd5\\x08\\xba<\\x97\\x1a\\xab\\x88=\\xc7\\xd1\\xc1\\x8c\\xcfs\\xa1\\xdb/\\xcf',\n        constraints={'min_size': 38, 'max_size': 118},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0005914c\\U00064ef6\\U00059112\\U000590a7\\U00059063\\U00059079\\U0005911e\\U00059087\\U0005911c\\U0005910d\\U00059058\\U0005905c\\U00059103\\U000590f3\\U0005914a\\U0005912f\\U000590b6\\U0005906e\\U00059145\\U000590e0\\U000590b9\\U000c2f4c\\U000590a4\\U000590e6\\U0005da44\\U000c401c\\U00059099\\U000c68d0\\U000590f9\\U00059077\\U00070827\\U00059108\\U000590dd\\U00059084\\U00059051\\U00066d3a\\U0006c344\\U000590ac\\U00059091\\U000590fc\\U000590d2\\U0005905f\\U00059058\\U0005906f\\U000590f7',\n        constraints={'intervals': IntervalSet(\n             build_intervals([364624, 473640, 768473, 825254]),\n         ), 'min_size': 23, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.5},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-1_395_323_251,\n        constraints={'min_value': None,\n         'max_value': 70,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=83,\n        constraints={'min_value': None,\n         'max_value': 1024,\n         'shrink_towards': -10012,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xf33',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xb2eZ\\xe8\\x9c',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.9438236118078069},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=20287,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -1_746_236_539_156_274_923,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 3.6000852936145156e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-102,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 88,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xc1\\xad\\x8a:\\x07\\x8a\\\\\\xb0\\xef\\xf3E\\x03HU\\x1a\\xde\\x8a\\xe7\\xe4N5\\xd9\\xf2\\xccr\\xb1\\xa7\\xa9\\x83\\xde\\xed\\x8f\\xcdxj\\x8d?\\x9a7\\xc8\\xb5>\\xc8s\\xc4\\x90%nt\\x88\\xc4^\\xe2h\\xa3t\\x13\\x86\\xca\\x9b\\xb8\\x90\\xf6\\xbe\\x1c\\x03o\\xed\\xe7\\xb1\\\\',\n        constraints={'min_size': 47, 'max_size': 147},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0003ef67\\U0003efe1\\U0005ee89',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [257804,\n                  264315,\n                  352305,\n                  400504,\n                  758633,\n                  895418,\n                  909042,\n                  977277],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=9.941506797082068e+307,\n        constraints={'min_value': -4.665444217665379e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 7.647660739428329e+307},\n        was_forced=False,\n        index=None)),\n      length=692,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('a', 0, 2)),\n                                    (('a', 1, 0), ('a', 0, 0)),\n                                    (('a', 1, 1), ('c', 0, 2)),\n                                    (('a', 2, 2), ('b', 0, 0)),\n                                    (('a', 3, 1), ('a', 0, 3)),\n                                    (('b', 0, 1), ('b', 1, 3)),\n                                    (('b', 0, 1), ('c', 0, 2)),\n                                    (('c', 0, 1), ('a', 0, 1)),\n                                    (('c', 0, 2), ('a', 1, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\U0005c708?US\\U000bacc2\u00d4\\x18\\x96\\U0007d4d1s;\\xad\\x03\u00d4|Z\\x8b\u00d0L\u00bd',\n                     [UnicodeTranslateError('\u00d3', 0, 0, 'reason'),\n                      ExceptionGroup('',\n                                     [UnicodeEncodeError('unknown encoding',\n                                                         'E\\U000525ce\u00cdx\u00ea',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeTranslateError('\u00d8\\x8c',\n                                                            0,\n                                                            0,\n                                                            'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('\ud864\udd05\uc940\\x0330\u00a3#',\n                                                     [UnicodeEncodeError('unknown encoding',\n                                                                         'C\\x11c\u00d0\u00fa\\x89',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeDecodeError('unknown encoding',\n                                                                         b'',\n                                                                         0,\n                                                                         0,\n                                                                         'reason'),\n                                                      UnicodeTranslateError('\u00bd\\x0e\u00ff',\n                                                                            0,\n                                                                            0,\n                                                                            'reason')])]),\n                      ExceptionGroup('',\n                                     [UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      ExceptionGroup('\\x01ws\\x1e',\n                                                     [ExceptionGroup('\u00a3,\u00d6',\n                                                                     [UnicodeDecodeError('unknown encoding',\n                                                                                         b'',\n                                                                                         0,\n                                                                                         0,\n                                                                                         'reason'),\n                                                                      ExceptionGroup('U\u00f9\\U00082583\u00f5',\n                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                         '\\x05\\U00014036\u2602\\U000637ca2',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      UnicodeTranslateError('U',\n                                                                                                            0,\n                                                                                                            0,\n                                                                                                            'reason'),\n                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                         '\u00efV\\x1a\u00bb',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason'),\n                                                                                      ExceptionGroup('\\x0b6\u00edb\\x11\\U0006bf13Q<\u00f2\u00b3q\\x85\\x13\\x02L\u00f1\\x01\u00fc\\U0007ab0cl\\U000bb92e~N\u00d0',\n                                                                                                     [UnicodeEncodeError('unknown encoding',\n                                                                                                                         '[I\u00a8',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason'),\n                                                                                                      UnicodeEncodeError('unknown encoding',\n                                                                                                                         '\u00e5',\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         'reason')]),\n                                                                                      UnicodeDecodeError('unknown encoding',\n                                                                                                         b'',\n                                                                                                         0,\n                                                                                                         0,\n                                                                                                         'reason')]),\n                                                                      UnicodeTranslateError('\\x875',\n                                                                                            0,\n                                                                                            0,\n                                                                                            'reason')])]),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\ud865\udd82\\U000a1a87',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeDecodeError('unknown encoding',\n                                                         b'',\n                                                         0,\n                                                         0,\n                                                         'reason'),\n                                      UnicodeEncodeError('unknown encoding',\n                                                         '\\x8e\u00b3\\U0008b759\\x87\\U000f03c8',\n                                                         0,\n                                                         0,\n                                                         'reason')])]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'3': -5.114411910760289e+16,\n       '\u00a8\u00a1\\U00091dd2\u00fe\u00d0\\U0005d90d': -3.29610580254132e+16,\n       '999999999999999999999999999999': 2731,\n       '\u00a2\\x06H\\x11\\U0004cf22': -2.4393207603682697e+37,\n       '3{\ud872\udc58\\x8e\\xa0\\x03\\U0002f71d\ud866\udd96\u00f1\u00ea2\\U000a77cc\\U000a172e\u00ef': -4.318829167531981e-27,\n       '\\x9f\\x80E!': -1.1641279496004664e-293,\n       '\\U000ac458\\U000df49e{\\U0003a59aj': 2.3644298732468504e+16,\n       '\u00e5\u00b9': -30262,\n       '\\x9e\\x07\\x0b\\U000a8b1b\\U000553c2@\\x1d\\x90<': -4.162839108954852e-205,\n       '-x\\x1a': -3.177365693217012e+16,\n       '\\U000689c6tm.\u00d3\\x8b\u00bd': 10021},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_214_619_787, 2522),\n       (-26444, -28183),\n       (-25513, 60),\n       (-20165, -7838),\n       (-7507, 7_827_615_695_684_257_528),\n       (-5780, -31251),\n       (-3043, 1_152_837_804),\n       (-89, -381_444_355_200_795_654),\n       (55, -27100),\n       (87, -1_287_391_460),\n       (4323, 22812),\n       (7529, -10763),\n       (27709, -934411283),\n       (31396, 4509),\n       (1_596_353_564, 25658),\n       (7_668_010_085_880_858_451, 16676),\n       (94_457_964_201_006_190_090_996_444_322_473_732_653, -10988),\n       (111_595_067_442_817_656_036_424_232_082_359_129_717, -27667)},\n      slice_comments={(-22520, 1): '\\U000611d3R',\n       (24270, -226537396): '\ud862\ude2b\\U00098a7eq\\x84\\U000e9698=',\n       (13612, -1_706_440_326): '\\U00075affv\\U000ed152\\U000fbf79n\u00a7\u00c4\\x12',\n       (-1_574_101_780_358_510_807,\n        2545139): '\\U000c5ff7\u00d5\\x15\\U0004f20cV\\U000e1cae0\u00ea\\x0b\u00ba\u00b7=X\uc424e\\U0004e057',\n       (98, 30722): '',\n       (12807,\n        57_372_009_194_210_799_950_524_672_883_783_251_695): '\\x08\u00d1\\x12\\U00015107\u00b3',\n       (-30972, -14341): '4\\x94\\U000f209b'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-3995947466546616721, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 1.2342318413151984e-108},\n        was_forced=False,\n        index=None),),\n      length=-19424,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\U000b2dc6]\\U000d7bf2i',\n      has_discards=True,\n      target_observations={'%\\x96\u00c9\\x7ft': 1.2567796038407676e+16, '': -77},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-9_122_526_325_251_744_743, -19558)},\n      slice_comments={(-2_062_188_240_687_079_962, 30566): '',\n       (512, 90994594): '\u00d9\\U000df492}A\\U000dbc1c\\x80',\n       (125, -7708): 'a',\n       (-98, 2314): '\\U00016622\u00c2\\U0010a2f33\\x1c\\U000ed444\\x1f\u00fa\u00e4\u00df\u00ba\\x8b9',\n       (74, -14790): '\\U000f32eb\\U000f4462]Z\u00fb\u00c7\u00d4',\n       (-5822, -26766): 'd\\x00',\n       (1024, 10412): 'N\\x1f*y',\n       (-20423, -22135): 'C\ud865\udf21'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from builds(ConjectureResult, status=just(Status.VALID), interesting_origin=builds(interesting_origin, n=integers()), output=none(), extra_information=builds(SimpleNamespace, branches=UniqueListStrategy(TupleStrategy((TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))), TupleStrategy((sampled_from('abc'), integers(0, 3), integers(0, 3))))), min_size=0, max_size=inf).map(frozenset), reports=builds(list), traceback=just('')), target_observations=UniqueListStrategy(text(characters(codec='utf-8')), min_size=0, max_size=inf).map(dict), tags=just(frozenset()), spans=none(), misaligned_at=none(), nodes=ListStrategy(<hypothesis.strategies._internal.core.CompositeStrategy object at 0x106d0c800>, min_size=0, max_size=inf).map(tuple), length=one_of(nothing(), nothing(), integers()), has_discards=one_of(nothing(), nothing(), booleans()), expected_traceback=one_of(nothing(), nothing(), none(), text()), cannot_proceed_scope=one_of(nothing(), nothing(), none(), sampled_from(['other', 'discard_test_case', 'exhausted', 'verified'])), arg_slices=one_of(nothing(), nothing(), sets(tuples(integers(), integers()).filter(_can_hash))), expected_exception=one_of(nothing(), nothing(), none(), one_of(builds(BaseExceptionGroup, text(), lists(from_type(builtins.BaseException), min_size=1, max_size=5)), builds(UnicodeDecodeError, just('unknown encoding'), just(b''), just(0), just(0), just('reason')), builds(UnicodeEncodeError, just('unknown encoding'), text(), just(0), just(0), just('reason')), builds(UnicodeTranslateError, text(), just(0), just(0), just('reason')))), slice_comments=one_of(nothing(), nothing(), dictionaries(keys=tuples(integers(), integers()).filter(_can_hash), values=text()))).filter(not_yet_in_unique_list) to satisfy filter": "",
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.011660249962005764,
          "overall:gc": 3.083300543949008e-05,
          "generate:args": 0.16188466898165643
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878970.261703
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1058, context=(), group_elems=()),\n      nodes=(),\n      length=-4_193_745_545_558_013_349,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('b', 1, 1)),\n                                    (('a', 1, 1), ('c', 1, 3)),\n                                    (('a', 2, 2), ('c', 3, 2)),\n                                    (('a', 2, 3), ('a', 2, 0)),\n                                    (('a', 3, 2), ('b', 0, 3)),\n                                    (('b', 2, 3), ('c', 1, 2)),\n                                    (('b', 3, 1), ('c', 2, 1)),\n                                    (('b', 3, 2), ('c', 1, 2)),\n                                    (('c', 1, 3), ('b', 3, 3)),\n                                    (('c', 2, 3), ('b', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\U00063570\u00bf\u00ec', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\x86Xt\\U00059875': -29},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(10, 404)},\n      slice_comments={(25339, -107): '\\x9d\\x0e',\n       (-55, -83): '\u00bc',\n       (3_305_583_586_883_202_467, 41): '\u00ca\\U000ea296\u00ff\\x1a'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0010805829660966992,
          "overall:gc": 0.0,
          "generate:args": 0.007829834066797048
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878940.4077709
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=8192, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U00079cad\\U0007689c\\U00045090\u0206\u02af\u0289\u02f7\u025e\\U00058613\u0272\u0282\u02f0\u028a\u0271\u02ff\u02e0\u6dc3\u02ee\u025f\u0266\u0216\\U00044d41\u020c\u0203\\U00011deb\u025c\u0297\u02c3\u0258\u02bf\\U000502a8\ud861\udd66\u0287\u025a\u026e\u02ab\\U00061275\u0282\\U0006b059\u0264\u02db\u0276\\U000129d4\\U00079a3e',\n        constraints={'intervals': IntervalSet(build_intervals([512, 563608])),\n         'min_size': 13,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),),\n      length=404,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\U0007369bDt>',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback='\\x02>\u00c4g\\\\\\U000c87b6',\n      has_discards=True,\n      target_observations={'g\u00cf\\x89\u00db\u00aa\\x98&': 0.0,\n       '\\x91R\u00ae9+\\x17l\\U0007308fU\u00b2\u00dc\\U000e5a60_': -7.840531239890045e-213,\n       '\\x12\u00b2': 4.413248926784385e+187,\n       '\\x80{~\u00a5\u00f4\\x83': 7,\n       'X\\U00082ee8\u00a7\\x98\\U000f2a50\\U000c860f[\\U000ceef9\\x12\\x12&\\U000c73d6': -7460,\n       '\\x98\u00be\\U00045aec': 125,\n       '-Infinity': -2.1442929204119265e+63,\n       '\u00ee': 14704,\n       '\u00ef\\U00058d1a{\\U000e82ad\\x87\\U0008e06ev\u00ee\\x97': 3.30088875494231e+152,\n       'i\\x99H\\U000f5ba7\\x9f': -2.682730738769128e+16,\n       '': 95_005_539_213_419_200_163_486_540_673_223_210_727,\n       '\u00c0': -13670,\n       '\u00b5': -2358037680943764.0,\n       '\u00e17n\u00ba_E\\U00076317\\U000b81e5Pj': 1.7948629925494792e+16,\n       '\\U000a952e\\x1b\u00fe\\U00062b84\\x85\u00e6\\x03eo\\U0007f662': -27,\n       '\\U0009a0b4\\x94a\\x9d\\x8a\\U000e5693\\x10': -13775},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-27820, 2803),\n       (-21284, 2015),\n       (-15368, -23),\n       (-14779, 12420),\n       (-11923, -76),\n       (-3548, -28730),\n       (-3164, 121),\n       (-104, 25076),\n       (-94, 22853),\n       (-60, -7623),\n       (-46, -287425464),\n       (300, -111),\n       (2945, -9711),\n       (3635, 16568)},\n      slice_comments={(10694, 387_706_468_998_803_582): '\\U00041b7f\\x97',\n       (106, 9397): '',\n       (-24985,\n        -13041): '\\x14l\\x9b\\U000a9052\\x9cc\\U0009cf0a\u00ebmB\\x0b\\U000b6679\u00d0\u00d9Ew\\U000c0ac4',\n       (-35, -81): '\u00be\u00d3\\x1aQ\u00b6\u00be',\n       (-150_410_869_469_359_224_272_486_002_457_660_283_867,\n        11404): '\u00e9\\x97\\x9d\\U00059f3c4\u00ed\\r\\xad\\U000d9ef9\\x9c1',\n       (-6_678_050_369_199_534_448,\n        17016): 'U\\U000353a1\\U0005f2cd\\U000aa430\u00ac\u00cfg6\\U0002f1c0\\U0005662a\\n\u00e8\u00b2\\x99',\n       (-1_670_478_983, 512): '\u00b5\u00ac',\n       (24567, -31295): \"rC7\\x90'+/\\U00106721y\u00a4\",\n       (340, 5_297_054_210_889_908_352): '',\n       (-125, 26336): '\u00bc\u00d4\\x1b\\x12\\x7f\\x08\u00d0\u00b6q'},\n      misaligned_at=None,\n      cannot_proceed_scope='other'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-28547, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.9926684273866908},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([171717, 1036768, 1114111]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=2,\n        constraints={'min_value': None,\n         'max_value': 19547,\n         'shrink_towards': 1_013_375_043,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud849\udc3c\ud849\udd10\ud849\udcb0\ud849\udc52\ud849\udc5a\ud849\udcc9',\n        constraints={'intervals': IntervalSet(\n             build_intervals([140323, 499281, 1017036]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 3.296904020784234e-16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.66724946681716e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=138_009_324_655_536_386_735_245_279_539_361_340_231,\n        constraints={'min_value': 138_009_324_655_536_386_735_245_279_539_361_313_222,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000445bb\\U00044521',\n        constraints={'intervals': IntervalSet(\n             build_intervals([279826, 639985, 802525]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u2093\u204d\u2048\u201a\\u20c3\u203d\u20bc\\u202b\\U000cdb48\\u200f\u203a\u20d9\u2048\\U000afc66\\U0009bb42\u20b0\\u200a\\u20f2\u20ea\\u200c',\n        constraints={'intervals': IntervalSet(\n             build_intervals([8192, 240779, 543978, 1026818]),\n         ), 'min_size': 2, 'max_size': 102},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0004f485\\U0004f458\\U0005631f\\U0004f4a0\\U0004f46c\\U0004f497\\U000dfbaf\\U000819eb\\U000db09e\\U0004f435\\U0004f409\\U0004f3ed\\U0004f3f3\\U0004f4bc\\U0004f412\\U0004f476\\U0004f3e4\\U0004f3e3',\n        constraints={'intervals': IntervalSet(\n             build_intervals([324554, 678609, 692241, 922275]),\n         ), 'min_size': 15, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -2.1492450234079512e+192,\n         'max_value': 1.970175863868343e+16,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.684879290003754e+191},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=29,\n        constraints={'min_value': None,\n         'max_value': 114,\n         'shrink_towards': 20862,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=5.782987876697348e+307,\n        constraints={'min_value': 1.7913352942303024e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 0.05},\n        was_forced=True,\n        index=None)),\n      length=300,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 1, 0),\n                                     ('c', 1, 2)),\n                                    (('b', 1, 3), ('b', 1, 2)),\n                                    (('b', 1, 3), ('c', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\\U00039a2c',\n      has_discards=True,\n      target_observations={'': -80,\n       '\\U000e061b\\U00096cd8/\u00f2\\U00106cca\\x05\\x83\\U000f2859': 4.1324625525887153e+129,\n       '\\U0005a655\\x83\u00dd@\u00dd\u00e9\u00fc./\\x9f\\x9a\\U000955bf`\\x18\u00ed\u00d3\u00d9': -3.089900646620433e-29,\n       '\\U00066789YC\\ue907\u00be{K\\x97': -4.0571765070928786e+307,\n       '\\x99!\\U000bca7e': 0.5,\n       '\u00ab\u00bb': 20057,\n       '\u00bc\u00d8\\U000edffb\\x04': 39,\n       '\u00b5\\x9f\u144bL': 0.5,\n       '>\u00de\u00cc\\x15': -inf},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_831_998_573, -1_693_816_600),\n       (-31925, -287),\n       (-11, 9999),\n       (75, 28965),\n       (27822, -23432),\n       (65535, 87)},\n      slice_comments={(-1_540_131_913, -1): 'l\\r\\x89\u00d0',\n       (13168, 14916): \"\uadc24\u00e3\u00ec^\u52ff\u00ff\u00de>\\U000c3d5c'\u00c2\\\\\u00d3\u00b5\\U00039187,\ud835\udfe6\\U0009b445\",\n       (-2, -15159): '\u00b3\\x10%>\\U00103412',\n       (-116_997_722_068_661_414_545_286_027_783_460_802_902,\n        1_670_981_146): '`'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=17833, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=102,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -1_964_991_714,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'j\\xb0\\x83T\\x90XBU\\x0c\\x07\\xa3 k\\xec\\xc7\\xf9\\r\\xfa\\x16\\xd4\\x91\\xcf0*\\xed\\x9f\\x07lc&\\xc2\\x13\\xe0\\x00\\xef\\x0f\\x04\\x8d\\x1f\\x00)\\xaca\\xa6&\\x9b\\x8a\\xa0\\xcf\\x96\\xd6UCT\\xccr\\xa0s\\xcd\\x85\\x12\\xe8\\xdc\\xb87\\x95\\t\\xec\\x94\\x9d\\xf6h\\xfe\\x07\\xef1\\x01\\xa9\\xb8\\x00\\x8b\\x94\\xd4\\x9f\\x04\\xb3\\xa5\\x10|\\x17f\\xe6+\\xdfi\\x93\\x8a.\\xe7\\x87\\xc6g\\xec~\\xd8\\x89\\x1ekF\\t\\xea\\xbe\\xc3\\xfb\\xc1!i\\xdb\\x8c\\xefJ\\xae~D\\xbb\\xa3\\xd8\\xd3;\\xdb\\x9a\\xb1\\xe1\\xf8\\xf8\\x96\\xdd',\n        constraints={'min_size': 35, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-59,\n        constraints={'min_value': -1_130_131_876,\n         'max_value': None,\n         'shrink_towards': -70_920_420_997_965_577_078_793_521_541_785_602_587,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=7382569559096332.0,\n        constraints={'min_value': 4.593483244260689e-214,\n         'max_value': 1.1149893028422019e+21,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 6.884687461417473e-188},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=19796,\n        constraints={'min_value': 19789,\n         'max_value': 19846,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=-18167,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 3),\n                                     ('a', 0, 1)),\n                                    (('a', 3, 2), ('b', 2, 1)),\n                                    (('b', 3, 2), ('c', 3, 2)),\n                                    (('c', 2, 2), ('b', 0, 3)),\n                                    (('c', 3, 1), ('c', 2, 1)),\n                                    (('c', 3, 3), ('c', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'': -11759,\n       'M\u00fa\u00ff\\U000cf3b8C\\x1d\\x05\ubfd6': 1617396302633084.0,\n       '\u00d9\u00f0': 1.9254360946869576e+16,\n       '\\U00041683B\u00dd\\x1c\u00b7\\U000e6afc\\x9a^\\U000cf1a3\u00cd\u00c5\\x13]\u00a7]3B\\U0010490e\u00e1>\\x0c\u00ce\\U000bc070': -16465,\n       '\u00c1': 5.163456824510392e-251},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(5_196_466_883_632_867_417, 20195)},\n      slice_comments={(-22957, 24075): '2',\n       (-13956, -25851): '\\x85G\u00b1\u00feU\\U000aabe6;\\n@\u00e1',\n       (87, -9511): '\u00cb\u00d0o\\x18En>'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=8645, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-13702,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\ud84a\udde1\ud84a\ude16\ud84a\ude4d\\U000b2def',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [141743, 218525, 333223, 512972, 680786, 1004502]),\n         ),\n         'min_size': 0,\n         'max_size': 80},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x1e\\x11\\xe8\\x08\\xda%t\\x90',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-20,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=1_077_963_598,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 0),\n                                     ('c', 3, 1)),\n                                    (('b', 0, 1), ('c', 1, 0)),\n                                    (('b', 1, 0), ('c', 0, 1)),\n                                    (('c', 1, 1), ('a', 3, 2)),\n                                    (('c', 1, 2), ('b', 2, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='1\\x05\\x8d\\x06\\x94',\n      has_discards=True,\n      target_observations={'\u00f7\\x05\u00db\u00b5\ud859\ude45Uv\\x1f\\x06\\x1a\u00d5\\x90\\U000fe695\\U0002f15aM\u00d2\ud822\udeef\u00bd': 1.7976931348623157e+308,\n       '\\U0004e357\u00ea\\x81G_': 2.2939874800633633e-202,\n       '\\U00087454\u00e0\\U0008ec88\\U000b2526\u00bfN\\x88': 11329,\n       '\u00c2': 0,\n       '\u00b1\u00d4:\u00d1Ex': -1.1898122863541064e+155,\n       'default_database': 10842},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-20897, -5403),\n       (-112, 21661),\n       (92, 72),\n       (1_981_988_205_349_189_934, 4161)},\n      slice_comments={(78, 1000): 'E\u00db'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=18478, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-1.7976931348623157e+308,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 1e-323},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.2126348772785369e+308,\n        constraints={'min_value': -3.5650754566057384e-48,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.9034738607360536e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.5544340620843721},\n        was_forced=True,\n        index=None)),\n      length=32096,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('b', 3, 1)),\n                                    (('b', 1, 1), ('a', 2, 1)),\n                                    (('b', 1, 3), ('b', 2, 0)),\n                                    (('b', 2, 0), ('b', 2, 0)),\n                                    (('b', 2, 2), ('a', 2, 3)),\n                                    (('c', 0, 1), ('b', 2, 0)),\n                                    (('c', 1, 1), ('c', 1, 3)),\n                                    (('c', 1, 3), ('c', 3, 1)),\n                                    (('c', 3, 0), ('c', 3, 0)),\n                                    (('c', 3, 1), ('c', 3, 3)),\n                                    (('c', 3, 3), ('b', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='--collect-only',\n      has_discards=True,\n      target_observations={'\\xa0;\u00b3J\\xa0': -8367,\n       '999999999999999999999999999999': -5.264563379959507e+71,\n       '=': 1000,\n       'w\u00fd\u9caf.\\U000d3b02\u00f9\u00c7': -10340,\n       '1/0': -2.7033795697194894e+105,\n       ' \\U0008fa49\u2bc0\u00e7\\U00101d72:\ud83a\udd34s\\x9c\u00c3\\U0001eaa1r\\x87A\\U000425a0\u00ba>\u00df\u00db\u00e04,B\\U000d7150k@\\x11\\U000a3987\\x03\\x0b\\U000596fa\u00b4': 4.1356645814132616e+110,\n       '\\x8d\u00e9\u00d50\ud843\udcd6\\x85': 6.9151826438557976e+16,\n       '\\U000bf70b': 65535,\n       '': -26751,\n       '2': -8901},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_080_491_532, 25803),\n       (-17341, -31197),\n       (-10125, -3355),\n       (8192, -125)},\n      slice_comments={(95, 22): 'mo\ud870\udf25\\x86\\U00093185\\U000ede5f',\n       (512, -22480): 'R'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-344088644, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=512,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -22700,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00096c1b\ud85e\udc4e\ud85d\udfde',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [161715, 174971, 342975, 418194, 498416, 658407, 664089],\n             ),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'g\\xe4\\x00\\x84\\x17\\xae\\x98\\x18e',\n        constraints={'min_size': 8, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U000523a8\ud885\udc80\ud885\udc31\ud885\udc22',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [201609,\n                  254778,\n                  297109,\n                  357602,\n                  516950,\n                  849126,\n                  891131,\n                  1006767,\n                  1074984],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u04f9\\U00071a4c\u042f\u0447\u042b\u0444\\U000e4198\u04c7\\U000b053a\\U0001583f\u0431\u043c\u04eb\u0466\u04c2\u0482\u0499\u0452\u047b\u043f\u042a\u04fe\\U0007d59c\u0423\u0404\u04e2\\U0005756d',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1024,\n                  277611,\n                  345629,\n                  513460,\n                  696438,\n                  768922,\n                  902850,\n                  978994,\n                  1004366,\n                  1009674,\n                  1032242,\n                  1036117],\n             ),\n         ),\n         'min_size': 15,\n         'max_size': 115},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u54cd\u5516\u5475\ud870\udcb7\u551e\u5494\u5464\\U00047684\\U00045195\ud841\udff1\\U000717be\ud87a\udc17\u551b\\U0006ec36\u54ef\u5469\u54c7\u543f\u5436\u547a\u54a2\u5514\u54b4\\U0001582c\u5525\u54cf\u552a\u5473\u5526\u54b7\u5439\u54bf\u5497\\U0003c144\u54c8\u5464\u54dd\\U0005f77b\u550d\u54ea\u54fe\u546d\u54e9\u54a9\u54c2\u550a\u54cb\u54a8\\U00038836\u547c\u54b5\u5490\u54f5\u5432\u54ea\u5487\u5464\u5452\u5452\\U00043cb3\u54a5\u548e\u549b\\U0006fdaf\u54ee\u5484\u54bc\u54de\\U0001eb64\u545f\\U0005f1e3\u54e5\u5459\\U0003933c\u54d2\\U00056789\u54d7\u5508\u54bb\u550a\u549c\\U00062470\ub3ef\ud820\udeaf\u5474\\U0006dbd5\u54ee\u549c\u54ea\u543f\u5438\u5453\\U00048dc1\u5492\u5478\u54eb\u5518\u5525\u548a\u5529\u54f0\u542e\\U0003943c\u5491\u54ee\\U0005988f\u5521\u5478\u5528\u54a0\u5431\\U0004629a\u5525\u54f1\u54ed\\U0003ebd0\u54a6\\U000636ba\ud850\udf1e\u54a3\u54ef\u5485\\U00034aa0\u54ff\\U00037ec6\u9aa7\\U0005b295\\U00041cb7\u5468\u5509\u5505\u547e\\U0005c867\u9c3b\u5439\u54ea\u5511\u5475\u543c\u54ba\u5527\u5466\u54dd\u54dc\u548c\u54cf\u543a\\U00012cfe\u551d\u54b6\u547d\u54d8\u54fa\u549f\u5439\u5476\u54f1\u54b4\u54e2\u54d5\u54a8\\U0002f3e4\u54d7\u54a3\u547b',\n        constraints={'intervals': IntervalSet(\n             build_intervals([21549, 466941])),\n         'min_size': 37,\n         'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-2017,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\x88',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'LPT1': -1.3332291756885049e-112, '': 73},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-7483, -124),\n       (-2870, 6_830_277_741_187_514_272),\n       (-119, -17943),\n       (-32, 24072),\n       (41, 15050),\n       (111, 24760),\n       (114, 22895),\n       (512, 404),\n       (1000, -22335),\n       (107276902, 28_101_911_740_912_873_317_082_752_702_899_247_246)},\n      slice_comments={(-19936, 72): 't\\U000b6f89\u3c67\u00f2\\x1d \\U000da7d4'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.008177125011570752,
          "overall:gc": 0.0003025829792022705,
          "generate:args": 0.11635921115521342
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878939.2727098
      }
    ],
    "corpus": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=114, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='J\\x87(\\x81]\\U0005c886\u00c8\\x86Z\\U000fbc1b\ud869\udd48[_\\x94\u00f9\\x14\u00d3A\u00cf\ud854\udf5di)(\\x81\ud844\ude49\u00c5;\\U0003fdc1\u00ddr\ud880\ude18\\x9f\\U0004162bq\\x1f\u00fc\ud854\uddf5\ud883\ude3a',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  1000,\n                  75347,\n                  86795,\n                  127064,\n                  278176,\n                  334315,\n                  339442,\n                  376662,\n                  381938,\n                  582565,\n                  623706,\n                  653311,\n                  669229,\n                  998945,\n                  1032090],\n             ),\n         ),\n         'min_size': 35,\n         'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),),\n      length=-33,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 1, 2),\n                                     ('a', 1, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('', 0, 0, 'reason'),\n      expected_traceback='\\U00099425-\u00d3\\x99',\n      has_discards=True,\n      target_observations={'\\U00092933\u00c6\u00b4\u00f7\u00e2\\U00081c0fR\\x94\ud09d\u1fa8\\x16\\x94\\U000153c4': 8614,\n       '\u00cd\ud81e\udc68': 1.7015649964719224e+256},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-28549, 23110),\n       (-28332, 6),\n       (63, 512),\n       (11273, 75),\n       (573995923, -28504)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.000860041007399559,
          "overall:gc": 0.0,
          "generate:args": 0.06857650092570111
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878955.6961558
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-7408, context=(), group_elems=()),\n      nodes=(),\n      length=92,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 1),\n                                     ('b', 3, 1)),\n                                    (('c', 1, 0), ('b', 3, 1)),\n                                    (('c', 2, 1), ('c', 0, 3))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\U000c094c\u00bf\\x1d',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback='B',\n      has_discards=True,\n      target_observations={'\u00a7S\u00e9,\u00c1\u00af<\u00ff\u00fd\u00e8}\\x1d\u00e7T8': -14832,\n       '\u00f8\\U0001ba0f\\U0008ee1f\\x96\\x1a\u00d0\\U000f41c1\\x88\ud84b\udd53\\x14f82\\U000622b8\\x7f': 19491,\n       'D\\U0006fd59': -6040,\n       '\u00ca!\\x8bq': 3.71366878616501e+16,\n       'e5\u00d1\ud856\udd93f': 1.608241474245661e-193,\n       '\\x90`\\U00014d47+\u00e6\u00e3\u00ed\u00d2\\U000e5b33\u00c6\\x15Y\\U00080bc4': -11770,\n       '\u00e3\\x87\u00c9\u00c7f\u00ff\u00f4\\x05\\U000370fe\\x1d\u00b0\\x9eGF\\x86Fh': -5171,\n       '\u00b7\\x7f\u00d8\\x84\\U000e9c36\\U000f9e7f\\x7f': -1.1314993782014426e+16,\n       '\u00f3E\ud869\udf23\\U0003262c\u00d0\\U00088c57/\"\\x8f|': -6.9111933184395544e+16,\n       \"\\\\_'\\x98\u00e7\\x91\\U00093abd\u00caj\\x8a\": -3.476297106905821e+16,\n       '\u00c7\\U000a1f1e\\U00083a64\\x90': -2.6314742908717932e+16,\n       'false': 25154,\n       '': -14869},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-30097, 14290),\n       (-27927, 2878),\n       (8192, 17422),\n       (2_065_963_958, -18204)},\n      slice_comments={(-4127, -94): '', (-27690, -9587): '', (-78, -7654): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-111, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=-10556,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),),\n      length=-10813,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('c', 3, 1)),\n                                    (('a', 2, 1), ('b', 3, 1)),\n                                    (('b', 0, 1), ('b', 0, 2)),\n                                    (('c', 3, 0), ('a', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'X\u00e3\u00a5m': 9999,\n       '\u00e0\\x01V(\\x1e\\x02\\U000b7879\u00b5\u00a7\u00ae8': 1.827159291571461e+31,\n       '\u00de\u00d6': 2.2250738585072014e-308,\n       '\\U0008e576\\U000400b1': -4158458846596501.0,\n       'initial_type': -5.7074078010550376e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=512, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 3.93164284466209e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u53e6\u5483\ud860\uddee\u5444\\U0009f973\\U0007e0bc\u53e7\u53fa\u5461\u54ae\u549a\u53df\u547e\u53b1\u53fb\u53d8\u5432\\U0009700b\u5408\u549e\u5469\u5479\u53f3\u53dd\u545e\u53f7\u54a2\u53b9\u53fe',\n        constraints={'intervals': IntervalSet(\n             build_intervals([21425, 84345, 141500, 176773, 514645, 690584]),\n         ), 'min_size': 14, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.4224709877080063},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b\"\\xc3*\\xe0\\xf6\\x96\\x91\\x16g\\x82\\xb9\\x16\\x00\\xa1\\xc0\\xd4\\xf2\\x18\\xf7\\xf4\\x16\\xef\\r'5\\xb2\\x9a\",\n        constraints={'min_size': 7, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-9612,\n        constraints={'min_value': None,\n         'max_value': 6_729_794_477_680_807_361,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7861167239040558},\n        was_forced=True,\n        index=None)),\n      length=-99_558_811_823_353_448,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\U000829ceTh\u00c2\u00c6\\x98neb\u00b4\u934a\\U000550ee',\n                     [UnicodeTranslateError('\\x0f\u00ec\u00ab1i\u00b7\u00e9', 0, 0, 'reason'),\n                      UnicodeTranslateError(';\u00e1\\U00056453+\\x05\\U0008baf0\\x99',\n                                            0,\n                                            0,\n                                            'reason')]),\n      expected_traceback='-\u00e8\\U0005804b\\x84\\x15\\U000799cf}\\t\u00a3',\n      has_discards=True,\n      target_observations={';Cu': 80,\n       '\u00a8\u00f8\\x9aZp\u00a1': 100,\n       '\\x01\u00cd\\x16': 2.1732441407749516e+16,\n       '\\x85\u00cc': 309,\n       '\\U000ef3db\u00e4\\U0008dbe9': -43,\n       '\\U000d8e1fY\\U0009ec16\\x12\\x93\ud821\udf4e\u00ba\ud887\udc42\u00f0\\x03\\x98*K': 5480756189482945.0,\n       'R\\x1d\u00a3\\x1c\u00a5\u00ff\\x7f\\x1c': 8192,\n       'e\u00bb\\x1a': -0.0},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-68_361_055_265_670_446_932_344_341_149_856_419_520, 15703),\n       (-25541, 20481),\n       (-21882, 99),\n       (1876, -30274),\n       (5252, -4173),\n       (21392, 3093),\n       (23210, 1_271_880_795),\n       (23406, -18547),\n       (6_728_300_840_037_548_438, -6458),\n       (20_814_132_028_465_719_002_594_457_121_440_709_888, 26)},\n      slice_comments={(1205, 28): 'I\u00ea\\x17',\n       (-561_006_015_959_572_494, -21219): '',\n       (-761_850_268_827_483_558,\n        -23828): '\u00ac|\u00abH\\U0004987f\u00fc\u00a2 \u00c2\u00b4\\U000f8897\\x8bm=t\u00fb?',\n       (-28028, -2_120_469_607): 'G\\x04F\u00b7\\x97\ud847\udc1e)\u00a2^',\n       (15884, 50): '\\U0004431d',\n       (-4_618_056_693_869_579_751, 29231): 'i\\x10\\x15',\n       (8_881_260_801_383_842_789, -17442): '\u00e6',\n       (30775, -7_279_580_754_656_982_777): 'F~\u00fe',\n       (-55, 682297596): '\u00c6\u00ff\\x02',\n       (118, -11141): '2',\n       (-31651, -2_080_654_611_292_469_027): 'k',\n       (13556, 5585): '\u00cf\u00eaM\\x0c\u00b5\\U0003cb1dQ\u00d2y',\n       (31, -16719): '\u00ea\\x98\\x88\\U000e7294b\\xa0',\n       (-22149, -59): '\\xa0\u00a8\\x05\u00b4\\U00106412\u00d8\\U00079743Y\\x93o\u00b4\u8457\u00b6\u00c3',\n       (9180, -16): 'H',\n       (-45, -1660): '',\n       (12924, -31912): 'S\\U000d1bd6\u00c1K\\x19\u00c9\\U0001fc40-&',\n       (26611, 3626): '\\x1d\u00a6\u00e3\\r$\u00f1\\x0c\u00bf\u00b2\u00b1'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.001068208017386496,
          "overall:gc": 0.0,
          "generate:args": 0.030441580980550498
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878947.914756
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=23738, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\\U0006d76d\\U0006d70c',\n        constraints={'intervals': IntervalSet(\n             build_intervals([448144, 910157, 1026906]),\n         ), 'min_size': 0, 'max_size': 29},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=44_676_302_812_144_795_841_707_707_487_740_352_043,\n        constraints={'min_value': 13527,\n         'max_value': 127_792_607_655_212_389_174_532_683_899_233_954_943,\n         'shrink_towards': -19,\n         'weights': {18594: 0.0014539844734610028,\n          44_676_302_812_144_795_841_707_707_487_740_352_043: 0.7345431890269138}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x1e&\\x15\\x18\\xd4\\xd5\\x9cx\\xb6\\xbd\\xb5\\x9e+\\' \\xfc\\xb0\\xfc\\x04\\xfc\\x9a-ANBU\\xb06m\\xa5\\x07\\xeezO\\xd0:J\\xc7(\\xbd\\xaa\\xc2\\xf3\\x0b53{\\x96\\xd1\"',\n        constraints={'min_size': 15, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=2_825_076_514_667_841_903,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-6607,\n        constraints={'min_value': None,\n         'max_value': 66_773_815_592_755_419_000_249_066_270_968_161_193,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00010e0c\\U00010d52\\U0004e565\\U00010dd4\\U00010df7\\U00010de1\ud803\udd35\\U00010dd1\\U00010d49\\U00010e2e\\U00010dd4\\U00010e24\\U00010e2a\\U00010e0d\\U00010dd7\\U00010d5f\\U00010db0\\U00010e0b\\U00010d6c\\U00010d8e\\U00010e2c\\U00010db4\\U0003684a\\U00010e28\\U00010d9c\\U00010d62\\U0009b536\ud803\udd37\ud85b\udc49\\U00010dc4\\U00010e23\ud803\udd36\\U00098d08\\U000a2b2e\\U00010d71\\U00010d49\\U00010dca\\U000be59c\\U0009da88\\U00010da3\\U00010d5e\ud803\udd35\\U00010d9f\\U00010d57\ud86f\ude82\\U00010e26\\U00010d72\\U00010dea\\U000afcc0\ud84c\udc09\\U00010ddc\\U00010d73\ud803\udd39\\U000a7f16\\U00010dea\\U00010d81\\U00010d40\\U00010e2a\\U00010df8\\U00010da4\\U00010dca\\U00010e11\\U00010d79\\U00010d85\ud834\udf61\\U00010d85\\U00010daa\\U00010db4\\U00010d3d\\U00010d57\\U00010de5\\U00010da5\\U00010d85\\U00010da6',\n        constraints={'intervals': IntervalSet(\n             build_intervals([68913, 490727, 554801, 857068, 930682]),\n         ), 'min_size': 38, 'max_size': 138},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.38372848858705233},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 5.960464477539063e-08},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xde1\\x9b',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-38,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 0, 1),\n                                     ('a', 0, 0)),\n                                    (('b', 1, 2), ('c', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\ud856\udebbWPC\\U000381df5': 15065, '\u00a5F\\x87\\x9f': 32982331},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(39, 801), (1815, -10)},\n      slice_comments={(-281462942, 44): '\\x10\u00ca'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.005071375053375959,
          "overall:gc": 0.0,
          "generate:args": 0.016424998990260065
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878925.513966
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-6316434833492818122, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=17105,\n        constraints={'min_value': -5463,\n         'max_value': 20465,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xbb\\x08\\xf4\\xcc\\xe4k',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xbb\\xa2\\x04\\x1a$\\xc4cs\\x8b\\x02fuS\\xf8\\xe5\\x89\\xffmV\\xb1\\xb5\\xbf\\x8d\\xe6,\\xa8\\xdd\\xde\\x90\\x96\\xe7q\\x03\\xe7\"TL6rH\\xb8\\x87\\xbb \\xba\\x81i\\xdf\\x94+pj\\xe2\\x94o\\xca\\x9a\\x9c\\t\\xed\\xffABn-\\xa7k\\xa4\\xa1ai\\x98\\x01\\xe1\\x05jl\\xb3\\x9e6\\xec\\xfb\\x9b\\xa1h\\xed4WPO\\xcc\\xfbS*',\n        constraints={'min_size': 13, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.2694354246086977},\n        was_forced=False,\n        index=None)),\n      length=1211,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 1, 1),\n                                     ('b', 2, 1)),\n                                    (('a', 2, 1), ('c', 0, 3)),\n                                    (('b', 1, 0), ('b', 0, 3)),\n                                    (('b', 3, 1), ('b', 1, 3)),\n                                    (('c', 1, 0), ('b', 0, 0)),\n                                    (('c', 2, 1), ('b', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('\\U000b2027~\\x80\ud86f\udc13-a&v\u00b7\\U000bc031\\U0003bd94\u00b2\\U0003afb5\\U000862b0\u00e6\\U00071477k\u00e6\u00f3i',\n                            0,\n                            0,\n                            'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\ud835\udc7b\ud835\udc89\ud835\udc86 \ud835\udc92\ud835\udc96\ud835\udc8a\ud835\udc84\ud835\udc8c \ud835\udc83\ud835\udc93\ud835\udc90\ud835\udc98\ud835\udc8f \ud835\udc87\ud835\udc90\ud835\udc99 \ud835\udc8b\ud835\udc96\ud835\udc8e\ud835\udc91\ud835\udc94 \ud835\udc90\ud835\udc97\ud835\udc86\ud835\udc93 \ud835\udc95\ud835\udc89\ud835\udc86 \ud835\udc8d\ud835\udc82\ud835\udc9b\ud835\udc9a \ud835\udc85\ud835\udc90\ud835\udc88': -1.7021306080378784e+16,\n       '\u00f4\u00ee\u00a4\ud86d\udcdb-\\x1e\\x9f\u00d3m\u00f4\u00b9\u00fb': -4.082785821868438e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-17044, 23151), (-7672, -4113), (-23, -13055), (-7, -116)},\n      slice_comments={(367963495,\n        -26791): '\\U000f12b5\u00d8\\U000f99d4w\u00e31\u00de\\U00066472',\n       (5_380_437_415_606_345_968, -8): '',\n       (-31290, -102): '\\x8f'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0010429170215502381,
          "overall:gc": 0.0,
          "generate:args": 0.0069627920165658
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878949.3723168
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1000, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xba\\x83',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=8192,\n        constraints={'min_value': None,\n         'max_value': 17395,\n         'shrink_towards': 1_465_128_296,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U0009da48\\U0009da72\\U000ba3b8\\U000af9a5\\U0009da07\\U0009da69\\U000b88e5\\U0009da82\\U0009da27\\U0009da8e\\U0009da62\\U0009da50\\U000af0ab\\U0009da58\\U000b003b\\U0009da05\\U0009dacc\\U0009da51\\U000ae620\\U0009daa3\\U0009da65\\U0009da63\\U0009da81\\U0009dabe\\U0009dae7\\U0009dab9\\U000b58de\\U0009dad3\\U000a1767\\U0009da02\\U0009da21\\U0009da32\\U000a7e4c\\U0009daae\\U0009dad3\\U000b6d63\\U0009da9c\\U0009da19\\U0009dafb\\U0009da01\\U0009da44\\U0009dae9\\U0009da7c\\U0009daa6\\U0009da78\\U0009da78\\U0009da70\\U0009da2c\\U000a4043\\U000b3aca\\U000a3d29\\U0009da0e\\U0009da5e\\U0009dabb\\U0009da6b\\U0009dabf\\U000a7a5f\\U0009dac5\\U000b6d2d',\n        constraints={'intervals': IntervalSet(\n             build_intervals([645630, 858995]),\n         ), 'min_size': 46, 'max_size': 146},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.463338073468325e+308},\n        was_forced=True,\n        index=None)),\n      length=11617,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('b', 2, 2),\n                                     ('a', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'b': 22165, '\u00bb\\U000f7dd1\u00da': 3.5566916562140852e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-7_440_020_412_968_408_509_919_745_421_593_293_084, 85),\n       (-12064, -4087),\n       (28006, 13587)},\n      slice_comments={(-27283, 8192): '\\U00037043~\u00f0T\\U000413c9}',\n       (103, -28555): 'I\\x9f',\n       (-95, 13076): '\\x7f\u00ba?G\u00f6\u00fe\\\\I\u00c9\\U0009b0c1\\U00108ecf\\x8e\u00e9\\U00010d8c'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0004978330107405782,
          "overall:gc": 0.0,
          "generate:args": 0.013450125232338905
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878941.8777862
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-907351584367536227, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 3.6217446018626643e+39},\n        was_forced=False,\n        index=None),),\n      length=16195,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 1),\n                                     ('c', 3, 1)),\n                                    (('b', 0, 3), ('c', 2, 2)),\n                                    (('c', 0, 3), ('c', 3, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(70, 16610): '\";\u00e2f',\n       (29916, 8221): '\\x90\\U000b44ec\u00d8\\x03',\n       (18926, -5_463_049_400_178_721_604): 'z\\U00084ae3\u00bc\u00b1:\u00b0\\x1c=\u00cb\u00b0',\n       (-18581, -81): '\\U00088ce3\\x9f\u00b4',\n       (50, 30015): '\ud856\udefc\\U0005529a\u00e7d\u00a41n\\x1f\u00d9'},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0004925410030409694,
          "overall:gc": 0.0,
          "generate:args": 0.00397020997479558
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878970.041533
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=43, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=1.2197762165671243e+308,\n        constraints={'min_value': -5.922154557208791e+16,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 2.3277084170233635e+254},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -2.2363554347643104e-103,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5.670284159663921e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-21441,\n        constraints={'min_value': None,\n         'max_value': -20413,\n         'shrink_towards': -3458,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\xf5\\x1e@\\x15\\xf4j\\x9c\\xd8\\xd4-\\x05\\xb7\\x8cde\\t\\xce\\x15\\x88O\\x8bS\\x13z\\xd91\\x08\\x02O\\xd2:\\xfb\\xf0\\xe8\\xf4\\xde\\x8b\\x80V)<J*\\x7f]D6\\xbc\\xe9`0\\xa1\\xc5\\xb4\\x90\\x11`\\xdf!@@\\x80\\xb9\\xceO\\xfb)\\xf7\\x03\\xe0J\\x97\\x92\\xea\\xa7\\xbe\\xe3*\\xb8\\xcf\\xc4\\xfaAT\\xdc^\\xd3 \\xdaH\\x07X\\xc3\\xc9\\x17a',\n        constraints={'min_size': 29, 'max_size': 129},\n        was_forced=False,\n        index=None)),\n      length=30800,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 0),\n                                     ('b', 3, 1)),\n                                    (('a', 0, 0), ('c', 3, 1)),\n                                    (('a', 0, 2), ('c', 2, 0)),\n                                    (('a', 1, 0), ('c', 1, 2)),\n                                    (('a', 1, 1), ('a', 1, 3)),\n                                    (('a', 1, 2), ('a', 2, 2)),\n                                    (('a', 1, 3), ('c', 2, 3)),\n                                    (('a', 2, 1), ('b', 0, 3)),\n                                    (('a', 2, 2), ('a', 2, 2)),\n                                    (('a', 2, 2), ('b', 2, 1)),\n                                    (('a', 2, 3), ('c', 2, 1)),\n                                    (('a', 3, 1), ('a', 0, 2)),\n                                    (('b', 0, 0), ('a', 0, 1)),\n                                    (('b', 0, 1), ('b', 0, 1)),\n                                    (('b', 0, 2), ('a', 2, 0)),\n                                    (('b', 0, 3), ('b', 1, 1)),\n                                    (('b', 1, 1), ('a', 0, 2)),\n                                    (('b', 1, 1), ('b', 3, 1)),\n                                    (('b', 2, 1), ('a', 2, 1)),\n                                    (('b', 2, 2), ('b', 1, 1)),\n                                    (('b', 2, 3), ('a', 2, 1)),\n                                    (('b', 3, 1), ('a', 0, 3)),\n                                    (('b', 3, 1), ('a', 3, 1)),\n                                    (('b', 3, 1), ('b', 0, 0)),\n                                    (('b', 3, 1), ('c', 3, 2)),\n                                    (('b', 3, 2), ('c', 0, 1)),\n                                    (('b', 3, 2), ('c', 2, 0)),\n                                    (('b', 3, 2), ('c', 3, 1)),\n                                    (('c', 0, 1), ('b', 2, 2)),\n                                    (('c', 0, 2), ('b', 1, 3)),\n                                    (('c', 0, 3), ('b', 3, 1)),\n                                    (('c', 1, 0), ('a', 2, 1)),\n                                    (('c', 1, 3), ('a', 3, 1)),\n                                    (('c', 2, 0), ('b', 1, 2)),\n                                    (('c', 2, 2), ('a', 1, 0)),\n                                    (('c', 2, 2), ('a', 3, 0)),\n                                    (('c', 3, 2), ('b', 0, 0)),\n                                    (('c', 3, 3), ('c', 3, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('\\U000ba604\u00fe\\U000e0f26',\n                     [UnicodeTranslateError('null', 0, 0, 'reason')]),\n      expected_traceback='\u00b2',\n      has_discards=True,\n      target_observations={'\u00a5g\\U00089eb6\\x18\ud87a\udea7': -6453741675510663.0,\n       '6': 2695253198803117.0,\n       '.': 2.225073858507e-311},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-11137, 1851), (-67, 21469), (3329, 31772), (16854, 19963)},\n      slice_comments={(522, -1_595_507_617): '\\x19`',\n       (54_949_753_494_270_374_745_553_295_733_513_088_826, -754): 'replay',\n       (23, 104): 'then'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-30494, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=7248,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -5873,\n         'weights': None},\n        was_forced=True,\n        index=None),),\n      length=92,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\\U0007e824\\U0004c11a\\U000b7387\\x17\u00db',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00d0\u00d7\\U0007d6d9\ud861\udc66\u00d9': struct.unpack('d', struct.pack('Q', 0x7ff8000000000001))[0],\n       '\u00e7g.\\x7f<\\U000afbd1': 241,\n       '': 6.647750308373938e+267,\n       '|\u00c8': -23714,\n       '\\U0003a941\u00e9\\x97\u00fb\\U00107f70\\x9e\u00c9O\\x12\"\\x1d\\U0007df3a\\x87\u00ea\\'qB\\U000b5bae': 15419,\n       'surrogatepass': 4345,\n       '\\x84\u00cc\u00c8\\U0006a831\\x14\\x07': 4.3872619509834407e+282},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-22, -108), (38, -26300), (11758, 24043)},\n      slice_comments={(-8322, -5316): '\\x03',\n       (6_929_868_555_855_650_101, 36): '',\n       (-26650, 53): '\\U0008d213\u00b5',\n       (-15472, -28420): '5^{\\U00056273\\x1e\\x1d\u00db\\x8b\\x0c\u00eb'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-7101, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='string',\n        value='\"\\x95\u00c2\\x8c\u00cf\\x06\\x88A\u00fb\\x96',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [0,\n                  90472,\n                  184997,\n                  191700,\n                  229874,\n                  444007,\n                  490781,\n                  591950,\n                  815626],\n             ),\n         ),\n         'min_size': 0,\n         'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 919665044896252.0},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.1537442246971488},\n        was_forced=True,\n        index=None)),\n      length=-26169,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 3),\n                                     ('b', 1, 1)),\n                                    (('a', 2, 0), ('a', 0, 0)),\n                                    (('b', 2, 1), ('a', 2, 1)),\n                                    (('b', 3, 3), ('b', 1, 0)),\n                                    (('c', 1, 1), ('a', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeTranslateError('', 0, 0, 'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={'\\U000346c9\\n[\u00ec-Y;@': -3.5040338911844544e+16,\n       '\\x03': -89,\n       '': 26873,\n       '\u00b9\u00b3\u00ef': 3.118053531026049e+81},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_881_277_651, 17976),\n       (-32528, -26873),\n       (-23925, -15660),\n       (105, 404),\n       (932, -833),\n       (1000, -108),\n       (31495, -2772)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-3395, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 5.533303149112393e+142},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u04d4\\U0008bba4',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [1024, 1584, 40296, 118142, 367178, 670718, 829671, 972020],\n             ),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 8.202161593584925e-32},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='\u047c\u0402\u0419\u04b3\u0461\u0435',\n        constraints={'intervals': IntervalSet(\n             build_intervals([1024, 670968, 773387, 818297, 1114111]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None)),\n      length=-27550,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-13481, -6_421_392_901_945_859_578)},\n      slice_comments={(25_676_205_282_316_865_498_237_278_807_676_759_969,\n        -7769): 'M\\x03\\U00101054',\n       (8192, 14315): '\\x95\\U000745ab9',\n       (11770, -92): 'n\u00a9E',\n       (19313, -20): '\\x8a\u00bf\\U000117a6\u00d7',\n       (-32474, 57): '>)\\\\'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=13478, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=29084,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 706896539,\n         'weights': None},\n        was_forced=False,\n        index=None),),\n      length=-112,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         '\u00bd\\x9d\\U000b943e\\x9a',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='',\n      has_discards=True,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(28929, -89)},\n      slice_comments={(-54_890_607_857_977_479_648_803_610_500_108_907_330,\n        -6437): '5',\n       (94_969_647_084_539_831_089_562_908_999_473_801_610,\n        -93): ':\u00ceb\u00ed\\U000ab65a'},\n      misaligned_at=None,\n      cannot_proceed_scope=None),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1391, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=14796,\n        constraints={'min_value': 8192,\n         'max_value': 36407,\n         'shrink_towards': 0,\n         'weights': {9456: 0.15509597155492053, 10975: 0.09282861759138149}},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.0},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-6.187794206333102e+16,\n        constraints={'min_value': -6.514940440900109e+16,\n         'max_value': 4.834858482355139e+16,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 6.187794206333102e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-16666,\n        constraints={'min_value': None,\n         'max_value': -25,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='string',\n        value='\\U00010068\ud800\udc1c\\U000d6555\\U0010b1b0\ud800\udc56\\U0001007b\ud800\udcd0\\U00010066\ud800\udc0d\\U00010070\\U000477c0\ud800\udcc6\ud800\udc0e\\U0007259c\\U0001003e\ud800\udc02\ud800\udc9f\ud800\udcd7\ud800\udc1b\ud800\udcc3\\U0001004e\\U000e7a91\ud800\udc17\ud800\udc2d\ud800\udccf\ud800\udce9\ud862\udf4a\ud800\udc43\ud800\udcde\ud800\udcc6\ud800\udc4c\ud800\udcf2\\U000f88de\\U000ca23b\ud800\udc52\ud865\udc3e\ud800\udc09\ud800\udc0a\ud800\udca3\ud800\udcc9\\U00045069\ud800\udc49\ud800\udcc4\ud800\udc28\\U0001004e\\U00034e28\\U00010065\\U0001006e\ud800\udc32\ud800\udc31\ud800\udc12',\n        constraints={'intervals': IntervalSet(\n             build_intervals(\n                 [65535,\n                  360873,\n                  455749,\n                  482124,\n                  493818,\n                  603442,\n                  808557,\n                  1114111],\n             ),\n         ),\n         'min_size': 18,\n         'max_size': 118},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=-36_254_900_516_482_109_058_145_025_029_829_339_501,\n        constraints={'min_value': None,\n         'max_value': 1_847_526_124,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='boolean',\n        value=True,\n        constraints={'p': 0.7291622094124902},\n        was_forced=False,\n        index=None)),\n      length=-33_389_019_904_295_197_180_759_821_036_955_810_459,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('a', 0, 0)),\n                                    (('a', 2, 2), ('b', 3, 1)),\n                                    (('b', 1, 3), ('c', 2, 1)),\n                                    (('b', 3, 1), ('c', 1, 3)),\n                                    (('c', 3, 1), ('a', 0, 1))}),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\\U000f01bc\ua9bf\u00bcZtx\\U0004c217\\U00048b7a\\x14\\U00075011\\x0c\u00ee-\\x15',\n      has_discards=False,\n      target_observations={'\\x1c\\x00\\U000e95fdaf\u00fc\\x8a\u00a4': -23107,\n       '\\x03': 9.56763717917e-129},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-11089, 24824): '\\U000cdc8c\\x17',\n       (-10601, 225298539): '\u092e\u0928\u0940\u0937 \u0645\u0646\u0634',\n       (3_509_685_045_140_455_546, -31517): '',\n       (-3_743_492_904_112_974_221, 18051): '\u00d0\\x86',\n       (-19051, 92): ''},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "updated size": ""
        },
        "timing": {
          "execute:test": 0.010882665985263884,
          "overall:gc": 6.183399818837643e-05,
          "generate:args": 0.06404425320215523
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878923.936069
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=1024, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='boolean',\n        value=False,\n        constraints={'p': 0.2816500899895021},\n        was_forced=True,\n        index=None),),\n      length=17748,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('c', 1, 2),\n                                     ('c', 2, 0))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeEncodeError('unknown encoding',\n                         'F\\x86\\x15\\x0c\u00c9\\U00069d03\\x86S\\U00099119\u00ben\\x13\\U000b4c00m\u00fd\u00c3\\x9e3\u00a2\\U000d507a\u00cf\u00bbc<\\x18',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-4243, -30808),\n       (1_891_745_513, 792_193_006_658_346_899),\n       (203_283_504_364_421_396, -13928)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0002941249986179173,
          "overall:gc": 0.0,
          "generate:args": 0.0025836650747805834
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878958.097636
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-7732, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\x98\\xd0\\xe4\\x06}\\x1cf5',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None),),\n      length=39_874_597_639_115_599_231_642_323_399_952_866_646,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'K\\x9d\\U000c3e28': 9614,\n       '\\U0010b1d6/': 0.0,\n       '': 1.721621468708169e+16,\n       '\u00b7\\U000b3486\\U000c9012!N\\n\u00f6\u00ff{\\U0003d859\\x07\u00b3\\U000d44ae\\x15M': 2.225073858507203e-309},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-19246, 6337), (-130, -12571), (91, 33), (121, -5505)},\n      slice_comments={(5749, -24): '\u00f1\u3efcG\u00b9\u00cfB\\U00048b43',\n       (14403,\n        -15428): '\u00a4\\x9b\\U00045dbb\u00ab\\U000ae988\\U000ebedb/\\x8f\\x93\u00a9\u00b2\\xadL\\U0004d66e\u00ab,\\xa0\\x87',\n       (-12916, -31989): '[\\x83\\x90',\n       (-66, 81): '\\x02'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0001753329997882247,
          "overall:gc": 0.0,
          "generate:args": 0.0034419160801917315
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878921.263399
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-11756, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='float',\n        value=1.7976931348623157e+308,\n        constraints={'min_value': 5.5642194771199336e+16,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 9.635994160023827e+307},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=2.499568961472084e+38,\n        constraints={'min_value': 6.953189542345961e+16,\n         'max_value': 3.402823466e+38,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 3.0901514450288828e+16},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=1.1375706665532834e+308,\n        constraints={'min_value': -1.9,\n         'max_value': inf,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 1.1375706665532834e+308},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': inf,\n         'allow_nan': True,\n         'smallest_nonzero_magnitude': 0.05},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=-inf,\n        constraints={'min_value': -inf,\n         'max_value': 0.05,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5e-324},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([9459, 561175, 976225, 977241, 991163]),\n         ), 'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=False,\n        index=None)),\n      length=23013,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='L\u00fb!x\u00f5\ud859\udcdf\u00a5',\n      has_discards=True,\n      target_observations={'\\x11': 3.2489819756827104e+16,\n       'd\u00d9&\\x15<K\\x93\u00ee\u00e8\\x8e\\U0004f3a2\\U0003e842N\\x86\\U0001a80d\u00bc\\x95\\x03\u00ed\u00ab\\U000731e4': 2.3376727250747956e+16,\n       \"\u00d7\u00e6\u00d1\\x02\ud865\udeee'\": -2.0927428991169064e+16,\n       '\u00f0\\x08\\x10\\U000c68db\\x83I\u00fc\u00f4': 2.2250738585e-313},\n      tags=frozenset(),\n      spans=None,\n      arg_slices=set(),\n      slice_comments={(-64, -27532): '',\n       (70_209_525_789_554_557_908_716_883_291_220_211_870,\n        -12170): '\\U000a565b\\U00087cfc',\n       (-17, -99): ''},\n      misaligned_at=None,\n      cannot_proceed_scope='other')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00019583303947001696,
          "overall:gc": 0.0,
          "generate:args": 0.0203966679982841
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878964.864918
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=832, context=(), group_elems=()),\n      nodes=(),\n      length=1_489_910_017_300_339_286,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 0, 2),\n                                     ('c', 0, 3)),\n                                    (('a', 1, 3), ('b', 0, 0)),\n                                    (('a', 2, 0), ('c', 2, 0)),\n                                    (('a', 3, 3), ('a', 3, 3)),\n                                    (('b', 1, 3), ('a', 2, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=ExceptionGroup('d',\n                     [UnicodeTranslateError('', 0, 0, 'reason')]),\n      expected_traceback=None,\n      has_discards=True,\n      target_observations={'\u00e1\u00ee\u00d6%\\U000dba55\\U0005eb14': -8.874092318701217e-79,\n       '': -inf,\n       '\u00eaG\\x8c': -26341,\n       '\\U0007d7fe\u00d0\u00c5\\x007\\x84\\U0003fa66Z\u00e3V\u00c0\\x97R\u00f3S': 1.1856655056624904e+16,\n       ']k\\x16\u00c2': -1399,\n       '\\x03}\u00c1\u00d6\u00f5%\u00eb\u00bb\\x90\u00c3\u00c9wJj\u00bf\\U00108f0a\\x83\u0fb3\u00f2\\x84A\\x06\u00c5\u00fb': 24464,\n       '\u00a7': 3.977708464519684e+16,\n       'x\\x9c': 31606,\n       '\u00dcO@\ud80c\udda2~': 50,\n       '\u00ae': 32659,\n       '\u00e1\u00b5\\x8c\\U00105cac\\U000bf460\\x05\\x7f': -6594612078156554.0,\n       '\u00d7\\U0001c59b': -62},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(10208, -26579), (12352, -95), (15796, -97)},\n      slice_comments={(-21, 1_562_407_547): '\u00ca\\U0010f48c\\U00014ea3AF\u00ab\u00d8\u00b2',\n       (17217, 8192): '\ud845\uddad\u00ddD',\n       (-3287, -24): 'b`',\n       (-17474, 1367): '2'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-21839, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'\\xd6\\x1f\\xa8\\xb1C',\n        constraints={'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='string',\n        value='',\n        constraints={'intervals': IntervalSet(\n             build_intervals([210697, 321449, 386232, 447452, 513279]),\n         ), 'min_size': 0, 'max_size': 100},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=17220,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 3_769_614_430_664_719_864,\n         'weights': None},\n        was_forced=True,\n        index=None)),\n      length=-11,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback=\"\\U000955140F\u00bd\\U0010c7f3`\u00ef\u00c6M\\U0010a808'\u00a3\u00da\ud867\ude14\u00b2\",\n      has_discards=False,\n      target_observations={'[': -4633635279887920.0,\n       '\\U000e4a9e\\x8bF#\\n)\\x04': 8192,\n       'i\\U000eda21\u00b0\\x1b\\U001041f4/\u00b8\\x13i\\U0007d5bc\\x88\u00be': 21871},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(1923, 512), (19013, -29307), (31486, -15)},\n      slice_comments={(29467,\n        18_475_836_818_965_818_318_326_263_135_725_075_139): '\\x8f\u00e6',\n       (26400, 1024): '\u00ddE\\xa0',\n       (-24218, 776): '\\x99\\U000e93fd\\U000e85f6\u00d5\ufd7a\u00f3\\x0e\\x80',\n       (10419, -29): 'b',\n       (76, -5462): '\\U000f7399\u00e5C3'},\n      misaligned_at=None,\n      cannot_proceed_scope='exhausted'),\n     ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=61, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'',\n        constraints={'min_size': 0, 'max_size': 22},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='bytes',\n        value=b'\\x9a\\xa8\\x14\\x88X',\n        constraints={'min_size': 0, 'max_size': 10_000_000_000},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='float',\n        value=0.0,\n        constraints={'min_value': 0.0,\n         'max_value': 0.0,\n         'allow_nan': False,\n         'smallest_nonzero_magnitude': 5e-324},\n        was_forced=False,\n        index=None)),\n      length=-17413,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 3, 3),\n                                     ('a', 1, 3)),\n                                    (('b', 1, 1), ('b', 0, 1)),\n                                    (('b', 2, 0), ('b', 0, 2)),\n                                    (('c', 3, 1), ('c', 3, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback='\\x17',\n      has_discards=False,\n      target_observations={'\\U000a909c\\xa0\u00c8\u00b4\u00b7$\u00a3': -3.7582234938346344e+16,\n       'y\u00fdlf$_': 1.1754943508222875e-38,\n       '\u00b1sg': 0.0,\n       '\\x1c\u00acO': -88,\n       'a4`?4\\U000193c6\\U00094980A\\U000f7826\u00c5\u00fd\\x9a;\u00c3\"\\U000fbfc2\\x94\u00e1\\U000cf4ad\u00fd': 6.319431632490689e+44,\n       '\\x1f': 2.225073858507e-311,\n       '&\\x9d\ud843\udf56\u00e3\\x88\\U0005e1d8\\x8e\\U001094dc7`RG': 114,\n       '\\x00\u00f0y\\x98{': 31161,\n       '\u00b4\\U000942f6': 0.5,\n       '\ub69f': -81,\n       'l': 81_006_044_112_855_957_909_503_196_719_055_055_458,\n       'YL\\x85<': -5.865439120372727e+268,\n       '\\U0010d484\\U00076a4a\u00a3\\U000d057a(\u00cc\\U0007a38a\u00c8': 2.7958580201359024e+16,\n       '': -84,\n       'M\u00f2\\x04\u21fdt\\U000c96d3\u00bb6\\U0003eeca\u00fazI': -2.304359701989857e-05,\n       'n5\u00dd\u00e6\\U0010eed4\\U000933fb\u00ea;': -85,\n       '\\x88\\\\6\u00c2\u00bd': -16103,\n       '\\n\\x8e\\U0007941f': -28604,\n       '\u00d9\u00cau\\x0f\\U0006965e': 3.1505225652822116e+16,\n       '\u00e6\u00cf\ud888\udedb\u00fb\u00e9': 25565},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-129_364_127_905_088_359_200_118_722_594_266_033_344, 33),\n       (-32034, 3941),\n       (-19233, -12887),\n       (-16105, -13706),\n       (-89, -8503),\n       (74, -6_228_079_887_781_077_687),\n       (75, 81),\n       (113, -17),\n       (127, 7789),\n       (12113, 32097),\n       (19479, 23774),\n       (434261407, -11716)},\n      slice_comments={},\n      misaligned_at=None,\n      cannot_proceed_scope=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0012980829924345016,
          "overall:gc": 0.0,
          "generate:args": 0.028449166915379465
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878915.5654778
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=68, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='integer',\n        value=2142,\n        constraints={'min_value': 11,\n         'max_value': None,\n         'shrink_towards': 12054,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=9912,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': 0,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=31995,\n      output=None,\n      extra_information=namespace(branches=frozenset({(('a', 2, 1),\n                                     ('a', 0, 0)),\n                                    (('b', 1, 0), ('c', 1, 0)),\n                                    (('c', 0, 0), ('b', 0, 2))}),\n                reports=[],\n                traceback=''),\n      expected_exception=UnicodeDecodeError('unknown encoding',\n                         b'',\n                         0,\n                         0,\n                         'reason'),\n      expected_traceback=None,\n      has_discards=False,\n      target_observations={\"/t\uc6d2\u00c8\\x94\\x87&v\\U0007498b\\x9c\u00d5\u00c3\u00b4\u00cd\u00cd'\\U00040939\u00a9\\U0007cadf\\U0005ae76\u00dd\\U000ac7f8\": 27667,\n       \"\u00c2RF+&U\\U000c39b9\u00ee\\x88\u00b7'+\u00cb\": -5.60024653308749e-130,\n       '%F\\x0f\u00f7s\u00e2m\u00ce\u00dc0\u00f1\\U0010ed57F\\x9c\\x03I\u00bf\\x16\\U0006bfa6)\\U000648efJ\u00bb(\\x05\\uf36f\\x1eJ@D\\x1a$': 0.0,\n       '\u00d0d\\U00036f6c': -6.416953866413301e+16,\n       '\\x00L': 103,\n       '\u00b7}\\U00079b11\u00ae\\U0002f3bdK\\U000be6ac\u00b3\u00d3x\\x1f\u00bf\\U00042055\u00f2': -2.7186819363460092e+16,\n       \"/C'\": -2.1335525912697604e+16,\n       'Z': -8_504_145_012_753_402_411,\n       '\u00a6\\U000b46d7\u00cf\u00a1\u00d7\\x86\u00b8': 28567,\n       'z': -2.526768355449695e-251,\n       '\\U0009483d\u00fd\u3d21\\x11>\\x0c\u00d6': 20645,\n       '': -7,\n       '\u00a5\\x13\\x7f\\x00\\x15\\x895J{o\\x8f': 5.112261606416696e-295,\n       '\\U000ba419y\u00be\u4bbf\\U00086d43': -2270568950172776.0,\n       'O\ud821\uddb4': -397566556541645.0,\n       '\\x9c\u00a5y\u00a8\\x11\\x1c\u00e8\u00a8\\U000c57b1\u00afA\\x02\\x93\\U00096fc0X': -4729,\n       '\\x01\\x93a^\\x99\\U000fe3b4N\u00e4\u00ed\\U0004ca98\\U0001bb55': -1_063_218_365_778_736_533},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-6960, 8034), (-5815, 1147)},\n      slice_comments={(-126, -94): '\ud869\udc3b\\U000b0609\\U000b7442\\x95\\U000c4cef',\n       (-17179, -17874): '=\\x17\\x12\\U0009e2c7\u00ce4',\n       (112, 8144): '-`iX\u00ee\u00c5\\U000e39ba',\n       (-89, 15061): '',\n       (-1_171_548_123, -57): \"o)\u00bc\\x0f\\x06'\\x05\\x08d\",\n       (-16830, 35): '\u00cbH\\x1b'},\n      misaligned_at=None,\n      cannot_proceed_scope='verified')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0005138749838806689,
          "overall:gc": 0.0,
          "generate:args": 0.007244331995025277
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878938.534421
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_corpus_covering_nodes(\n    args=[ConjectureResult(status=Status.VALID,\n      interesting_origin=InterestingOrigin(exc_type=<class 'ValueError'>, filename='/Users/tybug/Desktop/Liam/coding/hypofuzz/tests/common.py', lineno=-11, context=(), group_elems=()),\n      nodes=(ChoiceNode(type='bytes',\n        value=b'.\\x17\\x13\\xef!N\\xa8\\x1bY\\x1d\\xad\\xf1\\xcd\\x1d)\\x17\\x1d\\xc4\\xb7\\xcc\\x9a\\xbd\\xfb\\xe1\\x03\\xa4\\xc5J:8EC\\xae=\\x98\\xebM\\xdfF\\xf3\\xf9\\xedk\\xcb\\xac\\x13\\xbb\\x1c\\xac\\xdf\\x9c\\x85\\x11\\x82\\xff\\xbdjS',\n        constraints={'min_size': 38, 'max_size': 121},\n        was_forced=False,\n        index=None),\n       ChoiceNode(type='integer',\n        value=29564,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -30827,\n         'weights': None},\n        was_forced=True,\n        index=None),\n       ChoiceNode(type='integer',\n        value=6,\n        constraints={'min_value': None,\n         'max_value': None,\n         'shrink_towards': -8409,\n         'weights': None},\n        was_forced=False,\n        index=None)),\n      length=-123,\n      output=None,\n      extra_information=namespace(branches=frozenset(),\n                reports=[],\n                traceback=''),\n      expected_exception=None,\n      expected_traceback='\\x1e\u00d2\u00edK\\U000a5ef8\u00ac',\n      has_discards=False,\n      target_observations={'\\x11Va\\x05s': -81_431_718_985_991_921_696_444_768_675_552_060_406,\n       '': 0.5,\n       'ED\u00b4\\U00066d88\\x8b\\U000d18f4\\U000c1185\u00da\\x90\u00f4': -6.1835383819328455e-152,\n       'S': -27670,\n       'ZJ\u00f0': -8.134130197888255e-296,\n       'c\u00e0\\r\\x8b\u00c0\u00ee\ud808\udeee': -1.2803998921427325e+222,\n       '\\U0004c4f8^1': 1000,\n       '\u00d6\u00d3R\\x9b!\\U000f7e0c3R?\\U000ab362\u00ca\\x99\u00de\\U000ec151': -22945,\n       '\\x1c\u00c9\u00f0\\U000c34f5\u00e9\\x8b\\x1c\u00a63\\x9a\\U000a5b3aAe': 9.221094478344367e-235,\n       '\\x13': 1.716551615020407e+138,\n       '\u00bd\\U000cbb95\\U000c3153!\\x96\\x16\\x08\\U000d10d3\u00ec\\U0009ed28': 1_180_310_455_590_031_579,\n       '1\\x17\\U000d498e\u00eel': -2.180706232880396e+16},\n      tags=frozenset(),\n      spans=None,\n      arg_slices={(-1_052_490_576, 7046)},\n      slice_comments={(-28564,\n        65535): '\u00d1\u6afa\\U0003fbb6\\U00052a6f3\ud875\udde2\\x8a\u00a1\\U000e4685',\n       (7112, -5_678_135_949_262_626_900): '\\U0002fdbf\u00c6\u00b0\u00f6\u00f1]\\t\u00f6#\\x11=C\u00d4\u00be\u00eb',\n       (-101, -5009): 'text/x-patch'},\n      misaligned_at=None,\n      cannot_proceed_scope='discard_test_case')],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from text(characters(codec='utf-8')).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0001765830093063414,
          "overall:gc": 0.0,
          "generate:args": 0.010415665106847882
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_corpus.py::test_corpus_covering_nodes",
        "run_start": 1747878909.542611
      }
    ]
  },
  "tests/test_linearize.py::test_single_worker": {
    "rolling": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=2.2250738585e-313,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=65535,\n      since_new_branch=10672,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=4.87064938219463e-79,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=10507,\n      since_new_branch=300,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1.1,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 30,\n       Status.INTERESTING: 0},\n      branches=28941,\n      since_new_branch=22296,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=114921.28268884264,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 77,\n       Status.INTERESTING: 0},\n      branches=22394,\n      since_new_branch=52,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=341200.13010927226,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 572,\n       Status.INTERESTING: 0},\n      branches=7_089_437_428_275_523_082_627_424_127_524_082_245,\n      since_new_branch=278930586,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=498095.6678198515,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16920,\n       Status.INTERESTING: 0},\n      branches=8_691_046_109_971_129_255,\n      since_new_branch=8192,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=561569.7710717584,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 21342,\n       Status.INTERESTING: 0},\n      branches=9161,\n      since_new_branch=3_907_177_090_071_218_147,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=694808.9806883936,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 506629422,\n       Status.INTERESTING: 0},\n      branches=13305,\n      since_new_branch=1_418_630_901,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=969563.4779866245,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8_498_963_998_846_730_484,\n       Status.INTERESTING: 0},\n      branches=96,\n      since_new_branch=1_382_985_472_118_914_073,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.028005875006783754,
          "overall:gc": 0.0,
          "generate:reports": 0.012511581997387111
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878946.563603
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.0,\n      timestamp=2.618569756818931e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=9999,\n      since_new_branch=22680,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=579667.8704252372,\n      timestamp=8.413447646523877e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16,\n       Status.INTERESTING: 0},\n      branches=4068,\n      since_new_branch=7_745_514_913_325_906_360,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0022661660332232714,
          "overall:gc": 0.0,
          "generate:reports": 0.005000457924325019
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878947.688884
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=1.401298464324817e-45,\n      timestamp=3051046422988935.5,\n      worker_uuid=UUID('ee753da6-e2db-4424-b63a-1cce8fd1a660'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=82,\n      since_new_branch=87_313_345_658_134_974_824_548_191_348_270_381_872,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=0.3333333333333333,\n      timestamp=5663786833974070.0,\n      worker_uuid=UUID('ee753da6-e2db-4424-b63a-1cce8fd1a660'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1296,\n       Status.INTERESTING: 0},\n      branches=14,\n      since_new_branch=14018,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=588023.9945758446,\n      timestamp=1.3980971526152344e+16,\n      worker_uuid=UUID('ee753da6-e2db-4424-b63a-1cce8fd1a660'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5105,\n       Status.INTERESTING: 0},\n      branches=32237,\n      since_new_branch=66,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=756552.1410751746,\n      timestamp=1.4270869523828796e+16,\n      worker_uuid=UUID('ee753da6-e2db-4424-b63a-1cce8fd1a660'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 22041,\n       Status.INTERESTING: 0},\n      branches=5_593_619_357_145_185_673,\n      since_new_branch=31780,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.004205833014566451,
          "overall:gc": 0.0,
          "generate:reports": 0.004583957954309881
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878971.269043
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00022624997654929757,
          "overall:gc": 0.00015999999595806003,
          "generate:reports": 0.0018974579870700836
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878914.727979
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00021787500008940697,
          "overall:gc": 0.0,
          "generate:reports": 0.0016170829767361283
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878963.409756
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=682340.4274859413,\n      timestamp=5.245208528009977e+306,\n      worker_uuid=UUID('78b68a9b-4085-48f6-ab62-b19802afb1f2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 52,\n       Status.INTERESTING: 0},\n      branches=23,\n      since_new_branch=7_239_736_617_794_834_964,\n      phase=Phase.DISTILL)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.002249666955322027,
          "overall:gc": 0.0,
          "generate:reports": 0.0018967909854836762
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878957.799566
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.0,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=0,\n      since_new_branch=0,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.002159374998882413,
          "overall:gc": 0.0,
          "generate:reports": 0.0015899169957265258
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878943.0294132
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0006340420222841203,
          "overall:gc": 0.0,
          "generate:reports": 0.005728166957851499
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878923.5809941
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00022300001000985503,
          "overall:gc": 0.0,
          "generate:reports": 0.0018701250082813203
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878918.094205
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=0.0,\n      timestamp=1.0760182881709554e+308,\n      worker_uuid=UUID('3067310f-0f5d-4a55-9561-0060ad26fda2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 24,\n       Status.INTERESTING: 0},\n      branches=11537,\n      since_new_branch=16509626,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=0.0,\n      timestamp=1.0840026874575864e+308,\n      worker_uuid=UUID('3067310f-0f5d-4a55-9561-0060ad26fda2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 52,\n       Status.INTERESTING: 0},\n      branches=124,\n      since_new_branch=7_165_931_329_127_740_621,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=2.858705293807157e-292,\n      timestamp=1.088489134359284e+308,\n      worker_uuid=UUID('3067310f-0f5d-4a55-9561-0060ad26fda2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 83,\n       Status.INTERESTING: 0},\n      branches=12676,\n      since_new_branch=49,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=7.718913281771014e-288,\n      timestamp=1.1012688765323892e+308,\n      worker_uuid=UUID('3067310f-0f5d-4a55-9561-0060ad26fda2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 84,\n       Status.INTERESTING: 0},\n      branches=7136,\n      since_new_branch=26760,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=1.8275802554675482e-190,\n      timestamp=1.1075502951399976e+308,\n      worker_uuid=UUID('3067310f-0f5d-4a55-9561-0060ad26fda2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 124,\n       Status.INTERESTING: 0},\n      branches=512,\n      since_new_branch=56,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=27653.444114203347,\n      timestamp=1.1650690256406942e+308,\n      worker_uuid=UUID('3067310f-0f5d-4a55-9561-0060ad26fda2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1016,\n       Status.INTERESTING: 0},\n      branches=25177,\n      since_new_branch=1_893_335_369,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=157390.22594578957,\n      timestamp=1.1654553161138575e+308,\n      worker_uuid=UUID('3067310f-0f5d-4a55-9561-0060ad26fda2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2760,\n       Status.INTERESTING: 0},\n      branches=1000,\n      since_new_branch=32280,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=162490.09322867016,\n      timestamp=1.1680578035715838e+308,\n      worker_uuid=UUID('3067310f-0f5d-4a55-9561-0060ad26fda2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 6516,\n       Status.INTERESTING: 0},\n      branches=27481,\n      since_new_branch=15830,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=210050.35565031398,\n      timestamp=1.1698472473840272e+308,\n      worker_uuid=UUID('3067310f-0f5d-4a55-9561-0060ad26fda2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7124,\n       Status.INTERESTING: 0},\n      branches=22775,\n      since_new_branch=21803,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=219925.32685440552,\n      timestamp=1.285894942474192e+308,\n      worker_uuid=UUID('3067310f-0f5d-4a55-9561-0060ad26fda2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 9611,\n       Status.INTERESTING: 0},\n      branches=35,\n      since_new_branch=121,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=325574.2816784193,\n      timestamp=1.2954284667467506e+308,\n      worker_uuid=UUID('3067310f-0f5d-4a55-9561-0060ad26fda2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16827,\n       Status.INTERESTING: 0},\n      branches=22130,\n      since_new_branch=1_622_184_619,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=325852.0288637619,\n      timestamp=1.2971270780170957e+308,\n      worker_uuid=UUID('3067310f-0f5d-4a55-9561-0060ad26fda2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 18029,\n       Status.INTERESTING: 0},\n      branches=41,\n      since_new_branch=112,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=357014.2215691262,\n      timestamp=1.3642386181054453e+308,\n      worker_uuid=UUID('3067310f-0f5d-4a55-9561-0060ad26fda2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 25438,\n       Status.INTERESTING: 0},\n      branches=1470,\n      since_new_branch=19833,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=675275.3237694148,\n      timestamp=1.4007977932410448e+308,\n      worker_uuid=UUID('3067310f-0f5d-4a55-9561-0060ad26fda2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 27487,\n       Status.INTERESTING: 0},\n      branches=4236,\n      since_new_branch=9999,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=684494.1496029046,\n      timestamp=1.4041903062240544e+308,\n      worker_uuid=UUID('3067310f-0f5d-4a55-9561-0060ad26fda2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 30046,\n       Status.INTERESTING: 0},\n      branches=21124,\n      since_new_branch=19600,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=824319.5658595177,\n      timestamp=1.4217251313658948e+308,\n      worker_uuid=UUID('3067310f-0f5d-4a55-9561-0060ad26fda2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_854_684_175,\n       Status.INTERESTING: 0},\n      branches=4_480_338_619_330_486_002,\n      since_new_branch=21381,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=847723.1986676222,\n      timestamp=1.4682224267541174e+308,\n      worker_uuid=UUID('3067310f-0f5d-4a55-9561-0060ad26fda2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_968_349_781,\n       Status.INTERESTING: 0},\n      branches=20,\n      since_new_branch=4446,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=866985.8724418731,\n      timestamp=1.502819323186694e+308,\n      worker_uuid=UUID('3067310f-0f5d-4a55-9561-0060ad26fda2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 4_181_698_536_428_639_919,\n       Status.INTERESTING: 0},\n      branches=58,\n      since_new_branch=16282,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=999999.9999999999,\n      timestamp=1.502819323186694e+308,\n      worker_uuid=UUID('3067310f-0f5d-4a55-9561-0060ad26fda2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8_505_988_756_104_703_229,\n       Status.INTERESTING: 0},\n      branches=58,\n      since_new_branch=1808,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.053760583978146315,
          "overall:gc": 0.0,
          "generate:reports": 0.020981461042538285
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878921.502872
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.0,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=0,\n      since_new_branch=0,\n      phase=Phase.REPLAY)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00028737494722008705,
          "overall:gc": 0.0,
          "generate:reports": 0.0016571659944020212
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878940.737845
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=528575.2906369233,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 32,\n       Status.INTERESTING: 0},\n      branches=98_697_884_578_618_706_456_954_133_887_499_758_088,\n      since_new_branch=19,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=669767.5975982386,\n      timestamp=2.5237529344897467e-101,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 81,\n       Status.INTERESTING: 0},\n      branches=31627,\n      since_new_branch=42,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=826665.5295546137,\n      timestamp=0.05,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 88,\n       Status.INTERESTING: 0},\n      branches=32603,\n      since_new_branch=1_405_312_179,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=829712.7758211864,\n      timestamp=3.338199841546259e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3503,\n       Status.INTERESTING: 0},\n      branches=300,\n      since_new_branch=21087,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=838893.4959363532,\n      timestamp=3.972121355868191e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 23163,\n       Status.INTERESTING: 0},\n      branches=9999,\n      since_new_branch=9,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=970153.6461877452,\n      timestamp=6.513416227085936e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7_406_563_254_467_913_797,\n       Status.INTERESTING: 0},\n      branches=109,\n      since_new_branch=31579,\n      phase=Phase.DISTILL)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.009943957964424044,
          "overall:gc": 0.0,
          "generate:reports": 0.005339333147276193
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878970.1543748
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0002234579878859222,
          "overall:gc": 0.0,
          "generate:reports": 0.0018434160156175494
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878964.531745
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00022891699336469173,
          "overall:gc": 0.0,
          "generate:reports": 0.002321791951544583
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878937.238485
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=1.1754943508222875e-38,\n      timestamp=0.05,\n      worker_uuid=UUID('fbc1af89-7d69-4938-84f7-18fd250c67f3'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7633,\n       Status.INTERESTING: 0},\n      branches=890_757_390_393_405_725,\n      since_new_branch=5038,\n      phase=Phase.DISTILL)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0022270840127021074,
          "overall:gc": 0.0,
          "generate:reports": 0.0031531249987892807
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878924.649888
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=2.2250738585e-313,\n      timestamp=1.251665898642221e+16,\n      worker_uuid=UUID('aec9e521-47b4-470e-8119-f83f5536d78d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 62,\n       Status.INTERESTING: 0},\n      branches=28519,\n      since_new_branch=6993,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=47222.112560662456,\n      timestamp=3.7709299742573954e+107,\n      worker_uuid=UUID('aec9e521-47b4-470e-8119-f83f5536d78d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 114,\n       Status.INTERESTING: 0},\n      branches=21497,\n      since_new_branch=18771,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=222131.56338848177,\n      timestamp=3.2046232601521877e+153,\n      worker_uuid=UUID('aec9e521-47b4-470e-8119-f83f5536d78d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 512,\n       Status.INTERESTING: 0},\n      branches=13495,\n      since_new_branch=14796,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=558008.440052754,\n      timestamp=1.5633633802661503e+307,\n      worker_uuid=UUID('aec9e521-47b4-470e-8119-f83f5536d78d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 26798,\n       Status.INTERESTING: 0},\n      branches=65,\n      since_new_branch=6_745_935_911_129_796_084,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=570663.4859144054,\n      timestamp=1.6432492691523987e+307,\n      worker_uuid=UUID('aec9e521-47b4-470e-8119-f83f5536d78d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8_486_330_768_806_830_284,\n       Status.INTERESTING: 0},\n      branches=59,\n      since_new_branch=1024,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.017224667011760175,
          "overall:gc": 0.0,
          "generate:reports": 0.00780741689959541
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878941.924188
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=0.05,\n      timestamp=4.556901747636899e-17,\n      worker_uuid=UUID('ae2f9e56-1e94-4388-808c-baac2b3aa918'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1024,\n       Status.INTERESTING: 0},\n      branches=1_312_002_777,\n      since_new_branch=21490,\n      phase=Phase.DISTILL)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0022057919995859265,
          "overall:gc": 0.0,
          "generate:reports": 0.0038159170071594417
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878911.465781
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=0.0,\n      timestamp=4.884655259767258e+307,\n      worker_uuid=UUID('1f24345a-b982-4705-b46e-754ea5136b66'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8192,\n       Status.INTERESTING: 0},\n      branches=13495,\n      since_new_branch=65535,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=366049.2033970287,\n      timestamp=7.633795339474842e+307,\n      worker_uuid=UUID('1f24345a-b982-4705-b46e-754ea5136b66'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8192,\n       Status.INTERESTING: 0},\n      branches=24461,\n      since_new_branch=1_516_230_631_926_960_037,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=589634.4528364947,\n      timestamp=1.5775845381349866e+308,\n      worker_uuid=UUID('1f24345a-b982-4705-b46e-754ea5136b66'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 32235,\n       Status.INTERESTING: 0},\n      branches=2499,\n      since_new_branch=32578,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.009321250021457672,
          "overall:gc": 0.0,
          "generate:reports": 0.004845792020205408
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878909.297177
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=1.0640044909071355e-07,\n      timestamp=2.8317437821322972e+16,\n      worker_uuid=UUID('b406dd29-9b57-4d64-8490-5c0914c25b99'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 37,\n       Status.INTERESTING: 0},\n      branches=51_702_977_873_103_392_783_552_769_944_434_526_644,\n      since_new_branch=29750,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=1e-05,\n      timestamp=3.145761194645316e+16,\n      worker_uuid=UUID('b406dd29-9b57-4d64-8490-5c0914c25b99'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 82,\n       Status.INTERESTING: 0},\n      branches=13954,\n      since_new_branch=15143,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=0.5,\n      timestamp=3.402823466e+38,\n      worker_uuid=UUID('b406dd29-9b57-4d64-8490-5c0914c25b99'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 14231,\n       Status.INTERESTING: 0},\n      branches=2_091_629_675,\n      since_new_branch=29872,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=0.5,\n      timestamp=6.090649377238684e+306,\n      worker_uuid=UUID('b406dd29-9b57-4d64-8490-5c0914c25b99'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16000,\n       Status.INTERESTING: 0},\n      branches=30114,\n      since_new_branch=75,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=12551.007050229939,\n      timestamp=3.296516643666799e+307,\n      worker_uuid=UUID('b406dd29-9b57-4d64-8490-5c0914c25b99'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 17005,\n       Status.INTERESTING: 0},\n      branches=32378,\n      since_new_branch=139_025_236_707_521_534_102_382_149_342_404_706_877,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=727289.8077289735,\n      timestamp=9.708197142169778e+307,\n      worker_uuid=UUID('b406dd29-9b57-4d64-8490-5c0914c25b99'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 22497,\n       Status.INTERESTING: 0},\n      branches=15360,\n      since_new_branch=39,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=787753.4563314146,\n      timestamp=1.135303286089601e+308,\n      worker_uuid=UUID('b406dd29-9b57-4d64-8490-5c0914c25b99'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 29218,\n       Status.INTERESTING: 0},\n      branches=71,\n      since_new_branch=22717,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=956421.5310397574,\n      timestamp=1.327639371924761e+308,\n      worker_uuid=UUID('b406dd29-9b57-4d64-8490-5c0914c25b99'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 791404883,\n       Status.INTERESTING: 0},\n      branches=5595,\n      since_new_branch=2635,\n      phase=Phase.DISTILL)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.014074207982048392,
          "overall:gc": 0.0,
          "generate:reports": 0.007465084956493229
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878920.3569212
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.0,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=0,\n      since_new_branch=0,\n      phase=Phase.REPLAY)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0002844170085154474,
          "overall:gc": 0.0,
          "generate:reports": 0.0016876669833436608
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878945.364193
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.5,\n      timestamp=2.3229221873985602e-101,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 25,\n       Status.INTERESTING: 0},\n      branches=126,\n      since_new_branch=109,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=418942.16535061033,\n      timestamp=1.9,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 31754,\n       Status.INTERESTING: 0},\n      branches=77,\n      since_new_branch=11,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=636192.7306534743,\n      timestamp=1.2649632580098948e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 9_472_498_675_636_988_723_832_224_127_386_724_394,\n       Status.INTERESTING: 0},\n      branches=14584,\n      since_new_branch=14954,\n      phase=Phase.REPLAY)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.009535917022731155,
          "overall:gc": 0.0,
          "generate:reports": 0.003652874962426722
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878967.9070039
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00022295804228633642,
          "overall:gc": 0.0,
          "generate:reports": 0.001788791036233306
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878958.925654
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=0.0,\n      timestamp=0.05,\n      worker_uuid=UUID('5e92a710-845c-4c87-9d68-b6d8bedcfefc'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 4,\n       Status.INTERESTING: 0},\n      branches=172006810,\n      since_new_branch=7,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=1.0,\n      timestamp=0.05,\n      worker_uuid=UUID('5e92a710-845c-4c87-9d68-b6d8bedcfefc'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 67,\n       Status.INTERESTING: 0},\n      branches=1024,\n      since_new_branch=100,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=2.00001,\n      timestamp=0.05000000000000001,\n      worker_uuid=UUID('5e92a710-845c-4c87-9d68-b6d8bedcfefc'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1024,\n       Status.INTERESTING: 0},\n      branches=29283,\n      since_new_branch=857291431,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=62780.71447310408,\n      timestamp=10000000.0,\n      worker_uuid=UUID('5e92a710-845c-4c87-9d68-b6d8bedcfefc'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1772,\n       Status.INTERESTING: 0},\n      branches=18514,\n      since_new_branch=43,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=70853.36196973358,\n      timestamp=9317921298653992.0,\n      worker_uuid=UUID('5e92a710-845c-4c87-9d68-b6d8bedcfefc'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 6080,\n       Status.INTERESTING: 0},\n      branches=22436,\n      since_new_branch=404,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=206250.2364808288,\n      timestamp=1.705574494746504e+16,\n      worker_uuid=UUID('5e92a710-845c-4c87-9d68-b6d8bedcfefc'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 10721,\n       Status.INTERESTING: 0},\n      branches=5536,\n      since_new_branch=78,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=269046.8241539166,\n      timestamp=3.1899673375456836e+16,\n      worker_uuid=UUID('5e92a710-845c-4c87-9d68-b6d8bedcfefc'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 11091,\n       Status.INTERESTING: 0},\n      branches=6163,\n      since_new_branch=9224,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=330610.0938579509,\n      timestamp=1.1068746376685601e+264,\n      worker_uuid=UUID('5e92a710-845c-4c87-9d68-b6d8bedcfefc'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 12043,\n       Status.INTERESTING: 0},\n      branches=28,\n      since_new_branch=115,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=398632.5236832328,\n      timestamp=2.271689469631652e+306,\n      worker_uuid=UUID('5e92a710-845c-4c87-9d68-b6d8bedcfefc'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 14129,\n       Status.INTERESTING: 0},\n      branches=110,\n      since_new_branch=1_815_071_109,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=536361.8168749155,\n      timestamp=1.2346925123582895e+307,\n      worker_uuid=UUID('5e92a710-845c-4c87-9d68-b6d8bedcfefc'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 18676,\n       Status.INTERESTING: 0},\n      branches=208_210_466_587_958_866,\n      since_new_branch=54,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=609647.1574503103,\n      timestamp=3.101727780712407e+307,\n      worker_uuid=UUID('5e92a710-845c-4c87-9d68-b6d8bedcfefc'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 21307,\n       Status.INTERESTING: 0},\n      branches=11612,\n      since_new_branch=9585,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=647734.0869605074,\n      timestamp=3.3451386344754094e+307,\n      worker_uuid=UUID('5e92a710-845c-4c87-9d68-b6d8bedcfefc'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 25982,\n       Status.INTERESTING: 0},\n      branches=31_586_176_938_575_053_866_846_422_467_444_410_031,\n      since_new_branch=52,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=699541.0576359703,\n      timestamp=3.708978789445327e+307,\n      worker_uuid=UUID('5e92a710-845c-4c87-9d68-b6d8bedcfefc'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 27453,\n       Status.INTERESTING: 0},\n      branches=7358,\n      since_new_branch=95,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=711463.5671831891,\n      timestamp=3.7691226177057163e+307,\n      worker_uuid=UUID('5e92a710-845c-4c87-9d68-b6d8bedcfefc'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 29599,\n       Status.INTERESTING: 0},\n      branches=19259,\n      since_new_branch=5977,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=782561.1853956544,\n      timestamp=3.9702793725650626e+307,\n      worker_uuid=UUID('5e92a710-845c-4c87-9d68-b6d8bedcfefc'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 32159,\n       Status.INTERESTING: 0},\n      branches=3170,\n      since_new_branch=17381,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=914513.3724395378,\n      timestamp=4.0554703748453324e+307,\n      worker_uuid=UUID('5e92a710-845c-4c87-9d68-b6d8bedcfefc'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 65535,\n       Status.INTERESTING: 0},\n      branches=28,\n      since_new_branch=8006,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=941681.4946774013,\n      timestamp=4.070986978082532e+307,\n      worker_uuid=UUID('5e92a710-845c-4c87-9d68-b6d8bedcfefc'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2_568_210_000_221_320_603,\n       Status.INTERESTING: 0},\n      branches=87,\n      since_new_branch=1278,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.03328904102090746,
          "overall:gc": 0.0,
          "generate:reports": 0.022802999068517238
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878910.416003
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=5.365480217076325e-44,\n      timestamp=2.927991560279392e+307,\n      worker_uuid=UUID('c0fa5e68-285a-465a-9fc9-350ad5b2af40'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 26549,\n       Status.INTERESTING: 0},\n      branches=18596,\n      since_new_branch=57,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=367918.002263582,\n      timestamp=3.8143595408797346e+307,\n      worker_uuid=UUID('c0fa5e68-285a-465a-9fc9-350ad5b2af40'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 108_962_395_549_007_771_139_241_690_040_359_907_665,\n       Status.INTERESTING: 0},\n      branches=30220,\n      since_new_branch=6025,\n      phase=Phase.REPLAY)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.002584416011814028,
          "overall:gc": 0.0,
          "generate:reports": 0.005642876029014587
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878905.940033
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=2.556225614566048e-267,\n      timestamp=5.5641359010039156e+305,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 30,\n       Status.INTERESTING: 0},\n      branches=300,\n      since_new_branch=783_226_727_459_882_248,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=5.009561261181996e-10,\n      timestamp=1.004653070896974e+306,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 48,\n       Status.INTERESTING: 0},\n      branches=4374,\n      since_new_branch=153_148_204_095_506_916_329_868_106_689_410_927_776,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1.0,\n      timestamp=4.40413986852285e+306,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 102,\n       Status.INTERESTING: 0},\n      branches=2374,\n      since_new_branch=12405,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1.9,\n      timestamp=5.0385689578016945e+306,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 300,\n       Status.INTERESTING: 0},\n      branches=3219,\n      since_new_branch=65,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=2058.733607184227,\n      timestamp=5.347566942223766e+306,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8838,\n       Status.INTERESTING: 0},\n      branches=23049,\n      since_new_branch=9440,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=273082.14133930416,\n      timestamp=6.344160743089463e+306,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 18986,\n       Status.INTERESTING: 0},\n      branches=646202679,\n      since_new_branch=60,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=598679.0331738051,\n      timestamp=6.404772180650978e+306,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 31023,\n       Status.INTERESTING: 0},\n      branches=1_115_681_183,\n      since_new_branch=19264,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.018081833026371896,
          "overall:gc": 0.0,
          "generate:reports": 0.0072633749805390835
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878952.168214
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.0,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=0,\n      since_new_branch=0,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.002195417007897049,
          "overall:gc": 0.0,
          "generate:reports": 0.0015469170175492764
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878939.615199
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=350752.7701829186,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 60,\n       Status.INTERESTING: 0},\n      branches=1692,\n      since_new_branch=636134713,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=714259.8827365149,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 78,\n       Status.INTERESTING: 0},\n      branches=0,\n      since_new_branch=126,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=999999.0,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 18050,\n       Status.INTERESTING: 0},\n      branches=8,\n      since_new_branch=139403886,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.004135040973778814,
          "overall:gc": 0.0,
          "generate:reports": 0.002985541010275483
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878955.537738
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.0,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=0,\n      since_new_branch=0,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0029310419922694564,
          "overall:gc": 0.0,
          "generate:reports": 0.005371207953430712
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878932.728373
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00025350000942125916,
          "overall:gc": 0.0,
          "generate:reports": 0.008818292059004307
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878917.011065
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.0,\n      timestamp=6.1871465455689656e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 14,\n       Status.INTERESTING: 0},\n      branches=492461950,\n      since_new_branch=1_072_962_190,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.0,\n      timestamp=7.002310534828603e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 69,\n       Status.INTERESTING: 0},\n      branches=418230296,\n      since_new_branch=121,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=2.2250738585e-313,\n      timestamp=3.402823466e+38,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 72,\n       Status.INTERESTING: 0},\n      branches=26688,\n      since_new_branch=44,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=2.1037757581449128e-41,\n      timestamp=3.402823466e+38,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 77,\n       Status.INTERESTING: 0},\n      branches=7115,\n      since_new_branch=3443,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1.175494351e-38,\n      timestamp=3.402823466e+38,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 84,\n       Status.INTERESTING: 0},\n      branches=28423,\n      since_new_branch=87,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.05,\n      timestamp=3.402823466e+38,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 86,\n       Status.INTERESTING: 0},\n      branches=24204,\n      since_new_branch=1_487_482_880_513_752_734,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.05,\n      timestamp=3.402823466e+38,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 99,\n       Status.INTERESTING: 0},\n      branches=24030,\n      since_new_branch=14990,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.05,\n      timestamp=6.466541598159942e+152,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 100,\n       Status.INTERESTING: 0},\n      branches=14953,\n      since_new_branch=102762168,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=28745.20133110515,\n      timestamp=5.0164216221268996e+272,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 300,\n       Status.INTERESTING: 0},\n      branches=23358,\n      since_new_branch=46,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=35057.95653810529,\n      timestamp=3.1809163097983337e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1000,\n       Status.INTERESTING: 0},\n      branches=12922,\n      since_new_branch=58,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=111614.2069355646,\n      timestamp=3.2955419030182054e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5212,\n       Status.INTERESTING: 0},\n      branches=31044,\n      since_new_branch=28159,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=161557.53417863752,\n      timestamp=3.997878437548501e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5550,\n       Status.INTERESTING: 0},\n      branches=901074008,\n      since_new_branch=27165,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=298893.28310639603,\n      timestamp=5.166184284061027e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8192,\n       Status.INTERESTING: 0},\n      branches=31070,\n      since_new_branch=66,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=309808.56293037976,\n      timestamp=5.71388700728595e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 9970,\n       Status.INTERESTING: 0},\n      branches=2_016_573_344,\n      since_new_branch=760401441,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=397791.8358430622,\n      timestamp=6.888851749599321e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 13658,\n       Status.INTERESTING: 0},\n      branches=300,\n      since_new_branch=8192,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=415579.58641658,\n      timestamp=7.111688356128227e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 19995,\n       Status.INTERESTING: 0},\n      branches=204_567_062_739_056_945,\n      since_new_branch=6_871_464_771_682_632_673,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=515651.2834369106,\n      timestamp=7.77106872740412e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 23791,\n       Status.INTERESTING: 0},\n      branches=28780,\n      since_new_branch=8561,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=636059.5821052281,\n      timestamp=1.0111904033848292e+308,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 26305,\n       Status.INTERESTING: 0},\n      branches=28,\n      since_new_branch=17019,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=638335.7084802492,\n      timestamp=1.0304806688835795e+308,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_478_514_612,\n       Status.INTERESTING: 0},\n      branches=7856,\n      since_new_branch=14539,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=741346.0917405098,\n      timestamp=1.2228802995471056e+308,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_789_534_365,\n       Status.INTERESTING: 0},\n      branches=13530,\n      since_new_branch=10,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=803878.3317089195,\n      timestamp=1.2865728615385657e+308,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5_353_756_149_245_628_855,\n       Status.INTERESTING: 0},\n      branches=113,\n      since_new_branch=12,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=882619.8011737663,\n      timestamp=1.3587556951069018e+308,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7_336_328_895_143_857_027,\n       Status.INTERESTING: 0},\n      branches=15729,\n      since_new_branch=12225,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=938973.8550255315,\n      timestamp=1.4579067562293382e+308,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 72_635_048_925_053_535_732_233_606_934_786_101_089,\n       Status.INTERESTING: 0},\n      branches=9130,\n      since_new_branch=27191,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.04470333398785442,
          "overall:gc": 0.0,
          "generate:reports": 0.03600970807019621
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878938.583085
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.0,\n      timestamp=2.2250738585072014e-308,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=93,\n      since_new_branch=11389,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=5e-324,\n      timestamp=5.201075330145407e-206,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 66,\n       Status.INTERESTING: 0},\n      branches=19096,\n      since_new_branch=6_358_989_017_018_861_904,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=4.300942837899938e-296,\n      timestamp=8.560121338013654e-133,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 79,\n       Status.INTERESTING: 0},\n      branches=1_289_114_155,\n      since_new_branch=1_046_806_957,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=5.222240585037839e-198,\n      timestamp=7.710895967238921e-13,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 101,\n       Status.INTERESTING: 0},\n      branches=31520,\n      since_new_branch=8192,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=6.664391717665311e-50,\n      timestamp=0.05,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 300,\n       Status.INTERESTING: 0},\n      branches=1024,\n      since_new_branch=88,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1.5,\n      timestamp=9179030135914604.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 9966,\n       Status.INTERESTING: 0},\n      branches=1024,\n      since_new_branch=7_584_858_544_352_821_546,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1350.3306752664648,\n      timestamp=1.3157789428536184e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 15416,\n       Status.INTERESTING: 0},\n      branches=7204,\n      since_new_branch=3499,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=345841.87776677293,\n      timestamp=2.179854343953189e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16083,\n       Status.INTERESTING: 0},\n      branches=64,\n      since_new_branch=19924,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=520899.7013818627,\n      timestamp=3.2429349835483184e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 17908,\n       Status.INTERESTING: 0},\n      branches=107,\n      since_new_branch=48,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=535746.0559011305,\n      timestamp=6.3084298894985176e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 23786,\n       Status.INTERESTING: 0},\n      branches=26048,\n      since_new_branch=1_293_475_143_837_786_215,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=549007.2846474627,\n      timestamp=7.094894240351624e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 29955,\n       Status.INTERESTING: 0},\n      branches=81,\n      since_new_branch=4391,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=580264.812877085,\n      timestamp=3.67548669871909e+161,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 30339,\n       Status.INTERESTING: 0},\n      branches=13654,\n      since_new_branch=18,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=621782.8489831913,\n      timestamp=9.786271036146519e+174,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 30441,\n       Status.INTERESTING: 0},\n      branches=29542,\n      since_new_branch=52,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=634001.5136931197,\n      timestamp=1.2122167777334198e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 31783,\n       Status.INTERESTING: 0},\n      branches=12775,\n      since_new_branch=16,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=668054.621687873,\n      timestamp=1.4707628736932356e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 494436495,\n       Status.INTERESTING: 0},\n      branches=594616774,\n      since_new_branch=1785,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=681986.621608692,\n      timestamp=2.917887703712184e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_199_430_217_778_167_210,\n       Status.INTERESTING: 0},\n      branches=65_731_019_408_248_189_721_454_089_525_832_714_275,\n      since_new_branch=511,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=728636.3671523072,\n      timestamp=6.686366965202525e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2_057_559_134_769_401_758,\n       Status.INTERESTING: 0},\n      branches=69,\n      since_new_branch=65535,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=944356.6362152434,\n      timestamp=8.034446045209418e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5_113_953_172_376_075_970,\n       Status.INTERESTING: 0},\n      branches=8893,\n      since_new_branch=5573,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=977946.7362052574,\n      timestamp=1.1793202360346486e+308,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8_108_792_299_552_135_891,\n       Status.INTERESTING: 0},\n      branches=7092,\n      since_new_branch=11827,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=982133.6515814181,\n      timestamp=1.1869994944093168e+308,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 52_022_970_552_620_549_534_004_153_489_028_948_850,\n       Status.INTERESTING: 0},\n      branches=74,\n      since_new_branch=100,\n      phase=Phase.DISTILL)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.03311804198892787,
          "overall:gc": 0.0,
          "generate:reports": 0.014232749992515892
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878931.580656
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=4.557722115235603e-111,\n      timestamp=4.335755365337673e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 79,\n       Status.INTERESTING: 0},\n      branches=52,\n      since_new_branch=24143,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=2.64920716974369e-89,\n      timestamp=1.522771187017446e+306,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 99,\n       Status.INTERESTING: 0},\n      branches=11456,\n      since_new_branch=11547,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.05,\n      timestamp=3.880741033954825e+306,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 106,\n       Status.INTERESTING: 0},\n      branches=8769,\n      since_new_branch=23145,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=112121.6362384441,\n      timestamp=2.259092640597217e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 109,\n       Status.INTERESTING: 0},\n      branches=8_685_940_867_280_038_349,\n      since_new_branch=21859,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=146511.28859759346,\n      timestamp=4.112701895539866e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 4274,\n       Status.INTERESTING: 0},\n      branches=9663,\n      since_new_branch=32338,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=172225.88142755328,\n      timestamp=4.413068404447506e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 4760,\n       Status.INTERESTING: 0},\n      branches=577,\n      since_new_branch=14624,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=184413.9788601831,\n      timestamp=4.733881221927229e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 24143,\n       Status.INTERESTING: 0},\n      branches=109_422_251_208_146_577_339_657_887_145_330_301_646,\n      since_new_branch=1_875_965_687,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=351513.3329108533,\n      timestamp=5.532155653060492e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 24566,\n       Status.INTERESTING: 0},\n      branches=28242,\n      since_new_branch=7549,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=533438.5882435803,\n      timestamp=8.701014079461357e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 29319,\n       Status.INTERESTING: 0},\n      branches=6_622_358_412_098_993_650,\n      since_new_branch=8_081_329_292_638_268_839,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=840424.3611360717,\n      timestamp=9.421884302352836e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 30076,\n       Status.INTERESTING: 0},\n      branches=3310,\n      since_new_branch=12630,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=902306.8694396659,\n      timestamp=1.1442945847626315e+308,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 31433,\n       Status.INTERESTING: 0},\n      branches=13883,\n      since_new_branch=15004,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.017652374983299524,
          "overall:gc": 0.0,
          "generate:reports": 0.008572958002332598
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878961.1812532
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00022908399114385247,
          "overall:gc": 0.0,
          "generate:reports": 0.0019194160122424364
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878926.841865
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=2.312234534656061e-115,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=404,\n      since_new_branch=14712,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=227774.42006345978,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=12,\n      since_new_branch=9088,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=677235.5947532064,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_628_691_237,\n       Status.INTERESTING: 0},\n      branches=6825,\n      since_new_branch=13150,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.009821708023082465,
          "overall:gc": 0.0,
          "generate:reports": 0.0029902499518357217
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878962.2792351
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.0,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=0,\n      since_new_branch=0,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00223483401350677,
          "overall:gc": 0.0,
          "generate:reports": 0.0020752499694935977
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878951.013911
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=2.2250738585e-313,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=15582,\n      since_new_branch=73,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=2.2250738585e-313,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=19,\n      since_new_branch=28218,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=2.2250738585072014e-308,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=72,\n      since_new_branch=8192,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=9.262550386425578e-261,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 6,\n       Status.INTERESTING: 0},\n      branches=18231,\n      since_new_branch=9089,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=4.246656339723171e-229,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 66,\n       Status.INTERESTING: 0},\n      branches=12530,\n      since_new_branch=5_059_330_118_245_605_194,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=3.2734459257926793e-167,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 74,\n       Status.INTERESTING: 0},\n      branches=103,\n      since_new_branch=105,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1.1754943508222875e-38,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 75,\n       Status.INTERESTING: 0},\n      branches=124,\n      since_new_branch=13779,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1.192092896e-07,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 121,\n       Status.INTERESTING: 0},\n      branches=121,\n      since_new_branch=126,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1.192092896e-07,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 122,\n       Status.INTERESTING: 0},\n      branches=993166037,\n      since_new_branch=9_850_516_398_845_879_743_344_053_692_011_968_126,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.00045637459552769644,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 512,\n       Status.INTERESTING: 0},\n      branches=1_114_480_659,\n      since_new_branch=91,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.05,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2806,\n       Status.INTERESTING: 0},\n      branches=30113,\n      since_new_branch=19436,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.5,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5000,\n       Status.INTERESTING: 0},\n      branches=28337,\n      since_new_branch=9203,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.5,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8192,\n       Status.INTERESTING: 0},\n      branches=20412,\n      since_new_branch=20390,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=44274.84590126563,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8192,\n       Status.INTERESTING: 0},\n      branches=14470,\n      since_new_branch=27984,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=98832.55058908706,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 9069,\n       Status.INTERESTING: 0},\n      branches=28119,\n      since_new_branch=14,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=247482.17328749038,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 12700,\n       Status.INTERESTING: 0},\n      branches=22315,\n      since_new_branch=98,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=258420.28611106254,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 14832,\n       Status.INTERESTING: 0},\n      branches=39,\n      since_new_branch=15827,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=318104.80465411465,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16450,\n       Status.INTERESTING: 0},\n      branches=2,\n      since_new_branch=15406,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=350230.72927554336,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 18005,\n       Status.INTERESTING: 0},\n      branches=1703,\n      since_new_branch=9909,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=433991.78017418337,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 19490,\n       Status.INTERESTING: 0},\n      branches=6035,\n      since_new_branch=29194,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=457216.4466466523,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 21120,\n       Status.INTERESTING: 0},\n      branches=7_746_794_203_937_452_223,\n      since_new_branch=91,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=510464.1787996319,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 23990,\n       Status.INTERESTING: 0},\n      branches=3871,\n      since_new_branch=8303,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=749802.638292309,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 28717,\n       Status.INTERESTING: 0},\n      branches=114,\n      since_new_branch=25605,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=802210.5326991564,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 29393,\n       Status.INTERESTING: 0},\n      branches=16,\n      since_new_branch=24387,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=833961.075023741,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 31982,\n       Status.INTERESTING: 0},\n      branches=23,\n      since_new_branch=110_240_301_483_551_991_440_642_634_790_151_550_143,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=845677.1908631107,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_084_045_281,\n       Status.INTERESTING: 0},\n      branches=264345662,\n      since_new_branch=1000,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=853082.2814631105,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 828_225_653_504_842_824,\n       Status.INTERESTING: 0},\n      branches=13369,\n      since_new_branch=43,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=924638.6462012548,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 4_665_944_749_169_469_956,\n       Status.INTERESTING: 0},\n      branches=38,\n      since_new_branch=23563,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=995157.6750335016,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7_131_882_615_971_341_319,\n       Status.INTERESTING: 0},\n      branches=86,\n      since_new_branch=21063,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=999999.0,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7_472_693_288_021_351_788,\n       Status.INTERESTING: 0},\n      branches=63,\n      since_new_branch=8_677_272_404_981_156_315,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0737051249598153,
          "overall:gc": 0.0,
          "generate:reports": 0.024246376007795334
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878948.880571
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=0.05,\n      timestamp=2.8983836274307548e+16,\n      worker_uuid=UUID('a34c5e96-2d78-4352-8b7a-555e236594bd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3651,\n       Status.INTERESTING: 0},\n      branches=2745,\n      since_new_branch=14,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=105335.90591084743,\n      timestamp=2.9774893531658096e+16,\n      worker_uuid=UUID('a34c5e96-2d78-4352-8b7a-555e236594bd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 448_645_335_042_151_528,\n       Status.INTERESTING: 0},\n      branches=16285,\n      since_new_branch=21416,\n      phase=Phase.DISTILL)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.006716375006362796,
          "overall:gc": 0.0,
          "generate:reports": 0.004684751038439572
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878915.934858
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00022366701159626245,
          "overall:gc": 0.0,
          "generate:reports": 0.0018024590099230409
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878928.073786
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=244016.73433955145,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=2775,\n      since_new_branch=1_886_130_151_888_539_118,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=490287.3633791486,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=5_086_312_557_626_670_589,\n      since_new_branch=113,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=816229.4724544658,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 22185,\n       Status.INTERESTING: 0},\n      branches=12654,\n      since_new_branch=63,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.007870208006352186,
          "overall:gc": 0.0,
          "generate:reports": 0.0034959579934366047
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878960.06084
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.5,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 45,\n       Status.INTERESTING: 0},\n      branches=26,\n      since_new_branch=2,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1.9,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3347,\n       Status.INTERESTING: 0},\n      branches=148_982_746_543_939_474_551_872_869_974_293_044_962,\n      since_new_branch=4475,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=314913.5867228608,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5376,\n       Status.INTERESTING: 0},\n      branches=17730,\n      since_new_branch=121,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=512024.9049615401,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 13376,\n       Status.INTERESTING: 0},\n      branches=31387,\n      since_new_branch=13581,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=567328.2696779517,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 30078,\n       Status.INTERESTING: 0},\n      branches=9890,\n      since_new_branch=758787489,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=989137.5982481317,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 548880757,\n       Status.INTERESTING: 0},\n      branches=77_855_397_430_977_121_994_454_305_841_423_212_733,\n      since_new_branch=24163,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.02346175001002848,
          "overall:gc": 0.0,
          "generate:reports": 0.01058862591162324
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878965.6826072
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=2.2250738585e-313,\n      timestamp=5.2321723132334536e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 26,\n       Status.INTERESTING: 0},\n      branches=1_804_143_917,\n      since_new_branch=15528,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1.2838371521959518e-269,\n      timestamp=7.044206993269294e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 39,\n       Status.INTERESTING: 0},\n      branches=12_238_327_688_355_265_863_112_955_096_124_925_055,\n      since_new_branch=7366,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.5,\n      timestamp=3.402823466e+38,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 60,\n       Status.INTERESTING: 0},\n      branches=16442,\n      since_new_branch=22_715_366_194_754_214_627_429_795_025_669_588_645,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=6636.104048324933,\n      timestamp=5.270775450728693e+122,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 406,\n       Status.INTERESTING: 0},\n      branches=8940,\n      since_new_branch=15260,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=63924.33758625927,\n      timestamp=4.536285667756639e+136,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 4606,\n       Status.INTERESTING: 0},\n      branches=1_162_859_610,\n      since_new_branch=25245,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=258445.37694049402,\n      timestamp=7.06084241882594e+305,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 12818,\n       Status.INTERESTING: 0},\n      branches=29942,\n      since_new_branch=1_178_968_268,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=480105.3741636313,\n      timestamp=9.670938462778643e+305,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16817,\n       Status.INTERESTING: 0},\n      branches=2_613_888_909_722_748_947,\n      since_new_branch=6_593_592_249_531_105_353,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=512307.5082010834,\n      timestamp=1.2883119586426819e+306,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 21901,\n       Status.INTERESTING: 0},\n      branches=7_735_482_241_987_234_118,\n      since_new_branch=32147,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=612875.0049856692,\n      timestamp=1.4643819576305115e+306,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 22685,\n       Status.INTERESTING: 0},\n      branches=3456,\n      since_new_branch=8489,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=812926.684334496,\n      timestamp=1.5884551738903473e+306,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_042_845_664,\n       Status.INTERESTING: 0},\n      branches=1_271_937_495,\n      since_new_branch=7125,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=881004.887976299,\n      timestamp=2.5578429845554884e+306,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 110_377_028_301_961_302_139_286_789_234_453_902_103,\n       Status.INTERESTING: 0},\n      branches=94,\n      since_new_branch=1_284_161_298,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=966511.0350674317,\n      timestamp=2.7348055250429073e+306,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 137_387_090_576_869_454_581_306_095_183_973_566_708,\n       Status.INTERESTING: 0},\n      branches=512,\n      since_new_branch=101617872,\n      phase=Phase.DISTILL)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.02523741702316329,
          "overall:gc": 0.0,
          "generate:reports": 0.011798958003055304
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878966.8403041
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=111420.21325077293,\n      timestamp=7.1232315928030016e+205,\n      worker_uuid=UUID('58068c24-feef-4e60-aa97-62b2a1755246'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 6,\n       Status.INTERESTING: 0},\n      branches=26100,\n      since_new_branch=87_936_524_210_079_455_346_648_095_198_855_377_671,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=371044.93688616774,\n      timestamp=1.3649065694316163e+206,\n      worker_uuid=UUID('58068c24-feef-4e60-aa97-62b2a1755246'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5_274_634_948_547_914_419,\n       Status.INTERESTING: 0},\n      branches=31724,\n      since_new_branch=25007,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0041022909572348,
          "overall:gc": 0.00010325002949684858,
          "generate:reports": 0.00260458403499797
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878922.502159
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00022729096235707402,
          "overall:gc": 0.0,
          "generate:reports": 0.003196583071257919
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878908.183027
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00022541702492162585,
          "overall:gc": 0.0,
          "generate:reports": 0.004812708939425647
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878907.055166
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.0,\n      timestamp=1.1667575274395252e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 37,\n       Status.INTERESTING: 0},\n      branches=124,\n      since_new_branch=15615,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1.192092896e-07,\n      timestamp=2.562496588302078e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 78,\n       Status.INTERESTING: 0},\n      branches=91,\n      since_new_branch=18498,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=208458.1408984137,\n      timestamp=8.997492647032108e+73,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 102,\n       Status.INTERESTING: 0},\n      branches=7663,\n      since_new_branch=1_644_709_185,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=897551.8711918964,\n      timestamp=7.649161467508746e+306,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7398,\n       Status.INTERESTING: 0},\n      branches=11141,\n      since_new_branch=1179,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=940156.7452431567,\n      timestamp=7.485074956639547e+307,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 21932,\n       Status.INTERESTING: 0},\n      branches=5_041_847_154_894_715_648,\n      since_new_branch=30746,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00905533297918737,
          "overall:gc": 0.0,
          "generate:reports": 0.007658959075342864
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878933.901303
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=7.065674257402723e-158,\n      timestamp=1.1455616243428602e+283,\n      worker_uuid=UUID('4ed6884b-5d93-4a68-9294-624578381b8e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 11600,\n       Status.INTERESTING: 0},\n      branches=931,\n      since_new_branch=31223,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=473614.14722459327,\n      timestamp=5.382876980538426e+283,\n      worker_uuid=UUID('4ed6884b-5d93-4a68-9294-624578381b8e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 29909,\n       Status.INTERESTING: 0},\n      branches=797,\n      since_new_branch=65,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.004076415963936597,
          "overall:gc": 0.0,
          "generate:reports": 0.002505290962290019
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878912.5511181
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.0,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=0,\n      since_new_branch=0,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00223312497837469,
          "overall:gc": 0.0,
          "generate:reports": 0.0018038749694824219
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878944.18943
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1000000.0,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=0,\n      since_new_branch=8759,\n      phase=Phase.REPLAY)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00032708398066461086,
          "overall:gc": 0.0,
          "generate:reports": 0.005080333037767559
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878956.665191
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=9.170350609557004e-309,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 13704,\n       Status.INTERESTING: 0},\n      branches=17601,\n      since_new_branch=1_194_267_582,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00217279203934595,
          "overall:gc": 0.0,
          "generate:reports": 0.0032407499966211617
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878929.219678
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=833094.0404761842,\n      timestamp=4.643308443744519e-17,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3_349_680_521_992_723_081,\n       Status.INTERESTING: 0},\n      branches=15572,\n      since_new_branch=25819,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.002177166985347867,
          "overall:gc": 0.0,
          "generate:reports": 0.0018583330092951655
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878930.38382
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=808740.3720578414,\n      timestamp=2225966023574723.0,\n      worker_uuid=UUID('de4b0c03-e046-4f9a-bc83-503c4761b48d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 110,\n       Status.INTERESTING: 0},\n      branches=29482,\n      since_new_branch=27670,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.002157374983653426,
          "overall:gc": 0.0,
          "generate:reports": 0.0019235830404795706
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878913.6418009
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.0,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=9999,\n      since_new_branch=3845,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=216390.54103920847,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=29196,\n      since_new_branch=79,\n      phase=Phase.REPLAY)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0028706660377793014,
          "overall:gc": 0.0,
          "generate:reports": 0.005086417018901557
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878936.096287
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=5.725419489918651e-139,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 26,\n       Status.INTERESTING: 0},\n      branches=1001,\n      since_new_branch=5933,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.5,\n      timestamp=2.2250738585e-313,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 94,\n       Status.INTERESTING: 0},\n      branches=24217,\n      since_new_branch=24670,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1.0,\n      timestamp=4.0003038557272096e-250,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 97,\n       Status.INTERESTING: 0},\n      branches=19119,\n      since_new_branch=17291,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=158093.0506221148,\n      timestamp=9.125808775055662e-225,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16983,\n       Status.INTERESTING: 0},\n      branches=74,\n      since_new_branch=48,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=177780.50478054344,\n      timestamp=0.05,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 17240,\n       Status.INTERESTING: 0},\n      branches=1_035_064_265,\n      since_new_branch=63454824,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=236353.08344952893,\n      timestamp=3234679406842269.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 17770,\n       Status.INTERESTING: 0},\n      branches=512,\n      since_new_branch=27057,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=296139.79336810677,\n      timestamp=1.1159732066039894e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 29499,\n       Status.INTERESTING: 0},\n      branches=1398,\n      since_new_branch=64,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=426547.97018269583,\n      timestamp=1.588329608197128e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_433_043_228,\n       Status.INTERESTING: 0},\n      branches=38,\n      since_new_branch=32,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=661741.5299688728,\n      timestamp=2.04428161216342e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 4_620_646_202_128_638_819,\n       Status.INTERESTING: 0},\n      branches=300,\n      since_new_branch=5_889_027_266_357_707_491,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=864524.2596790486,\n      timestamp=2.8975581220375916e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 6_585_131_191_716_703_839,\n       Status.INTERESTING: 0},\n      branches=0,\n      since_new_branch=31561,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=904626.6319839007,\n      timestamp=3.1473540252895456e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7_129_166_946_819_427_802,\n       Status.INTERESTING: 0},\n      branches=28419,\n      since_new_branch=763040352,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=949359.6343466028,\n      timestamp=3.7449988030243496e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 130_968_749_255_708_398_155_420_224_168_016_075_175,\n       Status.INTERESTING: 0},\n      branches=9514,\n      since_new_branch=1468,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.03274233400588855,
          "overall:gc": 0.0,
          "generate:reports": 0.012639251013752073
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878953.3022301
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=390323.45352305676,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=0,\n      since_new_branch=1288,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.006912874989211559,
          "overall:gc": 0.0,
          "generate:reports": 0.0028136660112068057
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878969.043324
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=61444.99953474371,\n      timestamp=0.2755907486776779,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 25,\n       Status.INTERESTING: 0},\n      branches=17891,\n      since_new_branch=28,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=555502.7846449903,\n      timestamp=0.2806607896737057,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 67,\n       Status.INTERESTING: 0},\n      branches=1870,\n      since_new_branch=72_941_760_526_781_637_420_360_186_346_311_354_257,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=985517.0939849061,\n      timestamp=0.3729880519227477,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 29278,\n       Status.INTERESTING: 0},\n      branches=22358,\n      since_new_branch=31640,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.004123958991840482,
          "overall:gc": 0.0,
          "generate:reports": 0.0032829990377649665
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878934.9757838
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=199857.46407872258,\n      timestamp=3.4145210160524468e+16,\n      worker_uuid=UUID('45dd6df0-d826-4deb-a156-344c097be30a'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 512,\n       Status.INTERESTING: 0},\n      branches=6160,\n      since_new_branch=56,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=210540.31245893516,\n      timestamp=3.8696412703212717e+304,\n      worker_uuid=UUID('45dd6df0-d826-4deb-a156-344c097be30a'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2461,\n       Status.INTERESTING: 0},\n      branches=7529,\n      since_new_branch=48,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=821845.6312469968,\n      timestamp=5.406691083227017e+304,\n      worker_uuid=UUID('45dd6df0-d826-4deb-a156-344c097be30a'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2_817_448_411_339_265_138,\n       Status.INTERESTING: 0},\n      branches=66,\n      since_new_branch=20711,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.006010042037814856,
          "overall:gc": 0.0,
          "generate:reports": 0.0032904159743338823
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878925.766471
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.0,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=0,\n      since_new_branch=0,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.004752749984618276,
          "overall:gc": 0.0,
          "generate:reports": 0.002370583009906113
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878949.8644118
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0013546669506467879,
          "overall:gc": 0.0,
          "generate:reports": 0.0037631239974871278
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878919.193123
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1e-05,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=16005,\n      since_new_branch=77,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=981662.8107511194,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 10972,\n       Status.INTERESTING: 0},\n      branches=3_240_781_832_042_149_655,\n      since_new_branch=17411,\n      phase=Phase.REPLAY)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.008129041991196573,
          "overall:gc": 0.0,
          "generate:reports": 0.008410415961407125
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878954.3841002
      }
    ],
    "corpus": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.0,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=0,\n      since_new_branch=0,\n      phase=Phase.REPLAY)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0002690830151550472,
          "overall:gc": 0.0,
          "generate:reports": 0.0014275419525802135
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878930.987747
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_single_worker(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.0,\n      timestamp=0.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=0,\n      since_new_branch=0,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.002216957975178957,
          "overall:gc": 0.0,
          "generate:reports": 0.0015357910306192935
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_linearize.py::test_single_worker",
        "run_start": 1747878929.730847
      }
    ]
  },
  "tests/test_linearize.py::test_non_overlapping_reports": {
    "rolling": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=1.3929780187269733e-250,\n      timestamp=5.88536463030153e+16,\n      worker_uuid=UUID('a98de0ef-2ab6-4249-b906-73648c528d85'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 27,\n       Status.INTERESTING: 0},\n      branches=99,\n      since_new_branch=19014,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=228150.75202426722,\n      timestamp=2.3124254636727256e+307,\n      worker_uuid=UUID('a98de0ef-2ab6-4249-b906-73648c528d85'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 9405,\n       Status.INTERESTING: 0},\n      branches=512,\n      since_new_branch=28937,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=106215.9617770966,\n      timestamp=0.05,\n      worker_uuid=UUID('4c40b1e4-4b08-44f9-a663-0725723cf3b9'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 54,\n       Status.INTERESTING: 0},\n      branches=8192,\n      since_new_branch=27304,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=177177.417670809,\n      timestamp=1.8209855246704224e+16,\n      worker_uuid=UUID('4c40b1e4-4b08-44f9-a663-0725723cf3b9'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 111,\n       Status.INTERESTING: 0},\n      branches=4855,\n      since_new_branch=30835,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=300386.16956780566,\n      timestamp=5.595536021675947e+16,\n      worker_uuid=UUID('4c40b1e4-4b08-44f9-a663-0725723cf3b9'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 404,\n       Status.INTERESTING: 0},\n      branches=512,\n      since_new_branch=25295,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=350560.8565955097,\n      timestamp=6.046486846996935e+16,\n      worker_uuid=UUID('4c40b1e4-4b08-44f9-a663-0725723cf3b9'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 9445,\n       Status.INTERESTING: 0},\n      branches=10131,\n      since_new_branch=26048,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=762510.431500119,\n      timestamp=7.0623522284885464e+16,\n      worker_uuid=UUID('4c40b1e4-4b08-44f9-a663-0725723cf3b9'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 11905,\n       Status.INTERESTING: 0},\n      branches=82,\n      since_new_branch=24986,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=0.05,\n      timestamp=2.6649109531921834e-105,\n      worker_uuid=UUID('659ff360-0dbe-4afa-8a69-6c9eea216270'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 4,\n       Status.INTERESTING: 0},\n      branches=29740,\n      since_new_branch=26,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=430.57042351901674,\n      timestamp=1.1754943508222875e-38,\n      worker_uuid=UUID('659ff360-0dbe-4afa-8a69-6c9eea216270'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 65,\n       Status.INTERESTING: 0},\n      branches=25663,\n      since_new_branch=6_855_775_481_171_316_464,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=19944.69010709743,\n      timestamp=0.5,\n      worker_uuid=UUID('659ff360-0dbe-4afa-8a69-6c9eea216270'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1013,\n       Status.INTERESTING: 0},\n      branches=31,\n      since_new_branch=8259,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=29984.329505967416,\n      timestamp=0.5,\n      worker_uuid=UUID('659ff360-0dbe-4afa-8a69-6c9eea216270'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3847,\n       Status.INTERESTING: 0},\n      branches=32210,\n      since_new_branch=8890,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=42510.833718472095,\n      timestamp=1.0,\n      worker_uuid=UUID('659ff360-0dbe-4afa-8a69-6c9eea216270'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 10206,\n       Status.INTERESTING: 0},\n      branches=17480,\n      since_new_branch=346303444,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=170036.33676821142,\n      timestamp=3.75826590386024e+16,\n      worker_uuid=UUID('659ff360-0dbe-4afa-8a69-6c9eea216270'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 11592,\n       Status.INTERESTING: 0},\n      branches=13590,\n      since_new_branch=11377,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=508033.09546334465,\n      timestamp=1.6608793820447746e+307,\n      worker_uuid=UUID('659ff360-0dbe-4afa-8a69-6c9eea216270'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 20359,\n       Status.INTERESTING: 0},\n      branches=5,\n      since_new_branch=65535,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=592497.1426549613,\n      timestamp=1.9695692052902364e+307,\n      worker_uuid=UUID('659ff360-0dbe-4afa-8a69-6c9eea216270'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 26440,\n       Status.INTERESTING: 0},\n      branches=8909,\n      since_new_branch=1785,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=984115.0587302139,\n      timestamp=3.742012867035854e+307,\n      worker_uuid=UUID('659ff360-0dbe-4afa-8a69-6c9eea216270'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 26484,\n       Status.INTERESTING: 0},\n      branches=25493,\n      since_new_branch=905_790_871_978_890_613,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=999999.0,\n      timestamp=8.207798517464132e+307,\n      worker_uuid=UUID('659ff360-0dbe-4afa-8a69-6c9eea216270'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_987_357_900,\n       Status.INTERESTING: 0},\n      branches=65535,\n      since_new_branch=8_567_062_134_153_412_245,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=658935.883985793,\n      timestamp=4.24839153787631e+16,\n      worker_uuid=UUID('7014bd49-0a9d-4fdb-bcbd-d3ebba1cd473'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 67,\n       Status.INTERESTING: 0},\n      branches=69,\n      since_new_branch=6786,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=324580.44410540507,\n      timestamp=2.464002951870414e+100,\n      worker_uuid=UUID('804182d1-b993-4f72-9efa-71c1fb41d8a0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 56,\n       Status.INTERESTING: 0},\n      branches=342,\n      since_new_branch=3640,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=673600.9581686321,\n      timestamp=4.10999909663528e+100,\n      worker_uuid=UUID('804182d1-b993-4f72-9efa-71c1fb41d8a0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 404,\n       Status.INTERESTING: 0},\n      branches=30849,\n      since_new_branch=12633,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=710631.4025067053,\n      timestamp=5.886951721729361e+100,\n      worker_uuid=UUID('804182d1-b993-4f72-9efa-71c1fb41d8a0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 4750,\n       Status.INTERESTING: 0},\n      branches=42_503_364_998_501_258,\n      since_new_branch=53_257_020_506_119_004_845_729_373_517_140_473_240,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=752675.9215418762,\n      timestamp=6.752029571098218e+100,\n      worker_uuid=UUID('804182d1-b993-4f72-9efa-71c1fb41d8a0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 22873,\n       Status.INTERESTING: 0},\n      branches=7928,\n      since_new_branch=8192,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=959415.3077237455,\n      timestamp=8.285536183440578e+100,\n      worker_uuid=UUID('804182d1-b993-4f72-9efa-71c1fb41d8a0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5_238_411_655_407_119_355,\n       Status.INTERESTING: 0},\n      branches=6760,\n      since_new_branch=585,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=9.720819510340631e-73,\n      timestamp=4.5333558844623816e+16,\n      worker_uuid=UUID('79b00aa3-dc03-461c-96cf-d0bc22367bd4'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1778,\n       Status.INTERESTING: 0},\n      branches=17385,\n      since_new_branch=22871,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=206965.25320347343,\n      timestamp=5.158256351235981e+16,\n      worker_uuid=UUID('79b00aa3-dc03-461c-96cf-d0bc22367bd4'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 4448,\n       Status.INTERESTING: 0},\n      branches=2_097_047_423,\n      since_new_branch=12088,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=366161.59323547763,\n      timestamp=5.2045577882057896e+16,\n      worker_uuid=UUID('79b00aa3-dc03-461c-96cf-d0bc22367bd4'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 11481,\n       Status.INTERESTING: 0},\n      branches=24110,\n      since_new_branch=5_188_289_942_487_381_432,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=580979.5778412886,\n      timestamp=5.4825976943172984e+16,\n      worker_uuid=UUID('79b00aa3-dc03-461c-96cf-d0bc22367bd4'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_052_151_187,\n       Status.INTERESTING: 0},\n      branches=32476,\n      since_new_branch=634_814_598_172_678_526,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=692277.6495539474,\n      timestamp=6.321389223106438e+16,\n      worker_uuid=UUID('79b00aa3-dc03-461c-96cf-d0bc22367bd4'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_765_626_761,\n       Status.INTERESTING: 0},\n      branches=1_991_711_506,\n      since_new_branch=11954,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0012038330314680934,
          "overall:gc": 0.0,
          "generate:reports": 0.028693124011624604
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878916.795468
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=172579.87073620298,\n      timestamp=4.316220882560568e+307,\n      worker_uuid=UUID('11eb4678-7889-4121-898d-83332035bce5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 95,\n       Status.INTERESTING: 0},\n      branches=28129,\n      since_new_branch=20288,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=420510.77815891133,\n      timestamp=4.529294837031257e+307,\n      worker_uuid=UUID('11eb4678-7889-4121-898d-83332035bce5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2328,\n       Status.INTERESTING: 0},\n      branches=1000,\n      since_new_branch=18826,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=433593.716077305,\n      timestamp=6.651695510738233e+307,\n      worker_uuid=UUID('11eb4678-7889-4121-898d-83332035bce5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3991,\n       Status.INTERESTING: 0},\n      branches=5247,\n      since_new_branch=14255,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=578980.9336648604,\n      timestamp=8.524141929881162e+307,\n      worker_uuid=UUID('11eb4678-7889-4121-898d-83332035bce5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 21521,\n       Status.INTERESTING: 0},\n      branches=58,\n      since_new_branch=103,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=975026.0066011273,\n      timestamp=1.1153508661172055e+308,\n      worker_uuid=UUID('11eb4678-7889-4121-898d-83332035bce5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 27167,\n       Status.INTERESTING: 0},\n      branches=23260,\n      since_new_branch=17618,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=373372.6529437674,\n      timestamp=2.0115211001393107e+239,\n      worker_uuid=UUID('bd4ac539-cf4b-4ab9-9468-e2597394bdee'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 27,\n       Status.INTERESTING: 0},\n      branches=13460,\n      since_new_branch=19589,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=394976.71312952176,\n      timestamp=3.2633889823310135e+307,\n      worker_uuid=UUID('bd4ac539-cf4b-4ab9-9468-e2597394bdee'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2703,\n       Status.INTERESTING: 0},\n      branches=30,\n      since_new_branch=91_004_493_219_870_921_634_931_513_641_692_608_242,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=539261.549377111,\n      timestamp=3.463090124158509e+307,\n      worker_uuid=UUID('bd4ac539-cf4b-4ab9-9468-e2597394bdee'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 65535,\n       Status.INTERESTING: 0},\n      branches=21001,\n      since_new_branch=60,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=547611.3781421755,\n      timestamp=4.575063670485025e+307,\n      worker_uuid=UUID('bd4ac539-cf4b-4ab9-9468-e2597394bdee'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 656085676,\n       Status.INTERESTING: 0},\n      branches=9576,\n      since_new_branch=89,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=867842.4034643171,\n      timestamp=8.659062889749554e+307,\n      worker_uuid=UUID('bd4ac539-cf4b-4ab9-9468-e2597394bdee'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 112_619_856_508_562_256_900_027_292_020_794_611_976,\n       Status.INTERESTING: 0},\n      branches=9124,\n      since_new_branch=11,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00031329202465713024,
          "overall:gc": 0.0,
          "generate:reports": 0.018977500032633543
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878925.386134
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=2.396813224171119e-242,\n      timestamp=0.5,\n      worker_uuid=UUID('4d108702-1f18-4e62-b4d1-cb8270213cf6'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 27,\n       Status.INTERESTING: 0},\n      branches=100,\n      since_new_branch=59,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=6.345013003290558e-242,\n      timestamp=2.8551400687505283e+307,\n      worker_uuid=UUID('4d108702-1f18-4e62-b4d1-cb8270213cf6'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 293,\n       Status.INTERESTING: 0},\n      branches=78,\n      since_new_branch=45_493_774_478_071_350,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=329848.7603087384,\n      timestamp=6.189628973809052e+307,\n      worker_uuid=UUID('4d108702-1f18-4e62-b4d1-cb8270213cf6'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 24862,\n       Status.INTERESTING: 0},\n      branches=19774,\n      since_new_branch=43,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=359497.96339223447,\n      timestamp=6.878033747879472e+307,\n      worker_uuid=UUID('4d108702-1f18-4e62-b4d1-cb8270213cf6'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_022_888_343,\n       Status.INTERESTING: 0},\n      branches=108,\n      since_new_branch=17232,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=411294.3190676833,\n      timestamp=7.242225784914488e+307,\n      worker_uuid=UUID('4d108702-1f18-4e62-b4d1-cb8270213cf6'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 74_800_364_059_306_664_105_048_908_044_675_331_132,\n       Status.INTERESTING: 0},\n      branches=19718,\n      since_new_branch=25010,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=398463.0366832392,\n      timestamp=1.6333291222702894e+16,\n      worker_uuid=UUID('7632e9de-3cb6-463a-87ee-8754ca0d21d4'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 512,\n       Status.INTERESTING: 0},\n      branches=10,\n      since_new_branch=40,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0004117080243304372,
          "overall:gc": 0.0,
          "generate:reports": 0.013988749065902084
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878907.227678
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 4.437501775100827e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.001898916030768305
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878910.37977
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=0.0,\n      timestamp=4273202508914472.0,\n      worker_uuid=UUID('34d031b6-f8ca-4049-83bb-31b874e7e3ea'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 28213,\n       Status.INTERESTING: 0},\n      branches=21415,\n      since_new_branch=33,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=675715.5105496178,\n      timestamp=7581399344944941.0,\n      worker_uuid=UUID('34d031b6-f8ca-4049-83bb-31b874e7e3ea'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 29125,\n       Status.INTERESTING: 0},\n      branches=20324,\n      since_new_branch=2253,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=999999.0,\n      timestamp=1.1434656170672386e+16,\n      worker_uuid=UUID('34d031b6-f8ca-4049-83bb-31b874e7e3ea'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_756_246_056,\n       Status.INTERESTING: 0},\n      branches=96,\n      since_new_branch=8489,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=1.4938977595818949e-269,\n      timestamp=0.0,\n      worker_uuid=UUID('079f7c3f-b9a8-49bc-800a-0171af9c41c0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 33,\n       Status.INTERESTING: 0},\n      branches=32317,\n      since_new_branch=6218,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=0.05,\n      timestamp=0.05,\n      worker_uuid=UUID('079f7c3f-b9a8-49bc-800a-0171af9c41c0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1000,\n       Status.INTERESTING: 0},\n      branches=13910,\n      since_new_branch=26013,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=0.3333333333333333,\n      timestamp=4.3148573640429496e+16,\n      worker_uuid=UUID('079f7c3f-b9a8-49bc-800a-0171af9c41c0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2347,\n       Status.INTERESTING: 0},\n      branches=17649,\n      since_new_branch=9875,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=129897.5334920989,\n      timestamp=4.344214371137569e+16,\n      worker_uuid=UUID('079f7c3f-b9a8-49bc-800a-0171af9c41c0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 9149,\n       Status.INTERESTING: 0},\n      branches=0,\n      since_new_branch=1024,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=168740.64902864653,\n      timestamp=5.844787824106135e+16,\n      worker_uuid=UUID('079f7c3f-b9a8-49bc-800a-0171af9c41c0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 10746,\n       Status.INTERESTING: 0},\n      branches=32548,\n      since_new_branch=25050,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=207866.56128174835,\n      timestamp=7.175170776565783e+16,\n      worker_uuid=UUID('079f7c3f-b9a8-49bc-800a-0171af9c41c0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 11871,\n       Status.INTERESTING: 0},\n      branches=15119,\n      since_new_branch=22704,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=224077.02532351075,\n      timestamp=3.231506027510483e+20,\n      worker_uuid=UUID('079f7c3f-b9a8-49bc-800a-0171af9c41c0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16084,\n       Status.INTERESTING: 0},\n      branches=2,\n      since_new_branch=38,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=253040.45647960744,\n      timestamp=9.589367992368648e+265,\n      worker_uuid=UUID('079f7c3f-b9a8-49bc-800a-0171af9c41c0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16260,\n       Status.INTERESTING: 0},\n      branches=14413,\n      since_new_branch=24364,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=309621.08724125,\n      timestamp=2.4443374789683008e+305,\n      worker_uuid=UUID('079f7c3f-b9a8-49bc-800a-0171af9c41c0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 18201,\n       Status.INTERESTING: 0},\n      branches=28208,\n      since_new_branch=22,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=323615.22634174983,\n      timestamp=3.08585591405322e+306,\n      worker_uuid=UUID('079f7c3f-b9a8-49bc-800a-0171af9c41c0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 19964,\n       Status.INTERESTING: 0},\n      branches=31704,\n      since_new_branch=15008,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=324239.10993034707,\n      timestamp=6.68571007084509e+306,\n      worker_uuid=UUID('079f7c3f-b9a8-49bc-800a-0171af9c41c0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 25049,\n       Status.INTERESTING: 0},\n      branches=23298,\n      since_new_branch=2754,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=473566.18851622223,\n      timestamp=7.769501654419991e+306,\n      worker_uuid=UUID('079f7c3f-b9a8-49bc-800a-0171af9c41c0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 26705,\n       Status.INTERESTING: 0},\n      branches=2253,\n      since_new_branch=119,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=503940.1903980397,\n      timestamp=1.1173924805007485e+307,\n      worker_uuid=UUID('079f7c3f-b9a8-49bc-800a-0171af9c41c0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 27608,\n       Status.INTERESTING: 0},\n      branches=90,\n      since_new_branch=70_576_531_347_002_224_939_691_462_684_771_725_884,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=673064.3295536719,\n      timestamp=1.2729597753077703e+307,\n      worker_uuid=UUID('079f7c3f-b9a8-49bc-800a-0171af9c41c0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 550204719,\n       Status.INTERESTING: 0},\n      branches=125,\n      since_new_branch=13371,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=824851.6521091374,\n      timestamp=1.4310148157417086e+307,\n      worker_uuid=UUID('079f7c3f-b9a8-49bc-800a-0171af9c41c0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_674_964_457,\n       Status.INTERESTING: 0},\n      branches=70_025_942_245_242_837_752_581_822_054_504_285_036,\n      since_new_branch=49,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=907205.4934704383,\n      timestamp=1.4577545395667048e+307,\n      worker_uuid=UUID('079f7c3f-b9a8-49bc-800a-0171af9c41c0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3_333_945_505_699_336_327,\n       Status.INTERESTING: 0},\n      branches=1_984_180_175,\n      since_new_branch=18822,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=915768.5903319077,\n      timestamp=1.8806957408321863e+307,\n      worker_uuid=UUID('079f7c3f-b9a8-49bc-800a-0171af9c41c0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16_848_491_078_357_746_635_050_445_380_738_223_487,\n       Status.INTERESTING: 0},\n      branches=9_166_663_176_658_262_958,\n      since_new_branch=2921,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=0.0,\n      timestamp=1.4617725358523387e+91,\n      worker_uuid=UUID('8055e5cb-efca-4be2-916d-3dce5fc73750'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 97,\n       Status.INTERESTING: 0},\n      branches=18884,\n      since_new_branch=106,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=0.0,\n      timestamp=2.733777386791554e+213,\n      worker_uuid=UUID('8055e5cb-efca-4be2-916d-3dce5fc73750'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2242,\n       Status.INTERESTING: 0},\n      branches=14_920_548_289_666_915_794_463_295_070_451_969_244,\n      since_new_branch=97_511_627_705_587_135_634_206_463_121_370_142_727,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=1.192092896e-07,\n      timestamp=3.0374395271489313e+213,\n      worker_uuid=UUID('8055e5cb-efca-4be2-916d-3dce5fc73750'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_779_150_162,\n       Status.INTERESTING: 0},\n      branches=24215,\n      since_new_branch=21111,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=478818.50986278587,\n      timestamp=3.074747682791619e+213,\n      worker_uuid=UUID('8055e5cb-efca-4be2-916d-3dce5fc73750'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7_931_549_988_697_211_936,\n       Status.INTERESTING: 0},\n      branches=114,\n      since_new_branch=3,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=747870.7043591005,\n      timestamp=4.004815887563116e+213,\n      worker_uuid=UUID('8055e5cb-efca-4be2-916d-3dce5fc73750'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2_618_982_270_220_088_215_397_546_076_300_451_257,\n       Status.INTERESTING: 0},\n      branches=6943,\n      since_new_branch=6336,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=2.00001,\n      timestamp=0.05,\n      worker_uuid=UUID('e37c78bd-81ad-44dc-a018-785bce24ce5f'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 42,\n       Status.INTERESTING: 0},\n      branches=71,\n      since_new_branch=28297,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=278800.9987306115,\n      timestamp=0.5,\n      worker_uuid=UUID('e37c78bd-81ad-44dc-a018-785bce24ce5f'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 23418,\n       Status.INTERESTING: 0},\n      branches=30894,\n      since_new_branch=12626,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=409018.6737819154,\n      timestamp=1.5,\n      worker_uuid=UUID('e37c78bd-81ad-44dc-a018-785bce24ce5f'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 32353,\n       Status.INTERESTING: 0},\n      branches=404,\n      since_new_branch=5609,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=434892.43738134176,\n      timestamp=5.736795513492877e+166,\n      worker_uuid=UUID('e37c78bd-81ad-44dc-a018-785bce24ce5f'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_507_224_426,\n       Status.INTERESTING: 0},\n      branches=56,\n      since_new_branch=15163,\n      phase=Phase.REPLAY)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.001224541978444904,
          "overall:gc": 0.0,
          "generate:reports": 0.05232150305528194
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878939.488416
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=4.6552062787141424e-206,\n      timestamp=1.1754943508222875e-38,\n      worker_uuid=UUID('8dc5fd14-9373-44b7-b7bb-94116f7a2efd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 10,\n       Status.INTERESTING: 0},\n      branches=49,\n      since_new_branch=26,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=1.175494351e-38,\n      timestamp=9007199254740992.0,\n      worker_uuid=UUID('8dc5fd14-9373-44b7-b7bb-94116f7a2efd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 77,\n       Status.INTERESTING: 0},\n      branches=63,\n      since_new_branch=1_607_402_178,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=28184.66027371592,\n      timestamp=3.303266988031798e+16,\n      worker_uuid=UUID('8dc5fd14-9373-44b7-b7bb-94116f7a2efd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 14405,\n       Status.INTERESTING: 0},\n      branches=9_176_303_351_061_437_147,\n      since_new_branch=56,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=126848.53669401666,\n      timestamp=1.8750738233924825e+103,\n      worker_uuid=UUID('8dc5fd14-9373-44b7-b7bb-94116f7a2efd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16107,\n       Status.INTERESTING: 0},\n      branches=1_276_305_155,\n      since_new_branch=110,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=462184.94815151114,\n      timestamp=8.898065793261263e+104,\n      worker_uuid=UUID('8dc5fd14-9373-44b7-b7bb-94116f7a2efd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16798,\n       Status.INTERESTING: 0},\n      branches=6_991_362_756_677_256_231,\n      since_new_branch=45,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=622316.9122306476,\n      timestamp=9.679434186574491e+104,\n      worker_uuid=UUID('8dc5fd14-9373-44b7-b7bb-94116f7a2efd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 17459,\n       Status.INTERESTING: 0},\n      branches=3_092_190_219_899_563_712,\n      since_new_branch=14207,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=714244.6978559846,\n      timestamp=1.1516314165719918e+105,\n      worker_uuid=UUID('8dc5fd14-9373-44b7-b7bb-94116f7a2efd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 827265266,\n       Status.INTERESTING: 0},\n      branches=23772,\n      since_new_branch=9674,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=9.18498739657348e-108,\n      timestamp=1.5726964300277752e-304,\n      worker_uuid=UUID('e12d4279-cd7b-42b0-9a60-f39201acbce6'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8364,\n       Status.INTERESTING: 0},\n      branches=7073,\n      since_new_branch=19153,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=445418.66096350725,\n      timestamp=6.103515625e-05,\n      worker_uuid=UUID('e12d4279-cd7b-42b0-9a60-f39201acbce6'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 25823,\n       Status.INTERESTING: 0},\n      branches=88,\n      since_new_branch=32324,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=579627.3019087866,\n      timestamp=0.024833625295139036,\n      worker_uuid=UUID('e12d4279-cd7b-42b0-9a60-f39201acbce6'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 29326,\n       Status.INTERESTING: 0},\n      branches=5334,\n      since_new_branch=512,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=820637.1625132769,\n      timestamp=0.03565258614379065,\n      worker_uuid=UUID('e12d4279-cd7b-42b0-9a60-f39201acbce6'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 126_805_324_419_545_205_048_573_979_442_764_077_241,\n       Status.INTERESTING: 0},\n      branches=9873,\n      since_new_branch=512,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0003466659691184759,
          "overall:gc": 0.0,
          "generate:reports": 0.012013791012577713
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878927.579979
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=893413.3415026815,\n      timestamp=0.5,\n      worker_uuid=UUID('bbeb02a7-61e7-4c1e-a8ff-882971dd7a2e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 251,\n       Status.INTERESTING: 0},\n      branches=97,\n      since_new_branch=45,\n      phase=Phase.DISTILL)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.02079851180315e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.001585042045917362
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878949.4100878
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1.5735077623435353e-221,\n      timestamp=2954690329028690.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 38,\n       Status.INTERESTING: 0},\n      branches=10280,\n      since_new_branch=512,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=4.9656443066552393e-206,\n      timestamp=2954690329028691.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 91,\n       Status.INTERESTING: 0},\n      branches=20627,\n      since_new_branch=14062,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=2.068362742632639e-17,\n      timestamp=3136661747237497.5,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 201,\n       Status.INTERESTING: 0},\n      branches=125,\n      since_new_branch=4015,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=57882.22645926001,\n      timestamp=3215915527181022.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 4775,\n       Status.INTERESTING: 0},\n      branches=6796,\n      since_new_branch=9_174_105_319_619_458_509,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=138069.6101512913,\n      timestamp=3341144339598687.5,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 6697,\n       Status.INTERESTING: 0},\n      branches=12452,\n      since_new_branch=1024,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=294460.80762899236,\n      timestamp=3375928495828707.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 12653,\n       Status.INTERESTING: 0},\n      branches=9097,\n      since_new_branch=80,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=318373.0667682059,\n      timestamp=3389852038004490.5,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 13514,\n       Status.INTERESTING: 0},\n      branches=9300,\n      since_new_branch=1000,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=318507.6460767736,\n      timestamp=3458361240574397.5,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 18602,\n       Status.INTERESTING: 0},\n      branches=1000,\n      since_new_branch=409560035,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=431017.34656152915,\n      timestamp=3501350291414869.5,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 21121,\n       Status.INTERESTING: 0},\n      branches=15927,\n      since_new_branch=5095,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=498981.35429058556,\n      timestamp=3518537211002304.5,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 22422,\n       Status.INTERESTING: 0},\n      branches=23228,\n      since_new_branch=12,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=529288.1741240268,\n      timestamp=3745901947689907.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 23074,\n       Status.INTERESTING: 0},\n      branches=20119,\n      since_new_branch=45,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=587617.7266474515,\n      timestamp=3818951480106840.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 23922,\n       Status.INTERESTING: 0},\n      branches=1590,\n      since_new_branch=404,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=699414.0827828895,\n      timestamp=3846158336286541.5,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 28555,\n       Status.INTERESTING: 0},\n      branches=1024,\n      since_new_branch=20126,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=757273.3430798135,\n      timestamp=3914798326054225.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 29858,\n       Status.INTERESTING: 0},\n      branches=111,\n      since_new_branch=1024,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=807747.2942192269,\n      timestamp=4065605190749977.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 31310,\n       Status.INTERESTING: 0},\n      branches=14489,\n      since_new_branch=22022,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=862286.3433991628,\n      timestamp=4171359407358946.5,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 31917,\n       Status.INTERESTING: 0},\n      branches=10929,\n      since_new_branch=24,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=999999.9999999999,\n      timestamp=4172761247178344.5,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 32567,\n       Status.INTERESTING: 0},\n      branches=28_561_051_599_036_393_569_788_329_930_298_354_751,\n      since_new_branch=6731,\n      phase=Phase.REPLAY)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0005557090044021606,
          "overall:gc": 0.0,
          "generate:reports": 0.012690126895904541
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878968.243079
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=848311.8423457469,\n      timestamp=9.755546311967225e+307,\n      worker_uuid=UUID('58d0c55f-0cc7-4fc9-b118-a26b4d75b8ca'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 11540,\n       Status.INTERESTING: 0},\n      branches=11282,\n      since_new_branch=21243,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.05,\n      timestamp=0.5,\n      worker_uuid=UUID('a7dd5378-6007-4d96-b82a-008027bed7fd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 99,\n       Status.INTERESTING: 0},\n      branches=122,\n      since_new_branch=7282,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.5,\n      timestamp=2.5271990544246176e+16,\n      worker_uuid=UUID('a7dd5378-6007-4d96-b82a-008027bed7fd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 404,\n       Status.INTERESTING: 0},\n      branches=78141312,\n      since_new_branch=77,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=137071.262828429,\n      timestamp=6.178133528891653e+267,\n      worker_uuid=UUID('a7dd5378-6007-4d96-b82a-008027bed7fd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5394,\n       Status.INTERESTING: 0},\n      branches=93,\n      since_new_branch=6478,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.05,\n      timestamp=2.0693817706694356e+307,\n      worker_uuid=UUID('b32d7f56-c0f9-4c9d-a18b-da7785674340'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 26,\n       Status.INTERESTING: 0},\n      branches=14794,\n      since_new_branch=107_085_137_695_042_497_804_575_261_337_159_334_751,\n      phase=Phase.DISTILL)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00019066600361838937,
          "overall:gc": 0.0,
          "generate:reports": 0.009129540994763374
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878969.275666
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 3.654201282188296e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.000385124993044883
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878917.780513
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=0.0,\n      timestamp=0.05,\n      worker_uuid=UUID('e8d79f49-af6d-414c-8a6f-188a424e617b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 81,\n       Status.INTERESTING: 0},\n      branches=35,\n      since_new_branch=12,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=61647.46979365422,\n      timestamp=0.5,\n      worker_uuid=UUID('e8d79f49-af6d-414c-8a6f-188a424e617b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 91,\n       Status.INTERESTING: 0},\n      branches=31,\n      since_new_branch=81141598,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=159811.58982816382,\n      timestamp=0.99999,\n      worker_uuid=UUID('e8d79f49-af6d-414c-8a6f-188a424e617b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 103,\n       Status.INTERESTING: 0},\n      branches=81,\n      since_new_branch=108,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=253876.5941825925,\n      timestamp=2.5031431255787664e+16,\n      worker_uuid=UUID('e8d79f49-af6d-414c-8a6f-188a424e617b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 103,\n       Status.INTERESTING: 0},\n      branches=2331,\n      since_new_branch=73,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=312358.1175543516,\n      timestamp=4.412429675835959e+16,\n      worker_uuid=UUID('e8d79f49-af6d-414c-8a6f-188a424e617b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 117,\n       Status.INTERESTING: 0},\n      branches=146_293_835_025_255_086_165_245_835_367_821_268_831,\n      since_new_branch=1_815_412_876,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=327016.8153350275,\n      timestamp=4.823725882778676e+16,\n      worker_uuid=UUID('e8d79f49-af6d-414c-8a6f-188a424e617b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 404,\n       Status.INTERESTING: 0},\n      branches=95,\n      since_new_branch=8202,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=329854.9247073944,\n      timestamp=2.5435888956219046e+167,\n      worker_uuid=UUID('e8d79f49-af6d-414c-8a6f-188a424e617b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1000,\n       Status.INTERESTING: 0},\n      branches=4,\n      since_new_branch=8971,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=331739.0149422999,\n      timestamp=1.7068634142207832e+306,\n      worker_uuid=UUID('e8d79f49-af6d-414c-8a6f-188a424e617b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8779,\n       Status.INTERESTING: 0},\n      branches=30443,\n      since_new_branch=20217,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=456505.66481058265,\n      timestamp=5.4029126669976766e+306,\n      worker_uuid=UUID('e8d79f49-af6d-414c-8a6f-188a424e617b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 14471,\n       Status.INTERESTING: 0},\n      branches=1_600_373_295,\n      since_new_branch=4077,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=534040.0939276845,\n      timestamp=6.126592310352623e+306,\n      worker_uuid=UUID('e8d79f49-af6d-414c-8a6f-188a424e617b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 15280,\n       Status.INTERESTING: 0},\n      branches=18013,\n      since_new_branch=1_736_169_503,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=610939.9967900594,\n      timestamp=6.337990497315721e+306,\n      worker_uuid=UUID('e8d79f49-af6d-414c-8a6f-188a424e617b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 17343,\n       Status.INTERESTING: 0},\n      branches=17889,\n      since_new_branch=8192,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=635290.2184619816,\n      timestamp=8.580688994684184e+306,\n      worker_uuid=UUID('e8d79f49-af6d-414c-8a6f-188a424e617b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 20022,\n       Status.INTERESTING: 0},\n      branches=20370,\n      since_new_branch=20674,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=702916.3167753954,\n      timestamp=1.2532477712951647e+307,\n      worker_uuid=UUID('e8d79f49-af6d-414c-8a6f-188a424e617b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 27296,\n       Status.INTERESTING: 0},\n      branches=14720,\n      since_new_branch=8351,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=770227.5235968321,\n      timestamp=1.580160636714719e+307,\n      worker_uuid=UUID('e8d79f49-af6d-414c-8a6f-188a424e617b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 32033,\n       Status.INTERESTING: 0},\n      branches=7_758_152_772_819_086_461,\n      since_new_branch=5_718_891_578_117_117_163,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=796817.7864677983,\n      timestamp=2.440341478359989e+307,\n      worker_uuid=UUID('e8d79f49-af6d-414c-8a6f-188a424e617b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 32040,\n       Status.INTERESTING: 0},\n      branches=68,\n      since_new_branch=32008,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=841168.886795688,\n      timestamp=2.684182526009994e+307,\n      worker_uuid=UUID('e8d79f49-af6d-414c-8a6f-188a424e617b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_418_387_504,\n       Status.INTERESTING: 0},\n      branches=1_900_627_461,\n      since_new_branch=65535,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=847627.7569607713,\n      timestamp=4.430535098348046e+307,\n      worker_uuid=UUID('e8d79f49-af6d-414c-8a6f-188a424e617b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7_322_499_673_787_684_650,\n       Status.INTERESTING: 0},\n      branches=16806,\n      since_new_branch=60,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=892881.129491365,\n      timestamp=5.372508270202914e+307,\n      worker_uuid=UUID('e8d79f49-af6d-414c-8a6f-188a424e617b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8_908_890_515_925_581_935,\n       Status.INTERESTING: 0},\n      branches=11262,\n      since_new_branch=10034,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_5',\n      nodeid='nodeid_5',\n      elapsed_time=991543.6079242845,\n      timestamp=6.089364251509367e+307,\n      worker_uuid=UUID('e8d79f49-af6d-414c-8a6f-188a424e617b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 130_000_480_504_898_152_758_906_274_153_832_917_116,\n       Status.INTERESTING: 0},\n      branches=3,\n      since_new_branch=32765,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.000608125003054738,
          "overall:gc": 0.0,
          "generate:reports": 0.01530216698301956
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878911.440692
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=821725.1349704631,\n      timestamp=0.5,\n      worker_uuid=UUID('2b263e0c-e7b2-4237-beb7-aa5d9f5ddbf2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 94,\n       Status.INTERESTING: 0},\n      branches=18655,\n      since_new_branch=21818,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=860499.8961169561,\n      timestamp=2.00001,\n      worker_uuid=UUID('2b263e0c-e7b2-4237-beb7-aa5d9f5ddbf2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 30570,\n       Status.INTERESTING: 0},\n      branches=39,\n      since_new_branch=1_967_423_752,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00010258296970278025,
          "overall:gc": 0.0,
          "generate:reports": 0.0026489589945413172
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878918.911034
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=196467.46213321903,\n      timestamp=6.801615499070001e+222,\n      worker_uuid=UUID('649dda6e-b49c-43dc-acbc-408cc5521660'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 108,\n       Status.INTERESTING: 0},\n      branches=16722,\n      since_new_branch=1_160_694_437,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=377368.78727265354,\n      timestamp=5.983659378145074e+306,\n      worker_uuid=UUID('649dda6e-b49c-43dc-acbc-408cc5521660'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 220,\n       Status.INTERESTING: 0},\n      branches=36,\n      since_new_branch=40,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=513922.9952124907,\n      timestamp=8.435235519215692e+306,\n      worker_uuid=UUID('649dda6e-b49c-43dc-acbc-408cc5521660'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8692,\n       Status.INTERESTING: 0},\n      branches=18574,\n      since_new_branch=112,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=909365.0619657681,\n      timestamp=1.2272379120502325e+307,\n      worker_uuid=UUID('649dda6e-b49c-43dc-acbc-408cc5521660'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 29685,\n       Status.INTERESTING: 0},\n      branches=2710,\n      since_new_branch=4814,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=946989.7261671756,\n      timestamp=2.778380647633684e+307,\n      worker_uuid=UUID('649dda6e-b49c-43dc-acbc-408cc5521660'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2_067_822_486,\n       Status.INTERESTING: 0},\n      branches=118_718_799_743_773_671_469_356_936_911_654_494_705,\n      since_new_branch=18060,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00018754199845716357,
          "overall:gc": 0.0,
          "generate:reports": 0.0069281249307096004
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878922.190455
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=0.05,\n      timestamp=4.288006969382135e+307,\n      worker_uuid=UUID('ae3ef393-6544-49cd-aea0-29e2d3a28cfd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 78,\n       Status.INTERESTING: 0},\n      branches=60_632_598_027_994_903_560_797_814_163_926_664_373,\n      since_new_branch=110,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=369030.35949646326,\n      timestamp=8.246993678092959e+307,\n      worker_uuid=UUID('ae3ef393-6544-49cd-aea0-29e2d3a28cfd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 32009,\n       Status.INTERESTING: 0},\n      branches=7460,\n      since_new_branch=30445,\n      phase=Phase.REPLAY)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011333299335092306,
          "overall:gc": 0.0,
          "generate:reports": 0.005869582004379481
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878937.229304
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=12002.688393334185,\n      timestamp=2954690329028690.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=23996,\n      since_new_branch=0,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.537502096965909e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.0015858340193517506
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878971.4080992
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=547249.2029073033,\n      timestamp=3001377171973488.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 79,\n       Status.INTERESTING: 0},\n      branches=502746204,\n      since_new_branch=17142,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.062502067536116e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.003128707001451403
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878966.102509
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=0.0,\n      timestamp=1.257247174415749e+16,\n      worker_uuid=UUID('234ffca8-82c4-4626-8338-33db216410ed'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 86,\n       Status.INTERESTING: 0},\n      branches=4558,\n      since_new_branch=30714,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=5.8289342247307826e-126,\n      timestamp=1.3359034799278738e+16,\n      worker_uuid=UUID('234ffca8-82c4-4626-8338-33db216410ed'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 11284,\n       Status.INTERESTING: 0},\n      branches=99_312_041_708_795_642_268_588_281_625_334_864_207,\n      since_new_branch=15246,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=99320.56378445477,\n      timestamp=1.4592499544822948e+16,\n      worker_uuid=UUID('234ffca8-82c4-4626-8338-33db216410ed'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 14873,\n       Status.INTERESTING: 0},\n      branches=37,\n      since_new_branch=17628,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=173734.22471538972,\n      timestamp=4.07295488395927e+16,\n      worker_uuid=UUID('234ffca8-82c4-4626-8338-33db216410ed'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 30867,\n       Status.INTERESTING: 0},\n      branches=3684,\n      since_new_branch=24440,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=225811.75436960126,\n      timestamp=4.288478717479026e+16,\n      worker_uuid=UUID('234ffca8-82c4-4626-8338-33db216410ed'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 11_707_627_151_178_500_093_794_318_932_348_004_108,\n       Status.INTERESTING: 0},\n      branches=32,\n      since_new_branch=30308,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=170582.1189628638,\n      timestamp=1.3333841713482668e+16,\n      worker_uuid=UUID('f5b846c1-65e5-41ae-ac3a-a6181f5a7f20'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 13588,\n       Status.INTERESTING: 0},\n      branches=4458,\n      since_new_branch=13,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=2.1923996408273896e-148,\n      timestamp=4.910220126096044e+306,\n      worker_uuid=UUID('f9fd9028-2d72-4174-9bde-ff139a36da35'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2047,\n       Status.INTERESTING: 0},\n      branches=2496,\n      since_new_branch=6_040_773_391_495_467_519,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=626402.574115914,\n      timestamp=6.768495506704312e+307,\n      worker_uuid=UUID('f9fd9028-2d72-4174-9bde-ff139a36da35'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16350,\n       Status.INTERESTING: 0},\n      branches=96,\n      since_new_branch=457442501,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=649080.0843248824,\n      timestamp=8.890711187613349e+307,\n      worker_uuid=UUID('f9fd9028-2d72-4174-9bde-ff139a36da35'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 29405,\n       Status.INTERESTING: 0},\n      branches=2443,\n      since_new_branch=11431,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=785510.4023427755,\n      timestamp=1.037069483965959e+308,\n      worker_uuid=UUID('f9fd9028-2d72-4174-9bde-ff139a36da35'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2_818_835_519_226_593_983,\n       Status.INTERESTING: 0},\n      branches=2511,\n      since_new_branch=22267,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=0.05,\n      timestamp=3.2446746991026963e-126,\n      worker_uuid=UUID('cd10cc5a-3cb5-470c-84c2-eca4ab278baa'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1216,\n       Status.INTERESTING: 0},\n      branches=11,\n      since_new_branch=15780,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=1.730971293322528e-266,\n      timestamp=0.5,\n      worker_uuid=UUID('3747ead2-c69f-4dc1-97f8-041003395ec2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 14,\n       Status.INTERESTING: 0},\n      branches=6_764_242_086_072_477_657,\n      since_new_branch=127,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=3.201961719695811e-30,\n      timestamp=1.1,\n      worker_uuid=UUID('3747ead2-c69f-4dc1-97f8-041003395ec2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 26,\n       Status.INTERESTING: 0},\n      branches=8_983_644_046_426_803_512,\n      since_new_branch=24398,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=211567.0778757735,\n      timestamp=3.4216607433482943e+306,\n      worker_uuid=UUID('3747ead2-c69f-4dc1-97f8-041003395ec2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 4389,\n       Status.INTERESTING: 0},\n      branches=106,\n      since_new_branch=80,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=375440.06929920224,\n      timestamp=3.899027018769413e+306,\n      worker_uuid=UUID('3747ead2-c69f-4dc1-97f8-041003395ec2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 22671,\n       Status.INTERESTING: 0},\n      branches=9256,\n      since_new_branch=2_081_200_737,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=396315.27356185124,\n      timestamp=2.5320668780068583e+307,\n      worker_uuid=UUID('3747ead2-c69f-4dc1-97f8-041003395ec2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 30100,\n       Status.INTERESTING: 0},\n      branches=2_131_280_668,\n      since_new_branch=48,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=590943.6645066953,\n      timestamp=3.546182043281982e+307,\n      worker_uuid=UUID('3747ead2-c69f-4dc1-97f8-041003395ec2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 577040019,\n       Status.INTERESTING: 0},\n      branches=32540,\n      since_new_branch=31118,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=21869.131674609136,\n      timestamp=3.444244721319573e+307,\n      worker_uuid=UUID('f0fd85be-dd2c-4301-a875-76c6cf0cea03'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 90_263_786_327_696_270_412_878_892_907_724_077_417,\n       Status.INTERESTING: 0},\n      branches=512,\n      since_new_branch=350,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=148472.86036903886,\n      timestamp=6.054423779366507e+16,\n      worker_uuid=UUID('33eda5e7-0bdc-4de5-94fe-2dc525c66b59'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1000,\n       Status.INTERESTING: 0},\n      branches=29536,\n      since_new_branch=25534,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=382789.6859183343,\n      timestamp=7.070193611159821e+155,\n      worker_uuid=UUID('33eda5e7-0bdc-4de5-94fe-2dc525c66b59'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1024,\n       Status.INTERESTING: 0},\n      branches=76,\n      since_new_branch=6_378_559_290_998_227_904,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=987416.4069116411,\n      timestamp=1.1335399737979576e+200,\n      worker_uuid=UUID('33eda5e7-0bdc-4de5-94fe-2dc525c66b59'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 30729,\n       Status.INTERESTING: 0},\n      branches=43,\n      since_new_branch=76,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=504876.47667495394,\n      timestamp=6.651931737085241e+16,\n      worker_uuid=UUID('db9a5095-3ad5-483a-9ca4-8dddbe85a985'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 22695,\n       Status.INTERESTING: 0},\n      branches=2406,\n      since_new_branch=5298,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=1.192092896e-07,\n      timestamp=6.174761844589916e+16,\n      worker_uuid=UUID('c062298f-4e2c-43b6-a658-89b0bc413c72'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 11558,\n       Status.INTERESTING: 0},\n      branches=19275,\n      since_new_branch=3_324_991_813_524_410_909,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=174623.84155301927,\n      timestamp=2.2977057055015884e+306,\n      worker_uuid=UUID('c062298f-4e2c-43b6-a658-89b0bc413c72'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 17408,\n       Status.INTERESTING: 0},\n      branches=24649,\n      since_new_branch=6_376_892_691_795_604_425,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=0.05,\n      timestamp=0.5,\n      worker_uuid=UUID('0efdbce7-3f69-47bd-9717-942d3653588d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 40,\n       Status.INTERESTING: 0},\n      branches=32129,\n      since_new_branch=37,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=133681.05421995005,\n      timestamp=2.1512373545077424e+16,\n      worker_uuid=UUID('0efdbce7-3f69-47bd-9717-942d3653588d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 89,\n       Status.INTERESTING: 0},\n      branches=9999,\n      since_new_branch=2_070_504_321,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=819449.949620921,\n      timestamp=6.969441086676807e+192,\n      worker_uuid=UUID('0efdbce7-3f69-47bd-9717-942d3653588d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 404,\n       Status.INTERESTING: 0},\n      branches=3526,\n      since_new_branch=158_240_364_766_907_892_819_819_450_041_475_043_927,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=961721.5270676569,\n      timestamp=1.184968979025738e+193,\n      worker_uuid=UUID('0efdbce7-3f69-47bd-9717-942d3653588d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_080_929_765,\n       Status.INTERESTING: 0},\n      branches=72,\n      since_new_branch=12,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=3.4109318344205195e-178,\n      timestamp=2.220446049250313e-16,\n      worker_uuid=UUID('c7dbe0f1-6b1f-4657-893a-5ff14387d07c'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 4657,\n       Status.INTERESTING: 0},\n      branches=27484,\n      since_new_branch=849538123,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=226500.44143570063,\n      timestamp=0.05,\n      worker_uuid=UUID('c7dbe0f1-6b1f-4657-893a-5ff14387d07c'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 9322,\n       Status.INTERESTING: 0},\n      branches=1024,\n      since_new_branch=2_923_697_944_347_296_840,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=234951.63923357936,\n      timestamp=1.808510101427307e+16,\n      worker_uuid=UUID('c7dbe0f1-6b1f-4657-893a-5ff14387d07c'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 10434,\n       Status.INTERESTING: 0},\n      branches=8206,\n      since_new_branch=22635,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=443478.2305165564,\n      timestamp=1.147954603155556e+184,\n      worker_uuid=UUID('c7dbe0f1-6b1f-4657-893a-5ff14387d07c'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 31854,\n       Status.INTERESTING: 0},\n      branches=5_886_699_473_470_102_570,\n      since_new_branch=19387,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=607881.2180647578,\n      timestamp=9.877435782607749e+306,\n      worker_uuid=UUID('c7dbe0f1-6b1f-4657-893a-5ff14387d07c'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 132_178_341_918_182_163,\n       Status.INTERESTING: 0},\n      branches=300,\n      since_new_branch=15470,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=675564.7634042719,\n      timestamp=1.0561071234130978e+308,\n      worker_uuid=UUID('c7dbe0f1-6b1f-4657-893a-5ff14387d07c'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 6_048_420_828_411_868_987,\n       Status.INTERESTING: 0},\n      branches=512,\n      since_new_branch=18090,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0018022089498117566,
          "overall:gc": 0.0,
          "generate:reports": 0.037312293832655996
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878946.203579
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=0.5,\n      timestamp=1.2983368672618865e+308,\n      worker_uuid=UUID('b8ffacc8-680b-48ad-bea9-ddb6dce9cc2a'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16308,\n       Status.INTERESTING: 0},\n      branches=22872,\n      since_new_branch=300,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=257251.56104869855,\n      timestamp=1.5351865043670642e+308,\n      worker_uuid=UUID('b8ffacc8-680b-48ad-bea9-ddb6dce9cc2a'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_324_412_898,\n       Status.INTERESTING: 0},\n      branches=29321,\n      since_new_branch=9828,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=849301.3493064212,\n      timestamp=inf,\n      worker_uuid=UUID('b8ffacc8-680b-48ad-bea9-ddb6dce9cc2a'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_762_429_253,\n       Status.INTERESTING: 0},\n      branches=7130,\n      since_new_branch=595_001_392_037_552_029,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0001272499794140458,
          "overall:gc": 0.0,
          "generate:reports": 0.0073332079336978495
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878915.7010539
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=3.229562412027952e-244,\n      timestamp=5.618349800075589e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=24168,\n      since_new_branch=38,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0002275829901918769,
          "overall:gc": 0.0,
          "generate:reports": 0.003106083022430539
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878955.176903
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.0,\n      timestamp=2.220446049250313e-16,\n      worker_uuid=UUID('e188c918-7317-4f1b-8112-d3b445dddecf'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=9299,\n      since_new_branch=9,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.0,\n      timestamp=0.05,\n      worker_uuid=UUID('e188c918-7317-4f1b-8112-d3b445dddecf'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1,\n       Status.INTERESTING: 0},\n      branches=2480,\n      since_new_branch=21137,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=2.627574271275782e-301,\n      timestamp=3639207352277223.0,\n      worker_uuid=UUID('e188c918-7317-4f1b-8112-d3b445dddecf'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 4,\n       Status.INTERESTING: 0},\n      branches=53,\n      since_new_branch=26961,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1.8878255661983262e-225,\n      timestamp=1.827876178464689e+16,\n      worker_uuid=UUID('e188c918-7317-4f1b-8112-d3b445dddecf'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 27,\n       Status.INTERESTING: 0},\n      branches=31491,\n      since_new_branch=113,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=2.9263061447470292e-120,\n      timestamp=7.2001524021907736e+16,\n      worker_uuid=UUID('e188c918-7317-4f1b-8112-d3b445dddecf'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 44,\n       Status.INTERESTING: 0},\n      branches=1_748_683_228,\n      since_new_branch=13,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1.5,\n      timestamp=2.5150584655446057e+100,\n      worker_uuid=UUID('e188c918-7317-4f1b-8112-d3b445dddecf'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 51,\n       Status.INTERESTING: 0},\n      branches=10864,\n      since_new_branch=900134632,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=154454.5151023147,\n      timestamp=2.4681642658151206e+306,\n      worker_uuid=UUID('e188c918-7317-4f1b-8112-d3b445dddecf'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2678,\n       Status.INTERESTING: 0},\n      branches=7_866_376_182_404_915_276,\n      since_new_branch=19447,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=160329.81958600858,\n      timestamp=4.888423162251784e+306,\n      worker_uuid=UUID('e188c918-7317-4f1b-8112-d3b445dddecf'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3388,\n       Status.INTERESTING: 0},\n      branches=77,\n      since_new_branch=85,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=246673.9094036184,\n      timestamp=3.033538033481325e+307,\n      worker_uuid=UUID('e188c918-7317-4f1b-8112-d3b445dddecf'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 4173,\n       Status.INTERESTING: 0},\n      branches=512,\n      since_new_branch=8770,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=359925.02923381835,\n      timestamp=3.4432849824483913e+307,\n      worker_uuid=UUID('e188c918-7317-4f1b-8112-d3b445dddecf'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5494,\n       Status.INTERESTING: 0},\n      branches=30046,\n      since_new_branch=1811,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=471789.34639797686,\n      timestamp=3.872285301356818e+307,\n      worker_uuid=UUID('e188c918-7317-4f1b-8112-d3b445dddecf'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5517,\n       Status.INTERESTING: 0},\n      branches=4,\n      since_new_branch=2_117_460_801,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=592964.7184058516,\n      timestamp=4.356368155996594e+307,\n      worker_uuid=UUID('e188c918-7317-4f1b-8112-d3b445dddecf'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 25747,\n       Status.INTERESTING: 0},\n      branches=12222,\n      since_new_branch=55,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=631101.2424637132,\n      timestamp=5.217621421833245e+307,\n      worker_uuid=UUID('e188c918-7317-4f1b-8112-d3b445dddecf'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 28440,\n       Status.INTERESTING: 0},\n      branches=29576,\n      since_new_branch=9265,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=800341.5460076997,\n      timestamp=5.526575146337995e+307,\n      worker_uuid=UUID('e188c918-7317-4f1b-8112-d3b445dddecf'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 32047,\n       Status.INTERESTING: 0},\n      branches=55,\n      since_new_branch=15598,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=833319.5067277079,\n      timestamp=5.808432905545029e+307,\n      worker_uuid=UUID('e188c918-7317-4f1b-8112-d3b445dddecf'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 32541,\n       Status.INTERESTING: 0},\n      branches=24654,\n      since_new_branch=28863,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=837004.591555063,\n      timestamp=8.00847698453307e+307,\n      worker_uuid=UUID('e188c918-7317-4f1b-8112-d3b445dddecf'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_558_129_200,\n       Status.INTERESTING: 0},\n      branches=107,\n      since_new_branch=35,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=860801.8608772408,\n      timestamp=8.972550122961e+307,\n      worker_uuid=UUID('e188c918-7317-4f1b-8112-d3b445dddecf'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_339_715_073_515_313_240,\n       Status.INTERESTING: 0},\n      branches=21025,\n      since_new_branch=1222,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=872567.7912482936,\n      timestamp=9.074356406013448e+307,\n      worker_uuid=UUID('e188c918-7317-4f1b-8112-d3b445dddecf'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 44_705_764_993_892_257_908_010_258_062_323_573_064,\n       Status.INTERESTING: 0},\n      branches=1_541_995_412,\n      since_new_branch=122,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0006029169890098274,
          "overall:gc": 0.0,
          "generate:reports": 0.014426875102799386
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878913.52306
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=127998.96807668402,\n      timestamp=3.908702179829076e+16,\n      worker_uuid=UUID('58d74952-5d7b-445a-9586-c302dd29c6b3'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3034,\n       Status.INTERESTING: 0},\n      branches=26295,\n      since_new_branch=66,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_1',\n      nodeid='nodeid_1',\n      elapsed_time=586345.8652168768,\n      timestamp=2.9862117848591425e+306,\n      worker_uuid=UUID('58d74952-5d7b-445a-9586-c302dd29c6b3'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 17984,\n       Status.INTERESTING: 0},\n      branches=16878,\n      since_new_branch=11106,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00010624999413266778,
          "overall:gc": 0.0,
          "generate:reports": 0.005230875976849347
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878914.6046562
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 4.32920060120523e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.0017774999723769724
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878960.659165
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=2.225073858507203e-309,\n      timestamp=6.909675325964564e+307,\n      worker_uuid=UUID('bbeb02a7-61e7-4c1e-a8ff-882971dd7a2e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7477,\n       Status.INTERESTING: 0},\n      branches=106,\n      since_new_branch=29296,\n      phase=Phase.DISTILL)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.029197877272964e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.0017433749744668603
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878950.52156
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=8.233595208691189e-148,\n      timestamp=1.705521358571774e+306,\n      worker_uuid=UUID('9201fb45-d113-42d3-a0a4-afaf8f15b14e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 62,\n       Status.INTERESTING: 0},\n      branches=8192,\n      since_new_branch=75,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=368323.22478598874,\n      timestamp=4.129434477579957e+306,\n      worker_uuid=UUID('9201fb45-d113-42d3-a0a4-afaf8f15b14e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 4222,\n       Status.INTERESTING: 0},\n      branches=32378,\n      since_new_branch=139_025_236_707_521_534_102_382_149_342_404_706_877,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=458410.356638648,\n      timestamp=6.588000560262445e+306,\n      worker_uuid=UUID('9201fb45-d113-42d3-a0a4-afaf8f15b14e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8192,\n       Status.INTERESTING: 0},\n      branches=15360,\n      since_new_branch=39,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=884293.4589326184,\n      timestamp=9.590015889245544e+306,\n      worker_uuid=UUID('9201fb45-d113-42d3-a0a4-afaf8f15b14e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 19573,\n       Status.INTERESTING: 0},\n      branches=71,\n      since_new_branch=22717,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=923470.7887799563,\n      timestamp=1.3752115830317848e+307,\n      worker_uuid=UUID('9201fb45-d113-42d3-a0a4-afaf8f15b14e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 21616,\n       Status.INTERESTING: 0},\n      branches=5595,\n      since_new_branch=2635,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=7.512127499041852e-185,\n      timestamp=204819853361435.66,\n      worker_uuid=UUID('f7adcae8-0236-4645-a747-4944f10c96fc'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 115,\n       Status.INTERESTING: 0},\n      branches=24501,\n      since_new_branch=34,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=510019.70305943146,\n      timestamp=821465501759266.8,\n      worker_uuid=UUID('f7adcae8-0236-4645-a747-4944f10c96fc'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 25151,\n       Status.INTERESTING: 0},\n      branches=15756,\n      since_new_branch=23766,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=4.4515236815949076e-135,\n      timestamp=7.426326429420215e+135,\n      worker_uuid=UUID('df9f09dc-1f43-48fa-aba9-ec0badd42093'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 23175,\n       Status.INTERESTING: 0},\n      branches=740394444,\n      since_new_branch=12540,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=0.3333333333333333,\n      timestamp=1.3190392588535747e+137,\n      worker_uuid=UUID('df9f09dc-1f43-48fa-aba9-ec0badd42093'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_927_767_268,\n       Status.INTERESTING: 0},\n      branches=18376,\n      since_new_branch=22655,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=337920.83018299687,\n      timestamp=1.4359533907527183e+137,\n      worker_uuid=UUID('df9f09dc-1f43-48fa-aba9-ec0badd42093'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2_101_223_048,\n       Status.INTERESTING: 0},\n      branches=12973,\n      since_new_branch=43_704_692_849_883_832_127_648_740_160_472_937_132,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_9',\n      nodeid='nodeid_9',\n      elapsed_time=986149.8993286222,\n      timestamp=1.5128003668610903e+137,\n      worker_uuid=UUID('df9f09dc-1f43-48fa-aba9-ec0badd42093'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3_090_781_368_991_777_526,\n       Status.INTERESTING: 0},\n      branches=1_269_373_849,\n      since_new_branch=1_461_482_143_154_389_661,\n      phase=Phase.REPLAY)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0003796250093728304,
          "overall:gc": 0.00010254199150949717,
          "generate:reports": 0.017954208073206246
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878912.460785
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=5e-324,\n      timestamp=1.6684434810842326e+308,\n      worker_uuid=UUID('bd023447-34aa-43ff-b278-e0a594ac807a'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 10,\n       Status.INTERESTING: 0},\n      branches=11417,\n      since_new_branch=50,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=2.164384738710759e-248,\n      timestamp=1.6800901902769047e+308,\n      worker_uuid=UUID('bd023447-34aa-43ff-b278-e0a594ac807a'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 15,\n       Status.INTERESTING: 0},\n      branches=10536,\n      since_new_branch=35,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=6.334774128737154e-82,\n      timestamp=1.6832774339296846e+308,\n      worker_uuid=UUID('bd023447-34aa-43ff-b278-e0a594ac807a'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 98,\n       Status.INTERESTING: 0},\n      branches=7885,\n      since_new_branch=4899,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=0.05,\n      timestamp=1.7083983606229607e+308,\n      worker_uuid=UUID('bd023447-34aa-43ff-b278-e0a594ac807a'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2618,\n       Status.INTERESTING: 0},\n      branches=22212,\n      since_new_branch=13742,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=1.1,\n      timestamp=1.7107824610023555e+308,\n      worker_uuid=UUID('bd023447-34aa-43ff-b278-e0a594ac807a'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5612,\n       Status.INTERESTING: 0},\n      branches=10465,\n      since_new_branch=11084,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=31969.722088713632,\n      timestamp=1.7252792784511117e+308,\n      worker_uuid=UUID('bd023447-34aa-43ff-b278-e0a594ac807a'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 6849,\n       Status.INTERESTING: 0},\n      branches=4_370_432_851_043_336_445,\n      since_new_branch=27,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=61330.265973065245,\n      timestamp=1.7255271880635058e+308,\n      worker_uuid=UUID('bd023447-34aa-43ff-b278-e0a594ac807a'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 17083,\n       Status.INTERESTING: 0},\n      branches=113_580_201_383_617_023_354_867_511_601_360_373_592,\n      since_new_branch=21780,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=231497.2819385284,\n      timestamp=1.7280770326002418e+308,\n      worker_uuid=UUID('bd023447-34aa-43ff-b278-e0a594ac807a'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 17774,\n       Status.INTERESTING: 0},\n      branches=1608,\n      since_new_branch=26031,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=277198.22259506985,\n      timestamp=1.7321531577400253e+308,\n      worker_uuid=UUID('bd023447-34aa-43ff-b278-e0a594ac807a'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 24559,\n       Status.INTERESTING: 0},\n      branches=58,\n      since_new_branch=13745,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=373335.51741763874,\n      timestamp=1.7549200320365297e+308,\n      worker_uuid=UUID('bd023447-34aa-43ff-b278-e0a594ac807a'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 28741,\n       Status.INTERESTING: 0},\n      branches=487257762,\n      since_new_branch=21,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=406056.97699279495,\n      timestamp=1.7743497638799862e+308,\n      worker_uuid=UUID('bd023447-34aa-43ff-b278-e0a594ac807a'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 31474,\n       Status.INTERESTING: 0},\n      branches=43_229_888_664_020_219_650_376_459_433_242_951_718,\n      since_new_branch=4_379_630_970_124_621_517,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=995315.4051063678,\n      timestamp=1.7886813252835957e+308,\n      worker_uuid=UUID('bd023447-34aa-43ff-b278-e0a594ac807a'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5_747_488_845_253_939_725,\n       Status.INTERESTING: 0},\n      branches=62,\n      since_new_branch=8_868_922_143_198_076_660,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0003704159753397107,
          "overall:gc": 0.0,
          "generate:reports": 0.013553456927184016
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878938.3416588
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 3.8790982216596603e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.0004467089893296361
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878926.443572
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.3333333333333333,\n      timestamp=3.896338103935533e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 81,\n       Status.INTERESTING: 0},\n      branches=34,\n      since_new_branch=29857,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=697059.8923713466,\n      timestamp=5.015452357933222e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 17704,\n       Status.INTERESTING: 0},\n      branches=25277,\n      since_new_branch=29193,\n      phase=Phase.REPLAY)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00010424997890368104,
          "overall:gc": 0.0,
          "generate:reports": 0.0028038329910486937
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878954.0858529
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=371120.4638290647,\n      timestamp=3.402823466e+38,\n      worker_uuid=UUID('7245117b-1de1-4b5d-919c-d29062ad94b0'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_458_510_586,\n       Status.INTERESTING: 0},\n      branches=108,\n      since_new_branch=9403,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=861323.5214745181,\n      timestamp=8.99047646156443e+273,\n      worker_uuid=UUID('71dd3683-2f9d-44f5-ab72-b13e4b76da8a'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 84,\n       Status.INTERESTING: 0},\n      branches=85,\n      since_new_branch=1_914_083_300_301_882_007,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=778915.8836729737,\n      timestamp=0.5,\n      worker_uuid=UUID('8bdde8d1-c1ae-4ff4-b122-c7286b8bb3b9'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3276,\n       Status.INTERESTING: 0},\n      branches=3480,\n      since_new_branch=10579,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=914847.9062132002,\n      timestamp=3.765188728607346e+16,\n      worker_uuid=UUID('8bdde8d1-c1ae-4ff4-b122-c7286b8bb3b9'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 18508,\n       Status.INTERESTING: 0},\n      branches=3_768_445_358_709_790_839,\n      since_new_branch=6501,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=939670.4610660851,\n      timestamp=5.167515706411587e+307,\n      worker_uuid=UUID('8bdde8d1-c1ae-4ff4-b122-c7286b8bb3b9'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16_037_988_027_010_616_417_790_289_526_899_378_093,\n       Status.INTERESTING: 0},\n      branches=23710,\n      since_new_branch=500581652,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=6.984481962666512e-165,\n      timestamp=1.175494351e-38,\n      worker_uuid=UUID('eb914c87-f66e-4925-afeb-a1247ba1e9b2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2841,\n       Status.INTERESTING: 0},\n      branches=51,\n      since_new_branch=2646,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=4875.787946851063,\n      timestamp=5.84719241867293e-19,\n      worker_uuid=UUID('eb914c87-f66e-4925-afeb-a1247ba1e9b2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8020,\n       Status.INTERESTING: 0},\n      branches=23561,\n      since_new_branch=35,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=88159.91900617017,\n      timestamp=1.9,\n      worker_uuid=UUID('eb914c87-f66e-4925-afeb-a1247ba1e9b2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 14466,\n       Status.INTERESTING: 0},\n      branches=1_640_172_577,\n      since_new_branch=44,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=163633.02656168747,\n      timestamp=6.58964900555134e+16,\n      worker_uuid=UUID('eb914c87-f66e-4925-afeb-a1247ba1e9b2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 24583,\n       Status.INTERESTING: 0},\n      branches=4_904_978_409_038_662_669,\n      since_new_branch=38,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=567021.4318409053,\n      timestamp=1.2766537564101366e+307,\n      worker_uuid=UUID('eb914c87-f66e-4925-afeb-a1247ba1e9b2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 25236,\n       Status.INTERESTING: 0},\n      branches=104,\n      since_new_branch=6_993_506_781_494_687_063,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=729307.3028023501,\n      timestamp=7.383060737790863e+307,\n      worker_uuid=UUID('eb914c87-f66e-4925-afeb-a1247ba1e9b2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 32756,\n       Status.INTERESTING: 0},\n      branches=18549,\n      since_new_branch=12368,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.5,\n      timestamp=0.05,\n      worker_uuid=UUID('159b4f57-38ab-430d-89a0-13ce72110348'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 105,\n       Status.INTERESTING: 0},\n      branches=30576,\n      since_new_branch=7_580_869_848_267_464_310,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.5,\n      timestamp=2.209493477236839e+306,\n      worker_uuid=UUID('159b4f57-38ab-430d-89a0-13ce72110348'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5458,\n       Status.INTERESTING: 0},\n      branches=23803,\n      since_new_branch=5,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=197423.10689298576,\n      timestamp=3.1659463309198336e+306,\n      worker_uuid=UUID('159b4f57-38ab-430d-89a0-13ce72110348'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 22936,\n       Status.INTERESTING: 0},\n      branches=8150,\n      since_new_branch=26,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=367541.33733017417,\n      timestamp=4.5024102266958286e+306,\n      worker_uuid=UUID('159b4f57-38ab-430d-89a0-13ce72110348'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 24432,\n       Status.INTERESTING: 0},\n      branches=73,\n      since_new_branch=14831,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=933452.2210079795,\n      timestamp=7.750081533903174e+306,\n      worker_uuid=UUID('159b4f57-38ab-430d-89a0-13ce72110348'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_674_150_690,\n       Status.INTERESTING: 0},\n      branches=971_061_579_863_900_555,\n      since_new_branch=488332077,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.0,\n      timestamp=2.8009135440143658e-306,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2,\n       Status.INTERESTING: 0},\n      branches=8192,\n      since_new_branch=28824,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.0,\n      timestamp=2.4688608417157897e-283,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 34,\n       Status.INTERESTING: 0},\n      branches=8569,\n      since_new_branch=25,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=5.8797603404752306e-108,\n      timestamp=1.6758769220649534e-242,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 67,\n       Status.INTERESTING: 0},\n      branches=8_669_922_612_320_535_700,\n      since_new_branch=14778,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.5,\n      timestamp=1.5208062955035109e-103,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 71,\n       Status.INTERESTING: 0},\n      branches=25577,\n      since_new_branch=26_332_051_661_948_803_435_651_863_375_037_515_461,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=2.00001,\n      timestamp=1.3431059119145837e-91,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 71,\n       Status.INTERESTING: 0},\n      branches=21629,\n      since_new_branch=1024,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=89979.56761974437,\n      timestamp=3.0545896299505145e-89,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 78,\n       Status.INTERESTING: 0},\n      branches=1_615_812_666,\n      since_new_branch=660788376,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=143015.18658660143,\n      timestamp=4.5761763773506504e-89,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 91,\n       Status.INTERESTING: 0},\n      branches=8192,\n      since_new_branch=1000,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=172143.54087923293,\n      timestamp=7.418167787436275e-89,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 100,\n       Status.INTERESTING: 0},\n      branches=0,\n      since_new_branch=7_489_569_465_341_567_230,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=242361.99238880834,\n      timestamp=8.042232504044202e-89,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 404,\n       Status.INTERESTING: 0},\n      branches=8134,\n      since_new_branch=108,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=269179.0176554978,\n      timestamp=8.916958530689424e-89,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1054,\n       Status.INTERESTING: 0},\n      branches=4_953_056_483_994_291_694,\n      since_new_branch=125_503_110_738_801_632_485_411_525_321_009_507_982,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=329384.2682061417,\n      timestamp=1.0791460805180998e-88,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5103,\n       Status.INTERESTING: 0},\n      branches=3,\n      since_new_branch=5739,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=348835.74628925644,\n      timestamp=1.1668944315536507e-88,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 6705,\n       Status.INTERESTING: 0},\n      branches=22685,\n      since_new_branch=17887,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=517413.69899802614,\n      timestamp=1.2068793242135346e-88,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7537,\n       Status.INTERESTING: 0},\n      branches=1_703_270_774,\n      since_new_branch=1212,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=517641.78529593884,\n      timestamp=1.373788304941703e-88,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 12609,\n       Status.INTERESTING: 0},\n      branches=98,\n      since_new_branch=7261,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=589008.4992762966,\n      timestamp=1.630778680708858e-88,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 13761,\n       Status.INTERESTING: 0},\n      branches=587,\n      since_new_branch=20493,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=642733.261774603,\n      timestamp=1.6340423141104517e-88,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 18775,\n       Status.INTERESTING: 0},\n      branches=10427,\n      since_new_branch=8160,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=659005.9326570419,\n      timestamp=1.7357170841562504e-88,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 24958,\n       Status.INTERESTING: 0},\n      branches=104,\n      since_new_branch=5524,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=708013.3959340163,\n      timestamp=1.8465052281512937e-88,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 29301,\n       Status.INTERESTING: 0},\n      branches=15442,\n      since_new_branch=29968,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=773678.1524399994,\n      timestamp=1.8553393041352074e-88,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 29690,\n       Status.INTERESTING: 0},\n      branches=85_168_214_396_883_240_732_010_679_723_654_894_469,\n      since_new_branch=8116,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=941964.6672088496,\n      timestamp=2.1832936628297183e-88,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 32568,\n       Status.INTERESTING: 0},\n      branches=1_850_166_473,\n      since_new_branch=33,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=972039.0053827097,\n      timestamp=2.2145624045742442e-88,\n      worker_uuid=UUID('290ea481-fb6c-47f5-8c8d-13bb9103f923'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 247_559_149_518_061_483,\n       Status.INTERESTING: 0},\n      branches=4_165_336_702_624_970_998,\n      since_new_branch=18168,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0018005829770117998,
          "overall:gc": 0.0,
          "generate:reports": 0.03424241702305153
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878936.2404091
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=9.504858287633627e-187,\n      timestamp=5.632570790875326e+307,\n      worker_uuid=UUID('c6601970-e9ff-441d-8899-3a14bb459fdf'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 65535,\n       Status.INTERESTING: 0},\n      branches=20187,\n      since_new_branch=3454,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=0.014173391778647782,\n      timestamp=7.662046938844736e+307,\n      worker_uuid=UUID('c6601970-e9ff-441d-8899-3a14bb459fdf'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 228149576,\n       Status.INTERESTING: 0},\n      branches=2_029_937_556,\n      since_new_branch=125,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00010966602712869644,
          "overall:gc": 0.0,
          "generate:reports": 0.003194957971572876
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878945.071507
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=499869.11527824675,\n      timestamp=1.200227523069315e+16,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 72,\n       Status.INTERESTING: 0},\n      branches=11870,\n      since_new_branch=2656,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 6.84579717926681e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.0014672499964945018
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878961.712735
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=1e-05,\n      timestamp=6.375382538059336e-42,\n      worker_uuid=UUID('3f91708e-3572-4297-a468-d2fd014aec9d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 12,\n       Status.INTERESTING: 0},\n      branches=41,\n      since_new_branch=12774,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=823689.6752483638,\n      timestamp=6892808287372712.0,\n      worker_uuid=UUID('3f91708e-3572-4297-a468-d2fd014aec9d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 23321,\n       Status.INTERESTING: 0},\n      branches=120,\n      since_new_branch=9,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=0.05,\n      timestamp=5089628441333676.0,\n      worker_uuid=UUID('cc3aa901-b550-4aa2-bcf0-39a32098d447'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 6,\n       Status.INTERESTING: 0},\n      branches=12746,\n      since_new_branch=72_083_475_263_553_011_372_058_439_602_470_450_486,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=154721.67194969623,\n      timestamp=1.7198381956253844e+16,\n      worker_uuid=UUID('cc3aa901-b550-4aa2-bcf0-39a32098d447'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 111,\n       Status.INTERESTING: 0},\n      branches=15,\n      since_new_branch=103,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=718113.399595501,\n      timestamp=4.126288224807512e+16,\n      worker_uuid=UUID('cc3aa901-b550-4aa2-bcf0-39a32098d447'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 18743,\n       Status.INTERESTING: 0},\n      branches=19,\n      since_new_branch=101,\n      phase=Phase.DISTILL)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00019412499386817217,
          "overall:gc": 0.0,
          "generate:reports": 0.007581749989185482
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878934.06141
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.287497960031033e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.005594208952970803
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878970.322685
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=1.4929611332738102e-261,\n      timestamp=0.99999,\n      worker_uuid=UUID('83d243b0-5ce5-4eee-81c2-d287373f6be5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 23,\n       Status.INTERESTING: 0},\n      branches=1856,\n      since_new_branch=114_010_851_165_206_705_716_191_868_975_570_617_211,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=2.83182554891854e-91,\n      timestamp=1.9,\n      worker_uuid=UUID('83d243b0-5ce5-4eee-81c2-d287373f6be5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 117,\n       Status.INTERESTING: 0},\n      branches=25581,\n      since_new_branch=8_810_579_906_893_037_990,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=62509.898471114335,\n      timestamp=3401651194735763.0,\n      worker_uuid=UUID('83d243b0-5ce5-4eee-81c2-d287373f6be5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5245,\n       Status.INTERESTING: 0},\n      branches=16,\n      since_new_branch=766196089,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=129499.66637589075,\n      timestamp=2.5595525052657736e+16,\n      worker_uuid=UUID('83d243b0-5ce5-4eee-81c2-d287373f6be5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 9818,\n       Status.INTERESTING: 0},\n      branches=65,\n      since_new_branch=24139,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=312542.183013219,\n      timestamp=1.8580167257558227e+63,\n      worker_uuid=UUID('83d243b0-5ce5-4eee-81c2-d287373f6be5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 20460,\n       Status.INTERESTING: 0},\n      branches=599907527,\n      since_new_branch=18586,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=552575.1471689579,\n      timestamp=2.4878258618430045e+63,\n      worker_uuid=UUID('83d243b0-5ce5-4eee-81c2-d287373f6be5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 22262,\n       Status.INTERESTING: 0},\n      branches=6_070_606_929_084_811_526,\n      since_new_branch=73,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=552737.2381773127,\n      timestamp=4.2763088065781875e+63,\n      worker_uuid=UUID('83d243b0-5ce5-4eee-81c2-d287373f6be5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2_471_937_009_700_657_488,\n       Status.INTERESTING: 0},\n      branches=4201,\n      since_new_branch=747,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=671697.1160429044,\n      timestamp=4.541703429810193e+63,\n      worker_uuid=UUID('83d243b0-5ce5-4eee-81c2-d287373f6be5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7_492_747_172_904_753_317,\n       Status.INTERESTING: 0},\n      branches=24892,\n      since_new_branch=7812,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=15362.212523339029,\n      timestamp=0.99999,\n      worker_uuid=UUID('492d8b02-1b94-46d2-bcba-d2e4b32bae50'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 38,\n       Status.INTERESTING: 0},\n      branches=45,\n      since_new_branch=8,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=117482.46416947963,\n      timestamp=0.9999900000000002,\n      worker_uuid=UUID('492d8b02-1b94-46d2-bcba-d2e4b32bae50'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 175,\n       Status.INTERESTING: 0},\n      branches=117,\n      since_new_branch=27354,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=177837.48674508164,\n      timestamp=2.00001,\n      worker_uuid=UUID('492d8b02-1b94-46d2-bcba-d2e4b32bae50'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 15372,\n       Status.INTERESTING: 0},\n      branches=300,\n      since_new_branch=13828,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=717961.1587704405,\n      timestamp=9007199254740992.0,\n      worker_uuid=UUID('492d8b02-1b94-46d2-bcba-d2e4b32bae50'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 610215361,\n       Status.INTERESTING: 0},\n      branches=16145,\n      since_new_branch=25527,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=952905.0450769428,\n      timestamp=7.020546549930448e+307,\n      worker_uuid=UUID('492d8b02-1b94-46d2-bcba-d2e4b32bae50'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5_137_210_698_856_889_646,\n       Status.INTERESTING: 0},\n      branches=49,\n      since_new_branch=2,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=1000000.0,\n      timestamp=9.811794647305695e+307,\n      worker_uuid=UUID('492d8b02-1b94-46d2-bcba-d2e4b32bae50'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 6_788_052_355_851_502_592,\n       Status.INTERESTING: 0},\n      branches=108,\n      since_new_branch=8712,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=4.2837330515052446e-193,\n      timestamp=1.1326542953806846e+308,\n      worker_uuid=UUID('2c82ca00-30f3-43b9-8e96-c79fbeb142b7'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5293,\n       Status.INTERESTING: 0},\n      branches=385_556_342_938_625_946,\n      since_new_branch=5,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=999999.0,\n      timestamp=1.24262841367186e+308,\n      worker_uuid=UUID('2c82ca00-30f3-43b9-8e96-c79fbeb142b7'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 15776,\n       Status.INTERESTING: 0},\n      branches=27,\n      since_new_branch=26482,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=1.0646886759199622e-246,\n      timestamp=9.335646356320155e+307,\n      worker_uuid=UUID('ad836994-4323-4f84-af80-90d9fe47f0ed'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 11152,\n       Status.INTERESTING: 0},\n      branches=123,\n      since_new_branch=12781,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=6.103515625e-05,\n      timestamp=1.6656360158120693e+308,\n      worker_uuid=UUID('ad836994-4323-4f84-af80-90d9fe47f0ed'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 19_703_855_194_411_873_516_480_015_405_656_857_165,\n       Status.INTERESTING: 0},\n      branches=18542,\n      since_new_branch=118_934_921_892_276_328_782_390_497_314_172_261_617,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=236530.2614912364,\n      timestamp=2322312451612207.0,\n      worker_uuid=UUID('fa38cc88-70ef-4f3b-a8b7-3daf1a485f8f'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 96,\n       Status.INTERESTING: 0},\n      branches=108,\n      since_new_branch=559,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=999999.0,\n      timestamp=1.008243957655403e+16,\n      worker_uuid=UUID('fa38cc88-70ef-4f3b-a8b7-3daf1a485f8f'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 32_353_041_999_944_466_848_393_769_484_848_909_765,\n       Status.INTERESTING: 0},\n      branches=23217,\n      since_new_branch=14317,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0007775409612804651,
          "overall:gc": 0.0,
          "generate:reports": 0.03291216789511964
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878924.3044338
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 4.095898475497961e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.0005024169804528356
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878956.2228322
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=515247.1624582403,\n      timestamp=7.876247569449964e+307,\n      worker_uuid=UUID('cd1f3dd4-5e02-4338-9fb4-8659839dac71'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 21705,\n       Status.INTERESTING: 0},\n      branches=15250,\n      since_new_branch=4038,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=735807.4864057121,\n      timestamp=1.2698275262799605e+308,\n      worker_uuid=UUID('cd1f3dd4-5e02-4338-9fb4-8659839dac71'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 31035,\n       Status.INTERESTING: 0},\n      branches=24909,\n      since_new_branch=11225,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=5e-324,\n      timestamp=0.0,\n      worker_uuid=UUID('513456c2-ce9f-4339-9179-1ce1c77c3399'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 52,\n       Status.INTERESTING: 0},\n      branches=7774,\n      since_new_branch=13772,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=2.225073858507203e-309,\n      timestamp=1.3347802935389423e-135,\n      worker_uuid=UUID('513456c2-ce9f-4339-9179-1ce1c77c3399'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 88,\n       Status.INTERESTING: 0},\n      branches=27332,\n      since_new_branch=2920,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=5.479895795670385e-220,\n      timestamp=1.0,\n      worker_uuid=UUID('513456c2-ce9f-4339-9179-1ce1c77c3399'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 97,\n       Status.INTERESTING: 0},\n      branches=110,\n      since_new_branch=7830,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=190958.04127464083,\n      timestamp=3.6842489675755074e+234,\n      worker_uuid=UUID('513456c2-ce9f-4339-9179-1ce1c77c3399'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 6682,\n       Status.INTERESTING: 0},\n      branches=97,\n      since_new_branch=83,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=241183.49629617835,\n      timestamp=1.1696488624361758e+307,\n      worker_uuid=UUID('513456c2-ce9f-4339-9179-1ce1c77c3399'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 19682,\n       Status.INTERESTING: 0},\n      branches=6673,\n      since_new_branch=20742,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=542260.3453150231,\n      timestamp=1.0563024030207658e+308,\n      worker_uuid=UUID('513456c2-ce9f-4339-9179-1ce1c77c3399'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 28736,\n       Status.INTERESTING: 0},\n      branches=32286,\n      since_new_branch=22931,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=940721.1779560349,\n      timestamp=1.3338053193854612e+308,\n      worker_uuid=UUID('513456c2-ce9f-4339-9179-1ce1c77c3399'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_835_699_223,\n       Status.INTERESTING: 0},\n      branches=12823,\n      since_new_branch=9_209_563_074_453_218_237,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=0.05,\n      timestamp=10000000.0,\n      worker_uuid=UUID('c5af945f-0e2b-43f1-b02e-5270cc4d379e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1000,\n       Status.INTERESTING: 0},\n      branches=32032,\n      since_new_branch=32260,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=2.00001,\n      timestamp=6852591634207744.0,\n      worker_uuid=UUID('c5af945f-0e2b-43f1-b02e-5270cc4d379e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3573,\n       Status.INTERESTING: 0},\n      branches=113,\n      since_new_branch=1_736_199_100,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=460429.3226667603,\n      timestamp=6.362308981723747e+193,\n      worker_uuid=UUID('c5af945f-0e2b-43f1-b02e-5270cc4d379e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 15606,\n       Status.INTERESTING: 0},\n      branches=15,\n      since_new_branch=19310,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=695768.6981330583,\n      timestamp=8.187095969416203e+306,\n      worker_uuid=UUID('c5af945f-0e2b-43f1-b02e-5270cc4d379e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 912111412,\n       Status.INTERESTING: 0},\n      branches=26624,\n      since_new_branch=30260,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=829614.3780109538,\n      timestamp=1.635930874458133e+307,\n      worker_uuid=UUID('c5af945f-0e2b-43f1-b02e-5270cc4d379e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2_243_735_958_772_576_473,\n       Status.INTERESTING: 0},\n      branches=22789,\n      since_new_branch=5938,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=999801.3458321558,\n      timestamp=2.1357555377505802e+307,\n      worker_uuid=UUID('c5af945f-0e2b-43f1-b02e-5270cc4d379e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5_424_497_951_608_743_840,\n       Status.INTERESTING: 0},\n      branches=101,\n      since_new_branch=126,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=0.5,\n      timestamp=0.3333333333333333,\n      worker_uuid=UUID('63e9233c-4ee8-40a8-9ec5-33baba81f18b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 77,\n       Status.INTERESTING: 0},\n      branches=86,\n      since_new_branch=19261,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=124348.1142649965,\n      timestamp=0.5,\n      worker_uuid=UUID('63e9233c-4ee8-40a8-9ec5-33baba81f18b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 79,\n       Status.INTERESTING: 0},\n      branches=110,\n      since_new_branch=23639,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=692269.5062906975,\n      timestamp=0.5,\n      worker_uuid=UUID('63e9233c-4ee8-40a8-9ec5-33baba81f18b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5576,\n       Status.INTERESTING: 0},\n      branches=5404,\n      since_new_branch=29557,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=846238.4677965828,\n      timestamp=9.142978175709315e+307,\n      worker_uuid=UUID('63e9233c-4ee8-40a8-9ec5-33baba81f18b'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3_257_080_667_631_148_560,\n       Status.INTERESTING: 0},\n      branches=300,\n      since_new_branch=11526,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=893078.8093054768,\n      timestamp=1.1125369292536007e-308,\n      worker_uuid=UUID('8775d7cc-1c72-4aad-a006-a2c40c4db366'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 85,\n       Status.INTERESTING: 0},\n      branches=57_636_330_499_563_238_969_029_553_896_754_205_211,\n      since_new_branch=80,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=966847.5425590785,\n      timestamp=3.443237273841331e-17,\n      worker_uuid=UUID('8775d7cc-1c72-4aad-a006-a2c40c4db366'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 20_543_761_674_609_607_971_535_908_559_127_173_186,\n       Status.INTERESTING: 0},\n      branches=27653,\n      since_new_branch=111,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0007952919695526361,
          "overall:gc": 9.829201735556126e-05,
          "generate:reports": 0.01753287488827482
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878920.040967
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=1.0178357225664618e-61,\n      timestamp=5.0936061150209805e+306,\n      worker_uuid=UUID('b1224ca8-0d4a-4d07-89bf-661d1ae597ca'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 61,\n       Status.INTERESTING: 0},\n      branches=6025,\n      since_new_branch=27455,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=317972.3022563102,\n      timestamp=3.2325907518861483e+307,\n      worker_uuid=UUID('b1224ca8-0d4a-4d07-89bf-661d1ae597ca'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 90,\n       Status.INTERESTING: 0},\n      branches=75,\n      since_new_branch=14764,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=390973.17851266253,\n      timestamp=1.6062208455998019e+308,\n      worker_uuid=UUID('b1224ca8-0d4a-4d07-89bf-661d1ae597ca'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3056,\n       Status.INTERESTING: 0},\n      branches=10986,\n      since_new_branch=3838,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=0.0,\n      timestamp=2.52669904688786e+307,\n      worker_uuid=UUID('a8fe1f5b-d08a-4d4b-aaf7-7ac40702ace6'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 47,\n       Status.INTERESTING: 0},\n      branches=8_341_605_061_946_057_695,\n      since_new_branch=130_557_555_289_293_861_270_653_131_463_834_801_673,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=0.0,\n      timestamp=5.173352302088582e+307,\n      worker_uuid=UUID('a8fe1f5b-d08a-4d4b-aaf7-7ac40702ace6'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 109,\n       Status.INTERESTING: 0},\n      branches=21264,\n      since_new_branch=5027,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=267148.17885088566,\n      timestamp=9.83393983089322e+307,\n      worker_uuid=UUID('a8fe1f5b-d08a-4d4b-aaf7-7ac40702ace6'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 300,\n       Status.INTERESTING: 0},\n      branches=17,\n      since_new_branch=19342,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00034904200583696365,
          "overall:gc": 0.0,
          "generate:reports": 0.013411706895567477
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878906.004323
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=21101.680827795735,\n      timestamp=1.2977951192656745e+308,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=895,\n      since_new_branch=6914,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=749121.8126452583,\n      timestamp=1.4347836059817342e+308,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=24715,\n      since_new_branch=0,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00031683396082371473,
          "overall:gc": 0.0,
          "generate:reports": 0.004980499041266739
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878952.750924
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=405277.15797989094,\n      timestamp=3014539846142908.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 26432,\n       Status.INTERESTING: 0},\n      branches=0,\n      since_new_branch=83,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.591600297018886e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.0016404989873990417
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878962.8409579
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=310801.3855983967,\n      timestamp=4171418826540342.0,\n      worker_uuid=UUID('579333b4-ff4a-4b79-81c5-321244c67bad'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 521,\n       Status.INTERESTING: 0},\n      branches=19894,\n      since_new_branch=11880,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=748759.7624377472,\n      timestamp=4.4170699398111707e+307,\n      worker_uuid=UUID('579333b4-ff4a-4b79-81c5-321244c67bad'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 32490,\n       Status.INTERESTING: 0},\n      branches=2,\n      since_new_branch=8767,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=0.0,\n      timestamp=8.154853569968232e+307,\n      worker_uuid=UUID('8a5284b7-3594-46ab-9233-316c0998fbee'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8192,\n       Status.INTERESTING: 0},\n      branches=18778,\n      since_new_branch=7,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=873759.5840354995,\n      timestamp=1.3434864288861654e+308,\n      worker_uuid=UUID('8a5284b7-3594-46ab-9233-316c0998fbee'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7_669_378_682_342_931_920,\n       Status.INTERESTING: 0},\n      branches=76,\n      since_new_branch=28070,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=0.0,\n      timestamp=3.7478587952781354e+307,\n      worker_uuid=UUID('196e94d0-897d-4c62-bbff-40f67ccb2357'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1,\n       Status.INTERESTING: 0},\n      branches=1024,\n      since_new_branch=29873,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=2.225073858507e-311,\n      timestamp=4.2158337925368207e+307,\n      worker_uuid=UUID('196e94d0-897d-4c62-bbff-40f67ccb2357'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 52,\n       Status.INTERESTING: 0},\n      branches=65535,\n      since_new_branch=113,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=1.1125369292536007e-308,\n      timestamp=5.319815729876627e+307,\n      worker_uuid=UUID('196e94d0-897d-4c62-bbff-40f67ccb2357'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 63,\n       Status.INTERESTING: 0},\n      branches=38,\n      since_new_branch=29116,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=0.05,\n      timestamp=6.655509820289306e+307,\n      worker_uuid=UUID('196e94d0-897d-4c62-bbff-40f67ccb2357'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1000,\n       Status.INTERESTING: 0},\n      branches=16065,\n      since_new_branch=3_089_676_184_897_097_596,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=369029.7499609319,\n      timestamp=6.988183009768162e+307,\n      worker_uuid=UUID('196e94d0-897d-4c62-bbff-40f67ccb2357'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8942,\n       Status.INTERESTING: 0},\n      branches=2448,\n      since_new_branch=17451,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=482443.6282493524,\n      timestamp=7.431558999596784e+307,\n      worker_uuid=UUID('196e94d0-897d-4c62-bbff-40f67ccb2357'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 14296,\n       Status.INTERESTING: 0},\n      branches=1076,\n      since_new_branch=5019,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=547582.2285005146,\n      timestamp=8.327336808853594e+307,\n      worker_uuid=UUID('196e94d0-897d-4c62-bbff-40f67ccb2357'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 18366,\n       Status.INTERESTING: 0},\n      branches=25805,\n      since_new_branch=19781,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=754433.8333583436,\n      timestamp=9.556756061570982e+307,\n      worker_uuid=UUID('196e94d0-897d-4c62-bbff-40f67ccb2357'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 21278,\n       Status.INTERESTING: 0},\n      branches=538326322,\n      since_new_branch=549928115,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=764639.6956806702,\n      timestamp=1.0426068481288022e+308,\n      worker_uuid=UUID('196e94d0-897d-4c62-bbff-40f67ccb2357'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 26498,\n       Status.INTERESTING: 0},\n      branches=27185,\n      since_new_branch=1024,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=830152.3242438418,\n      timestamp=1.0465542900305794e+308,\n      worker_uuid=UUID('196e94d0-897d-4c62-bbff-40f67ccb2357'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 26798,\n       Status.INTERESTING: 0},\n      branches=30916,\n      since_new_branch=125,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_2',\n      nodeid='nodeid_2',\n      elapsed_time=999999.9999999999,\n      timestamp=1.0614991614642601e+308,\n      worker_uuid=UUID('196e94d0-897d-4c62-bbff-40f67ccb2357'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 42_384_272_744_789_706_684_752_055_641_455_275_592,\n       Status.INTERESTING: 0},\n      branches=194937254,\n      since_new_branch=88,\n      phase=Phase.REPLAY)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0005007500294595957,
          "overall:gc": 0.0,
          "generate:reports": 0.01615600095828995
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878930.910694
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=372746.36517895915,\n      timestamp=5.295879572486514e+16,\n      worker_uuid=UUID('521531aa-1c00-4927-90b0-a79b19fe3e7e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 35,\n       Status.INTERESTING: 0},\n      branches=168_412_375_797_209_790_061_985_811_580_508_353_793,\n      since_new_branch=9999,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=628054.4187677585,\n      timestamp=5.445111961838938e+16,\n      worker_uuid=UUID('521531aa-1c00-4927-90b0-a79b19fe3e7e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 13965,\n       Status.INTERESTING: 0},\n      branches=8645,\n      since_new_branch=33_048_752_164_184_660_998_204_238_981_346_380_336,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=766522.9564312348,\n      timestamp=5.516033675553251e+16,\n      worker_uuid=UUID('521531aa-1c00-4927-90b0-a79b19fe3e7e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 86_547_706_850_701_536_333_108_821_763_054_264_782,\n       Status.INTERESTING: 0},\n      branches=99,\n      since_new_branch=3_103_853_230_998_700_296,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=6.84568846354797e-223,\n      timestamp=1.2688850868380096e+308,\n      worker_uuid=UUID('e9e84c40-c030-4747-8c37-5b6588af6685'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 60,\n       Status.INTERESTING: 0},\n      branches=73,\n      since_new_branch=122,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.5,\n      timestamp=1.3033481632420584e+308,\n      worker_uuid=UUID('e9e84c40-c030-4747-8c37-5b6588af6685'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5755,\n       Status.INTERESTING: 0},\n      branches=7160,\n      since_new_branch=3353,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=8366.736906571194,\n      timestamp=1.3356003711818055e+308,\n      worker_uuid=UUID('e9e84c40-c030-4747-8c37-5b6588af6685'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8592,\n       Status.INTERESTING: 0},\n      branches=13125,\n      since_new_branch=2109,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=106364.94452250059,\n      timestamp=1.3797375497857818e+308,\n      worker_uuid=UUID('e9e84c40-c030-4747-8c37-5b6588af6685'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 19401,\n       Status.INTERESTING: 0},\n      branches=6074,\n      since_new_branch=1_135_914_671_708_559_836,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=191824.04664325377,\n      timestamp=1.3879416078559982e+308,\n      worker_uuid=UUID('e9e84c40-c030-4747-8c37-5b6588af6685'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 30452,\n       Status.INTERESTING: 0},\n      branches=8192,\n      since_new_branch=6634,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=842900.023113325,\n      timestamp=1.3963030078493256e+308,\n      worker_uuid=UUID('e9e84c40-c030-4747-8c37-5b6588af6685'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 31093,\n       Status.INTERESTING: 0},\n      branches=25149,\n      since_new_branch=19,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=868398.888296047,\n      timestamp=1.4056086147005619e+308,\n      worker_uuid=UUID('e9e84c40-c030-4747-8c37-5b6588af6685'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 4_102_416_471_818_588_877_707_915_439_439_894_534,\n       Status.INTERESTING: 0},\n      branches=111,\n      since_new_branch=16946,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.000317084020934999,
          "overall:gc": 0.0,
          "generate:reports": 0.008878541877493262
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878959.524234
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1.7460525743551975e-46,\n      timestamp=6.11347570256007e+266,\n      worker_uuid=UUID('3722b910-b509-4278-b4fc-a279a463f765'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 6784,\n       Status.INTERESTING: 0},\n      branches=26890,\n      since_new_branch=25,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=512325.982248517,\n      timestamp=6.324699235719323e+307,\n      worker_uuid=UUID('3722b910-b509-4278-b4fc-a279a463f765'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 20790,\n       Status.INTERESTING: 0},\n      branches=61,\n      since_new_branch=2969,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=300730.3487505451,\n      timestamp=3.402823466e+38,\n      worker_uuid=UUID('b26b0965-e1d3-49ef-887a-3e84931c7a03'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 90,\n       Status.INTERESTING: 0},\n      branches=14620,\n      since_new_branch=85,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=343934.0178710511,\n      timestamp=1.806035742383854e+307,\n      worker_uuid=UUID('b26b0965-e1d3-49ef-887a-3e84931c7a03'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1062,\n       Status.INTERESTING: 0},\n      branches=56,\n      since_new_branch=5_201_121_647_190_505_575,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=804472.4692479665,\n      timestamp=1.1601854213202876e+308,\n      worker_uuid=UUID('b26b0965-e1d3-49ef-887a-3e84931c7a03'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_902_845_330,\n       Status.INTERESTING: 0},\n      branches=162266739,\n      since_new_branch=13828,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00019745802273973823,
          "overall:gc": 0.0,
          "generate:reports": 0.005146166018676013
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878947.210803
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_8',\n      nodeid='nodeid_8',\n      elapsed_time=434403.6528027339,\n      timestamp=1.421663256652615e+307,\n      worker_uuid=UUID('7a4e2907-ed87-4c0c-a218-2027f72e9297'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 98,\n       Status.INTERESTING: 0},\n      branches=13101,\n      since_new_branch=8050,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.158304262906313e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.007934041030239314
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878921.1442392
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=0.0,\n      timestamp=5.728518083123899e+307,\n      worker_uuid=UUID('87bb47cb-7f00-4264-8706-b39b55d9e4b8'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 26,\n       Status.INTERESTING: 0},\n      branches=76,\n      since_new_branch=22,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=2.225073858507203e-309,\n      timestamp=5.889273057259917e+307,\n      worker_uuid=UUID('87bb47cb-7f00-4264-8706-b39b55d9e4b8'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7462,\n       Status.INTERESTING: 0},\n      branches=32569,\n      since_new_branch=26305,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=97839.74503405449,\n      timestamp=6.197967842062689e+307,\n      worker_uuid=UUID('87bb47cb-7f00-4264-8706-b39b55d9e4b8'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 21075,\n       Status.INTERESTING: 0},\n      branches=606_837_397_227_339_964,\n      since_new_branch=7034,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=124507.67203702242,\n      timestamp=6.609882261369065e+307,\n      worker_uuid=UUID('87bb47cb-7f00-4264-8706-b39b55d9e4b8'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 23823,\n       Status.INTERESTING: 0},\n      branches=11773,\n      since_new_branch=3360,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=370728.16245929356,\n      timestamp=7.263571505358428e+307,\n      worker_uuid=UUID('87bb47cb-7f00-4264-8706-b39b55d9e4b8'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 28341,\n       Status.INTERESTING: 0},\n      branches=66,\n      since_new_branch=126,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=505422.3649364459,\n      timestamp=7.540457733101334e+307,\n      worker_uuid=UUID('87bb47cb-7f00-4264-8706-b39b55d9e4b8'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_474_185_184,\n       Status.INTERESTING: 0},\n      branches=24536,\n      since_new_branch=27021,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=913952.917145293,\n      timestamp=8.516145922797687e+307,\n      worker_uuid=UUID('87bb47cb-7f00-4264-8706-b39b55d9e4b8'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7_443_981_733_215_498_077,\n       Status.INTERESTING: 0},\n      branches=27506,\n      since_new_branch=25230788,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_3',\n      nodeid='nodeid_3',\n      elapsed_time=1000000.0,\n      timestamp=8.61920372554834e+307,\n      worker_uuid=UUID('87bb47cb-7f00-4264-8706-b39b55d9e4b8'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8_191_478_476_733_381_003,\n       Status.INTERESTING: 0},\n      branches=22,\n      since_new_branch=111,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00027166702784597874,
          "overall:gc": 0.0,
          "generate:reports": 0.006821332091931254
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878935.1469598
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=786008.6994550175,\n      timestamp=634873104428400.2,\n      worker_uuid=UUID('201af639-f64b-4b83-8594-4e9cdac12538'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 36,\n       Status.INTERESTING: 0},\n      branches=6441,\n      since_new_branch=123,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=903902.1321182956,\n      timestamp=2507569715020394.0,\n      worker_uuid=UUID('201af639-f64b-4b83-8594-4e9cdac12538'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 52,\n       Status.INTERESTING: 0},\n      branches=17107,\n      since_new_branch=137,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.99999,\n      timestamp=9.543325423485428e+306,\n      worker_uuid=UUID('c6048eea-dc38-429c-a156-a9ebd29778fe'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 34,\n       Status.INTERESTING: 0},\n      branches=146_577_399_113_172_127_846_839_673_457_189_316_310,\n      since_new_branch=8768,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=306875.55329606216,\n      timestamp=1.5976140753474177e+307,\n      worker_uuid=UUID('c6048eea-dc38-429c-a156-a9ebd29778fe'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 99,\n       Status.INTERESTING: 0},\n      branches=83_295_288_566_528_821_542_940_050_987_996_948_538,\n      since_new_branch=9999,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=758934.1255037938,\n      timestamp=3.021103251004866e+307,\n      worker_uuid=UUID('c6048eea-dc38-429c-a156-a9ebd29778fe'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 22752,\n       Status.INTERESTING: 0},\n      branches=14861,\n      since_new_branch=12864,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=774490.2067978339,\n      timestamp=4.1642424935265644e+307,\n      worker_uuid=UUID('c6048eea-dc38-429c-a156-a9ebd29778fe'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 65535,\n       Status.INTERESTING: 0},\n      branches=5514,\n      since_new_branch=300,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=785159.59106645,\n      timestamp=5.374846981081681e+307,\n      worker_uuid=UUID('c6048eea-dc38-429c-a156-a9ebd29778fe'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 44808415,\n       Status.INTERESTING: 0},\n      branches=0,\n      since_new_branch=11,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=2.2250738585e-313,\n      timestamp=1.7160313922523048e+307,\n      worker_uuid=UUID('c6dee04f-c0d7-4126-91f5-7eadff8dfe73'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1,\n       Status.INTERESTING: 0},\n      branches=220736496,\n      since_new_branch=9021,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=23841.399444538787,\n      timestamp=1.7235371553439648e+307,\n      worker_uuid=UUID('c6dee04f-c0d7-4126-91f5-7eadff8dfe73'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 90,\n       Status.INTERESTING: 0},\n      branches=120,\n      since_new_branch=65,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=871945.2468730508,\n      timestamp=1.8516209769711257e+307,\n      worker_uuid=UUID('c6dee04f-c0d7-4126-91f5-7eadff8dfe73'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 15179,\n       Status.INTERESTING: 0},\n      branches=27,\n      since_new_branch=98,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1.1125369292536007e-308,\n      timestamp=2.4915238154359807e+307,\n      worker_uuid=UUID('c7c2d715-91c7-43c9-8cdd-c263c6eaeeb9'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 6802,\n       Status.INTERESTING: 0},\n      branches=14957,\n      since_new_branch=16128,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.3333333333333333,\n      timestamp=3.193759583193362e+307,\n      worker_uuid=UUID('c7c2d715-91c7-43c9-8cdd-c263c6eaeeb9'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7_364_832_756_783_549_293,\n       Status.INTERESTING: 0},\n      branches=74_484_890_952_939_134_793_444_638_560_540_452_467,\n      since_new_branch=13058,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0004071660223416984,
          "overall:gc": 0.0,
          "generate:reports": 0.0123375000548549
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878941.612167
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 4.433299181982875e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.000438041053712368
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878957.2918022
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 4.4459011405706406e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.0017025000415742397
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878963.9166489
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=1.192092896e-07,\n      timestamp=1e-05,\n      worker_uuid=UUID('c6db5589-e2bd-4c35-8903-eac6d3035c14'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8414,\n       Status.INTERESTING: 0},\n      branches=93,\n      since_new_branch=8192,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=191122.7411789634,\n      timestamp=0.5,\n      worker_uuid=UUID('c6db5589-e2bd-4c35-8903-eac6d3035c14'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 12000,\n       Status.INTERESTING: 0},\n      branches=17709,\n      since_new_branch=73595589,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=212651.9962420586,\n      timestamp=2.8278496234991628e+16,\n      worker_uuid=UUID('c6db5589-e2bd-4c35-8903-eac6d3035c14'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 27476,\n       Status.INTERESTING: 0},\n      branches=17109,\n      since_new_branch=9611,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=217736.6338336056,\n      timestamp=1.6915981796819535e+307,\n      worker_uuid=UUID('c6db5589-e2bd-4c35-8903-eac6d3035c14'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_346_861_057,\n       Status.INTERESTING: 0},\n      branches=79,\n      since_new_branch=5_744_829_581_866_212_049,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=306877.32489204785,\n      timestamp=1.68577607092382e+308,\n      worker_uuid=UUID('c6db5589-e2bd-4c35-8903-eac6d3035c14'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_425_558_177,\n       Status.INTERESTING: 0},\n      branches=8735,\n      since_new_branch=1000,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=6.160427354265161e-77,\n      timestamp=1.3814766642249115e+308,\n      worker_uuid=UUID('0a98aa1b-61bb-4957-ae45-ce3e186514a3'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 76,\n       Status.INTERESTING: 0},\n      branches=91_563_495_629_397_521_275_591_886_421_552_773_694,\n      since_new_branch=22,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=200435.6599261508,\n      timestamp=1.406710301007664e+308,\n      worker_uuid=UUID('0a98aa1b-61bb-4957-ae45-ce3e186514a3'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 10230,\n       Status.INTERESTING: 0},\n      branches=300,\n      since_new_branch=19563,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=298076.4253012687,\n      timestamp=1.4623114713559065e+308,\n      worker_uuid=UUID('0a98aa1b-61bb-4957-ae45-ce3e186514a3'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 31540,\n       Status.INTERESTING: 0},\n      branches=25300,\n      since_new_branch=5_885_289_834_366_265_913,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=538068.2468802719,\n      timestamp=1.6913255747056728e+308,\n      worker_uuid=UUID('0a98aa1b-61bb-4957-ae45-ce3e186514a3'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 669450952,\n       Status.INTERESTING: 0},\n      branches=153_506_691_331_177_094_133_624_480_678_563_830_896,\n      since_new_branch=7_643_671_506_159_635_334,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=211693.7027698694,\n      timestamp=2.220446049250313e-16,\n      worker_uuid=UUID('aa9293e6-8d87-492d-9a87-d4f03b279d91'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2_762_328_189_101_151_941,\n       Status.INTERESTING: 0},\n      branches=6127,\n      since_new_branch=1024,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=5e-324,\n      timestamp=5.327784901942546e+16,\n      worker_uuid=UUID('5570bad3-cece-441b-832c-3251c00cfa16'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 117,\n       Status.INTERESTING: 0},\n      branches=30026,\n      since_new_branch=29,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=2.0883554726082663e-149,\n      timestamp=5.346761016420278e+16,\n      worker_uuid=UUID('5570bad3-cece-441b-832c-3251c00cfa16'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2062,\n       Status.INTERESTING: 0},\n      branches=9188,\n      since_new_branch=12620,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=1.1754943508222875e-38,\n      timestamp=5.559132031568735e+16,\n      worker_uuid=UUID('5570bad3-cece-441b-832c-3251c00cfa16'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5702,\n       Status.INTERESTING: 0},\n      branches=22299,\n      since_new_branch=1137,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=2.5032531514409548e-20,\n      timestamp=5.817102748356176e+16,\n      worker_uuid=UUID('5570bad3-cece-441b-832c-3251c00cfa16'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 12103,\n       Status.INTERESTING: 0},\n      branches=29878,\n      since_new_branch=19616,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=0.5,\n      timestamp=5.9651399469418504e+16,\n      worker_uuid=UUID('5570bad3-cece-441b-832c-3251c00cfa16'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 15396,\n       Status.INTERESTING: 0},\n      branches=4_363_515_345_986_636_337,\n      since_new_branch=15093,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=221722.16498586943,\n      timestamp=5.994627536818503e+16,\n      worker_uuid=UUID('5570bad3-cece-441b-832c-3251c00cfa16'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 18873,\n       Status.INTERESTING: 0},\n      branches=1_602_418_387_809_479_908,\n      since_new_branch=113,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=237880.7099794283,\n      timestamp=6.3905587957281464e+16,\n      worker_uuid=UUID('5570bad3-cece-441b-832c-3251c00cfa16'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 19108,\n       Status.INTERESTING: 0},\n      branches=1_907_715_985,\n      since_new_branch=104,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=454631.7789287112,\n      timestamp=6.540580892048924e+16,\n      worker_uuid=UUID('5570bad3-cece-441b-832c-3251c00cfa16'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 22660,\n       Status.INTERESTING: 0},\n      branches=15316,\n      since_new_branch=5_622_830_808_726_242_742,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=571937.1391658747,\n      timestamp=6.697542900894654e+16,\n      worker_uuid=UUID('5570bad3-cece-441b-832c-3251c00cfa16'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 24661,\n       Status.INTERESTING: 0},\n      branches=9768,\n      since_new_branch=69,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=806371.6090613944,\n      timestamp=6.836139199596027e+16,\n      worker_uuid=UUID('5570bad3-cece-441b-832c-3251c00cfa16'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 25250,\n       Status.INTERESTING: 0},\n      branches=122,\n      since_new_branch=7275,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=877402.8328484051,\n      timestamp=7.0666733943031336e+16,\n      worker_uuid=UUID('5570bad3-cece-441b-832c-3251c00cfa16'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 758171362,\n       Status.INTERESTING: 0},\n      branches=9102,\n      since_new_branch=98,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=1.0,\n      timestamp=1.9659054674925299e+307,\n      worker_uuid=UUID('43b539ce-dfb4-4c67-a3dc-9992c3120369'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 14,\n       Status.INTERESTING: 0},\n      branches=1024,\n      since_new_branch=32470,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=1.9,\n      timestamp=1.96590546749253e+307,\n      worker_uuid=UUID('43b539ce-dfb4-4c67-a3dc-9992c3120369'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 21,\n       Status.INTERESTING: 0},\n      branches=169214997,\n      since_new_branch=11077,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=136603.20257264582,\n      timestamp=5.79365070524432e+307,\n      worker_uuid=UUID('43b539ce-dfb4-4c67-a3dc-9992c3120369'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 78,\n       Status.INTERESTING: 0},\n      branches=7356,\n      since_new_branch=638990421,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=138495.5131115864,\n      timestamp=6.250547240513405e+307,\n      worker_uuid=UUID('43b539ce-dfb4-4c67-a3dc-9992c3120369'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 300,\n       Status.INTERESTING: 0},\n      branches=5107,\n      since_new_branch=18848,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=248316.46005855128,\n      timestamp=6.276613300549325e+307,\n      worker_uuid=UUID('43b539ce-dfb4-4c67-a3dc-9992c3120369'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 11635,\n       Status.INTERESTING: 0},\n      branches=30633,\n      since_new_branch=31808,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=268455.04731855926,\n      timestamp=7.350448193347821e+307,\n      worker_uuid=UUID('43b539ce-dfb4-4c67-a3dc-9992c3120369'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 11941,\n       Status.INTERESTING: 0},\n      branches=68_041_776_614_044_918_080_540_020_211_761_122_415,\n      since_new_branch=127_107_729_329_217_065_437_251_650_337_812_411_654,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=403713.24790340546,\n      timestamp=9.18145338395521e+307,\n      worker_uuid=UUID('43b539ce-dfb4-4c67-a3dc-9992c3120369'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 14001,\n       Status.INTERESTING: 0},\n      branches=1_334_789_821,\n      since_new_branch=30650,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=536272.0702715415,\n      timestamp=9.61263162094249e+307,\n      worker_uuid=UUID('43b539ce-dfb4-4c67-a3dc-9992c3120369'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 14034,\n       Status.INTERESTING: 0},\n      branches=104,\n      since_new_branch=632929717,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=692060.0165251395,\n      timestamp=1.2131097499499943e+308,\n      worker_uuid=UUID('43b539ce-dfb4-4c67-a3dc-9992c3120369'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 20066,\n       Status.INTERESTING: 0},\n      branches=101,\n      since_new_branch=11830,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=755692.6845034235,\n      timestamp=1.246318293389055e+308,\n      worker_uuid=UUID('43b539ce-dfb4-4c67-a3dc-9992c3120369'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_492_769_113,\n       Status.INTERESTING: 0},\n      branches=300,\n      since_new_branch=10009,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=835113.3494706316,\n      timestamp=1.314944858810103e+308,\n      worker_uuid=UUID('43b539ce-dfb4-4c67-a3dc-9992c3120369'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2_132_198_474,\n       Status.INTERESTING: 0},\n      branches=1_745_609_684_739_177_537,\n      since_new_branch=105,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=863305.9814862364,\n      timestamp=1.7064043836863883e+308,\n      worker_uuid=UUID('43b539ce-dfb4-4c67-a3dc-9992c3120369'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 22_149_116_762_953_900_453_355_077_069_662_206_907,\n       Status.INTERESTING: 0},\n      branches=7_262_521_102_606_478_106,\n      since_new_branch=845085256,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=930953.795094047,\n      timestamp=1.7198296122704034e+308,\n      worker_uuid=UUID('43b539ce-dfb4-4c67-a3dc-9992c3120369'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 94_196_751_967_211_982_863_699_139_587_257_536_396,\n       Status.INTERESTING: 0},\n      branches=122,\n      since_new_branch=121_153_622_749_427_663_261_110_903_272_778_760_827,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=176425.75199654824,\n      timestamp=7.200126867313277e+78,\n      worker_uuid=UUID('51db05d6-0c41-4a7a-ab08-92f569e7c28e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 26,\n       Status.INTERESTING: 0},\n      branches=1_589_321_694,\n      since_new_branch=24613,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=696270.8512878165,\n      timestamp=7.465404897373187e+78,\n      worker_uuid=UUID('51db05d6-0c41-4a7a-ab08-92f569e7c28e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 13047,\n       Status.INTERESTING: 0},\n      branches=18911,\n      since_new_branch=2834,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=999999.0,\n      timestamp=7.560691524767635e+78,\n      worker_uuid=UUID('51db05d6-0c41-4a7a-ab08-92f569e7c28e'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_402_812_428,\n       Status.INTERESTING: 0},\n      branches=67_863_350_135_521_007_856_828_063_409_134_185_685,\n      since_new_branch=3848,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=0.0,\n      timestamp=7.381498592826682e+306,\n      worker_uuid=UUID('52d3abb8-0f4b-4c65-af20-ba1be7d52101'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16,\n       Status.INTERESTING: 0},\n      branches=26687,\n      since_new_branch=30246,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=0.05,\n      timestamp=2.2857454228184725e+307,\n      worker_uuid=UUID('52d3abb8-0f4b-4c65-af20-ba1be7d52101'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 28,\n       Status.INTERESTING: 0},\n      branches=13981,\n      since_new_branch=624370622,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=184096.91001162012,\n      timestamp=6.016560798714738e+307,\n      worker_uuid=UUID('52d3abb8-0f4b-4c65-af20-ba1be7d52101'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 19215,\n       Status.INTERESTING: 0},\n      branches=20555,\n      since_new_branch=984,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=250733.52459761704,\n      timestamp=6.496146575165238e+307,\n      worker_uuid=UUID('52d3abb8-0f4b-4c65-af20-ba1be7d52101'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 27085,\n       Status.INTERESTING: 0},\n      branches=30833,\n      since_new_branch=48,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=720480.3218020078,\n      timestamp=8.061104836021154e+307,\n      worker_uuid=UUID('52d3abb8-0f4b-4c65-af20-ba1be7d52101'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 28639,\n       Status.INTERESTING: 0},\n      branches=29958,\n      since_new_branch=127,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=897328.9783200171,\n      timestamp=1.0405759030118342e+308,\n      worker_uuid=UUID('52d3abb8-0f4b-4c65-af20-ba1be7d52101'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 6_930_397_474_166_453_707_947_862_496_557_140_456,\n       Status.INTERESTING: 0},\n      branches=3_157_093_723_718_654_981,\n      since_new_branch=35,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.005717708030715585,
          "overall:gc": 0.0,
          "generate:reports": 0.058262957085389644
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878909.416708
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.3333333333333333,\n      timestamp=0.05,\n      worker_uuid=UUID('f728b4fa-4248-4e3a-8a5d-2f346baa9455'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 77,\n       Status.INTERESTING: 0},\n      branches=4_935_116_531_810_075_927,\n      since_new_branch=26489,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=653462.6583582025,\n      timestamp=0.5,\n      worker_uuid=UUID('f728b4fa-4248-4e3a-8a5d-2f346baa9455'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 483,\n       Status.INTERESTING: 0},\n      branches=107,\n      since_new_branch=45,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=690830.4074291857,\n      timestamp=3.074963457925625e+306,\n      worker_uuid=UUID('f728b4fa-4248-4e3a-8a5d-2f346baa9455'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 22731,\n       Status.INTERESTING: 0},\n      branches=36,\n      since_new_branch=86,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=823628.3076819888,\n      timestamp=5.003364688585048e+306,\n      worker_uuid=UUID('f728b4fa-4248-4e3a-8a5d-2f346baa9455'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 684868139,\n       Status.INTERESTING: 0},\n      branches=90,\n      since_new_branch=51,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00015770801110193133,
          "overall:gc": 0.0,
          "generate:reports": 0.005444708920549601
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878958.349579
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=999999.0,\n      timestamp=8.386623087184569e+307,\n      worker_uuid=UUID('46bed7c3-e9a2-4f5d-80c5-c9d128a2fc71'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 121,\n       Status.INTERESTING: 0},\n      branches=120,\n      since_new_branch=68,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=19.982331913195985,\n      timestamp=4.762798141981284e+307,\n      worker_uuid=UUID('25367c41-32ff-40de-8e3b-36b4ae3f7262'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3181,\n       Status.INTERESTING: 0},\n      branches=25,\n      since_new_branch=371021237,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=159326.66409591126,\n      timestamp=5.522122550455645e+307,\n      worker_uuid=UUID('25367c41-32ff-40de-8e3b-36b4ae3f7262'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 12207,\n       Status.INTERESTING: 0},\n      branches=17445,\n      since_new_branch=85,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=0.0,\n      timestamp=4.240048273392931e+16,\n      worker_uuid=UUID('09f2ed18-330a-41a9-b1bf-4154fbd07621'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 455,\n       Status.INTERESTING: 0},\n      branches=6845,\n      since_new_branch=6931,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=1.0214535729646175e-297,\n      timestamp=3.402823466e+38,\n      worker_uuid=UUID('09f2ed18-330a-41a9-b1bf-4154fbd07621'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 482,\n       Status.INTERESTING: 0},\n      branches=1024,\n      since_new_branch=22187,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=1.5637989160034484e-157,\n      timestamp=8.242621243884666e+127,\n      worker_uuid=UUID('09f2ed18-330a-41a9-b1bf-4154fbd07621'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 4773,\n       Status.INTERESTING: 0},\n      branches=18595,\n      since_new_branch=98,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=0.5,\n      timestamp=2.6220408469746364e+129,\n      worker_uuid=UUID('09f2ed18-330a-41a9-b1bf-4154fbd07621'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5024,\n       Status.INTERESTING: 0},\n      branches=8611,\n      since_new_branch=105,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=337873.3739396574,\n      timestamp=4.528916864648586e+129,\n      worker_uuid=UUID('09f2ed18-330a-41a9-b1bf-4154fbd07621'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 9909,\n       Status.INTERESTING: 0},\n      branches=8876,\n      since_new_branch=17263,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=409298.8524745681,\n      timestamp=5.5402831453729597e+129,\n      worker_uuid=UUID('09f2ed18-330a-41a9-b1bf-4154fbd07621'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 13728,\n       Status.INTERESTING: 0},\n      branches=404,\n      since_new_branch=71,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=543066.8757426073,\n      timestamp=6.027584031256835e+129,\n      worker_uuid=UUID('09f2ed18-330a-41a9-b1bf-4154fbd07621'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16421,\n       Status.INTERESTING: 0},\n      branches=79,\n      since_new_branch=80,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=688468.4889927702,\n      timestamp=6.076628877837859e+129,\n      worker_uuid=UUID('09f2ed18-330a-41a9-b1bf-4154fbd07621'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 20443,\n       Status.INTERESTING: 0},\n      branches=8_171_056_991_469_745_981,\n      since_new_branch=2259,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=775766.770447474,\n      timestamp=7.506043853752967e+129,\n      worker_uuid=UUID('09f2ed18-330a-41a9-b1bf-4154fbd07621'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 21213,\n       Status.INTERESTING: 0},\n      branches=14312,\n      since_new_branch=109,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=912933.4970131209,\n      timestamp=9.869130810266307e+129,\n      worker_uuid=UUID('09f2ed18-330a-41a9-b1bf-4154fbd07621'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7_742_344_108_334_154_926,\n       Status.INTERESTING: 0},\n      branches=13756,\n      since_new_branch=59,\n      phase=Phase.FAILED)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0019444579957053065,
          "overall:gc": 0.0,
          "generate:reports": 0.017307916015852243
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878943.933655
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 4.483398515731096e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.00048512499779462814
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878942.8154602
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 4.8457994125783443e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.002982917008921504
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878948.3473768
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=0.05,\n      timestamp=3029227318195326.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 67,\n       Status.INTERESTING: 0},\n      branches=10,\n      since_new_branch=7_386_189_199_453_168_423,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=210240.95614875908,\n      timestamp=3110222370042188.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 14195,\n       Status.INTERESTING: 0},\n      branches=16326,\n      since_new_branch=182,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=246629.48133308854,\n      timestamp=3702158995526360.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 109_818_683_439_267_155_840_935_972_537_684_157_665,\n       Status.INTERESTING: 0},\n      branches=3266,\n      since_new_branch=3,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=749332.4224204518,\n      timestamp=3915458488094762.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 156_361_224_382_336_807_282_476_673_519_673_061_070,\n       Status.INTERESTING: 0},\n      branches=1000,\n      since_new_branch=27517,\n      phase=Phase.DISTILL)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0001507920096628368,
          "overall:gc": 0.0,
          "generate:reports": 0.0048965419991873205
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878965.0323951
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00010566698620095849,
          "overall:gc": 0.0,
          "generate:reports": 0.0010632910416461527
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878951.60081
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=554131.1917246681,\n      timestamp=2.8815895862396087e+307,\n      worker_uuid=UUID('45ce0981-93e3-4685-9918-5bc9e414d5f1'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 23025,\n       Status.INTERESTING: 0},\n      branches=775219320,\n      since_new_branch=20831,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=2.225073858507e-311,\n      timestamp=1.7062694086767587e-202,\n      worker_uuid=UUID('1d1b5311-35f1-4c85-8b61-7dd5d7cca2b5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 15,\n       Status.INTERESTING: 0},\n      branches=28259,\n      since_new_branch=17215,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=2.225073858507e-311,\n      timestamp=1.7225318193319644e-46,\n      worker_uuid=UUID('1d1b5311-35f1-4c85-8b61-7dd5d7cca2b5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 32,\n       Status.INTERESTING: 0},\n      branches=21,\n      since_new_branch=5,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=5.0786814375069816e-73,\n      timestamp=0.05,\n      worker_uuid=UUID('1d1b5311-35f1-4c85-8b61-7dd5d7cca2b5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 300,\n       Status.INTERESTING: 0},\n      branches=7_948_991_536_780_727_675,\n      since_new_branch=25,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=0.05,\n      timestamp=8358175195419424.0,\n      worker_uuid=UUID('1d1b5311-35f1-4c85-8b61-7dd5d7cca2b5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 2358,\n       Status.INTERESTING: 0},\n      branches=21912,\n      since_new_branch=1_335_666_700,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=0.5,\n      timestamp=9641923426155632.0,\n      worker_uuid=UUID('1d1b5311-35f1-4c85-8b61-7dd5d7cca2b5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3008,\n       Status.INTERESTING: 0},\n      branches=2_778_374_127_194_206_481,\n      since_new_branch=7_103_798_858_260_938_366,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=29956.48924628736,\n      timestamp=4.083275610695017e+278,\n      worker_uuid=UUID('1d1b5311-35f1-4c85-8b61-7dd5d7cca2b5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3937,\n       Status.INTERESTING: 0},\n      branches=20303,\n      since_new_branch=6386,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=188134.2394816055,\n      timestamp=1.6185124801487453e+307,\n      worker_uuid=UUID('1d1b5311-35f1-4c85-8b61-7dd5d7cca2b5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16896,\n       Status.INTERESTING: 0},\n      branches=32430,\n      since_new_branch=512,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=355529.46232305054,\n      timestamp=3.4260884182927244e+307,\n      worker_uuid=UUID('1d1b5311-35f1-4c85-8b61-7dd5d7cca2b5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 19576,\n       Status.INTERESTING: 0},\n      branches=20608,\n      since_new_branch=26892,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=371984.9334851353,\n      timestamp=4.655351620413052e+307,\n      worker_uuid=UUID('1d1b5311-35f1-4c85-8b61-7dd5d7cca2b5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 21461,\n       Status.INTERESTING: 0},\n      branches=5456,\n      since_new_branch=50_871_992_220_459_815_177_427_368_109_502_223_930,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=1000000.0,\n      timestamp=5.383696704086695e+307,\n      worker_uuid=UUID('1d1b5311-35f1-4c85-8b61-7dd5d7cca2b5'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 26427,\n       Status.INTERESTING: 0},\n      branches=20722,\n      since_new_branch=1_244_155_928,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=27354.754951205214,\n      timestamp=6.329204366678498e+16,\n      worker_uuid=UUID('d62184d0-96d5-4456-ae8f-c78c078f84a3'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 404,\n       Status.INTERESTING: 0},\n      branches=10438,\n      since_new_branch=28523,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=175783.93421716278,\n      timestamp=3.402823466e+38,\n      worker_uuid=UUID('d62184d0-96d5-4456-ae8f-c78c078f84a3'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 9999,\n       Status.INTERESTING: 0},\n      branches=1_257_411_542,\n      since_new_branch=79,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=234776.14037007172,\n      timestamp=9.072726407312234e+307,\n      worker_uuid=UUID('d62184d0-96d5-4456-ae8f-c78c078f84a3'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 20535,\n       Status.INTERESTING: 0},\n      branches=100,\n      since_new_branch=10621,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=585544.449285276,\n      timestamp=1.2265877450139393e+308,\n      worker_uuid=UUID('d62184d0-96d5-4456-ae8f-c78c078f84a3'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 6_446_430_012_252_452_906,\n       Status.INTERESTING: 0},\n      branches=9436,\n      since_new_branch=104,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=2.5625253790015513e-75,\n      timestamp=2.1346621377176584e+16,\n      worker_uuid=UUID('8f8cc76f-9a40-426d-b831-f9e163fb6965'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1196,\n       Status.INTERESTING: 0},\n      branches=24936,\n      since_new_branch=25841,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=7.545600049324612e-22,\n      timestamp=2.5745821213680548e+16,\n      worker_uuid=UUID('8f8cc76f-9a40-426d-b831-f9e163fb6965'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3580,\n       Status.INTERESTING: 0},\n      branches=512,\n      since_new_branch=13335,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=978205.0450757216,\n      timestamp=9.211968059970962e+305,\n      worker_uuid=UUID('8f8cc76f-9a40-426d-b831-f9e163fb6965'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5371,\n       Status.INTERESTING: 0},\n      branches=3493,\n      since_new_branch=3018,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=997955.990340921,\n      timestamp=2.3460191942045264e+306,\n      worker_uuid=UUID('8f8cc76f-9a40-426d-b831-f9e163fb6965'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 23317,\n       Status.INTERESTING: 0},\n      branches=1_314_533_357,\n      since_new_branch=113,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=0.0,\n      timestamp=1.401298464324817e-45,\n      worker_uuid=UUID('cb976e5a-828b-44ec-a81b-907d51b33c63'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 25,\n       Status.INTERESTING: 0},\n      branches=17055,\n      since_new_branch=12083,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=3.184719653516304e-300,\n      timestamp=1.1754943508222875e-38,\n      worker_uuid=UUID('cb976e5a-828b-44ec-a81b-907d51b33c63'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 46,\n       Status.INTERESTING: 0},\n      branches=28365,\n      since_new_branch=4_403_764_289_358_836_922,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=9.758818504553956e-205,\n      timestamp=0.5,\n      worker_uuid=UUID('cb976e5a-828b-44ec-a81b-907d51b33c63'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 90,\n       Status.INTERESTING: 0},\n      branches=4514,\n      since_new_branch=54,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=8.248127757077147e-152,\n      timestamp=2.3656074724524384e+16,\n      worker_uuid=UUID('cb976e5a-828b-44ec-a81b-907d51b33c63'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 97,\n       Status.INTERESTING: 0},\n      branches=1_386_460_118,\n      since_new_branch=24,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=1.0812541004610434,\n      timestamp=3.29994448409959e+16,\n      worker_uuid=UUID('cb976e5a-828b-44ec-a81b-907d51b33c63'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1724,\n       Status.INTERESTING: 0},\n      branches=775_145_077_652_368_257,\n      since_new_branch=6322,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=20283.66060709819,\n      timestamp=5.317992410362784e+16,\n      worker_uuid=UUID('cb976e5a-828b-44ec-a81b-907d51b33c63'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7672,\n       Status.INTERESTING: 0},\n      branches=25,\n      since_new_branch=14313,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=25520.76853102215,\n      timestamp=1.7180853502403894e+121,\n      worker_uuid=UUID('cb976e5a-828b-44ec-a81b-907d51b33c63'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8626,\n       Status.INTERESTING: 0},\n      branches=88,\n      since_new_branch=31845,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=247581.2528574038,\n      timestamp=4.8181975594831365e+122,\n      worker_uuid=UUID('cb976e5a-828b-44ec-a81b-907d51b33c63'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8660,\n       Status.INTERESTING: 0},\n      branches=10135,\n      since_new_branch=25665,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=357415.009301418,\n      timestamp=9.02943449604793e+122,\n      worker_uuid=UUID('cb976e5a-828b-44ec-a81b-907d51b33c63'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 9999,\n       Status.INTERESTING: 0},\n      branches=6544,\n      since_new_branch=8_005_572_877_294_751_845,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=439862.78379165987,\n      timestamp=9.278233255845742e+122,\n      worker_uuid=UUID('cb976e5a-828b-44ec-a81b-907d51b33c63'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 14818,\n       Status.INTERESTING: 0},\n      branches=23492,\n      since_new_branch=1_483_823_234,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=512786.70681792696,\n      timestamp=1.0561073792838226e+123,\n      worker_uuid=UUID('cb976e5a-828b-44ec-a81b-907d51b33c63'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 15316,\n       Status.INTERESTING: 0},\n      branches=23197,\n      since_new_branch=25604,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=747134.535932339,\n      timestamp=1.0624668064154355e+123,\n      worker_uuid=UUID('cb976e5a-828b-44ec-a81b-907d51b33c63'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 17368,\n       Status.INTERESTING: 0},\n      branches=10732,\n      since_new_branch=2_460_402_004_072_307_052,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=916635.3846022816,\n      timestamp=1.419784921479275e+123,\n      worker_uuid=UUID('cb976e5a-828b-44ec-a81b-907d51b33c63'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 17896,\n       Status.INTERESTING: 0},\n      branches=1_140_483_730_371_175_554,\n      since_new_branch=83,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=930916.4747124086,\n      timestamp=1.741724589835336e+123,\n      worker_uuid=UUID('cb976e5a-828b-44ec-a81b-907d51b33c63'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 322136423,\n       Status.INTERESTING: 0},\n      branches=23156,\n      since_new_branch=4_754_721_662_711_900_149,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=954316.5239333853,\n      timestamp=2.1058615332247625e+123,\n      worker_uuid=UUID('cb976e5a-828b-44ec-a81b-907d51b33c63'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_076_409_206,\n       Status.INTERESTING: 0},\n      branches=2241,\n      since_new_branch=28,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=2.225073858507203e-309,\n      timestamp=3.402823466e+38,\n      worker_uuid=UUID('26535bd7-13c8-44db-8c3a-94e784f9d5cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 5996,\n       Status.INTERESTING: 0},\n      branches=20,\n      since_new_branch=58,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=4.589065788713873e-110,\n      timestamp=3.3827056248293513e+80,\n      worker_uuid=UUID('26535bd7-13c8-44db-8c3a-94e784f9d5cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 6732,\n       Status.INTERESTING: 0},\n      branches=21,\n      since_new_branch=80,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=1.1754943508222875e-38,\n      timestamp=7.352396744848828e+306,\n      worker_uuid=UUID('26535bd7-13c8-44db-8c3a-94e784f9d5cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 6937,\n       Status.INTERESTING: 0},\n      branches=19914,\n      since_new_branch=29,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=276186.86601383187,\n      timestamp=4.0461682996363577e+307,\n      worker_uuid=UUID('26535bd7-13c8-44db-8c3a-94e784f9d5cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7738,\n       Status.INTERESTING: 0},\n      branches=2549,\n      since_new_branch=103_645_970_081_461_112_870_169_950_514_064_075_812,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=512403.7721004778,\n      timestamp=6.844028086785181e+307,\n      worker_uuid=UUID('26535bd7-13c8-44db-8c3a-94e784f9d5cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 14926,\n       Status.INTERESTING: 0},\n      branches=6392,\n      since_new_branch=28345,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=577247.5212208207,\n      timestamp=6.849344004751065e+307,\n      worker_uuid=UUID('26535bd7-13c8-44db-8c3a-94e784f9d5cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 30171,\n       Status.INTERESTING: 0},\n      branches=21115,\n      since_new_branch=23075,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=689990.3697763362,\n      timestamp=7.501926437438704e+307,\n      worker_uuid=UUID('26535bd7-13c8-44db-8c3a-94e784f9d5cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 32649,\n       Status.INTERESTING: 0},\n      branches=10225,\n      since_new_branch=10453,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_7',\n      nodeid='nodeid_7',\n      elapsed_time=956602.7574943905,\n      timestamp=9.038955168478786e+307,\n      worker_uuid=UUID('26535bd7-13c8-44db-8c3a-94e784f9d5cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 813676809,\n       Status.INTERESTING: 0},\n      branches=14627,\n      since_new_branch=107_561_742_508_762_525_167_332_070_361_303_660_317,\n      phase=Phase.DISTILL)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.003936833003535867,
          "overall:gc": 0.00015358399832621217,
          "generate:reports": 0.042434832837898284
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878932.033204
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 3.691698657348752e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.00044525001430884004
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878933.0047271
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 4.395900759845972e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.0004735830007120967
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878940.538423
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=5.960464477539063e-08,\n      timestamp=3.402823466e+38,\n      worker_uuid=UUID('d61311c6-95d1-4a0e-9f21-fad5cd939e04'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 25130,\n       Status.INTERESTING: 0},\n      branches=25495,\n      since_new_branch=90,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=8.67588507717963e-227,\n      timestamp=2.5710706673468062e-14,\n      worker_uuid=UUID('7c3f2d06-d064-4a55-8bdc-009fb82ae554'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 51,\n       Status.INTERESTING: 0},\n      branches=22946,\n      since_new_branch=2099,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=1.922151083167183e-223,\n      timestamp=0.3333333333333333,\n      worker_uuid=UUID('7c3f2d06-d064-4a55-8bdc-009fb82ae554'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 52,\n       Status.INTERESTING: 0},\n      branches=1024,\n      since_new_branch=404,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=7.201624489625343e-220,\n      timestamp=0.5,\n      worker_uuid=UUID('7c3f2d06-d064-4a55-8bdc-009fb82ae554'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 66,\n       Status.INTERESTING: 0},\n      branches=30051,\n      since_new_branch=1841,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=8.693000482546473e-201,\n      timestamp=0.5,\n      worker_uuid=UUID('7c3f2d06-d064-4a55-8bdc-009fb82ae554'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 74,\n       Status.INTERESTING: 0},\n      branches=17877,\n      since_new_branch=72,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=65889.85716986474,\n      timestamp=2934953440916591.0,\n      worker_uuid=UUID('7c3f2d06-d064-4a55-8bdc-009fb82ae554'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 81,\n       Status.INTERESTING: 0},\n      branches=16,\n      since_new_branch=127,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=207630.70438352754,\n      timestamp=3544740069577678.5,\n      worker_uuid=UUID('7c3f2d06-d064-4a55-8bdc-009fb82ae554'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 120,\n       Status.INTERESTING: 0},\n      branches=115,\n      since_new_branch=65535,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=271712.3095103358,\n      timestamp=3962484747566321.0,\n      worker_uuid=UUID('7c3f2d06-d064-4a55-8bdc-009fb82ae554'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 404,\n       Status.INTERESTING: 0},\n      branches=1_960_326_678,\n      since_new_branch=64,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=381723.0960583512,\n      timestamp=4010326802748589.5,\n      worker_uuid=UUID('7c3f2d06-d064-4a55-8bdc-009fb82ae554'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7734,\n       Status.INTERESTING: 0},\n      branches=6_373_198_260_467_849_712,\n      since_new_branch=96,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=438281.14815388096,\n      timestamp=5336209521120375.0,\n      worker_uuid=UUID('7c3f2d06-d064-4a55-8bdc-009fb82ae554'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 11024,\n       Status.INTERESTING: 0},\n      branches=1491,\n      since_new_branch=57,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=451938.6481014923,\n      timestamp=6178601249936007.0,\n      worker_uuid=UUID('7c3f2d06-d064-4a55-8bdc-009fb82ae554'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 11395,\n       Status.INTERESTING: 0},\n      branches=64,\n      since_new_branch=14,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=462434.5306748542,\n      timestamp=9015646174076868.0,\n      worker_uuid=UUID('7c3f2d06-d064-4a55-8bdc-009fb82ae554'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 11620,\n       Status.INTERESTING: 0},\n      branches=104,\n      since_new_branch=2642,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=484151.937344259,\n      timestamp=9469037874020756.0,\n      worker_uuid=UUID('7c3f2d06-d064-4a55-8bdc-009fb82ae554'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 14931,\n       Status.INTERESTING: 0},\n      branches=21709,\n      since_new_branch=30,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=623127.3604600696,\n      timestamp=1.0813653347723618e+16,\n      worker_uuid=UUID('7c3f2d06-d064-4a55-8bdc-009fb82ae554'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 19317,\n       Status.INTERESTING: 0},\n      branches=7_941_112_762_358_380_877,\n      since_new_branch=12131,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=671055.8793419232,\n      timestamp=1.1770179390712546e+16,\n      worker_uuid=UUID('7c3f2d06-d064-4a55-8bdc-009fb82ae554'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 29049,\n       Status.INTERESTING: 0},\n      branches=6_064_216_330_750_818_804,\n      since_new_branch=118,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=869437.2001449103,\n      timestamp=1.2421207208842352e+16,\n      worker_uuid=UUID('7c3f2d06-d064-4a55-8bdc-009fb82ae554'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 183678966,\n       Status.INTERESTING: 0},\n      branches=12699,\n      since_new_branch=3948,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=999999.9999999999,\n      timestamp=1.3278166545053824e+16,\n      worker_uuid=UUID('7c3f2d06-d064-4a55-8bdc-009fb82ae554'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8_455_064_445_583_439_778,\n       Status.INTERESTING: 0},\n      branches=14982,\n      since_new_branch=26041,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=2.225073858507e-311,\n      timestamp=3.402823466e+38,\n      worker_uuid=UUID('5ac2ddd6-6deb-4ea0-ba98-00f5d34f1406'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 9365,\n       Status.INTERESTING: 0},\n      branches=103,\n      since_new_branch=26477,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=110765.6769420913,\n      timestamp=3.120182640150813e+307,\n      worker_uuid=UUID('5ac2ddd6-6deb-4ea0-ba98-00f5d34f1406'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 26831,\n       Status.INTERESTING: 0},\n      branches=7470,\n      since_new_branch=28834,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=144613.04318204673,\n      timestamp=4.770071685408596e+307,\n      worker_uuid=UUID('5ac2ddd6-6deb-4ea0-ba98-00f5d34f1406'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 29826,\n       Status.INTERESTING: 0},\n      branches=100,\n      since_new_branch=30,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_4',\n      nodeid='nodeid_4',\n      elapsed_time=848553.6047897681,\n      timestamp=6.023566935824094e+307,\n      worker_uuid=UUID('5ac2ddd6-6deb-4ea0-ba98-00f5d34f1406'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7_814_162_962_139_059_485,\n       Status.INTERESTING: 0},\n      branches=19736,\n      since_new_branch=88,\n      phase=Phase.DISTILL)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0006856249528937042,
          "overall:gc": 0.0,
          "generate:reports": 0.016654542996548116
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878923.230146
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 4.541699308902025e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.00045237503945827484
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878967.162446
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=0.0,\n      timestamp=4.305323113723615e+16,\n      worker_uuid=UUID('e4039782-67e5-43c9-ae73-35a01662e2ce'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 9531,\n       Status.INTERESTING: 0},\n      branches=22,\n      since_new_branch=57,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=5.279484987661516e-154,\n      timestamp=2.220446049250313e-16,\n      worker_uuid=UUID('ae803ec3-17ec-470c-848e-817b00d50d95'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 34,\n       Status.INTERESTING: 0},\n      branches=7,\n      since_new_branch=161,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=131118.13750006098,\n      timestamp=10000000.0,\n      worker_uuid=UUID('ae803ec3-17ec-470c-848e-817b00d50d95'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 48,\n       Status.INTERESTING: 0},\n      branches=117,\n      since_new_branch=28989,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=174792.85843588936,\n      timestamp=1.9754177945173044e+16,\n      worker_uuid=UUID('ae803ec3-17ec-470c-848e-817b00d50d95'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 106,\n       Status.INTERESTING: 0},\n      branches=12591,\n      since_new_branch=3412,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=298772.4951703437,\n      timestamp=5.130727926456699e+307,\n      worker_uuid=UUID('ae803ec3-17ec-470c-848e-817b00d50d95'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 116,\n       Status.INTERESTING: 0},\n      branches=239_578_207_655_004_031,\n      since_new_branch=22886,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=913848.6346244678,\n      timestamp=7.443919942312626e+307,\n      worker_uuid=UUID('ae803ec3-17ec-470c-848e-817b00d50d95'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 120,\n       Status.INTERESTING: 0},\n      branches=108_223_915_737_339_998_273_582_310_869_513_975_862,\n      since_new_branch=4_188_465_561_514_888_118,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=913930.409233324,\n      timestamp=1.1715876121079626e+308,\n      worker_uuid=UUID('ae803ec3-17ec-470c-848e-817b00d50d95'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 11422,\n       Status.INTERESTING: 0},\n      branches=13529,\n      since_new_branch=84,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=999999.0,\n      timestamp=1.5679773946546288e+308,\n      worker_uuid=UUID('ae803ec3-17ec-470c-848e-817b00d50d95'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 22082,\n       Status.INTERESTING: 0},\n      branches=28,\n      since_new_branch=31356,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=1.1125369292536007e-308,\n      timestamp=7.443327695985425e+306,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3,\n       Status.INTERESTING: 0},\n      branches=18333,\n      since_new_branch=24511,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=2.4395485997868495e-120,\n      timestamp=1.0332513003129025e+307,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 22,\n       Status.INTERESTING: 0},\n      branches=102,\n      since_new_branch=66,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=1.401298464324817e-45,\n      timestamp=2.2212084722708693e+307,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 25,\n       Status.INTERESTING: 0},\n      branches=3342,\n      since_new_branch=7292,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=14770.252443258916,\n      timestamp=2.2277080979419647e+307,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 70,\n       Status.INTERESTING: 0},\n      branches=31288,\n      since_new_branch=9239,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=71220.60837943602,\n      timestamp=2.425990225717819e+307,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 89,\n       Status.INTERESTING: 0},\n      branches=65535,\n      since_new_branch=31765,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=133894.44945946764,\n      timestamp=4.655996417737314e+307,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 300,\n       Status.INTERESTING: 0},\n      branches=15302,\n      since_new_branch=126,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=163803.209989448,\n      timestamp=6.656295942807828e+307,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1321,\n       Status.INTERESTING: 0},\n      branches=64,\n      since_new_branch=1_599_131_710_570_161_090,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=185201.48414002493,\n      timestamp=7.070636529567688e+307,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3966,\n       Status.INTERESTING: 0},\n      branches=23624,\n      since_new_branch=85,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=317927.3111415338,\n      timestamp=7.512781817072741e+307,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 4355,\n       Status.INTERESTING: 0},\n      branches=25307,\n      since_new_branch=28483,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=378620.56496855756,\n      timestamp=9.38533037381551e+307,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7151,\n       Status.INTERESTING: 0},\n      branches=11668,\n      since_new_branch=121,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=460087.36184476997,\n      timestamp=9.861843059378756e+307,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 10535,\n       Status.INTERESTING: 0},\n      branches=5701,\n      since_new_branch=57,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=484533.76294082875,\n      timestamp=1.008307556320129e+308,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16560,\n       Status.INTERESTING: 0},\n      branches=33,\n      since_new_branch=16,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=490126.7264405472,\n      timestamp=1.1741470572229584e+308,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 21483,\n       Status.INTERESTING: 0},\n      branches=2117,\n      since_new_branch=105,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=634091.7576508753,\n      timestamp=1.1832439041300583e+308,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 23730,\n       Status.INTERESTING: 0},\n      branches=9_675_640_266_059_127_430_690_908_434_529_867_996,\n      since_new_branch=72,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=678820.7835158772,\n      timestamp=1.2028920653570938e+308,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 24054,\n       Status.INTERESTING: 0},\n      branches=18,\n      since_new_branch=3,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=780751.1092605178,\n      timestamp=1.3141860742318337e+308,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 31216,\n       Status.INTERESTING: 0},\n      branches=18319,\n      since_new_branch=8658,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=814115.0135096072,\n      timestamp=1.316880798397344e+308,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 32030,\n       Status.INTERESTING: 0},\n      branches=22351,\n      since_new_branch=29108,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=851604.1427659804,\n      timestamp=1.3449820723752896e+308,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 123988547,\n       Status.INTERESTING: 0},\n      branches=25855,\n      since_new_branch=19837,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=917434.8532640686,\n      timestamp=1.4056181178063724e+308,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_383_985_293,\n       Status.INTERESTING: 0},\n      branches=79,\n      since_new_branch=4_666_438_564_364_779_769,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=939094.4553134881,\n      timestamp=1.4083076700643393e+308,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_589_448_231,\n       Status.INTERESTING: 0},\n      branches=25570,\n      since_new_branch=17778,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=971335.0936887013,\n      timestamp=1.4511494219920923e+308,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_610_639_781,\n       Status.INTERESTING: 0},\n      branches=24011,\n      since_new_branch=1024,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=989348.5303615052,\n      timestamp=1.5078679381155692e+308,\n      worker_uuid=UUID('224af27c-552e-478b-9860-f88198c4aa39'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7_568_031_646_402_218_138,\n       Status.INTERESTING: 0},\n      branches=5_560_471_277_113_122_611,\n      since_new_branch=77,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=0.0,\n      timestamp=3.402823466e+38,\n      worker_uuid=UUID('05768b41-199e-4815-b6eb-fd7b6561f0d2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 6639,\n       Status.INTERESTING: 0},\n      branches=30587,\n      since_new_branch=20541,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=5.5089156401546845e-17,\n      timestamp=3.402823466e+38,\n      worker_uuid=UUID('05768b41-199e-4815-b6eb-fd7b6561f0d2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 8192,\n       Status.INTERESTING: 0},\n      branches=349711849,\n      since_new_branch=6150,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=0.5,\n      timestamp=3.402823466e+38,\n      worker_uuid=UUID('05768b41-199e-4815-b6eb-fd7b6561f0d2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 13211,\n       Status.INTERESTING: 0},\n      branches=6309,\n      since_new_branch=12412,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=498182.8491034276,\n      timestamp=1.0505118220678095e+308,\n      worker_uuid=UUID('05768b41-199e-4815-b6eb-fd7b6561f0d2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 13272,\n       Status.INTERESTING: 0},\n      branches=21903,\n      since_new_branch=21882,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=845447.8008133539,\n      timestamp=1.1156840004762873e+308,\n      worker_uuid=UUID('05768b41-199e-4815-b6eb-fd7b6561f0d2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 14981,\n       Status.INTERESTING: 0},\n      branches=103,\n      since_new_branch=20417,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=940745.6873268735,\n      timestamp=1.283811064603891e+308,\n      worker_uuid=UUID('05768b41-199e-4815-b6eb-fd7b6561f0d2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 18115,\n       Status.INTERESTING: 0},\n      branches=11153,\n      since_new_branch=7829,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=997280.5160713154,\n      timestamp=1.5942275130656262e+308,\n      worker_uuid=UUID('05768b41-199e-4815-b6eb-fd7b6561f0d2'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 29557,\n       Status.INTERESTING: 0},\n      branches=29596,\n      since_new_branch=8375,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=4.3647318520128067e-104,\n      timestamp=2.6006509460876937e-269,\n      worker_uuid=UUID('d7e5c93a-aaf2-4bd7-a7f4-6219e1eae307'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 7,\n       Status.INTERESTING: 0},\n      branches=9268,\n      since_new_branch=7_943_286_665_243_296_734,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=43256.208556686775,\n      timestamp=6.923715165591881e+16,\n      worker_uuid=UUID('d7e5c93a-aaf2-4bd7-a7f4-6219e1eae307'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 38,\n       Status.INTERESTING: 0},\n      branches=420862550,\n      since_new_branch=98,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=252255.15957313756,\n      timestamp=7.122001998983094e+306,\n      worker_uuid=UUID('d7e5c93a-aaf2-4bd7-a7f4-6219e1eae307'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 26358,\n       Status.INTERESTING: 0},\n      branches=20719,\n      since_new_branch=67,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_6',\n      nodeid='nodeid_6',\n      elapsed_time=338955.667217479,\n      timestamp=1.822162376698356e+307,\n      worker_uuid=UUID('d7e5c93a-aaf2-4bd7-a7f4-6219e1eae307'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 28229,\n       Status.INTERESTING: 0},\n      branches=4612,\n      since_new_branch=26928,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0020453750039450824,
          "overall:gc": 0.0,
          "generate:reports": 0.03792795882327482
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878908.3075268
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=5.419560874777836e-253,\n      timestamp=0.05,\n      worker_uuid=UUID('6bdf4702-822f-4fa1-acaa-59e07f447f6d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 25,\n       Status.INTERESTING: 0},\n      branches=1024,\n      since_new_branch=1_088_658_653,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=4.2476417170821253e-234,\n      timestamp=0.05,\n      worker_uuid=UUID('6bdf4702-822f-4fa1-acaa-59e07f447f6d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 47,\n       Status.INTERESTING: 0},\n      branches=15128,\n      since_new_branch=9538,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=6.808765960270097e-08,\n      timestamp=0.05000000000000001,\n      worker_uuid=UUID('6bdf4702-822f-4fa1-acaa-59e07f447f6d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 54,\n       Status.INTERESTING: 0},\n      branches=11,\n      since_new_branch=31171,\n      phase=Phase.SHRINK),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=1.192092896e-07,\n      timestamp=1.9,\n      worker_uuid=UUID('6bdf4702-822f-4fa1-acaa-59e07f447f6d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1486,\n       Status.INTERESTING: 0},\n      branches=1_623_146_305,\n      since_new_branch=15298,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=69798.30447461845,\n      timestamp=7177047085286397.0,\n      worker_uuid=UUID('6bdf4702-822f-4fa1-acaa-59e07f447f6d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 4468,\n       Status.INTERESTING: 0},\n      branches=1_271_517_131,\n      since_new_branch=21,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=76792.52026243179,\n      timestamp=5.013360160170901e+211,\n      worker_uuid=UUID('6bdf4702-822f-4fa1-acaa-59e07f447f6d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 15410,\n       Status.INTERESTING: 0},\n      branches=23816,\n      since_new_branch=8417,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=182760.31125439698,\n      timestamp=3.6436583964467967e+227,\n      worker_uuid=UUID('6bdf4702-822f-4fa1-acaa-59e07f447f6d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 16670,\n       Status.INTERESTING: 0},\n      branches=1343,\n      since_new_branch=9891,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=416909.3948974071,\n      timestamp=4.123884270292288e+305,\n      worker_uuid=UUID('6bdf4702-822f-4fa1-acaa-59e07f447f6d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 23504,\n       Status.INTERESTING: 0},\n      branches=9920,\n      since_new_branch=1479,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=422149.15641001536,\n      timestamp=7.603273656503209e+305,\n      worker_uuid=UUID('6bdf4702-822f-4fa1-acaa-59e07f447f6d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 27356,\n       Status.INTERESTING: 0},\n      branches=21665,\n      since_new_branch=4875,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=620640.9855659837,\n      timestamp=7.739760288356306e+305,\n      worker_uuid=UUID('6bdf4702-822f-4fa1-acaa-59e07f447f6d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 28907,\n       Status.INTERESTING: 0},\n      branches=116,\n      since_new_branch=43,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=661418.7076313602,\n      timestamp=1.2540552565073463e+307,\n      worker_uuid=UUID('6bdf4702-822f-4fa1-acaa-59e07f447f6d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 29946,\n       Status.INTERESTING: 0},\n      branches=104,\n      since_new_branch=8322,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=702744.4640335838,\n      timestamp=1.9143044806003094e+307,\n      worker_uuid=UUID('6bdf4702-822f-4fa1-acaa-59e07f447f6d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 32534,\n       Status.INTERESTING: 0},\n      branches=6568,\n      since_new_branch=77,\n      phase=Phase.REPLAY),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=733776.2302033447,\n      timestamp=2.1450301968398112e+307,\n      worker_uuid=UUID('6bdf4702-822f-4fa1-acaa-59e07f447f6d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 1_959_407_017,\n       Status.INTERESTING: 0},\n      branches=30,\n      since_new_branch=772,\n      phase=Phase.GENERATE),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=879882.7543781204,\n      timestamp=2.7435706520331563e+307,\n      worker_uuid=UUID('6bdf4702-822f-4fa1-acaa-59e07f447f6d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 3_697_464_435_870_607_937,\n       Status.INTERESTING: 0},\n      branches=64,\n      since_new_branch=114,\n      phase=Phase.FAILED),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=882083.7381843245,\n      timestamp=2.7483492924585356e+307,\n      worker_uuid=UUID('6bdf4702-822f-4fa1-acaa-59e07f447f6d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 152_576_544_256_652_317_348_458_079_366_480_775_736,\n       Status.INTERESTING: 0},\n      branches=23285,\n      since_new_branch=29052,\n      phase=Phase.DISTILL),\n     Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=981909.8028760109,\n      timestamp=2.812711113069258e+307,\n      worker_uuid=UUID('6bdf4702-822f-4fa1-acaa-59e07f447f6d'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 160_704_523_022_898_773_093_828_761_995_964_501_049,\n       Status.INTERESTING: 0},\n      branches=19,\n      since_new_branch=963732578,\n      phase=Phase.SHRINK)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0004813330015167594,
          "overall:gc": 0.0,
          "generate:reports": 0.0164840419893153
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878928.713697
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 4.3666979763656855e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.000486832985188812
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878929.859377
      }
    ],
    "corpus": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[Report(database_key=b'database_key_0',\n      nodeid='nodeid_0',\n      elapsed_time=12002.688393334185,\n      timestamp=2954690329028690.0,\n      worker_uuid=UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd'),\n      status_counts={Status.OVERRUN: 0,\n       Status.INVALID: 0,\n       Status.VALID: 0,\n       Status.INTERESTING: 0},\n      branches=23996,\n      since_new_branch=0,\n      phase=Phase.GENERATE)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.675000233575702e-05,
          "overall:gc": 0.0,
          "generate:reports": 0.0016712079523131251
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878971.057176
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_non_overlapping_reports(\n    reports=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.000152749998960644,
          "overall:gc": 0.0,
          "generate:reports": 0.007599500007927418
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_linearize.py::test_non_overlapping_reports",
        "run_start": 1747878961.734876
      }
    ]
  },
  "tests/test_linearize.py::test_linearize_decomposes_with_addition": {
    "rolling": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.005076373985502869,
          "overall:gc": 0.00023583299480378628,
          "generate:data": 1.0749965440481901e-05,
          "generate:Draw 1": 0.0024132090038619936,
          "generate:Draw 2": 1.4666991773992777e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878941.4323032
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "failed to satisfy assume() in test_linearize_decomposes_with_addition (line 181)",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: []",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 6.05839304625988e-05,
          "overall:gc": 0.00028425001073628664,
          "generate:data": 7.708033081144094e-06,
          "generate:Draw 1": 0.0017447500140406191
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 0,
              "unsatisfied": 1
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878921.06565
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 33605.99343247751,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 31207,\n  'since_new_branch': 16203,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 1.9,\n  'timestamp': 7644845826676536.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 79,\n   'Status.INTERESTING': 0},\n  'branches': 9499,\n  'since_new_branch': 2_139_350_117_480_647_606,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 353763.9403375606,\n  'timestamp': 1.0165151907840474e+16,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 803,\n   'Status.INTERESTING': 0},\n  'branches': 124,\n  'since_new_branch': 118,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 732576.7010259493,\n  'timestamp': 2.0526040983478876e+16,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 4837,\n   'Status.INTERESTING': 0},\n  'branches': 15781,\n  'since_new_branch': 14984,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 824069.4305561971,\n  'timestamp': 2.504307885051895e+16,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 23774,\n   'Status.INTERESTING': 0},\n  'branches': 35,\n  'since_new_branch': 109,\n  'phase': 'Phase.SHRINK'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 904842.001349142,\n  'timestamp': 2.9294456781167028e+16,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 2_905_415_387_698_092_566,\n   'Status.INTERESTING': 0},\n  'branches': 9,\n  'since_new_branch': 27263,\n  'phase': 'Phase.SHRINK'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.010879333014599979,
          "overall:gc": 0.000935249961912632,
          "generate:data": 9.624985978007317e-06,
          "generate:Draw 1": 0.010072458011563867,
          "generate:Draw 2": 2.745899837464094e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878928.451228
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 51,\n  'phase': 'Phase.FAILED'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.006797957932576537,
          "overall:gc": 0.0005525420419871807,
          "generate:data": 2.7790956664830446e-05,
          "generate:Draw 1": 0.01743850001366809,
          "generate:Draw 2": 2.779200440272689e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878938.2961018
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.FAILED'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.005942417017649859,
          "overall:gc": 0.0002141239820048213,
          "generate:data": 8.582952432334423e-06,
          "generate:Draw 1": 0.0022113749873824418,
          "generate:Draw 2": 2.7084024623036385e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878953.689976
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 1.192092896e-07,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 41,\n  'since_new_branch': 512,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 173490.695224924,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 25463,\n  'since_new_branch': 92,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 265098.53871492564,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 512,\n  'since_new_branch': 28922,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 521288.11853901134,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 17482,\n  'since_new_branch': 17,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 605311.7623561107,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 19587,\n  'since_new_branch': 22625,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 783246.140217261,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 8,\n   'Status.INTERESTING': 0},\n  'branches': 1003,\n  'since_new_branch': 5466,\n  'phase': 'Phase.GENERATE'}]\nDraw 2: 4",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.010383125045336783,
          "overall:gc": 0.0006410829955711961,
          "generate:data": 1.1124997399747372e-05,
          "generate:Draw 1": 0.005340249976143241,
          "generate:Draw 2": 2.7375004719942808e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878947.570357
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 23941,\n  'since_new_branch': 1,\n  'phase': 'Phase.SHRINK'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.004727083083707839,
          "overall:gc": 0.000657333992421627,
          "generate:data": 1.9041995983570814e-05,
          "generate:Draw 1": 0.003970665973611176,
          "generate:Draw 2": 2.845795825123787e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878940.3537989
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 51495.38387380083,\n  'timestamp': 1.879250596318051e+16,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 15396,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 414689.05849210004,\n  'timestamp': 2.257640520750393e+16,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 15999,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 160,\n  'phase': 'Phase.FAILED'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.004605666967108846,
          "overall:gc": 0.00020204205065965652,
          "generate:data": 1.0417017620056868e-05,
          "generate:Draw 1": 0.002294998965226114,
          "generate:Draw 2": 2.454203786328435e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878927.300524
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_9'\",\n  'nodeid': 'nodeid_9',\n  'elapsed_time': 349511.1149742925,\n  'timestamp': 3.19322039597294e+307,\n  'worker_uuid': \"UUID('9a850c0d-86da-4823-bbe7-7bf893f5c66c')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 8523,\n   'Status.INTERESTING': 0},\n  'branches': 110,\n  'since_new_branch': 3801,\n  'phase': 'Phase.SHRINK'},\n {'database_key': \"b'database_key_9'\",\n  'nodeid': 'nodeid_9',\n  'elapsed_time': 858392.005487979,\n  'timestamp': 3.6670282405918655e+307,\n  'worker_uuid': \"UUID('9a850c0d-86da-4823-bbe7-7bf893f5c66c')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 25408,\n   'Status.INTERESTING': 0},\n  'branches': 87,\n  'since_new_branch': 73,\n  'phase': 'Phase.REPLAY'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0037783339503221214,
          "overall:gc": 0.000183583062607795,
          "generate:data": 6.624963134527206e-06,
          "generate:Draw 1": 0.002499749942217022,
          "generate:Draw 2": 2.2458028979599476e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878959.880716
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "failed to satisfy assume() in test_linearize_decomposes_with_addition (line 181)",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: []",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00018679106142371893,
          "overall:gc": 0.00018041703151538968,
          "generate:data": 1.1083960998803377e-05,
          "generate:Draw 1": 0.0027831249171867967
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 0,
              "unsatisfied": 1
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878925.110511
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 22295,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 25628,\n  'phase': 'Phase.DISTILL'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.011676082969643176,
          "overall:gc": 0.0004448340041562915,
          "generate:data": 2.0833045709878206e-05,
          "generate:Draw 1": 0.005261374986730516,
          "generate:Draw 2": 2.6250025257468224e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878964.0084631
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 32200,\n  'since_new_branch': 1_729_429_533,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 6_373_534_718_484_839_694,\n  'since_new_branch': 10986,\n  'phase': 'Phase.DISTILL'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0027087910566478968,
          "overall:gc": 0.00028083298821002245,
          "generate:data": 8.66700429469347e-06,
          "generate:Draw 1": 0.004376666969619691,
          "generate:Draw 2": 3.5458942875266075e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878932.9921641
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.010869626014027745,
          "overall:gc": 0.0002631249953992665,
          "generate:data": 7.5830030255019665e-06,
          "generate:Draw 1": 0.0021741249947808683,
          "generate:Draw 2": 3.445800393819809e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878939.298739
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 1.1,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 1_689_478_876_325_550_879,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 136933.86022053903,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 6_842_221_235_915_587_062,\n   'Status.INTERESTING': 0},\n  'branches': 44,\n  'since_new_branch': 7301,\n  'phase': 'Phase.REPLAY'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0026612079818733037,
          "overall:gc": 0.0001972499885596335,
          "generate:data": 7.875030860304832e-06,
          "generate:Draw 1": 0.002160417032428086,
          "generate:Draw 2": 2.4459033738821745e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878929.606457
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_8'\",\n  'nodeid': 'nodeid_8',\n  'elapsed_time': 733815.2036832578,\n  'timestamp': 3.130049873623298e+306,\n  'worker_uuid': \"UUID('16bc3b09-60c2-4d72-9a06-61848e5f5d5f')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 1525,\n   'Status.INTERESTING': 0},\n  'branches': 8290,\n  'since_new_branch': 30222,\n  'phase': 'Phase.SHRINK'},\n {'database_key': \"b'database_key_8'\",\n  'nodeid': 'nodeid_8',\n  'elapsed_time': 818784.5493255182,\n  'timestamp': 1.606575389855356e+307,\n  'worker_uuid': \"UUID('16bc3b09-60c2-4d72-9a06-61848e5f5d5f')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 10921,\n   'Status.INTERESTING': 0},\n  'branches': 26260,\n  'since_new_branch': 12389,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_8'\",\n  'nodeid': 'nodeid_8',\n  'elapsed_time': 916494.8921841678,\n  'timestamp': 3.5003410316490303e+307,\n  'worker_uuid': \"UUID('16bc3b09-60c2-4d72-9a06-61848e5f5d5f')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 22178,\n   'Status.INTERESTING': 0},\n  'branches': 27,\n  'since_new_branch': 9,\n  'phase': 'Phase.DISTILL'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.006521542032714933,
          "overall:gc": 0.00030000094557181,
          "generate:data": 9.041978046298027e-06,
          "generate:Draw 1": 0.0031713320058770478,
          "generate:Draw 2": 2.295803278684616e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878923.0930839
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 10166,\n  'since_new_branch': 31459,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 519908.86827621685,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 19840,\n  'since_new_branch': 0,\n  'phase': 'Phase.SHRINK'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0074147499981336296,
          "overall:gc": 0.00027883402071893215,
          "generate:data": 9.208975825458765e-06,
          "generate:Draw 1": 0.002936915960162878,
          "generate:Draw 2": 0.0002132499939762056
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878942.448444
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "failed to satisfy assume() in test_linearize_decomposes_with_addition (line 181)",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 926609.7445624613,\n  'timestamp': inf,\n  'worker_uuid': \"UUID('3496f9dc-8fab-4e1e-9976-1fb679dd6ce2')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 15378,\n   'Status.INTERESTING': 0},\n  'branches': 19516,\n  'since_new_branch': 1010,\n  'phase': 'Phase.FAILED'}]",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00017441599629819393,
          "overall:gc": 0.00011312501737847924,
          "generate:data": 1.083302777260542e-05,
          "generate:Draw 1": 0.0019812920363619924
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 0,
              "unsatisfied": 1
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878910.847573
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 81,\n   'Status.INTERESTING': 0},\n  'branches': 7_539_961_788_077_891_002,\n  'since_new_branch': 2,\n  'phase': 'Phase.GENERATE'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.004540207970421761,
          "overall:gc": 0.00024754193145781755,
          "generate:data": 1.0041985660791397e-05,
          "generate:Draw 1": 0.002284041082020849,
          "generate:Draw 2": 2.445897553116083e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878930.774399
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 1.603065076959029e-148,\n  'timestamp': 9007199254740992.0,\n  'worker_uuid': \"UUID('cedab689-9f70-462d-bde4-1c99c1d9ef28')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 17,\n   'Status.INTERESTING': 0},\n  'branches': 300,\n  'since_new_branch': 12842,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 0.05,\n  'timestamp': 1.1625153809234094e+194,\n  'worker_uuid': \"UUID('cedab689-9f70-462d-bde4-1c99c1d9ef28')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 49,\n   'Status.INTERESTING': 0},\n  'branches': 1_858_000_855,\n  'since_new_branch': 8192,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 0.05,\n  'timestamp': 2.6315148302841884e+304,\n  'worker_uuid': \"UUID('cedab689-9f70-462d-bde4-1c99c1d9ef28')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 59,\n   'Status.INTERESTING': 0},\n  'branches': 13027,\n  'since_new_branch': 70,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 310098.83431027114,\n  'timestamp': 3.983632698349156e+305,\n  'worker_uuid': \"UUID('cedab689-9f70-462d-bde4-1c99c1d9ef28')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 91,\n   'Status.INTERESTING': 0},\n  'branches': 14,\n  'since_new_branch': 8192,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 343162.31231256895,\n  'timestamp': 4.159928808173581e+305,\n  'worker_uuid': \"UUID('cedab689-9f70-462d-bde4-1c99c1d9ef28')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 2416,\n   'Status.INTERESTING': 0},\n  'branches': 3491,\n  'since_new_branch': 57,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 567703.2992615011,\n  'timestamp': 4.629714603910201e+305,\n  'worker_uuid': \"UUID('cedab689-9f70-462d-bde4-1c99c1d9ef28')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 2795,\n   'Status.INTERESTING': 0},\n  'branches': 15668,\n  'since_new_branch': 48,\n  'phase': 'Phase.SHRINK'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 709012.9625281054,\n  'timestamp': 8.832583300506968e+305,\n  'worker_uuid': \"UUID('cedab689-9f70-462d-bde4-1c99c1d9ef28')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 19289,\n   'Status.INTERESTING': 0},\n  'branches': 27370,\n  'since_new_branch': 19051,\n  'phase': 'Phase.SHRINK'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 991869.3964869154,\n  'timestamp': 9.228200132241969e+305,\n  'worker_uuid': \"UUID('cedab689-9f70-462d-bde4-1c99c1d9ef28')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 28228,\n   'Status.INTERESTING': 0},\n  'branches': 9156,\n  'since_new_branch': 12261,\n  'phase': 'Phase.DISTILL'}]\nDraw 2: 7",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.012943000067025423,
          "overall:gc": 0.0015641679638065398,
          "generate:data": 9.750016033649445e-06,
          "generate:Draw 1": 0.021872332028578967,
          "generate:Draw 2": 4.63749747723341e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878922.112962
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "failed to satisfy assume() in test_linearize_decomposes_with_addition (line 181)",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 221615.54510795829,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 22593,\n  'since_new_branch': 15396,\n  'phase': 'Phase.REPLAY'}]",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.000171584018971771,
          "overall:gc": 0.00033841602271422744,
          "generate:data": 1.0958989150822163e-05,
          "generate:Draw 1": 0.0017708339728415012
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 0,
              "unsatisfied": 1
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878926.1925418
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 5.960464477539063e-08,\n  'timestamp': 5.072777359560099e+307,\n  'worker_uuid': \"UUID('c38ce63e-48fe-4856-bac4-ff4f33cbd92e')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 7291,\n   'Status.INTERESTING': 0},\n  'branches': 89,\n  'since_new_branch': 9695,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 213115.02502248986,\n  'timestamp': 5.273643423183971e+307,\n  'worker_uuid': \"UUID('c38ce63e-48fe-4856-bac4-ff4f33cbd92e')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 24324,\n   'Status.INTERESTING': 0},\n  'branches': 74,\n  'since_new_branch': 3955,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 980099.2470531277,\n  'timestamp': 5.460048227433176e+307,\n  'worker_uuid': \"UUID('c38ce63e-48fe-4856-bac4-ff4f33cbd92e')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 778482042,\n   'Status.INTERESTING': 0},\n  'branches': 2_268_873_794_893_886_525,\n  'since_new_branch': 89,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 999999.9999999999,\n  'timestamp': 8.383571289921843e+307,\n  'worker_uuid': \"UUID('c38ce63e-48fe-4856-bac4-ff4f33cbd92e')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 967259299,\n   'Status.INTERESTING': 0},\n  'branches': 24,\n  'since_new_branch': 4284,\n  'phase': 'Phase.SHRINK'}]\nDraw 2: 2",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0068602089886553586,
          "overall:gc": 0.0004559159278869629,
          "generate:data": 1.025001984089613e-05,
          "generate:Draw 1": 0.004733084060717374,
          "generate:Draw 2": 2.6041001547127962e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878912.897229
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 5.412424886276682e-141,\n  'timestamp': 4.1809291462225515e+102,\n  'worker_uuid': \"UUID('ecd4771a-15e0-4c75-9c36-af0e659ba9df')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 99,\n   'Status.INTERESTING': 0},\n  'branches': 1000,\n  'since_new_branch': 826725235,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 2.220446049250313e-16,\n  'timestamp': 1.0693534016270066e+307,\n  'worker_uuid': \"UUID('ecd4771a-15e0-4c75-9c36-af0e659ba9df')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 105,\n   'Status.INTERESTING': 0},\n  'branches': 1.4731532687475704e+38,\n  'since_new_branch': 512,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 0.05,\n  'timestamp': 2.424758160896282e+307,\n  'worker_uuid': \"UUID('ecd4771a-15e0-4c75-9c36-af0e659ba9df')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 512,\n   'Status.INTERESTING': 0},\n  'branches': 63,\n  'since_new_branch': 24786,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 80799.23278099146,\n  'timestamp': 2.529054067168413e+307,\n  'worker_uuid': \"UUID('ecd4771a-15e0-4c75-9c36-af0e659ba9df')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 3390,\n   'Status.INTERESTING': 0},\n  'branches': 45,\n  'since_new_branch': 27,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 128673.73447767497,\n  'timestamp': 2.880804945480719e+307,\n  'worker_uuid': \"UUID('ecd4771a-15e0-4c75-9c36-af0e659ba9df')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 7096,\n   'Status.INTERESTING': 0},\n  'branches': 51,\n  'since_new_branch': 15350,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 140877.27858790936,\n  'timestamp': 4.760320683825507e+307,\n  'worker_uuid': \"UUID('ecd4771a-15e0-4c75-9c36-af0e659ba9df')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 19764,\n   'Status.INTERESTING': 0},\n  'branches': 32263,\n  'since_new_branch': 94,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 750794.0033459563,\n  'timestamp': 5.37550127372322e+307,\n  'worker_uuid': \"UUID('ecd4771a-15e0-4c75-9c36-af0e659ba9df')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 4_707_057_582_806_641_798,\n   'Status.INTERESTING': 0},\n  'branches': 3.263289027933501e+37,\n  'since_new_branch': 80,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 999999.0,\n  'timestamp': 7.129536282953975e+307,\n  'worker_uuid': \"UUID('ecd4771a-15e0-4c75-9c36-af0e659ba9df')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 1.142361278168791e+38,\n   'Status.INTERESTING': 0},\n  'branches': 31871,\n  'since_new_branch': 12560,\n  'phase': 'Phase.DISTILL'}]\nDraw 2: 2",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.014648582960944623,
          "overall:gc": 0.00047820800682529807,
          "generate:data": 7.00005330145359e-06,
          "generate:Draw 1": 0.006347457994706929,
          "generate:Draw 2": 2.341700019314885e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878909.84576
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 59223.10954425549,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 3687,\n  'since_new_branch': 10778,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 138230.81010113494,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 1_438_301_362,\n  'since_new_branch': 8767,\n  'phase': 'Phase.SHRINK'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 299325.6494981354,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 62,\n   'Status.INTERESTING': 0},\n  'branches': 25990,\n  'since_new_branch': 30231,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 429725.3755389113,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 86,\n   'Status.INTERESTING': 0},\n  'branches': 30736,\n  'since_new_branch': 25862,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 485311.6846283824,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 114,\n   'Status.INTERESTING': 0},\n  'branches': 46,\n  'since_new_branch': 117,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 497626.145734663,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 118,\n   'Status.INTERESTING': 0},\n  'branches': 12611,\n  'since_new_branch': 13,\n  'phase': 'Phase.SHRINK'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 714858.8628434652,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 126,\n   'Status.INTERESTING': 0},\n  'branches': 1024,\n  'since_new_branch': 12040875,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 905777.6173139301,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 14712,\n   'Status.INTERESTING': 0},\n  'branches': 12346,\n  'since_new_branch': 22702,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 939542.1591861324,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 21473,\n   'Status.INTERESTING': 0},\n  'branches': 25298,\n  'since_new_branch': 20692,\n  'phase': 'Phase.GENERATE'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.01731549995020032,
          "overall:gc": 0.0009522089967504144,
          "generate:data": 1.025001984089613e-05,
          "generate:Draw 1": 0.010357082996051759,
          "generate:Draw 2": 2.6916037313640118e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878956.854573
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 6.99582185748203e-156,\n  'timestamp': 2.1536935930016452e+16,\n  'worker_uuid': \"UUID('5033349d-57d8-4f15-92de-ef4c47a25d53')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 18031,\n   'Status.INTERESTING': 0},\n  'branches': 8026,\n  'since_new_branch': 6440,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 1.192092896e-07,\n  'timestamp': 4.298544078673819e+16,\n  'worker_uuid': \"UUID('5033349d-57d8-4f15-92de-ef4c47a25d53')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 18283,\n   'Status.INTERESTING': 0},\n  'branches': 29119,\n  'since_new_branch': 25135,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 304730.3169080356,\n  'timestamp': 5.241814028169822e+16,\n  'worker_uuid': \"UUID('5033349d-57d8-4f15-92de-ef4c47a25d53')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 1_795_710_973,\n   'Status.INTERESTING': 0},\n  'branches': 1.5252992492037224e+38,\n  'since_new_branch': 1551,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 532062.1913616367,\n  'timestamp': 3.943496682281448e+307,\n  'worker_uuid': \"UUID('5033349d-57d8-4f15-92de-ef4c47a25d53')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 2_084_624_909,\n   'Status.INTERESTING': 0},\n  'branches': 31106,\n  'since_new_branch': 122,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 801250.7074837532,\n  'timestamp': 4.144090659188863e+307,\n  'worker_uuid': \"UUID('5033349d-57d8-4f15-92de-ef4c47a25d53')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 6_659_220_702_788_796_679,\n   'Status.INTERESTING': 0},\n  'branches': 517358038,\n  'since_new_branch': 16573,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 998994.9434867147,\n  'timestamp': 9.115687683386599e+307,\n  'worker_uuid': \"UUID('5033349d-57d8-4f15-92de-ef4c47a25d53')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 1.3007560293139598e+38,\n   'Status.INTERESTING': 0},\n  'branches': 404,\n  'since_new_branch': 6851,\n  'phase': 'Phase.FAILED'}]\nDraw 2: 5",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.008644834044389427,
          "overall:gc": 0.0004914589808322489,
          "generate:data": 1.1208991054445505e-05,
          "generate:Draw 1": 0.005397416010964662,
          "generate:Draw 2": 2.462498378008604e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878908.82908
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 3.402823466e+38,\n  'worker_uuid': \"UUID('a3c967ff-ae20-40c1-b16d-6aef95248411')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 11,\n   'Status.INTERESTING': 0},\n  'branches': 4769,\n  'since_new_branch': 2438,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.5,\n  'timestamp': 1.574261466251103e+60,\n  'worker_uuid': \"UUID('a3c967ff-ae20-40c1-b16d-6aef95248411')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 3614,\n   'Status.INTERESTING': 0},\n  'branches': 23615,\n  'since_new_branch': 83,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 2.00001,\n  'timestamp': 5.0599056587533456e+306,\n  'worker_uuid': \"UUID('a3c967ff-ae20-40c1-b16d-6aef95248411')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 359727617,\n   'Status.INTERESTING': 0},\n  'branches': 25816,\n  'since_new_branch': 14788,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 515055.32812197617,\n  'timestamp': 1.537826953624183e+307,\n  'worker_uuid': \"UUID('a3c967ff-ae20-40c1-b16d-6aef95248411')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 398405155,\n   'Status.INTERESTING': 0},\n  'branches': 65535,\n  'since_new_branch': 2068,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 705528.8481301959,\n  'timestamp': 7.745769997972421e+307,\n  'worker_uuid': \"UUID('a3c967ff-ae20-40c1-b16d-6aef95248411')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 1.4294643018378728e+37,\n   'Status.INTERESTING': 0},\n  'branches': 14962,\n  'since_new_branch': 376729718,\n  'phase': 'Phase.GENERATE'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.02016787597676739,
          "overall:gc": 0.000885749002918601,
          "generate:data": 7.750000804662704e-06,
          "generate:Draw 1": 0.007718459004536271,
          "generate:Draw 2": 2.566596958786249e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878957.8720372
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_6'\",\n  'nodeid': 'nodeid_6',\n  'elapsed_time': 5.365480217076325e-44,\n  'timestamp': 2.927991560279392e+307,\n  'worker_uuid': \"UUID('c0fa5e68-285a-465a-9fc9-350ad5b2af40')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 26549,\n   'Status.INTERESTING': 0},\n  'branches': 18596,\n  'since_new_branch': 57,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_6'\",\n  'nodeid': 'nodeid_6',\n  'elapsed_time': 367918.002263582,\n  'timestamp': 3.8143595408797346e+307,\n  'worker_uuid': \"UUID('c0fa5e68-285a-465a-9fc9-350ad5b2af40')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 1.0896239554900777e+38,\n   'Status.INTERESTING': 0},\n  'branches': 30220,\n  'since_new_branch': 6025,\n  'phase': 'Phase.REPLAY'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.004500332986935973,
          "overall:gc": 0.002721460012253374,
          "generate:data": 1.2625008821487427e-05,
          "generate:Draw 1": 0.16864133201306686,
          "generate:Draw 2": 8.120795246213675e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878905.8658829
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "failed to satisfy assume() in test_linearize_decomposes_with_addition (line 181)",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_3'\",\n  'nodeid': 'nodeid_3',\n  'elapsed_time': 5.960464477539063e-08,\n  'timestamp': 4.657329654402724e+307,\n  'worker_uuid': \"UUID('caa01529-0b13-4a3c-bee8-93ead1428327')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 2042,\n   'Status.INTERESTING': 0},\n  'branches': 12185,\n  'since_new_branch': 27798,\n  'phase': 'Phase.GENERATE'}]",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00017345801461488008,
          "overall:gc": 0.00012820801930502057,
          "generate:data": 1.129199517890811e-05,
          "generate:Draw 1": 0.0019788339850492775
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 0,
              "unsatisfied": 1
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878920.0570052
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 1.9017705217345257e-73,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 4547,\n  'since_new_branch': 8_330_394_572_535_974_578,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.05,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 2_003_007_101,\n  'since_new_branch': 85,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.05,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 6_980_225_350_665_539_372,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.5,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 24734,\n  'since_new_branch': 50,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 180411.30742554914,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 15261,\n  'since_new_branch': 84,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 1000000.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 8,\n   'Status.INTERESTING': 0},\n  'branches': 36,\n  'since_new_branch': 27,\n  'phase': 'Phase.DISTILL'}]\nDraw 2: 4",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.020369750098325312,
          "overall:gc": 0.0008632910321466625,
          "generate:data": 1.691700890660286e-05,
          "generate:Draw 1": 0.007021999917924404,
          "generate:Draw 2": 5.104194860905409e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878955.828529
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.004632042022421956,
          "overall:gc": 0.00032420799834653735,
          "generate:data": 1.1083029676228762e-05,
          "generate:Draw 1": 0.002247416996397078,
          "generate:Draw 2": 1.4582998119294643e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878943.4640489
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 671221.6617816157,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 15585,\n  'since_new_branch': 43,\n  'phase': 'Phase.SHRINK'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 980526.2682635903,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 980189135,\n  'since_new_branch': 1.3155499396916016e+38,\n  'phase': 'Phase.FAILED'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.007249084010254592,
          "overall:gc": 0.0005547920009121299,
          "generate:data": 2.037500962615013e-05,
          "generate:Draw 1": 0.002600707986857742,
          "generate:Draw 2": 2.500001573935151e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878954.724142
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_9'\",\n  'nodeid': 'nodeid_9',\n  'elapsed_time': 671968.0612664117,\n  'timestamp': 6.869473238815557e+16,\n  'worker_uuid': \"UUID('da321881-f97e-438a-a673-14791380b143')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 3266,\n   'Status.INTERESTING': 0},\n  'branches': 26575,\n  'since_new_branch': 3_178_038_706_848_635_181,\n  'phase': 'Phase.SHRINK'},\n {'database_key': \"b'database_key_9'\",\n  'nodeid': 'nodeid_9',\n  'elapsed_time': 810566.8044915581,\n  'timestamp': 6.877961511168189e+16,\n  'worker_uuid': \"UUID('da321881-f97e-438a-a673-14791380b143')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 1_911_301_285,\n   'Status.INTERESTING': 0},\n  'branches': 17265,\n  'since_new_branch': 2535,\n  'phase': 'Phase.DISTILL'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.004586584982462227,
          "overall:gc": 0.062481125933118165,
          "generate:data": 1.091696321964264e-05,
          "generate:Draw 1": 0.002953165036160499,
          "generate:Draw 2": 2.6416033506393433e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878917.0498838
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 21057,\n  'since_new_branch': 27256,\n  'phase': 'Phase.REPLAY'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0026676239795051515,
          "overall:gc": 0.00018629193073138595,
          "generate:data": 1.1541997082531452e-05,
          "generate:Draw 1": 0.0023500830866396427,
          "generate:Draw 2": 2.6291992980986834e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878965.135007
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 125,\n  'phase': 'Phase.REPLAY'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.002701582037843764,
          "overall:gc": 0.00022566696861758828,
          "generate:data": 1.0707997716963291e-05,
          "generate:Draw 1": 0.002348626032471657,
          "generate:Draw 2": 2.5958986952900887e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878934.1034071
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 5e-324,\n  'timestamp': 6.912095286608423e+227,\n  'worker_uuid': \"UUID('5b37482c-aef6-4a11-893f-398e520ca6be')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 37,\n   'Status.INTERESTING': 0},\n  'branches': 21650,\n  'since_new_branch': 26060,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 5.230293767705204e-164,\n  'timestamp': 2.981708516815465e+262,\n  'worker_uuid': \"UUID('5b37482c-aef6-4a11-893f-398e520ca6be')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 41,\n   'Status.INTERESTING': 0},\n  'branches': 5,\n  'since_new_branch': 17978,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 1.3745730695040495e-82,\n  'timestamp': 2.031025251691239e+307,\n  'worker_uuid': \"UUID('5b37482c-aef6-4a11-893f-398e520ca6be')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 404,\n   'Status.INTERESTING': 0},\n  'branches': 20424,\n  'since_new_branch': 6562,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 6.103515625e-05,\n  'timestamp': 2.619972897810638e+307,\n  'worker_uuid': \"UUID('5b37482c-aef6-4a11-893f-398e520ca6be')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 5560,\n   'Status.INTERESTING': 0},\n  'branches': 13,\n  'since_new_branch': 61,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 0.05,\n  'timestamp': 4.0088696923265764e+307,\n  'worker_uuid': \"UUID('5b37482c-aef6-4a11-893f-398e520ca6be')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 7201,\n   'Status.INTERESTING': 0},\n  'branches': 57,\n  'since_new_branch': 512,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 144469.48382848038,\n  'timestamp': 4.066037567630234e+307,\n  'worker_uuid': \"UUID('5b37482c-aef6-4a11-893f-398e520ca6be')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 11642,\n   'Status.INTERESTING': 0},\n  'branches': 22702,\n  'since_new_branch': 33,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 507521.1434711727,\n  'timestamp': 4.3933038182205954e+307,\n  'worker_uuid': \"UUID('5b37482c-aef6-4a11-893f-398e520ca6be')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 20924,\n   'Status.INTERESTING': 0},\n  'branches': 17910,\n  'since_new_branch': 4_123_820_802_666_252_050,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 623885.1582788347,\n  'timestamp': 5.8901120033811e+307,\n  'worker_uuid': \"UUID('5b37482c-aef6-4a11-893f-398e520ca6be')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 25886,\n   'Status.INTERESTING': 0},\n  'branches': 18212,\n  'since_new_branch': 80,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 657915.9570301863,\n  'timestamp': 5.97388948229687e+307,\n  'worker_uuid': \"UUID('5b37482c-aef6-4a11-893f-398e520ca6be')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 26870,\n   'Status.INTERESTING': 0},\n  'branches': 1_006_158_787,\n  'since_new_branch': 261341932,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 882283.602370034,\n  'timestamp': 8.46742776616227e+307,\n  'worker_uuid': \"UUID('5b37482c-aef6-4a11-893f-398e520ca6be')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 30112,\n   'Status.INTERESTING': 0},\n  'branches': 32,\n  'since_new_branch': 19265,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 992027.2636253764,\n  'timestamp': 1.0231167137626231e+308,\n  'worker_uuid': \"UUID('5b37482c-aef6-4a11-893f-398e520ca6be')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 2_217_582_661_738_274_980,\n   'Status.INTERESTING': 0},\n  'branches': 127,\n  'since_new_branch': 18849,\n  'phase': 'Phase.REPLAY'}]\nDraw 2: 8",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.01692416804144159,
          "overall:gc": 0.001148583018220961,
          "generate:data": 1.1625001206994057e-05,
          "generate:Draw 1": 0.012381124950479716,
          "generate:Draw 2": 2.6291003450751305e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878924.124013
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 9.73826167799588e+268,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 54744.142675835734,\n  'timestamp': 3.9810592010922794e+307,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 1.0102035711767192e+37,\n  'phase': 'Phase.SHRINK'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 486012.4958374666,\n  'timestamp': 4.969396464501952e+307,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 59,\n   'Status.INTERESTING': 0},\n  'branches': 18194,\n  'since_new_branch': 91,\n  'phase': 'Phase.DISTILL'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.006715623952914029,
          "overall:gc": 0.00039925106102600694,
          "generate:data": 9.583018254488707e-06,
          "generate:Draw 1": 0.0032992909546010196,
          "generate:Draw 2": 2.5792047381401062e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878946.538987
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_1'\",\n  'nodeid': 'nodeid_1',\n  'elapsed_time': 2.2765152969820818e-191,\n  'timestamp': 1.2223456255509216e+16,\n  'worker_uuid': \"UUID('f43bcf78-9601-4d8d-8797-bd749bc06c1b')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 7802,\n   'Status.INTERESTING': 0},\n  'branches': 22827,\n  'since_new_branch': 29448,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_1'\",\n  'nodeid': 'nodeid_1',\n  'elapsed_time': 73315.51658319803,\n  'timestamp': 1.50987611275433e+16,\n  'worker_uuid': \"UUID('f43bcf78-9601-4d8d-8797-bd749bc06c1b')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 22485,\n   'Status.INTERESTING': 0},\n  'branches': 869849460,\n  'since_new_branch': 14491,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_1'\",\n  'nodeid': 'nodeid_1',\n  'elapsed_time': 89407.15324394511,\n  'timestamp': 3.763109483373716e+16,\n  'worker_uuid': \"UUID('f43bcf78-9601-4d8d-8797-bd749bc06c1b')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 1_697_601_658,\n   'Status.INTERESTING': 0},\n  'branches': 30597,\n  'since_new_branch': 6399,\n  'phase': 'Phase.SHRINK'},\n {'database_key': \"b'database_key_1'\",\n  'nodeid': 'nodeid_1',\n  'elapsed_time': 472070.4476951428,\n  'timestamp': 2.108370962461175e+112,\n  'worker_uuid': \"UUID('f43bcf78-9601-4d8d-8797-bd749bc06c1b')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 3_325_774_868_210_326_334,\n   'Status.INTERESTING': 0},\n  'branches': 31,\n  'since_new_branch': 32617,\n  'phase': 'Phase.SHRINK'},\n {'database_key': \"b'database_key_1'\",\n  'nodeid': 'nodeid_1',\n  'elapsed_time': 705301.232696173,\n  'timestamp': 1.037122099801147e+113,\n  'worker_uuid': \"UUID('f43bcf78-9601-4d8d-8797-bd749bc06c1b')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 3_555_485_688_266_775_730,\n   'Status.INTERESTING': 0},\n  'branches': 95,\n  'since_new_branch': 106,\n  'phase': 'Phase.FAILED'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.014915208972524852,
          "overall:gc": 0.0006199169438332319,
          "generate:data": 1.1041993275284767e-05,
          "generate:Draw 1": 0.0077057910384610295,
          "generate:Draw 2": 2.6833033189177513e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878931.86399
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 0.0,\n  'timestamp': 6.742179264943842e+307,\n  'worker_uuid': \"UUID('9974d75b-3338-44fe-a179-0134676b1b69')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 7,\n   'Status.INTERESTING': 0},\n  'branches': 17849,\n  'since_new_branch': 124,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 0.0,\n  'timestamp': 7.944184792313226e+307,\n  'worker_uuid': \"UUID('9974d75b-3338-44fe-a179-0134676b1b69')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 43,\n   'Status.INTERESTING': 0},\n  'branches': 8290,\n  'since_new_branch': 17676,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 1.2046457811483523e-253,\n  'timestamp': 8.663770906188064e+307,\n  'worker_uuid': \"UUID('9974d75b-3338-44fe-a179-0134676b1b69')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 95,\n   'Status.INTERESTING': 0},\n  'branches': 434352304,\n  'since_new_branch': 23613,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 146960.5530205354,\n  'timestamp': 8.782043990079958e+307,\n  'worker_uuid': \"UUID('9974d75b-3338-44fe-a179-0134676b1b69')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 300,\n   'Status.INTERESTING': 0},\n  'branches': 29792,\n  'since_new_branch': 1.4146053245422824e+36,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 470490.7147857601,\n  'timestamp': 1.1352666728126479e+308,\n  'worker_uuid': \"UUID('9974d75b-3338-44fe-a179-0134676b1b69')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 11393,\n   'Status.INTERESTING': 0},\n  'branches': 22582,\n  'since_new_branch': 30706,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 776296.8519332934,\n  'timestamp': 1.2165549532321197e+308,\n  'worker_uuid': \"UUID('9974d75b-3338-44fe-a179-0134676b1b69')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 22729,\n   'Status.INTERESTING': 0},\n  'branches': 19,\n  'since_new_branch': 78,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 922277.0908690894,\n  'timestamp': 1.2844712497987608e+308,\n  'worker_uuid': \"UUID('9974d75b-3338-44fe-a179-0134676b1b69')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 30454,\n   'Status.INTERESTING': 0},\n  'branches': 21330,\n  'since_new_branch': 1_710_941_663,\n  'phase': 'Phase.SHRINK'}]\nDraw 2: 4",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.01264320797054097,
          "overall:gc": 0.0016122090164572,
          "generate:data": 9.082956239581108e-06,
          "generate:Draw 1": 0.014868040976580232,
          "generate:Draw 2": 2.516701351851225e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878914.9795861
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 6.110473734248168e-194,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 4349,\n   'Status.INTERESTING': 0},\n  'branches': 32224,\n  'since_new_branch': 52,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 1.1125369292536007e-308,\n  'timestamp': 1.338488975685457e-193,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 5200,\n   'Status.INTERESTING': 0},\n  'branches': 20556,\n  'since_new_branch': 83,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0005968068434269325,\n  'timestamp': 5.557898460975357e-193,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 6312,\n   'Status.INTERESTING': 0},\n  'branches': 22920,\n  'since_new_branch': 21788,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 125690.28855420287,\n  'timestamp': 2.1982938651298016e-192,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 6328,\n   'Status.INTERESTING': 0},\n  'branches': 18,\n  'since_new_branch': 300,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 219654.09413034737,\n  'timestamp': 2.5646463585738414e-192,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 27115,\n   'Status.INTERESTING': 0},\n  'branches': 21773,\n  'since_new_branch': 14823,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 362284.1151896386,\n  'timestamp': 2.865677364916726e-192,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 28120,\n   'Status.INTERESTING': 0},\n  'branches': 28,\n  'since_new_branch': 1_099_022_938,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 442199.32923473226,\n  'timestamp': 3.00671635228858e-192,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 1_019_892_565,\n   'Status.INTERESTING': 0},\n  'branches': 1_164_621_248,\n  'since_new_branch': 1_707_014_664,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 522171.53007440595,\n  'timestamp': 3.0245680651776695e-192,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 4.953118863152512e+37,\n   'Status.INTERESTING': 0},\n  'branches': 41,\n  'since_new_branch': 55,\n  'phase': 'Phase.FAILED'}]\nDraw 2: 6",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.009128667006734759,
          "overall:gc": 0.001378416025545448,
          "generate:data": 1.0707997716963291e-05,
          "generate:Draw 1": 0.008572750957682729,
          "generate:Draw 2": 2.7875008527189493e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878944.4990249
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 8067,\n  'since_new_branch': 107,\n  'phase': 'Phase.SHRINK'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00786016701022163,
          "overall:gc": 0.0002091660280711949,
          "generate:data": 1.129100564867258e-05,
          "generate:Draw 1": 0.002349083952140063,
          "generate:Draw 2": 2.800003858283162e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878970.286249
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 8.591515882652008e-15,\n  'timestamp': 1.1069976458631747e+308,\n  'worker_uuid': \"UUID('8e91579a-21c3-439e-90c1-91728c541241')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 5,\n   'Status.INTERESTING': 0},\n  'branches': 30,\n  'since_new_branch': 31872,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_4'\",\n  'nodeid': 'nodeid_4',\n  'elapsed_time': 172601.2738207119,\n  'timestamp': 1.1262121082668661e+308,\n  'worker_uuid': \"UUID('8e91579a-21c3-439e-90c1-91728c541241')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 22997,\n   'Status.INTERESTING': 0},\n  'branches': 11219,\n  'since_new_branch': 26958,\n  'phase': 'Phase.GENERATE'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0026880409568548203,
          "overall:gc": 0.00021454301895573735,
          "generate:data": 6.249989382922649e-06,
          "generate:Draw 1": 0.0024317490169778466,
          "generate:Draw 2": 2.300000051036477e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878919.018827
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 27660,\n  'phase': 'Phase.SHRINK'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00640387402381748,
          "overall:gc": 0.0002403761027380824,
          "generate:data": 2.4374981876462698e-05,
          "generate:Draw 1": 0.005460374930407852,
          "generate:Draw 2": 2.566596958786249e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878948.5924811
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "failed to satisfy assume() in test_linearize_decomposes_with_addition (line 181)",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_1'\",\n  'nodeid': 'nodeid_1',\n  'elapsed_time': 520731.43616555806,\n  'timestamp': 6.713330040889643e+307,\n  'worker_uuid': \"UUID('5e32734c-7f6e-41de-9960-52849e7c8158')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 21182,\n   'Status.INTERESTING': 0},\n  'branches': 96,\n  'since_new_branch': 57,\n  'phase': 'Phase.REPLAY'}]",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0001692090299911797,
          "overall:gc": 0.00010762503370642662,
          "generate:data": 1.0166026186197996e-05,
          "generate:Draw 1": 0.0019238329259678721
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 0,
              "unsatisfied": 1
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878918.006042
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 24433,\n  'since_new_branch': 0,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 65,\n  'phase': 'Phase.REPLAY'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.003457042039372027,
          "overall:gc": 0.0002940839622169733,
          "generate:data": 1.0083022061735392e-05,
          "generate:Draw 1": 0.004175749025307596,
          "generate:Draw 2": 2.9875023756176233e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878952.6693041
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_8'\",\n  'nodeid': 'nodeid_8',\n  'elapsed_time': 3.870664172878692e-98,\n  'timestamp': 5.716056487455626e+16,\n  'worker_uuid': \"UUID('8e810511-f4d9-4ef9-9cd8-35baf2d8e14e')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 112,\n   'Status.INTERESTING': 0},\n  'branches': 83,\n  'since_new_branch': 8_191_991_457_824_537_414,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_8'\",\n  'nodeid': 'nodeid_8',\n  'elapsed_time': 0.5,\n  'timestamp': 3.402823466e+38,\n  'worker_uuid': \"UUID('8e810511-f4d9-4ef9-9cd8-35baf2d8e14e')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 115,\n   'Status.INTERESTING': 0},\n  'branches': 10451,\n  'since_new_branch': 13513,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_8'\",\n  'nodeid': 'nodeid_8',\n  'elapsed_time': 130085.32245345309,\n  'timestamp': 5.841191130912417e+247,\n  'worker_uuid': \"UUID('8e810511-f4d9-4ef9-9cd8-35baf2d8e14e')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 1613,\n   'Status.INTERESTING': 0},\n  'branches': 22241,\n  'since_new_branch': 123,\n  'phase': 'Phase.SHRINK'},\n {'database_key': \"b'database_key_8'\",\n  'nodeid': 'nodeid_8',\n  'elapsed_time': 131892.7016805214,\n  'timestamp': 4.346336062617587e+248,\n  'worker_uuid': \"UUID('8e810511-f4d9-4ef9-9cd8-35baf2d8e14e')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 5242,\n   'Status.INTERESTING': 0},\n  'branches': 86,\n  'since_new_branch': 1,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_8'\",\n  'nodeid': 'nodeid_8',\n  'elapsed_time': 200310.44768540034,\n  'timestamp': 6.716191277926609e+248,\n  'worker_uuid': \"UUID('8e810511-f4d9-4ef9-9cd8-35baf2d8e14e')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 13240,\n   'Status.INTERESTING': 0},\n  'branches': 1_524_460_812,\n  'since_new_branch': 25560,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_8'\",\n  'nodeid': 'nodeid_8',\n  'elapsed_time': 215053.78453065376,\n  'timestamp': 7.83107943786164e+248,\n  'worker_uuid': \"UUID('8e810511-f4d9-4ef9-9cd8-35baf2d8e14e')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 18537,\n   'Status.INTERESTING': 0},\n  'branches': 16881,\n  'since_new_branch': 9.50271255967807e+37,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_8'\",\n  'nodeid': 'nodeid_8',\n  'elapsed_time': 383115.7329261391,\n  'timestamp': 9.679484831424284e+248,\n  'worker_uuid': \"UUID('8e810511-f4d9-4ef9-9cd8-35baf2d8e14e')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 23412,\n   'Status.INTERESTING': 0},\n  'branches': 2_994_410_416_531_798_647,\n  'since_new_branch': 20441,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_8'\",\n  'nodeid': 'nodeid_8',\n  'elapsed_time': 560408.8716091444,\n  'timestamp': 1.2895564335894364e+249,\n  'worker_uuid': \"UUID('8e810511-f4d9-4ef9-9cd8-35baf2d8e14e')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 7.038631112876752e+36,\n   'Status.INTERESTING': 0},\n  'branches': 18758,\n  'since_new_branch': 21491,\n  'phase': 'Phase.GENERATE'}]\nDraw 2: 6",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.016556875023525208,
          "overall:gc": 0.0010094980243593454,
          "generate:data": 1.1415977496653795e-05,
          "generate:Draw 1": 0.0069158769329078496,
          "generate:Draw 2": 2.5459041353315115e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878949.6252868
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 1000,\n  'since_new_branch': 101,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 404,\n  'since_new_branch': 6,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.05,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 31567,\n  'since_new_branch': 14,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 2.00001,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 8,\n   'Status.INTERESTING': 0},\n  'branches': 1_655_898_766,\n  'since_new_branch': 1.663660627575086e+38,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 2178.37575476243,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 15,\n   'Status.INTERESTING': 0},\n  'branches': 335475954,\n  'since_new_branch': 439075622,\n  'phase': 'Phase.SHRINK'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 57017.85956211049,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 1439,\n   'Status.INTERESTING': 0},\n  'branches': 2_104_430_425,\n  'since_new_branch': 31917,\n  'phase': 'Phase.SHRINK'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 309314.73202169273,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 2832,\n   'Status.INTERESTING': 0},\n  'branches': 50,\n  'since_new_branch': 93,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 459466.41913118644,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 11864,\n   'Status.INTERESTING': 0},\n  'branches': 13452,\n  'since_new_branch': 300,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 506868.5638715876,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 13426,\n   'Status.INTERESTING': 0},\n  'branches': 576844007,\n  'since_new_branch': 25662,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 642228.3541982324,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 30622,\n   'Status.INTERESTING': 0},\n  'branches': 8192,\n  'since_new_branch': 116,\n  'phase': 'Phase.FAILED'}]\nDraw 2: 4",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.025264750001952052,
          "overall:gc": 0.0009687510319054127,
          "generate:data": 7.540977094322443e-06,
          "generate:Draw 1": 0.01716054097050801,
          "generate:Draw 2": 2.6749970857053995e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878961.9866
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 9659,\n  'since_new_branch': 31400,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 2.168856898012566e-231,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 22737,\n  'since_new_branch': 21745,\n  'phase': 'Phase.REPLAY'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.006222583062481135,
          "overall:gc": 0.0003608330152928829,
          "generate:data": 3.8207974284887314e-05,
          "generate:Draw 1": 0.004344666958786547,
          "generate:Draw 2": 2.783298259600997e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878945.524832
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "failed to satisfy assume() in test_linearize_decomposes_with_addition (line 181)",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: []",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 6.520800525322556e-05,
          "overall:gc": 0.00015783304115757346,
          "generate:data": 1.0040996130555868e-05,
          "generate:Draw 1": 0.0017352919676341116
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 0,
              "unsatisfied": 1
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878951.645479
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 18,\n  'since_new_branch': 77,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 7.58474472009888e-120,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 853407024,\n  'since_new_branch': 0,\n  'phase': 'Phase.DISTILL'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.007892875059042126,
          "overall:gc": 0.0011949589825235307,
          "generate:data": 8.707982487976551e-06,
          "generate:Draw 1": 0.002332832955289632,
          "generate:Draw 2": 0.00010358303552493453
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878958.870402
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.05,\n  'timestamp': 7565451184950609.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 9508,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 231898.39976914067,\n  'timestamp': 1.1394463898192527e+308,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 5343,\n  'since_new_branch': 32351,\n  'phase': 'Phase.SHRINK'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 269793.38173911744,\n  'timestamp': 1.1856926791147843e+308,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 1138,\n   'Status.INTERESTING': 0},\n  'branches': 26325,\n  'since_new_branch': 11667,\n  'phase': 'Phase.GENERATE'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.006604916066862643,
          "overall:gc": 0.0003328339662402868,
          "generate:data": 8.000002708286047e-06,
          "generate:Draw 1": 0.006251582992263138,
          "generate:Draw 2": 2.7916976250708103e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878937.1605701
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_2'\",\n  'nodeid': 'nodeid_2',\n  'elapsed_time': 86763.18391441564,\n  'timestamp': 1.6308667855991698e+16,\n  'worker_uuid': \"UUID('749c3574-3e15-42cc-a813-30a29c980b56')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 992,\n   'Status.INTERESTING': 0},\n  'branches': 65535,\n  'since_new_branch': 14044,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_2'\",\n  'nodeid': 'nodeid_2',\n  'elapsed_time': 925825.7936790104,\n  'timestamp': 4.4597868789474536e+16,\n  'worker_uuid': \"UUID('749c3574-3e15-42cc-a813-30a29c980b56')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 28408,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 14,\n  'phase': 'Phase.SHRINK'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.002647792105562985,
          "overall:gc": 0.00016666698502376676,
          "generate:data": 8.583010639995337e-06,
          "generate:Draw 1": 0.0023244579788297415,
          "generate:Draw 2": 2.2124964743852615e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878906.735305
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "failed to satisfy assume() in test_linearize_decomposes_with_addition (line 181)",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: []",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 6.745895370841026e-05,
          "overall:gc": 0.0001709589851088822,
          "generate:data": 1.1374999303370714e-05,
          "generate:Draw 1": 0.0019561240333132446
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 0,
              "unsatisfied": 1
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878913.931678
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_9'\",\n  'nodeid': 'nodeid_9',\n  'elapsed_time': 728257.9940103607,\n  'timestamp': 3.402823466e+38,\n  'worker_uuid': \"UUID('ff7b6758-fe1c-458b-b2d5-9e91aec917c7')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 88,\n   'Status.INTERESTING': 0},\n  'branches': 28988,\n  'since_new_branch': 2_046_101_568,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_9'\",\n  'nodeid': 'nodeid_9',\n  'elapsed_time': 926368.7095256867,\n  'timestamp': 7.209887862320462e+307,\n  'worker_uuid': \"UUID('ff7b6758-fe1c-458b-b2d5-9e91aec917c7')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 9999,\n   'Status.INTERESTING': 0},\n  'branches': 93,\n  'since_new_branch': 15129,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_9'\",\n  'nodeid': 'nodeid_9',\n  'elapsed_time': 944147.474037302,\n  'timestamp': 1.2927006474352744e+308,\n  'worker_uuid': \"UUID('ff7b6758-fe1c-458b-b2d5-9e91aec917c7')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 26823,\n   'Status.INTERESTING': 0},\n  'branches': 25219,\n  'since_new_branch': 2.0026277688190272e+36,\n  'phase': 'Phase.GENERATE'}]\nDraw 2: 2",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0054804160026833415,
          "overall:gc": 0.0003799159894697368,
          "generate:data": 1.1041003745049238e-05,
          "generate:Draw 1": 0.00835233402904123,
          "generate:Draw 2": 3.0041963327676058e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878911.881593
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_3'\",\n  'nodeid': 'nodeid_3',\n  'elapsed_time': 0.0,\n  'timestamp': 0.5,\n  'worker_uuid': \"UUID('a4f04348-e0e1-4f26-b387-640f3b1c820a')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 54,\n   'Status.INTERESTING': 0},\n  'branches': 57278556,\n  'since_new_branch': 17357,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_3'\",\n  'nodeid': 'nodeid_3',\n  'elapsed_time': 2.225073858507e-311,\n  'timestamp': 1.7372744962919206e+16,\n  'worker_uuid': \"UUID('a4f04348-e0e1-4f26-b387-640f3b1c820a')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 57,\n   'Status.INTERESTING': 0},\n  'branches': 404,\n  'since_new_branch': 706,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_3'\",\n  'nodeid': 'nodeid_3',\n  'elapsed_time': 162026.8033445771,\n  'timestamp': 6.590500079183805e+16,\n  'worker_uuid': \"UUID('a4f04348-e0e1-4f26-b387-640f3b1c820a')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 404,\n   'Status.INTERESTING': 0},\n  'branches': 20263,\n  'since_new_branch': 13,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_3'\",\n  'nodeid': 'nodeid_3',\n  'elapsed_time': 260634.6014364385,\n  'timestamp': 7.1198722253351885e+115,\n  'worker_uuid': \"UUID('a4f04348-e0e1-4f26-b387-640f3b1c820a')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 5023,\n   'Status.INTERESTING': 0},\n  'branches': 587762186,\n  'since_new_branch': 95,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_3'\",\n  'nodeid': 'nodeid_3',\n  'elapsed_time': 288023.5294663303,\n  'timestamp': 1.4341278523928791e+232,\n  'worker_uuid': \"UUID('a4f04348-e0e1-4f26-b387-640f3b1c820a')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 24953433,\n   'Status.INTERESTING': 0},\n  'branches': 1024,\n  'since_new_branch': 64,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_3'\",\n  'nodeid': 'nodeid_3',\n  'elapsed_time': 393951.74400647404,\n  'timestamp': 1.6029310210752629e+232,\n  'worker_uuid': \"UUID('a4f04348-e0e1-4f26-b387-640f3b1c820a')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 7.280263897523404e+37,\n   'Status.INTERESTING': 0},\n  'branches': 32728,\n  'since_new_branch': 88,\n  'phase': 'Phase.REPLAY'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.007548665977083147,
          "overall:gc": 0.0005651240353472531,
          "generate:data": 9.417010005563498e-06,
          "generate:Draw 1": 0.023652084986679256,
          "generate:Draw 2": 3.712502075359225e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878907.791966
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 28,\n  'since_new_branch': 30139,\n  'phase': 'Phase.SHRINK'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.05,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 52,\n  'since_new_branch': 12604,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 380287.504341548,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 7805,\n  'since_new_branch': 28633,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 993238.2672473709,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 13528,\n   'Status.INTERESTING': 0},\n  'branches': 1_524_441_426,\n  'since_new_branch': 2445,\n  'phase': 'Phase.REPLAY'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0029684160253964365,
          "overall:gc": 0.00029637495754286647,
          "generate:data": 7.5830030255019665e-06,
          "generate:Draw 1": 0.003578459029085934,
          "generate:Draw 2": 2.5124987587332726e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878960.931652
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 5.470604023659321e-289,\n  'timestamp': 4.386495817316325e-116,\n  'worker_uuid': \"UUID('a0aedb35-e727-468c-b0ac-5a8b0dbf8e69')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 12,\n  'since_new_branch': 14722,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 1.204208664302252e-14,\n  'timestamp': 9508425968523626.0,\n  'worker_uuid': \"UUID('a0aedb35-e727-468c-b0ac-5a8b0dbf8e69')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 1,\n   'Status.INTERESTING': 0},\n  'branches': 4_604_587_038_175_997_556,\n  'since_new_branch': 12300,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 0.05,\n  'timestamp': 2.5134682385046945e+48,\n  'worker_uuid': \"UUID('a0aedb35-e727-468c-b0ac-5a8b0dbf8e69')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 56,\n   'Status.INTERESTING': 0},\n  'branches': 89,\n  'since_new_branch': 79,\n  'phase': 'Phase.SHRINK'},\n {'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 217417.89237848957,\n  'timestamp': 2.2754242336481915e+80,\n  'worker_uuid': \"UUID('a0aedb35-e727-468c-b0ac-5a8b0dbf8e69')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 75,\n   'Status.INTERESTING': 0},\n  'branches': 59,\n  'since_new_branch': 36,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 231615.96800211066,\n  'timestamp': 9.261498165259879e+303,\n  'worker_uuid': \"UUID('a0aedb35-e727-468c-b0ac-5a8b0dbf8e69')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 107,\n   'Status.INTERESTING': 0},\n  'branches': 53,\n  'since_new_branch': 7_295_326_184_293_386_331,\n  'phase': 'Phase.SHRINK'},\n {'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 343674.89034152526,\n  'timestamp': 1.5848003269185146e+305,\n  'worker_uuid': \"UUID('a0aedb35-e727-468c-b0ac-5a8b0dbf8e69')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 8192,\n   'Status.INTERESTING': 0},\n  'branches': 7276,\n  'since_new_branch': 30210,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 365172.003129189,\n  'timestamp': 3.764096090101828e+305,\n  'worker_uuid': \"UUID('a0aedb35-e727-468c-b0ac-5a8b0dbf8e69')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 14162,\n   'Status.INTERESTING': 0},\n  'branches': 22347,\n  'since_new_branch': 127,\n  'phase': 'Phase.SHRINK'},\n {'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 429224.96818667254,\n  'timestamp': 4.4392737713427516e+305,\n  'worker_uuid': \"UUID('a0aedb35-e727-468c-b0ac-5a8b0dbf8e69')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 19512,\n   'Status.INTERESTING': 0},\n  'branches': 17725,\n  'since_new_branch': 22119,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 489258.783541303,\n  'timestamp': 5.828324835574131e+305,\n  'worker_uuid': \"UUID('a0aedb35-e727-468c-b0ac-5a8b0dbf8e69')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 23153,\n   'Status.INTERESTING': 0},\n  'branches': 49,\n  'since_new_branch': 1.0311384932641854e+38,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 498772.92208203307,\n  'timestamp': 6.133130959965387e+305,\n  'worker_uuid': \"UUID('a0aedb35-e727-468c-b0ac-5a8b0dbf8e69')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 29022,\n   'Status.INTERESTING': 0},\n  'branches': 25354,\n  'since_new_branch': 13,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_5'\",\n  'nodeid': 'nodeid_5',\n  'elapsed_time': 666272.7957617309,\n  'timestamp': 6.202287660206589e+305,\n  'worker_uuid': \"UUID('a0aedb35-e727-468c-b0ac-5a8b0dbf8e69')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 1_290_376_690,\n   'Status.INTERESTING': 0},\n  'branches': 1.4207811477381108e+38,\n  'since_new_branch': 90,\n  'phase': 'Phase.SHRINK'}]\nDraw 2: 3",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.019018916005734354,
          "overall:gc": 0.0011126259923912585,
          "generate:data": 1.0457995813339949e-05,
          "generate:Draw 1": 0.01332512404769659,
          "generate:Draw 2": 4.091695882380009e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878915.998118
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 34,\n  'phase': 'Phase.DISTILL'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.004587958042975515,
          "overall:gc": 0.00044462503865361214,
          "generate:data": 7.790978997945786e-06,
          "generate:Draw 1": 0.0022017089650034904,
          "generate:Draw 2": 2.483295975252986e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878950.620398
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.DISTILL'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.004530416976194829,
          "overall:gc": 0.00028799992287531495,
          "generate:data": 9.66701190918684e-06,
          "generate:Draw 1": 0.002200292074121535,
          "generate:Draw 2": 2.5540997739881277e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878969.2380621
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 9.158286610343e+97,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 18373,\n  'phase': 'Phase.FAILED'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 281979.4600729205,\n  'timestamp': 4.4377427518197953e+307,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 60,\n  'since_new_branch': 122,\n  'phase': 'Phase.REPLAY'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 816368.0231733054,\n  'timestamp': 5.340480126415671e+307,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 29636,\n   'Status.INTERESTING': 0},\n  'branches': 404,\n  'since_new_branch': 15790,\n  'phase': 'Phase.REPLAY'}]\nDraw 2: 2",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0028050830587744713,
          "overall:gc": 0.0003604170633479953,
          "generate:data": 1.008401159197092e-05,
          "generate:Draw 1": 0.003438166924752295,
          "generate:Draw 2": 2.8082984499633312e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878962.984604
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 9999,\n  'since_new_branch': 11865,\n  'phase': 'Phase.FAILED'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00482604093849659,
          "overall:gc": 0.0011711660772562027,
          "generate:data": 1.0416028089821339e-05,
          "generate:Draw 1": 0.016388042946346104,
          "generate:Draw 2": 3.337505040690303e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878966.1673532
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.004741250071674585,
          "overall:gc": 0.00028691597981378436,
          "generate:data": 1.1083960998803377e-05,
          "generate:Draw 1": 0.002338249993044883,
          "generate:Draw 2": 2.7916976250708103e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878967.1781409
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.004793206928297877,
          "overall:gc": 0.0003622089861892164,
          "generate:data": 2.5457993615418673e-05,
          "generate:Draw 1": 0.004597458057105541,
          "generate:Draw 2": 3.633397864177823e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878971.317282
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 27,\n  'since_new_branch': 44,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 120,\n   'Status.INTERESTING': 0},\n  'branches': 5,\n  'since_new_branch': 13149,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 28195.86471273051,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 398,\n   'Status.INTERESTING': 0},\n  'branches': 85,\n  'since_new_branch': 34,\n  'phase': 'Phase.FAILED'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.008619084022939205,
          "overall:gc": 0.00029091699980199337,
          "generate:data": 1.0584015399217606e-05,
          "generate:Draw 1": 0.0038494159816764295,
          "generate:Draw 2": 2.4416018277406693e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878935.127336
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 5.1293457251445804e-282,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 78,\n  'since_new_branch': 28,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 1.040362825504742e-144,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 32052,\n  'since_new_branch': 42,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 95661.7804395539,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 116,\n   'Status.INTERESTING': 0},\n  'branches': 5_373_637_826_897_050_346,\n  'since_new_branch': 19,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 135168.637420958,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 4467,\n   'Status.INTERESTING': 0},\n  'branches': 7495,\n  'since_new_branch': 634,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 245596.69566776915,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 786951990,\n   'Status.INTERESTING': 0},\n  'branches': 26,\n  'since_new_branch': 11413,\n  'phase': 'Phase.DISTILL'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 915080.2271090783,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 2_042_469_700_514_888_409,\n   'Status.INTERESTING': 0},\n  'branches': 3_901_023_028_538_791_641,\n  'since_new_branch': 1_712_696_681,\n  'phase': 'Phase.FAILED'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.018344415933825076,
          "overall:gc": 0.0005409159930422902,
          "generate:data": 7.292022928595543e-06,
          "generate:Draw 1": 0.00574854202568531,
          "generate:Draw 2": 2.5292043574154377e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878936.158032
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 22740,\n  'since_new_branch': 30712,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 471567.99665349367,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 11318,\n  'since_new_branch': 0,\n  'phase': 'Phase.FAILED'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.005138624983374029,
          "overall:gc": 0.002229624951723963,
          "generate:data": 3.5541015677154064e-05,
          "generate:Draw 1": 0.019612584030255675,
          "generate:Draw 2": 5.120801506564021e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878968.23502
      }
    ],
    "corpus": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_linearize_decomposes_with_addition(\n    data=data(...),\n)\nDraw 1: [{'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'},\n {'database_key': \"b'database_key_0'\",\n  'nodeid': 'nodeid_0',\n  'elapsed_time': 0.0,\n  'timestamp': 0.0,\n  'worker_uuid': \"UUID('e3e70682-c209-4cac-a29f-6fbed82c07cd')\",\n  'status_counts': {'Status.OVERRUN': 0,\n   'Status.INVALID': 0,\n   'Status.VALID': 0,\n   'Status.INTERESTING': 0},\n  'branches': 0,\n  'since_new_branch': 0,\n  'phase': 'Phase.GENERATE'}]\nDraw 2: 1",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0045160420704633,
          "overall:gc": 0.0002443749690428376,
          "generate:data": 6.791960913687944e-06,
          "generate:Draw 1": 0.0020846250117756426,
          "generate:Draw 2": 2.424995182082057e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_linearize_decomposes_with_addition (line 181)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46230,
          "imported_at": 1747878904.056098
        },
        "property": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "run_start": 1747878933.373837
      }
    ]
  },
  "tests/test_provider.py::test_drawing_prefix_exactly": {
    "rolling": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0009bd87\\U0009be10\\U0009bd9b\\U000a5d1d\\U0009be05\\U0009bd81\\U000cd2c6',\n      constraints={'intervals': IntervalSet(\n           build_intervals([638292, 846394, 982447]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U00087826\\U00068815\\U00060870\\U000910a5\\U00060901\\U00060834\\U00060844\\U00073706\\U00060875\\U0006085a\\U00062de0\\U00060862\\U000608ce\\U00060838\\U000608b6\\U0006086d\\U000608fb\\U00060898\\U00060821\\U000691b5\\U00060876\\U000608cb\\U000608c4\\U000608e8\\U00060832\\U0006087a\\U00060833\\U00082aa7\\U00060867\\U000860bf\\U000608ec\\U000608f4\\U00060878\\U0006087a\\U0006083a\\U00068ee9\\U00063b61\\U000608b6\\U000608a4\\U000608b4\\U000608d5\\U00060867\\U00060859\\U00060850\\U0008f417\\U0006f7e5\\U00060864\\U00062a3a\\U00060832\\U000608a1\\U000608d4\\U0007133d\\U00074e67\\U0006ebe8\\U00060853\\U00073da8\\U0006fa6b\\U000608a4\\U000608e0\\U000608fc\\U0006084b\\U000699f9\\U00060902\\U00060860\\U000608d0\\U000608fb\\U00060897\\U000608de\\U000608b3\\U000608fb\\U00060895\\U00060881\\U000608a1\\U000608d0\\U00060858\\U0006088c\\U000608ed\\U0006089f\\U000608ea\\U000608c0\\U000608a2\\U000608ca\\U00060839\\U000872a7\\U000608cf\\U0006082b\\U000608fa\\U000608f6\\U000608d2\\U000608fe\\U000608aa\\U00071f27\\U000608e3\\U00089959\\U000608dd\\U00060897\\U000818a4\\U00060885\\U0006a80c\\U00060917\\U000608bc\\U000608e3\\U00060878\\U000608fd\\U00060908\\U000608ac\\U00060917\\U00060912\\U0008de92\\U000608ca\\U000608f8\\U00060834\\U00060897\\U000608a7\\U0006086f\\U0006083f\\U000608cb\\U0007793e\\U0006087b\\U000653f0\\U000608be',\n      constraints={'intervals': IntervalSet(\n           build_intervals([395288, 601839, 855512]),\n       ), 'min_size': 50, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=6.430302397329667e+307,\n      constraints={'min_value': 2.2977568508831188e+16,\n       'max_value': 1.4130967583873843e+308,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 2.3823487456653346e+307},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0004e16f\\U0004e1f8\\U0004e183\\U00061fce\\U0004e1ed\\U0004e169\\U00058a58\\U0004e13d\\U0004e181\\U0004e18e',\n      constraints={'intervals': IntervalSet(\n           build_intervals([319804, 638292, 846394]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U00087826\\U00068815\\U00060870\\U000910a5\\U00060901\\U00060834\\U00060844\\U00073706\\U00060875\\U0006085a\\U00062de0\\U00060862\\U000608ce\\U00060838\\U000608b6\\U0006086d\\U000608fb\\U00060898\\U00060821\\U000691b5\\U00060876\\U000608cb\\U000608c4\\U000608e8\\U00060832\\U0006087a\\U00060833\\U00082aa7\\U00060867\\U000860bf\\U000608ec\\U000608f4\\U00060878\\U0006087a\\U0006083a\\U00068ee9\\U00063b61\\U000608b6\\U000608a4\\U000608b4\\U000608d5\\U00060867\\U00060859\\U00060850\\U0008f417\\U0006f7e5\\U00060864\\U00062a3a\\U00060832\\U000608a1\\U000608d4\\U0007133d\\U00074e67\\U0006ebe8\\U00060853\\U00073da8\\U0006fa6b\\U000608a4\\U000608e0\\U000608fc\\U0006084b\\U000699f9\\U00060902\\U00060860\\U000608d0\\U000608fb\\U00060897\\U000608de\\U000608b3\\U000608fb\\U00060895\\U00060881\\U000608a1\\U000608d0\\U00060858\\U0006088c\\U000608ed\\U0006089f\\U000608ea\\U000608c0\\U000608a2\\U000608ca\\U00060839\\U000872a7\\U000608cf\\U0006082b\\U000608fa\\U000608f6\\U000608d2\\U000608fe\\U000608aa\\U00071f27\\U000608e3\\U00089959\\U000608dd\\U00060897\\U000818a4\\U00060885\\U0006a80c\\U00060917\\U000608bc\\U000608e3\\U00060878\\U000608fd\\U00060908\\U000608ac\\U00060917\\U00060912\\U0008de92\\U000608ca\\U000608f8\\U00060834\\U00060897\\U000608a7\\U0006086f\\U0006083f\\U000608cb\\U0007793e\\U0006087b\\U000653f0\\U000608be',\n      constraints={'intervals': IntervalSet(\n           build_intervals([395288, 601839, 770127]),\n       ), 'min_size': 50, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.2704315503072664e+308,\n      constraints={'min_value': 0.5,\n       'max_value': 1.2824242358622787e+308,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 1.2106092737104726e+308},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U000535d7\\U00078a67\\U0005363c\\U00053681\\U000535f9\\U000536a1',\n      constraints={'intervals': IntervalSet(build_intervals([341456, 641232])),\n       'min_size': 0,\n       'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u20dc\u20a9\\u202a\u2086\u20ec\u201f\u201f\u20af\u2083\u2070\ud835\ude70\u20aa\u204d\ud820\ude7b\\U00108700\u20bc\u20e8\\U000f7c00\\U0008249b\u20b6\u20b8\u2018\\U000160a2\u20b3\u2055\u2046\u2040\u2018\u2030\u205d\u20b2\\U00074b53\u2071\u20bd\\u205f\u2091\\U000fb7ab\\U000140c0\u2050\\u2067\u2044',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [8192,\n                9999,\n                43645,\n                65535,\n                75735,\n                152095,\n                248471,\n                259043,\n                296671,\n                343203,\n                457805,\n                537522,\n                559263,\n                582238,\n                606482,\n                606794,\n                632166,\n                634061,\n                643430,\n                649975,\n                672224,\n                682431,\n                717583,\n                737912,\n                752779,\n                760152,\n                763336,\n                790736,\n                807798,\n                885579,\n                899169,\n                1114110,\n                1114111],\n           ),\n       ),\n       'min_size': 0,\n       'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-122,\n      constraints={'min_value': None,\n       'max_value': None,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 1.002233256377847e-194},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 3.276464878515296e-192},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=14312,\n      constraints={'min_value': -66,\n       'max_value': 18647,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'\\n\\xb3\\x03\\xc41\\x98l\\xc6\\x93\\x94T\\xd1',\n      constraints={'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=inf,\n      constraints={'min_value': inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 1.3629323767991798e+308},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-164_296_497_446_961_579_443_452_795_786_745_766_620,\n      constraints={'min_value': -164_296_497_446_961_579_443_452_795_786_745_805_238,\n       'max_value': -18159,\n       'shrink_towards': 0,\n       'weights': {-164_296_497_446_961_579_434_395_873_224_827_252_845: 0.14120964468705566,\n        -164_296_497_446_961_579_443_452_795_786_745_759_482: 0.1888337308099332,\n        -164_296_497_446_961_579_443_452_795_786_745_781_869: 0.16995662450301116}},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=6476,\n      constraints={'min_value': 300,\n       'max_value': None,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.11791362744490044},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from integers(0, 1114111).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0017360830097459257,
          "overall:gc": 0.0,
          "generate:nodes": 0.03119183605303988
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878949.0920808
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-2_016_060_679_132_078_380,\n      constraints={'min_value': -2_016_060_679_132_078_531,\n       'max_value': 3557,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=6.500982933818213e+307,\n      constraints={'min_value': 2.5676879978838407e+155,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 5.747576749187181e+307},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-25,\n      constraints={'min_value': -65,\n       'max_value': -21,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.5,\n      constraints={'min_value': 0.5,\n       'max_value': 2.489982469334116e+307,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 2.3535369705012716e-292},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U00101a15\\U000c3344\\U000cd22e\\U000c3380\\U000c333f\\U000c3356\\U000fe569\\U000ddf2b\\U000f8138\\U000c336c\\U000c3373\\U000c3305\\U000c32bb\\U000c3356\\U000c3372\\U000c33a7\\U000c3325\\U000c3328\\U000cc7e1\\U000c33a1\\U000c336c\\U000c33b2\\U000c32d9\\U000c336f\\U000c33a3\\U000e1118\\U000c32f9\\U000c3344\\U000c3330\\U000c337a\\U000c3349\\U0010ba80\\U000c33a4\\U000c33ae\\U000d1869\\U000c339a\\U000c3358\\U000c338e\\U000c8ec0\\U000c331d\\U000c32e3\\U000c3377\\U000c32f4\\U000defcc\\U000c3326\\U000c3306\\U000c330f\\U000edfee\\U000df4c7\\U000c3360\\U000dd0e2\\U000e84de\\U000c32d4\\U000c32d6\\U000c339f\\U000c3385\\U000c3326\\U000c32da\\U000c32cd\\U000d4b25\\U000c32cd\\U000c32bf\\U000c32d1\\U000c32cc\\U000c32e4\\U000c3335\\U000c32cb\\U000c3334\\U00102783\\U000c32c4\\U000c333f\\U000c3370\\U000c3361\\U000c3300\\U000c3375\\U000c3341\\U000c32f3\\U000d968a\\U000c32ff',\n      constraints={'intervals': IntervalSet(\n           build_intervals([799411, 1106507])),\n       'min_size': 29,\n       'max_size': 129},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.1196457601839936e+307,\n      constraints={'min_value': 5.747687936468584e+61,\n       'max_value': 2.0713931964575144e+307,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 2.7044791375612853e-52},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string', value='', constraints={'intervals': IntervalSet(\n           build_intervals(\n               [198655,\n                272540,\n                280097,\n                285553,\n                354024,\n                515966,\n                532717,\n                609180,\n                838779,\n                841619,\n                911139,\n                922059,\n                1038299,\n                1049425],\n           ),\n       ),\n       'min_size': 0,\n       'max_size': 10_000_000_000}, was_forced=True, index=None),\n     ChoiceNode(type='integer',\n      value=61,\n      constraints={'min_value': None,\n       'max_value': 32357,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.3681423092918004e+308,\n      constraints={'min_value': -5.865335874632278e-215,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 4.470744003349329e+195},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=0.041689851225141496,\n      constraints={'min_value': -1.1125369292536007e-308,\n       'max_value': 0.05,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 0.0208740594068162},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b':\\x8e',\n      constraints={'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.7233809229817273},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.9083875203487664},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.5788984097585331},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 6.648771716848857e+307},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.0339000581568494e+308,\n      constraints={'min_value': 1.175494351e-38,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 4.729579458515849e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7580,\n      constraints={'min_value': None,\n       'max_value': 15773,\n       'shrink_towards': -32326,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U000e73cf\u01dc\u01df',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [404,\n                12425,\n                52933,\n                121658,\n                145574,\n                164226,\n                267575,\n                328128,\n                335315,\n                361308,\n                381837,\n                392811,\n                393656,\n                394073,\n                395879,\n                462165,\n                477394,\n                482018,\n                495339,\n                523369,\n                525952,\n                528067,\n                539509,\n                620931,\n                689839,\n                732320,\n                789644,\n                811800,\n                922545,\n                954458,\n                1005432,\n                1036605,\n                1048053,\n                1081450,\n                1086211],\n           ),\n       ),\n       'min_size': 0,\n       'max_size': 100},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string', value='', constraints={'intervals': IntervalSet(\n           build_intervals(\n               [0, 9999, 93591, 204946, 226828, 228229, 691285, 847002],\n           ),\n       ),\n       'min_size': 0,\n       'max_size': 10_000_000_000}, was_forced=True, index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0013847090303897858,
          "overall:gc": 0.0,
          "generate:nodes": 0.03813387709669769
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878963.554137
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 5.3750001825392246e-05,
          "overall:gc": 0.0,
          "generate:nodes": 4.479201743379235e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878942.3613682
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='integer',\n      value=-19229,\n      constraints={'min_value': None,\n       'max_value': -22,\n       'shrink_towards': -15229,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'+\\xd4\\xbc\\xd84\\x87\\xb8\\xfc\\x9bR\\xd3\\xe6s\\x88+\\x05-',\n      constraints={'min_size': 17, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'',\n      constraints={'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 6.08628792377162e+307},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.7127046923058715e+308,\n      constraints={'min_value': 4.244304282383506e+16,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 1.471421540448663e+308},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=5.355780576703554e+16,\n      constraints={'min_value': 0.05,\n       'max_value': 5.385854355733799e+16,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 1.7351236706447936e+16},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.006604375026654452,
          "overall:gc": 0.0,
          "generate:nodes": 0.00902058300562203
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878915.7827961
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0009bd87\\U0009be10\\U0009bd9b\\U000a5d1d\\U0009be05\\U0009bd81\\U000a1262\\U0009bd55\\U0009bd99\\U0009bda6',\n      constraints={'intervals': IntervalSet(\n           build_intervals([638292, 783043, 846394]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U00087826\\U00068815\\U00060870\\U000910a5\\U00060901\\U00060834\\U00060844\\U00073706\\U00060875\\U0006085a\\U00062de0\\U00060862\\U000608ce\\U00060838\\U000608b6\\U0006086d\\U000608fb\\U00060898\\U00060821\\U000691b5\\U00060876\\U000608cb\\U000608c4\\U000608e8\\U00060832\\U0006087a\\U00060833\\U00082aa7\\U00060867\\U000860bf\\U000608ec\\U000608f4\\U00060878\\U0006087a\\U0006083a\\U00068ee9\\U00063b61\\U000608b6\\U000608a4\\U000608b4\\U000608d5\\U00060867\\U00060859\\U00060850\\U0008f417\\U0006f7e5\\U00060864\\U00062a3a\\U00060832\\U000608a1\\U000608d4\\U0007133d\\U00074e67\\U0006ebe8\\U00060853\\U00073da8\\U0006fa6b\\U000608a4\\U000608e0\\U000608fc\\U0006084b\\U000699f9\\U00060902\\U00060860\\U000608d0\\U000608fb\\U00060897\\U000608de\\U000608b3\\U000608fb\\U00060895\\U00060881\\U000608a1\\U000608d0\\U00060858\\U0006088c\\U000608ed\\U0006089f\\U000608ea\\U000608c0\\U000608a2\\U000608ca\\U00060839\\U000872a7\\U000608cf\\U0006082b\\U000608fa\\U000608f6\\U000608d2\\U000608fe\\U000608aa\\U00071f27\\U000608e3\\U00089959\\U000608dd\\U00060897\\U000818a4\\U00060885\\U0006a80c\\U00060917\\U000608bc\\U000608e3\\U00060878\\U000608fd\\U00060908\\U000608ac\\U00060917\\U00060912\\U0008de92\\U000608ca\\U000608f8\\U00060834\\U00060897\\U000608a7\\U0006086f\\U0006083f\\U000608cb\\U0007793e\\U0006087b\\U000653f0\\U000608be',\n      constraints={'intervals': IntervalSet(\n           build_intervals([395288, 601839, 777525]),\n       ), 'min_size': 50, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0006d2df\\U0006d368\\U0006d2f3\\U00077275\\U0006d35d\\U0006d2d9\\U000727ba\\U0006d2ad\\U0006d2f1\\U0006d2fe',\n      constraints={'intervals': IntervalSet(\n           build_intervals([447148, 638292, 846394]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'\\xe9\\xc6\\t}\\x01\\x85\\xfe\\xa9Q\\xd52u\\x7f\\xda\\x8d\\xc1\\xbd]\\x9b&\\x8b\\xf2\\xc1\\xb7B\\x86wf\\xe4\\xe5\\xb98\\xf0\\x83&\\x87\\x89=l\\xb4\\x1e\\x1aw%\\xfd\\xb5\\xb6\\xa6\\x8c\\xecC\\xe1N\\xce}\\x8e\\xd9\\xdf\\x038\\xed\\xd4\\x86b\\x9e\\xffY\\x1a\\xebZ\\xb1\\x97\\xf9\\xb6`ES\\x83\\x7f\\x02\\xd18tzpC\\x13',\n      constraints={'min_size': 31, 'max_size': 131},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='',\n      constraints={'intervals': IntervalSet(\n           build_intervals([348122, 857657, 1109844])),\n       'min_size': 0,\n       'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.13036138185235083},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.5},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0004d733\\U0004d76a\\U0004d767\\U0004d761\\U0004d73a\\U0004d710\\U0004d74b\\U0004d6a4\\U0004d6cc\\U000a90a9\\U0004d74c\\U0004d765\\U0004d70b\\U0004d6dd\\U0004d736\\U000a24db\\U0004d766\\U0006a3e0\\U00057b96\\U0004d741\\U0004d722\\U0004d6f8\\U0004d709',\n      constraints={'intervals': IntervalSet(\n           build_intervals([317050, 920475, 1047777]),\n       ), 'min_size': 3, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0010087499977089465,
          "overall:gc": 0.0,
          "generate:nodes": 0.023647959111258388
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878945.752691
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 4.654098302125931e-05,
          "overall:gc": 0.0,
          "generate:nodes": 3.50000336766243e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878917.994224
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='integer',\n      value=9999,\n      constraints={'min_value': -14,\n       'max_value': 20645,\n       'shrink_towards': 0,\n       'weights': {20645: 0.3333333333333333}},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'',\n      constraints={'min_size': 0, 'max_size': 100},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u279c\u276e\u27b3\u2805\u2733\u27ad\u2729\u27e9\u279e\u278c\u9ac9\u27a0\u2730\u274e\u278b\u27b2\\U0008b71e\u27d8\u2747\u27c9\u274e\\ue710\\U00070cdd\\U0007cc3a\u2776\u27d5\u2801\u27f7\u2732\u27c8\u2716\u27b0\u2762\u2806\\U000a3e6d\u279e\u2794\u2805\u27b1\u2745\u27b2\u2767\u27ea\u27cb\u2720\u2715\\U0006ae40\\U00011883\\U000a4d36\u2714\u27cd\u27e2\\U0001a0dc\u277a\u2748\\U000e84b6\u271e\u2717\u27a3\u2750\\U00079cb0\u2776\u2750\\U0008c13e\u27fc\u2787\\U0001b784\u2790\u2713\u279f\u2724\u271c\\U000462f2\u27b8\u2788\\U0001cec2\u2736\u2775\u27a0\u27ae\u27d0\u27db\u27f0\u271f\\U0007275f\\U0007e9e5\u2754\u275a\u273d\u273f\u27d2\\U00080cab\u27ae\u27ec\u2787\ud838\udc26\u2716\u2772\\U00067c06\u27ca\u678c\u279e\u27b7\u271d\\U000ee6b1\u27a2\u27b1\\U00089a93\u27c2\u457f\u273c\u2737\u276a\\U0006fa91\\U0010af97\u27a6\u270f\u272f\u27b2\\U0008780c\u2763\u2763\u2809\\U000a7d9d\\U0008e976\u27af\u2766\\U000abfd1',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [9999,\n                76663,\n                100721,\n                126589,\n                244386,\n                250406,\n                287337,\n                315752,\n                422796,\n                604667,\n                664445,\n                719502,\n                759150,\n                770929,\n                797583,\n                798747,\n                939692,\n                978980,\n                1084772,\n                1101263,\n                1114110],\n           ),\n       ),\n       'min_size': 28,\n       'max_size': 128},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'',\n      constraints={'min_size': 0, 'max_size': 100},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=31,\n      constraints={'min_value': None,\n       'max_value': 65535,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'1\\xc9K\\x9b\\xa8\\xeb\\xee\\xbd\\xdb\\xa0\\xde\\xb1\\xf3\\x14s\\xa8\\x88\\xd5\\x9bE\\x07\\xd8\\xd6\\x92rZ\\x9as*Mb/\\xf8R\\xbe\\xf4\\xbc\\x94\\x04\\x11T<\\xad',\n      constraints={'min_size': 39, 'max_size': 139},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'H',\n      constraints={'min_size': 0, 'max_size': 100},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'4w\\r=\\xb5\\xf1\\x95\\x8b\\xf7\\xebQ\\x8c\\xa3\\x85}\\x1c\\x8f\\xce\\xef\\xfd\\xbb<\\x0f\\xbc%p\\xb3>\\xedt\\xabZ\\x94ES\\xfc\\t\\xa0>\\x9e\\x92Q\\xfe\\xd6q\\xcb\\x95,O\\xce\\xd3\\x01\\xc5&\\xebv\\xb8\\x8b\\x00\\xe1\\x9e\\xed\\x82\\x07 \\n',\n      constraints={'min_size': 29, 'max_size': 129},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.7976931348623157e+308,\n      constraints={'min_value': 8.720651996728141e+204,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 1.6769013417207944e+16},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0007113750325515866,
          "overall:gc": 0.0,
          "generate:nodes": 0.025035457976628095
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878925.786997
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0009bd87\\U0009be10\\U0009bd9b\\U000a5d1d\\U0009be05\\U0009bd81\\U000cd2c6',\n      constraints={'intervals': IntervalSet(\n           build_intervals([638292, 846394, 896654]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U00055f01\\U0004f9eb\\U0004fa04\\U0005d166\\U0004fa7d\\U0004f9c8\\U0004f9d8\\U000591a3\\U0004fa09\\U0004f9ee\\U00050d10\\U0004f9f6\\U0004fa62\\U0004f9cc\\U0004fa4a\\U0004fa01\\U0004fa8f\\U0004fa2c\\U0004f9b5\\U00053efa\\U0004fa0a\\U0004fa5f\\U0004fa58\\U0004fa7c\\U0004f9c6\\U0004fa0e\\U0004f9c7\\U0005ad46\\U0004fa12\\U000591e6\\U0004fa88\\U0004fa0c\\U0004fa0e\\U0004f9ce\\U00053d94\\U000513d0\\U0004fa4a\\U0004fa38\\U0004fa48\\U0004fa69\\U0004f9fb\\U0004f9ed\\U0004f9e4\\U000536ae\\U0004fa51\\U0004f9c7\\U0004f9c6\\U0004fa35\\U0004fa23\\U0004fa82\\U0004fa41\\U0004faaa\\U0004f9e7',\n      constraints={'intervals': IntervalSet(\n           build_intervals([326060, 395288, 601839]),\n       ), 'min_size': 50, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=6.430302397329667e+307,\n      constraints={'min_value': 2.2977568508831188e+16,\n       'max_value': 1.4130967583873843e+308,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 2.3823487456653346e+307},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.7276314820986799},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': 0.0,\n       'max_value': 0.0,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 5e-324},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0009bd87\\U0009be10\\U0009bd9b\\U000a5d1d\\U0009be05\\U0009bd81\\U000cd2c6',\n      constraints={'intervals': IntervalSet(\n           build_intervals([638292, 846394, 1002246]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U00052465\\U00059769\\U00052429\\U0005247b\\U00054e34\\U0005242c\\U000524da\\U00052465\\U0005247d\\U000524b7\\U000524dd\\U000524da\\U0005c500\\U00052484\\U00056c81\\U0005247c\\U00052429\\U0005240c\\U0005c1af\\U0005abb3\\U000524bb\\U000524ba\\U00052435\\U00052444\\U00052431\\U0005241d\\U00052486\\U0005241b\\U00052445\\U000524b4\\U0005247f\\U00052413\\U0005247c\\U0005fc98\\U000524ae\\U0005241b\\U000524c0\\U0005241e\\U00052472\\U000524ed\\U000524d2\\U000524ba\\U0005249b\\U000524dc\\U00052422\\U0005c20e\\U000524dd\\U0005c175\\U000524bd\\U00052464\\U00052436\\U000524c0\\U0005248b\\U000524e0',\n      constraints={'intervals': IntervalSet(\n           build_intervals([336901, 395288, 601839]),\n       ), 'min_size': 21, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=11831,\n      constraints={'min_value': -6_628_746_386_105_597_935,\n       'max_value': None,\n       'shrink_towards': 14121,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u456e\u455f\u4552\u44ed\u451e\\U000a6682\\U0003d716\u4573\u44aa\u4557\u4514\\U000a0759\u456c\u4506',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [17578,\n                30900,\n                136476,\n                139264,\n                146506,\n                420626,\n                500076,\n                510052,\n                605855,\n                634052,\n                638116,\n                786154,\n                813099,\n                923112,\n                984621,\n                992242,\n                996132],\n           ),\n       ),\n       'min_size': 0,\n       'max_size': 100},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.001218459045048803,
          "overall:gc": 0.0,
          "generate:nodes": 0.04339883610373363
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878941.3439949
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='integer',\n      value=77,\n      constraints={'min_value': 47,\n       'max_value': 77,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=69,\n      constraints={'min_value': -30202,\n       'max_value': None,\n       'shrink_towards': -20998,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=2_074_395_094_222_149_188,\n      constraints={'min_value': 12451,\n       'max_value': 3_484_757_949_681_440_506,\n       'shrink_towards': 0,\n       'weights': {71591: 0.05561026920060655,\n        33582: 0.04879781067861026,\n        54828: 0.009392060276131355,\n        70111: 0.012251956737884982,\n        46217: 0.029397841285689612,\n        1_933_422_471_426_460_295: 0.024838966384250306,\n        55059: 0.05132006413416255,\n        12607: 0.05999473821678257}},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0009eb14\\U00099ecb\\U00099f27\\U0009d223\\U00099f1c\\U00099eac\\U00099e98\\U000a4f34\\U00099f21\\U00099ec9\\U00099ee9\\U000a22d7\\U00099f82',\n      constraints={'intervals': IntervalSet(\n           build_intervals([630406, 697886, 965080]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.3945707019615675},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.1512705996258912e+16,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 1.1036707864553754e-302},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.1016662046197663e+308,\n      constraints={'min_value': -2.5818701137835824e+16,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 1.007898753955637e+308},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\x7f\\x83U\\x9c\u00cc\\x1e\u00a2\\x86\\x0e\\U000f9885\\x06\\U0001ba0a\\U0008fd9b\\U0004fe1b\u00c4\u00e1*!\u00bb\ud847\udf5b\u00fadp\\x91&\\x8f\\U000a2fff+\\x04\u00f9*\u00e7R\\x89\\U00105c13:\u00f2a\\x84\\U0003af9b\\x91\\x81f\\x88\u00aa\u00bd\\t\u00bc\u00c7\u00a1@\u00f1\ud850\ude79\ud876\udfa4\\x1a$\u00da,\\x0f\u00b5',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [1,\n                25963,\n                65535,\n                356374,\n                392387,\n                400220,\n                560153,\n                734061,\n                741280,\n                795730,\n                877070,\n                1038953,\n                1047638,\n                1091822,\n                1114110],\n           ),\n       ),\n       'min_size': 25,\n       'max_size': 125},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': -1.379821850038964e+16,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 1.9775172297763816e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'',\n      constraints={'min_size': 0, 'max_size': 100},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0007298749987967312,
          "overall:gc": 0.0,
          "generate:nodes": 0.015191207930911332
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878934.6652641
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.393583540363914e-119},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=9007199254740992.0,\n      constraints={'min_value': 0.05,\n       'max_value': 5.724583313041514e+307,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 1.471990562734726e-299},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\uaa2b\uaa0e',\n      constraints={'intervals': IntervalSet(\n           build_intervals([43356, 98081, 244695, 381154, 403419, 936350]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'us\\x8c\\x0e\\x19:\\x80\\x7f\\xf4L\\x90\\xea\\x84\\x14\\xca<s\\x81Fm\\xd6\\xaa*\\xe9\\xe3N\\xe2\\xba\\x8c\\xe1\\x84Q\\x10\\x85,\\xa0\\xc5\\x02\\xbaV\\x9f3#\\x99\\xb9.\\xfdg\\xdf\\xa9r\\\\\\n\\x06c\\x1f\\xea7\\x86\\xd1\\xaaD\\x96{\\xc8\\x13\\xc7',\n      constraints={'min_size': 50, 'max_size': 150},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00031849998049438,
          "overall:gc": 0.0,
          "generate:nodes": 0.004642960091587156
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878952.407847
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='integer',\n      value=-9753,\n      constraints={'min_value': None,\n       'max_value': None,\n       'shrink_towards': 2,\n       'weights': None},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011587503831833601,
          "overall:gc": 0.0,
          "generate:nodes": 0.0011443339753895998
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878944.565959
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U000824d6\\U0008255f\\U000824ea\\U00087507\\U00082554\\U000824d0\\U0009afdc',\n      constraints={'intervals': IntervalSet(\n           build_intervals([533667, 638292, 846394]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=-4.142902638656703e+16,\n      constraints={'min_value': -inf,\n       'max_value': 2.6607611966729707e+194,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 7129063383441748.0},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00044412503484636545,
          "overall:gc": 0.0,
          "generate:nodes": 0.0079933330998756
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878931.319982
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='bytes',\n      value=b'',\n      constraints={'min_size': 0, 'max_size': 3},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0004aef6\\U000431a4\ud880\udfd2',\n      constraints={'intervals': IntervalSet(\n           build_intervals([197441, 307641, 865164]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'\\xa7',\n      constraints={'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-29162,\n      constraints={'min_value': None,\n       'max_value': -2,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 1.3609654047237476e+308},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 9.93842210255076e+306},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string', value='', constraints={'intervals': IntervalSet(\n           build_intervals([118022, 797773, 815338, 901301]),\n       ),\n       'min_size': 0,\n       'max_size': 10_000_000_000}, was_forced=False, index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0005032499902881682,
          "overall:gc": 0.0,
          "generate:nodes": 0.026518459955696017
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878940.240559
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 6.402765120186069e-109},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00026004196843132377,
          "overall:gc": 0.0,
          "generate:nodes": 0.002688541018869728
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878921.356212
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0005ce4d\\U0005ced6\\U0005ce61\\U00066de3\\U0005cecb\\U0005ce47\\U0008e38c',\n      constraints={'intervals': IntervalSet(\n           build_intervals([380442, 638292, 846394]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0005a898\\U0001c875\uc9d3\\U00042565\uca4c\uc997\uc9a7\\U00032657\uc9d8\uc9bd\ud805\udc0b\uc9c5\uca31\uc99b\uca19\uc9d0\uca5e\uc9fb\uc984\\U0001dbb6\uc9d9\uca2e\uca27\uca4b\uc995\uc9dd\uc996\\U00050d99\uc9ca\\U000579ca\uca4f\uca57\uc9db\uc9dd\uc99d\ud835\ude1d\\U00012f0e\uca19\uca07\uca17\uca38\uc9ca\uc9bc\uc9b3\\U0001ba85\uca20\uc996\uc995\uca04\uc9f2\uc99a\uc981\uc9c5\uc9b6',\n      constraints={'intervals': IntervalSet(\n           build_intervals([51579, 395288, 601839]),\n       ), 'min_size': 50, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=4.349345962140639e+16,\n      constraints={'min_value': 2.8131956389914096e-240,\n       'max_value': 4.560473619510695e+16,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 4530068953401290.0},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': -1.1633342288509904e+230,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 1.378488064907599e+308},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.9967528916693285},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.99999},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.2449657100646941},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U00080894\\U00080807\\U0008083d\\U00080856\\U00080896\\U000946c2\\U000807bc\\U000807e7\\U00080819\\U00080834\\U0008081c\\U00080840\\U00080809\\U00080898\\U00080804\\U00080880\\U000be9e3\\U00080834\\U0008086b\\U0008088b\\U00080854\\U00080806',\n      constraints={'intervals': IntervalSet(\n           build_intervals([526265, 805410, 901573]),\n       ), 'min_size': 12, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.4118264788495976e-210},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=5.968728449768874e+307,\n      constraints={'min_value': -4.906272583325491e+16,\n       'max_value': 1.2404906432801359e+308,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 4.550393412087355e+16},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.220446049250313e-16},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\ud84e\udc2b\ud84e\udc09\ud84e\udc48\\U0003a1a8\\U000415fa\ud84e\udc56',\n      constraints={'intervals': IntervalSet(\n           build_intervals([145338, 320321, 946757, 976830]),\n       ), 'min_size': 0, 'max_size': 100},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'\\x00S\\xb1\\x9es\\x8f#',\n      constraints={'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.7321916326673631},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.25268300908250035},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.44667707648618327},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=44,\n      constraints={'min_value': 41,\n       'max_value': 46,\n       'shrink_towards': 0,\n       'weights': {46: 0.0007977517139071703,\n        43: 7.138497286732266e-05,\n        42: 0.06050926923923734,\n        44: 0.04548157126945771}},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.0},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=8.308055747727182e+307,\n      constraints={'min_value': 5.418461671650926e-292,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 8.308055747727182e+307},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.4117933829495466e+308,\n      constraints={'min_value': 0.0,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 1.4117933829495466e+308},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u02e0VCq\u00acmO\u00ba',\n      constraints={'intervals': IntervalSet(\n           build_intervals([0, 1000, 177104])),\n       'min_size': 0,\n       'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.0},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-101,\n      constraints={'min_value': -162_703_691_595_855_018_860_733_984_522_600_375_705,\n       'max_value': None,\n       'shrink_towards': 115,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=443_058_066_756_713_887,\n      constraints={'min_value': 443_058_066_756_713_822,\n       'max_value': None,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 1.0219973323644357e+307},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-12064,\n      constraints={'min_value': None,\n       'max_value': None,\n       'shrink_towards': 22140,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.610301843952873},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0019746250472962856,
          "overall:gc": 0.0,
          "generate:nodes": 0.04249945800984278
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878966.801837
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0009bd87\\U0009be10\\U0009bd9b\\U000a5d1d\\U0009be05\\U0009bd81\\U000cd2c6',\n      constraints={'intervals': IntervalSet(\n           build_intervals([638292, 846394, 1035586]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u01c1',\n      constraints={'intervals': IntervalSet(\n           build_intervals([404, 102369, 295288])),\n       'min_size': 0,\n       'max_size': 100},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=3.6107444594353833e+307,\n      constraints={'min_value': -1.7415909344360068e+41,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 1.6591429986932772e+16},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value=\"jM\\U000e956a\\x03}\u00d2h>r\\U0005d124\u00c8?\\U000e2534\\x1b3\u00a1\u00d9g\\U00065c9c\\U000c573c\u00dc\\x0b\\U00038d23\\U000b21adF\\U0005d77e,\u00a8\\U000ee496\\U000914a7V\\U0003e4aeY\\x8e\u00e0\u00f1@\\r!\u00f4\\U000c20c0\\U00093a1d\\x07\\U0003eda2:;\u00a5\u00cb\\U0005a9cd\\x10\u00c6Y\\x0b\\U0004a78cgp'(C\\x06L\\x1f\u00b0\ud866\ude42\u00e1\u00a7\\x8d\u00f3\u00d0\\U000337e3\",\n      constraints={'intervals': IntervalSet(\n           build_intervals([1, 1024, 154979, 1014993]),\n       ), 'min_size': 39, 'max_size': 139},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 8.56980789043454e+307},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0006761669646948576,
          "overall:gc": 0.0,
          "generate:nodes": 0.020213205949403346
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878926.89789
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='bytes',\n      value=b's',\n      constraints={'min_size': 0, 'max_size': 72},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u5ab3\u5af6\u5a74',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [23092,\n                99115,\n                177800,\n                464586,\n                642806,\n                700123,\n                739135,\n                1050651,\n                1095131],\n           ),\n       ),\n       'min_size': 0,\n       'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-43,\n      constraints={'min_value': None,\n       'max_value': None,\n       'shrink_towards': -24337,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=8.584867601262346e+167,\n      constraints={'min_value': -5.9432379520683176e+16,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 5.349411599741707e+16},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=6.7053387864670904e+16,\n      constraints={'min_value': -1.5,\n       'max_value': 1.2813289510398768e+308,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 0.05},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.000377916032448411,
          "overall:gc": 0.0,
          "generate:nodes": 0.007030499924439937
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878922.481726
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\ud84e\uddcb\ud84e\ude54\ud84e\udddf\\U0003782a\ud84e\ude49\ud84e\uddc5\\U0008637c',\n      constraints={'intervals': IntervalSet(\n           build_intervals([145816, 638292, 846394]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U00034d87\\U0001bb72\\U0001bb8b\\U0005171d\ud82f\udc04\\U0001bb4f\\U0001bb5f\\U0004180f\\U0001bb90\\U0001bb75\ud841\uddc3\\U0001bb7d\\U0001bbe9\\U0001bb53\\U0001bbd1\\U0001bb88\ud82f\udc16\\U0001bbb3\\U0001bb3c\ud873\udd6e\\U0001bb91\\U0001bbe6\\U0001bbdf\ud82f\udc03\\U0001bb4d\\U0001bb95\\U0001bb4e\\U0005ff51\\U0001bb82\\U0004191e\ud82f\udc0f\\U0001bb93\\U0001bb95\\U0001bb55\ud871\udfd5\ud848\udcc6\\U0001bbd1\\U0001bbbf\\U0001bbcf\\U0001bbf0\\U0001bb82\\U0001bb74\\U0001bb6b\ud86b\udc3d\\U0001bbd8\\U0001bb4e\\U0001bb4d\\U0001bbbc\\U0001bbaa\ud82f\udc09\\U0001bbc8\ud82f\udc31\\U0001bb6e',\n      constraints={'intervals': IntervalSet(\n           build_intervals([113459, 395288, 601839]),\n       ), 'min_size': 50, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=6.430302397329667e+307,\n      constraints={'min_value': 2.2977568508831188e+16,\n       'max_value': 1.4130967583873843e+308,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 2.3823487456653346e+307},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.27074764823117153},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0005842919927090406,
          "overall:gc": 0.0,
          "generate:nodes": 0.009506585134658962
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878920.248446
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U00054d51\\U00054dda\\U00054d65\\U00068bb0\\U00054dcf\\U00054d4b\\U0005f63a\\U00054d1f\\U00054d63\\U00054d70',\n      constraints={'intervals': IntervalSet(\n           build_intervals([347422, 638292, 846394]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0003951250109821558,
          "overall:gc": 0.0,
          "generate:nodes": 0.008310875040479004
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878923.566553
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='string',\n      value='\ud869\ude50\ud869\udec8\\U0003738c\\U000a2796\ud869\ude5a\\U0009f7f4',\n      constraints={'intervals': IntervalSet(\n           build_intervals([173609, 236006, 625070, 730368]),\n       ), 'min_size': 3, 'max_size': 91},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.7622723488672436},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.9949059000654186},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=31349,\n      constraints={'min_value': -798,\n       'max_value': None,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0007409f\\U00064896\\U00060870\\U0006dfd2\\U000608e9\\U00060834\\U00060844\\U0006a00f\\U00060875\\U0006085a\\U00061b7c\\U00060862\\U000608ce\\U00060838\\U000608b6\\U0006086d\\U000608fb\\U00060898\\U00060821\\U00064d66\\U00060876\\U000608cb\\U000608c4\\U000608e8\\U00060832\\U0006087a\\U00060833\\U000719df\\U00060867\\U000734eb\\U000608ec\\U000608f4\\U00060878\\U0006087a\\U0006083a\\U00064c00\\U0006223c\\U000608b6\\U000608a4\\U000608b4\\U000608d5\\U00060867\\U00060859\\U00060850\\U0006451a\\U000608bd\\U00060833\\U00060832\\U000608a1\\U0006088f\\U00060837\\U0006081e\\U00060862\\U00060853',\n      constraints={'intervals': IntervalSet(\n           build_intervals([395288, 479504, 601839]),\n       ), 'min_size': 50, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=6.430302397329667e+307,\n      constraints={'min_value': 2.2977568508831188e+16,\n       'max_value': 1.4130967583873843e+308,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 2.3823487456653346e+307},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.7276314820986799},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.867498558985814e+242,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 1e-323},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.000702582998201251,
          "overall:gc": 0.0,
          "generate:nodes": 0.009995873959269375
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878953.498079
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=2.1737032028966436e+45,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 474167647850097.0},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=2.153573884978788e+306,\n      constraints={'min_value': 2.6257250818300036e+16,\n       'max_value': 1.0009114760667928e+307,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 2.153573884978788e+306},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'b\\x0618e\\xba\\x90\\x01\\xa5\\xccA\\xad[\\xb5-\\xf5\\xd0\\x06K\\xac\\xe1\\xd8\\x12]\\x02\\x1bl\\xca\\xde\\x94\\xb7nR\\xb9\\x0b\\xea\\x9e\\xc0\\xcd\\xcf',\n      constraints={'min_size': 27, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=-0.5,\n      constraints={'min_value': -1.0684982529589002e+174,\n       'max_value': 5.768894148556519e+16,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 1e-323},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0009049e\\U001012f1\\U000e815a\ud840\udd0d\ud840\udd77\ud840\udcc2\ud840\udd1b\ud840\udcb0\ud840\udd14\ud840\udd51\ud840\udd45\ud840\udd13\ud840\udcd6\ud840\udd56\ud840\udd21\ud840\udd36\ud840\udca6\\U000bdcc2\ud840\udcd4\ud840\udce8\\U000dfc3a\ud840\udd15\ud840\udcf4\ud840\udcdc\ud840\udc93\ud840\udcea\\U00085d67\ud840\udcb3\\U00082997\\U000bd526\\U000af6fd\ud840\udcc3\ud840\udd32\ud840\udd52\ud840\udd03\ud840\udcb6\ud840\udce2\ud840\udcba\ud840\udd40\\U0007dae2\ud840\udcea\\U000c4293\ud840\udd06\ud840\udd12\ud840\udcac\\U000fc6a7\ud840\udcbb\\U000c59f5\ud840\udcc1\ud840\udd3c\ud840\udd69\ud840\udd28\ud840\udd77\ud840\udcfe\ud840\udd87\ud840\udd14\ud840\udcbf\ud840\udca0\ud840\udd5a\ud840\udca5\ud840\udcfe\\U000b6747',\n      constraints={'intervals': IntervalSet(\n           build_intervals([131214, 133684, 460320, 614498, 700170, 1114110]),\n       ), 'min_size': 50, 'max_size': 150},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'\\x14\\xf7$#\\x91\\xf2\\xc5\\xe3\\x89\\x9c\\xca\\x88~a\\xa2\\xf1\\xe1\\xc6\\xe8\\xe9\\xc3&\\x95\\x13',\n      constraints={'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u01a4\u01f1\u01ed\u0222\u01dd\u01a9\u0134\\U00010d5f\ud884\udee6\u0148\ud87a\udf22\u01fc\u0185\u0174\u0172\u019d\u0161\u87e5\u01b1\u01d4\u01bb\u0141\u0183\u0201\u0190\u01c8\u019a\u0208\ud85e\udff5\u01aa\u0205\u0160\u0211\u01a9\u01cc\ud850\udca0\u0167\u01f4\u91bd\u0183\u018a\u0156\u020a\u01c4\u01de\u019d\u0138\u0148\u022a\u0229\\U00019431\ua0b2\u0141\u0216\u013c\u01d5\\U000328e7\u0197\u018d\u0150\u01bc\u0185\u016b\u013c\u021a\\U0001bd0c\ud846\udcf9\u0201\u0144\u0138\u0189\u015c\u020e\u01a3\u01cf\u0190\u0223\\U00014016\ud834\udf63\\U0001afe1\u01e0\\U0001c984\u0176\u01b7\u8687\u01a8\u0192\u0181\u0165\ud835\udcc9\u013f\u01a2\u01e1\u0142\u0150\u0203\u01c2\u01e1\u01c9\u015f\u012c\u01fb\u01ce\u01bf\u015e\u0137\u0219\u7bec\ud804\uddbf\u01ba\\U000e0fdb\ud861\udcc9\u01aa\u01fe\ud872\ude3f\u0151\u0219\u0198\u0229\u01f8\u0213\u012e\u021c\u017d\u01de\ud6a9\u020a\\U0001b90f\u022a\u0133\u017f\u0140\u0141\\U0001a2c9\u01f1\u01da\u0140\uffa8\ud801\udd0e\u01c8\u0208\u0168\\U00013bc9\ud852\udc9a\u01ed\u015f\u0193',\n      constraints={'intervals': IntervalSet(\n           build_intervals([300, 213797, 909487, 922720]),\n       ), 'min_size': 47, 'max_size': 147},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U00019527\\U00019501\\U00019593\\U0001956c\\U00019512\\U00044135\\U00019557\\U000195b9\\U000195c8\\U0001957e\\U0004d427\\U000195be\\U00019500\\U00019564\\U000194da\\U000195cd\\U000195cb\\U000194d4\\U00019521\\U00019500\\U0005cc50\ud862\udce8\\U0001951e\\U00019527\\U0001957a\\U00019517\\U00019549\\U0001951b\\U00019574\\U00019592\\U00019525\\U00019552\\U00019556\\U00042991\\U00019597\\U000195a4\\U00019569\\U0001952c\\U00019517\\U000194f7\\U000194e5\\U0001956a\\U000194ee\\U0001950f\\U000195cd\ud877\udc40\\U0001956b\\U00019520\\U0001958c\\U00019507\\U0001950a\\U00019573\\U00019535\\U0001955d\\U0001954c\ud849\udf90\ud87e\udd54\\U00019559\\U0001956b\\U00019574\\U000195ae\\U00019524\\U000195ba\\U000195c4\\U00019547\\U0001951d\ud841\uddcf\\U000194e3\\U00019591\\U0001952b\\U00019564\\U0005135f',\n      constraints={'intervals': IntervalSet(\n           build_intervals([103633, 208423, 244687, 420072]),\n       ), 'min_size': 42, 'max_size': 142},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0005bf16\\U0005bef8\\U0005bf74\\U0005bf8e\\U0006b21f\\U0005bef6\\U0005bf3d\\U0005bfc3\\U0007f4b6\\U0005bf45\\U0005bf39\\U00069314\\U0005bfba\\U0005bfbe\\U0005bf33\\U0005bf62\\U0005bf83\\U0006500a\\U0005bf88\\U0005bf22\\U0005bf8f\\U0006ddff\\U0005befe\\U0005bfd7\\U0007c4d0\\U0005bf26\\U0005bf34\\U0005bfa6\\U00074862\\U00085242\\U0005bf1e\\U0005bf6f\\U0005bf00\\U0005bfbf\\U0005bfcb\\U00078b29\\U0005bf4c\\U0005bf9d\\U0005bf26\\U0005bf93\\U0005bf1b\\U0005bfdc\\U0005bf5c\\U0005bf4c\\U0005bf05\\U000873e7\\U0005bfad\\U0005bf9b\\U0005bfc6\\U00066946\\U0005bf92\\U0005bf28\\U0005bf55\\U00062105\\U0005beea\\U0005bf41\\U0008d353\\U0005bfd0\\U0005bf49\\U0005bfd9\\U0008dcbf\\U00079c4d\\U0005bf88\\U0005bfc7\\U0005bfbd\\U0005befd\\U0005bf0a\\U0005bfb4\\U0006fa64\\U0005bfce\\U0005bf72\\U0005bf91\\U0005bf46\\U00068ac1\\U0005bf0f\\U0008a8ce\\U0005bf00\\U0005befd\\U0005bf7f\\U0005bf60\\U0005bf8d\\U0005bfce\\U0005bfa0\\U0005bfb6\\U0005bfd7\\U0005bf80\\U0006aabc\\U0005bf01\\U0005bfa3\\U0005bf1d\\U0005bf86\\U0005bf56\\U0005bf9c\\U0005bfc4\\U0005bf75\\U0005bfc9\\U0005bf31\\U0005bf68\\U0005bee4\\U0005bf4e\\U0005bf9c\\U0005bf10\\U0006e14e\\U0006a2f3\\U00078ef5\\U0005bfae\\U0008bc28\\U00061e84\\U0007f359\\U0005bfb7\\U0006ac96\\U0005bf64\\U0005bf3e\\U0005bfa4\\U0005bfdc\\U00078ffe\\U0005bf20\\U0005bfb1\\U0005bf1e\\U0005bf7e\\U0005bf06\\U0005bf2e\\U0005bf3f',\n      constraints={'intervals': IntervalSet(\n           build_intervals([376543, 583939, 657194]),\n       ), 'min_size': 37, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.27547372863165537},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U00041509\\U00061d19\\U0003f571\\U0003f577\\U000544e7\\U0003f603\\U0003f57b',\n      constraints={'intervals': IntervalSet(\n           build_intervals([259378, 516131, 892261]),\n       ), 'min_size': 0, 'max_size': 55},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-18454,\n      constraints={'min_value': None,\n       'max_value': -16303,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.1395093634742743e+280,\n      constraints={'min_value': -3.93237513053853e+16,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 4.7026335824898124e-176},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 1.0353889995709638e-39},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0011649579973891377,
          "overall:gc": 0.0,
          "generate:nodes": 0.019858956919051707
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878956.905705
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='bytes',\n      value=b'o\\xec?\\xc9rKA\\xfa\\xdc\\xc8\\x8f\\x18\\xbe\\xdd\\xed\\xd7~/w\\x85 \\xea\\xc8\\xb7\\x11\\xb6]\\xba*h\\xba\\xb4u\\xa3\\x81\\x07\\x87\\x1c\\xd7b\\xfa\"^\\x06\\xe1\\x02\\xb54\\xb2\\x9dQ\\xf3J\\xc1',\n      constraints={'min_size': 49, 'max_size': 56},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011862500105053186,
          "overall:gc": 0.0,
          "generate:nodes": 0.0011252500116825104
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878971.2235892
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='integer',\n      value=-1_412_509_303,\n      constraints={'min_value': None,\n       'max_value': None,\n       'shrink_towards': -33,\n       'weights': None},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00012179202167317271,
          "overall:gc": 0.0,
          "generate:nodes": 0.0017097079544328153
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878937.9305248
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='bytes',\n      value=b'',\n      constraints={'min_size': 0, 'max_size': 1},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.9598492927423345},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0005851659807376564,
          "overall:gc": 0.0,
          "generate:nodes": 0.005098082940094173
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878959.111244
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0009bd87\\U0009be10\\U0009bd9b\\U0009c840\\U0009be05\\U0009bd81\\U0009ef9b',\n      constraints={'intervals': IntervalSet(\n           build_intervals([638292, 654146, 846394]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U00066d6d\\U00060857\\U00060870\\U0006dfd2\\U000608e9\\U00060834\\U00060844\\U0006a00f\\U00060875\\U0006085a\\U00061b7c\\U00060862\\U000608ce\\U00060838\\U000608b6\\U0006086d\\U000608fb\\U00060898\\U00060821\\U00064d66\\U00060876\\U000608cb\\U000608c4\\U000608e8\\U00060832\\U0006087a\\U00060833\\U0006bbb2\\U0006087e\\U0006a052\\U000608f4\\U00060878\\U0006087a\\U0006083a\\U00064c00\\U0006223c\\U000608b6\\U000608a4\\U000608b4\\U000608d5\\U00060867\\U00060859\\U00060850\\U0006451a\\U000608bd\\U00060833\\U00060832\\U000608a1\\U0006088f\\U000608ee\\U000608ad\\U00060916\\U00060853',\n      constraints={'intervals': IntervalSet(\n           build_intervals([395288, 462948, 601839]),\n       ), 'min_size': 50, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U00012eac\\U00012ee0\\U00012e57\\U00012ebf\\U00012ee5\\U00012e85\\U00012e92\\U0006c3bb\\U00012e83\\U00012f1e\\U00012ee1\\U00012eca\\U00012eee\\U000809b5\\U00012f1d\ud86b\ude5e\\U00034279\\U00012e3e\\U00012e50\\U00012ea5\\U00012ee9\\U00012e47\\U00012f04\\U00012e4f\ud887\ude8a\\U00012e44\\U00012e77\\U00012ec0\\U00012e4e',\n      constraints={'intervals': IntervalSet(\n           build_intervals([77343, 599825, 677836]),\n       ), 'min_size': 27, 'max_size': 127},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='',\n      constraints={'intervals': IntervalSet(\n           build_intervals([624408, 638292, 1023010])),\n       'min_size': 0,\n       'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\ud878\ude05\ud878\ude51\ud878\ude6d\ud878\ude12\\U0004f06e\ud878\uddd9\ud878\udde3\ud878\ude57\ud878\ude04\ud878\uddf6\ud878\udd77\ud878\uddab\ud878\ude2b\\U000674fe\ud878\ude05\ud878\uddb0\ud878\ude4b\\U0007eed0\ud878\uddd6\\U0003d4c7\ud878\udd8f\ud878\ude16\ud878\ude2e\ud878\ude1e\\U0008319c',\n      constraints={'intervals': IntervalSet(build_intervals([188788, 688029])),\n       'min_size': 16,\n       'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'\\xd0\\x15\\xe1\\xa9F\\xf86\\xb6',\n      constraints={'min_size': 4, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.4298622468120004e+307,\n      constraints={'min_value': 1.2170236513154362e+16,\n       'max_value': 2.0687275006292417e+307,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 1.4298622468120004e+307},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=592927966,\n      constraints={'min_value': 20391,\n       'max_value': 1_258_173_399,\n       'shrink_towards': -120_419_880_448_536_101_008_111_403_099_601_243_843,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b\"X\\xf9,\\x1b$\\x942\\xbbwH\\xd3\\xcb-\\xa2\\xa2a\\xf6=\\xcb\\xc7T\\xa8G?\\xbf\\x8d\\xfc'@\\x07*A\\xacf\\x8a*\\x1c\\xe5L\\xcfQ\\xdd\\x1dlE\\xfb\\xc2C\\xab\\xd4\\xbd\\xa8@\\xe2\\x91\\x1d\\x9e\\x80\\xf1\\x16 1:\\xbd\\x8d\\x0f[\\xa6\\x92\\xb1\\xd3\\x0c*\\xa6\\xfa'\\xe0\\xe8dn&\\x13\\xfcv\\x95\\x01]\\xd4]\\xfeD\\xed|\",\n      constraints={'min_size': 45, 'max_size': 137},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\ud885\udec6\\x8e49\ud80c\udfdd',\n      constraints={'intervals': IntervalSet(\n           build_intervals([1, 341063, 889496]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.02157996301058707},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=20981,\n      constraints={'min_value': None,\n       'max_value': None,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-48,\n      constraints={'min_value': -115,\n       'max_value': -36,\n       'shrink_towards': 2_720_942_973_089_196_350,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=1_301_861_852,\n      constraints={'min_value': None,\n       'max_value': None,\n       'shrink_towards': 9999,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'\\x08\\x12\\xecA',\n      constraints={'min_size': 0, 'max_size': 34},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.001353791041765362,
          "overall:gc": 0.0,
          "generate:nodes": 0.025621248118113726
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878930.221802
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 3631161735630169.0},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0002103750011883676,
          "overall:gc": 0.0,
          "generate:nodes": 0.001412415993399918
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878932.436882
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='bytes',\n      value=b'\\xad',\n      constraints={'min_size': 0, 'max_size': 41},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 1.0},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=20788,\n      constraints={'min_value': None,\n       'max_value': None,\n       'shrink_towards': 8,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-14597,\n      constraints={'min_value': None,\n       'max_value': None,\n       'shrink_towards': 23810,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u8341\u83bb\u8350\u83a3\ud844\udf56\\U000437fc\u82f8\u837f',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [33500,\n                396057,\n                504592,\n                600893,\n                682474,\n                836341,\n                971019,\n                1114110],\n           ),\n       ),\n       'min_size': 0,\n       'max_size': 100},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\ud86e\udd65\ud867\udec4\ud867\udebb\ud867\ude9f\ud867\uded8',\n      constraints={'intervals': IntervalSet(build_intervals([171619, 691939])),\n       'min_size': 0,\n       'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.3412808262223424e+307,\n      constraints={'min_value': -5.371157026003719e+46,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 1.5142783744720456e+184},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=365,\n      constraints={'min_value': -30667,\n       'max_value': 17648,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0005892499466426671,
          "overall:gc": 0.0,
          "generate:nodes": 0.01679887290811166
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878914.7159328
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='integer',\n      value=23487,\n      constraints={'min_value': None,\n       'max_value': 32299,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0003409c\\U00034125\\U000340b0\\U00047efb\\U0003411a\\U00034096\\U00096a4d',\n      constraints={'intervals': IntervalSet(\n           build_intervals([213097, 638292, 846394]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U00054504\\U000354f3\ud875\udd4e\\U0005dd83\ud875\udddf\ud875\udd12\ud875\udd22\\U000403e4\ud875\udd53\ud875\udd38\\U0002fabe\ud875\udd40\ud875\uddac\ud875\udd16\ud875\udd94\ud875\udd4b\ud875\uddd9\ud875\udd76\ud875\udcff\\U00035e93\ud875\udd54\ud875\udda9\ud875\udda2\ud875\uddc6\ud875\udd10\ud875\udd58\ud875\udd11\\U0004f785\ud875\udd45\\U00052d9d\ud875\uddca\ud875\uddd2\ud875\udd56\ud875\udd58\ud875\udd18\\U00035bc7\ud882\udc3f\ud875\udd94\ud875\udd82\ud875\udd92\ud875\uddb3\ud875\udd45\ud875\udd37\ud875\udd2e\\U0005c0f5\\U0003c4c3\ud875\udd42\\U0002f718\ud875\udd10\ud875\udd7f\ud875\uddb2\\U0003e01b\\U00041b45\\U0003b8c6\ud875\udd31\\U00040a86\\U0003c749\ud875\udd82\ud875\uddbe\ud875\uddda\ud875\udd29\\U000366d7\ud875\udde0\ud875\udd3e\ud875\uddae\ud875\uddd9\ud875\udd75\ud875\uddbc\ud875\udd91\ud875\uddd9\ud875\udd73\ud875\udd5f\ud875\udd7f\ud875\uddae\ud875\udd36\ud875\udd6a\ud875\uddcb\ud875\udd7d\ud875\uddc8\ud875\udd9e\ud875\udd80\ud875\udda8\ud875\udd17\\U00053f85\ud875\uddad\ud875\udd09\ud875\uddd8\ud875\uddd4\ud875\uddb0\ud875\udddc\ud875\udd88\\U0003ec05\ud875\uddc1\\U00056637\ud875\uddbb\ud875\udd75\\U0004e582\ud875\udd63\\U000374ea\ud875\uddf5\ud875\udd9a\ud875\uddc1\ud875\udd56\ud875\udddb\ud875\udde6\ud875\udd8a\ud875\uddf5\ud875\uddf0\\U0005ab70\ud875\udda8\ud875\uddd6\ud875\udd12\ud875\udd75\ud875\udd85\ud875\udd4d\ud875\udd1d\ud875\udda9\\U0004461c\ud875\udd59\ud888\udcce\ud875\udd9c',\n      constraints={'intervals': IntervalSet(\n           build_intervals([185590, 395288, 601839]),\n       ), 'min_size': 50, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=6.430302397329667e+307,\n      constraints={'min_value': 2.2977568508831188e+16,\n       'max_value': 1.4130967583873843e+308,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 2.3823487456653346e+307},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.8283946326676206},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'\\xe7',\n      constraints={'min_size': 0, 'max_size': 100},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='q\\U0008bd03o',\n      constraints={'intervals': IntervalSet(\n           build_intervals([0, 752173, 822901, 938891, 975597]),\n       ), 'min_size': 0, 'max_size': 71},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0008209579973481596,
          "overall:gc": 0.0,
          "generate:nodes": 0.01669899997068569
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878927.994813
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='bytes',\n      value=b'\\xdax\\xb6c\\xac\\xc1\\xcfz\\x08',\n      constraints={'min_size': 0, 'max_size': 100},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=3.360611404657029e+306,\n      constraints={'min_value': 0.05,\n       'max_value': 3.03846349812885e+307,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 2185282722617345.8},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 1.400607713067172e+307},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u5580\u55ac',\n      constraints={'intervals': IntervalSet(\n           build_intervals([21728, 159033, 192498, 693950, 725543, 914439]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.13883638464408057},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.3474669849164452},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'#\\x95\\xba\\xd6[\\r\\x7f\\x806\\xde',\n      constraints={'min_size': 0, 'max_size': 83},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0008ce11\\U00036828\\U000367db\\U00036763\\U00086c9e\\U0003684a\\U00036835\\U0003684f',\n      constraints={'intervals': IntervalSet(\n           build_intervals([223063, 245291, 544928, 578005, 652097, 916930]),\n       ), 'min_size': 0, 'max_size': 100},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0005553750088438392,
          "overall:gc": 0.0,
          "generate:nodes": 0.008744166931137443
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878961.3190138
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='integer',\n      value=-12681,\n      constraints={'min_value': None,\n       'max_value': 512,\n       'shrink_towards': -28,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u00ee\u9660\u00ef\\x9b\u00e6JO\u00a9\u00db\u00e2O',\n      constraints={'intervals': IntervalSet(\n           build_intervals([1, 90942, 133340, 144540, 158524]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-3533,\n      constraints={'min_value': None,\n       'max_value': -3481,\n       'shrink_towards': -1,\n       'weights': None},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0004207500023767352,
          "overall:gc": 0.0,
          "generate:nodes": 0.007420125068165362
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878908.140077
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='string',\n      value='\\U00104095\\U000656cc\ud873\udeb8\\U000e184c',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [183889,\n                197611,\n                230394,\n                495563,\n                558093,\n                674724,\n                825494,\n                1045107,\n                1059266,\n                1071736,\n                1097952],\n           ),\n       ),\n       'min_size': 0,\n       'max_size': 100},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'\\x931\\xb4_\\xe8\\x98\\xde',\n      constraints={'min_size': 0, 'max_size': 100},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\ud84f\udd6d\ud84f\udd33\ud84f\udcc6\ud84f\uddbd\ud84f\udccd\ud84f\udcdb\ud84f\udd0d\ud84f\udd68\ud84f\udd76\ud84f\udcf2\ud84f\udd8e\\U00049516\\U0005fc05\\U00086a0e\ud84f\udd32\ud84f\udd8c\\U0007b718\\U00072533\ud84f\udd2b\ud84f\udcd0\\U00058eff\ud84f\udd15\ud84f\udd51\ud882\ude3f\ud851\udef7\ud84f\udd94\ud84f\udd85\ud84f\udcfb\ud84f\udd1a\\U0008951b\ud84f\udd66\ud84f\udcc1',\n      constraints={'intervals': IntervalSet(\n           build_intervals([146625, 565327, 661959]),\n       ), 'min_size': 0, 'max_size': 100},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': 0.0,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 1.3350537036549014e+308},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'\\xdd\\x0e\\xdb\\x94\\xeci\\x81\\xb5{\\xde\\xe7\\xc9\\xf3:\\xf7BX\\\\}\\x9c\\xe0\\x13Clc\\x99\\xaf\\x06c\\xc7c\\xa9H\\xa7\\x1c\\xb8\\xbfM\\xda\\xfcm',\n      constraints={'min_size': 32, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.314952514944973e+308,\n      constraints={'min_value': -4.0776698058433754e-250,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 5.089510533882306e+16},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00044895795872434974,
          "overall:gc": 0.0,
          "generate:nodes": 0.007299961056560278
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878933.549025
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u2898\u2882\\U0004a9a7\u28d9',\n      constraints={'intervals': IntervalSet(\n           build_intervals([10226, 638292, 846394]),\n       ), 'min_size': 0, 'max_size': 4},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.2549444330382729},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': -6.926622421016662e+16,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 9.347927316533006e+307},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'-',\n      constraints={'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00043629197170957923,
          "overall:gc": 0.0,
          "generate:nodes": 0.005803498963359743
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878951.298408
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='integer',\n      value=5,\n      constraints={'min_value': 5,\n       'max_value': 6,\n       'shrink_towards': 0,\n       'weights': {6: 0.1264952949461847, 5: 0.25299058989236933}},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=511,\n      constraints={'min_value': -6851,\n       'max_value': None,\n       'shrink_towards': 2156,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-3221,\n      constraints={'min_value': -25946,\n       'max_value': -7,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 1.011728318598429e+308},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0003748330054804683,
          "overall:gc": 0.0,
          "generate:nodes": 0.011514375917613506
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878967.867049
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=-3.626330398397323e+16,\n      constraints={'min_value': -inf,\n       'max_value': -7.8711909410590555e-146,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 2.00001},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011316704330965877,
          "overall:gc": 0.0,
          "generate:nodes": 0.0011902079568244517
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878962.404664
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': -1.0695837558224127e+211,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 4.697949662127311e+306},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011691701365634799,
          "overall:gc": 0.0,
          "generate:nodes": 0.0012239590287208557
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878960.1957812
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u043b',\n      constraints={'intervals': IntervalSet(\n           build_intervals([1000, 532109, 638292, 1106156]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0009bd87\\U0009be10\\U0009bd9b\\U000a5d1d\\U0009be05\\U0009bd81\\U000cd2c6',\n      constraints={'intervals': IntervalSet(\n           build_intervals([638292, 846394, 1075093]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u00fd\u00b4ca\u00dc\u00fc\u00e6C\\U0006aee2L\\x0c9\\x7f\u00f76\\U00034801',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [0,\n                98245,\n                186070,\n                224892,\n                247651,\n                249024,\n                296258,\n                321294,\n                321658,\n                328559,\n                396765,\n                601839,\n                615195,\n                775651,\n                855099,\n                982151],\n           ),\n       ),\n       'min_size': 0,\n       'max_size': 66},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0005779579514637589,
          "overall:gc": 0.0,
          "generate:nodes": 0.010284165909979492
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878946.85025
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 6.920896703377366e-05,
          "overall:gc": 0.0,
          "generate:nodes": 0.0002549170167185366
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878905.725179
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='integer',\n      value=29334,\n      constraints={'min_value': -2246,\n       'max_value': None,\n       'shrink_towards': 2120,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.5166420590176174},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0003b02a\\U0003aff2\\U0003b07e\\U0003b04d\\U0003af9d\\U0003b081',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [241549,\n                256523,\n                270896,\n                364134,\n                497847,\n                604456,\n                612592,\n                654144,\n                847231,\n                925074,\n                1009866,\n                1026104,\n                1050794,\n                1082110,\n                1114110,\n                1114111],\n           ),\n       ),\n       'min_size': 4,\n       'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string', value='', constraints={'intervals': IntervalSet(\n           build_intervals(\n               [0, 155112, 248032, 423160, 574425, 673476, 783842, 838248],\n           ),\n       ), 'min_size': 0, 'max_size': 0}, was_forced=False, index=None),\n     ChoiceNode(type='bytes',\n      value=b'\\xf3\\xf2\\xf3\\xfb\\xe0\\xc8\\xec\\x87\\x02\\x97\\x19',\n      constraints={'min_size': 0, 'max_size': 100},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'\\x00\\x87l*m\\x92?',\n      constraints={'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U00052318\\U0006d4ca\\U00052361\\U00052281\\U000522fa\\U0007a038\\U000522bf\\U000522c1\\U0005229f\\U0005227d\\U0005234e\\U00052314\\U000522ab\\U00052359\\U00052318\\U00079f9d\\U000522b3\\U0006f77e\\U0005229e\\U0005235a\\U000522cf\\U00052280\\U000686c8\\U000522b7\\U000522b5\\U0005232a\\U00063d48\\U0005daed\\U000522a3\\U0006e233\\U0005236b\\U00052274\\U0006dfcb',\n      constraints={'intervals': IntervalSet(\n           build_intervals([336492, 507241, 540715]),\n       ), 'min_size': 22, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.000531666970346123,
          "overall:gc": 0.0,
          "generate:nodes": 0.01158324902644381
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878939.1225832
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=-1.910282853259857e+236,\n      constraints={'min_value': -2.132283629153648e+236,\n       'max_value': -6.0411319501287355e+230,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0009bd87\\U0009be10\\U0009bd9b\\U000a5d1d\\U0009be05\\U0009bd81\\U000cd2c6',\n      constraints={'intervals': IntervalSet(\n           build_intervals([638292, 846394, 869179]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0004e305\ud800\udee2\u0440\\U00035fd2\u04b9\u0404\u0414\ud858\udcc4\u0445\u042a\u4e78\u0432\u049e\u0408\u0486\u043d\u04cb\u0468\u03f1\ud805\ude23\u0446\u049b\u0494\u04b8\u0402\u044a\u0403\\U00044806\u0437\\U0004b437\u04bc\u04c4\u0448\u044a\u040a\ud804\udc8a\u697b\u0486\u0474\u0484\u04a5\u0437\u0429\u0420\\U0005dae7\\U0001e283\u0434\u472d\u0402\u0471\u04a4\ud846\udd33\ud863\udf86\\U0001ca89\u0423\ud85b\ude09\\U0001e78f\u0474\u04b0\u04cc\u041b\\U000126ab\u04d2\u0430\u04a0\u04cb\u0467\u04ae\u0483\u04cb\u0465\u0451\u0471\u04a0\u0428\u045c\u04bd\u046f\u04ba\u0490\u0472\u049a\u0409\\U0004d806\u049f\u03fb\u04ca\u04c6\u04a2\u04ce\u047a\ud84c\udd07\u04b3\\U0005256a\u04ad\u0467\\U00042401\u0455\\U000142d1\u04e7\u048c\u04b3\u0448\u04cd\u04d8\u047c\u04e7\u04e2\\U0005afdc\u049a\u04c8\u0404\u0467\u0477\u043f\u040f\u049b\ud879\udd34\u044b\u9a98\u048e',\n      constraints={'intervals': IntervalSet(\n           build_intervals([1000, 395288, 601839]),\n       ), 'min_size': 50, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=6.430302397329667e+307,\n      constraints={'min_value': 2.2977568508831188e+16,\n       'max_value': 1.4130967583873843e+308,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 2.3823487456653346e+307},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.7276314820986799},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.5106878662054212e+307,\n      constraints={'min_value': 2.5894519539852096e+16,\n       'max_value': 2.869912087208674e+307,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 5.0067198890672104e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 7.000129803726713e+307},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-37923,\n      constraints={'min_value': None,\n       'max_value': -22452,\n       'shrink_towards': 5603,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'\\x0eSR\\x8c\\x8aD9\\xc0]j\\x1f\\xc2\\xf0Tj\\xf2\\xe1\\xb2',\n      constraints={'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0008623750181868672,
          "overall:gc": 0.0,
          "generate:nodes": 0.014010081009473652
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878964.6111412
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='string',\n      value='\\x07',\n      constraints={'intervals': IntervalSet(build_intervals([2, 9932])),\n       'min_size': 0,\n       'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0008ae2a\\U0008aeb3\\U0008ae3e\\U0008fe5b\\U0008aea8\\U0008ae24\\U0008d8fe\\U0008adf8\\U0008ae3c\\U0008ae49',\n      constraints={'intervals': IntervalSet(\n           build_intervals([568823, 638292, 846394]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=10820,\n      constraints={'min_value': None,\n       'max_value': 13350,\n       'shrink_towards': 793_831_779_161_591_054,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.000691471445193185},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\ud840\udccc\\U00039b7b\\U000e6abb',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [131133,\n                196179,\n                212397,\n                253590,\n                320667,\n                346671,\n                370348,\n                469201,\n                515982,\n                520824,\n                567911,\n                569107,\n                590636,\n                598389,\n                605743,\n                686920,\n                727568,\n                756313,\n                861869,\n                950658,\n                965158,\n                977413,\n                1020488,\n                1020972],\n           ),\n       ),\n       'min_size': 3,\n       'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.0495821793051583e+308,\n      constraints={'min_value': 0.5,\n       'max_value': 1.581443812681355e+308,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 3.5099027374005547e+307},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0005145839531905949,
          "overall:gc": 0.0,
          "generate:nodes": 0.009126330900471658
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878924.671814
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='bytes',\n      value=b'.secondary',\n      constraints={'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.7152567793241601},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.549304459577797},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.0},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\ud856\udc75\ud855\udffa\\U0003e0d7\ud856\udc75\ud855\udfb7\ud856\udc56\ud856\udc33\ud856\udc6e\\U000a06b3\ud855\udfce\ud856\udc73',\n      constraints={'intervals': IntervalSet(build_intervals([153472, 769562])),\n       'min_size': 9,\n       'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.5},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=2.2639865674070176e+16,\n      constraints={'min_value': -3.7668383231949487e-267,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.5126882871184473e-244},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0004884170484729111,
          "overall:gc": 0.0,
          "generate:nodes": 0.006288794917054474
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878912.5447822
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='integer',\n      value=-26,\n      constraints={'min_value': -36,\n       'max_value': None,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 1.1150440756765368e+308},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00017679203301668167,
          "overall:gc": 0.0,
          "generate:nodes": 0.002189124992582947
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878954.581876
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='string',\n      value='\\U00086abb\\U00086acf\\U0008b3e2\\U00086af2\\U000b27f0\\U000985d0',\n      constraints={'intervals': IntervalSet(build_intervals([551516, 810705])),\n       'min_size': 1,\n       'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0001439579646103084,
          "overall:gc": 0.0,
          "generate:nodes": 0.0017776259337551892
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878909.2985542
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='integer',\n      value=-5,\n      constraints={'min_value': -6,\n       'max_value': 1,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0005b201\\U0005b28a\\U0005b215\\U0006f060\\U0005b27f\\U0005b1fb\\U00065aea\\U0005b1cf\\U0005b213\\U0005b220',\n      constraints={'intervals': IntervalSet(\n           build_intervals([373198, 638292, 846394]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U00087826\\U00068815\\U00060870\\U000910a5\\U00060901\\U00060834\\U00060844\\U00073706\\U00060875\\U0006085a\\U00062de0\\U00060862\\U000608ce\\U00060838\\U000608b6\\U0006086d\\U000608fb\\U00060898\\U00060821\\U000691b5\\U00060876\\U000608cb\\U000608c4\\U000608e8\\U00060832\\U0006087a\\U00060833\\U00082aa7\\U00060867\\U000860bf\\U000608ec\\U000608f4\\U00060878\\U0006087a\\U0006083a\\U00068ee9\\U00063b61\\U000608b6\\U000608a4\\U000608b4\\U000608d5\\U00060867\\U00060859\\U00060850\\U0008f417\\U0006f7e5\\U00060864\\U00062a3a\\U00060832\\U000608a1\\U000608d4\\U0007133d\\U00074e67\\U0006ebe8\\U00060853\\U00073da8\\U0006fa6b\\U000608a4\\U000608e0\\U000608fc\\U0006084b\\U000699f9\\U00060902\\U00060860\\U000608d0\\U000608fb\\U00060897\\U000608de\\U000608b3\\U000608fb\\U00060895\\U00060881\\U000608a1\\U000608d0\\U00060858\\U0006088c\\U000608ed\\U0006089f\\U000608ea\\U000608c0\\U000608a2\\U000608ca\\U00060839\\U000872a7\\U000608cf\\U0006082b\\U000608fa\\U000608f6\\U000608d2\\U000608fe\\U000608aa\\U00071f27\\U000608e3\\U00089959\\U000608dd\\U00060897\\U000818a4\\U00060885\\U0006a80c\\U00060917\\U000608bc\\U000608e3\\U00060878\\U000608fd\\U00060908\\U000608ac\\U00060917\\U00060912\\U0008de92\\U000608ca\\U000608f8\\U00060834\\U00060897\\U000608a7\\U0006086f\\U0006083f\\U000608cb\\U0007793e\\U0006087b\\U000653f0\\U000608be',\n      constraints={'intervals': IntervalSet(\n           build_intervals([395288, 601839, 923311]),\n       ), 'min_size': 50, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=6.430302397329667e+307,\n      constraints={'min_value': 2.2977568508831188e+16,\n       'max_value': 1.4130967583873843e+308,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 2.3823487456653346e+307},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.7276314820986799},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=inf,\n      constraints={'min_value': 1.3940558642721672e+308,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 3.5558843497520484e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.5552749127761492e+308,\n      constraints={'min_value': -1.1082693928281492e-228,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 1.5552749127761492e+308},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-1_202_072_187,\n      constraints={'min_value': -1_202_072_400,\n       'max_value': 65535,\n       'shrink_towards': 3592,\n       'weights': None},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0009260000078938901,
          "overall:gc": 0.0,
          "generate:nodes": 0.03001016710186377
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878965.737067
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0004376c\\U000437f5\\U00043780\\U000575cb\\U000437ea\\U00043766\\U0004e055\\U0004373a\\U0004377e\\U0004378b',\n      constraints={'intervals': IntervalSet(\n           build_intervals([276281, 638292, 846394]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0004ff1d\\U00011efa\u2058\\U00037bea\u20d1\u201c\\u202c\ud85f\udcdc\u205d\u2042\u6a90\u204a\u20b6\u2020\\u209e\u2055\u20e3\u2080\\u2009\ud80c\ude3b\u205e\u20b3\u20ac\u20d0\u201a\\u2062\u201b\\U0004641e\u204f\\U0004d04f\u20d4\u20dc\\u2060\\u2062\u2022\\U00012ca2\u8593\\u209e\u208c\u209c\u20bd\u204f\u2041\u2038\\U0005f6ff\\U0001fe9b\u204c\u6345\u201a\u2089\u20bc\ud84d\udd4b\ud86a\udf9e\\U0001e6a1\u203b\ud862\ude21\ud840\udfa7\u208c\\u20c8\u20e4\u2033\\U000142c3\u20ea\u2048\u20b8\u20e3\u207f\\u20c6\u209b\u20e3\u207d\\u2069\u2089\u20b8\u2040\u2074\u20d5\u2087\u20d2\u20a8\u208a\u20b2\u2021\\U0004f41e\u20b7\u2013\u20e2\u20de\u20ba\u20e6\u2092\ud853\udd1f\\u20cb\\U00054182\\u20c5\u207f\\U00044019\\u206d\\U00015ee9\\u20ff\u20a4\\u20cb\\u2060\u20e5\u20f0\u2094\\u20ff\\u20fa\\U0005cbf4\u20b2\u20e0\u201c\u207f\\u208f\u2057\u2027\u20b3\ud880\udd4c\\u2063\ub6b0\u20a6',\n      constraints={'intervals': IntervalSet(\n           build_intervals([8192, 395288, 601839]),\n       ), 'min_size': 50, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.541920319613658e+307,\n      constraints={'min_value': 2.2977568508831188e+16,\n       'max_value': 2.556278901520293e+307,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 1.541920319613658e+307},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0005901670083403587,
          "overall:gc": 0.0,
          "generate:nodes": 0.021475458925124258
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878929.113087
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='bytes',\n      value=b'\\x98\\x18em\\x87\\x91\\x0b\\xb0\\xfb:^\\xd2\\xe2\\xf4\\x95 \\xd2\\xcd]\\xc2C\\xa6\\x92b\\x1c\\xa3\\xeb\\x1f\\xc4W\\xbd\\xeb\\xcd`\\x83H|\\x83\\xcb\\xb1\\xef\\xc9\\xef',\n      constraints={'min_size': 16, 'max_size': 116},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=3.164756185251548e+307,\n      constraints={'min_value': 0.0,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 0.05},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U000fae5c\\U000fae8a\\U000fae2d\\U000fae7f',\n      constraints={'intervals': IntervalSet(\n           build_intervals([1027574, 1114110]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.7744779280244594},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': 1995359763014277.0,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 7.670503721378557e+307},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 1.1125369292536007e-308},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string', value='', constraints={'intervals': IntervalSet(\n           build_intervals(\n               [8192, 53297, 65535, 176989, 255204, 657429, 841189, 936468],\n           ),\n       ), 'min_size': 0, 'max_size': 100}, was_forced=True, index=None),\n     ChoiceNode(type='bytes',\n      value=b'\\x8b5\\x99\\x8a;\\x11M\\xb4\\xe1\\xfe\\xea\\x1fI\\x8e\\xff,l9\\xf5\\x0b\\xcep\\xd3\\xab~\\x86\\x9c\\xb4Rmv\\x8c\\x8e\\x1f\\x13,9\\xfc\\xb0\\xb8X\\x02\\xb1\\x05\\xc5\\x92{\\x98t\\x89\\xc1\\x07\\xa0\\x808\\x96\\xc0\\xe8\\x92\\xe0\\xa8\\xa9\\xa3\\xf4\\x92\"\\xb1\\r.\\x8fM\\xa9$\\x98D\\xed\\xe3\\x96\\xbfM\\x9cZ\\x89\\xc8\\xaau\\x16z\\x99\\xdf\\xa3@\\x1f\\x87\\x93\\x0chq\\x16',\n      constraints={'min_size': 43, 'max_size': 117},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=16,\n      constraints={'min_value': 7,\n       'max_value': 507,\n       'shrink_towards': 15554,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0004b3ae\\U0004b3e1\\U0004b460\\U000ee76e\\U0004b454\\U0004b46a\\U0004b43d\\U0004b3ff\\U000aba2a\\U0004b430\\U0004b3f8\\U0004b434\\U0004b485\\U0004b39e\\U0004b3a6\\U0004b3ee\\U0004b3fc\\U0004b414\\U0004b469\\U000eb6ee\\U0004b3e3\\U0004b3bf\\U0004b459\\U0004b419\\U0004b39e\\U0004b3fb\\U00058835\\U0004b3bb\\U0004b484\\U00054cd6\\U0004b39a\\U000567c4\\U0004b445\\U0004b40e\\U0009b2e2\\U0004b478\\U0004b3fa\\U0004b3f5\\U0004b395\\U0004b3bd\\U0004b44b\\U00057070\\U0004b410\\U0004b3bb\\U0004b3ea\\U0004b39a\\U0004b3a9\\U0004b416\\U0004b3b3\\U0004b399\\U000c5e4d\\U0004b47d\\U0004b41e\\U0004b402\\U0004b440\\U0004b3d3\\U0004b3ee\\U0004b447\\U0004b39a\\U0004b454\\U0009a847\\U0004b3a6\\U0004b472\\U0004b41e\\U0004b39f\\U0004b3a4\\U000eafa3\\U0004b3e3\\U0004b3c5\\U0004b489\\U0004b401\\U0004b426\\U0004b45e\\U0004b430\\U0004b3a9\\U0004b44f\\U000a7205\\U0004b43c\\U0004b39b\\U0004b411\\U0004b484\\U0004b3ea\\U0004b39a\\U0004b417\\U0004b3e8\\U0004b45c\\U0007b9f9\\U00084dc7\\U0005363d\\U0004b3a4\\U0004b47f\\U0004b3a3\\U0004b411\\U0004b435\\U0004bd30\\U0004b45f\\U0004b46a\\U00093f96\\U0004b3c4\\U0004b3ec\\U0004b45f\\U0004b437\\U0004b3e7',\n      constraints={'intervals': IntervalSet(build_intervals([308110, 985841])),\n       'min_size': 27,\n       'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\ud802\udddd\ud802\udd8d\ud802\udd37\\U0001096c\ud802\uddd4\ud802\uddc2\ud802\udd82\ud802\udd22\ud802\uddff\ud802\udda5\ud802\udde7\ud802\ude03\\U000d8de1\ud866\udd3b\ud802\udd8c\\U00010965\\U00010964\ud802\udd9b\\U00010956\\U000e9db9\ud802\udd8c\ud802\ude1b\\U000f3770\ud85a\ude80\ud802\uddef',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [67868,\n                187228,\n                617665,\n                645537,\n                787215,\n                788957,\n                837242,\n                975860,\n                991553,\n                1029848,\n                1044072,\n                1048419,\n                1079956],\n           ),\n       ),\n       'min_size': 2,\n       'max_size': 102},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.3079069768233765},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 2.6207204969433946e+173},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.0},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'.worker_identity.',\n      constraints={'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'\\xc9\\x8d\\xdf',\n      constraints={'min_size': 3, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': 6.491705405474959e-168,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 1.2368379409121879e+308},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0012424999731592834,
          "overall:gc": 0.0,
          "generate:nodes": 0.042564791860058904
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878913.669773
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.05},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011966697638854384,
          "overall:gc": 0.0,
          "generate:nodes": 0.0008231249521486461
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878911.457881
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U000334f0\\U00033579\\U00033504\\U0004734f\\U0003356e\\U000334ea\\U00095ea1',\n      constraints={'intervals': IntervalSet(\n           build_intervals([210109, 638292, 846394]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0009bd87\\U0009be10\\U0009bd9b\\U0009d22d\\U0009be05\\U0009bd81\\U0009c8d5\\U0009bd55\\U0009bd99\\U0009bda6',\n      constraints={'intervals': IntervalSet(\n           build_intervals([638292, 655743, 846394]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U00087826\\U00068815\\U00060870\\U0007b68d\\U000608e9\\U00060834\\U00060844\\U00073706\\U00060875\\U0006085a\\U00062de0\\U00060862\\U000608ce\\U00060838\\U000608b6\\U0006086d\\U000608fb\\U00060898\\U00060821\\U000691b5\\U00060876\\U000608cb\\U000608c4\\U000608e8\\U00060832\\U0006087a\\U00060833\\U00082aa7\\U00060867\\U000860bf\\U000608ec\\U000608f4\\U00060878\\U0006087a\\U0006083a\\U00068ee9\\U00063b61\\U000608b6\\U000608a4\\U000608b4\\U000608d5\\U00060867\\U00060859\\U00060850\\U0006811d\\U000608bd\\U00060833\\U00060832\\U000608a1\\U0006088f\\U00060837\\U0006081e\\U00060862\\U00060853',\n      constraints={'intervals': IntervalSet(\n           build_intervals([395288, 555415, 601839]),\n       ), 'min_size': 50, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=2.2157588458589656e+16,\n      constraints={'min_value': -6.818675262890638e+16,\n       'max_value': 4.042043268215878e+16,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 0.05},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.5},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=9999,\n      constraints={'min_value': 4270,\n       'max_value': 32744,\n       'shrink_towards': 51,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0003e958\\U0003e9bf\\U0003e8fc\\U0003e8f8\\U0003e9d1\\U0003e96b\\U0003e96a\\U0003e975\\U000456a5',\n      constraints={'intervals': IntervalSet(build_intervals([256237, 397550])),\n       'min_size': 0,\n       'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.6369542527158311},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U000541dc\\U00054208\\U00054199\\U000541df\\U00054134\\U0007b760\\U000541b5\\U00054185\\U0007a8ac\\U00054226',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [344369,\n                354012,\n                411818,\n                663001,\n                664796,\n                747597,\n                906359,\n                910377,\n                1006446],\n           ),\n       ),\n       'min_size': 0,\n       'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u0180\u0165\u0160\u016c\u01c4\u00f7\u0118\\U000c247d\\U000c7c7a\u014c\\U000b5d91',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [198, 48692, 101530, 307321, 486164, 518978, 735832, 1088917],\n           ),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'S',\n      constraints={'min_size': 0, 'max_size': 100},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u00f3T.M\u00caTt\\x89\\x98\ud856\udead',\n      constraints={'intervals': IntervalSet(\n           build_intervals([0, 249781, 579310, 658937]),\n       ), 'min_size': 10, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.7976931348623157e+308,\n      constraints={'min_value': 5.161980252480981e+16,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 4.5895809691029704e+16},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'X\\x92=K\\t\\xfe$\\xf1\\xec\\x90\\x8a',\n      constraints={'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'K\\xee\\xe8@{\\xa8\\x16b\\xbf\\x14\\x13\\xa83J\\x12\\xd3\\xa0N\\xd7\\xbf\\x9c\\xa9\\xdf<\\xac\\x08\\xe0)\\x9cn|\\x1b\\t',\n      constraints={'min_size': 21, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.4157512158842035e+308,\n      constraints={'min_value': -0.3333333333333333,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 4.148598988902453e+161},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'~\\xfdO\\xa15\\x14\\xf2\\x1f\\x02\\x05\\xab',\n      constraints={'min_size': 0, 'max_size': 100},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u3ea0\\U000ee959\u3eb9\u3f52\u3e9f\u3f0e\u3e72\\U000f4746\u3e99\u3e95\u3eac\u3e83\u3ebd\u3f49\u3f03\\ue0ff\u3eeb\u3f52\ud848\uddfc\u3f2c\u3eb3\u3ec1\\U0006e3c4\u3e89\u3f01\u3ed5\u3eaa\u3f34',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [15986,\n                17471,\n                33473,\n                65535,\n                97886,\n                113020,\n                131472,\n                269547,\n                295849,\n                315978,\n                359343,\n                371467,\n                381770,\n                422720,\n                440200,\n                569358,\n                571823,\n                663741,\n                673964,\n                767983,\n                788007,\n                800956,\n                845960,\n                854428,\n                887490,\n                1031850,\n                1054043,\n                1114111],\n           ),\n       ),\n       'min_size': 10,\n       'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-937,\n      constraints={'min_value': -1026,\n       'max_value': -116,\n       'shrink_towards': -98,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\ud876\udea4\ud876\ude28\ud876\ude04\ud876\ude89\ud876\ude58\ud876\ude5d\\U00048523\\U0006cd19\ud876\ude2c',\n      constraints={'intervals': IntervalSet(\n           build_intervals([186834, 471815, 1075031]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=30410,\n      constraints={'min_value': -388,\n       'max_value': None,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string', value='', constraints={'intervals': IntervalSet(\n           build_intervals(\n               [404,\n                6621,\n                190541,\n                203889,\n                340351,\n                361270,\n                427606,\n                444012,\n                536078,\n                540128,\n                590847,\n                611193,\n                692656,\n                833163,\n                1053653,\n                1059751],\n           ),\n       ),\n       'min_size': 0,\n       'max_size': 10_000_000_000}, was_forced=True, index=None),\n     ChoiceNode(type='integer',\n      value=-66108788,\n      constraints={'min_value': -263119369,\n       'max_value': 25082,\n       'shrink_towards': -22514,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=6.880478617660642e+307,\n      constraints={'min_value': -2.6005664827417063e-46,\n       'max_value': 1.679039515018055e+308,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 7.47421633850981e-139},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from integers(0, 1114111).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.002532166021410376,
          "overall:gc": 0.0,
          "generate:nodes": 0.04396829317556694
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878919.148808
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0009bd87\\U0009be10\\U0009bd9b\\U0009e606\\U0009be05\\U0009bd81\\U0009d357\\U0009bd55\\U0009bd99\\U0009bda6',\n      constraints={'intervals': IntervalSet(\n           build_intervals([638292, 685257, 846394]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-9,\n      constraints={'min_value': None,\n       'max_value': 2,\n       'shrink_towards': -81,\n       'weights': None},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00034370803041383624,
          "overall:gc": 0.0,
          "generate:nodes": 0.016579959075897932
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878935.756553
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=6.285423977271983e+307,\n      constraints={'min_value': -5.242405603395847e+16,\n       'max_value': 1.3065071017445701e+308,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 3.9386629629778904e+307},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=9.431803503709003e+105,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 7.010611040345778e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0004fb94\ud268\ud236\ud211\ud235\ud1fd\ud206\ud1b9\ud214\ud245\ud22b\\U0007711a\ud293\ud1e9\\U000386dd\ud26a\ud1a8\\U0006f9ce\\U000c7c04\ud249\ud1cf\ud20a\ud26b\ud1c3\ud289\ud249\ud21b\ud1d8\ud194\ud197\\U0001a5e2\ud1d1\ud267\ud213\ud1d2\ud276\ud212\ud1b7\ud1ce\\U000d7d08\ud251\ud1eb\ud210\ud234\ud204\ud194\ud1c8\ud1f8\ud223\ud1cb\ud27c\\U000d9b94\ud257\ud25b\ud1e1\ud1fb\\U0009f8c4\ud1ef\\U000a444a\ud25d\\U0003d69a\ud276\ud1c4\ud283\ud1d0\ud22a\ud1dd\ud225\ud1fb\ud26b\ud1d8\ud19a\\U0005a97c\ud1a3\ud1f6\ud27e\\U0001263c\ud216\ud23b\ud869\udd26\ud1fe\ud1ed\ud23d\ud1ec\ud26f\ud1ea\ud1ce\ud1ba\ud292\ud212\\U000d2869\ud281\ud234\ud28b\ud25d\ud279\ud24e\ud1cf\ud1e7\\U0006b73b\ud214\ud1f0\ud206\\U0005f488\ud1ca\ud277\ud1a0\ud24c\ud1c4\ud257\\U000d9a19\\U000412ed',\n      constraints={'intervals': IntervalSet(\n           build_intervals([53652, 528733, 620768, 723527, 784112, 904251]),\n       ), 'min_size': 47, 'max_size': 147},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0004309579962864518,
          "overall:gc": 0.0,
          "generate:nodes": 0.006472458073403686
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878906.9721138
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 5.529198097065091e-05,
          "overall:gc": 0.0,
          "generate:nodes": 4.737504059448838e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878910.3740642
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='bytes',\n      value=b'&=\\x94\\x06\\xa6\\x19:\\xc6\\xddJ\\xd5*\\xa5\\x03\\xdc\\xd5\\x10\\xc4h\\xd4\\xc2\\xdeg\\x0f\\x133c:\\xd2(JL\\t\\xb2T\\x1a\\x04\\xae, \\x7f\\xca\\x81\\x8e\\x06\\x9aV\\xdd+\\xc2\\x80r\\x92\\xe9\\xd5\\xb6N\\xfa\\xb72\\xd0\\x7f\\xbc\\xd9\\x0b\\xda\\xee\\x008/R\\xa0\\xd90y\\xa5\\x95g\\xad\\x1c',\n      constraints={'min_size': 46, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'/B\\x0e\\xfe\\xd4SM\\xc8\\x92\\xf4\\xfdc-\\xedq3\\xe2oU\\xd4\\xa4\\xdc\\xa8\\xf4I\\xb8\\xa3>\\xfd9\\xce\\x0c8\\xd5\\rLu',\n      constraints={'min_size': 31, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0009bd87\\U0009be10\\U0009bd9b\\U000a5d1d\\U0009be05\\U0009bd81\\U000cd2c6',\n      constraints={'intervals': IntervalSet(\n           build_intervals([638292, 846394, 878790]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0004f27f\\U0005f261\\U00054be3\ud860\udec9\\U00058afe\ud860\udf5a\ud860\ude8d\ud860\ude9d\\U0003b15f\ud860\udece\ud860\udeb3\ud86a\udc39\ud860\udebb\ud860\udf27\ud860\ude91\ud860\udf0f\ud860\udec6\ud860\udf54\ud860\udef1\ud860\ude7a\ud883\udc0e\ud860\udecf\ud860\udf24\ud860\udf1d\ud860\udf41\ud860\ude8b\ud860\uded3\ud860\ude8c\\U0004a500\ud860\udec0\\U0004db18\ud860\udf45\ud860\udf4d\ud860\uded1\ud860\uded3\ud860\ude93\ud882\udd42\ud86d\uddba\ud860\udf0f\ud860\udefd\ud860\udf0d\ud860\udf2e\ud860\udec0\ud860\udeb2\ud860\udea9\\U00056e70\\U0003723e\ud860\udebd\ud869\udc93\ud860\ude8b\ud860\udf2b\ud860\udf47\ud860\udf06\ud860\udf6f\ud860\udeac',\n      constraints={'intervals': IntervalSet(\n           build_intervals([164465, 395288, 601839]),\n       ), 'min_size': 50, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=6.430302397329667e+307,\n      constraints={'min_value': 2.2977568508831188e+16,\n       'max_value': 1.4130967583873843e+308,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 2.3823487456653346e+307},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.7276314820986799},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': 0.0,\n       'max_value': 0.0,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 5e-324},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=23609,\n      constraints={'min_value': 23577,\n       'max_value': None,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=inf,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 4.648349656890312e+16},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.0130480198471001e+308,\n      constraints={'min_value': 4.2495295211752985e+52,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 6.1895927307724424e-211},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-12151,\n      constraints={'min_value': None,\n       'max_value': 126,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u01ec\u040c\u01fd\u01da\\U000fc4e0\ud807\udd61\u01b3\u01b9\u01b7\u040d\u0435\u01dd\u042c\u03f8\u0436\u01b9\\U0003c0ad\u019f',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [404,\n                512,\n                1000,\n                278995,\n                430320,\n                575798,\n                772497,\n                866284,\n                911303,\n                1045643,\n                1098748],\n           ),\n       ),\n       'min_size': 11,\n       'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0009659999632276595,
          "overall:gc": 0.0,
          "generate:nodes": 0.015784875955432653
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878943.484612
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='bytes',\n      value=b'\\x03\\xd0\\x83\\x04\\x89\\xaa\\xdd:\\tE\\xc9\\xc8\\xea\\xa7\\x89\\xdc\\x18*',\n      constraints={'min_size': 12, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.0},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u9e7f\u9eab\u9efa\u9f09\u9ebb\u9f37\u9e86\\U000dd83a\\U000bfb7a\u9f3f\u9eb9\u9e81\\U0008bcbc\u9ebe\u9ef4',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [40521,\n                231681,\n                275899,\n                419754,\n                506800,\n                584880,\n                700706,\n                756688,\n                762457,\n                848425,\n                872396,\n                993689,\n                1035926,\n                1114110],\n           ),\n       ),\n       'min_size': 9,\n       'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-69_858_023_554_475_516_575_074_988_747_007_323_452,\n      constraints={'min_value': -69_858_023_554_475_516_575_074_988_747_007_323_554,\n       'max_value': -16797,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=3.626760869144691e+16,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 3.5978279482942452e+16},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.8985968861906548},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0004629160393960774,
          "overall:gc": 0.0,
          "generate:nodes": 0.008467086125165224
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878916.8831968
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='integer',\n      value=19351,\n      constraints={'min_value': 11274,\n       'max_value': None,\n       'shrink_towards': 2,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': 0.14949021694758804,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 1.030282288275972e+308},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b\"\\xcb\\x9a\\x8b\\xc2\\x0f? Q\\xbb\\xd3\\x87\\xde\\x18\\x88o\\x1fs\\xdb\\xa0\\xb4\\xcb'\\x19?\\xb7\\xf2n\\xeeS\\r\\xbdJ\\xf4\\xd3v\\x0e\\xa8\\xfa^I\\xe7\\xa3\\xf7*\\xf4\\xf4Tlw\\x1c\\xbf\\x8e-z\\x0c\\x9a\\xa7\\xe9\\xd0\\x93P\\x16 p=*\\xd1\\x9d\",\n      constraints={'min_size': 50, 'max_size': 150},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'\\xec\\xf9\\xb47\\xf8P3<\\xf1\\x1fI\\x92\\xdb/\\xfa\\xe7\\xad\\x19%\\xa7]\\xa9K\\xc1\\xaf\\xd3\\xa2w\\x1d\\xb4\\xaduD',\n      constraints={'min_size': 24, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'g\\xaf\\xfc\\xe9\\xcd\\xb2\\xa7',\n      constraints={'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0019347919733263552,
          "overall:gc": 0.0,
          "generate:nodes": 0.017376581963617355
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878970.0967581
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='integer',\n      value=18258,\n      constraints={'min_value': 18252,\n       'max_value': None,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 1.0},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'4\\xad\\xfe\\xae\\x8f\\x87*P\\xf1\\xc7\\x82\\xcfB\\xdc\\xb8\\x16\\r\\xa3w\\xd3\\xe0\\xf1.\\xf9\\xeay',\n      constraints={'min_size': 22, 'max_size': 122},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 8.150856206189221e-122},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-18162,\n      constraints={'min_value': None,\n       'max_value': 22856,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='+R\\x97\\x95\u00ec\u00ef\\x8c\\x82\u00a6\u00f9\\U0003289b5m\ud842\udd1b\\x17\u00d3\\x07\u00e0Ye\\x1b\\x881\u00af\u00b8\u00aaKc\\x0f2\u00fa\u00e3?\u00afYz\\x15\\U000fde4fa\\U00108010\ud85a\udec9_;\u00d29GG\u00e0\\xad\\x196\u3dac\u00c3\\x10\\x86\\x90\\U0003345aj]\ud86d\ude18\\x99\\U000fd8707\ud83d\udd34\u00fc\\x8e\\x8aok\\x9c\u00e9\\U0002ebf4\ud800\udc91F\u00b6$\\U0001c9d7\u00e0C\u00f0',\n      constraints={'intervals': IntervalSet(\n           build_intervals([0, 238418, 459236, 464328, 1022369, 1101802]),\n       ), 'min_size': 44, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'-S\\x196\\xd7\\xc1\\x90\\xa5\\xf0\\xbf\\xbf\\xf4n\\xf3\\xe2\\xb5|\\xaf\\x07\\xb3eP\\x0bN\\xbb\\x82{\\xb9\\x8a/\\x90\\xc6=\\x17\\x14\\x91f',\n      constraints={'min_size': 25, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u00a8\u00fa\\x89\u00d5\u00be\u00e2L\\x07\\x0b\u00e3\\x02E\u00bcs\\U0005d3a3y\\U000b4fcd\\U000b9a10\\U000d5755\\U000c1c3d \u00b2\\U00063308\\x84+\u00e6/\u00efG\u00d2\\x16',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [0,\n                34563,\n                94991,\n                156286,\n                355349,\n                436716,\n                668219,\n                930975,\n                1041862,\n                1045419],\n           ),\n       ),\n       'min_size': 18,\n       'max_size': 118},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u023e',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [404,\n                1000,\n                1024,\n                65535,\n                142048,\n                155363,\n                654826,\n                677043,\n                693835,\n                736168,\n                739015,\n                904676,\n                1044907,\n                1050979,\n                1103975],\n           ),\n       ),\n       'min_size': 0,\n       'max_size': 100},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0010299579589627683,
          "overall:gc": 0.0,
          "generate:nodes": 0.011546003923285753
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878958.054683
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0009bd87\\U0009be10\\U0009bd9b\\U000a5d1d\\U0009be05\\U0009bd81\\U000cd2c6',\n      constraints={'intervals': IntervalSet(\n           build_intervals([638292, 846394, 913495]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u6f76\u6f92\u6eed\u6f74\u6ec3\u73d7\u6ec9\u6f1b\ud866\udea0\u6ebd\u6f9d\u6f5a\u6f53\u6f8f\u6f1d\u6ecc\u6f9e\u6eb4\\U0009b998\u6f99\\U000637fc\u6f71\u6f08\u6f6f\u6f40\u6f1e\u6eb6\u6f88\u6f25\u6f88\u6f36\u6f3c\u6f33\u6ebb\u6f75\u6f4e\u6f1b\u6f74\u6f9f\u6f38\u6fa4\u6eb7\u6f48\u6f3e\u6f72\u6f66\\U0005921e\u6ee6\u6ee7\u6f69\u6f65\u6ee7\u6f9b\u6efd\u6f9e\\U00055dd7\u6efc\u6f2d\\U00094638\u6eec\ud87a\udfa9\u6ee2\u6ec6\u6ec7\u6ec2\u6f1e\u6eb2\u6f70\u6f52\u6f44\u6ec7\u6f23\u6f9d\u6f38\u6f7b\u6f7d\u6f64\u6f89\u6f78\u6f99\u6eda\u6f97\u6f05\u6f55\u6f5d\u6f3e\u6f12\u6f4d\u6edb\u6f2e\ud851\uddd9\u6f76\u6f19\u6f04\u6eeb\u6f87\u6ea9\u6ef9\u6f16\u6f4d\u6f78\u6ec5\u6ec8\u6f7f\\U0004affc\u6f05\u6ed6\u6f83\u6f7c\ud845\udfb3\u6f2d\u6f2e\u6f1d\u6f4f\u6f73\u6f45\u6f84\u6ed2\u6f29\u6f9f\\U0003ca3c\u6f7b\u6f75\u6f97\\U00062809\u6f79\\U00050a86\u6eb5\u6f14\\U00043565\u6f75\u6ed8\u6ee1\\U00062b07\u6f1a\uc906\u6f6f\u6ee3\u6f11\u6f02\\U0009f9fd\u6fa2\u6f7d\\U000a2c32\u6f1b\u6f25\u6f28\u6f38',\n      constraints={'intervals': IntervalSet(\n           build_intervals([28329, 423466, 601839, 687780]),\n       ), 'min_size': 48, 'max_size': 148},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0005281249759718776,
          "overall:gc": 0.0,
          "generate:nodes": 0.007182875939179212
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878936.8517828
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\ud84e\uddff\ud84e\ude88\ud84e\ude13\\U0003785e\ud84e\ude7d\ud84e\uddf9\\U000863b0',\n      constraints={'intervals': IntervalSet(\n           build_intervals([145868, 638292, 846394]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U00060838\\U00060915\\U00060909\\U00060883\\U0006261f\\U000608df\\U00060819\\U000608a0\\U0006088d\\U0006084c\\U00060827\\U0008a23a\\U000608db\\U000608f0\\U00060889\\U00060915\\U000608c8\\U00060888\\U000608ac\\U000608ed\\U0006084b\\U0008ee19\\U00060855\\U000608f0\\U00060879\\U00060917\\U000608e1\\U00060829\\U000608e6\\U00060870\\U000608d7\\U0008b0c8\\U0006086b\\U000608e1\\U00060827\\U000608b5\\U000608e1\\U0006086e\\U0006081e\\U0006088e\\U000608c8\\U000608cc\\U000608a1\\U0006081a\\U0006085a\\U00060881\\U00077e95\\U00080ded\\U000608ec\\U000608c1\\U0006f435\\U00060874\\U0006089a\\U0006083c\\U00061800\\U000608a1\\U000608c8\\U00070e6f\\U0007208e\\U000608bc\\U00074896\\U00060878\\U00060883\\U00060822\\U0006082a\\U0008da9c\\U00060888\\U000608fe\\U000608e2\\U000608f2\\U00060884\\U0006083f\\U00060869\\U0006081c\\U00060887\\U0006086f\\U0006082b\\U00060881\\U0006087b\\U000608df\\U000608be\\U000608a8\\U000608bf\\U0006085d\\U00060849\\U000608c8\\U00060910\\U00060839\\U0006b6dc\\U000608a1\\U0006089a\\U000608ad\\U00060912\\U0006084d\\U000608da\\U00060858\\U000608d9\\U00060841\\U000608af\\U00060902\\U000637f1\\U0008b798\\U0006082c\\U000608ef\\U00060893\\U000608f6\\U000608ae\\U000608b9\\U0006082c\\U000608af\\U000608e0\\U00074e0f\\U00060851\\U00060908\\U00060882\\U00060841\\U00090c75\\U000608c5\\U000608b5\\U000859ff\\U000608c3\\U00060847\\U000702b4\\U0006083c\\U0006133f\\U00060914\\U0006084b\\U0006083f\\U00060873\\U000608bb\\U000608ae\\U00060828\\U00060881\\U00060868\\U00060896\\U0007d282\\U000608f8\\U000608e2\\U0007fa89\\U000608ed\\U0008cd65\\U00068939\\U000608a5\\U00060845\\U0008267b\\U000608f8\\U0006088b\\U0006090d\\U000608c4\\U000608a4\\U0006083c\\U000608d4\\U00060880\\U000608d6\\U00060905\\U000608d9\\U00060887\\U00060832\\U000608ca\\U0006082c\\U00070e66\\U00060842\\U00092378\\U00060841\\U000608db\\U000608e3\\U00060858\\U00060884\\U000608e9\\U000608a6\\U0006081a\\U00060822\\U00060894\\U000608a9\\U000608b7\\U000608fc\\U0006086e\\U00060856\\U000608dc\\U00060824\\U000608af\\U0006085d\\U000608b7\\U000608bd\\U000608fe\\U000608c5\\U00060914\\U000608db\\U00072560\\U0006087d',\n      constraints={'intervals': IntervalSet(\n           build_intervals([395288, 601839, 1076694]),\n       ), 'min_size': 46, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 1.3612149709465117e+190},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.9709951805454293},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u0457\u049d\\U0008c327\\U0007376e\u04e7\\U00093f62\u047e\u04fe\u04bf\u04aa\\U000107da\u04b5\u042e\u044d\u0492\u0443\u04f7\u0477\u04e9\\U00033128\u041f\u04b0\u0429\u042a\u04f2\u044f\ud85d\udd34\\U0009f50a\\U00079048\u04c4\u04e8\u040a\u0439\u04ce\u04fc\u04ec\u0455\u0494\u0460\u04ac\u041b\u0444\u04f8\u04bb\u04ba\u0430\u0433\u04d0\u0428\u04a0\u0471\u0426\\U0001e198\u04f8\u0469\u04a7\u040e\u04bf\u043f\\U00074e9f\u04ba\u04cd\\U00032a47\u04b7\u0408\u04cb\u047c\u0428\u04ff\u0430\u0416\u0456\u0482\u0470\u04cc\u04b7\u04fe\u045f\u04ba\\U0004e9e7\u1d7b\\U0001a7dd\u04f5',\n      constraints={'intervals': IntervalSet(\n           build_intervals([1024, 730239, 959223, 966884]),\n       ), 'min_size': 25, 'max_size': 125},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=5.863591314930844e+152,\n      constraints={'min_value': 3.29143624760258e-117,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 0.05},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-31438,\n      constraints={'min_value': -1_025_256_485,\n       'max_value': None,\n       'shrink_towards': -247479298,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=inf,\n      constraints={'min_value': inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 8422493433170883.0},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'',\n      constraints={'min_size': 0, 'max_size': 0},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 6.2855435360013544e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.99999},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.7976931348623157e+308,\n      constraints={'min_value': 5.952762730039931e-08,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 2.0343218028053985e+307},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=12783,\n      constraints={'min_value': -53,\n       'max_value': 15778,\n       'shrink_towards': 0,\n       'weights': {549: 0.002734730780915716,\n        11571: 0.024855678616701814,\n        15723: 0.040683738558496205,\n        13323: 0.10936831545234205,\n        12582: 0.09143506249616647,\n        4308: 0.01800084933994158,\n        11696: 0.057744192375067116,\n        10813: 0.005621196196246209,\n        12783: 0.09330230827622239,\n        15007: 0.034977324363506215,\n        13682: 0.0976375546566612}},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='',\n      constraints={'intervals': IntervalSet(\n           build_intervals([345713, 441520, 543444])),\n       'min_size': 0,\n       'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0036308339913375676,
          "overall:gc": 0.0,
          "generate:nodes": 0.036205832147970796
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878955.8027892
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': 3.8284928622394194e-126,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 1.1460863667149634e+16},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=25,\n      constraints={'min_value': None,\n       'max_value': 5949,\n       'shrink_towards': -27036,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-13662,\n      constraints={'min_value': -21518,\n       'max_value': 1000,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-74,\n      constraints={'min_value': None,\n       'max_value': 26307,\n       'shrink_towards': -69,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 6.249946162952789e+16},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'\\x11f\\xc1-\\xd1',\n      constraints={'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=7_789_335_095_033_272_590,\n      constraints={'min_value': None,\n       'max_value': None,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U000b908e\\U00086211\\U00086137\\U0008616a\\U000861f9\\U00086158\\U000861a1\\U00086191\\U000861bd\\U00086176\\U0008619f\\U000a8820\\U000861f6\\U00086144\\U0008613a\\U000861b2\\U00086217\\U000861b6\\U0008620c\\U00086218\\U000861fe\\U000861d3\\U00086199\\U000861ce\\U000b70e9\\U000861f5\\U00086185\\U0008611b\\U000861d7\\U000861ba\\U00094bcb\\U0008620a\\U000861a7\\U00086154\\U000861f8\\U000861db\\U0008619d\\U00086206\\U000861bb\\U000861cf\\U0008615c\\U000861b3\\U00086180\\U000861fb\\U000861f6\\U000861ac\\U00086209',\n      constraints={'intervals': IntervalSet(\n           build_intervals([549146, 1114111])),\n       'min_size': 44,\n       'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'C\\x8fuY\\xcbB\\x9a\\xde\\x12\"\\xbe\\x88\\x12\\x89=\\xfa>\\x1a\\xed\\xfaRL\\\\\\x07\\xfbx\\xeb\\xcf\\xd3\\x9b\\xb7\\x17\\x86\\xc7\\xef\\x90\\xab\\xa5\\xc8;5F\\x88\\n\\xdc\\xb3\\xe5\\xb8\\xc7\\x9ch\\xa8\\x07\\x05v\\x7f^NLo3\\x03\\xd1\\x84\\xb5\\xfdhu\\xe3\\xec\\x80\\x1a\\xafS\\x1a\\xd3\\x9d\\xd4\\xc9\\x97pz}f\\xea\\x88B\\xedp\\xdc\\xea\\x9f\\xca\\x1b}\\xae\\xc8\\x9f\\xca\\xd5\\xe4\\xbd\\x92$\\x1d\\xeef1\\xdb\\xa0%\\xe3\\xe6=\\xa6\\x86\\xe3\\xae\\x8e',\n      constraints={'min_size': 31, 'max_size': 131},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_670_354_470_758_462_688,\n      constraints={'min_value': None,\n       'max_value': None,\n       'shrink_towards': 21373,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=304765928,\n      constraints={'min_value': None,\n       'max_value': None,\n       'shrink_towards': 412312412,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=13661,\n      constraints={'min_value': 13577,\n       'max_value': None,\n       'shrink_towards': 32650,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.8084901927947388},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-32,\n      constraints={'min_value': -83,\n       'max_value': -13,\n       'shrink_towards': 10711,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b\"\\x82{'\\x8a\\xab\\xe4\\x11\\x07_\\xd5p\",\n      constraints={'min_size': 0, 'max_size': 29},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u5357\u5353\u5397\u5350\ud802\udc5d\u5371\ud822\udd07\u5315\u534b\u52d6\u5343\u52e6\u5369\u52c9\\U00019f6f\u533a\\ue4f4\u52ea\u532e\u534a\u5320\u533b\u5361\u52b9\u52bb\u5362\ud855\ude77\u53a1\u5386\u530e\u52f0\u5352\u536e\u534d\u5389\u5366\u5315\u533b\u5387\u52f0',\n      constraints={'intervals': IntervalSet(build_intervals([21162, 169006])),\n       'min_size': 21,\n       'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-1_565_144_191,\n      constraints={'min_value': None,\n       'max_value': 4959,\n       'shrink_towards': 22084,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='2',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [0,\n                61233,\n                268075,\n                350487,\n                396119,\n                403535,\n                500628,\n                547607,\n                585181,\n                600645,\n                677444,\n                684283,\n                874307,\n                971233],\n           ),\n       ),\n       'min_size': 0,\n       'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=15294,\n      constraints={'min_value': None,\n       'max_value': 29878,\n       'shrink_towards': -14746,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 1.0},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'',\n      constraints={'min_size': 0, 'max_size': 100},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=65535,\n      constraints={'min_value': 8192,\n       'max_value': None,\n       'shrink_towards': -1_965_109_677,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'\\x11\\xf8g\\x85\\taj\\xc5\\x15\\x93\\xbd\\x00x\\x85\\xce\\xec\\xa8\\xbc^\\xcb\\x85\\xda\\xb3\\\\\\xdfi\\x07\\x04.\\xa6\\xd1\\x1b\\xde\"\\xa1{\\xb7S\\xfd\\xc5`Y,\\xcc/\\rv[+\\x1bx:J\\x94|\\xa1r?_\\r',\n      constraints={'min_size': 49, 'max_size': 72},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'$\\xef\\x9c\\xf2!d\\xa4iT\\xc1\\x99*\\xe3\\x14E\\x9f\\xe6\\x8d}%;\\xb1\\x8f\\xff\\x03&ph7\\x0b6\"\\xa5\\xc3%\\xdc\\x1fK\\xc6\\x8cVH+\\x99\\xb7\\xdf\\xca\\x8b\\xdb:\\x8d\\x12\\xe9\\xed\\xfa',\n      constraints={'min_size': 50, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'g',\n      constraints={'min_size': 0, 'max_size': 100},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='bytes',\n      value=b'\\x8b\\x0b\\x10\\x08\\xeaA',\n      constraints={'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0016634589992463589,
          "overall:gc": 0.0,
          "generate:nodes": 0.03230737190460786
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878947.9783921
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -1.5486753315424982e+193,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0009bd87\\U0009be10\\U0009bd9b\\U000a5d1d\\U0009be05\\U0009bd81\\U000a1262\\U0009bd55\\U0009bd99\\U0009bda6',\n      constraints={'intervals': IntervalSet(\n           build_intervals([638292, 783850, 846394]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U00087826\\U00068815\\U00060870\\U000910a5\\U00060901\\U00060834\\U00060844\\U00073706\\U00060875\\U0006085a\\U00062de0\\U00060862\\U000608ce\\U00060838\\U000608b6\\U0006086d\\U000608fb\\U00060898\\U00060821\\U000691b5\\U00060876\\U000608cb\\U000608c4\\U000608e8\\U00060832\\U0006087a\\U00060833\\U00082aa7\\U00060867\\U000860bf\\U000608ec\\U000608f4\\U00060878\\U0006087a\\U0006083a\\U00068ee9\\U00063b61\\U000608b6\\U000608a4\\U000608b4\\U000608d5\\U00060867\\U00060859\\U00060850\\U0008f417\\U0006f7e5\\U00060864\\U00062a3a\\U00060832\\U000608a1\\U000608d4\\U0007133d\\U00074e67\\U0006ebe8\\U00060853\\U00073da8\\U0006fa6b\\U000608a4\\U000608e0\\U000608fc\\U0006084b\\U000699f9\\U00060902\\U00060860\\U000608d0\\U000608fb\\U00060897\\U000608de\\U000608b3\\U000608fb\\U00060895\\U00060881\\U000608a1\\U000608d0\\U00060858\\U0006088c\\U000608ed\\U0006089f\\U000608ea\\U000608c0\\U000608a2\\U000608ca\\U00060839\\U000872a7\\U000608cf\\U0006082b\\U000608fa\\U000608f6\\U000608d2\\U000608fe\\U000608aa\\U00071f27\\U000608e3\\U00089959\\U000608dd\\U00060897\\U000818a4\\U00060885\\U0006a80c\\U00060917\\U000608bc\\U000608e3\\U00060878\\U000608fd\\U00060908\\U000608ac\\U00060917\\U00060912\\U0008de92\\U000608ca\\U000608f8\\U00060834\\U00060897\\U000608a7\\U0006086f\\U0006083f\\U000608cb\\U0007793e\\U0006087b\\U000653f0\\U000608be',\n      constraints={'intervals': IntervalSet(\n           build_intervals([395288, 601839, 638407]),\n       ), 'min_size': 50, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=6.430302397329667e+307,\n      constraints={'min_value': 2.2977568508831188e+16,\n       'max_value': 1.4130967583873843e+308,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 2.3823487456653346e+307},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.7276314820986799},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 1.8806077676942022e+307},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-50_959_148_011_950_193_947_889_083_766_382_775_878,\n      constraints={'min_value': -50_959_148_011_950_193_947_889_083_766_382_775_903,\n       'max_value': -24091,\n       'shrink_towards': 512,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.032730841959069064},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=23270,\n      constraints={'min_value': 20442,\n       'max_value': None,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\u04af\u041b\u04a3\u04a4\u0419\u042f\u041c\u04c7\u0499\u0415\\U0006c2cd\u0412\\U000ac621\u03e9\u0482\\U0007fa7e\u047a\\U0006e0d3\u0425\u03f4\u04ba\u03f2\u0466\u0437\u0498\u0441\u04c2\\U00067f61\u04ac\u04af\\U0008da7e\u03f9\u0491\u0412\u046b\\U000689e6\u0445\u048d\u04e4\u043f\u04bf\u04e4\\U000a602c\\U0008b385\u0479\u0494\u0465\u0431\u0408\u0492\u0452\u0457\u0494\u04c5\u54c4\u0425\u049b\u042a',\n      constraints={'intervals': IntervalSet(\n           build_intervals(\n               [1000,\n                31777,\n                53040,\n                65535,\n                129799,\n                155284,\n                423998,\n                822812,\n                923219,\n                946659,\n                1018598,\n                1026281,\n                1041233,\n                1114111],\n           ),\n       ),\n       'min_size': 32,\n       'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 4.502688278555001e-300},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.12457509734002084},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from integers(0, 1114111).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.0011601250153034925,
          "overall:gc": 0.0,
          "generate:nodes": 0.01836683403234929
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878968.999137
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='integer',\n      value=1559,\n      constraints={'min_value': 2,\n       'max_value': 29590,\n       'shrink_towards': 0,\n       'weights': {1559: 0.06293948969049354,\n        11355: 0.0035974898829068975,\n        16146: 0.06956057368037812}},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='float',\n      value=1.6735811095548287e+307,\n      constraints={'min_value': 7.729150661572541e+155,\n       'max_value': 9.010439312669329e+307,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 4.663344346780541e+16},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U000a3c88',\n      constraints={'intervals': IntervalSet(build_intervals([362821, 846394])),\n       'min_size': 0,\n       'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 1.1125369292536007e-308},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=300,\n      constraints={'min_value': None,\n       'max_value': 13090,\n       'shrink_towards': 22304,\n       'weights': None},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-126,\n      constraints={'min_value': None,\n       'max_value': 2_068_922_689,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.8608745466563901},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-84,\n      constraints={'min_value': None,\n       'max_value': 0,\n       'shrink_towards': 8192,\n       'weights': None},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.000589667004533112,
          "overall:gc": 0.0,
          "generate:nodes": 0.01128887600498274
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878950.2096949
      }
    ],
    "corpus": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='string',\n      value='\\x07M\\U00037a47!',\n      constraints={'intervals': IntervalSet(build_intervals([2, 289680])),\n       'min_size': 0,\n       'max_size': 100},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00012874999083578587,
          "overall:gc": 0.0,
          "generate:nodes": 0.0015434999950230122
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878948.783498
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='integer',\n      value=-5,\n      constraints={'min_value': -6,\n       'max_value': 1,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011262501357123256,
          "overall:gc": 0.0,
          "generate:nodes": 0.0012316660140641034
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878954.429058
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='integer',\n      value=-15869,\n      constraints={'min_value': None,\n       'max_value': None,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011783401714637876,
          "overall:gc": 0.0,
          "generate:nodes": 0.0011510830372571945
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878935.485901
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='integer',\n      value=-24314,\n      constraints={'min_value': None,\n       'max_value': -44,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=True,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0001175839570350945,
          "overall:gc": 0.0,
          "generate:nodes": 0.001283208024688065
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878945.5966542
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=-inf,\n      constraints={'min_value': -inf,\n       'max_value': 1.307139659154326e+16,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 9.622844743052615e+98},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.000116499955765903,
          "overall:gc": 0.0,
          "generate:nodes": 0.0011350000277161598
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878968.185493
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='integer',\n      value=-9753,\n      constraints={'min_value': None,\n       'max_value': None,\n       'shrink_towards': 2,\n       'weights': None},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011587503831833601,
          "overall:gc": 0.0,
          "generate:nodes": 0.0011443339753895998
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878944.565959
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='bytes',\n      value=b'C{U',\n      constraints={'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011558301048353314,
          "overall:gc": 0.0,
          "generate:nodes": 0.0009157079621218145
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878935.945238
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='integer',\n      value=11831,\n      constraints={'min_value': -36,\n       'max_value': None,\n       'shrink_towards': 0,\n       'weights': None},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00012074998812749982,
          "overall:gc": 0.0,
          "generate:nodes": 0.001150708005297929
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878939.614987
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='string',\n      value='\ud869\ude89\ud887\uddde\ud869\udeab\\U00034621',\n      constraints={'intervals': IntervalSet(\n           build_intervals([173609, 236006, 730368]),\n       ), 'min_size': 0, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0001266660401597619,
          "overall:gc": 0.0,
          "generate:nodes": 0.0015828749747015536
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878908.32247
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=3.402823466e+38,\n      constraints={'min_value': 0.0,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 9007199254740992.0},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0001177910016849637,
          "overall:gc": 0.0,
          "generate:nodes": 0.001113290956709534
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878961.5640461
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='integer',\n      value=95,\n      constraints={'min_value': 2,\n       'max_value': 112,\n       'shrink_towards': 0,\n       'weights': {4: 0.05}},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00013045797822996974,
          "overall:gc": 0.0,
          "generate:nodes": 0.0019264579750597477
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878956.837441
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 2.873273735354358e+16},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.14949021694758804},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U0009bd87\\U0009be10\\U0009bd9b\\U000a5d1d\\U0009be05\\U0009bd81\\U000cd2c6',\n      constraints={'intervals': IntervalSet(build_intervals([638292, 846394])),\n       'min_size': 0,\n       'max_size': 10_000_000_000},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='integer',\n      value=-7_747_876_218_385_873_990,\n      constraints={'min_value': None,\n       'max_value': -23,\n       'shrink_towards': 2_000_922_496,\n       'weights': None},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 2.2935511453404842e-234},\n      was_forced=True,\n      index=None),\n     ChoiceNode(type='string',\n      value='\\U00087826\\U00068815\\U00060870\\U000910a5\\U00060901\\U00060834\\U00060844\\U00073706\\U00060875\\U0006085a\\U00062de0\\U00060862\\U000608ce\\U00060838\\U000608b6\\U0006086d\\U000608fb\\U00060898\\U00060821\\U000691b5\\U00060876\\U000608cb\\U000608c4\\U000608e8\\U00060832\\U0006087a\\U00060833\\U00082aa7\\U00060867\\U000860bf\\U000608ec\\U000608f4\\U00060878\\U0006087a\\U0006083a\\U00068ee9\\U00063b61\\U000608b6\\U000608a4\\U000608b4\\U000608d5\\U00060867\\U00060859\\U00060850\\U0008f417\\U0006f7e5\\U00060864\\U00062a3a\\U00060832\\U000608a1\\U000608d4\\U0007133d\\U00074e67\\U0006ebe8\\U00060853\\U00073da8\\U0006fa6b\\U000608a4\\U000608e0\\U000608fc\\U0006084b\\U000699f9\\U00060902\\U00060860\\U000608d0\\U000608fb\\U00060897\\U000608de\\U000608b3\\U000608fb\\U00060895\\U00060881\\U000608a1\\U000608d0\\U00060858\\U0006088c\\U000608ed\\U0006089f\\U000608ea\\U000608c0\\U000608a2\\U000608ca\\U00060839\\U000872a7\\U000608cf\\U0006082b\\U000608fa\\U000608f6\\U000608d2\\U000608fe\\U000608aa\\U00071f27\\U000608e3\\U00089959\\U000608dd\\U00060897\\U000818a4\\U00060885\\U0006a80c\\U00060917\\U000608bc\\U000608e3\\U00060878\\U000608fd\\U00060908\\U000608ac\\U00060917\\U00060912\\U0008de92\\U000608ca\\U000608f8\\U00060834\\U00060897\\U000608a7\\U0006086f\\U0006083f\\U000608cb\\U0007793e\\U0006087b\\U000653f0\\U000608be',\n      constraints={'intervals': IntervalSet(build_intervals([395288, 601839])),\n       'min_size': 50,\n       'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=6.430302397329667e+307,\n      constraints={'min_value': 2.2977568508831188e+16,\n       'max_value': 1.4130967583873843e+308,\n       'allow_nan': True,\n       'smallest_nonzero_magnitude': 2.3823487456653346e+307},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='boolean',\n      value=True,\n      constraints={'p': 0.7276314820986799},\n      was_forced=False,\n      index=None),\n     ChoiceNode(type='float',\n      value=0.0,\n      constraints={'min_value': 0.0,\n       'max_value': 0.0,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 5e-324},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0006801250274293125,
          "overall:gc": 0.0,
          "generate:nodes": 0.02032200008397922
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878906.441845
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='bytes',\n      value=b'g\\xe4\\x00\\x84\\x17\\xaeU\\xf6\\xe1\\xd7\\x88\\xa8\\xbf0\\x81MDF\\xd0',\n      constraints={'min_size': 6, 'max_size': 10_000_000_000},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011774996528401971,
          "overall:gc": 0.0,
          "generate:nodes": 0.0009746659779921174
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878965.4536462
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='float',\n      value=-3.402823466e+38,\n      constraints={'min_value': -inf,\n       'max_value': inf,\n       'allow_nan': False,\n       'smallest_nonzero_magnitude': 474167647850097.0},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.000128875020891428,
          "overall:gc": 0.0,
          "generate:nodes": 0.001331999956164509
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878944.59602
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='bytes',\n      value=b'',\n      constraints={'min_size': 0, 'max_size': 1},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011912500485777855,
          "overall:gc": 0.0,
          "generate:nodes": 0.0009313750197179615
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878940.041743
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_drawing_prefix_exactly(\n    nodes=[ChoiceNode(type='boolean',\n      value=False,\n      constraints={'p': 0.0},\n      was_forced=False,\n      index=None)],\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011625001206994057,
          "overall:gc": 0.0,
          "generate:nodes": 0.0007617489900439978
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46231,
          "imported_at": 1747878904.081166
        },
        "property": "tests/test_provider.py::test_drawing_prefix_exactly",
        "run_start": 1747878968.016057
      }
    ]
  },
  "tests/test_provider.py::test_draw_past_prefix": {
    "rolling": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('float',\n     {'min_value': -inf,\n      'max_value': 0.0,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 3925277275798424.0}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00012654095189645886,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0004183329874649644,
          "generate:random": 7.4160052463412285e-06,
          "generate:unlabeled_2": 2.379197394475341e-05,
          "generate:unlabeled_3": 3.179203486070037e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878945.792222
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('bytes',\n     {'forced': None, 'min_size': 0, 'max_size': 10_000_000_000}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00010454095900058746,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.00026599998818710446,
          "generate:random": 9.040988516062498e-06,
          "generate:unlabeled_2": 1.9167026039212942e-05,
          "generate:unlabeled_3": 1.2459000572562218e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878933.76754
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('boolean',\n     {'p': 0.12829604316986612, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 6.620801286771894e-05,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.00011379097122699022,
          "generate:random": 7.957976777106524e-06,
          "generate:unlabeled_2": 3.087497316300869e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878967.863573
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': None,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.69160464592278e-05,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0004064170061610639,
          "generate:random": 8.083006832748652e-06,
          "generate:unlabeled_2": 1.5708967112004757e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878931.941786
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('bytes',\n     {'forced': None, 'min_size': 50, 'max_size': 10_000_000_000}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.002208955876994878,
          "overall:gc": 0.00020008301362395287,
          "generate:choice_type_and_constraints": 0.0003440830623731017,
          "generate:random": 1.3167038559913635e-05,
          "generate:unlabeled_2": 9.016698459163308e-05,
          "generate:unlabeled_3": 5.1875016652047634e-05,
          "generate:unlabeled_4": 3.85420280508697e-05,
          "generate:unlabeled_5": 2.7416041120886803e-05,
          "generate:unlabeled_6": 2.758402843028307e-05,
          "generate:unlabeled_7": 3.770797047764063e-05,
          "generate:unlabeled_8": 5.541602149605751e-05,
          "generate:unlabeled_9": 3.2374984584748745e-05,
          "generate:unlabeled_10": 2.4708977434784174e-05,
          "generate:unlabeled_11": 2.6333029381930828e-05,
          "generate:unlabeled_12": 4.2417028453201056e-05,
          "generate:unlabeled_13": 2.01669754460454e-05,
          "generate:unlabeled_14": 1.7624988686293364e-05,
          "generate:unlabeled_15": 4.012504359707236e-05,
          "generate:unlabeled_16": 3.124994691461325e-05,
          "generate:unlabeled_17": 2.7416972443461418e-05,
          "generate:unlabeled_18": 2.500001573935151e-05,
          "generate:unlabeled_19": 2.3500004317611456e-05,
          "generate:unlabeled_20": 2.2249994799494743e-05,
          "generate:unlabeled_21": 2.6749970857053995e-05,
          "generate:unlabeled_22": 2.579198917374015e-05,
          "generate:unlabeled_23": 2.4250010028481483e-05,
          "generate:unlabeled_24": 2.679199678823352e-05,
          "generate:unlabeled_25": 2.1584040950983763e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878905.942723
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('float',\n     {'min_value': -8.691054035653501e+77,\n      'max_value': 4.86190389300089e+23,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 1.7464274556377504e+16}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00012778997188434005,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0006561669870279729,
          "generate:random": 9.041046723723412e-06,
          "generate:unlabeled_2": 2.804200630635023e-05,
          "generate:unlabeled_3": 3.0459021218121052e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878950.822357
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('boolean', {'p': 0.0, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 5.15839783474803e-05,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 8.962501306086779e-05,
          "generate:random": 7.917056791484356e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878964.5497339
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('float',\n     {'min_value': 9007199254740992.0,\n      'max_value': inf,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 3.877961597141056e+16}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0001379999448545277,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0004214160144329071,
          "generate:random": 8.374976459890604e-06,
          "generate:unlabeled_2": 1.4499993994832039e-05,
          "generate:unlabeled_3": 3.250001464039087e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878916.476318
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('string',\n     {'intervals': IntervalSet(build_intervals([0, 2, 18075])),\n      'forced': None,\n      'min_size': 20,\n      'max_size': 10_000_000_000}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0008276690496131778,
          "overall:gc": 0.00012087495997548103,
          "generate:choice_type_and_constraints": 0.0008279579342342913,
          "generate:random": 9.20804450288415e-06,
          "generate:unlabeled_2": 3.908301005139947e-05,
          "generate:unlabeled_3": 3.2833951991051435e-05,
          "generate:unlabeled_4": 2.883299021050334e-05,
          "generate:unlabeled_5": 2.6458001229912043e-05,
          "generate:unlabeled_6": 2.641597529873252e-05,
          "generate:unlabeled_7": 1.912500010803342e-05,
          "generate:unlabeled_8": 2.4666020181030035e-05,
          "generate:unlabeled_9": 1.895800232887268e-05,
          "generate:unlabeled_10": 1.754099503159523e-05,
          "generate:unlabeled_11": 2.8375012334436178e-05,
          "generate:unlabeled_12": 2.462498378008604e-05,
          "generate:unlabeled_13": 2.4540990125387907e-05,
          "generate:unlabeled_14": 2.4500011932104826e-05,
          "generate:unlabeled_15": 2.400000812485814e-05,
          "generate:unlabeled_16": 1.8874998204410076e-05,
          "generate:unlabeled_17": 1.8041988369077444e-05,
          "generate:unlabeled_18": 2.5749963242560625e-05,
          "generate:unlabeled_19": 2.441700780764222e-05,
          "generate:unlabeled_20": 3.058306174352765e-05,
          "generate:unlabeled_21": 1.837499439716339e-05,
          "generate:unlabeled_22": 2.700003096833825e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878923.500213
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('float',\n     {'min_value': -inf,\n      'max_value': inf,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 6444848820139384.0}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00013408291852101684,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.00040262500988319516,
          "generate:random": 8.207978680729866e-06,
          "generate:unlabeled_2": 1.4375022146850824e-05,
          "generate:unlabeled_3": 2.975005190819502e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878914.691102
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': 0,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.766696555539966e-05,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.00041849998524412513,
          "generate:random": 7.2909751906991005e-06,
          "generate:unlabeled_2": 1.4792021829634905e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878944.043529
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('float',\n     {'min_value': 2.2641876545809904e+16,\n      'max_value': inf,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 5.096949787272227e-205}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00012387498281896114,
          "overall:gc": 0.0003183339722454548,
          "generate:choice_type_and_constraints": 0.0004913749871775508,
          "generate:random": 8.209026418626308e-06,
          "generate:unlabeled_2": 2.8416048735380173e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878966.218645
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('float',\n     {'min_value': -inf,\n      'max_value': 5.602060329516137e+16,\n      'forced': None,\n      'allow_nan': True,\n      'smallest_nonzero_magnitude': 1e-323}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00010350096272304654,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.00046741601545363665,
          "generate:random": 8.374976459890604e-06,
          "generate:unlabeled_2": 3.225001273676753e-05,
          "generate:unlabeled_3": 2.9541028197854757e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878940.581654
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('float',\n     {'min_value': -inf,\n      'max_value': inf,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 1.0}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011575000826269388,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0004454590380191803,
          "generate:random": 1.1334021110087633e-05,
          "generate:unlabeled_2": 1.654197694733739e-05,
          "generate:unlabeled_3": 1.1958007235080004e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878920.068665
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('float',\n     {'min_value': -inf,\n      'max_value': 0.0,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 3925277275798424.0}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00016654207138344646,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0004896669997833669,
          "generate:random": 1.229101326316595e-05,
          "generate:unlabeled_2": 4.504196112975478e-05,
          "generate:unlabeled_3": 3.266596468165517e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878959.410617
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('string', {'intervals': IntervalSet(\n          build_intervals([300, 119059, 284130, 507457, 544157, 1009859]),\n      ), 'forced': None, 'min_size': 0, 'max_size': 10_000_000_000}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0005993308732286096,
          "overall:gc": 0.00016516598407179117,
          "generate:choice_type_and_constraints": 0.0018661250360310078,
          "generate:random": 1.2125005014240742e-05,
          "generate:unlabeled_2": 4.9708993174135685e-05,
          "generate:unlabeled_3": 3.2750016544014215e-05,
          "generate:unlabeled_4": 2.5083019863814116e-05,
          "generate:unlabeled_5": 3.195903263986111e-05,
          "generate:unlabeled_6": 2.095801755785942e-05,
          "generate:unlabeled_7": 2.1459010895341635e-05,
          "generate:unlabeled_8": 2.679100725799799e-05,
          "generate:unlabeled_9": 2.5667017325758934e-05,
          "generate:unlabeled_10": 2.4916953407227993e-05,
          "generate:unlabeled_11": 2.6958005037158728e-05,
          "generate:unlabeled_12": 2.416700590401888e-05,
          "generate:unlabeled_13": 1.9084021914750338e-05,
          "generate:unlabeled_14": 2.616603160277009e-05,
          "generate:unlabeled_15": 2.8583977837115526e-05,
          "generate:unlabeled_16": 2.7334026526659727e-05,
          "generate:unlabeled_17": 2.8583977837115526e-05,
          "generate:unlabeled_18": 2.604199107736349e-05,
          "generate:unlabeled_19": 2.6875000912696123e-05,
          "generate:unlabeled_20": 1.9249971956014633e-05,
          "generate:unlabeled_21": 2.9459013603627682e-05,
          "generate:unlabeled_22": 2.6749970857053995e-05,
          "generate:unlabeled_23": 2.4458044208586216e-05,
          "generate:unlabeled_24": 2.4666020181030035e-05,
          "generate:unlabeled_25": 2.6500027161091566e-05,
          "generate:unlabeled_26": 2.537504769861698e-05,
          "generate:unlabeled_27": 2.787495031952858e-05,
          "generate:unlabeled_28": 2.220796886831522e-05,
          "generate:unlabeled_29": 2.458301605656743e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878971.228976
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('float',\n     {'min_value': -inf,\n      'max_value': inf,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 1.0}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.183298632502556e-05,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0003677090280689299,
          "generate:random": 8.167000487446785e-06,
          "generate:unlabeled_2": 1.3792014215141535e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878961.155481
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('float',\n     {'min_value': -inf,\n      'max_value': 0.0,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 0.5}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.166699601337314e-05,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0004522499511949718,
          "generate:random": 9.874987881630659e-06,
          "generate:unlabeled_2": 1.395796425640583e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878912.8174589
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('float',\n     {'min_value': -inf,\n      'max_value': inf,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 1.0}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00010083295637741685,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.00037525000516325235,
          "generate:random": 7.499998901039362e-06,
          "generate:unlabeled_2": 3.341701813042164e-05,
          "generate:unlabeled_3": 2.4083012249320745e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878957.694746
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('string', {'intervals': IntervalSet(\n          build_intervals([0, 1, 81531, 1063421]),\n      ), 'forced': None, 'min_size': 45, 'max_size': 10_000_000_000}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.004809039062820375,
          "overall:gc": 0.0010046240640804172,
          "generate:choice_type_and_constraints": 0.0009076250134967268,
          "generate:random": 1.0000017937272787e-05,
          "generate:unlabeled_2": 6.408302579075098e-05,
          "generate:unlabeled_3": 3.8375030271708965e-05,
          "generate:unlabeled_4": 3.3165968488901854e-05,
          "generate:unlabeled_5": 3.245903644710779e-05,
          "generate:unlabeled_6": 2.6834022719413042e-05,
          "generate:unlabeled_7": 2.7292000595480204e-05,
          "generate:unlabeled_8": 2.7125002816319466e-05,
          "generate:unlabeled_9": 2.0209001377224922e-05,
          "generate:unlabeled_10": 2.6500027161091566e-05,
          "generate:unlabeled_11": 2.7416972443461418e-05,
          "generate:unlabeled_12": 2.55830236710608e-05,
          "generate:unlabeled_13": 2.7916044928133488e-05,
          "generate:unlabeled_14": 2.4708977434784174e-05,
          "generate:unlabeled_15": 2.437504008412361e-05,
          "generate:unlabeled_16": 2.579198917374015e-05,
          "generate:unlabeled_17": 2.504198346287012e-05,
          "generate:unlabeled_18": 2.4165958166122437e-05,
          "generate:unlabeled_19": 2.7665984816849232e-05,
          "generate:unlabeled_20": 2.7125002816319466e-05,
          "generate:unlabeled_21": 1.895800232887268e-05,
          "generate:unlabeled_22": 1.6959034837782383e-05,
          "generate:unlabeled_23": 2.575002145022154e-05,
          "generate:unlabeled_24": 2.5707995519042015e-05,
          "generate:unlabeled_25": 2.5833025574684143e-05,
          "generate:unlabeled_26": 2.59590451605618e-05,
          "generate:unlabeled_27": 1.899997005239129e-05,
          "generate:unlabeled_28": 2.558401320129633e-05,
          "generate:unlabeled_29": 2.500001573935151e-05,
          "generate:unlabeled_30": 2.5166955310851336e-05,
          "generate:unlabeled_31": 2.675002906471491e-05,
          "generate:unlabeled_32": 2.60839588008821e-05,
          "generate:unlabeled_33": 1.854199217632413e-05,
          "generate:unlabeled_34": 2.13750172406435e-05,
          "generate:unlabeled_35": 0.00015929201617836952,
          "generate:unlabeled_36": 3.049994120374322e-05,
          "generate:unlabeled_37": 2.5290995836257935e-05,
          "generate:unlabeled_38": 1.8291000742465258e-05,
          "generate:unlabeled_39": 2.84170382656157e-05,
          "generate:unlabeled_40": 0.0001497080083936453,
          "generate:unlabeled_41": 0.00010333402315154672,
          "generate:unlabeled_42": 9.658298222348094e-05,
          "generate:unlabeled_43": 8.679099846631289e-05,
          "generate:unlabeled_44": 0.00013691699132323265,
          "generate:unlabeled_45": 7.516698678955436e-05,
          "generate:unlabeled_46": 9.408395271748304e-05,
          "generate:unlabeled_47": 6.416602991521358e-05,
          "generate:unlabeled_48": 8.550001075491309e-05,
          "generate:unlabeled_49": 6.133399438112974e-05,
          "generate:unlabeled_50": 7.354200351983309e-05,
          "generate:unlabeled_51": 9.229104034602642e-05,
          "generate:unlabeled_52": 7.737497799098492e-05,
          "generate:unlabeled_53": 0.00047283299500122666,
          "generate:unlabeled_54": 9.712495375424623e-05,
          "generate:unlabeled_55": 0.00010962499072775245,
          "generate:unlabeled_56": 7.912499131634831e-05,
          "generate:unlabeled_57": 0.00013833300909027457,
          "generate:unlabeled_58": 0.00011495797662064433,
          "generate:unlabeled_59": 8.641695603728294e-05,
          "generate:unlabeled_60": 8.516700472682714e-05,
          "generate:unlabeled_61": 8.099997648969293e-05,
          "generate:unlabeled_62": 9.1959023848176e-05,
          "generate:unlabeled_63": 3.850000211969018e-05,
          "generate:unlabeled_64": 3.270799061283469e-05,
          "generate:unlabeled_65": 2.4500011932104826e-05,
          "generate:unlabeled_66": 3.1125033274292946e-05,
          "generate:unlabeled_67": 2.775003667920828e-05,
          "generate:unlabeled_68": 2.154201501980424e-05,
          "generate:unlabeled_69": 3.020802978426218e-05,
          "generate:unlabeled_70": 2.7916976250708103e-05,
          "generate:unlabeled_71": 2.9166985768824816e-05,
          "generate:unlabeled_72": 2.8875016141682863e-05,
          "generate:unlabeled_73": 2.558401320129633e-05,
          "generate:unlabeled_74": 3.0125025659799576e-05,
          "generate:unlabeled_75": 2.279097680002451e-05,
          "generate:unlabeled_76": 3.187498077750206e-05,
          "generate:unlabeled_77": 2.6333029381930828e-05,
          "generate:unlabeled_78": 2.800003858283162e-05,
          "generate:unlabeled_79": 2.462498378008604e-05,
          "generate:unlabeled_80": 2.1666986867785454e-05,
          "generate:unlabeled_81": 2.6958994567394257e-05,
          "generate:unlabeled_82": 1.8375052604824305e-05,
          "generate:unlabeled_83": 2.441596006974578e-05,
          "generate:unlabeled_84": 2.8207956347614527e-05,
          "generate:unlabeled_85": 2.4707987904548645e-05,
          "generate:unlabeled_86": 2.620898885652423e-05,
          "generate:unlabeled_87": 2.6124995201826096e-05,
          "generate:unlabeled_88": 2.6165973395109177e-05,
          "generate:unlabeled_89": 2.662499900907278e-05,
          "generate:unlabeled_90": 2.5667017325758934e-05,
          "generate:unlabeled_91": 2.4499953724443913e-05,
          "generate:unlabeled_92": 2.3833999875932932e-05,
          "generate:unlabeled_93": 2.4291977752000093e-05,
          "generate:unlabeled_94": 2.5250017642974854e-05,
          "generate:unlabeled_95": 2.3291970137506723e-05,
          "generate:unlabeled_96": 2.8499984182417393e-05,
          "generate:unlabeled_97": 2.6334018912166357e-05,
          "generate:unlabeled_98": 3.270898014307022e-05,
          "generate:unlabeled_99": 2.8749986086040735e-05,
          "generate:unlabeled_100": 2.5250017642974854e-05,
          "generate:unlabeled_101": 1.891603460535407e-05,
          "generate:unlabeled_102": 2.7041009161621332e-05,
          "generate:unlabeled_103": 2.5084009394049644e-05,
          "generate:unlabeled_104": 2.416601637378335e-05,
          "generate:unlabeled_105": 1.8499966245144606e-05,
          "generate:unlabeled_106": 1.7250014934688807e-05,
          "generate:unlabeled_107": 2.516701351851225e-05,
          "generate:unlabeled_108": 2.5749963242560625e-05,
          "generate:unlabeled_109": 2.462498378008604e-05,
          "generate:unlabeled_110": 2.662499900907278e-05,
          "generate:unlabeled_111": 1.8708000425249338e-05,
          "generate:unlabeled_112": 2.458400558680296e-05,
          "generate:unlabeled_113": 2.5500019546598196e-05,
          "generate:unlabeled_114": 1.8834020011126995e-05,
          "generate:unlabeled_115": 1.712498487904668e-05,
          "generate:unlabeled_116": 2.500001573935151e-05,
          "generate:unlabeled_117": 1.895899185910821e-05,
          "generate:unlabeled_118": 2.416601637378335e-05,
          "generate:unlabeled_119": 1.654197694733739e-05,
          "generate:unlabeled_120": 3.124994691461325e-05,
          "generate:unlabeled_121": 2.8708018362522125e-05,
          "generate:unlabeled_122": 2.454203786328435e-05,
          "generate:unlabeled_123": 2.0957959350198507e-05,
          "generate:unlabeled_124": 2.600002335384488e-05,
          "generate:unlabeled_125": 2.420897362753749e-05,
          "generate:unlabeled_126": 1.77919864654541e-05,
          "generate:unlabeled_127": 2.5666027795523405e-05,
          "generate:unlabeled_128": 2.412503818050027e-05,
          "generate:unlabeled_129": 2.4874985683709383e-05,
          "generate:unlabeled_130": 1.8208986148238182e-05,
          "generate:unlabeled_131": 2.4915963876992464e-05,
          "generate:unlabeled_132": 2.5957997422665358e-05,
          "generate:unlabeled_133": 2.4040986318141222e-05,
          "generate:unlabeled_134": 2.6958994567394257e-05,
          "generate:unlabeled_135": 2.4374981876462698e-05,
          "generate:unlabeled_136": 1.7499958630651236e-05,
          "generate:unlabeled_137": 2.5250017642974854e-05,
          "generate:unlabeled_138": 2.6500027161091566e-05,
          "generate:unlabeled_139": 2.4875043891370296e-05,
          "generate:unlabeled_140": 1.7790996935218573e-05,
          "generate:unlabeled_141": 2.520799171179533e-05,
          "generate:unlabeled_142": 2.8083042707294226e-05,
          "generate:unlabeled_143": 2.6291992980986834e-05,
          "generate:unlabeled_144": 2.6790949050337076e-05,
          "generate:unlabeled_145": 2.4334003683179617e-05,
          "generate:unlabeled_146": 2.662499900907278e-05,
          "generate:unlabeled_147": 2.6083027478307486e-05,
          "generate:unlabeled_148": 1.8708000425249338e-05,
          "generate:unlabeled_149": 2.500001573935151e-05,
          "generate:unlabeled_150": 1.8874998204410076e-05,
          "generate:unlabeled_151": 2.495903754606843e-05,
          "generate:unlabeled_152": 2.679199678823352e-05,
          "generate:unlabeled_153": 2.3917004000395536e-05,
          "generate:unlabeled_154": 2.620898885652423e-05,
          "generate:unlabeled_155": 2.504198346287012e-05,
          "generate:unlabeled_156": 2.6041001547127962e-05,
          "generate:unlabeled_157": 2.4124979972839355e-05,
          "generate:unlabeled_158": 2.716702874749899e-05,
          "generate:unlabeled_159": 2.4541979655623436e-05,
          "generate:unlabeled_160": 2.537504769861698e-05,
          "generate:unlabeled_161": 2.462498378008604e-05,
          "generate:unlabeled_162": 2.4749955628067255e-05,
          "generate:unlabeled_163": 2.458301605656743e-05,
          "generate:unlabeled_164": 2.9373972211033106e-05,
          "generate:unlabeled_165": 2.462498378008604e-05,
          "generate:unlabeled_166": 2.6250025257468224e-05,
          "generate:unlabeled_167": 2.3457978386431932e-05,
          "generate:unlabeled_168": 2.68329749815166e-05,
          "generate:unlabeled_169": 2.37500062212348e-05,
          "generate:unlabeled_170": 2.6374997105449438e-05,
          "generate:unlabeled_171": 2.6291992980986834e-05,
          "generate:unlabeled_172": 2.5499961338937283e-05,
          "generate:unlabeled_173": 2.3875036276876926e-05,
          "generate:unlabeled_174": 1.912500010803342e-05,
          "generate:unlabeled_175": 2.4749955628067255e-05,
          "generate:unlabeled_176": 2.6958005037158728e-05,
          "generate:unlabeled_177": 1.795799471437931e-05,
          "generate:unlabeled_178": 2.5874993298202753e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878969.492377
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': 0,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.770703036338091e-05,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.00042270804988220334,
          "generate:random": 7.62502895668149e-06,
          "generate:unlabeled_2": 1.53339933604002e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878947.412986
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': -11559,\n      'max_value': 0,\n      'shrink_towards': 19073,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.812505984678864e-05,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0006617910112254322,
          "generate:random": 8.083006832748652e-06,
          "generate:unlabeled_2": 1.5207973774522543e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878956.0644858
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('float',\n     {'min_value': -inf,\n      'max_value': inf,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 1.0}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.39990277402103e-05,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0003774579963646829,
          "generate:random": 7.62502895668149e-06,
          "generate:unlabeled_2": 1.3459008187055588e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878926.824089
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': 1,\n      'max_value': 1,\n      'shrink_towards': 0,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.579196244478226e-05,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0005521669518202543,
          "generate:random": 8.792034350335598e-06,
          "generate:unlabeled_2": 3.962503978982568e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878925.1853282
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': 17944,\n      'max_value': None,\n      'shrink_towards': 22289,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00010800000745803118,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0004977919743396342,
          "generate:random": 8.124974556267262e-06,
          "generate:unlabeled_2": 2.5834015104919672e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878930.204854
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': -53,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011954200454056263,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0010079590138047934,
          "generate:random": 1.4666002243757248e-05,
          "generate:unlabeled_2": 2.4457986000925303e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878910.9185238
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('float',\n     {'min_value': -inf,\n      'max_value': 0.0,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 3925277275798424.0}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.812500163912773e-05,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.00043337506940588355,
          "generate:random": 7.333001121878624e-06,
          "generate:unlabeled_2": 1.3165990822017193e-05,
          "generate:unlabeled_3": 9.791983757168055e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878954.3582761
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': None,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.000430708983913064,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.001484040985815227,
          "generate:random": 5.000003147870302e-05,
          "generate:unlabeled_2": 7.437501335516572e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878942.377988
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': 1,\n      'max_value': 3,\n      'shrink_towards': 0,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011029199231415987,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.00060299999313429,
          "generate:random": 1.0207993909716606e-05,
          "generate:unlabeled_2": 4.75000124424696e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878935.5606751
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('float',\n     {'min_value': -1.861165286638294e+16,\n      'max_value': inf,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 7.360352198270587e+306}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011783395893871784,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0004497499903663993,
          "generate:random": 8.916016668081284e-06,
          "generate:unlabeled_2": 3.3333024475723505e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878937.266707
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': 7949,\n      'max_value': 5_041_442_191_971_690_669_109_599_032_255_602_979,\n      'shrink_towards': 0,\n      'weights': {8137: 0.13209000295981543,\n       31971: 0.1077481570361073,\n       51794: 0.07200330268523615,\n       20765: 0.04688426541018562,\n       7949: 0.15486924284737066},\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011045794235542417,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.001531125046312809,
          "generate:random": 9.916955605149269e-06,
          "generate:unlabeled_2": 2.9875023756176233e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878918.289024
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('string',\n     {'intervals': IntervalSet(build_intervals([2, 81531, 439490])),\n      'forced': None,\n      'min_size': 24,\n      'max_size': 124}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0012441647122614086,
          "overall:gc": 0.0001210420741699636,
          "generate:choice_type_and_constraints": 0.004221084003802389,
          "generate:random": 2.7375004719942808e-05,
          "generate:unlabeled_2": 5.479203537106514e-05,
          "generate:unlabeled_3": 3.533298149704933e-05,
          "generate:unlabeled_4": 3.1957984901964664e-05,
          "generate:unlabeled_5": 2.700003096833825e-05,
          "generate:unlabeled_6": 2.579099964350462e-05,
          "generate:unlabeled_7": 2.241699257865548e-05,
          "generate:unlabeled_8": 1.937500201165676e-05,
          "generate:unlabeled_9": 2.7125002816319466e-05,
          "generate:unlabeled_10": 2.7542002499103546e-05,
          "generate:unlabeled_11": 2.5917019229382277e-05,
          "generate:unlabeled_12": 2.575002145022154e-05,
          "generate:unlabeled_13": 2.4917011614888906e-05,
          "generate:unlabeled_14": 2.5707995519042015e-05,
          "generate:unlabeled_15": 2.0832987502217293e-05,
          "generate:unlabeled_16": 1.7915968783199787e-05,
          "generate:unlabeled_17": 3.112497506663203e-05,
          "generate:unlabeled_18": 2.6667024940252304e-05,
          "generate:unlabeled_19": 2.5958986952900887e-05,
          "generate:unlabeled_20": 2.5541987270116806e-05,
          "generate:unlabeled_21": 2.583395689725876e-05,
          "generate:unlabeled_22": 2.6749970857053995e-05,
          "generate:unlabeled_23": 2.4625041987746954e-05,
          "generate:unlabeled_24": 2.6458001229912043e-05,
          "generate:unlabeled_25": 2.662499900907278e-05,
          "generate:unlabeled_26": 2.150004729628563e-05,
          "generate:unlabeled_27": 1.8667022231966257e-05,
          "generate:unlabeled_28": 2.470804611220956e-05,
          "generate:unlabeled_29": 2.6291992980986834e-05,
          "generate:unlabeled_30": 1.795799471437931e-05,
          "generate:unlabeled_31": 1.9000028260052204e-05,
          "generate:unlabeled_32": 2.5250017642974854e-05,
          "generate:unlabeled_33": 2.5708985049277544e-05,
          "generate:unlabeled_34": 2.412503818050027e-05,
          "generate:unlabeled_35": 2.824998227879405e-05,
          "generate:unlabeled_36": 2.6333029381930828e-05,
          "generate:unlabeled_37": 1.850002445280552e-05,
          "generate:unlabeled_38": 1.7167010810226202e-05,
          "generate:unlabeled_39": 1.791701652109623e-05,
          "generate:unlabeled_40": 2.72089964710176e-05,
          "generate:unlabeled_41": 2.6541994884610176e-05,
          "generate:unlabeled_42": 2.5667017325758934e-05,
          "generate:unlabeled_43": 1.9291008356958628e-05,
          "generate:unlabeled_44": 1.7707992810755968e-05,
          "generate:unlabeled_45": 1.695798709988594e-05,
          "generate:unlabeled_46": 2.1499989088624716e-05,
          "generate:unlabeled_47": 2.500001573935151e-05,
          "generate:unlabeled_48": 2.3833010345697403e-05,
          "generate:unlabeled_49": 2.724997466430068e-05,
          "generate:unlabeled_50": 2.4458044208586216e-05,
          "generate:unlabeled_51": 2.2874970454722643e-05,
          "generate:unlabeled_52": 2.2459018509835005e-05,
          "generate:unlabeled_53": 2.4917011614888906e-05,
          "generate:unlabeled_54": 2.6124995201826096e-05,
          "generate:unlabeled_55": 2.68329749815166e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878928.520679
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('string',\n     {'intervals': IntervalSet(build_intervals([512, 717480])),\n      'forced': None,\n      'min_size': 28,\n      'max_size': 10_000_000_000}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0019135791808366776,
          "overall:gc": 0.00026045902632176876,
          "generate:choice_type_and_constraints": 0.0014138739788904786,
          "generate:random": 1.2624950613826513e-05,
          "generate:unlabeled_2": 4.850002005696297e-05,
          "generate:unlabeled_3": 3.1125033274292946e-05,
          "generate:unlabeled_4": 2.6291992980986834e-05,
          "generate:unlabeled_5": 2.6416964828968048e-05,
          "generate:unlabeled_6": 2.9458024073392153e-05,
          "generate:unlabeled_7": 2.779200440272689e-05,
          "generate:unlabeled_8": 2.504198346287012e-05,
          "generate:unlabeled_9": 1.983396941795945e-05,
          "generate:unlabeled_10": 0.000534999999217689,
          "generate:unlabeled_11": 5.8959005400538445e-05,
          "generate:unlabeled_12": 4.1665975004434586e-05,
          "generate:unlabeled_13": 2.916704397648573e-05,
          "generate:unlabeled_14": 2.7542002499103546e-05,
          "generate:unlabeled_15": 2.9542017728090286e-05,
          "generate:unlabeled_16": 2.241699257865548e-05,
          "generate:unlabeled_17": 2.5333953090012074e-05,
          "generate:unlabeled_18": 2.7292000595480204e-05,
          "generate:unlabeled_19": 2.541701542213559e-05,
          "generate:unlabeled_20": 2.824998227879405e-05,
          "generate:unlabeled_21": 2.5084009394049644e-05,
          "generate:unlabeled_22": 2.579099964350462e-05,
          "generate:unlabeled_23": 2.5084009394049644e-05,
          "generate:unlabeled_24": 2.0249979570508003e-05,
          "generate:unlabeled_25": 2.358300844207406e-05,
          "generate:unlabeled_26": 2.7166970539838076e-05,
          "generate:unlabeled_27": 2.4833017960190773e-05,
          "generate:unlabeled_28": 2.9416929464787245e-05,
          "generate:unlabeled_29": 1.937500201165676e-05,
          "generate:unlabeled_30": 2.13750172406435e-05,
          "generate:unlabeled_31": 1.8874998204410076e-05,
          "generate:unlabeled_32": 2.454203786328435e-05,
          "generate:unlabeled_33": 2.458301605656743e-05,
          "generate:unlabeled_34": 2.6083027478307486e-05,
          "generate:unlabeled_35": 1.8874998204410076e-05,
          "generate:unlabeled_36": 2.675002906471491e-05,
          "generate:unlabeled_37": 2.62079993262887e-05,
          "generate:unlabeled_38": 2.5082961656153202e-05,
          "generate:unlabeled_39": 2.4291977752000093e-05,
          "generate:unlabeled_40": 2.2958964109420776e-05,
          "generate:unlabeled_41": 2.337503246963024e-05,
          "generate:unlabeled_42": 2.416700590401888e-05,
          "generate:unlabeled_43": 2.6165973395109177e-05,
          "generate:unlabeled_44": 2.3333996068686247e-05,
          "generate:unlabeled_45": 2.3250002413988113e-05,
          "generate:unlabeled_46": 2.3500004317611456e-05,
          "generate:unlabeled_47": 2.520799171179533e-05,
          "generate:unlabeled_48": 2.2040971089154482e-05,
          "generate:unlabeled_49": 2.8292008209973574e-05,
          "generate:unlabeled_50": 2.5083019863814116e-05,
          "generate:unlabeled_51": 2.6958005037158728e-05,
          "generate:unlabeled_52": 2.4917011614888906e-05,
          "generate:unlabeled_53": 2.4957989808171988e-05,
          "generate:unlabeled_54": 2.316699828952551e-05,
          "generate:unlabeled_55": 2.5916961021721363e-05,
          "generate:unlabeled_56": 2.4083012249320745e-05,
          "generate:unlabeled_57": 2.5999965146183968e-05,
          "generate:unlabeled_58": 2.5666027795523405e-05,
          "generate:unlabeled_59": 2.600002335384488e-05,
          "generate:unlabeled_60": 2.5916961021721363e-05,
          "generate:unlabeled_61": 1.8458988051861525e-05,
          "generate:unlabeled_62": 2.5917019229382277e-05,
          "generate:unlabeled_63": 2.5500019546598196e-05,
          "generate:unlabeled_64": 2.5041052140295506e-05,
          "generate:unlabeled_65": 2.8332986403256655e-05,
          "generate:unlabeled_66": 2.4500011932104826e-05,
          "generate:unlabeled_67": 2.3667002096772194e-05,
          "generate:unlabeled_68": 2.3040978703647852e-05,
          "generate:unlabeled_69": 2.5290995836257935e-05,
          "generate:unlabeled_70": 2.3500004317611456e-05,
          "generate:unlabeled_71": 2.745899837464094e-05,
          "generate:unlabeled_72": 2.441596006974578e-05,
          "generate:unlabeled_73": 2.4917011614888906e-05,
          "generate:unlabeled_74": 2.4707987904548645e-05,
          "generate:unlabeled_75": 2.7166970539838076e-05,
          "generate:unlabeled_76": 2.4667009711265564e-05,
          "generate:unlabeled_77": 2.462498378008604e-05,
          "generate:unlabeled_78": 2.3124972358345985e-05,
          "generate:unlabeled_79": 2.5957997422665358e-05,
          "generate:unlabeled_80": 2.158299321308732e-05,
          "generate:unlabeled_81": 2.4084001779556274e-05,
          "generate:unlabeled_82": 2.2874970454722643e-05,
          "generate:unlabeled_83": 2.4916022084653378e-05,
          "generate:unlabeled_84": 2.4124979972839355e-05,
          "generate:unlabeled_85": 2.1333980839699507e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878909.353983
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': None,\n      'max_value': None,\n      'shrink_towards': -14743,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00013574899639934301,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.00043108296813443303,
          "generate:random": 8.333998266607523e-06,
          "generate:unlabeled_2": 4.0041981264948845e-05,
          "generate:unlabeled_3": 2.7250032871961594e-05,
          "generate:unlabeled_4": 2.0084029529243708e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878938.972642
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': 13939,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00017445901175960898,
          "overall:gc": 0.00010279199341312051,
          "generate:choice_type_and_constraints": 0.0004760829615406692,
          "generate:random": 8.833012543618679e-06,
          "generate:unlabeled_2": 3.345799632370472e-05,
          "generate:unlabeled_3": 3.0499999411404133e-05,
          "generate:unlabeled_4": 3.1540985219180584e-05,
          "generate:unlabeled_5": 2.866698196157813e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878952.559222
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': 1,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00010383303742855787,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0004355419659987092,
          "generate:random": 8.291041012853384e-06,
          "generate:unlabeled_2": 1.5666999388486147e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878921.774774
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': None,\n      'max_value': None,\n      'shrink_towards': -1_219_219_423_213_592_898,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00012225104728713632,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0004900830099359155,
          "generate:random": 7.62502895668149e-06,
          "generate:unlabeled_2": 3.304198617115617e-05,
          "generate:unlabeled_3": 2.9332994017750025e-05,
          "generate:unlabeled_4": 2.6082969270646572e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878907.742506
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('boolean',\n     {'p': 0.8227548401846978, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 6.687495624646544e-05,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.00011779199121519923,
          "generate:random": 8.04202863946557e-06,
          "generate:unlabeled_2": 3.250001464039087e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878949.118408
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': -166_840_471_106_241_680_946_365_964_573_867_358_031,\n      'max_value': None,\n      'shrink_towards': -863078459,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0001336249988526106,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.000631208997219801,
          "generate:random": 3.229099093005061e-05,
          "generate:unlabeled_2": 3.9583013858646154e-05,
          "generate:unlabeled_3": 1.2499978765845299e-05,
          "generate:unlabeled_4": 2.72089964710176e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878962.8478432
      }
    ],
    "corpus": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': 1,\n      'max_value': 1,\n      'shrink_towards': 0,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 6.900000153109431e-05,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0005401659873314202,
          "generate:random": 8.25000461190939e-06,
          "generate:unlabeled_2": 2.600002335384488e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878914.4022589
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': None,\n      'max_value': 404,\n      'shrink_towards': 0,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.133298251777887e-05,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0004832910490222275,
          "generate:random": 7.4579729698598385e-06,
          "generate:unlabeled_2": 1.5249999705702066e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878940.9813728
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('bytes',\n     {'forced': None, 'min_size': 0, 'max_size': 10_000_000_000}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00012087606592103839,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0002197920111939311,
          "generate:random": 8.750008419156075e-06,
          "generate:unlabeled_2": 2.6124995201826096e-05,
          "generate:unlabeled_3": 3.408297197893262e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878962.167493
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': None,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.63329803198576e-05,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.000384374987334013,
          "generate:random": 7.3750270530581474e-06,
          "generate:unlabeled_2": 1.5249999705702066e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878913.9314408
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': None,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.433399489149451e-05,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.00040125002851709723,
          "generate:random": 7.6669966802001e-06,
          "generate:unlabeled_2": 1.7040991224348545e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878915.0299242
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('string',\n     {'intervals': IntervalSet(build_intervals([0, 1, 81531])),\n      'forced': None,\n      'min_size': 0,\n      'max_size': 0}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00014370802091434598,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0007825000211596489,
          "generate:random": 8.457980584353209e-06,
          "generate:unlabeled_2": 1.899997005239129e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878926.1076229
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('string',\n     {'intervals': IntervalSet(build_intervals([1, 231420])),\n      'forced': None,\n      'min_size': 0,\n      'max_size': 0}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0001384579809382558,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0008037080406211317,
          "generate:random": 8.208968210965395e-06,
          "generate:unlabeled_2": 3.929203376173973e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878947.620546
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('bytes',\n     {'forced': None, 'min_size': 0, 'max_size': 0}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.266704389825463e-05,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.00021533301332965493,
          "generate:random": 7.333001121878624e-06,
          "generate:unlabeled_2": 3.0374969355762005e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878917.6153338
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('float',\n     {'min_value': -inf,\n      'max_value': inf,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 1.0}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.13750084489584e-05,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0003682090318761766,
          "generate:random": 7.916998583823442e-06,
          "generate:unlabeled_2": 1.3375014532357454e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878934.6328971
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': 2,\n      'max_value': 2,\n      'shrink_towards': 0,\n      'weights': {2: 0.5},\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00020541698904708028,
          "overall:gc": 0.0004976250347681344,
          "generate:choice_type_and_constraints": 0.0008531250059604645
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878967.093591
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('bytes',\n     {'forced': None, 'min_size': 0, 'max_size': 10_000_000_000}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.1583002358675e-05,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.00020820798818022013,
          "generate:random": 8.04202863946557e-06,
          "generate:unlabeled_2": 2.7082976885139942e-05,
          "generate:unlabeled_3": 3.1750008929520845e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878933.191104
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('float',\n     {'min_value': -inf,\n      'max_value': 0.0,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 2747963991798517.0}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011087500024586916,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.00045308301923796535,
          "generate:random": 1.0916031897068024e-05,
          "generate:unlabeled_2": 1.5249999705702066e-05,
          "generate:unlabeled_3": 2.616702113300562e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878971.431854
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('float',\n     {'min_value': 0.0,\n      'max_value': inf,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 4606574627852835.0}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00012683303793892264,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.0003932500258088112,
          "generate:random": 7.70896440371871e-06,
          "generate:unlabeled_2": 1.3707962352782488e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878957.173909
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_draw_past_prefix(\n    choice_type_and_constraints=('integer',\n     {'min_value': 0,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.899997919797897e-05,
          "overall:gc": 0.0,
          "generate:choice_type_and_constraints": 0.00045008398592472076,
          "generate:random": 9.25001222640276e-06,
          "generate:unlabeled_2": 1.7667014617472887e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {},
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46224,
          "imported_at": 1747878904.0069811
        },
        "property": "tests/test_provider.py::test_draw_past_prefix",
        "run_start": 1747878923.4273238
      }
    ]
  },
  "tests/test_provider.py::test_misaligned_type": {
    "rolling": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='float',\n     value=0.0,\n     constraints={'min_value': 0.0,\n      'max_value': 0.0,\n      'allow_nan': True,\n      'smallest_nonzero_magnitude': 5e-324},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('integer',\n     {'min_value': None,\n      'max_value': None,\n      'shrink_towards': 1561,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00012749992311000824,
          "overall:gc": 0.0,
          "generate:node": 0.001152374956291169,
          "generate:ir_type_kwargs": 0.00041437498293817043,
          "generate:random": 7.333001121878624e-06,
          "generate:unlabeled_3": 3.3334014005959034e-05,
          "generate:unlabeled_4": 2.9375019948929548e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878967.9215748
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='bytes',\n     value=b'\\xe2',\n     constraints={'min_size': 0, 'max_size': 100},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('string', {'intervals': IntervalSet(\n          build_intervals(\n              [25847,\n               81284,\n               142905,\n               187801,\n               800307,\n               802779,\n               837903,\n               852385,\n               900768,\n               1084766],\n          ),\n      ),\n      'forced': None,\n      'min_size': 0,\n      'max_size': 100}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0003751650801859796,
          "overall:gc": 0.0,
          "generate:node": 0.0009175410377793014,
          "generate:ir_type_kwargs": 0.0024414159706793725,
          "generate:random": 9.582960046827793e-06,
          "generate:unlabeled_3": 4.3042004108428955e-05,
          "generate:unlabeled_4": 3.024999750778079e-05,
          "generate:unlabeled_5": 3.291695611551404e-05,
          "generate:unlabeled_6": 2.158299321308732e-05,
          "generate:unlabeled_7": 2.7125002816319466e-05,
          "generate:unlabeled_8": 2.841599052771926e-05,
          "generate:unlabeled_9": 1.9708008039742708e-05,
          "generate:unlabeled_10": 2.6499968953430653e-05,
          "generate:unlabeled_11": 2.5708985049277544e-05,
          "generate:unlabeled_12": 2.762500662356615e-05,
          "generate:unlabeled_13": 2.4124979972839355e-05,
          "generate:unlabeled_14": 2.766697434708476e-05,
          "generate:unlabeled_15": 2.475001383572817e-05,
          "generate:unlabeled_16": 2.3709028027951717e-05,
          "generate:unlabeled_17": 2.416700590401888e-05,
          "generate:unlabeled_18": 2.5958986952900887e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878908.70473
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=46,\n     constraints={'min_value': 1,\n      'max_value': 80,\n      'shrink_towards': 0,\n      'weights': None},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('bytes',\n     {'forced': None, 'min_size': 0, 'max_size': 10_000_000_000}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0002360419020988047,
          "overall:gc": 0.0,
          "generate:node": 0.0012671659933403134,
          "generate:ir_type_kwargs": 0.00018812500638887286,
          "generate:random": 8.083006832748652e-06,
          "generate:unlabeled_3": 4.245905438438058e-05,
          "generate:unlabeled_4": 3.166601527482271e-05,
          "generate:unlabeled_5": 3.1582952942699194e-05,
          "generate:unlabeled_6": 2.616702113300562e-05,
          "generate:unlabeled_7": 2.8165988624095917e-05,
          "generate:unlabeled_8": 2.820900408551097e-05,
          "generate:unlabeled_9": 2.5292043574154377e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878921.336807
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='float',\n     value=1.0339000581568494e+308,\n     constraints={'min_value': 1e-05,\n      'max_value': inf,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 4.164059902104878e+16},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('string',\n     {'intervals': IntervalSet(build_intervals([1024, 1881, 315174])),\n      'forced': None,\n      'min_size': 48,\n      'max_size': 78}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.001626129960641265,
          "overall:gc": 0.00029104098211973906,
          "generate:node": 0.0011719170142896473,
          "generate:ir_type_kwargs": 0.0009854990057647228,
          "generate:random": 1.0333023965358734e-05,
          "generate:unlabeled_3": 1.9625003915280104e-05,
          "generate:unlabeled_4": 3.687501884996891e-05,
          "generate:unlabeled_5": 2.3416010662913322e-05,
          "generate:unlabeled_6": 3.01670515909791e-05,
          "generate:unlabeled_7": 3.354198997840285e-05,
          "generate:unlabeled_8": 2.783298259600997e-05,
          "generate:unlabeled_9": 2.3292028345167637e-05,
          "generate:unlabeled_10": 2.783298259600997e-05,
          "generate:unlabeled_11": 2.5833025574684143e-05,
          "generate:unlabeled_12": 2.1583051420748234e-05,
          "generate:unlabeled_13": 2.8375012334436178e-05,
          "generate:unlabeled_14": 1.8249964341521263e-05,
          "generate:unlabeled_15": 2.3666012566536665e-05,
          "generate:unlabeled_16": 2.5500019546598196e-05,
          "generate:unlabeled_17": 1.9250030163675547e-05,
          "generate:unlabeled_18": 2.5916961021721363e-05,
          "generate:unlabeled_19": 2.887495793402195e-05,
          "generate:unlabeled_20": 2.579198917374015e-05,
          "generate:unlabeled_21": 2.5875051505863667e-05,
          "generate:unlabeled_22": 1.991703175008297e-05,
          "generate:unlabeled_23": 2.2082938812673092e-05,
          "generate:unlabeled_24": 1.9415980204939842e-05,
          "generate:unlabeled_25": 2.720800694078207e-05,
          "generate:unlabeled_26": 2.7875008527189493e-05,
          "generate:unlabeled_27": 2.566695911809802e-05,
          "generate:unlabeled_28": 2.983299782499671e-05,
          "generate:unlabeled_29": 2.8332986403256655e-05,
          "generate:unlabeled_30": 2.6833033189177513e-05,
          "generate:unlabeled_31": 2.458301605656743e-05,
          "generate:unlabeled_32": 2.716702874749899e-05,
          "generate:unlabeled_33": 2.5957997422665358e-05,
          "generate:unlabeled_34": 2.983299782499671e-05,
          "generate:unlabeled_35": 2.6332971174269915e-05,
          "generate:unlabeled_36": 2.1791027393192053e-05,
          "generate:unlabeled_37": 2.7875008527189493e-05,
          "generate:unlabeled_38": 1.920794602483511e-05,
          "generate:unlabeled_39": 2.5667017325758934e-05,
          "generate:unlabeled_40": 2.8082984499633312e-05,
          "generate:unlabeled_41": 2.4707987904548645e-05,
          "generate:unlabeled_42": 2.5250017642974854e-05,
          "generate:unlabeled_43": 2.5250017642974854e-05,
          "generate:unlabeled_44": 2.6499968953430653e-05,
          "generate:unlabeled_45": 2.775003667920828e-05,
          "generate:unlabeled_46": 2.5334011297672987e-05,
          "generate:unlabeled_47": 1.937500201165676e-05,
          "generate:unlabeled_48": 2.5917019229382277e-05,
          "generate:unlabeled_49": 2.5999965146183968e-05,
          "generate:unlabeled_50": 2.8250040486454964e-05,
          "generate:unlabeled_51": 2.6999972760677338e-05,
          "generate:unlabeled_52": 2.7499976567924023e-05,
          "generate:unlabeled_53": 2.5500019546598196e-05,
          "generate:unlabeled_54": 2.6833033189177513e-05,
          "generate:unlabeled_55": 2.741598291322589e-05,
          "generate:unlabeled_56": 1.9208004232496023e-05,
          "generate:unlabeled_57": 2.8999987989664078e-05,
          "generate:unlabeled_58": 2.8332986403256655e-05,
          "generate:unlabeled_59": 2.520898124203086e-05,
          "generate:unlabeled_60": 1.791701652109623e-05,
          "generate:unlabeled_61": 2.566695911809802e-05,
          "generate:unlabeled_62": 2.420798409730196e-05,
          "generate:unlabeled_63": 2.54589831456542e-05,
          "generate:unlabeled_64": 2.5957997422665358e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878954.080509
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=16236,\n     constraints={'min_value': 2,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 8.924461548010599e-110, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.633296238258481e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0033534999820403755,
          "generate:ir_type_kwargs": 0.00013950001448392868,
          "generate:random": 8.207978680729866e-06,
          "generate:unlabeled_3": 3.925000783056021e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878963.293988
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=300,\n     constraints={'min_value': None,\n      'max_value': 11000,\n      'shrink_towards': 0,\n      'weights': None},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('string',\n     {'intervals': IntervalSet(build_intervals([547842, 886113, 973276])),\n      'forced': None,\n      'min_size': 46,\n      'max_size': 59}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0012860880233347416,
          "overall:gc": 0.000197957968339324,
          "generate:node": 0.0012063750182278454,
          "generate:ir_type_kwargs": 0.0009699580259621143,
          "generate:random": 8.750008419156075e-06,
          "generate:unlabeled_3": 2.9875023756176233e-05,
          "generate:unlabeled_4": 3.083300543949008e-05,
          "generate:unlabeled_5": 2.19999928958714e-05,
          "generate:unlabeled_6": 1.8665974494069815e-05,
          "generate:unlabeled_7": 2.9875023756176233e-05,
          "generate:unlabeled_8": 2.9666000045835972e-05,
          "generate:unlabeled_9": 3.0374969355762005e-05,
          "generate:unlabeled_10": 2.800003858283162e-05,
          "generate:unlabeled_11": 2.8958020266145468e-05,
          "generate:unlabeled_12": 2.9959017410874367e-05,
          "generate:unlabeled_13": 1.933303428813815e-05,
          "generate:unlabeled_14": 2.879201201722026e-05,
          "generate:unlabeled_15": 2.5416025891900063e-05,
          "generate:unlabeled_16": 2.1499989088624716e-05,
          "generate:unlabeled_17": 2.9499991796910763e-05,
          "generate:unlabeled_18": 2.7375004719942808e-05,
          "generate:unlabeled_19": 2.5916029699146748e-05,
          "generate:unlabeled_20": 2.1082989405840635e-05,
          "generate:unlabeled_21": 1.9665982108563185e-05,
          "generate:unlabeled_22": 2.6332971174269915e-05,
          "generate:unlabeled_23": 3.649998689070344e-05,
          "generate:unlabeled_24": 3.1292031053453684e-05,
          "generate:unlabeled_25": 2.6749970857053995e-05,
          "generate:unlabeled_26": 2.416700590401888e-05,
          "generate:unlabeled_27": 2.6833033189177513e-05,
          "generate:unlabeled_28": 1.8167018424719572e-05,
          "generate:unlabeled_29": 2.4374981876462698e-05,
          "generate:unlabeled_30": 2.845795825123787e-05,
          "generate:unlabeled_31": 1.8333957996219397e-05,
          "generate:unlabeled_32": 2.7292000595480204e-05,
          "generate:unlabeled_33": 1.8000020645558834e-05,
          "generate:unlabeled_34": 2.6708992663770914e-05,
          "generate:unlabeled_35": 1.8499966245144606e-05,
          "generate:unlabeled_36": 2.55830236710608e-05,
          "generate:unlabeled_37": 2.5084009394049644e-05,
          "generate:unlabeled_38": 2.4290988221764565e-05,
          "generate:unlabeled_39": 2.6875000912696123e-05,
          "generate:unlabeled_40": 2.7458008844405413e-05,
          "generate:unlabeled_41": 2.862501423805952e-05,
          "generate:unlabeled_42": 2.600002335384488e-05,
          "generate:unlabeled_43": 2.6291992980986834e-05,
          "generate:unlabeled_44": 2.6958005037158728e-05,
          "generate:unlabeled_45": 2.6291003450751305e-05,
          "generate:unlabeled_46": 1.95419997908175e-05,
          "generate:unlabeled_47": 2.5999965146183968e-05,
          "generate:unlabeled_48": 2.462498378008604e-05,
          "generate:unlabeled_49": 2.5290995836257935e-05,
          "generate:unlabeled_50": 2.5040993932634592e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878942.947634
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='float',\n     value=1.1700961340803431e+306,\n     constraints={'min_value': 2.5759105648414357e-30,\n      'max_value': inf,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 1.1095236333083838e+16},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.05, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.179200813174248e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0011437920038588345,
          "generate:ir_type_kwargs": 9.379198309034109e-05,
          "generate:random": 8.166010957211256e-06,
          "generate:unlabeled_3": 3.80830024369061e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878940.312479
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='bytes',\n     value=b',\\x10\\xf8\\xd0<\\xe4vO\\xe5\\xab[+\\x82/)\\x01\\xf6B\\xfc\\xa3+\\xdd\\x1f\\x07\\x84\\xde\\x97\\xb1\\x14r\\x9d\\xf0W\\xe6N\\x9b\\xb01\\xbb\\x91\\x03#]}',\n     constraints={'min_size': 24, 'max_size': 10_000_000_000},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('float',\n     {'min_value': -inf,\n      'max_value': 1.9108410971912612e+16,\n      'forced': None,\n      'allow_nan': True,\n      'smallest_nonzero_magnitude': 4.486589391529723e+16}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00013350002700462937,
          "overall:gc": 0.0,
          "generate:node": 0.0009769999887794256,
          "generate:ir_type_kwargs": 0.000474918051622808,
          "generate:random": 7.833004929125309e-06,
          "generate:unlabeled_3": 3.5582983400672674e-05,
          "generate:unlabeled_4": 2.3250002413988113e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878960.95168
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=-14,\n     constraints={'min_value': None,\n      'max_value': 54,\n      'shrink_towards': 0,\n      'weights': None},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('bytes', {'forced': None, 'min_size': 0, 'max_size': 5}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00022491696290671825,
          "overall:gc": 0.0,
          "generate:node": 0.001265500031877309,
          "generate:ir_type_kwargs": 0.00024108303477987647,
          "generate:random": 7.6249707490205765e-06,
          "generate:unlabeled_3": 4.212500061839819e-05,
          "generate:unlabeled_4": 2.516701351851225e-05,
          "generate:unlabeled_5": 2.8292008209973574e-05,
          "generate:unlabeled_6": 1.8624996300786734e-05,
          "generate:unlabeled_7": 2.741598291322589e-05,
          "generate:unlabeled_8": 2.2250053007155657e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878914.322645
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=1913,\n     constraints={'min_value': 1881,\n      'max_value': 2001,\n      'shrink_towards': 0,\n      'weights': {1890: 0.04683234019568735, 1900: 0.0031676598043126614}},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('float',\n     {'min_value': -inf,\n      'max_value': inf,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 1.1125369292536007e-308}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00037679204251617193,
          "overall:gc": 0.0,
          "generate:node": 0.005598373943939805,
          "generate:ir_type_kwargs": 0.0024616250302642584,
          "generate:random": 2.9582995921373367e-05,
          "generate:unlabeled_3": 0.00011470797471702099,
          "generate:unlabeled_4": 7.108302088454366e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878969.067552
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "failed to satisfy assume() in test_misaligned_type (line 37)",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=-9853,\n     constraints={'min_value': None,\n      'max_value': -8707,\n      'shrink_towards': 0,\n      'weights': None},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('integer',\n     {'min_value': None,\n      'max_value': 24108,\n      'shrink_towards': 0,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 2.012500772252679e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0014356260653585196,
          "generate:ir_type_kwargs": 0.0005217500147409737,
          "generate:random": 9.124982170760632e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 0,
              "unsatisfied": 1
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878965.624737
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='float',\n     value=0.0,\n     constraints={'min_value': 0.0,\n      'max_value': 0.0,\n      'allow_nan': True,\n      'smallest_nonzero_magnitude': 5e-324},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.25978239362831174, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 9.724998380988836e-05,
          "overall:gc": 0.0,
          "generate:node": 0.00460287497844547,
          "generate:ir_type_kwargs": 0.00012095802230760455,
          "generate:random": 8.62503657117486e-06,
          "generate:unlabeled_3": 3.850000211969018e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878958.7321322
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=16234,\n     constraints={'min_value': -1854,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.562756187159564, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.370802970603108e-05,
          "overall:gc": 0.0,
          "generate:node": 0.004029249015729874,
          "generate:ir_type_kwargs": 0.00010133400792255998,
          "generate:random": 7.875030860304832e-06,
          "generate:unlabeled_3": 4.254200030118227e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878915.7982562
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=211,\n     constraints={'min_value': -6021,\n      'max_value': 23928,\n      'shrink_towards': 30876,\n      'weights': {14687: 0.005016724941616292,\n       8097: 0.0397992352524557,\n       13194: 0.02923693294553502,\n       -2333: 0.042073448294617795}},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('bytes', {'forced': None, 'min_size': 0, 'max_size': 100}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00017979100812226534,
          "overall:gc": 0.0,
          "generate:node": 0.0021899169660173357,
          "generate:ir_type_kwargs": 0.0002496240776963532,
          "generate:random": 8.125032763928175e-06,
          "generate:unlabeled_3": 3.604200901463628e-05,
          "generate:unlabeled_4": 2.9959017410874367e-05,
          "generate:unlabeled_5": 2.7958012651652098e-05,
          "generate:unlabeled_6": 2.5374989490956068e-05,
          "generate:unlabeled_7": 2.62079993262887e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878934.932451
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='float',\n     value=-3.626330398397323e+16,\n     constraints={'min_value': -inf,\n      'max_value': inf,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 1.1095236333083838e+16},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('integer',\n     {'min_value': None,\n      'max_value': -52,\n      'shrink_towards': 0,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00016008300008252263,
          "overall:gc": 0.00038133299676701427,
          "generate:node": 0.001148916024249047,
          "generate:ir_type_kwargs": 0.00048745801905170083,
          "generate:random": 7.499998901039362e-06,
          "generate:unlabeled_3": 4.0417013224214315e-05,
          "generate:unlabeled_4": 2.462498378008604e-05,
          "generate:unlabeled_5": 3.549997927621007e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878922.725651
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='bytes',\n     value=b'',\n     constraints={'min_size': 0, 'max_size': 10_000_000_000},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('string', {'intervals': IntervalSet(\n          build_intervals(\n              [404, 78899, 389280, 653019, 777264, 850624, 943561, 1073746],\n          ),\n      ), 'forced': None, 'min_size': 0, 'max_size': 100}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0008225810015574098,
          "overall:gc": 0.008147374959662557,
          "generate:node": 0.0027354999911040068,
          "generate:ir_type_kwargs": 0.003089791047386825,
          "generate:random": 2.6083027478307486e-05,
          "generate:unlabeled_3": 0.00011441699462011456,
          "generate:unlabeled_4": 8.716701995581388e-05,
          "generate:unlabeled_5": 8.583400631323457e-05,
          "generate:unlabeled_6": 6.704096449539065e-05,
          "generate:unlabeled_7": 5.9959013015031815e-05,
          "generate:unlabeled_8": 8.366600377485156e-05,
          "generate:unlabeled_9": 7.89170153439045e-05,
          "generate:unlabeled_10": 8.541700663045049e-05,
          "generate:unlabeled_11": 7.949996506795287e-05,
          "generate:unlabeled_12": 9.575003059580922e-05,
          "generate:unlabeled_13": 6.29170099273324e-05,
          "generate:unlabeled_14": 2.6958005037158728e-05,
          "generate:unlabeled_15": 3.024999750778079e-05,
          "generate:unlabeled_16": 3.1584000680595636e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878918.582103
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "failed to satisfy assume() in test_misaligned_type (line 37)",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='float',\n     value=0.0,\n     constraints={'min_value': 0.0,\n      'max_value': 0.05,\n      'allow_nan': True,\n      'smallest_nonzero_magnitude': 0.010900115916022838},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('float',\n     {'min_value': 6.2500467099017915e+209,\n      'max_value': inf,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 1.3322748395173088e+16}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 2.0209001377224922e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0013283760054036975,
          "generate:ir_type_kwargs": 0.0004403330385684967,
          "generate:random": 7.790978997945786e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 0,
              "unsatisfied": 1
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878964.434556
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=-58,\n     constraints={'min_value': -1854,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.1296047195937611, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00018441601423546672,
          "overall:gc": 0.0,
          "generate:node": 0.0015816669911146164,
          "generate:ir_type_kwargs": 0.00014004198601469398,
          "generate:random": 8.624978363513947e-06,
          "generate:unlabeled_3": 3.9209029637277126e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878910.021299
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=17642,\n     constraints={'min_value': 1881,\n      'max_value': 21764,\n      'shrink_towards': 0,\n      'weights': {17642: 0.922358724243232}},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('string',\n     {'intervals': IntervalSet(build_intervals([473350, 652105])),\n      'forced': None,\n      'min_size': 0,\n      'max_size': 100}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0001856659073382616,
          "overall:gc": 0.0,
          "generate:node": 0.0014762920327484608,
          "generate:ir_type_kwargs": 0.0008880830137059093,
          "generate:random": 8.833012543618679e-06,
          "generate:unlabeled_3": 4.170800093561411e-05,
          "generate:unlabeled_4": 3.366702003404498e-05,
          "generate:unlabeled_5": 2.8084032237529755e-05,
          "generate:unlabeled_6": 2.820801455527544e-05,
          "generate:unlabeled_7": 2.5333021767437458e-05,
          "generate:unlabeled_8": 2.7749978471547365e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878919.995415
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='bytes',\n     value=b'',\n     constraints={'min_size': 0, 'max_size': 0},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.9809307972385906, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.312401430681348e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0008440419915132225,
          "generate:ir_type_kwargs": 0.00010187504813075066,
          "generate:random": 8.291972335428e-06,
          "generate:unlabeled_3": 3.3791991882026196e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878933.568021
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=4370,\n     constraints={'min_value': 1881,\n      'max_value': 8192,\n      'shrink_towards': 0,\n      'weights': {7031: 0.07338383052801774,\n       7869: 0.07399990096050514,\n       8192: 0.022013446322213144,\n       2066: 0.13931544836872425,\n       6192: 0.07682256998753705,\n       3245: 0.07900392153667798,\n       4979: 0.13931684153713958,\n       6822: 0.05587102908981545}},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('float',\n     {'min_value': -2.519844311425217e+144,\n      'max_value': inf,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 5e-324}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "Retried draw from integers(1881, 8192).filter(not_yet_in_unique_list) to satisfy filter": ""
        },
        "timing": {
          "execute:test": 0.00015233305748552084,
          "overall:gc": 7.770897354930639e-05,
          "generate:node": 0.004451416956726462,
          "generate:ir_type_kwargs": 0.00046087498776614666,
          "generate:random": 8.333008736371994e-06,
          "generate:unlabeled_3": 3.487494541332126e-05,
          "generate:unlabeled_4": 2.7708010748028755e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878925.497229
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=-30013,\n     constraints={'min_value': None,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('float',\n     {'min_value': -inf,\n      'max_value': -1.6896434793761894e-122,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 1.1260609509123076e+307}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00013962597586214542,
          "overall:gc": 0.0,
          "generate:node": 0.0011545830057002604,
          "generate:ir_type_kwargs": 0.0005098329856991768,
          "generate:random": 8.124974556267262e-06,
          "generate:unlabeled_3": 3.645801916718483e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878956.398795
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=23044,\n     constraints={'min_value': 2,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.928391912526199, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.016597712412477e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0011702500050887465,
          "generate:ir_type_kwargs": 0.00012174999574199319,
          "generate:random": 8.374976459890604e-06,
          "generate:unlabeled_3": 3.545900108292699e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878971.361102
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=5228,\n     constraints={'min_value': -8361,\n      'max_value': 25386,\n      'shrink_towards': 0,\n      'weights': {5228: 0.9596475792272972}},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('float',\n     {'min_value': 5.88502293604187e-151,\n      'max_value': 2.5690022326495604e+16,\n      'forced': None,\n      'allow_nan': True,\n      'smallest_nonzero_magnitude': 6330434420438036.0}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00015541701577603817,
          "overall:gc": 0.0,
          "generate:node": 0.006803791970014572,
          "generate:ir_type_kwargs": 0.0006666250410489738,
          "generate:random": 9.709037840366364e-06,
          "generate:unlabeled_3": 3.3582968171685934e-05,
          "generate:unlabeled_4": 2.9583985451608896e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878957.5445728
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='boolean',\n     value=False,\n     constraints={'p': 0.26567065925630146},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('string',\n     {'intervals': IntervalSet(build_intervals([1, 451514, 740995])),\n      'forced': None,\n      'min_size': 0,\n      'max_size': 86}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00023358192993327975,
          "overall:gc": 0.0001396660227328539,
          "generate:node": 0.0008098760154098272,
          "generate:ir_type_kwargs": 0.009019291959702969,
          "generate:random": 1.4416989870369434e-05,
          "generate:unlabeled_3": 5.479203537106514e-05,
          "generate:unlabeled_4": 3.508396912366152e-05,
          "generate:unlabeled_5": 3.0542025342583656e-05,
          "generate:unlabeled_6": 2.8667040169239044e-05,
          "generate:unlabeled_7": 2.675002906471491e-05,
          "generate:unlabeled_8": 3.61259444616735e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878952.86706
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='float',\n     value=-1.3980888413120436e+16,\n     constraints={'min_value': -inf,\n      'max_value': inf,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 2.225073858507e-311},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('string', {'intervals': IntervalSet(\n          build_intervals([83, 8192, 377096, 628566, 630726, 688885, 1039135]),\n      ), 'forced': None, 'min_size': 0, 'max_size': 10_000_000_000}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.000919792044442147,
          "overall:gc": 0.0,
          "generate:node": 0.0011255410499870777,
          "generate:ir_type_kwargs": 0.0009608750115148723,
          "generate:random": 8.541042916476727e-06,
          "generate:unlabeled_3": 4.1207997128367424e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878937.698905
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=1931,\n     constraints={'min_value': 1881,\n      'max_value': 2001,\n      'shrink_towards': 0,\n      'weights': {1951: 0.023421815462821922,\n       1908: 0.035132723194232884,\n       1931: 0.036312779813126535,\n       1881: 0.023421815462821922,\n       1996: 0.018665149422381164,\n       1896: 0.03666189665857386,\n       1939: 0.05023424916364866,\n       1947: 0.019348684031505442}},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.9740632688043165, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.450004341080785e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0019418339361436665,
          "generate:ir_type_kwargs": 0.00011079199612140656,
          "generate:random": 8.542032446712255e-06,
          "generate:unlabeled_3": 3.287498839199543e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878950.537052
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=16234,\n     constraints={'min_value': None,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.10173398599487674, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.933302549645305e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0010877919849008322,
          "generate:ir_type_kwargs": 0.0001154160127043724,
          "generate:random": 8.082948625087738e-06,
          "generate:unlabeled_3": 3.629195271059871e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878951.705034
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='bytes',\n     value=b'',\n     constraints={'min_size': 0, 'max_size': 0},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.9120886098768048, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.79579859226942e-05,
          "overall:gc": 0.00010245799785479903,
          "generate:node": 0.0008955409866757691,
          "generate:ir_type_kwargs": 0.00011766701936721802,
          "generate:random": 8.66700429469347e-06,
          "generate:unlabeled_3": 2.7542002499103546e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878962.1401842
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='boolean',\n     value=False,\n     constraints={'p': 1.192092896e-07},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('integer',\n     {'min_value': None,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0001349999220110476,
          "overall:gc": 0.0,
          "generate:node": 0.0008552079671062529,
          "generate:ir_type_kwargs": 0.0004153330228291452,
          "generate:random": 8.374976459890604e-06,
          "generate:unlabeled_3": 3.9583013858646154e-05,
          "generate:unlabeled_4": 2.900004619732499e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878912.7998211
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='bytes',\n     value=b'\\xd8\\xcd\\xc3\\x10A\\x1e~\\xc2sx\\xa6a\\xc9|\\xd5\\x9b\\x00D:\\x1a\\x07\\xa6\\xf0\\xafl\\x87p',\n     constraints={'min_size': 13, 'max_size': 10_000_000_000},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('integer',\n     {'min_value': -18495,\n      'max_value': 77,\n      'shrink_towards': -21558,\n      'weights': None,\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011237605940550566,
          "overall:gc": 0.0,
          "generate:node": 0.0010058340267278254,
          "generate:ir_type_kwargs": 0.00070433400105685,
          "generate:random": 8.583010639995337e-06,
          "generate:unlabeled_3": 3.045797348022461e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878945.6107352
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='float',\n     value=6.062486161046495e+307,\n     constraints={'min_value': -2.596458554701432e-170,\n      'max_value': inf,\n      'allow_nan': True,\n      'smallest_nonzero_magnitude': 3.944034145650903e+306},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('integer',\n     {'min_value': -64,\n      'max_value': 4892,\n      'shrink_towards': 31,\n      'weights': {2191: 0.009559703112683492,\n       1017: 0.0405276882841127,\n       3839: 0.025531047236962402,\n       876: 0.015139944059917065,\n       970: 0.0177723979174736,\n       678: 0.012368087867084715,\n       4154: 0.027841747934070467,\n       3630: 0.027031023970788756,\n       3114: 0.02187835487228061,\n       3046: 0.006378357448096463,\n       1368: 0.022329445741763508,\n       3404: 0.01694061231760916,\n       3445: 0.01976224894521025},\n      'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0006930429954081774,
          "overall:gc": 0.0,
          "generate:node": 0.0011996259563602507,
          "generate:ir_type_kwargs": 0.010395039978902787,
          "generate:random": 4.2665982618927956e-05,
          "generate:unlabeled_3": 0.00018154102144762874,
          "generate:unlabeled_4": 0.00010862498311325908,
          "generate:unlabeled_5": 9.583303472027183e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878959.865983
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='float',\n     value=0.0,\n     constraints={'min_value': 0.0,\n      'max_value': 0.0,\n      'allow_nan': True,\n      'smallest_nonzero_magnitude': 5e-324},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.0, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 6.337498780339956e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0011507919989526272,
          "generate:ir_type_kwargs": 8.362496737390757e-05,
          "generate:random": 7.3750270530581474e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878955.220938
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='bytes',\n     value=b'hypofuzz.test_keys',\n     constraints={'min_size': 13, 'max_size': 10_000_000_000},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.0, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 6.07079709880054e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0008669990347698331,
          "generate:ir_type_kwargs": 0.00010441697668284178,
          "generate:random": 6.9579691626131535e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878926.86733
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=1888,\n     constraints={'min_value': 1881,\n      'max_value': 2001,\n      'shrink_towards': 0,\n      'weights': {1990: 0.032320918686694414,\n       1928: 0.0032320918686694414,\n       1926: 0.03259445066008766,\n       1933: 0.022745083106247187,\n       1887: 0.016954583202105186,\n       1915: 0.05585216075303589,\n       1996: 0.020695710282579775,\n       1916: 0.05170127187121713,\n       1881: 0.02257075734522233}},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.9115379581733909, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.941696094349027e-05,
          "overall:gc": 0.0,
          "generate:node": 0.002084291016217321,
          "generate:ir_type_kwargs": 0.0001134999911300838,
          "generate:random": 8.291041012853384e-06,
          "generate:unlabeled_3": 3.670802107080817e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878928.231838
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=28795,\n     constraints={'min_value': 121,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 1.0, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.599999662488699e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0017159999697469175,
          "generate:ir_type_kwargs": 0.00010404200293123722,
          "generate:random": 8.25000461190939e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878932.258776
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "failed to satisfy assume() in test_misaligned_type (line 37)",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='string',\n     value='\\U00032585\u0272\u019a\u022a\u0199\u023e\u0229\u01cd',\n     constraints={'intervals': IntervalSet(\n          build_intervals([404, 2972, 102768, 274474, 753505, 904618]),\n      ), 'min_size': 0, 'max_size': 10_000_000_000},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('string', {'intervals': IntervalSet(\n          build_intervals([419963, 515849, 524752, 780396, 864231]),\n      ), 'forced': None, 'min_size': 0, 'max_size': 10_000_000_000}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 2.800003858283162e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0018834169604815543,
          "generate:ir_type_kwargs": 0.0021873339428566396,
          "generate:random": 1.233298098668456e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 0,
              "unsatisfied": 1
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878917.2337852
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='string',\n     value=\"P\u00fe\u00f2l\u0f84\u00c81\\x89v&?\\U00014d92\u00c4\u00d9r\u00fe\u00b1q\\x95\u00d6'\ud81c\udf81\\x1d\u00d9b\u0100\u00caA\u00cf\\x02\u00c0\\U000154d9\\x07\u00ca?\\x9e\u00ca\\x046w\u00b52\\x18\u00db\u00bb\ud800\udf6b\u00d5\u00aa\u768f]\\x83T\u0875\\x8a\u00b1\u83ac\u8cbc\u00a5\ua0c0al:B\ud81a\uddc3q\",\n     constraints={'intervals': IntervalSet(\n          build_intervals([1, 97297, 679355])),\n      'min_size': 40,\n      'max_size': 10_000_000_000},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('float',\n     {'min_value': -inf,\n      'max_value': -29630.85278377052,\n      'forced': None,\n      'allow_nan': True,\n      'smallest_nonzero_magnitude': 1.0819251727132973e+308}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.000161041971296072,
          "overall:gc": 0.0,
          "generate:node": 0.0017766249948181212,
          "generate:ir_type_kwargs": 0.0017715420108288527,
          "generate:random": 1.0624993592500687e-05,
          "generate:unlabeled_3": 3.8207974284887314e-05,
          "generate:unlabeled_4": 3.08750313706696e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878944.284889
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='bytes',\n     value=b'-Gt\\xd2A\\xeb\\x94\\xbf7d\\xb8\\xaa\\xf1\"\\xc32tS\\x03\\xa08M\\x8e\\xad9\\xd0\\x8e\\x16\\x0c\\x1c7=\\xd8e\\xbd\\xbc79\\xb3do+\\r\\xc1\\x0c\\x87\\xfaM\\xd1ed\\x83\\xdc\\xe7\\xf3\\x88\\xbaX\\xddY<\\x1b\\xe3F\\xda\\xd5\\x99TY%\\x11iH\\xb2~T\\xb3\\xf7\\xad\\xa9}\\xdb\\x84\\x9c\\x0f?\\x96\\r\\x0f\\t_\\x7f\\xf3~*0\\xa9>\\x04\\xf3#\\x84\\x85:\\xc0\\xb6U:\\x8d;\\x15\\xd6\\xecE\\x8d+\\xa0\\xd9\\xf8x\\xb6\\xfb\\xfb\\xf1\\xed\\x93\\xf0\\xfe\\x17\\x0c\\xee\\xd5\\x16\\xcc\\xa8\\x8b\\xca\\xefE9\\xc6\\xc1D9K\\x16\\x19\\xc4Gq\\xce!\\xe1l._7\\x04\\x0b\\x84|\\xef\\x19\\xee\\xf7\\xf0e\\xb7\\xeb',\n     constraints={'min_size': 50, 'max_size': 10_000_000_000},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('float',\n     {'min_value': -inf,\n      'max_value': inf,\n      'forced': None,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 7.026543679834719e+307}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.003359665919560939,
          "overall:gc": 5.120900459587574e-05,
          "generate:node": 0.0029440009966492653,
          "generate:ir_type_kwargs": 0.0005074580549262464,
          "generate:random": 2.775003667920828e-05,
          "generate:unlabeled_3": 7.820804603397846e-05,
          "generate:unlabeled_4": 4.016701132059097e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878905.870395
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='float',\n     value=1.4927782729550948e+307,\n     constraints={'min_value': 5.809303441946711e+87,\n      'max_value': 1.8342543678525282e+307,\n      'allow_nan': True,\n      'smallest_nonzero_magnitude': 0.5},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('bytes', {'forced': None, 'min_size': 0, 'max_size': 52}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0005169989890418947,
          "overall:gc": 0.0,
          "generate:node": 0.006937958998605609,
          "generate:ir_type_kwargs": 0.0008054580539464951,
          "generate:random": 3.1582952942699194e-05,
          "generate:unlabeled_3": 7.954204920679331e-05,
          "generate:unlabeled_4": 9.699998190626502e-05,
          "generate:unlabeled_5": 9.32089751586318e-05,
          "generate:unlabeled_6": 8.450000314041972e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878911.351416
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='bytes',\n     value=b'',\n     constraints={'min_size': 0, 'max_size': 0},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.0, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 6.416701944544911e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0008840839727781713,
          "generate:ir_type_kwargs": 8.362496737390757e-05,
          "generate:random": 6.999995093792677e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878939.009908
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=172,\n     constraints={'min_value': 118,\n      'max_value': 218,\n      'shrink_towards': 0,\n      'weights': {198: 0.2318000173824724,\n       134: 0.17086814904014813,\n       186: 0.22686062372438714,\n       172: 0.12807799508630166}},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.5659777985666831, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.562502287328243e-05,
          "overall:gc": 0.0,
          "generate:node": 0.00209483306389302,
          "generate:ir_type_kwargs": 0.00011195801198482513,
          "generate:random": 8.707982487976551e-06,
          "generate:unlabeled_3": 3.362499410286546e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878924.061418
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=1887,\n     constraints={'min_value': 1881,\n      'max_value': 2001,\n      'shrink_towards': 0,\n      'weights': {1887: 0.07866515440258508,\n       1886: 0.009611864178525137,\n       1882: 0.024658978092764038,\n       1950: 0.010100938613201032,\n       1967: 0.08923486241183136,\n       1881: 0.041784759791804287,\n       1970: 0.06407909452350091,\n       1955: 0.19223536119766704,\n       1989: 0.1045313767444591,\n       1984: 0.13272306385652508}},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('string',\n     {'intervals': IntervalSet(build_intervals([670953, 791853])),\n      'forced': None,\n      'min_size': 0,\n      'max_size': 85}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0005740420310758054,
          "overall:gc": 8.108298061415553e-05,
          "generate:node": 0.003659416048321873,
          "generate:ir_type_kwargs": 0.0009740829700604081,
          "generate:random": 1.0041985660791397e-05,
          "generate:unlabeled_3": 3.670802107080817e-05,
          "generate:unlabeled_4": 3.391597419977188e-05,
          "generate:unlabeled_5": 3.145897062495351e-05,
          "generate:unlabeled_6": 2.9499991796910763e-05,
          "generate:unlabeled_7": 2.479099202901125e-05,
          "generate:unlabeled_8": 2.258399035781622e-05,
          "generate:unlabeled_9": 2.8542010113596916e-05,
          "generate:unlabeled_10": 2.7542002499103546e-05,
          "generate:unlabeled_11": 3.0124967452138662e-05,
          "generate:unlabeled_12": 2.8875016141682863e-05,
          "generate:unlabeled_13": 3.225001273676753e-05,
          "generate:unlabeled_14": 2.866698196157813e-05,
          "generate:unlabeled_15": 2.775003667920828e-05,
          "generate:unlabeled_16": 2.6999972760677338e-05,
          "generate:unlabeled_17": 2.420798409730196e-05,
          "generate:unlabeled_18": 2.31250305660069e-05,
          "generate:unlabeled_19": 2.5957997422665358e-05,
          "generate:unlabeled_20": 2.479198155924678e-05,
          "generate:unlabeled_21": 2.454203786328435e-05,
          "generate:unlabeled_22": 2.6708003133535385e-05,
          "generate:unlabeled_23": 2.762500662356615e-05,
          "generate:unlabeled_24": 3.020901931449771e-05,
          "generate:unlabeled_25": 2.662499900907278e-05,
          "generate:unlabeled_26": 2.9916991479694843e-05,
          "generate:unlabeled_27": 2.4957989808171988e-05,
          "generate:unlabeled_28": 1.9791012164205313e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878946.958702
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='float',\n     value=-1.7976931348623157e+308,\n     constraints={'min_value': -inf,\n      'max_value': 2.3936293179777064e+16,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 5.754788441761333e+16},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.2365302614912364, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.475006325170398e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0015706660342402756,
          "generate:ir_type_kwargs": 0.00012187502579763532,
          "generate:random": 8.624978363513947e-06,
          "generate:unlabeled_3": 3.216695040464401e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878936.28321
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "failed to satisfy assume() in test_misaligned_type (line 37)",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='float',\n     value=-inf,\n     constraints={'min_value': -inf,\n      'max_value': 2.3936293179777064e+16,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 1.932888673764019e+16},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('float',\n     {'min_value': 2.928982346517822e+16,\n      'max_value': 4.518567536951077e+307,\n      'forced': None,\n      'allow_nan': True,\n      'smallest_nonzero_magnitude': 5.854925371246157e+16}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 1.7290993127971888e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0012087499490007758,
          "generate:ir_type_kwargs": 0.0006440409924834967,
          "generate:random": 8.415954653173685e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 0,
              "unsatisfied": 1
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878941.645748
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='string',\n     value='\\U0004912d\\U00053043\\U0003d75e\\U00046638\\U0003d754\\U0003d764\\U0003d77e',\n     constraints={'intervals': IntervalSet(\n          build_intervals(\n              [251702,\n               374726,\n               437553,\n               477863,\n               726950,\n               799297,\n               902003,\n               915732,\n               931488],\n          ),\n      ),\n      'min_size': 0,\n      'max_size': 10_000_000_000},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.5, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.545798482373357e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0018085410119965672,
          "generate:ir_type_kwargs": 0.00010729097994044423,
          "generate:random": 7.832946721464396e-06,
          "generate:unlabeled_3": 4.2041996493935585e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878907.358776
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='string',\n     value='\u31c0,',\n     constraints={'intervals': IntervalSet(\n          build_intervals([4, 194007, 789485, 1114111]),\n      ), 'min_size': 0, 'max_size': 10_000_000_000},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 2.160780168668335e-89, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.30009812489152e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0015332920593209565,
          "generate:ir_type_kwargs": 0.00012429198250174522,
          "generate:random": 8.792034350335598e-06,
          "generate:unlabeled_3": 4.033301956951618e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878966.7496881
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='float',\n     value=1.7976931348623157e+308,\n     constraints={'min_value': 4.462567576317657e+204,\n      'max_value': inf,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 1.328094584807488e+308},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('bytes',\n     {'forced': None, 'min_size': 0, 'max_size': 10_000_000_000}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00027362501714378595,
          "overall:gc": 0.0,
          "generate:node": 0.001242915983311832,
          "generate:ir_type_kwargs": 0.00020770798437297344,
          "generate:random": 8.624978363513947e-06,
          "generate:unlabeled_3": 3.925000783056021e-05,
          "generate:unlabeled_4": 2.9292015824466944e-05,
          "generate:unlabeled_5": 2.8124952223151922e-05,
          "generate:unlabeled_6": 2.1458021365106106e-05,
          "generate:unlabeled_7": 2.8999987989664078e-05,
          "generate:unlabeled_8": 3.0499999411404133e-05,
          "generate:unlabeled_9": 2.7875008527189493e-05,
          "generate:unlabeled_10": 2.5667017325758934e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878970.227486
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='float',\n     value=-inf,\n     constraints={'min_value': -inf,\n      'max_value': 2.1309899604839596e+16,\n      'allow_nan': True,\n      'smallest_nonzero_magnitude': 0.5},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.8442489291436088, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.424992509186268e-05,
          "overall:gc": 0.0,
          "generate:node": 0.001133750018198043,
          "generate:ir_type_kwargs": 0.00011124997399747372,
          "generate:random": 7.333001121878624e-06,
          "generate:unlabeled_3": 1.4625024050474167e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878930.89059
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=28795,\n     constraints={'min_value': 121,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('string', {'intervals': IntervalSet(\n          build_intervals([0, 36, 205989, 934317, 1024685]),\n      ), 'forced': None, 'min_size': 0, 'max_size': 10_000_000_000}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0004167070728726685,
          "overall:gc": 0.0,
          "generate:node": 0.0011270010145381093,
          "generate:ir_type_kwargs": 0.0008798330090939999,
          "generate:random": 7.916009053587914e-06,
          "generate:unlabeled_3": 2.7292000595480204e-05,
          "generate:unlabeled_4": 3.44999716617167e-05,
          "generate:unlabeled_5": 2.8916983865201473e-05,
          "generate:unlabeled_6": 2.9999995604157448e-05,
          "generate:unlabeled_7": 2.279196633026004e-05,
          "generate:unlabeled_8": 2.6291992980986834e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878949.3795059
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "failed to satisfy assume() in test_misaligned_type (line 37)",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='float',\n     value=-3.2116541616694944e+16,\n     constraints={'min_value': -inf,\n      'max_value': inf,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 1.1095236333083838e+16},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('float',\n     {'min_value': -inf,\n      'max_value': inf,\n      'forced': None,\n      'allow_nan': True,\n      'smallest_nonzero_magnitude': 1.1095236333083838e+16}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 1.858297036960721e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0011240839958190918,
          "generate:ir_type_kwargs": 0.0003798329853452742,
          "generate:random": 7.2499969974160194e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 0,
              "unsatisfied": 1
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878948.2238898
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=134260433,\n     constraints={'min_value': 11532,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('bytes',\n     {'forced': None, 'min_size': 0, 'max_size': 10_000_000_000}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00016595900524407625,
          "overall:gc": 0.0,
          "generate:node": 0.00195629196241498,
          "generate:ir_type_kwargs": 0.0001976670464500785,
          "generate:random": 8.417002391070127e-06,
          "generate:unlabeled_3": 4.374998388811946e-05,
          "generate:unlabeled_4": 3.258301876485348e-05,
          "generate:unlabeled_5": 2.658303128555417e-05,
          "generate:unlabeled_6": 2.5707995519042015e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878929.552463
      }
    ],
    "corpus": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='string',\n     value='',\n     constraints={'intervals': IntervalSet(\n          build_intervals([4, 789485, 1114111]),\n      ), 'min_size': 0, 'max_size': 10_000_000_000},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 1.0, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.829199941828847e-05,
          "overall:gc": 0.0,
          "generate:node": 0.009581415099091828,
          "generate:ir_type_kwargs": 0.00013395899441093206,
          "generate:random": 9.166018571704626e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878961.809929
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='bytes',\n     value=b'\\xd8\\xcd\\xc3\\x10A\\x1e~\\xc2sx\\xa6a\\xc9|\\xd5\\x9b\\x00D:\\x1a\\x07\\xa6\\xf0\\xafl\\x87p',\n     constraints={'min_size': 13, 'max_size': 10_000_000_000},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.0, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.375003769993782e-05,
          "overall:gc": 0.0,
          "generate:node": 0.001140416949056089,
          "generate:ir_type_kwargs": 0.00012012501247227192,
          "generate:random": 8.08399636298418e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878964.000277
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=1903,\n     constraints={'min_value': 1881,\n      'max_value': 2001,\n      'shrink_towards': 0,\n      'weights': {1882: 0.05}},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.0, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 5.904101999476552e-05,
          "overall:gc": 0.0,
          "generate:node": 0.001408000010997057,
          "generate:ir_type_kwargs": 0.0001009170082397759,
          "generate:random": 7.166992872953415e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878927.1199
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=16234,\n     constraints={'min_value': None,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.0, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 6.53750030323863e-05,
          "overall:gc": 0.0,
          "generate:node": 0.00117816700367257,
          "generate:ir_type_kwargs": 0.00010429200483486056,
          "generate:random": 7.62502895668149e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878946.9746199
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=16234,\n     constraints={'min_value': None,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.0, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.858301978558302e-05,
          "overall:gc": 0.0,
          "generate:node": 0.005919041985180229,
          "generate:ir_type_kwargs": 0.00015612499555572867,
          "generate:random": 9.374984074383974e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878953.477816
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='string',\n     value='\\x92\\x82Mh\u254ao\\x03\u00d0+\u00df\\U0001618c\\t\ud81a\udf5b0M\u00c9\u00d8\ud808\ude7c\u1f15\u00cc\\x96\u00f3\u00ac]\\x18j\u00ba\u00f1\\x8ei\\x11\\\\\\U00010f94\u00f9\\x07\u00f2\u00e7o\u00f8}pn\\x11\\x1eT\\x10\u00a6\\x9b\\x81\u00fe\u00c8&\u00b1\\U00015474\\x85Thv\\x1d\"v\u00b3p\u00a9\u023dM\u00c1\\x8b\u00bc{\ud81c\ude46\\x95\u00ab\u00d9\\x9e\u8ffa\u00b9\u00d5\u00b3\ub65d\u87e1\\x07\ufbd9\u00c2\\x0f\u00a6z\\x98~',\n     constraints={'intervals': IntervalSet(build_intervals([1, 97297])),\n      'min_size': 40,\n      'max_size': 10_000_000_000},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.0, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 7.241696584969759e-05,
          "overall:gc": 0.0,
          "generate:node": 0.001729791983962059,
          "generate:ir_type_kwargs": 9.137496817857027e-05,
          "generate:random": 7.6669966802001e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878928.966487
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='float',\n     value=-inf,\n     constraints={'min_value': -inf,\n      'max_value': 2.3936293179777064e+16,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 5.754788441761333e+16},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.0, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 6.391602801159024e-05,
          "overall:gc": 0.0,
          "generate:node": 0.001270500011742115,
          "generate:ir_type_kwargs": 0.0001080420333892107,
          "generate:random": 7.5830030255019665e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878932.913409
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=1226,\n     constraints={'min_value': 1,\n      'max_value': 17765,\n      'shrink_towards': 0,\n      'weights': None},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.0, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 6.504199700430036e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0012644170201383531,
          "generate:ir_type_kwargs": 0.00011483300477266312,
          "generate:random": 8.000002708286047e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878948.798198
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=23044,\n     constraints={'min_value': 2,\n      'max_value': None,\n      'shrink_towards': 0,\n      'weights': None},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.0, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 6.0165999457240105e-05,
          "overall:gc": 0.0,
          "generate:node": 0.001139124040491879,
          "generate:ir_type_kwargs": 9.329098975285888e-05,
          "generate:random": 7.750000804662704e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878961.728829
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='float',\n     value=-3.2116541616694944e+16,\n     constraints={'min_value': -inf,\n      'max_value': inf,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 1.1095236333083838e+16},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.0, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00022716698003932834,
          "overall:gc": 0.0,
          "generate:node": 0.0013047500397078693,
          "generate:ir_type_kwargs": 0.00011299998732283711,
          "generate:random": 8.457980584353209e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878935.6592
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='integer',\n     value=-8243,\n     constraints={'min_value': None,\n      'max_value': 1,\n      'shrink_towards': 0,\n      'weights': None},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.0, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 6.654200842604041e-05,
          "overall:gc": 0.0,
          "generate:node": 0.001287125051021576,
          "generate:ir_type_kwargs": 0.00010516599286347628,
          "generate:random": 8.000002708286047e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878954.046753
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='bytes',\n     value=b'',\n     constraints={'min_size': 0, 'max_size': 10_000_000_000},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.0, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 6.71250163577497e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0008565410389564931,
          "generate:ir_type_kwargs": 0.00010183302219957113,
          "generate:random": 8.207978680729866e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878933.81762
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='float',\n     value=0.0,\n     constraints={'min_value': 0.0,\n      'max_value': 0.0,\n      'allow_nan': True,\n      'smallest_nonzero_magnitude': 5e-324},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.0, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 8.404196705669165e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0012561240000650287,
          "generate:ir_type_kwargs": 0.00010183296399191022,
          "generate:random": 4.1040999349206686e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878949.928811
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='float',\n     value=1.7976931348623157e+308,\n     constraints={'min_value': 5.294422852056167e+16,\n      'max_value': inf,\n      'allow_nan': False,\n      'smallest_nonzero_magnitude': 5.960464477539063e-08},\n     was_forced=False,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.0, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 6.754201604053378e-05,
          "overall:gc": 0.0,
          "generate:node": 0.0012020000140182674,
          "generate:ir_type_kwargs": 8.733296999707818e-05,
          "generate:random": 7.750000804662704e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878971.676917
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_type(\n    node=ChoiceNode(type='bytes',\n     value=b'',\n     constraints={'min_size': 0, 'max_size': 0},\n     was_forced=True,\n     index=None),\n    ir_type_kwargs=('boolean', {'p': 0.0, 'forced': None}),\n    random=HypothesisRandom(generated data),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 6.195902824401855e-05,
          "overall:gc": 0.0,
          "generate:node": 0.000959124939981848,
          "generate:ir_type_kwargs": 0.00010424997890368104,
          "generate:random": 7.2909751906991005e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_type (line 37)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46225,
          "imported_at": 1747878904.021919
        },
        "property": "tests/test_provider.py::test_misaligned_type",
        "run_start": 1747878923.343384
      }
    ]
  },
  "tests/test_provider.py::test_misaligned_kwargs": {
    "rolling": [
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "failed to satisfy assume() in test_misaligned_kwargs (line 50)",
        "representation": "test_misaligned_kwargs(\n    data=data(...),\n)\nDraw 1: {'type': 'integer',\n 'value': -76,\n 'constraints': {'min_value': None,\n  'max_value': 4403,\n  'shrink_towards': 16750,\n  'weights': None},\n 'was_forced': True,\n 'index': None}\nDraw 2: {'min_value': None,\n 'max_value': None,\n 'shrink_towards': 0,\n 'weights': None,\n 'forced': None}",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00011916703078895807,
          "overall:gc": 0.00018150004325434566,
          "generate:data": 1.2042000889778137e-05,
          "generate:Draw 1": 0.0013996249181218445,
          "generate:Draw 2": 0.00036808301229029894
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_kwargs (line 50)": {
              "satisfied": 0,
              "unsatisfied": 1
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_provider.py::test_misaligned_kwargs",
        "run_start": 1747878935.7731268
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_kwargs(\n    data=data(...),\n)\nDraw 1: {'type': 'string',\n 'value': '\u00fem\u8734',\n 'constraints': {'intervals': 'IntervalSet(((1, 117577), (380844, 572739), (749392, 832664)))',\n  'min_size': 0,\n  'max_size': 10_000_000_000},\n 'was_forced': False,\n 'index': None}\nDraw 2: {'intervals': 'IntervalSet(((65136, 250324), (456773, 569031), (651459, 777231)))',\n 'forced': None,\n 'min_size': 0,\n 'max_size': 20}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00034974998561665416,
          "overall:gc": 0.00027141603641211987,
          "generate:data": 9.584007784724236e-06,
          "generate:Draw 1": 0.0017349999980069697,
          "generate:Draw 2": 0.0008632499957457185,
          "generate:Draw 3": 1.091696321964264e-05,
          "generate:unlabeled_4": 4.2041996493935585e-05,
          "generate:unlabeled_5": 3.466597991064191e-05,
          "generate:unlabeled_6": 2.2709020413458347e-05,
          "generate:unlabeled_7": 2.237502485513687e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_kwargs (line 50)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_provider.py::test_misaligned_kwargs",
        "run_start": 1747878915.183079
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_kwargs(\n    data=data(...),\n)\nDraw 1: {'type': 'bytes',\n 'value': 'b\\'-Gt\\\\xd2A\\\\xeb\\\\x94\\\\xbf7d\\\\xb8\\\\xaa\\\\xf1\"\\\\xc32tS\\\\x03\\\\xa08M\\\\x8e\\\\xad9\\\\xd0\\\\x8e\\\\x16\\\\x0c\\\\x1c7=\\\\xd8e\\\\xbd\\\\xbc79\\\\xb3do+\\\\r\\\\xc1\\\\x0c\\\\x87\\\\xfaM\\\\xd1ed\\\\x83\\\\xdc\\\\xe7\\\\xf3\\\\x88\\\\xbaX\\\\xddY<\\\\x1b\\\\xe3F\\\\xda\\\\xd5\\\\x99TY%\\\\x11iH\\\\xb2~T\\\\xb3\\\\xf7\\\\xad\\\\xa9}\\\\xdb\\\\x84\\\\x9c\\\\x0f?\\\\x96\\\\r\\\\x0f\\\\t_\\\\x7f\\\\xf3~*0\\\\xa9>\\\\x04\\\\xf3#\\\\x84\\\\x85:\\\\xc0\\\\xb6U:\\\\x8d;\\\\x15\\\\xd6\\\\xecE\\\\x8d+\\\\xa0\\\\xd9\\\\xf8x\\\\xb6\\\\xfb\\\\xfb\\\\xf1\\\\xed\\\\x93\\\\xf0\\\\xfe\\\\x17\\\\x0c\\\\xee\\\\xd5\\\\x16\\\\xcc\\\\xa8\\\\x8b\\\\xca\\\\xefE9\\\\xc6\\\\xc1D9K\\\\x16\\\\x19\\\\xc4Gq\\\\xce!\\\\xe1l._7\\\\x04\\\\x0b\\\\x84|\\\\xef\\\\x19\\\\xee\\\\xf7\\\\xf0e\\\\xb7\\\\xeb\\'',\n 'constraints': {'min_size': 50, 'max_size': 10_000_000_000},\n 'was_forced': False,\n 'index': None}\nDraw 2: {'forced': None,\n 'min_size': 0,\n 'max_size': 100}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.011461624002549797,
          "overall:gc": 0.0003434160025790334,
          "generate:data": 1.1666037607938051e-05,
          "generate:Draw 1": 0.1448182079475373,
          "generate:Draw 2": 0.00027304200921207666,
          "generate:Draw 3": 0.007939876057207584,
          "generate:unlabeled_4": 0.0006100829923525453,
          "generate:unlabeled_5": 5.483400309458375e-05,
          "generate:unlabeled_6": 0.00024716596817597747,
          "generate:unlabeled_7": 0.0004896669997833669,
          "generate:unlabeled_8": 6.491696694865823e-05,
          "generate:unlabeled_9": 3.412499791011214e-05,
          "generate:unlabeled_10": 3.2916024792939425e-05,
          "generate:unlabeled_11": 2.8207956347614527e-05,
          "generate:unlabeled_12": 2.8124952223151922e-05,
          "generate:unlabeled_13": 2.1209008991718292e-05,
          "generate:unlabeled_14": 2.0666979253292084e-05,
          "generate:unlabeled_15": 2.816703636199236e-05,
          "generate:unlabeled_16": 2.7459056582301855e-05,
          "generate:unlabeled_17": 0.0005387910059653223,
          "generate:unlabeled_18": 0.00011541700223460793,
          "generate:unlabeled_19": 9.1583002358675e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_kwargs (line 50)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_provider.py::test_misaligned_kwargs",
        "run_start": 1747878905.976716
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_kwargs(\n    data=data(...),\n)\nDraw 1: {'type': 'float',\n 'value': -4.483475347223413e+16,\n 'constraints': {'min_value': -inf,\n  'max_value': inf,\n  'allow_nan': False,\n  'smallest_nonzero_magnitude': 0.05},\n 'was_forced': False,\n 'index': None}\nDraw 2: {'min_value': -inf,\n 'max_value': inf,\n 'forced': None,\n 'allow_nan': True,\n 'smallest_nonzero_magnitude': 1.4149669773557632e+308}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00030749995494261384,
          "overall:gc": 0.00019266695016995072,
          "generate:data": 1.1167023330926895e-05,
          "generate:Draw 1": 0.0012863740557804704,
          "generate:Draw 2": 0.00038333400152623653,
          "generate:Draw 3": 9.959039743989706e-06,
          "generate:unlabeled_4": 3.329099854454398e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_kwargs (line 50)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_provider.py::test_misaligned_kwargs",
        "run_start": 1747878956.736536
      }
    ],
    "corpus": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_kwargs(\n    data=data(...),\n)\nDraw 1: {'type': 'bytes',\n 'value': \"b''\",\n 'constraints': {'min_size': 0, 'max_size': 10_000_000_000},\n 'was_forced': False,\n 'index': None}\nDraw 2: {'forced': None,\n 'min_size': 16,\n 'max_size': 116}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0003077509463764727,
          "overall:gc": 0.00011570798233151436,
          "generate:data": 1.108401920646429e-05,
          "generate:Draw 1": 0.000999458017759025,
          "generate:Draw 2": 0.0002502499846741557,
          "generate:Draw 3": 9.708048310130835e-06,
          "generate:unlabeled_4": 4.295801045373082e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_kwargs (line 50)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_provider.py::test_misaligned_kwargs",
        "run_start": 1747878929.340941
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_kwargs(\n    data=data(...),\n)\nDraw 1: {'type': 'integer',\n 'value': -5645,\n 'constraints': {'min_value': None,\n  'max_value': None,\n  'shrink_towards': -320_101_019_784_777_282,\n  'weights': None},\n 'was_forced': False,\n 'index': None}\nDraw 2: {'min_value': 120,\n 'max_value': 30612,\n 'shrink_towards': 1_295_007_658,\n 'weights': {'25082': 0.4622687710645559},\n 'forced': None}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00033608294324949384,
          "overall:gc": 0.00020291603868827224,
          "generate:data": 1.0541989468038082e-05,
          "generate:Draw 1": 0.0012043340248055756,
          "generate:Draw 2": 0.002178208960685879,
          "generate:Draw 3": 1.1000025551766157e-05,
          "generate:unlabeled_4": 3.287498839199543e-05,
          "generate:unlabeled_5": 3.450002986937761e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in test_misaligned_kwargs (line 50)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_provider.py::test_misaligned_kwargs",
        "run_start": 1747878917.493834
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_kwargs(\n    data=data(...),\n)\nDraw 1: {'type': 'float',\n 'value': -inf,\n 'constraints': {'min_value': -inf,\n  'max_value': inf,\n  'allow_nan': False,\n  'smallest_nonzero_magnitude': 8.29167075013473e+307},\n 'was_forced': True,\n 'index': None}\nDraw 2: {'min_value': 5.2201624307291976e+157,\n 'max_value': inf,\n 'forced': None,\n 'allow_nan': False,\n 'smallest_nonzero_magnitude': 9.691531421669166e+307}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00028466497315093875,
          "overall:gc": 0.00012345798313617706,
          "generate:data": 1.025001984089613e-05,
          "generate:Draw 1": 0.001206417044159025,
          "generate:Draw 2": 0.0004082089872099459,
          "generate:Draw 3": 9.541981853544712e-06,
          "generate:unlabeled_4": 2.3459026124328375e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_kwargs (line 50)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_provider.py::test_misaligned_kwargs",
        "run_start": 1747878918.641612
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_kwargs(\n    data=data(...),\n)\nDraw 1: {'type': 'boolean',\n 'value': False,\n 'constraints': {'p': 0.47439757401577254},\n 'was_forced': True,\n 'index': None}\nDraw 2: {'p': 1.0,\n 'forced': None}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00023316801525652409,
          "overall:gc": 0.0009056659764610231,
          "generate:data": 5.207955837249756e-06,
          "generate:Draw 1": 0.000869792012963444,
          "generate:Draw 2": 7.591600297018886e-05,
          "generate:Draw 3": 8.66700429469347e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_kwargs (line 50)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_provider.py::test_misaligned_kwargs",
        "run_start": 1747878911.6285892
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_kwargs(\n    data=data(...),\n)\nDraw 1: {'type': 'integer',\n 'value': -32707,\n 'constraints': {'min_value': None,\n  'max_value': None,\n  'shrink_towards': 0,\n  'weights': None},\n 'was_forced': True,\n 'index': None}\nDraw 2: {'min_value': 24303,\n 'max_value': 44987,\n 'shrink_towards': 0,\n 'weights': None,\n 'forced': None}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0002888739691115916,
          "overall:gc": 0.0001644170260988176,
          "generate:data": 1.1791998986154795e-05,
          "generate:Draw 1": 0.0012783329584635794,
          "generate:Draw 2": 0.0006489999941550195,
          "generate:Draw 3": 9.959039743989706e-06,
          "generate:unlabeled_4": 3.220804501324892e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_kwargs (line 50)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_provider.py::test_misaligned_kwargs",
        "run_start": 1747878946.584954
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_kwargs(\n    data=data(...),\n)\nDraw 1: {'type': 'string',\n 'value': '\ud86f\udde4\ud86f\udd42\ud86f\udd4d\ud86f\udd85\ud86f\uddf6\ud86f\udde5\ud86f\udd0c\ud86f\udd4e\ud86f\udda2\ud86f\uddec\ud86f\uddfc\\U0005cc31\ud86f\udda0\ud86f\udddd\ud86f\udd6b\ud86f\udd31\\U000b5506\ud86f\uddae\ud86f\udded\ud86f\uddb7\ud86f\udd75\ud86f\udd77\ud86f\uddb2\ud86f\udd80\ud86f\udd44\ud86f\udde4\\U000b714f\ud86f\udd62\ud86f\uddae\ud86f\udd7c\ud86f\ude04\ud86f\ude04\\U000ee8a5\\U000c88af\ud86f\udd16\\U0003ada5\ud86f\udd6d\ud86f\udd0b\\U0007adb7\ud86f\ude02\\U000de738',\n 'constraints': {'intervals': 'IntervalSet(((179466, 1013851),))',\n  'min_size': 33,\n  'max_size': 10_000_000_000},\n 'was_forced': True,\n 'index': None}\nDraw 2: {'intervals': 'IntervalSet(((96077, 264668),))',\n 'forced': None,\n 'min_size': 0,\n 'max_size': 10_000_000_000}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0006219149800017476,
          "overall:gc": 0.0003587919636629522,
          "generate:data": 6.125017534941435e-06,
          "generate:Draw 1": 0.003207625064533204,
          "generate:Draw 2": 0.0007764999754726887,
          "generate:Draw 3": 1.0917021427303553e-05,
          "generate:unlabeled_4": 3.7833990063518286e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_kwargs (line 50)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_provider.py::test_misaligned_kwargs",
        "run_start": 1747878918.931127
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_kwargs(\n    data=data(...),\n)\nDraw 1: {'type': 'string',\n 'value': '\ub59e\\ude99\ub688\ub5fd\ub63d\ub5a8\ub5f8\ub5c9\ub5ad\ud852\uded2\ub5e6\ub5b5\\U0001b3ae\ub66d\ud851\udde3\ud873\ude30\ub5f8\ub5f2\ub671\ub5aa\ub65f\ub5d2\ub5bf\ud857\udd80\ub620\ub5ff\ub5eb',\n 'constraints': {'intervals': 'IntervalSet(((46476, 185261),))',\n  'min_size': 24,\n  'max_size': 68},\n 'was_forced': False,\n 'index': None}\nDraw 2: {'intervals': 'IntervalSet(((304729, 922909),))',\n 'forced': None,\n 'min_size': 0,\n 'max_size': 10_000_000_000}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00035195809323340654,
          "overall:gc": 0.0006266669952310622,
          "generate:data": 1.0957999620586634e-05,
          "generate:Draw 1": 0.009196291968692094,
          "generate:Draw 2": 0.0008427499560639262,
          "generate:Draw 3": 1.0791001841425896e-05,
          "generate:unlabeled_4": 4.312500823289156e-05,
          "generate:unlabeled_5": 3.024999750778079e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_kwargs (line 50)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_provider.py::test_misaligned_kwargs",
        "run_start": 1747878952.271293
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_kwargs(\n    data=data(...),\n)\nDraw 1: {'type': 'float',\n 'value': 3935638658172706.0,\n 'constraints': {'min_value': -inf,\n  'max_value': inf,\n  'allow_nan': True,\n  'smallest_nonzero_magnitude': 1.5},\n 'was_forced': False,\n 'index': None}\nDraw 2: {'min_value': -inf,\n 'max_value': 3.3604386237661332e+16,\n 'forced': None,\n 'allow_nan': True,\n 'smallest_nonzero_magnitude': 6.067428918898825e+307}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0013026658562012017,
          "overall:gc": 0.00013366597704589367,
          "generate:data": 1.1083960998803377e-05,
          "generate:Draw 1": 0.0018877510447055101,
          "generate:Draw 2": 0.0005161670269444585,
          "generate:Draw 3": 1.1000025551766157e-05,
          "generate:unlabeled_4": 2.5500019546598196e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_kwargs (line 50)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_provider.py::test_misaligned_kwargs",
        "run_start": 1747878965.684871
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_kwargs(\n    data=data(...),\n)\nDraw 1: {'type': 'integer',\n 'value': -88,\n 'constraints': {'min_value': None,\n  'max_value': None,\n  'shrink_towards': 30836,\n  'weights': None},\n 'was_forced': False,\n 'index': None}\nDraw 2: {'min_value': None,\n 'max_value': -16446,\n 'shrink_towards': 0,\n 'weights': None,\n 'forced': None}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.000472250918392092,
          "overall:gc": 0.0001516659976914525,
          "generate:data": 1.3125012628734112e-05,
          "generate:Draw 1": 0.009658584021963179,
          "generate:Draw 2": 0.0006079159793443978,
          "generate:Draw 3": 1.2958014849573374e-05,
          "generate:unlabeled_4": 5.037500523030758e-05,
          "generate:unlabeled_5": 3.0708033591508865e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_kwargs (line 50)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_provider.py::test_misaligned_kwargs",
        "run_start": 1747878938.499404
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_kwargs(\n    data=data(...),\n)\nDraw 1: {'type': 'bytes',\n 'value': \"b'\\\\x1c5\\\\x17\\\\x9e\\\\xd1\\\\n\\\\xeb\\\\x86!\\\\x03\\\\x04'\",\n 'constraints': {'min_size': 0, 'max_size': 10_000_000_000},\n 'was_forced': False,\n 'index': None}\nDraw 2: {'forced': None,\n 'min_size': 17,\n 'max_size': 10_000_000_000}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0003350830520503223,
          "overall:gc": 0.0005008750013075769,
          "generate:data": 9.70897963270545e-06,
          "generate:Draw 1": 0.0016094589955173433,
          "generate:Draw 2": 0.00021495798137038946,
          "generate:Draw 3": 9.624985978007317e-06,
          "generate:unlabeled_4": 2.924998989328742e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_kwargs (line 50)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_provider.py::test_misaligned_kwargs",
        "run_start": 1747878956.747363
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_kwargs(\n    data=data(...),\n)\nDraw 1: {'type': 'integer',\n 'value': -22867,\n 'constraints': {'min_value': None,\n  'max_value': None,\n  'shrink_towards': 0,\n  'weights': None},\n 'was_forced': True,\n 'index': None}\nDraw 2: {'min_value': 31154,\n 'max_value': None,\n 'shrink_towards': 0,\n 'weights': None,\n 'forced': None}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0002596670528873801,
          "overall:gc": 0.00019150000298395753,
          "generate:data": 5.792011506855488e-06,
          "generate:Draw 1": 0.0010729589848779142,
          "generate:Draw 2": 0.0004279160057194531,
          "generate:Draw 3": 1.0249961633235216e-05,
          "generate:unlabeled_4": 3.704201662912965e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_kwargs (line 50)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_provider.py::test_misaligned_kwargs",
        "run_start": 1747878911.404589
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_misaligned_kwargs(\n    data=data(...),\n)\nDraw 1: {'type': 'float',\n 'value': -4.483475347223413e+16,\n 'constraints': {'min_value': -inf,\n  'max_value': inf,\n  'allow_nan': False,\n  'smallest_nonzero_magnitude': 0.05},\n 'was_forced': False,\n 'index': None}\nDraw 2: {'min_value': -inf,\n 'max_value': inf,\n 'forced': None,\n 'allow_nan': True,\n 'smallest_nonzero_magnitude': 1.4149669773557632e+308}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00030749995494261384,
          "overall:gc": 0.00019266695016995072,
          "generate:data": 1.1167023330926895e-05,
          "generate:Draw 1": 0.0012863740557804704,
          "generate:Draw 2": 0.00038333400152623653,
          "generate:Draw 3": 9.959039743989706e-06,
          "generate:unlabeled_4": 3.329099854454398e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_misaligned_kwargs (line 50)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46226,
          "imported_at": 1747878904.0262132
        },
        "property": "tests/test_provider.py::test_misaligned_kwargs",
        "run_start": 1747878956.736536
      }
    ]
  },
  "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted": {
    "rolling": [
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "failed to satisfy assume() in test_changed_kwargs_pops_if_still_permitted (line 65)",
        "representation": "test_changed_kwargs_pops_if_still_permitted(\n    data=data(...),\n)\nDraw 1: {'type': 'bytes',\n 'value': 'b\\'-Gt\\\\xd2A\\\\xeb\\\\x94\\\\xbf7d\\\\xb8\\\\xaa\\\\xf1\"\\\\xc32tS\\\\x03\\\\xa08M\\\\x8e\\\\xad9\\\\xd0\\\\x8e\\\\x16\\\\x0c\\\\x1c7=\\\\xd8e\\\\xbd\\\\xbc79\\\\xb3do+\\\\r\\\\xc1\\\\x0c\\\\x87\\\\xfaM\\\\xd1ed\\\\x83\\\\xdc\\\\xe7\\\\xf3\\\\x88\\\\xbaX\\\\xddY<\\\\x1b\\\\xe3F\\\\xda\\\\xd5\\\\x99TY%\\\\x11iH\\\\xb2~T\\\\xb3\\\\xf7\\\\xad\\\\xa9}\\\\xdb\\\\x84\\\\x9c\\\\x0f?\\\\x96\\\\r\\\\x0f\\\\t_\\\\x7f\\\\xf3~*0\\\\xa9>\\\\x04\\\\xf3#\\\\x84\\\\x85:\\\\xc0\\\\xb6U:\\\\x8d;\\\\x15\\\\xd6\\\\xecE\\\\x8d+\\\\xa0\\\\xd9\\\\xf8x\\\\xb6\\\\xfb\\\\xfb\\\\xf1\\\\xed\\\\x93\\\\xf0\\\\xfe\\\\x17\\\\x0c\\\\xee\\\\xd5\\\\x16\\\\xcc\\\\xa8\\\\x8b\\\\xca\\\\xefE9\\\\xc6\\\\xc1D9K\\\\x16\\\\x19\\\\xc4Gq\\\\xce!\\\\xe1l._7\\\\x04\\\\x0b\\\\x84|\\\\xef\\\\x19\\\\xee\\\\xf7\\\\xf0e\\\\xb7\\\\xeb\\'',\n 'constraints': {'min_size': 50, 'max_size': 10_000_000_000},\n 'was_forced': False,\n 'index': None}\nDraw 2: {'forced': None, 'min_size': 0, 'max_size': 100}",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00018470903160050511,
          "overall:gc": 0.0007669160258956254,
          "generate:data": 1.0583025868982077e-05,
          "generate:Draw 1": 0.12385716696735471,
          "generate:Draw 2": 0.0002615419798530638
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_changed_kwargs_pops_if_still_permitted (line 65)": {
              "satisfied": 0,
              "unsatisfied": 1
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted",
        "run_start": 1747878905.8457458
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_changed_kwargs_pops_if_still_permitted(\n    data=data(...),\n)\nDraw 1: {'type': 'boolean',\n 'value': False,\n 'constraints': {'p': 0.3333333333333333},\n 'was_forced': True,\n 'index': None}\nDraw 2: {'p': 0.5180142068776571,\n 'forced': None}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00022058095782995224,
          "overall:gc": 0.00010070798452943563,
          "generate:data": 1.0624993592500687e-05,
          "generate:Draw 1": 0.0008671260438859463,
          "generate:Draw 2": 7.895904127508402e-05,
          "generate:Draw 3": 1.008401159197092e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_changed_kwargs_pops_if_still_permitted (line 65)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted",
        "run_start": 1747878933.702406
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "failed to satisfy assume() in test_changed_kwargs_pops_if_still_permitted (line 65)",
        "representation": "test_changed_kwargs_pops_if_still_permitted(\n    data=data(...),\n)\nDraw 1: {'type': 'float',\n 'value': -inf,\n 'constraints': {'min_value': -inf,\n  'max_value': inf,\n  'allow_nan': False,\n  'smallest_nonzero_magnitude': 8.618293108842337e+307},\n 'was_forced': True,\n 'index': None}\nDraw 2: {'min_value': inf,\n 'max_value': inf,\n 'forced': None,\n 'allow_nan': True,\n 'smallest_nonzero_magnitude': 1.4860556483674184e-247}",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0001335839624516666,
          "overall:gc": 0.00018133397679775953,
          "generate:data": 1.0750023648142815e-05,
          "generate:Draw 1": 0.0020188320195302367,
          "generate:Draw 2": 0.0005201250314712524
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_changed_kwargs_pops_if_still_permitted (line 65)": {
              "satisfied": 0,
              "unsatisfied": 1
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted",
        "run_start": 1747878961.191893
      }
    ],
    "corpus": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_changed_kwargs_pops_if_still_permitted(\n    data=data(...),\n)\nDraw 1: {'type': 'bytes',\n 'value': \"b''\",\n 'constraints': {'min_size': 0, 'max_size': 10_000_000_000},\n 'was_forced': True,\n 'index': None}\nDraw 2: {'forced': None,\n 'min_size': 0,\n 'max_size': 10_000_000_000}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00027020700508728623,
          "overall:gc": 0.00014462502440437675,
          "generate:data": 1.1999974958598614e-05,
          "generate:Draw 1": 0.004109708999749273,
          "generate:Draw 2": 0.00020045897690579295,
          "generate:Draw 3": 1.0374991688877344e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_changed_kwargs_pops_if_still_permitted (line 65)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted",
        "run_start": 1747878927.653108
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_changed_kwargs_pops_if_still_permitted(\n    data=data(...),\n)\nDraw 1: {'type': 'string',\n 'value': '',\n 'constraints': {'intervals': 'IntervalSet(((489621, 1114110),))',\n  'min_size': 0,\n  'max_size': 10_000_000_000},\n 'was_forced': False,\n 'index': None}\nDraw 2: {'intervals': 'IntervalSet(((173049, 702358),))',\n 'forced': None,\n 'min_size': 0,\n 'max_size': 100}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0003311659675091505,
          "overall:gc": 0.0008757499163039029,
          "generate:data": 1.033296575769782e-05,
          "generate:Draw 1": 0.0016872500418685377,
          "generate:Draw 2": 0.0013937921030446887,
          "generate:Draw 3": 1.1416967026889324e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_changed_kwargs_pops_if_still_permitted (line 65)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted",
        "run_start": 1747878944.879138
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_changed_kwargs_pops_if_still_permitted(\n    data=data(...),\n)\nDraw 1: {'type': 'string',\n 'value': '\\U00067d63\\U00067e29\\U00067e04\\U00067dbd\\U00067d8a\\U00067d8c\\U000791ca\\U00067de2\\U00067d63\\U00067de8\\U00067dd2\\U00067e25\\U00067d49\\U0006ec2f\\U00067dbf\\U00067e3a\\U00067e19\\U00067e08\\U00067d9f\\U00067dbd\\U00067daf\\U00067d9c\\U00067d59\\U00067d97\\U00069cda\\U00067d7c\\U00067df4\\U00074028\\U0007caaf\\U00067dca\\U00069915',\n 'constraints': {'intervals': 'IntervalSet(((425276, 515905),))',\n  'min_size': 14,\n  'max_size': 10_000_000_000},\n 'was_forced': False,\n 'index': None}\nDraw 2: {'intervals': 'IntervalSet(((186548, 1111616),))',\n 'forced': None,\n 'min_size': 0,\n 'max_size': 10_000_000_000}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0008127079345285892,
          "overall:gc": 0.0003640009672380984,
          "generate:data": 1.2125005014240742e-05,
          "generate:Draw 1": 0.004617625032551587,
          "generate:Draw 2": 0.0011177070555277169,
          "generate:Draw 3": 5.558400880545378e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_changed_kwargs_pops_if_still_permitted (line 65)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted",
        "run_start": 1747878945.5104582
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_changed_kwargs_pops_if_still_permitted(\n    data=data(...),\n)\nDraw 1: {'type': 'integer',\n 'value': -32710,\n 'constraints': {'min_value': None,\n  'max_value': None,\n  'shrink_towards': 0,\n  'weights': None},\n 'was_forced': True,\n 'index': None}\nDraw 2: {'min_value': None,\n 'max_value': None,\n 'shrink_towards': 0,\n 'weights': None,\n 'forced': None}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0006139159086160362,
          "overall:gc": 0.0005843749968335032,
          "generate:data": 8.792034350335598e-06,
          "generate:Draw 1": 0.003100916976109147,
          "generate:Draw 2": 0.0036458750255405903,
          "generate:Draw 3": 3.362505231052637e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_changed_kwargs_pops_if_still_permitted (line 65)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted",
        "run_start": 1747878957.6323662
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_changed_kwargs_pops_if_still_permitted(\n    data=data(...),\n)\nDraw 1: {'type': 'bytes',\n 'value': 'b\\'\\\\xe7\\\\x03\\\\xb2W\"\\\\xf3#q\\\\xabNvV\\\\xe7\\'',\n 'constraints': {'min_size': 0, 'max_size': 10_000_000_000},\n 'was_forced': True,\n 'index': None}\nDraw 2: {'forced': None,\n 'min_size': 0,\n 'max_size': 100}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00022137496853247285,
          "overall:gc": 0.0001277499832212925,
          "generate:data": 5.957961548119783e-06,
          "generate:Draw 1": 0.0008959590340964496,
          "generate:Draw 2": 0.00020958302775397897,
          "generate:Draw 3": 8.207978680729866e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_changed_kwargs_pops_if_still_permitted (line 65)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted",
        "run_start": 1747878909.053803
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_changed_kwargs_pops_if_still_permitted(\n    data=data(...),\n)\nDraw 1: {'type': 'integer',\n 'value': 161,\n 'constraints': {'min_value': 112,\n  'max_value': 216,\n  'shrink_towards': -70,\n  'weights': {'161': 0.9989999999999998}},\n 'was_forced': False,\n 'index': None}\nDraw 2: {'min_value': None,\n 'max_value': None,\n 'shrink_towards': 0,\n 'weights': None,\n 'forced': None}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0002603740431368351,
          "overall:gc": 0.00021524995099753141,
          "generate:data": 1.12500274553895e-05,
          "generate:Draw 1": 0.002112459042109549,
          "generate:Draw 2": 0.0003731250180862844,
          "generate:Draw 3": 1.1499971151351929e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in integer_weights (line 102)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in integer_weights (line 108)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in test_changed_kwargs_pops_if_still_permitted (line 65)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted",
        "run_start": 1747878907.206462
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_changed_kwargs_pops_if_still_permitted(\n    data=data(...),\n)\nDraw 1: {'type': 'integer',\n 'value': 20196,\n 'constraints': {'min_value': None,\n  'max_value': None,\n  'shrink_towards': 0,\n  'weights': None},\n 'was_forced': False,\n 'index': None}\nDraw 2: {'min_value': 12247,\n 'max_value': None,\n 'shrink_towards': 0,\n 'weights': None,\n 'forced': None}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0002994990209117532,
          "overall:gc": 0.00014333397848531604,
          "generate:data": 2.741703065112233e-05,
          "generate:Draw 1": 0.0015992490225471556,
          "generate:Draw 2": 0.0004401669721119106,
          "generate:Draw 3": 9.584007784724236e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_changed_kwargs_pops_if_still_permitted (line 65)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted",
        "run_start": 1747878951.130324
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_changed_kwargs_pops_if_still_permitted(\n    data=data(...),\n)\nDraw 1: {'type': 'integer',\n 'value': 5640,\n 'constraints': {'min_value': 3040,\n  'max_value': None,\n  'shrink_towards': 0,\n  'weights': None},\n 'was_forced': True,\n 'index': None}\nDraw 2: {'min_value': 1,\n 'max_value': 835_443_800_574_136_228,\n 'shrink_towards': 0,\n 'weights': None,\n 'forced': None}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00022908300161361694,
          "overall:gc": 0.00010554201435297728,
          "generate:data": 1.1333031579852104e-05,
          "generate:Draw 1": 0.001293207984417677,
          "generate:Draw 2": 0.0005541660357266665,
          "generate:Draw 3": 1.0416959412395954e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_changed_kwargs_pops_if_still_permitted (line 65)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted",
        "run_start": 1747878970.266809
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_changed_kwargs_pops_if_still_permitted(\n    data=data(...),\n)\nDraw 1: {'type': 'float',\n 'value': 1.7976931348623157e+308,\n 'constraints': {'min_value': -inf,\n  'max_value': inf,\n  'allow_nan': False,\n  'smallest_nonzero_magnitude': 7.608807554132984e+307},\n 'was_forced': False,\n 'index': None}\nDraw 2: {'min_value': -2.7172116425807684e+16,\n 'max_value': inf,\n 'forced': None,\n 'allow_nan': False,\n 'smallest_nonzero_magnitude': 1.6973387830749058e+308}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00024070905055850744,
          "overall:gc": 0.00011145800817757845,
          "generate:data": 1.18750031106174e-05,
          "generate:Draw 1": 0.0012632079888135195,
          "generate:Draw 2": 0.00043008296051993966,
          "generate:Draw 3": 9.124982170760632e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_changed_kwargs_pops_if_still_permitted (line 65)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted",
        "run_start": 1747878927.814467
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_changed_kwargs_pops_if_still_permitted(\n    data=data(...),\n)\nDraw 1: {'type': 'integer',\n 'value': -43220,\n 'constraints': {'min_value': None,\n  'max_value': -17533,\n  'shrink_towards': 0,\n  'weights': None},\n 'was_forced': False,\n 'index': None}\nDraw 2: {'min_value': None,\n 'max_value': None,\n 'shrink_towards': 0,\n 'weights': None,\n 'forced': None}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00036899896804243326,
          "overall:gc": 0.0005750000127591193,
          "generate:data": 8.832954335957766e-06,
          "generate:Draw 1": 0.013435750035569072,
          "generate:Draw 2": 0.0003940419992431998,
          "generate:Draw 3": 1.170899486169219e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_changed_kwargs_pops_if_still_permitted (line 65)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted",
        "run_start": 1747878915.524097
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_changed_kwargs_pops_if_still_permitted(\n    data=data(...),\n)\nDraw 1: {'type': 'bytes',\n 'value': \"b'\\\\x1310\\\\x99'\",\n 'constraints': {'min_size': 0, 'max_size': 10_000_000_000},\n 'was_forced': True,\n 'index': None}\nDraw 2: {'forced': None,\n 'min_size': 0,\n 'max_size': 10_000_000_000}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0005929999169893563,
          "overall:gc": 0.00010179198579862714,
          "generate:data": 1.087499549612403e-05,
          "generate:Draw 1": 0.0009894579998217523,
          "generate:Draw 2": 0.00023716705618426204,
          "generate:Draw 3": 1.2500036973506212e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_changed_kwargs_pops_if_still_permitted (line 65)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted",
        "run_start": 1747878930.9397278
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_changed_kwargs_pops_if_still_permitted(\n    data=data(...),\n)\nDraw 1: {'type': 'float',\n 'value': inf,\n 'constraints': {'min_value': -inf,\n  'max_value': inf,\n  'allow_nan': False,\n  'smallest_nonzero_magnitude': 1.6256812956291944e+22},\n 'was_forced': False,\n 'index': None}\nDraw 2: {'min_value': -inf,\n 'max_value': inf,\n 'forced': None,\n 'allow_nan': True,\n 'smallest_nonzero_magnitude': 5e-324}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00022645696299150586,
          "overall:gc": 0.0001307500060647726,
          "generate:data": 1.1124997399747372e-05,
          "generate:Draw 1": 0.0012235000031068921,
          "generate:Draw 2": 0.00036504201125353575,
          "generate:Draw 3": 9.04203625395894e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_changed_kwargs_pops_if_still_permitted (line 65)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted",
        "run_start": 1747878907.161982
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_changed_kwargs_pops_if_still_permitted(\n    data=data(...),\n)\nDraw 1: {'type': 'float',\n 'value': -inf,\n 'constraints': {'min_value': -inf,\n  'max_value': inf,\n  'allow_nan': True,\n  'smallest_nonzero_magnitude': 3.690962824483379e+16},\n 'was_forced': True,\n 'index': None}\nDraw 2: {'min_value': -inf,\n 'max_value': 0.0,\n 'forced': None,\n 'allow_nan': False,\n 'smallest_nonzero_magnitude': 1.763989006286256e+16}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.00023391697322949767,
          "overall:gc": 0.00012937496649101377,
          "generate:data": 7.292022928595543e-06,
          "generate:Draw 1": 0.0012010830105282366,
          "generate:Draw 2": 0.00044279202120378613,
          "generate:Draw 3": 9.083014447242022e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_changed_kwargs_pops_if_still_permitted (line 65)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted",
        "run_start": 1747878964.813621
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_changed_kwargs_pops_if_still_permitted(\n    data=data(...),\n)\nDraw 1: {'type': 'integer',\n 'value': 12986,\n 'constraints': {'min_value': None,\n  'max_value': None,\n  'shrink_towards': 0,\n  'weights': None},\n 'was_forced': True,\n 'index': None}\nDraw 2: {'min_value': None,\n 'max_value': None,\n 'shrink_towards': 27960,\n 'weights': None,\n 'forced': None}\nDraw 3: 'HypothesisRandom(generated data)'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 0.0002509570331312716,
          "overall:gc": 0.00016900000628083944,
          "generate:data": 1.4166987966746092e-05,
          "generate:Draw 1": 0.0013280839775688946,
          "generate:Draw 2": 0.00040791695937514305,
          "generate:Draw 3": 1.0000017937272787e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_changed_kwargs_pops_if_still_permitted (line 65)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46227,
          "imported_at": 1747878904.058256
        },
        "property": "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted",
        "run_start": 1747878966.515011
      }
    ]
  },
  "tests/test_visual.py::test_visual_tyche_grab_bag": {
    "rolling": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_visual_tyche_grab_bag(\n    l=[-10],\n    a=1,\n    x=-41,\n    data=data(...),\n)\nDraw 1 (interactive): 'fea'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "target:x%5": 4,
          "x%2=1": ""
        },
        "timing": {
          "execute:test": 6.820802809670568e-05,
          "overall:gc": 0.0,
          "generate:l": 6.620900239795446e-05,
          "generate:a": 1.2207950931042433e-05,
          "generate:x": 9.457988198846579e-06,
          "generate:data": 5.582987796515226e-06,
          "generate:Draw 1 (interactive)": 5.8416975662112236e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_visual_tyche_grab_bag (line 16)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in test_visual_tyche_grab_bag (line 17)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_visual.py::test_visual_tyche_grab_bag",
        "run_start": 1747878939.69373
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_visual_tyche_grab_bag(\n    l=[-2],\n    a=-2,\n    x=-2095,\n    data=data(...),\n)\nDraw 1 (interactive): 'ad'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "target:x%5": 0,
          "x%2=1": ""
        },
        "timing": {
          "execute:test": 5.179201252758503e-05,
          "overall:gc": 0.0,
          "generate:l": 4.120898665860295e-05,
          "generate:a": 1.1083960998803377e-05,
          "generate:x": 9.917013812810183e-06,
          "generate:data": 4.417030140757561e-06,
          "generate:Draw 1 (interactive)": 2.300000051036477e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_visual_tyche_grab_bag (line 16)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in test_visual_tyche_grab_bag (line 17)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_visual.py::test_visual_tyche_grab_bag",
        "run_start": 1747878956.501625
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_visual_tyche_grab_bag(\n    l=[1000, 9715, -88, -112, -13862],\n    a=49,\n    x=127,\n    data=data(...),\n)\nDraw 1 (interactive): 'aeffbd'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "target:x%5": 2,
          "x%2=1": ""
        },
        "timing": {
          "execute:test": 5.0166971050202847e-05,
          "overall:gc": 0.0,
          "generate:l": 0.00019037403399124742,
          "generate:a": 2.3667002096772194e-05,
          "generate:x": 2.1332991309463978e-05,
          "generate:data": 4.04199818149209e-06,
          "generate:Draw 1 (interactive)": 4.737498238682747e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_visual_tyche_grab_bag (line 16)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in test_visual_tyche_grab_bag (line 17)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_visual.py::test_visual_tyche_grab_bag",
        "run_start": 1747878971.572851
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_visual_tyche_grab_bag(\n    l=[-8079, 148408582],\n    a=-15321,\n    x=-28605,\n    data=data(...),\n)\nDraw 1 (interactive): 'beafccdc'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "target:x%5": 0,
          "x%2=1": ""
        },
        "timing": {
          "execute:test": 6.749999010935426e-05,
          "overall:gc": 0.0,
          "generate:l": 0.00013204198330640793,
          "generate:a": 2.3874978069216013e-05,
          "generate:x": 2.1415995433926582e-05,
          "generate:data": 5.957961548119783e-06,
          "generate:Draw 1 (interactive)": 5.8999983593821526e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_visual_tyche_grab_bag (line 16)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in test_visual_tyche_grab_bag (line 17)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_visual.py::test_visual_tyche_grab_bag",
        "run_start": 1747878921.977351
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "failed to satisfy assume() in test_visual_tyche_grab_bag (line 17)",
        "representation": "test_visual_tyche_grab_bag(\n    l=[],\n    a=31636,\n    x=-31712,\n    data=data(...),\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "target:x%5": 3,
          "x%2=0": ""
        },
        "timing": {
          "execute:test": 4.025001544505358e-05,
          "overall:gc": 0.0,
          "generate:l": 0.006830250029452145,
          "generate:a": 0.1638502919813618,
          "generate:x": 6.158294854685664e-05,
          "generate:data": 7.792026735842228e-06
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_visual_tyche_grab_bag (line 16)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in test_visual_tyche_grab_bag (line 17)": {
              "satisfied": 0,
              "unsatisfied": 1
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_visual.py::test_visual_tyche_grab_bag",
        "run_start": 1747878905.921859
      }
    ],
    "corpus": [
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_visual_tyche_grab_bag(\n    l=[-2],\n    a=-2,\n    x=0,\n    data=data(...),\n)\nDraw 1 (interactive): 'efb'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "target:x%5": 0,
          "x%2=0": ""
        },
        "timing": {
          "execute:test": 5.741597851738334e-05,
          "overall:gc": 0.0,
          "generate:l": 4.779204027727246e-05,
          "generate:a": 1.1374999303370714e-05,
          "generate:x": 2.8166978154331446e-05,
          "generate:data": 4.792003892362118e-06,
          "generate:Draw 1 (interactive)": 4.3042004108428955e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_visual_tyche_grab_bag (line 16)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in test_visual_tyche_grab_bag (line 17)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_visual.py::test_visual_tyche_grab_bag",
        "run_start": 1747878970.894819
      },
      {
        "type": "test_case",
        "status": "passed",
        "status_reason": "",
        "representation": "test_visual_tyche_grab_bag(\n    l=[-2],\n    a=-2,\n    x=1,\n    data=data(...),\n)\nDraw 1 (interactive): 'a'",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {
          "target:x%5": 1,
          "x%2=1": ""
        },
        "timing": {
          "execute:test": 6.291602039709687e-05,
          "overall:gc": 0.0,
          "generate:l": 5.458400119096041e-05,
          "generate:a": 1.0457995813339949e-05,
          "generate:x": 8.457980584353209e-06,
          "generate:data": 5.667039658874273e-06,
          "generate:Draw 1 (interactive)": 5.270895780995488e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_visual_tyche_grab_bag (line 16)": {
              "satisfied": 1,
              "unsatisfied": 0
            },
            "assume() in test_visual_tyche_grab_bag (line 17)": {
              "satisfied": 1,
              "unsatisfied": 0
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46228,
          "imported_at": 1747878904.0264032
        },
        "property": "tests/test_visual.py::test_visual_tyche_grab_bag",
        "run_start": 1747878959.7412548
      }
    ]
  },
  "tests/test_visual.py::test_visual_tyche_almost_always_invalid": {
    "rolling": [
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "failed to satisfy assume() in test_visual_tyche_almost_always_invalid (line 26)",
        "representation": "test_visual_tyche_almost_always_invalid(\n    n=19501,\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 1.6459031030535698e-05,
          "overall:gc": 0.0,
          "generate:n": 4.7250010538846254e-05
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_visual_tyche_almost_always_invalid (line 26)": {
              "satisfied": 0,
              "unsatisfied": 1
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_visual.py::test_visual_tyche_almost_always_invalid",
        "run_start": 1747878964.6376991
      },
      {
        "type": "test_case",
        "status": "gave_up",
        "status_reason": "failed to satisfy assume() in test_visual_tyche_almost_always_invalid (line 26)",
        "representation": "test_visual_tyche_almost_always_invalid(\n    n=4_715_676_941_197_531_773,\n)",
        "arguments": {},
        "how_generated": "during unknown phase",
        "features": {},
        "timing": {
          "execute:test": 3.520800964906812e-05,
          "overall:gc": 0.0,
          "generate:n": 0.1398410409456119
        },
        "metadata": {
          "traceback": null,
          "reproduction_decorator": null,
          "predicates": {
            "assume() in test_visual_tyche_almost_always_invalid (line 26)": {
              "satisfied": 0,
              "unsatisfied": 1
            }
          },
          "backend": {},
          "sys.argv": [
            "/opt/homebrew/bin/hypothesis",
            "fuzz"
          ],
          "os.getpid()": 46229,
          "imported_at": 1747878904.0453079
        },
        "property": "tests/test_visual.py::test_visual_tyche_almost_always_invalid",
        "run_start": 1747878905.969476
      }
    ],
    "corpus": []
  }
}