{
  "collected_tests": {
    "collection_status": [
      {
        "nodeid": "tests/test_branches.py::test_branch_make",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_branches.py::test_branch_cache",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_corpus.py::test_corpus_coverage_tracking",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_corpus.py::test_corpus_covering_nodes",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_linearize.py::test_single_worker",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_linearize.py::test_non_overlapping_reports",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_linearize.py::test_linearize_decomposes_with_addition",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_provider.py::test_drawing_prefix_exactly",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_provider.py::test_draw_past_prefix",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_provider.py::test_misaligned_type",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_provider.py::test_misaligned_kwargs",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_provider.py::test_changed_kwargs_pops_if_still_permitted",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_visual.py::test_visual_tyche_grab_bag",
        "status": "collected"
      },
      {
        "nodeid": "tests/test_visual.py::test_visual_tyche_almost_always_invalid",
        "status": "collected"
      }
    ]
  },
  "patches": {
    "all": "From HEAD Mon Sep 17 00:00:00 2001\nFrom: Hypothesis 6.131.23 <no-reply@hypothesis.works>\nDate: Fri, 23 May 2025 20:35:31\nSubject: [PATCH] Hypothesis: add explicit examples\n\n---\n--- ./tests/test_linearize.py\n+++ ./tests/test_linearize.py\n@@ -151,6 +151,86 @@\n \n \n @given(reports(count_workers=1))\n+@example(\n+    reports=[\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=3.705843173268642e-165,\n+            timestamp=2.0171238918982442e307,\n+            worker_uuid=UUID(\"9dbeccbd-b1ea-4fa7-b59d-fd410062f861\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 118,\n+                Status.INTERESTING: 0,\n+            },\n+            behaviors=28334,\n+            fingerprints=102,\n+            since_new_branch=22827,\n+            phase=Phase.DISTILL,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    reports=[\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=2.2190586012400986e-130,\n+            timestamp=1.7384247278647546e307,\n+            worker_uuid=UUID(\"07158ab7-95f3-4183-9b69-13cd87684f34\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 18750,\n+                Status.INTERESTING: 0,\n+            },\n+            behaviors=44,\n+            fingerprints=2_098_346_482,\n+            since_new_branch=56,\n+            phase=Phase.SHRINK,\n+        ),\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=426041.88651024434,\n+            timestamp=2.3038921775217605e307,\n+            worker_uuid=UUID(\"07158ab7-95f3-4183-9b69-13cd87684f34\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 1_329_801_249,\n+                Status.INTERESTING: 0,\n+            },\n+            behaviors=19386,\n+            fingerprints=3474,\n+            since_new_branch=45,\n+            phase=Phase.REPLAY,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    reports=[\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=403496.8487515734,\n+            timestamp=4.4352635497549713e46,\n+            worker_uuid=UUID(\"29906060-c255-4051-b26c-ed116b14d771\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 6077,\n+                Status.INTERESTING: 0,\n+            },\n+            behaviors=12627,\n+            fingerprints=30692,\n+            since_new_branch=5088,\n+            phase=Phase.REPLAY,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n def test_single_worker(reports):\n     assert len({r.worker_uuid for r in reports}) <= 1\n     # linearizing reports from a single worker just puts them in a sorted order,\n@@ -163,6 +243,28 @@\n \n \n @given(reports(overlap=False))\n+@example(\n+    reports=[\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=893241.7625013571,\n+            timestamp=9.661842087027152e306,\n+            worker_uuid=UUID(\"695a2421-f910-4255-a65b-f8c9a566bbff\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 19068,\n+                Status.INTERESTING: 0,\n+            },\n+            behaviors=127,\n+            fingerprints=12677,\n+            since_new_branch=13139,\n+            phase=Phase.REPLAY,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(reports=[]).via(\"HypoFuzz covering example\")\n def test_non_overlapping_reports(reports):\n     test = _test_for_reports(reports)\n     test._check_invariants()\n--- ./tests/test_provider.py\n+++ ./tests/test_provider.py\n@@ -7,6 +7,32973 @@\n \n \n @given(st.lists(nodes()))\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=19952,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.655976641189358e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf4\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.40012816725712563},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u865c\u8696\u8646\u8621\u0169\u8636\\U00060cbe\\U000fa0e8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            300,\n+                            404,\n+                            34320,\n+                            45360,\n+                            217706,\n+                            310029,\n+                            312020,\n+                            465266,\n+                            768457,\n+                            773948,\n+                            1002289,\n+                            1059968,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 3,\n+                \"max_size\": 103,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"tCR\\xaa\\xf2\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2221,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 7,\n+                \"shrink_towards\": 20806,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-43536,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -22342,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"6\\x1f\\xa2X\\xfd2P\\xcb\\x8bf\\xed7\\xee\\xb1\\r\\x1f\\n\\xbcw\\x88\\xb3x\\x8e\\xa1\\x86m\\xe5{J\\xf4P\\xb9<\\xb8\\xf3OkL\",\n+            constraints={\"min_size\": 38, \"max_size\": 110},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000b97e4\\U000c37fa\u04b4\u04b9\\U000620f2\u0409\u045f\u048c\\U000dc3e4\\U000d2bc4\u04b5\u04fb\u0402\u04c9\u046a\\U0007c453\u0438\u0472\\U000abf1b\u04d9\u04e3\u044c\u04a4\\U0001a963\u0455\u04f6\u042f\u04eb\u0410\\U0005d274\u0411\u041d\u041f\u04d7\u048e\\U000636aa\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1024, 9999, 36186, 171248, 342747, 904950]),\n+                ),\n+                \"min_size\": 32,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"#\\xb3Uo\\xa9g\\xff\\x08\\xb1\\xb9M\\xa3Dr\",\n+            constraints={\"min_size\": 8, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5454498482654767},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000c228c\\udea6\\udebe\\ude56\\udee7\\ude92\\U00093b54\\ude38\\udeb7\\udea5\\U000a9e17\\ude86\\udf00\\ude54\\U000ab0c6\\udee9\\U000915cb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            56875,\n+                            65535,\n+                            248126,\n+                            279784,\n+                            338156,\n+                            365519,\n+                            385635,\n+                            445975,\n+                            579491,\n+                            645266,\n+                            648333,\n+                            829775,\n+                            985987,\n+                            1019257,\n+                            1037227,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.2139060558500352e308,\n+            constraints={\n+                \"min_value\": -1.1116289616404631e-199,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.0845187664334444e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8eD\\xf7\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8189094646127693},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.37947648874251e307,\n+            constraints={\n+                \"min_value\": -7803765123943662.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.4278858786380604e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.2214111776294268},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.154466772770635e16,\n+            constraints={\n+                \"min_value\": -2.0609855864240873e-25,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.175494351e-38,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7793843231441442},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00089dbe\\U00089d28\\U00089de9\\U00089dc5\\U00089d48\\U00089df7\\U000a3af1\\U00089dc8\\U00089dd8\\U00089d75\\U00089df0\\U0008d9ef\\U00089ddf\\U00089d1d\\U000a0093\\U00089d54\\U00089d2a\\U00089de5\\U000a9846\\U00089e14\\U00089dd6\\U00089d6a\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([564506, 743577])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8140061790116859},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.706132735186167e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.99999,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.626873380855378e307,\n+            constraints={\n+                \"min_value\": -1.3755569683476914e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.626873380855378e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.285423977271983e307,\n+            constraints={\n+                \"min_value\": -5.242405603395847e16,\n+                \"max_value\": 1.3065071017445701e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.9386629629778904e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.431803503709003e105,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 7.010611040345778e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004fb94\ud268\ud236\ud211\ud235\ud1fd\ud206\ud1b9\ud214\ud245\ud22b\\U0007711a\ud293\ud1e9\\U000386dd\ud26a\ud1a8\\U0006f9ce\\U000c7c04\ud249\ud1cf\ud20a\ud26b\ud1c3\ud289\ud249\ud21b\ud1d8\ud194\ud197\\U0001a5e2\ud1d1\ud267\ud213\ud1d2\ud276\ud212\ud1b7\ud1ce\\U000d7d08\ud251\ud1eb\ud210\ud234\ud204\ud194\ud1c8\ud1f8\ud223\ud1cb\ud27c\\U000d9b94\ud257\ud25b\ud1e1\ud1fb\\U0009f8c4\ud1ef\\U000a444a\ud25d\\U0003d69a\ud276\ud1c4\ud283\ud1d0\ud22a\ud1dd\ud225\ud1fb\ud26b\ud1d8\ud19a\\U0005a97c\ud1a3\ud1f6\ud27e\\U0001263c\ud216\ud23b\ud869\udd26\ud1fe\ud1ed\ud23d\ud1ec\ud26f\ud1ea\ud1ce\ud1ba\ud292\ud212\\U000d2869\ud281\ud234\ud28b\ud25d\ud279\ud24e\ud1cf\ud1e7\\U0006b73b\ud214\ud1f0\ud206\\U0005f488\ud1ca\ud277\ud1a0\ud24c\ud1c4\ud257\\U000d9a19\\U000412ed\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([53652, 528733, 620768, 723527, 784112, 904251]),\n+                ),\n+                \"min_size\": 47,\n+                \"max_size\": 147,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001a21b\\U0001a24e\\U0001a1cf\\U000cb471\\U00089640\\U0001a266\\U0001a21d\\U0001a29f\\U000849cb\\U0001a27c\\U0001a21e\\U0001a1e5\\U0001a22b\\U0001a24f\\U0001a223\\U00076781\ud885\ude83\\U0001a20d\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([106949, 857743, 942187]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=3776,\n+            constraints={\n+                \"min_value\": -32527,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u5c46\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            66998,\n+                            148068,\n+                            167286,\n+                            180820,\n+                            232734,\n+                            239716,\n+                            359106,\n+                            367713,\n+                            378886,\n+                            397538,\n+                            448113,\n+                            501812,\n+                            507826,\n+                            566776,\n+                            581548,\n+                            630841,\n+                            882327,\n+                            953153,\n+                            977799,\n+                            1037707,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.1277627677780824},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1273,\n+            constraints={\n+                \"min_value\": 80,\n+                \"max_value\": 1831,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=25317,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1_807_549_021_805_968_337,\n+            constraints={\n+                \"min_value\": 1_807_549_021_805_946_970,\n+                \"max_value\": None,\n+                \"shrink_towards\": -64_537_029_935_785_078_667_509_587_607_456_903_847,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-4.483475347223413e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-3_017_614_495_710_177_839,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.402823466e38,\n+            constraints={\n+                \"min_value\": 2.8959575726421924e16,\n+                \"max_value\": 3.402823466e38,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1653748874388816.0,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-9001,\n+            constraints={\n+                \"min_value\": -13300,\n+                \"max_value\": 12001,\n+                \"shrink_towards\": 0,\n+                \"weights\": {-8437: 0.5},\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-79,\n+            constraints={\n+                \"min_value\": -101,\n+                \"max_value\": -40,\n+                \"shrink_towards\": -5518,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004a31c\\U0004a3a3\\U0004a3d7\\U0006607b\\U0004a346\\U0006ed5e\\U0004a40a\\U0005d769\\U00065b48\\U0004a343\\U0004a400\\U0004a415\\U0004a3be\\U00093048\\U0004a40e\\U0004a3b4\\U0004a338\\U0004a386\\U0004a3d2\\U0004a3ff\\U0006637d\\U0004a39c\\U0004a389\\U0004a36c\\U0004a39a\\U00058adf\\U000948de\\U0004a3e5\\U00091c14\\U0004a380\\U0006e028\\U0004a322\\U0004a390\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([303896, 466594, 590823, 649817, 1039823]),\n+                ),\n+                \"min_size\": 29,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1005,\n+            constraints={\n+                \"min_value\": 1000,\n+                \"max_value\": 1018,\n+                \"shrink_towards\": -71,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9a\\xc4|j\\xd1\\x9aor/\\x7fKL9\\xf3\\xc5\\xd9\\xae\\xcb\\xa5h\\x9d\\xd3h\\n\\xf9\\x12\\x7f\\xfb\\xb6\\xfd\\xa1\\xeb\\xea\\xfb\\x0f\\t\\x85q\\xb6Rw\\xf3\\xf8:\\x1d\\xcb\\x9a\\x1a\\x0cK\\x15P\\xe2)\\x15<n\\xfd\\x1cQ\\xdf\\x9aI\\xb7Y\\xf8\\xe8\\x1e`\\xe0\\xbdV\\xe7\\xe9\\xe0\\x9c9\\x1bu\\xde\\x8a\\xbd\\\\y\\xe1\\xc0H1\\xf9f\",\n+            constraints={\"min_size\": 37, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9052,\n+            constraints={\n+                \"min_value\": -111,\n+                \"max_value\": 17641,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"tq\\xd5\\x0b\\xd0M\\xe8\\x8d\\x0e=\\xa0\\xc5\\x9a\\xe5\\x8a\\xef\\x90\\x9ap-Aq\\x9e;\\xac'\\x00\\xce\\x93\\xe5rpB\\xdc,\\x8d\\xa0\\x83\\xb8S\\x998\\x1e\\xd4\\xe9\\xac\\xc9(\\xae].u\\x0b\\xde\\x01\\xfc\\xce\\xed\\x9a\\xc4\\xb7\\xe0{\\xb34\\xb3\\x07\\xa2\\xfcd\\xe8\\xdb|\\xc2\\x87\\x80a\\xdfo\\x0b\\x8e\\xe2|\\xe6\\xe5.\\xdet+\\xc9+\\x94\\x18\\x17\\xe2\\xa9y\\xb7\\x10\\x99 \\xd7#\\xdaYn\\xe4\\xa7`)\\x18C\\xfc\\x88\\x8aav\\xe9\\x88\\tH_\\r\\x15\\x96\\xa5\\xcf\\x86&\\xe5\\x96I\\x06\\xc0\\xf9WyM\",\n+            constraints={\"min_size\": 47, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u169b\u1684\u1693\u1690\u168b\u1692\u1684\\u1680\u1691\u1684\u1682\u1691\u168f\u1685\u169c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1024, 575000, 703171]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-6.91131514778411e249,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.5153292461739424e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000c9caa\\U000326af\\U000326db\\U000326eb\\U0004d244\\U0003276c\\U000326d7\\U000326c2\\U000326c7\\U00032776\\U000326c5\\U0003275f\\U000326af\\U0003271d\\U0005d58d\\U0003269c\\U00032698\\U000326fd\\U000326c5\\U0003271c\\U00032731\\U00032717\\U000326ae\\U0003278b\\U000326b5\\U000326c7\\U000326c7\\U0004b683\\U000326ab\\U0005cd6e\\U00047daa\\U000326e7\\U000326eb\\U00032775\\U0003276e\\U00032778\\U000326f0\\U000326b4\\U000326c5\\U00032704\\U000448bc\\U000326bf\\U00032731\\U000326e9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([206485, 394870, 766890, 885084]),\n+                ),\n+                \"min_size\": 26,\n+                \"max_size\": 126,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x0e\\xbc\\x1bd\\xff\\x14!?I\\xcf\\xbd\",\n+            constraints={\"min_size\": 8, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.observations\",\n+            constraints={\"min_size\": 21, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.2250738585072014e-308},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00036b38\\U00036bbc\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [223994, 301123, 345154, 806206, 826398, 988477, 1054129],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud877\udd64\ud877\uddbd\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([187722, 748609])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"j\\xdd\\x8c\\xc5r\\xfe\\x1b\\x1e\",\n+            constraints={\"min_size\": 7, \"max_size\": 39},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -8.040565903672791e105,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.0704761424450515e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.2520688483478323e-23,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.92222518581292e22,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"<\\xa2\\x9f\\xcf\\x0b\\xcb\\x16\\x98\\x9e{C\\x0c\\xbd$\\x85a\\x1f\\xdcjJf\\x1b'K\\xd8\\xaa\\x7f\\x1d6'\",\n+            constraints={\"min_size\": 12, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=28843,\n+            constraints={\n+                \"min_value\": 28837,\n+                \"max_value\": 28926,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003b463\\U00061073\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([242777, 476869, 582443, 775960, 913814]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9c$\\xea\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"~\\xeb\\x90\\xb9Z\\xe2\\x1d\\x17Z%,d\\x1f\\xc9)\\x94\\x08\\x9e\\x8d\\xe6\\x1e\\xad\\x9f\\xd5^f\\xe8\\x1f\\xa7\\x12\\xc5\\xef\\xa64\\xc08\\xf1\\xa7\\xff{)\\x97K\\x986y\\x10\\x99\\x1a\\x14H40'\\xd1\\xbe\\x7f*\\x8c\\x89\\xe9\\xb5\\xd8\\x15N\\x06\\x0f\\xafr\\x81\\xf4\",\n+            constraints={\"min_size\": 44, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-157_542_436_676_880_479_791_684_678_217_283_332_132,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -22678,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.793410934925472e181,\n+            constraints={\n+                \"min_value\": -8.190662843378757e181,\n+                \"max_value\": -1.5955023634889976e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.793410934925472e181,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd3\\xffy\\x92\\x89\\xad\\x93&M\\x98\\xdc\\xceO\\xa2e\\x90\\x84\\x99l\\x06\\x88\\xeagk3c\\x94\\xf2\\xbd\\xbb\\xc3\\xc8\\xb7\\xefc\\xceb\\xfb\\x1aV\\xa8\\x90\\xe9\\xa8\\xb3\\xc5\\xc8\\xbd\\x03@0\\x9eQ\\x05\\xca\\x13\\x19l\\x13\\x80\\xef\\xe3\\xa4\\xe4\\xda\\xcd\\xfc>\\xcd\\xf0\\x03\\x85\\xa9\\xcd1\\xdc\\xb7\\xaf'>P&\\xfe\\xb0rw\\x10\\xa395=\\xaa\\xad\\xb9\\x97\\xcdIb\\xcf\\x06\\xb8\\xd6\\x9az'&\\xdf\\xd0M\\xa3\\x04m\\xe3ix\\xd7\\xac\\xa1,\\x0bM\\xaa\\x02\\xd9f\\xea\\xf5\\xa2\\xee\\x8fu\\xcc\\xe3L\\x94D\\xd8\\xf4\\x03W\\xd5)T\\x89\\xdc\\xa5\\xc1\",\n+            constraints={\"min_size\": 47, \"max_size\": 147},\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.7463510461379343e-306},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.302808474837877e307,\n+            constraints={\n+                \"min_value\": 1.645368163518809e180,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.302808474837877e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\t\\xb7\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.4481843358663283e307,\n+            constraints={\n+                \"min_value\": 1.5,\n+                \"max_value\": 4.73925681750816e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.4481843358663283e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1b|\\x11\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=19816,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 4482,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8e\\xa5\\x00\\xadd\\xdd>W\\xf2I}i\\x8a\\xbc\\xe1\\x93\\x9c\\xf2\\x98\\xc4qD\\x182.=\\xed}\\xcaB\\xee\\x115\\x8f\\x1f\\x80\\xb3\\xdaJ\\x94\\xd1\\x12\\xca\\xe5\\x12\\xbcC\\xa5\\x9d\\x94\",\n+            constraints={\"min_size\": 49, \"max_size\": 149},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=104,\n+            constraints={\n+                \"min_value\": 69,\n+                \"max_value\": 154,\n+                \"shrink_towards\": -15300,\n+                \"weights\": {135: 0.01791100780681444, 69: 0.0273558774497495},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 7.885869213163187e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.4403403677256572e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud83c\udffb\ud83d\udc4d\ud83c\udffb\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([9999, 286753])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0465\u045c\u0444\u0472\ud861\udd4d\\U00036d75\u0466\u2b9d\u04e9\u04e8\u0499\ud883\udc2f\u0489\u049c\\U0002efde\u04bc\\U00011244\u0428\u0417\u04c4\u0407\u0495\u049a\u042b\\ua48d\u04ab\u0449\u0462\u04e4\u0416\u0454\u04ca\u0412\\U0004d5a2\u0444\u0457\u0418\u04d5\u04f7\\U00032dce\\U0005f366\u04d3\u041e\u04d5\u04c7\u04bd\u04de\u04a1\\U00056fe7\\U0001de39\u045e\u04ae\u040c\u04ab\u0467\u04b4\u0415\\U00052fd4\u0488\u041e\u04e1\u04bf\u0443\u0454\\U00060a0b\u0450\u042b\u0446\\U0001dcf7\u04b6\ud81e\udc81\u043b\u04df\u0406\u0458\u0424\u04c4\u049b\ud820\udcdd\\U00056eea\u930a\u048d\u04cd\u04cc\u0409\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1024, 440296, 730661]),\n+                ),\n+                \"min_size\": 50,\n+                \"max_size\": 119,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xeef'\\xe7\\x81\\x1ft\\x84\\xe9\\x10\\xaa\\xdb\\xec\\xd2\\x18\\xe3\\x82\\xa1\\x9a5\\xdb\\xc2\\xaepI\\xd4fr>\\xe6=;[\\xa9\\xee\\xea\\x85\\x88\\x8e^j\\xda\\xca7\\x8b\\xa4\\x0b\\xba\\xc8\\xe5\\x13gs\\x03{a\\x18\\xc0\\\\\\xe5VE\\x90b\\x95\\xaa4{>\\x7f\\x91/\\x94\\x1e\\xb3\\xde\\xd24\\xcd\\xd0\\xcej!Dyv9\\xb2\\x05\\x0b\\xd8w\\x1a\\x84{\\xb4\\x05H\\x92\\xaeY\\x12\\xdf\\x8f6?\\xb5w\\x91{V\\xb5\\xec\\x90\\xa8\\xd5R\\x19\\t\",\n+            constraints={\"min_size\": 44, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-24554,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -24492,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=40177,\n+            constraints={\n+                \"min_value\": 23227,\n+                \"max_value\": 44023,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"*X\\xea\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"?\\x0b\\xe3\\xee[\\x7fLo27\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9798232521163179},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x0e\\xb3\\x99\"\\xb1T\\xa6\\xf3R\\xde\\xfbR\\xf3\\x86j\\xca\\xe1\\xe8*\\xca\\xe3\\xad\\x8d)\\xce$Z_\\x8d8h\\xd0Q\\xe5+c\\x14\\x03\\x1b\\xbb\\xc3\\xa3j\\xb5\\xd1D\\x84\\x1bJ1\\\\',\n+            constraints={\"min_size\": 32, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.259656321106539e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.623348355903137e307,\n+            constraints={\n+                \"min_value\": -3.0433326486753203e-186,\n+                \"max_value\": 9.218039666750057e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.401298464324817e-45,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=3_424_289_208_842_271_702,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -14890,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=102,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 22804,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.5723842264282604e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.1227324959274777e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1630550324595418e308,\n+            constraints={\n+                \"min_value\": 6802299492362665.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.648863178872841e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc5\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.2250738585072014e-308},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.552094081324381e308,\n+            constraints={\n+                \"min_value\": 1.1125369292536007e-308,\n+                \"max_value\": 1.552094081324381e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.5609061395877528e176,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".observation\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1433,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -3,\n+                \"shrink_towards\": 1024,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-6_371_337_059_089_842_504,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00075153\\U0007509b\\U00075130\\U00075164\\U000750db\\U0009512c\\U0007512d\\U00075096\\U00075113\\U000750e8\\U000750a7\\U000750a7\\U000750be\\U0007ca62\\U00075152\\U0007507d\\U00088842\\U000750e6\\U00075142\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([479339, 639462, 667056, 781465]),\n+                ),\n+                \"min_size\": 19,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.818578483507992e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.7517792689926908e-306,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000dd08b\u0261\\U000c74ff\\U000edc23\u021b\u0269\u0281\u0230\u0224\u02b3\u02d1\u028b\u02c7\u02e9\u0283\u02cb\u024b\\U000f3611\u0288\u0269\u024f\\U000e6540\\U0006e6e6\u02a5\u02d3\u0224\u0217\u02d8\u02aa\u024e\u0206\u02de\u02b2\u02ca\u0200\u02a3\u025c\u0203\u02cf\u0246\u027a\u0256\u02a1\u022e\u02fd\u023c\u02b2\u02a5\u0220\u02df\u0204\u024e\u027e\u0233\u0296\u0233\u029f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            512,\n+                            8637,\n+                            155675,\n+                            517066,\n+                            594961,\n+                            944680,\n+                            966915,\n+                            999933,\n+                            1086277,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 37,\n+                \"max_size\": 137,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.15872651819034503},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud820\udd98\ud820\udd7e\ud820\udda1\\U000baa21\ud820\udd7f\\U000cbf49\ud820\ude31\ud820\uddb1\ud820\uddf6\ud820\udd7a\ud820\ude46\ud820\uddb4\ud820\udd5c\ud820\udd75\\U000707c2\ud820\uddce\\U00036461\ud820\uddd3\ud820\uddbb\ud820\udd67\\U000f0a1b\ud820\udd91\ud820\uddf6\ud820\ude30\ud820\uddd7\ud820\ude28\\U000ba62d\ud820\udd88\ud820\ude26\ud820\udd86\ud820\udd65\ud820\ude2a\\U000445de\ud820\udd85\ud820\udde1\\U0009c164\ud820\ude18\ud820\udd66\ud820\udd9f\\U000c70b7\ud820\udd51\\U00033f1f\\U00069c9a\ud820\udde5\ud820\uddae\ud820\udd51\ud820\udd90\ud820\ude21\ud820\uddba\ud820\udd7c\ud820\udd92\ud820\udd4c\ud820\uddea\ud820\udde2\ud820\udd94\\U0006ea12\ud820\udddb\ud820\ude37\\U000caa5e\ud820\udd6e\ud820\uddf9\\U000732ed\ud820\udd4c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            98635,\n+                            266567,\n+                            267011,\n+                            317453,\n+                            381616,\n+                            489834,\n+                            635027,\n+                            679291,\n+                            708555,\n+                            1009423,\n+                            1028274,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 43,\n+                \"max_size\": 143,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"P\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=inf,\n+            constraints={\n+                \"min_value\": inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.3191747346057131e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.32824137159204675},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-5_336_018_502_627_432_615,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xfe?\\xc7\",\n+            constraints={\"min_size\": 1, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00059903\\U000598ad\\U0008d6c0\\U00059897\\U000598e5\\U000598de\\U0005983b\\U00059907\\U000598f2\\U00059825\\U000b55b2\\U000598c7\\U00059877\\U000598ee\\U000598cb\\U000b6757\\U000598d5\\U0005984a\\U000598aa\\U000598d6\\U000598ce\\U000598bd\\U00059911\\U00059887\\U000598fd\\U000ba4fa\\U000598c5\\U00059895\\U000598c6\\U0005985c\\U00059884\\U000a90b6\\U000598ca\\U00059823\\U000598ab\\U0005990b\\U00059821\\U000598aa\\U000598be\\U00059899\\U00059913\\U0005982d\\U00059911\\U000598e6\\U000598d3\\U000598af\\U000598be\\U000a8e24\\U00059832\\U00059906\\U000b5b6d\\U000598d0\\U000b769f\\U00059888\\U0005989e\\U000598b5\\U00059832\\U00059848\\U00059873\\U000598ed\\U000598d3\\U0005984f\\U000598d6\\U0005985f\\U000a79f5\\U0005982a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [366624, 399555, 574085, 590193, 682967, 764790, 852787],\n+                    ),\n+                ),\n+                \"min_size\": 33,\n+                \"max_size\": 133,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00013f1a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            81465,\n+                            111349,\n+                            177127,\n+                            206009,\n+                            225961,\n+                            411255,\n+                            455271,\n+                            579395,\n+                            615876,\n+                            663601,\n+                            943221,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.257756764501949e307,\n+            constraints={\n+                \"min_value\": 6155134352067708.0,\n+                \"max_value\": 1.7483965338443222e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.3659476249617513e66,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.889096057171871e16,\n+            constraints={\n+                \"min_value\": 1.5,\n+                \"max_value\": 5.740003570151746e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.225073858507203e-309,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-17629,\n+            constraints={\n+                \"min_value\": -22138,\n+                \"max_value\": 88,\n+                \"shrink_towards\": 22440,\n+                \"weights\": {\n+                    -19884: 0.006201074238690802,\n+                    -17836: 0.031231925203709838,\n+                    -6178: 0.021730373868980423,\n+                    -4843: 0.04009162296987856,\n+                    -17629: 0.10059666833693148,\n+                    -15107: 0.06266922302714127,\n+                    -10433: 0.06522322819417552,\n+                    -1203: 0.005589217493825406,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-24351,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.163927263771575},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7,\n+            constraints={\n+                \"min_value\": -97,\n+                \"max_value\": 124,\n+                \"shrink_towards\": -664,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.7521922717568051e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.225073858507203e-309},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001b851\\U0001b7d5\\U0001b7b1\\U0001b836\\U0001b805\\U0001b80a\\U0005ea73\\U000a7a60\\U0001b7d9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([112511, 119347, 176006, 737167, 992191]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 8.079668506337123e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-262528067,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 116,\n+                \"shrink_towards\": 980,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-25,\n+            constraints={\n+                \"min_value\": -8577,\n+                \"max_value\": None,\n+                \"shrink_towards\": -15214,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8e\\x93\\r\\xff\\xd4D\\\\\\x15\\x07\\x8f>0y\\xd6\\xa2\\xd1\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.2462842022556504e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.5208781044491004e190,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4_790_835_975_566_282_953,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.355780576703554e16,\n+            constraints={\n+                \"min_value\": 3.3178050154103784e16,\n+                \"max_value\": 1.3140823126004058e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 7504995249438969.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 8.030248510824076e-97},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=94013593,\n+            constraints={\n+                \"min_value\": 65,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.513212357702783e306,\n+            constraints={\n+                \"min_value\": -1.1125369292536007e-308,\n+                \"max_value\": 9.825960663402548e306,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u02b9\\U00072a1e\\U00074826\u0279\u0201\u02d6\u0244\u0261\u0228\u0245\u026c\u02f3\u02fe\u0270\u02dc\u02d9\u0273\u02ea\u0269\u0230\u0240\u02b6\u0257\u02bb\u02f5\u0232\u027b\ubd68\u0274\u0276\u020f\u0263\u02ed\u0271\u02a5\ud81c\udd9e\u0238\u029f\u02e5\u02bc\u0270\\U00078f21\u02fe\\U0001fade\u023e\u02b4\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([512, 530646])),\n+                \"min_size\": 42,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-23,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 37,\n+                \"shrink_towards\": 32070,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud82c\udd93\ud841\udc83\\U000df417\\U0005f439\\uf16f\\uf143\\uf196\\uf205\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([61740, 144889, 376778, 473318, 842239, 948892]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.831205289449598e-145},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4549,\n+            constraints={\n+                \"min_value\": 4523,\n+                \"max_value\": 4551,\n+                \"shrink_towards\": 28465,\n+                \"weights\": {\n+                    4545: 0.1470088067669808,\n+                    4544: 0.3326756332586009,\n+                    4549: 0.3326756332586009,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u01e9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            300,\n+                            1000,\n+                            2678,\n+                            9999,\n+                            77711,\n+                            104385,\n+                            187209,\n+                            212218,\n+                            213152,\n+                            258746,\n+                            290342,\n+                            327634,\n+                            476978,\n+                            481372,\n+                            500369,\n+                            584137,\n+                            697644,\n+                            699740,\n+                            720507,\n+                            771887,\n+                            811101,\n+                            866622,\n+                            883588,\n+                            929847,\n+                            1032269,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8461848478938385},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=14611,\n+            constraints={\n+                \"min_value\": -10,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x91\\xa3\\xbb\\x9a\\x95\\xe2t\\x1d.X\\xaa\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"H\\xd1\\xae\\xf7\\xea\\x93|q\\x1ak\\x9f\\xf7\\xddL\\x81d\\x99\",\n+            constraints={\"min_size\": 14, \"max_size\": 114},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.06927851163642453},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001c616\\U0001c54a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            115993,\n+                            225342,\n+                            341385,\n+                            392114,\n+                            438960,\n+                            509218,\n+                            1033367,\n+                            1100940,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 41,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-28417,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -92,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 3.847211391286392e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.2793258281424002e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -6.499576945397172e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.073328140320772e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"S%#\\x8d\\x80\\x01\\x9e\\x9fjm<e\\xd6JY#\\x94\\xc4-\\xea<\\xcf\\xab\\xb3\\x13\\x98\\xb1\\xb7< 1\\xd1\\xaa3@Y\\x18\\x1d\\xba\\xfe\\xb4C\\xd2\\xdc\",\n+            constraints={\"min_size\": 14, \"max_size\": 114},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.5286094852519714e308,\n+            constraints={\n+                \"min_value\": -8.544253040816291e-61,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.5286094852519714e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -1.175494351e-38,\n+                \"max_value\": 7.868263538269095e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6.698106820071307e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.868676422542257e307,\n+            constraints={\n+                \"min_value\": 4.9821094901708504e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 7.333515383289704e278,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"b\\x0618e\\xba\\x90\\x01\\xa5\\xccA\\xad[\\xb5-\\xf5\\xd0\\x06K\\xac\\xe1\\xd8\\x12]\\x02\\x1blYl\\xca\\xc0\\x18\\xded\\x83\\x94LD\\xb7nR\\xb9\\x0b\\xea\\x9e\\xc0\\xcd\\xcfcznL\\xc0\\xca\\xb2e\\xbb\\xf8\\x16\\x04\\xaa\\xe3\\x97\\xb2\\xd1\\xe48p\\x84\\xd0\\xe2\",\n+            constraints={\"min_size\": 39, \"max_size\": 139},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [67298, 67396, 193858, 517313, 519678, 626309, 883336, 894530],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4_889_394_701_991_497_729,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623155e308,\n+            constraints={\n+                \"min_value\": -4.357347674360733e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7976931348623155e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=42426,\n+            constraints={\n+                \"min_value\": 30580,\n+                \"max_value\": 48008,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 2.239805796583543e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.00254709141644e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000e192d\ud850\udc61\\U000aab73\ud850\udd1b\ud850\udc63\ud850\udc48\ud850\udc4e\ud850\udcf3\ud850\udc23\ud850\udc6d\\U000ebd84\ud850\udceb\\U000cb2dd\ud850\udc2d\ud850\udc2d\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([147490, 305312, 567309, 1104458]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u04d1\u05b5\u0586\u05a0\u0511\u05a5\u0560\u04fa\ud866\udd05\u04c5\u058e\u04d0\u0537\u05a3\\U000a0bf6\u04e5\u05b6\u056c\u0534\u05b0\ud85d\udf5c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1218,\n+                            409893,\n+                            631447,\n+                            712692,\n+                            713373,\n+                            923256,\n+                            1053102,\n+                            1059566,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 15,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.0525612855373397e307,\n+            constraints={\n+                \"min_value\": 1.350326790257023e-148,\n+                \"max_value\": 1.4337988684240552e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.5971351837679892e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 0.05,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0706912685420034e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 80},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.752340025615714},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x86\\x1a\u00e2\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([1, 959485])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2842334158107964.5,\n+            constraints={\n+                \"min_value\": 0.0,\n+                \"max_value\": 5355761310766150.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2116021586465189.2,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.24098454841188405},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x81\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6646289450805981},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 6.7622509531436604e-18},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ub4b5\u0197\\U000e8370\u01f5\u01e2\\U000d788b\u01f9\u0223\u0224\u01d5\u01af\u01cb\u01af\u0253\u01a3\\U000bd0cc\u0234\u024a\u0250\u0198\u01dc\ud81c\udf35\u0238\u0197\uae3b\u0243\u0232\u01b1\u0270\ud881\udcb7\\U000a602c\\U000dec1f\u01b8\u0290\u01d0\u0280\\U000dd2fa\u0231\u0200\u0290\u022d\u0287\u0278\u01c5\u01cb\u019c\u01db\u019b\u01f1\u022e\u0230\u0205\u019d\u0248\u024e\u0254\\U000e66c0\\U000dc7a0\u020f\u01d0\u01c3\u01bc\\U0009178f\\U000e768c\u01c7\u0244\u01e5\u028c\u0214\u0280\u01a2\ud844\udda1\u01a2\u026b\u0250\u028c\u023d\u0236\u01b4\u0206\\U000328ae\u0260\\U0010fb87\u0258\u0249\u01e3\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([404, 241911, 591595, 961807, 1111079, 1114111]),\n+                ),\n+                \"min_size\": 27,\n+                \"max_size\": 127,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.868599727071836e-273},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=33138,\n+            constraints={\n+                \"min_value\": 31871,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=11,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 21108,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 3.834960706167684e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.824060415568369e-198,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud86e\udd38\ud86e\udd92\ud86e\uddbf\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([178482, 341515, 462734, 697139, 719098]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.030527853903886e307,\n+            constraints={\n+                \"min_value\": -7.057731253367248e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.9554538169349163e207,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=29768,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003fa82\\U000373fb\\U0003310c\\U0003310a\\U000330e4\\U000330d6\\U0003305e\\U00033117\\U00048894\\U0003303e\\U0003f493\\U0003305d\\U00033117\\U0007f21a\\U0003323e\\U00033119\\U0003309f\\U000330b8\\U00077c1f\\U00075fc1\\U000330c7\\U000330e8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([208936, 304334, 465784, 536012, 683515, 690903]),\n+                ),\n+                \"min_size\": 17,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-3_684_048_071_131_247_339,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -20,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe4\\xb2\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xef\\xa5VJ\\x08\\x90o\\x1cd\\x81\\x8d\\xfb \\x0c\\x98lz\\x1a\\xbbq\\xf5\\x83\\x12\\x8b%\\x85\\xc2)\\xf3S\\xe2\\xba\\x1e\\xbc\\x15\\xd8\\xc7r2T\\x85\\xa4\\xbaW\\xa3\\xcc\\xa2\\\\\\r9\\xcc\\x83\\x1f\\x89\\xde\\xc8F\",\n+            constraints={\"min_size\": 28, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u01fc\u01ad\u01ad\u01b7\\U000a6737\\U00083a03\u01de\u01c0\u01dd\u0139\u01c5\u018f\u0168\u0157\\U00057c79\\U000396f8\\U00075a35\u0132\\U00102dde\u01a8\u01e7\u0149\u01dd\\U000bf0ae\u01f1\u01c8\u0136\\U0007e7d3\u021e\u01a8\\U0010c368\\U000baa8b\u0172\u0142\u012c\u0156\u01a8\\U0003f37f\u014f\u016d\\U000aedc3\u01f8\\U0003da3b\\U0005ce22\u0152\\U000aa871\u01e1\u014b\u018c\u016e\u0227\u015e\u016c\u01ab\u012e\u0140\u018c\u01a5\u0222\u01dd\u0224\u0158\\U0009335e\u019c\u019a\u0223\u021d\\U0009ca1d\u0188\u014f\u0145\\U000bbe54\u01ce\u0156\u0216\u01ee\u021d\u017e\u01ae\u013f\\U0009343c\u01c2\u01a0\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            300,\n+                            1000,\n+                            18722,\n+                            22147,\n+                            234345,\n+                            259105,\n+                            353931,\n+                            717978,\n+                            751359,\n+                            818530,\n+                            941537,\n+                            1101373,\n+                            1106204,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 31,\n+                \"max_size\": 131,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-38,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 18596,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.2815216386200892},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x19\\x10\\x88\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9655078579075693},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u5472\\U000a2685\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1000,\n+                            1024,\n+                            21443,\n+                            21833,\n+                            55269,\n+                            181788,\n+                            213195,\n+                            227768,\n+                            238650,\n+                            363537,\n+                            388945,\n+                            398032,\n+                            435814,\n+                            438356,\n+                            441158,\n+                            511155,\n+                            618799,\n+                            622789,\n+                            661415,\n+                            744029,\n+                            769330,\n+                            785710,\n+                            923364,\n+                            1040938,\n+                            1047896,\n+                            1051503,\n+                            1111969,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud869\ude89\ud887\uddde\ud869\udeab\\U00034621\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([173609, 236006, 730368]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0489\u04de\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1024, 477229, 929594, 1077778]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 29,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa1;\\xd1\\xd7Fz\\xa6\\xe1\\xe4\\x87\\xa6\",\n+            constraints={\"min_size\": 9, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=55522,\n+            constraints={\n+                \"min_value\": 10063,\n+                \"max_value\": 1_411_027_816,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    21243351: 0.08325612540464891,\n+                    60685: 0.09730968368855039,\n+                    347619444: 0.11398201316820059,\n+                    55522: 0.06306263277143342,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-18,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 12450,\n+                \"shrink_towards\": 39,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"w\\x17\\xa2\\x990\\xd88\\xd7h\\xcc\\xeadzN\\x99\\xb1'V\\xc1\\xd7\\xcfk\\xfd\\x8aM\\xc76\\x9e\\xbcd#\\x05\\xb9\\x9b\\xfe\\xdc\\xa4\\xc3@\\xe5\\xd1\\x84\\x1f\\x032\\xd4\\x8e5\\xb1\\x85\\x1e~\\x9c\\x9a\\x03\\xf1\\xed\\xcb\\x14\\x81\\x05&\\x98\\x1a\\xf4\\xd1\\x8e)\\xa7p\\x01\\x7f\\x90\\x10D\\x95W\\xd0a\\x94'l\\xacC3$\\xa3\\x97\\xee\\xb4g\\xb4\\xe2\\x14Y\\xc5U\",\n+            constraints={\"min_size\": 48, \"max_size\": 148},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-44125,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -27941,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x85d7\\xb1\",\n+            constraints={\"min_size\": 0, \"max_size\": 5},\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.45337073019922214},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.663238459267875e307,\n+            constraints={\n+                \"min_value\": 4.827713751446807e16,\n+                \"max_value\": 1.8846861523128853e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 9.15168700999911e306,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9264441014859275},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.1145610223073416e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1672407309397850.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7255217764018124},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=456138707,\n+            constraints={\n+                \"min_value\": -26924,\n+                \"max_value\": None,\n+                \"shrink_towards\": 19927,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud84c\udc76\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            143330,\n+                            170638,\n+                            173563,\n+                            302889,\n+                            353252,\n+                            667691,\n+                            909535,\n+                            1086048,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00067f16\\U00067f23\\U00067e71\\U0009be0d\\U000899c3\\U00067f03\\U00067f11\\U00067edb\\U00067f65\\U00067f57\\U00067f2a\\U00067ef1\\U00067ef7\\U0009540d\\U000c1710\\U00067f3c\\U00067f27\\U00067eb2\\U00067ed3\\U00067e7e\\U00067f5a\\U00067f56\\U00067ec4\\U00067ed9\\U00067f27\\U00067ea7\\U00067f10\\U00067f0a\\U00067f2e\\U00067ede\\U00067eec\\U00067e8b\\U00067f3f\\U00067ec9\\U00067eaa\\U00067ee7\\U00067f57\\U00067f30\\U00067e96\\U00067ea9\\U000d5047\\U00067e9c\\U00067f1b\\U00067ef2\\U00067eef\\U000adffc\\U00070ce0\\U00067f2b\\U00067f2f\\U00098a04\\U00067e92\\U00067eea\\U000904c4\\U00067f05\\U00067eeb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([425581, 879706, 901715, 911624, 946723]),\n+                ),\n+                \"min_size\": 33,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.027561038860376648},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.47947929554546553},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6445463214750319e308,\n+            constraints={\n+                \"min_value\": -7.042053312623689e173,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.5423566866709571e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5e-324},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5.960464477539063e-08},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1142,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -12,\n+                \"shrink_towards\": 106,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.069959944988474e16,\n+            constraints={\n+                \"min_value\": -3.764290256713461e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.12787119800261e-17,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9f,\\x8e\\x82\\x1f\\x87\\xca\\xd4X\\xd4\\xc0\\x88Dx\\x905\\xd4\\x12\\x9a\\x00 y\\xb2\\x0b:p$\\x0c\\xc9\\x814PM\\x8f\\x0bn\\xe0+\\x920b\\x0eu\\xe1\\x86~_\\xea\\xbcG4.1\\xd1\\x0cM\\xbc\\xb3`\\x9a\\x1ak\\xba7w\\xde\\x81\\xedt\\x85\\xe2\\xda\\x89\\xca\\xf4\\xc5\\xf9\\xb7\\xdcp\\x02\\xe0\\x0b\\xf9[\\x13\\x8bz \\xbd\\x913T\\x19\",\n+            constraints={\"min_size\": 50, \"max_size\": 150},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x92\\xe9\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"&\\xed\\xf1dp\\x9dr.\\xa0\\xe0\\xbc\\xe2\\xcd\\xfe\\xd8\\xfeOj\\xd7u\\xb7\\x1avZ\\x11\\xd9k\\xcfYXV\\xb9\\xa2\\x973\\xf4<1\\x0f\\xaa\\xc4\\xf1\\xc7t\\xea!\\x80\\x13L0/Bg6<\\xb6\\x16M\\x10\",\n+            constraints={\"min_size\": 49, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"$\\xe3/[Z\\xf8\\x00>\\xb1\\xe7\\xf0\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7561772234567113e308,\n+            constraints={\n+                \"min_value\": 6.202989833873239e16,\n+                \"max_value\": 1.7561772234567113e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.7561772234567113e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.16978809742151826},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xfb\\xa6\\xb7\\xdd\\xd0\\x85S%\\x0b\\xb7\\x89\\x18n`U6\\x9b\\xb6r)N\\xd4\\x10\\x94\\xa7\\xc6I\\xfcb <\\xbf\\xce\\x83F\",\n+            constraints={\"min_size\": 18, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.20086289834981402},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-35827,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -23826,\n+                \"shrink_towards\": 55,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7134438459964932},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.097373141338626e308,\n+            constraints={\n+                \"min_value\": -1.0371090610882806e290,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.267966044018705e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1655345088857043e148,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.6357921207213604e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-32,\n+            constraints={\n+                \"min_value\": -53,\n+                \"max_value\": -5,\n+                \"shrink_towards\": 1048,\n+                \"weights\": {\n+                    -22: 0.08785670602239448,\n+                    -47: 0.1993866498496733,\n+                    -39: 0.06176464987789131,\n+                    -24: 0.10896979414716366,\n+                    -16: 0.04202220010287724,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.625197625184638e308,\n+            constraints={\n+                \"min_value\": 1.5281932844156673e-186,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.0983217548638264e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8ez\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=15315,\n+            constraints={\n+                \"min_value\": -8421,\n+                \"max_value\": 16382,\n+                \"shrink_towards\": 16072,\n+                \"weights\": {\n+                    500: 0.0034483570078989484,\n+                    -7588: 0.014139237864336704,\n+                    10818: 0.01769163031214467,\n+                    7868: 0.006909342438763175,\n+                    15282: 0.012134766243701191,\n+                    -4170: 0.028041922343664132,\n+                    16382: 0.027010516730545074,\n+                    -5038: 0.022462940849609894,\n+                    13112: 0.015338141251729729,\n+                    -3656: 0.016203366315511652,\n+                    6320: 0.008694748756469377,\n+                    6152: 0.024022797212859204,\n+                    -4737: 0.007901034494656995,\n+                    8192: 0.009178719520849884,\n+                    -6751: 0.0021773326105471304,\n+                    4819: 0.0060232735494959505,\n+                    8980: 0.023908009774831984,\n+                    15315: 0.014139237864336704,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'!\"=\\xe6(/\\xa1\\x05\\xb8\\xaa\\xd0k\\xa06r\\x0b=D\"J',\n+            constraints={\"min_size\": 20, \"max_size\": 120},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.743092400113588e133,\n+            constraints={\n+                \"min_value\": 2.7210828636529843e57,\n+                \"max_value\": 2.7916891630546734e133,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.4736305970703523e132,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.35777045357834286},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-16125,\n+            constraints={\n+                \"min_value\": -29639,\n+                \"max_value\": -11730,\n+                \"shrink_towards\": -26492,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000cabd8\\U000330c6\\U0003309a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([208913, 290487, 712886, 958085]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\uca78\\U00015a32\uca59\uca03\uc9a2\uc9ce\\U0007d6f2\\U00041bfe\uca95\\U0008e0f0\uc9ee\uc9b6\uc9ef\uca38\uc9d3\\udd4b\uca99\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            51613,\n+                            97407,\n+                            143372,\n+                            412405,\n+                            423183,\n+                            606384,\n+                            661871,\n+                            706819,\n+                            813288,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 8,\n+                \"max_size\": 108,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -4.029794189522336e137,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.1754766296221151},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.2059713458654482e307,\n+            constraints={\n+                \"min_value\": 6.211424513145599e16,\n+                \"max_value\": 2.8235606168381307e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.0993567998750704e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7423371040157184},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.3130760511552236},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud840\udecf\\U0006b54f\ud840\udf6d\ud840\udf3b\ud840\udebc\ud840\udedc\ud840\udf5e\\U000373d2\ud840\udf5a\ud840\udea8\ud840\udef7\ud840\udf5b\ud840\udf2d\\U0003f68b\ud840\udece\ud840\udebb\ud840\udf05\ud840\udf79\\U000cfd4d\ud840\udf1e\\U000f6745\ud840\udf19\ud840\udf7e\\U000f8720\ud840\udee8\ud840\udf81\ud840\udf0d\\U000d9f4e\ud840\udf07\ud840\udf7a\\U000ebe7c\ud840\udf5e\ud840\udf8c\\U00063c88\\U00093fae\ud840\udf00\\U00086d42\\U000ea40f\ud840\udee3\ud840\udf33\ud840\udf5f\ud840\udf2e\ud840\udf54\ud840\udf88\\U0002f262\ud840\udf1c\ud840\ude9e\\U0007cbb5\ud840\udeb1\ud840\udf21\ud840\udf0a\ud840\udf60\\U00077939\ud840\udf22\ud840\udf8b\ud840\udef4\ud840\udf7d\ud840\udf3f\ud840\udf74\\U00057f86\ud840\udf79\\U000d1a4b\ud840\udf79\ud840\udee6\ud840\udecf\ud840\udf45\\U0004e76b\ud840\udf2e\\U00071eab\\U000a60cc\ud840\udf0a\ud840\udee2\\U0009a277\\U0009fc25\ud840\udf49\\U0004a684\ud840\udf61\ud840\udeeb\ud840\udf0a\ud840\udf7f\\U000d3b3d\ud840\udf99\ud840\udf56\\U00090474\ud840\udf37\ud840\udf39\ud887\udc16\ud840\udec6\ud840\udf5c\ud840\udea9\ud840\udef7\ud840\udeee\ud840\udf30\ud840\udf02\\U000cf5cc\ud840\udec2\ud840\udebc\ud840\udf4d\ud840\udeb3\ud840\udf18\ud840\udeeb\ud840\udf6b\ud840\udea1\ud840\uded9\ud840\udf76\\U00066f0e\ud840\udf76\\U000c9dd8\ud86e\ude72\ud840\udeec\ud840\udeb1\ud840\udecf\\U000ec41b\ud840\udecc\ud840\udf38\ud840\udf5b\\U000ce2c1\ud840\udf6f\ud840\udeb7\\U00059af6\ud840\udea6\ud840\udf85\\U00070616\ud840\udf68\ud840\udeec\\U000cc851\ud840\udf63\ud840\udeed\ud840\udf20\\U000c1ca8\ud840\udf36\ud840\udf45\\U0003c5d8\ud840\uded1\ud840\uded4\ud840\udeab\ud840\udf17\ud840\udec5\ud840\uded4\ud840\udf1b\ud840\udf48\ud840\udec3\ud840\udf7f\ud840\udf71\\U0007bc4a\ud840\udeeb\ud840\udf1e\ud840\udee7\ud840\udec9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([131741, 381061, 407458, 1027260]),\n+                ),\n+                \"min_size\": 49,\n+                \"max_size\": 149,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"=\\x90\\xab\\xe1\\xbf\\x1bc\",\n+            constraints={\"min_size\": 4, \"max_size\": 104},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005ec20\\U000c08a8\\U0005ebea\\U000bd26b\\U000abba3\\U0005eb94\\U0005ec2e\\U0005ebae\\U0005ebe3\\U0005ec03\\U0005eb5a\\U000daf86\\U0005eb91\\U0005ebce\\U0005eb82\\U000d7ccf\\U0005eb5c\\U000de69c\\U0005ec41\\U0005eb98\\U0005eb62\\U0005ebc8\\U0005ebfb\\U0005ebf4\\U000d8bd5\\U0005ebe8\\U0005ebe6\\U0005ec10\\U0005eba9\\U0005ebed\\U0005ebcb\\U0005ec17\\U0005ec0a\\U0005ebbf\\U0005eb91\\U0005eb6d\\U0005ebf5\\U000b6ef8\\U0005eb4a\\U0005ec02\\U0005eb63\\U0005eb80\\U0005ebb4\\U0005ec0f\\U0005ebc2\\U000d98dd\\U0005eb90\\U0005eb56\\U0005eba4\\U0005ebee\\U0005ebef\\U0005eb9f\\U0008ceec\\U0005eb57\\U0005ebe2\\U0005eb4d\\U0006576b\\U000e44de\\U000710f5\\U000bde55\\U0005ebe8\\U0005ec18\\U0005eb9c\\U0005ec23\\U000d4764\\U0005ebf5\\U0005ebb9\\U0006adbb\\U0005ec2f\\U000916b1\\U0005ebe1\\U0005eb79\\U0005eb56\\U0005ebd9\\U0005ec08\\U0005eb46\\U0005ec23\\U0005eb5f\\U0005ec2b\\U0005ec33\\U0005ebbf\\U0007a9ec\\U0005eb80\\U00077117\\U0005eb4b\\U0005eb85\\U0005ebcf\\U0005ebbf\\U0005ec0f\\U0005eb87\\U0005eb5f\\U0005ebba\\U0005ebd2\\U0005ec1b\\U0005eba7\\U0005eb77\\U0005ec35\\U0005eb53\\U0005ebf4\\U0005ebca\\U0005eb50\\U0005ebdc\\U0005ec30\\U000cc389\\U0005ebe1\\U000e485a\\U0005ebcf\\U0005eb43\\U0005eb77\\U000e4124\\U0009928c\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([387906, 1010412])),\n+                \"min_size\": 26,\n+                \"max_size\": 126,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=31068,\n+            constraints={\n+                \"min_value\": 40,\n+                \"max_value\": None,\n+                \"shrink_towards\": 41,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8222881903728321},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.3435312590010143},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00033012\\U00033083\\U00033054\\U000ab252\\U000330c6\\U00033083\\U0006a8bd\\U00033061\\U000330cb\\U0003304b\\U00033047\\U0003306f\\U00033058\\U00033069\\U0003306c\\U00033068\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([208900, 1086216])),\n+                \"min_size\": 9,\n+                \"max_size\": 109,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.872084095561294e-155,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.7671466883353733e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xfd\\xb2_\\xb7\\x99\\xfdW$\\xb1trKQ\\xdfA^\\xda?\\x7fL\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"Z\\xf7\\x1d\\xe9\\x01\\x9f\\x83y\\\\\\x13\\xea^\\xef\\xc3~L\\x87\\t\\xae\\xd0\\x9c\\x17\\x8f=\\xfai\\xd0\\xd8.jUw\\x10\\x06\\xfc\\xf4`\\xf6\\xc0\\xb5{\\xa6Y\\xceC,\\xe7q\\xe2\\xc1\\\\\\x84\\xf4\\xa6\\x1f\\xc3\\x06\\x162\\x87O\",\n+            constraints={\"min_size\": 35, \"max_size\": 135},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"/S\\xcf\\x0f\\xa0\\x1bh\\xbe\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6132104227563683e308,\n+            constraints={\n+                \"min_value\": 2.4380649580969217e-127,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.0,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.401298464324817e-45},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00064c5c\\U00064c29\\U00066773\\U00064ca8\\U00064c31\\U00064c7e\\U00064c52\\U00064ce1\\U00064c76\\U000904be\\U00064ce6\\U00064c6c\\U0007160d\\U00064d0b\\U00064c27\\U00064cce\\U00064cd9\\U000b2e0e\\U00064c59\\U00064c44\\U00064c22\\U00064ce2\\U00064d0b\\U00064c6f\\U00064ce4\\U00064cfb\\U000b20b6\\U00064d02\\U00064c7b\\U00064cb2\\U00064c7e\\U00064c8f\\U00064c74\\U00064c97\\U00065995\\U00064cff\\U00064c25\\U00064cb0\\U00064c70\\U00064cea\\U00064c26\\U00064c69\\U00064cf5\\U00064d0f\\U00064d00\\U00064ccd\\U00064cc6\\U0006d808\\U00086399\\U000bf93b\\U00064c80\\U00064cdf\\U00064c4a\\U00064c5f\\U00064d15\\U00095675\\U00064d01\\U00064c9d\\U00064c36\\U00064c44\\U000b4f24\\U00064c96\\U000be21b\\U00064cb2\\U00064c1e\\U00064c46\\U00064c81\\U000b737a\\U00064c23\\U00064cdb\\U00064c8b\\U00064c7d\\U00098f02\\U00064c7e\\U00064c99\\U00064c27\\U00064c90\\U00064c54\\U00064c45\\U00064c71\\U00064c75\\U0008af53\\U00064cce\\U00064c3b\\U00092bc3\\U00064cb2\\U00064c7d\\U0007da0b\\U00064cff\\U00064c74\\U00064c7d\\U00064cb5\\U00064cf6\\U00064c62\\U00064ce3\\U00064c90\\U00064ce9\\U00064ca3\\U00064c4f\\U00064cac\\U00064c9a\\U00064c52\\U00064cdb\\U00064c24\\U00064c9a\\U00064d07\\U00064c5f\\U00064ce0\\U00085914\\U00064ca7\\U00064ce2\\U00064c9b\\U00064cc1\\U00064cc9\\U0009862c\\U00064d13\\U00064c2b\\U00087148\\U00064c8e\\U000ac6a5\\U00064ca8\\U00064c76\\U00064d09\\U00068bf6\\U000bcf3e\\U0006b7c2\\U00064c9d\\U00064c37\\U00064c4b\\U00064d0b\\U00064cd6\\U00064c52\\U0007f71e\\U00064cfe\\U00064ca1\\U00064cad\\U00064cf3\\U00064ca2\\U00064c39\\U00064c44\\U00064c73\\U00064c93\\U00064c83\\U00064c62\\U00064c34\\U00064c21\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([412699, 805019])),\n+                \"min_size\": 42,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.329343526915695e104,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.1415034867853804},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud843\udd40\ud843\udd5c\ud843\udcfe\ud843\udd31\\U000d726e\ud843\udd51\ud843\udd73\ud843\udd6e\ud843\udd8c\ud843\udd06\ud843\udd9b\ud843\udd7d\ud843\uddd5\ud85c\udf86\ud843\udd23\\U000d72a1\\U0006e16b\ud843\udcfa\ud843\udd58\ud843\udd20\ud843\udd56\ud843\udde4\\U0003cb79\ud843\udd99\ud843\uddb1\ud843\udd7f\ud843\udde3\ud843\uddc9\ud843\udd2c\ud843\udd6a\ud843\udd66\ud843\uddc9\\U000c3b57\ud843\uddda\ud843\udd9b\\U000ce5ef\ud843\udcfd\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            134390,\n+                            162581,\n+                            245067,\n+                            257878,\n+                            443707,\n+                            513472,\n+                            792587,\n+                            903593,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 22,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xfc\\xd5>\\x11\\xf3\\xdf\\x05nda*\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud833\udf23\\U0001cf4b\\U0003749f\\U0001ceb4\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([118417, 436750, 686884]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.444367258941362},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.39798547146469787},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3270950810998508},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.716862171830761e307,\n+            constraints={\n+                \"min_value\": 10000000.0,\n+                \"max_value\": 1.3024830053678183e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.716862171830761e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0006248c\\U0006249c\\U00065c6d\\U0006246e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([402357, 548388, 1095465]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=127_350_284_296_520_250_493_009_319_741_926_125_016,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -46,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=0,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 41,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.10665019077336e307,\n+            constraints={\n+                \"min_value\": -2.49057526266509e-07,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.781404405607382e251,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.06941013514759577},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=24545,\n+            constraints={\n+                \"min_value\": -19669,\n+                \"max_value\": None,\n+                \"shrink_towards\": -64,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.871091335353025},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5696226140412314},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.646467532311926e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 10000000.0,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.21258669465718533},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=127_937_612_964_933_141_060_815_548_519_610_247_809,\n+            constraints={\n+                \"min_value\": 10049,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=89_505_283_468_080_652_300_496_587_051_888_912_536,\n+            constraints={\n+                \"min_value\": 89_505_283_468_080_652_300_496_587_051_888_884_779,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.24139882420590247},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8024337705950817},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.12025873107831989},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.8640329439760684e307,\n+            constraints={\n+                \"min_value\": 1.6565678348547148e16,\n+                \"max_value\": 1.1490202204893779e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.068209447609222e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.011336378360303991},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"vb.\\x05\\xb7 @lH\\x19\\xf2c\\x13\\x92I\\xdc\\x99+\\xef\\xc1b9~\\xf6W#\\xe4\\xfb,\\xa0\\xa9_\\x97\\x01?\",\n+            constraints={\"min_size\": 19, \"max_size\": 119},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=54,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 670_723_971_613_201_151,\n+                \"shrink_towards\": -120,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-103_217_474_213_903_056_580_118_322_509_988_437_415,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 0,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1_858_394_523,\n+            constraints={\n+                \"min_value\": 1_858_394_463,\n+                \"max_value\": 1_858_394_549,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005a2f9\\U0005a3b4\\U000bdca8\\U000d243e\\U0005a34c\\U0005a397\\U0005a3a0\\U0005a3b4\\U0005a35d\\U0005a3c1\\U0005a3c0\\U000d1ed9\\U0005a3bd\\U00087b11\\U0005a352\\U0005a32d\\U0005a37c\\U0005a358\\U0005a2f9\\U0005a3a6\\U0005a30f\\U0005a3bd\\U0005a2e3\\U0005a2fb\\U0005a354\\U0005a2f3\\U0005a316\\U0005a2e3\\U0005a3c2\\U0005a3b2\\U0005a2d6\\U0005a35c\\U0005a391\\U0005a3a8\\U000a89c7\\U00080ccb\\U0005a36a\\U0005a301\\U0005a319\\U0005a317\\U0006fc9c\\U0005a38d\\U000bd6c1\\U0005a2de\\U0009071a\\U000a5ba3\\U000b1546\\U0005a366\\U0005a35c\\U0005a3bc\\U0005a3b1\\U0005a2c3\\U0005a2f6\\U0005a2c3\\U0005a312\\U0005a316\\U0005a31b\\U000c6182\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([369347, 921706])),\n+                \"min_size\": 22,\n+                \"max_size\": 122,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=28596,\n+            constraints={\n+                \"min_value\": 5174,\n+                \"max_value\": 65535,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    53890: 0.11529256013455463,\n+                    6732: 0.24311062573188014,\n+                    30065: 0.11791824812989059,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.786254528836033e-113,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.355073614725925e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=539391938,\n+            constraints={\n+                \"min_value\": -117,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe5\\xed\\xde\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"R{\u00bf\\x86\u00ec\\x9e\\t\\x01a\\x8d\u00d8{\u00f3n\\U00054336\u00a8\u00b7l*G\u00c5y\\x9e_c@\\x1cS\\x0e\\x1a\\x1e,\\U000d83f4=\\x9c\\x8c\u00e8\\x16_\\x15\\U000647b4U\\x93\\x89V\u00ce\\U000d21b8\u00b17\\x0b\\U0001e6fb\\x97 \u1f50Y\u00ae\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            46299,\n+                            48632,\n+                            170628,\n+                            176140,\n+                            346958,\n+                            370652,\n+                            421664,\n+                            503653,\n+                            602172,\n+                            766465,\n+                            908801,\n+                            941054,\n+                            1001435,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 43,\n+                \"max_size\": 143,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00019a49\\U00019a62\\U00019a93\\U00019a62\\U00019a76\\U00019a5e\\U00019a6f\\U0006eeee\\U00019a73\\U000199c2\\U00019a55\\U000695e5\\U00019a41\\U00019a17\\U00019a1c\\U00019a6e\\U000199a9\\U00019a04\\U000199c6\\U00019a76\\U000199dc\\U00019a27\\U000199aa\\U000a95cf\\U00019a6b\\U0009c587\\U00019a44\\U000de57d\\U000c93aa\\U000199b0\\U00019a4f\\U00019a6a\\U000199c4\\U000af70e\\U00019a87\\U00019a36\\U0005e707\\U00019a0d\\U00019a00\\U00019a2d\\U00019a0f\\U000199b1\\U000199f8\\U00019a97\\U000199f0\\U000199bc\\U0003ed66\\U00019a8c\\U000199e5\\U000199f6\\U000199d9\\U000199d9\\U000c8d5b\\U000199a6\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            104856,\n+                            278849,\n+                            347418,\n+                            390101,\n+                            408784,\n+                            726088,\n+                            776025,\n+                            838565,\n+                            907305,\n+                            927934,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 47,\n+                \"max_size\": 147,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u965c\u9598\u9651\u9619\u9662\u9632\\U00084471\\U0007c337\\U000868e3\u9628\u9647\u9678\ubfe4\u9643\u9645\\U00085b82\u9632\\U0009119d\u95db\u95ba\\U00039c3c\u961f\\U0003ffbc\\U00047517\u95d2\\U0003edb4\ud835\uddbd\u95e8\u9607\\U00058091\u960d\u9651\u958f\\U00039232\u95d8\u95a2\u9635\u962c\u962a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([38267, 368191, 474804, 609133]),\n+                ),\n+                \"min_size\": 30,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.07986140049704506},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2629,\n+            constraints={\n+                \"min_value\": -11,\n+                \"max_value\": 26391,\n+                \"shrink_towards\": 29,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud85c\uddd8\ud85c\udde0\ud85c\uddab\ud85c\udd82\ud85c\udd52\ud85c\ude27\ud85c\udd98\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            160073,\n+                            258350,\n+                            329814,\n+                            440935,\n+                            500439,\n+                            712022,\n+                            764955,\n+                            800429,\n+                            802071,\n+                            1032558,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 7,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=14403,\n+            constraints={\n+                \"min_value\": 11742,\n+                \"max_value\": None,\n+                \"shrink_towards\": 28567,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=747006629,\n+            constraints={\n+                \"min_value\": -1_524_465_817,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"A\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-20388,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -97,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.5664872971300608e307,\n+            constraints={\n+                \"min_value\": 3.2784410234876204e84,\n+                \"max_value\": 1.7548462689489254e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.225073858507203e-309,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 4.413202208673924e-216},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-31314,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -31302,\n+                \"shrink_towards\": -19302,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.780264780917418e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0999515960374335e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u02c7\u0233\u02bb\u02bc\u0231\u0247\u0234\u02df\u02b1\u022d\\U00015927\u022a\\U000dcf04\u0201\u029a\ud864\udcd8\u0292\ud81d\udf2d\u023d\u020c\u02d2\u020a\u027e\u024f\u02b0\u0259\u02da\ud805\uddbb\u02c4\u02c7\\U000370d8\u0211\\U000f9676\u029a\u02ed\u02b9\\U001005ea\ud808\udc40\u025d\u02a5\u02fc\u0257\u02d7\u02fc\\U0004f686\\U000ac3f7\u0283\\U000e462a\u0248\u0231\\U000fdca4\u0202\u02f9\u02e7\u02f9\u02f0\u02dd\u52dc\u023d\u02b3\u0242\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            512,\n+                            353810,\n+                            366478,\n+                            375799,\n+                            480554,\n+                            712970,\n+                            771285,\n+                            833077,\n+                            838812,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 38,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.73417080808436e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.4726332051303349e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\u1f7e\u1f80\u1f25\\U0004c3e5\\U000d1ec6\u1fb2\u1f72\u1f45\u1f9b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            7932,\n+                            87727,\n+                            242570,\n+                            322556,\n+                            365512,\n+                            519153,\n+                            612673,\n+                            631023,\n+                            793587,\n+                            884234,\n+                            904751,\n+                            933278,\n+                            948958,\n+                            983208,\n+                            1052946,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 8,\n+                \"max_size\": 108,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x17\\x1fv\\xff2\\xd8!'p\\xb8BH\\x13Q\\xc3\\x9eV\\n\\xfeuh\\x03~\\xda\\xe0(\\xeb)\\xfb+\\x05\\x959\\xe0\\xda\\x17\\xe5*\\x19o\\xafB,8_\\xdc\\x1c\\xd0\\x11\\xc4\\\"\\x82D\\x92X\\xba\\x11\\x91\\xd0\\xf4\\x1a\\xc8\\xc6\\x91\\x9f\\x1e\\xe0w\\x1c\\x83-^1\\x1a\\xc6\\xae\\xae\\xb4\\x08_t3\\x87\\xa6\\xfeKy\\xc0\\xa1^O4\\x1b\\xd3\\x9f{\\xe1\\x81\\xc9\\x8f\\x19\\x86\\xa06\\xdfA\\xdcI\\nI\\x03W\\xe4~Lw\\x85\\x0b\\xc3C\\x0f\\x94r\\xf0H\\x0fK\\x11\\xfc\\xed\\x0f,\\x0fD\\xbe\\xd2\\xfc\\xcaa\\x0b\\xb4\",\n+            constraints={\"min_size\": 25, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9999999999999999},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([46713, 550594])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.6957896714199932e-180,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.168673686667e-240,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xee\\x8cH\\xdc\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"^\\x93\\xb2%\",\n+            constraints={\"min_size\": 0, \"max_size\": 54},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001b740\ud844\udd77\\U0001b6f0\\U0001b6e8\\U0001b764\\U0001b6ab\\U0001e327\\U0001b67b\\U0001b734\\U0001b715\\U0001b70a\\U0001b67d\\U0001b67d\\U000ac40b\\U000f65e6\\U0001b76b\\U0001b6d7\\U0001b6af\\U00093444\\U0001b69f\\U000a1288\\U0001b758\\U0001b6bf\ud877\udeba\\U0001b713\\U0001b6db\\U0001b69a\\U0001b6fc\\U0001b733\\U0001e45f\\U0001b6d5\\U0001b684\\U0001b688\\U0001b6c8\\U0001b707\\U0001b72d\\U0001b6ca\\U0001b6f7\\U0001b768\\U0001b6ab\\U0001b721\\U0001b6e4\\U00075ab7\\U0001b746\\U0006ec5c\\U0001b6fe\\U0001b6e4\\U0001b75a\\U0001b745\\U0001b6cb\\U0001b6b1\\U000eb7ba\\U0001b6e8\\U000eddc9\\U00064041\\U0001b6e6\\U0001b715\\U0001b734\\U0001b769\\U0001b68b\\U0001b716\\U0001b685\\U0001b6f0\\U0001b6ab\\U0001b6bd\\U0001b6c5\\U0001b6ff\\U0001b766\\U0001b733\\U0001b765\\U0001b729\\U0001b67a\\U0001b67a\\U0001b671\\U0001b6af\\U0001b728\\U0001b6c9\\U0001b6af\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            112237,\n+                            228563,\n+                            246258,\n+                            267337,\n+                            370732,\n+                            724758,\n+                            961221,\n+                            1020540,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 34,\n+                \"max_size\": 134,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.125431689515355e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.552213131175089e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7511,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"ii\u00d1\\x9d\\x1e\u00da\u00e97\u00be\u00f4\\n\u00fc\u00b4d5I\u00a3/B\\U0004b305\u00dc\u00fb\u00c0E\\x95\\x9d\\U0004ece7;\u00ec\u00f7\\r\u00a9\ud863\udde9\u00a9v\\x8eAc\u00a3\\U0010af3a\u0100\u00fc\\x1c\ud84e\udfaf\u00db!\u00ae\\U000a65c0C\u00c0\ud847\udd22\\U0001f1bd\\U000d2138\\U00105162J\u00ba\\x8aCZz\u00ba\u00a8a\u00ef\u00fc\\U0010a20a\ud84f\udf89\\U0009d639\ud84f\udde2\\U00101440,\\U000fea87\u00bf\u00bf\u00ab\\U0007ae1f\u1e86\u00a2\\x08\\U00077020\\x8c\\x0e\\x9e\\x0c\\x95\ud869\udd6b\\x12\\x99\\U00094aa1h\\x13\u00c0\u00c9\\x089\ud873\udf71\u00e0m:\\U000fff4f\\x80\u00d7\u00c5\\x94\u00bd\\x97\\x8b\\x81\u00ca\u00b8l\\U000cf1fa\u00d0\u00e4\u00c7d&\ud86c\udd85Ah,\u00ab(h\\U0007eac6itZ\ud806\udddf\\U00074e0b?\ud876\udde1\ud81d\udca6\\U0009cc3b\u00ff%=3\\x82d+\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            33983,\n+                            61240,\n+                            198800,\n+                            298250,\n+                            328988,\n+                            469777,\n+                            536935,\n+                            595385,\n+                            651622,\n+                            663129,\n+                            688738,\n+                            823604,\n+                            870960,\n+                            1030746,\n+                            1108794,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 41,\n+                \"max_size\": 141,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe9\\xc6\\t}\\x01\\x85\\xfe\\xa9Q\\xd52u\\x7f\\xda\\x8d\\xc1\\xbd]\\x9b&\\x8b\\xf2\\xc1\\xb7B\\x86wf\\xe4\\xe5\\xb9T\\x9a8 \\xa9\\xf0y\\x0b\\x0b\\x7fJ\\x03\\xe7JE\\xbb\\x12\\x07\\xc6\",\n+            constraints={\"min_size\": 39, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.2016035067463797e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00c5\u6135Z\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([0, 453541, 917058]),\n+                ),\n+                \"min_size\": 3,\n+                \"max_size\": 103,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x17}G\\x8e\\xd2\\xc4;\\xd8\\xc3\\xe3Z\\x8ds\\xa3\\xb3\\x99\\x10\\x08\\xdbE\\xa0\\x15A\\xa0-j~\\xac\\xec\\xc4\\xef\\x95\\x9d\\x86\\x1bk\\xdc\\xa6\\x85\\xc0E\\xe9\\n\\xd5\\x98d\\x85\\xd1\\x12\\xf5\\xf0\\xda\\xf6\\xa5[?\\xc5\\xf4~[\\x02\\xf22\\xb32\\x7f>9U\\xdc\\xa3\\xba\\xee_\\xea)q2\\x0f[\\xc2\\\\\\x13\\xb2\\x9d\\xde\\x9eh\"\\xda\\xa5',\n+            constraints={\"min_size\": 28, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.1011040963202407e114,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.99999,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe1}\\x888E.\\x9d\\x7fN\\xc9\\x19(\\x8ep\\x9ff\\xb4%\\xe4\\xad\\x89Q'M\\xb4\\x9b\\x05}\\xb7\\xda\\x13\\x18bL\\xc6\\x10\",\n+            constraints={\"min_size\": 25, \"max_size\": 120},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5653403340003477},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x13\\xd3w\\xba\\xdb\\xd0\\xcd\\xe0\\xd6\\xe8m\\x85\\x98\\x97\\xaa\\xdd\",\n+            constraints={\"min_size\": 3, \"max_size\": 103},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.9254807666081496e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.00001,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -3.2354260553703383e-21,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.2077247303186e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001b847\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([112684, 303307, 448038, 747033, 842662, 891521]),\n+                ),\n+                \"min_size\": 1,\n+                \"max_size\": 101,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=84,\n+            constraints={\n+                \"min_value\": -65,\n+                \"max_value\": 121,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    -56: 0.1546880493518903,\n+                    84: 0.13120693289127952,\n+                    116: 0.016724366672103697,\n+                    9: 0.16536171774961422,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=44144,\n+            constraints={\n+                \"min_value\": 17894,\n+                \"max_value\": None,\n+                \"shrink_towards\": 16608,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-41173,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -15321,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.3329714501880799},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1784340140794568e262,\n+            constraints={\n+                \"min_value\": 6.139228183357997e16,\n+                \"max_value\": 1.908577526441353e262,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1784340140794568e262,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5e-324},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0008ca76\u288a\u2929\u28e7\u292f\ucb10\\U0009fcbb\u28ce\u28c9\u2903\u2929\u287f\u28cf\\U000b3f7c\u2906\\U00097171\\U0009cd5e\u28b4\u28d8\u292a\u28f0\\U0009357b\u28dd\u28eb\u2955\u288e\u28f4\\U0007f4ee\u28f0\u28c9\u292e\u2903\u28d8\u2903\u28c9\u28e2\u28fd\\U000705a0\u2925\u2945\u292f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            10339,\n+                            112693,\n+                            210893,\n+                            247169,\n+                            386633,\n+                            781482,\n+                            799223,\n+                            819583,\n+                            1040150,\n+                            1053338,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 23,\n+                \"max_size\": 123,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"j\\xa8\\x1e@\\xe5\\xe0\\xbc\\x7f\\x9c*\\r\\xce\\xdd\\xf0#R\\xe5\\xdbK\\xa7P\\xb1u\\x80\\x92\\x1aa\\x04\\xcb=\\xfc\\xc3\\x04\\xd8\\x99f\\xe0]\\xa3\\xe8\\xae\\x94\\x86\\xe7\\x8cg(h\\x8da\\xd3\\x11\\x8b@z\\xaaaC\\xf3Lzi\\xc1j\\xb6\\x00\",\n+            constraints={\"min_size\": 41, \"max_size\": 141},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0009f18d\ud867\udf93\ud867\udfbf\ud867\udf3a\ud867\udfc8\\U0009f835\ud868\udc2a\ud867\udfb7\ud867\udf64\ud867\udf66\ud867\udf79\ud867\udf68\ud867\udf89\ud867\udfd6\ud868\udc23\ud868\udc09\ud868\udc24\ud867\udfd0\ud867\udf6b\ud867\udfdd\ud867\udfaf\ud867\udf5e\ud868\udc25\ud867\udfe7\ud867\udf7f\ud867\udffb\ud868\udc31\ud867\udfc4\\U0009f23d\ud868\udc1c\ud867\udfa2\ud867\udfd4\ud867\udf5b\ud867\udf72\ud867\udf4a\\U000aa691\ud868\udc01\\U000ac13f\ud867\udfb3\ud867\udf57\ud867\udff9\ud867\udfd9\ud867\udfd5\ud867\udfd9\ud867\udf4d\ud867\udfc8\ud867\udfd5\ud867\udff9\ud867\udff1\ud867\udfd1\ud867\udf8a\ud867\udfe6\ud867\udfd1\ud867\udfb0\ud868\udc0a\ud867\udf8f\ud867\udf56\\U0008fd4c\ud867\udfcb\\U0008fbad\ud867\udf4f\\U00094323\ud867\udfbb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([171832, 178784, 587048, 705295, 875934]),\n+                ),\n+                \"min_size\": 45,\n+                \"max_size\": 145,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.8226752664887433e-163},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000853d0\\U000590d7\\U000819f1\\U0005907c\\U0008006b\\U0005908b\\U0005910f\\U000590ee\\U00059067\\U00059062\\U0005907a\\U00059089\\U000590e6\\U00059028\\U00059092\\U000590cd\\U00059040\\U00085db9\\U0005908b\\U00059085\\U00059085\\U000590ab\\U000590e4\\U0005bc8c\\U0005904d\\U00059012\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([364560, 424805, 513112, 564100, 971251]),\n+                ),\n+                \"min_size\": 22,\n+                \"max_size\": 122,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.7976931348623157e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.4251819172129702e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9c\",\n+            constraints={\"min_size\": 1, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.4323556122529348e256,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.2947967844888423e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00b2\\x94\\U00088e79/\\U000d13d6\u00db\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            29994,\n+                            41421,\n+                            51209,\n+                            76971,\n+                            367580,\n+                            450894,\n+                            868305,\n+                            934848,\n+                            1059855,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 2,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.8727390885733904e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5e-324,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.9825131274412222e-244,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6882967838342254e-227,\n+            constraints={\n+                \"min_value\": -3.7474910760975987e-62,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.358555562493266e-233,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-32707,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -5278,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=15833,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -5272,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xb5\\x04\\x93X\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.279450868371721e308,\n+            constraints={\n+                \"min_value\": -1.1125369292536007e-308,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9.437845532601891e50,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\ud865\\ud90e\\ud8a2\\ud8e8\\ud873\\ud91a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            55393,\n+                            143099,\n+                            160782,\n+                            226405,\n+                            362646,\n+                            391242,\n+                            463107,\n+                            682013,\n+                            750577,\n+                            1104064,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.reports\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u5aec\u5a6a\\U000a56d3\\U000cd3a0\u5aef\u5b5c\u5a66\\U00076af3\u5b27\u5a6c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            23141,\n+                            155345,\n+                            425717,\n+                            493051,\n+                            656170,\n+                            767809,\n+                            819850,\n+                            903285,\n+                            979833,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1_967_189_370,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 97,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.629303854860526e-06,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1052704373891097e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.00937929242225666},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.43643634027451e306,\n+            constraints={\n+                \"min_value\": 4.28729723655478e95,\n+                \"max_value\": 1.3229330977129295e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1056706937183582e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe5\\x1bF\\x994\\xd9>\\xb0\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=14134,\n+            constraints={\n+                \"min_value\": 512,\n+                \"max_value\": None,\n+                \"shrink_towards\": 8_044_300_120_773_439_872,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7982967406082158},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.265487804257111e-11,\n+            constraints={\n+                \"min_value\": -1.2795113806849777e-10,\n+                \"max_value\": 9.681311705398036e-138,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.6958797900057022e-112,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=8.35972359602622e101,\n+            constraints={\n+                \"min_value\": -2.2585580309653332e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.2744330266156634e75,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.23908139641985798},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.0011843011507483e307,\n+            constraints={\n+                \"min_value\": -0.5,\n+                \"max_value\": 5.625882665238655e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9.362069717959777e306,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000fc208\\U0001de27\ud837\udf00\\U0001dec8\\U0001deb4\\U0001de52\ud837\udf02\\U0001de9f\\U000fefd4\\U0001dec1\\U0010d8bd\\U0001de0b\\U0001de14\\U000f9faa\\U0001de3f\\U0001de42\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            122379,\n+                            270155,\n+                            380107,\n+                            464117,\n+                            888467,\n+                            917858,\n+                            1001012,\n+                            1105902,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8517377249964879},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3848517533187804},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.4580464049610654},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud863\ude95\\U00080c81\ud863\ude88\ud863\udf0e\ud863\udeb6\ud863\ude85\ud863\ude4c\ud863\udeb0\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([167471, 533864, 875597]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0009c2cb\\U000e2984\\U0009c31e\\U0009c261\\U0009c2d7\\U0009c2cf\\U0009c2ec\\U0009c32e\\U0009c252\\U000eb3ef\\U0009c33b\\U000d0416\\U0009c2a1\\U000b31b2\\U0009c2da\\U0009c281\\U0009c294\\U0009c26f\\U0009c278\\U0009c2dc\\U0009c274\\U0009c2b8\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([639551, 1114111])),\n+                \"min_size\": 8,\n+                \"max_size\": 108,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005a88d\\U0005a84e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([370753, 429651, 534572, 860428]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x08e\\xdf\\xb0\\xc3\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -10746303834216.275,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.877980342265785e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-39,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1357148288253805e307,\n+            constraints={\n+                \"min_value\": 7.907042898144603e-20,\n+                \"max_value\": 3.6099992129835845e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00016e11\\U00016e1c\\U00016dce\ud81b\ude83\\U00016ec3\ud81b\ude6d\\U00016ebe\ud81b\ude85\\U000433a9\ud820\udefa\ud81b\ude4b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([93646, 327431, 719716]),\n+                ),\n+                \"min_size\": 7,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2_012_153_812,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -9,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.3603384802138399},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=5381,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 31733,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xcd}\\xd09[\\x87\\xc8B\\xd9\\xc1u\\xd1\\x91'z\\x01\\xe6\\xfd]\\xbe\\xd9\\x8f7\\xec\\xdery\\x02\\x15A\\x1a\\xbdV\\xe4\\x7f\",\n+            constraints={\"min_size\": 17, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 1.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"wlm;\\xc5e+3\\xe4\\xab\\xb3<\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -5.966666464947243e-143,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.552346282105688e-90,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.04125664844559e307,\n+            constraints={\n+                \"min_value\": -1.7627124785615514e149,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 7.04125664844559e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc1kA\\xf8\\x15\\n*\\xa7\\xc2\\xec\\xbf\\xe6\\xca\\xd9x\\x9c\\xe4F\\\\\\xc6\\x01\\xacRv\\x0f\\xb7\\xa7&\\x9c\\x05\\xf8\\x9d\\xbfOZ\\r\\x1eq\\xa2\\xbf\\xa9eWz\\xd0\\xce\\xda\\xee\\x91\\xd3\\x8d\\\\\\xb0\\x10%\\x11\\xa7Hu\\xf8\\x8f\\x8d\\x14$J=ex\\xaa\\xf2\\xbd>\\xe09\\xc5\\xc8t\\n+\\xf1F\\x93\\xab\\x93\\xae,\\t\\x12\\xcf\\xcf5K\\xd1?y\\x0f\\x1cD\\x89f\\rE\\x8e\",\n+            constraints={\"min_size\": 49, \"max_size\": 149},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 9.275040277074964e59,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=92544,\n+            constraints={\n+                \"min_value\": 65535,\n+                \"max_value\": None,\n+                \"shrink_towards\": 113661389,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6422003591372175},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.8607183795777597e307,\n+            constraints={\n+                \"min_value\": 3.8974973233086745e-203,\n+                \"max_value\": 3.799728575108436e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.225073858507203e-309,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud801\udca4\ud801\udc74\ud801\udc41\ud801\udc36\ud801\udc8c\ud801\udc22\ud801\udc0a\ud801\udc2e\ud801\udc50\\U000d2db8\\U000e5b14\ud801\udc79\ud801\udc0a\ud801\udc5a\ud801\udc3a\ud801\udc13\\U000103de\ud801\udc8e\ud801\udc48\ud801\udc4c\ud801\udc98\\U000103d7\ud801\udc58\\U000d3356\ud801\udc7f\ud801\udc51\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            66496,\n+                            79951,\n+                            460163,\n+                            462693,\n+                            521593,\n+                            553129,\n+                            813603,\n+                            954659,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 19,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.failures\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'W{\\x85\\xf5\\x98\\x87~\\xa1\\x8d\\xd2\\x162\\xe2\\xbf\\x9d\\x1eG\\xd6\\x05\\x7f\\xf4\\n`2\\xa2?tvs\\xbf\\xe68\\x0e\\r\\xaa\\xdc\\xa0x9\\xebD\\x002Qf9Q\\xd8\\xae\\xf9T\\xf5\\xbc\\x1e\\x0e\\xc3\\x02\\xb6\\x15\\xa5\\x10\\x19\\x91\"\\x11\\xbd\\xf2\\xa5\\xc0\\xf8\\xed\\x0e\\x10\\xb7N\\xfe\\xe3',\n+            constraints={\"min_size\": 26, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.938041977069319e-157,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.66678628804373e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-11,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 97,\n+                \"shrink_towards\": 108,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000e072c\\U0008c34e\ud822\uddae\ud822\ude57\\U000d0025\\U000be2d0\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([100702, 919531])),\n+                \"min_size\": 4,\n+                \"max_size\": 104,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7813,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 1_054_181_297,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=32296,\n+            constraints={\n+                \"min_value\": 9161,\n+                \"max_value\": None,\n+                \"shrink_towards\": -28442,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00072e10\\U000bce63\\U0008b211\\U00072e1f\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([470446, 802179])),\n+                \"min_size\": 1,\n+                \"max_size\": 101,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-20258,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -17609,\n+                \"shrink_towards\": 31823,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=29158,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.0541786549103595e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 1.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 7.158247951242775e-08,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.162696056774184e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.45501247193590044},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-26974,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -13027,\n+                \"shrink_towards\": 72,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6031585645179462e276,\n+            constraints={\n+                \"min_value\": 6846965886613686.0,\n+                \"max_value\": 8.921594135716685e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.859479249386309e37,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=16262,\n+            constraints={\n+                \"min_value\": 16149,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc8\\x8ep\\xdf\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u1d89\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([7466, 989659])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.0253708944098522e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.6632971031118496e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9c\\x96\\x16!\\x93\\x8f\\x91\\x9e\\x05\\x93\\xdf@\\xd8\\xbb\\xba\\x1bxO\\x03\\xec\\xb8\\xd9\\xe1\\xb8:j\\xa16!\\xbb\\xd4\\x04z)@\\xdf\\xfc7G\\xceww\\xae\\xb3&W\\x04\\xd4\\x81\\xa5\\xb9[\\xcfb\\xfdfs\\xffk\\xdc8\\xd1\",\n+            constraints={\"min_size\": 28, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-6.1435803366524456e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1e-323,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-17492,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x1a\u00e2\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            11884,\n+                            60879,\n+                            180528,\n+                            324213,\n+                            325022,\n+                            347585,\n+                            433684,\n+                            567720,\n+                            575379,\n+                            668910,\n+                            746758,\n+                            846233,\n+                            994193,\n+                            1076825,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 23},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9007199254740992.0,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.4889102049908999},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.1125369292536007e-308},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.863626695982431},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xbb\\xd0\\xdf/m\\xc6h\\xa3\\xf8\\xa6I\\x81\\xe3\\xdd\\x19\\xa5N\\x13T\\xff&yy\\xab\\xc7\\x99\\xbe;Q\\x02\\x17\\xb4\\xff|\\x8c\\xc7y&_\\xc0\\xef\\x8ch\",\n+            constraints={\"min_size\": 43, \"max_size\": 143},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=65535,\n+            constraints={\n+                \"min_value\": 10796,\n+                \"max_value\": None,\n+                \"shrink_towards\": 5_327_952_230_772_338_938,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"k\\xf7g\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"&\\xddy,\\x94=\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-4.617932958902987e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            208043,\n+                            325311,\n+                            330436,\n+                            618714,\n+                            753205,\n+                            755658,\n+                            987115,\n+                            1105723,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-75332542244299.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.00001,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe6u\\xb9\\xa9`\\x87\\xd5\\xe8\\xcb\",\n+            constraints={\"min_size\": 1, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.401298464324817e-45},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.41249993152845843},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud804\udf3d\\U000113fe\ud805\udc29\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([70457, 348800, 521401, 1007079]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-24155,\n+            constraints={\n+                \"min_value\": -22_164_952_874_858_619_206_613_305_805_635_779_841,\n+                \"max_value\": None,\n+                \"shrink_towards\": -50,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-nan,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -6.974702131160276e-213,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.4037610595667479e147,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.254530224372434e306,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-6947,\n+            constraints={\n+                \"min_value\": -13248,\n+                \"max_value\": 23133,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    18318: 0.0005023382001627671,\n+                    19356: 0.0006070558217136919,\n+                    11100: 0.00023950425219783326,\n+                    5514: 0.0005540568373541415,\n+                    -6595: 3.282256304416726e-05,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"E+L\\x1cH0\\x92\\xa5\\xf4\\xa1D\\x89\\xcf\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6688103870526115},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0007f0f4\\x19\ud802\ude74f\\x1e\\x19\\U000770a5\u00cc\u00c8\\x1a\\x11\\x191\u00e1\\n\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1, 572998, 611565, 863291]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\r\\xafV\\x16\\xf3\\xd6`\\xbb\\xc3`\\xfeh11!\\xabp\\xbe\\xf6d\\xff$\\x7f\\x91\\x83\\xd9\\xbbJs\\x978\\xcbu\\xbaa-\\xd0\\xdf\\x17\\x00\\xd3:\\xda'[\\xb4\\x0c\\xa9\\xa9#{\\x903\\\\\\xfc0\\xe2IHv\\xea\\xc5\\xf6\\xf2\",\n+            constraints={\"min_size\": 50, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.0610502117954697e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.4211940007285442e308,\n+            constraints={\n+                \"min_value\": -2.581314021232967e-100,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 8.264550776033023e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-9283,\n+            constraints={\n+                \"min_value\": -17359,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 2.0197174825043028e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7976931348623155e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6968768301134899},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x86\\xe0h8S\\xad\\xae\\x98B\\x9e`V^*\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\")\\xfe\\x8d\\xde\\xf7\\xb2\\xa1\\xa9\\xff\\xb2\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x17\\xd8\\x1fF\\xee\\xc4\\x91\\xdaK\\xe2\\xe5%\\xe7:\\xe7UM91\\xd2\\x81\\xed\\x1f\\xec\\x97_\\xb0.:Y8&\\x89Ni\\x9f\\xd0I'\\xa8\\xee\\x95\\x13\\xca\\xb7#,g<\\xfa(+Ti\",\n+            constraints={\"min_size\": 35, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-21683,\n+            constraints={\n+                \"min_value\": -27705,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7583258670730661e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.529491130654736e-301,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7976931348623157e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.39009840079574876},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=174481459,\n+            constraints={\n+                \"min_value\": -115,\n+                \"max_value\": None,\n+                \"shrink_towards\": -20817,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1024,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001175a\\U00011762\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([71513, 783130, 1055339]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd3B\\xe9\\x03{4\\xf8fT>i\\xd8\\xebz}]\\xd4\\xe4\\xef\\xc3\\x1f\\xc0\\x03\\x14^i\\x10\\x86w\\xa5\\x96\\xa1\\xde\\x192#Y\\xdc\\xa2\\x08\\xca\\x83\\x15\\xf9\\x00=\\xcd\\xc3kj1vs5\\x16d\\x04\\xdd\\x1d*\",\n+            constraints={\"min_size\": 36, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -5.8224788689541176e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 20872.79077788998,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.7850821400256744e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.858496087597486e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-150_622_833_655_906_429_373_883_830_219_215_648_861,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -150_622_833_655_906_429_373_883_830_219_215_626_641,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=70,\n+            constraints={\n+                \"min_value\": 66,\n+                \"max_value\": 100,\n+                \"shrink_towards\": 437770391,\n+                \"weights\": {\n+                    71: 0.21280740893109013,\n+                    86: 0.08293388646500491,\n+                    95: 0.204258704603905,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1915897237887021e308,\n+            constraints={\n+                \"min_value\": 6.019331715698406e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1915897237887021e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud52d\ud4c5\ud435\\U00015e02\ud4d8\ud49f\ud499\ud4e4\ud499\ud481\ud4f9\ud4b0\ud517\\U000847eb\ud4f6\ud4d5\\U00083ca7\ud4ac\ud4ab\ud496\ud500\\U000dfd37\ud4d5\ud4f6\\U00088a3a\ud47e\\U0001651f\ud471\\U000acdca\\U00081e37\\U00080913\ud4d2\ud45c\ud500\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            54325,\n+                            127939,\n+                            177983,\n+                            195280,\n+                            360991,\n+                            425358,\n+                            473850,\n+                            580177,\n+                            678776,\n+                            864198,\n+                            881081,\n+                            951750,\n+                            952102,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 33,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5e-324},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.observations\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-800,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -745,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.100826374317079e307,\n+            constraints={\n+                \"min_value\": -7039338307022746.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.100826374317079e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".worker_identity.\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.2272357340701516e307,\n+            constraints={\n+                \"min_value\": 5.337558655248856e16,\n+                \"max_value\": 5.069861860673748e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5e-324,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7664748926005851},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0007c15d\\U000683d6\\U000683be\\U000683ac\\U0006836a\\U00080a9d\\U00068357\\U00089fa0\\U0006d2f6\\U0008890d\\U0006838d\\U00083668\\U000687fd\\U0007287c\\U0006832f\\U00068342\\U000683cd\\U000683df\\U000683f9\\U0006833d\\U00068420\\U0006837d\\U00068384\\U00068415\\U00068362\\U000683bb\\U0006837c\\U000683e3\\U00088357\\U00068323\\U000683ec\\U000824b8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([426785, 565500, 612131]),\n+                ),\n+                \"min_size\": 15,\n+                \"max_size\": 115,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001ead7\\U0001eb48\\U0001ea9c\\U0001eab7\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [125533, 222006, 426237, 591650, 659323, 980911, 1011701],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u646d\u64a4\u63f8\u6422\u64d2\u6439\\U000a8a36\\U000a03a3\u64b2\u6432\u6464\u6412\u6400\u644a\u63ff\\U0008dcf9\u6485\u6435\ud843\udcc0\u6498\u64d8\ud845\udd0a\u64bd\\U00097403\u6439\u6419\u64ca\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([25567, 736229])),\n+                \"min_size\": 26,\n+                \"max_size\": 126,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x95x\\xc4\\xf2\\x13\\xfa,\\xf9\\xec\",\n+            constraints={\"min_size\": 7, \"max_size\": 107},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00094ab6\\U000a939d\\U00094b08\\U00094abf\\U00094af2\\U00094b2d\\U00094b59\\U00094ad2\\U00094b6e\\U000a0454\\U00094b1c\\U00094aae\\U000dd8f6\\U00094b85\\U00094b7f\\U00094b72\\U00094ab8\\U00094af8\\U000c2494\\U000c148b\\U00094b95\\U00094af7\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([608921, 694066, 790193, 807351, 892103, 907583]),\n+                ),\n+                \"min_size\": 2,\n+                \"max_size\": 102,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\u2072\u2070\u205e\u2044\\U00086cef\u20dd\u20d9\u209b\u20bb\\U000871da\u20ec\\U00069993\u2030\u2017\\u20c5\u2058\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            8192,\n+                            15898,\n+                            65535,\n+                            169586,\n+                            200640,\n+                            304739,\n+                            354982,\n+                            508601,\n+                            532481,\n+                            578942,\n+                            1058709,\n+                            1066806,\n+                            1094474,\n+                            1109667,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 4,\n+                \"max_size\": 104,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6139101631118927},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.3935223992838746e250,\n+            constraints={\n+                \"min_value\": 1.1367440636993484e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.120454842831699e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u04d0\u046b\u03fc\u041c\u04de\ud862\udf35\u049f\u04a7\u0497\u0462\u03fa\\U0006335c\u0469\u045c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [1000, 195238, 290048, 352627, 359704, 521411, 727013],\n+                    ),\n+                ),\n+                \"min_size\": 2,\n+                \"max_size\": 102,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x93?}3\",\n+            constraints={\"min_size\": 0, \"max_size\": 48},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.0927916704775392e210,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -7.067165530276269e-298,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5e-324,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=87_811_277_446_014_054_544_293_870_591_889_753_059,\n+            constraints={\n+                \"min_value\": 26527,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"n\\xe9\",\n+            constraints={\"min_size\": 0, \"max_size\": 8},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004f789\\U00035c43\\U00058de1\\U00035c0d\\U00035ca7\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([220138, 383340, 813979]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x92\\xb7\\xef)\\xaf\\x03B1\\x81\\x82\\xf8U\\xda\\xdb\",\n+            constraints={\"min_size\": 9, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xfe\\x04\\xc6\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-30361,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 47,\n+                \"shrink_towards\": -4,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-2.5760904724034362e293,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.714883139763419e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.955689016674798e119,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4797,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -4689,\n+                \"shrink_towards\": 14317,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=544,\n+            constraints={\n+                \"min_value\": -110,\n+                \"max_value\": 1612,\n+                \"shrink_towards\": 0,\n+                \"weights\": {544: 0.8723531375091969},\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.3988646136530924e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.65270020022289e307,\n+            constraints={\n+                \"min_value\": -1.175494351e-38,\n+                \"max_value\": 1.2823353988782984e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9.65270020022289e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 7.83025999256095e-154,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.3560951283700875e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-0.0,\n+            constraints={\n+                \"min_value\": -2.0280025646515444e-129,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.3183452828782989e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xff\\xc8\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8107262649750813},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x19\\x10\\x88\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=30448,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 65535,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.402823466e38,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.36866482841098e-75,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.6031069199598056e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf5lE]MoJ\\xb9-4\\xc8\\xb7z#(_\\x94u\\x07\\xbc\\x1f9\\xbc\\xa0(wb\\xff\\xcc\\x1b\\xa3\\x83\\xee\\xa4Z\\x98j\\x9f\\xe0\\xa0\\xea\\xc5\\xaaC\\x9b\\xf6c\\x8a\\x9a\\xc7\",\n+            constraints={\"min_size\": 27, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-14690,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -14,\n+                \"shrink_towards\": -24290,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-37,\n+            constraints={\n+                \"min_value\": -24743,\n+                \"max_value\": None,\n+                \"shrink_towards\": -1431,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000c12c3\\U000c1295\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([790994, 1020863])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            119874,\n+                            310798,\n+                            313690,\n+                            486801,\n+                            872481,\n+                            902306,\n+                            1057060,\n+                            1075586,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-3095,\n+            constraints={\n+                \"min_value\": -25615,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([54130, 110972])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"!^'\\xe5\\x1a=\\xc0\\xf7\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.602585236305782e307,\n+            constraints={\n+                \"min_value\": 6.2441638104936936e16,\n+                \"max_value\": 1.6877677774529045e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.116417353485976e306,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"c\\xca\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.1754943508222875e-38,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9.823770383912771e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u02ff\u02db\u0298\u02f9\u0219\u024f\u0259\u02ff\u023a\u0201\\U00051756\u02a0\u02de\u021c\u02d9\u0284\u0282\u0225\u02e9\u02f7\u0273\u02a5\u02b0\u026b\u02e2\\U0007a0f8\u02ef\ud866\ude23\u0274\u0265\u0282\u0279\u02cd\u02f9\u0298\\U0002ef2e\u0293\u7642\u02a2\u0267\u0267\u02f1\u0263\\U000522de\u0249\u023c\u02c4\u027f\u02b1\\U000ceb90\u0267\u02d8\u02cc\u027d\u02d3\u0263\u0212\u0211\u02f2\u0223\u0289\u0212\u0297\u0228\\U000cc6f1\u0285\u02b7\u0212\u022b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([512, 341566, 452074, 877981, 902469]),\n+                ),\n+                \"min_size\": 30,\n+                \"max_size\": 130,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"hypofuzz.test_keys\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=694692605,\n+            constraints={\n+                \"min_value\": -23132,\n+                \"max_value\": None,\n+                \"shrink_towards\": 14380,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc3'\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1_971_405_142,\n+            constraints={\n+                \"min_value\": 1_971_398_224,\n+                \"max_value\": 1_971_430_450,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    1_971_405_142: 0.37938745720615424,\n+                    1_971_414_847: 0.504333138747738,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.541502453367707},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1292,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 30343,\n+                \"shrink_towards\": 80,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf7\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": 7.394352428169296e62,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.750794375645545e-100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa4\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.18511399770653772},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.4751975768742502e111,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 7486308212885222.0,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xfbQ&\\x03\\xbc\\xe3\"\\xef\\xe3\\x90\\x06\\xd6s\\xd2t|\\xbb\\xbb\\xfe\\x1ea',\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7489411825577929},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3286040832710316},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -2.0257829463536486e196,\n+                \"max_value\": 3.445003649634047e-165,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 8.486392484996464e165,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([300, 1024, 384336, 475628, 487586, 1114111]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud856\ude93\ud856\uddbc\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([154015, 245539, 453281, 758975]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4348,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 7765,\n+                \"shrink_towards\": 7152,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3513188357016879},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=31242,\n+            constraints={\n+                \"min_value\": 25321,\n+                \"max_value\": None,\n+                \"shrink_towards\": 3,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=42192,\n+            constraints={\n+                \"min_value\": 28635,\n+                \"max_value\": 65535,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"9\\xafy(,\\xab\\xc1 \\x0fS5\\xd0li\\x82\\xfc\\x9fo\\x94\\xfd\",\n+            constraints={\"min_size\": 14, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00067b7b\u184a\u18b2\u1826\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            6134,\n+                            92988,\n+                            120093,\n+                            314312,\n+                            342375,\n+                            430290,\n+                            479766,\n+                            540087,\n+                            560784,\n+                            648164,\n+                            748395,\n+                            757677,\n+                            769663,\n+                            845828,\n+                            1049607,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6726501931851622},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.541104095317964e307,\n+            constraints={\n+                \"min_value\": 4.8029166352884465e-27,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.487856103198314e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.43863534283864813},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4996,\n+            constraints={\n+                \"min_value\": -15016,\n+                \"max_value\": -102,\n+                \"shrink_towards\": -25816,\n+                \"weights\": {\n+                    -12871: 0.023055769011540692,\n+                    -7264: 0.27731022640128095,\n+                    -7147: 0.19963400458717834,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00ae\\x88\\U000751df\u00b3\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            143165,\n+                            143229,\n+                            224181,\n+                            453392,\n+                            537209,\n+                            622272,\n+                            661319,\n+                            901465,\n+                            1088309,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 2,\n+                \"max_size\": 89,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9077889292987271},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7512383329934293},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6816737381510475},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u829a\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([33197, 174692])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=88,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 31670,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.43411967083843395},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.86632409537864e102,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.583890109055141e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.986833318406035e64,\n+            constraints={\n+                \"min_value\": -5.986833318406035e64,\n+                \"max_value\": 1.160733771144669e-68,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.986833318406035e64,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-10548,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -10487,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud864\ude45\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([168292, 188375, 608865, 933209]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.9955743908475347e307,\n+            constraints={\n+                \"min_value\": 1.0773419699705132e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.9955743908475347e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0009c6c3\u00d4M\\U000c87f0\\x13/\\U000ac54a\u00eaG?\\U0005a8c3\\x00\\U0003494b\\U0005e784-\u00d4\u00b8q\u00d0\\x14\u00b0\\U0005f8ea\\r\u00ba\\x98\\U000ca324Sko7\u00da\\U0009b8a7\\x9b\\U0009ec814E\\U000aa975\u00e0\\x7f.\u00fc\\x1da\\x9fH\\x01t+;\\U00039d94\\x10\u00f7\u00c4B`w\\x9a\\U00035b1d\\U000d633f\u00d5\u00ab\u00c7\\x90\\x07\u00c6\u00da\\n\\x92\u00c3\\x14\u00d8\\U000aa0f4\u00bf\u00d4\u00ec\u00af7nyz\u00dc\u00cf\u00f6\\x7f6\\x7f\\U000a710fV2%\\U00034cf5[\\x11\\U000a842f}\\\\\u00f8\\U0009ab18j\\U0003a5c6\\x87#o\\x96v\\x95[\\x9d\\U000a0c35-\u00f5Y\\U0009eb94\\x8f@|:\\x95\u00da\\x06\\U000d5049F\\U000abf6f\u00aa\\U000c8998\u00ff\\x9beR\\U000341c6\u00ce&\u00dc\u00ef\\x01.w\\U0009dc27\\x00gu\u00d7\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            404,\n+                            211647,\n+                            243366,\n+                            355309,\n+                            395356,\n+                            631371,\n+                            717881,\n+                            815041,\n+                            892587,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 47,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u010d\u0139\ud821\ude7a\u00bc\u0142\u0142\u00f1\ud823\udc63\u016c\u00b1\u013c\u016d\\U000190c1\u016f\u00c7\u0173\u017c\ud848\udefe\u00cf\u00cd\u018f\u00d1\u012a\\U0001a043\u00dd\u062e\u0183\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([145, 8192, 66155, 169288, 347445]),\n+                ),\n+                \"min_size\": 26,\n+                \"max_size\": 126,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.051011985015865e307,\n+            constraints={\n+                \"min_value\": -4.269042049345478e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.051011985015865e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.2336507463148781},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=34495,\n+            constraints={\n+                \"min_value\": 512,\n+                \"max_value\": 1_026_636_567,\n+                \"shrink_towards\": 79,\n+                \"weights\": {\n+                    39732: 0.06939012047808978,\n+                    359791975: 0.043620386119320675,\n+                    8430471: 0.07859920190703668,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.26421388112556593},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8_891_714_524_551_886_040,\n+            constraints={\n+                \"min_value\": -20809,\n+                \"max_value\": None,\n+                \"shrink_towards\": 16233,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.0316509824505799e-190,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.579034745483059e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003e197\\U0003e246\\U0003e1d2\\U0003e277\\U0003e222\\U000fbc7b\\U0003e218\\U000655c4\\U00078451\\U0003e1fb\\U0003e245\\U0003e190\\U0010823b\\U000c31a1\\U000edf18\\U0003e216\\U0003e1df\\U0003e267\\U000429ae\\U0003e1ce\\U0003e237\\U0003e226\\U0003e260\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            254343,\n+                            436414,\n+                            476452,\n+                            576684,\n+                            767018,\n+                            813112,\n+                            899013,\n+                            1094199,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 20,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.016425815777347e-171,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 9.559378672536402e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=67,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -2.8984345571845696e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7976931348623157e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.0999999999999999,\n+            constraints={\n+                \"min_value\": -1.1,\n+                \"max_value\": 1.559022332218942e-116,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.0999999999999999,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-22,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 5765,\n+                \"shrink_towards\": -14363,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.3025243095888437e307,\n+            constraints={\n+                \"min_value\": 6.103515625e-05,\n+                \"max_value\": 2.3544648678471593e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 7.244999396803394e306,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'9?5\\x86\"\\xf4\\x80\\xe0\\xba\\xb1\\x1c\\xa8\\xf1\\t;,iZ\\xf69\\xf9\\x97\\xd7\\xe4\\xd3\\xa4\\x12\\xd4\\xb0W.\\x0e\\xa5\\xc2\\xff_4y\\x88\\ro\\xd4I\\xcf\\xce/\\xba \\xa8]\\xa6\\x9d \\xdf\\xe4\\xd2\\xc5\\xccD\\xe4\\x85\\xe1w\\xcc',\n+            constraints={\"min_size\": 47, \"max_size\": 147},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.6390547965196486e-59},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.7080315007284215e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.3085232760982135e308,\n+            constraints={\n+                \"min_value\": 4.6582020318506934e147,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.0184041638207764e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5054586505134223},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 1.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.4545809271739719},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-33882,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -23002,\n+                \"shrink_towards\": -12966,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u5072\u4fe2\u5079\u5081\u4fcc\\U0004beea\u50a5\\U00054b85\ud81e\ude89\u504f\u5068\u4fce\\U0002faca\u4fe1\u504c\u502f\u5023\u4fe8\u505a\\U00011d4d\ucb19\u5017\\U0003a717\u5071\u4ffe\u502c\u5068\ud888\udebf\u4fb1\u501e\u5078\\U0001f2d5\u50a7\u5068\u4fbc\u50aa\u508f\u4fbc\u5093\u4fe6\u5095\u5080\u5088\u4fc2\\U00042865\u4fff\u4fba\u503d\u4fd7\u5037\u4feb\u50ac\u50a1\u5026\u5099\u5037\u505e\u5034\\U0004f6b8\u5059\u502a\\U0003f936\u5029\\U00039bc8\u4fca\\U00042069\u4fc2\u508b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([20400, 135534, 164024, 369730]),\n+                ),\n+                \"min_size\": 49,\n+                \"max_size\": 149,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 2.2250738585e-313,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 10000000.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.903939517344644e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1000,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 22661,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-30363,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8580655409170945},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=26940,\n+            constraints={\n+                \"min_value\": 26883,\n+                \"max_value\": 27007,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    26958: 0.10626467364075533,\n+                    26972: 0.005537633833233954,\n+                    26961: 0.03749772244372021,\n+                    26905: 0.10283574657415519,\n+                    26938: 0.09527896470797913,\n+                    26993: 0.06959487751976474,\n+                    26940: 0.028256002610996755,\n+                    26907: 0.0063716638218298816,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -7.119702668748342e16,\n+                \"max_value\": 3.4397085511631194e144,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.171294491759337e143,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000f3946\ufbb8\ud821\udf3e\ufb1d\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            64205,\n+                            217842,\n+                            218515,\n+                            275971,\n+                            302124,\n+                            311989,\n+                            418916,\n+                            479815,\n+                            570725,\n+                            635741,\n+                            643472,\n+                            703631,\n+                            727734,\n+                            744688,\n+                            778288,\n+                            781652,\n+                            847462,\n+                            1033932,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"0\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=724,\n+            constraints={\n+                \"min_value\": -17,\n+                \"max_value\": 1069,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3333333333333333},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.38562305507861827},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-147_537_761_692_753_244_946_177_836_208_864_056_560,\n+            constraints={\n+                \"min_value\": -147_537_761_692_753_244_959_758_108_706_170_070_496,\n+                \"max_value\": 1000,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    -90_650_228_720_200_913_910_005_051_130_688_562_258: 0.1453715654684809,\n+                    -147_537_761_692_753_244_959_758_108_706_170_053_231: 0.198273954227994,\n+                    -147_537_761_692_753_244_959_758_108_706_170_070_393: 0.017208972952872364,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".\",\n+            constraints={\"min_size\": 0, \"max_size\": 5},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.8710084307086558e307,\n+            constraints={\n+                \"min_value\": 2.5620130914028944e68,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.2513391790684142e-194,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0185837818206361e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"6\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf7Aw\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.0328996175985559e308,\n+            constraints={\n+                \"min_value\": -1.7976931348623157e308,\n+                \"max_value\": -1.5,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.3645277433575085e-40,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.4383943728698248e-142,\n+            constraints={\n+                \"min_value\": -1.4383943728698248e-142,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.4383943728698248e-142,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00066648\\U000c9416\\U000c8069\\U000c85f3\\U000cb790\\U000bb17b\\U000bacd4\\U000a10b3\\U000666e2\\U000666b3\\U0006669e\\U00066677\\U00066682\\U000666f0\\U000abf69\\U0006664f\\U000666ab\\U000666ce\\U000666d7\\U0006668f\\U000666e7\\U00066642\\U0006664a\\U00066623\\U00066716\\U00066620\\U00066681\\U000666d7\\U00066667\\U00066623\\U00066621\\U000666ea\\U0006661d\\U00067a4f\\U000666cf\\U000666bc\\U0006661b\\U000666f2\\U000cf9b6\\U000d9292\\U0006662f\\U00066685\\U00066696\\U0006662c\\U00066662\\U00066622\\U000666a5\\U00066677\\U000666c4\\U00066711\\U00066637\\U00066642\\U000ba490\\U0006664e\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([419353, 906158])),\n+                \"min_size\": 45,\n+                \"max_size\": 145,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".worker_identity.\",\n+            constraints={\"min_size\": 10, \"max_size\": 110},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"H3e\\xe7\\x98\\xce\\x10\\xc8|W\\xf8\\x1e\\x02\\xa3~8\\x15\\x8d\\x05T\\xd4\\xa1W\\xaao\\xad\\xa7\\xe4\\xc8\\x05f\\x11W\\x9f$e\\xacFM\\xd9\\xbcg\\xea\",\n+            constraints={\"min_size\": 30, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.46128191055556644},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-4.287650614829655e-284,\n+            constraints={\n+                \"min_value\": -2.6336546104200812e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.225073858507e-311,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud883\udff3\u4a40\u4a6f\u4a1d\u4a14\u4acd\u4ac4\u4a77\\U000349a9\u4a18\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [18952, 25516, 138195, 447958, 642149, 664557, 869685],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.225073858507e-311},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xf1\\x0b\\xd8+\\xa3T@`\\xac\\xe5\\xaaR]^\\xb8\\xc6\\x8d%+\\x16\\x15\\x1b\\x97\\x84\\xa7\\xcb\\x88\\xed\\xc2\\xe2\\x16\\x87\\xe7\\xae\\x89\\xd9?\\x9c\"\\\\\\xc7,z\\xb0J\\xb3\\x8d\\xfa\\xfa',\n+            constraints={\"min_size\": 47, \"max_size\": 147},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-414,\n+            constraints={\n+                \"min_value\": -1348,\n+                \"max_value\": -108,\n+                \"shrink_towards\": 9044,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.318589538368472e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7002976836619744e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x99\\x8b\\xb8L\\x02\\xc0\\xa5\\x1e\\xbc!{\\xf7{\\xf4>Fh\\xe1\\x95l\\xdd\\xee\\x92\\x12s\\x10P\\xf4\\xc2\\x84R\\x7f\\x0e\\xf7\\x8e\\xcf\\x84\\x1a\\xd4gp+\\xaf\\x8a]%\\x14\\x9fg\\xff_\\n\\xa1\\xaf\\xb3\\xbe\\xa2\\xb1I{\\xf5\\xd0\\tb\\t\\r\\xfe\\x0b\\tB\\x04\\xf0y\\xd9k\\xf5\\xaaJ\\x9d\\xe05[\\x1dpJ\\xc7\\xd6I\\xcc\\x92\"\\xc7\\xa4\\x91)\\xa4m\\x01,\\xb7]d\\xde\\xd7r\\x1c\\xd5\\x9fo\\x06b.\\xb5\\xec/\\x04^J\\x1a\\xf4!\\xe8\\xc3\\x869\\xc2e\\xdf^\\xda\\x19H\\xb7\\x0e/\\xdf\\x0cC\\x90\\x84\\xc4\\xff\\xb6\\x12\\x14\\xc1\\x9a\\xe6\\x80}\\xf4\\xcdM6\\x01\\x92qI\\x82\\xa8\\xa3\\xfc\\x88\\xa6!\\x10\\xc6y\\xa4\\xcf\\xac\\xa0V\\x11u\\xe4*\\xd0`%\\xcf',\n+            constraints={\"min_size\": 46, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-29043,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 12,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00062846\\U000627c1\\U000627ea\\U000627e4\\U000627ce\\U0006284e\\U000627d1\\U000627fb\\U00062888\\U0007579f\\U0006283f\\U00062884\\U000627b2\\U00088e38\\U000627c7\\U000627bb\\U00062822\\U000627fa\\U000627f2\\U000627e0\\U000627be\\U000627e6\\U000627da\\U000627bb\\U00062814\\U00062844\\U00062793\\U0006279f\\U000627b1\\U0008a181\\U00062797\\U000627d7\\U000627d7\\U00062845\\U000627b9\\U00062889\\U0006281c\\U000780e3\\U000627d9\\U0007a987\\U00085854\\U00082fbf\\U00062794\\U000627ba\\U000627a5\\U0007ea0b\\U00081c67\\U000627f8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([403346, 573162, 1114111]),\n+                ),\n+                \"min_size\": 31,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6349370630898253},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=15129,\n+            constraints={\n+                \"min_value\": 15121,\n+                \"max_value\": 15140,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u2012\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [8192, 354405, 505854, 538276, 822464, 911650, 1111960],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd6B\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=534_978_477_643_090_755,\n+            constraints={\n+                \"min_value\": 534_978_477_643_083_230,\n+                \"max_value\": None,\n+                \"shrink_towards\": -33,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\ufdec\\U00013a98\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([64871, 82540])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud81c\udc8c\ud81c\udcb8\ud81c\udc91\ud81c\udc08\ud81c\udc05\ud81c\udc18\ud81c\udc97\ud81b\udff1\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([94146, 122261, 189360, 276429, 496193]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x95[\\x85\\U000f76ed\\U00083bf0(\\U000929e7\\x1b\u00a6\u00fb\\U00051d98{\\x9b\\U0006acf0\u00e1\\x94\\x81\\U00060dea\\U000a3515\\x98\\U000e50f6\ud806\ude1a\u00ac\u00ce\u00d3d\u00eb\\U0008d807\u00f7\u00d4\u00b4\u00f7|\\U0006d751\\x01\\x13\\x8e\\U00076801\u00c8\\U000a3a77\u00aa\\x13\u00e0\\x93\\U000a415e\\x82^\\x93\\x8f\u00c9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            1024,\n+                            8192,\n+                            79340,\n+                            261812,\n+                            271289,\n+                            321428,\n+                            416505,\n+                            420517,\n+                            488976,\n+                            537332,\n+                            539887,\n+                            554237,\n+                            680394,\n+                            852956,\n+                            864722,\n+                            901022,\n+                            969779,\n+                            988918,\n+                            1020269,\n+                            1045738,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 25,\n+                \"max_size\": 125,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1e\\x14\\xf53\\x83\\xcc\\xa7f\\xdf!\\x19\\xf9\\xe2u\\xb1L\\xf7\\xb4\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 2.225073858507203e-309,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.6591907298883629e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.19271335754118551},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=49315585,\n+            constraints={\n+                \"min_value\": 26166,\n+                \"max_value\": 331344266,\n+                \"shrink_towards\": -32605,\n+                \"weights\": {\n+                    26360: 0.005090116215986435,\n+                    37051887: 0.0014257209123375648,\n+                    61885: 0.00541279449584665,\n+                    67078981: 0.0006065576032948316,\n+                    118951265: 0.004041837429175162,\n+                    60335: 0.003878638171658975,\n+                    32265: 0.0026945582861167745,\n+                    27566: 0.004120093276996708,\n+                    49121: 0.0003556943351552918,\n+                    26406: 0.001886229865348245,\n+                    29212: 0.0042470504076016794,\n+                    74258: 0.005435489555895754,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=10938,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-99,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 121,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=6,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 22,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"X\\xf7\\x00}X\\x87\\xd2\\xe5l\\x92\\x94*)\\x1fmT^\\xa1\\x18\\x99\\x83\\x0cK\\xa3\\xf5\\x93\\x10\\x16\\xcfM\\xc0\\xdf\\xd2\\x0cq\\xe62\\xde\\xe0\\xa7\\xd2\\xcat^\\xa8&\\xfa\\xd2\",\n+            constraints={\"min_size\": 17, \"max_size\": 117},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-17167,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 1_767_731_280,\n+                \"shrink_towards\": 18870,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.026103888545903516},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-33,\n+            constraints={\n+                \"min_value\": -40,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005348f\\U0005348a\\U000534cd\\U000533ee\\U00053455\\U00053487\\U0005343f\\U0009c078\\U00053470\\U0005343a\\U00053435\\U0005344f\\U00053489\\U000533f2\\U000534cf\\U000533f1\\U000534b3\\U000534b7\\U0005346c\\U00058b5e\\U000534b1\\U000534d6\\U00053473\\U000a21ae\\U000ada58\\U00053426\\U00053469\\U00053404\\U00053424\\U0005346e\\U000534c7\\U000534be\\U00053418\\U000606fe\\U00096e29\\U0005340d\\U0005347b\\U000ac6f5\\U0005345f\\U000534b0\\U000534a7\\U000534cb\\U00053409\\U00053466\\U00053434\\U000534e4\\U0005347d\\U00053493\\U000534c0\\U000534bf\\U0007c9d2\\U0005341b\\U0005344e\\U0005343a\\U000534d9\\U0005347b\\U0005348f\\U000534b2\\U0005341c\\U0005f5b7\\U0005e22c\\U00053425\\U00053414\\U00053429\\U000534d4\\U000534da\\U000534bc\\U000534c0\\U00053498\\U00053463\\U00053403\\U000534e4\\U0005344e\\U00053421\\U00053458\\U0005340a\\U000534e1\\U000679eb\\U000534e1\\U00053438\\U00053462\\U000534b7\\U0005345d\\U0005345e\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([340967, 719744])),\n+                \"min_size\": 43,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\r'\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1, 478639, 870642, 1081050, 1104160]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1_847_995_355,\n+            constraints={\n+                \"min_value\": 26130,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.193159931921632},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.225073858507e-311},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x97\\x92\u00b5\\x07\u00ee\\x9c\\x8f\\U000d9727\\U000ffd4e\ud874\udcf4\ud874\udd6cL\u00e8\u00ea\u00e0ZV)\u00f1F\\x1c\\x82\u0100\u00e8\\x8a\u00c0e\u00fe\u00a9@q\u00f6\u00c1r\u00f2\\x97\\x99\u00f9\\x8aq\\U000f0e0a8\\U00038a12H\u00ce\u00c8\\U0005f7e5\u00e9\\U000dce37u\u00e4\ud84c\udc7a\u00cb\ud83d\ude70\\x7f+\u00a9\\U000d9dd4\u00b5\\U000e2ecc\u00e3\u00de\\x9d`\\x9f{~\u00af\\U0004a43b;\u00dc3\\U000d097c\u00a5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            48575,\n+                            80747,\n+                            494340,\n+                            527063,\n+                            539055,\n+                            565378,\n+                            589948,\n+                            617279,\n+                            630569,\n+                            750378,\n+                            874773,\n+                            886405,\n+                            1084568,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 45,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1117860907861791e114,\n+            constraints={\n+                \"min_value\": 1.1117860907861791e114,\n+                \"max_value\": 1.1117860907861791e114,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.3184208717212556e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.29428146152119133},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"x`\\x17\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00ee\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [1, 225919, 362320, 620067, 625063, 630573, 697801, 762168],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=47,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 6597,\n+                \"shrink_towards\": -22345,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-30934,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -30847,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003afcb\\U0003b04f\\U0003d485\\U0003b03f\\U0003b024\\U0003aff4\\U0003f2df\\U0003b00c\\U0003b00f\\U00040c5d\\U0003afc0\\U0003afb8\\U0003b063\\U0003b09e\\U0003afd4\\U0003b068\\U0003b06b\\U0003afb6\\U0003afd2\\U0003b07f\\U00041b62\\U0003b012\\U0003afdd\\U0003b051\\U0003affa\\U0003b074\\U0003b06a\\U0003afd2\\U0003ce40\\U0003be34\\U0003b051\\U0003b004\\U0003b019\\U0003afe2\\U0003b061\\U0003afe9\\U0003afa5\\U0003afa0\\U0003b03e\\U0003c9c5\\U0003b065\\U0003b033\\U0003afa7\\U00041fb6\\U0003b031\\U0003b087\\U0003afd4\\U0003afa5\\U0003afde\\U0003afac\\U0003afe6\\U0003b098\\U0003afef\\U0003afd6\\U0003b060\\U0003b046\\U00040eaa\\U0003afad\\U0003b037\\U0003afa8\\U0003b06f\\U0003b055\\U0003b046\\U0003b085\\U0003b652\\U0003ccc4\\U0003afc0\\U0003afb4\\U0003afa5\\U0003afcb\\U0003afc7\\U00042eaf\\U0003b010\\U0003afa6\\U0003b02e\\U0003d191\\U0003afbc\\U0003b02f\\U0003afa7\\U0003b029\\U0003b039\\U0003b094\\U0003b00b\\U0003b066\\U0003afd4\\U0003afbb\\U0003e086\\U0003b047\\U0003b07a\\U000400e2\\U0003afad\\U0003afe9\\U00041802\\U0003b025\\U0003aff0\\U0003b035\\U00041962\\U0003b049\\U0003d350\\U000411ac\\U000430e4\\U0003affb\\U0003b051\\U0003b08d\\U0003c90a\\U0003afd6\\U0003b08a\\U0003afb0\\U0003afc9\\U0003b025\\U0003b020\\U0003b00f\\U0003b51c\\U0003aff1\\U0003b095\\U0003e6e2\\U0003b02a\\U0003b039\\U0003b049\\U0003afc6\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([241568, 275566, 396417]),\n+                ),\n+                \"min_size\": 45,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7_992_933_906_695_396_170,\n+            constraints={\n+                \"min_value\": -7_992_933_906_695_458_710,\n+                \"max_value\": 2_129_679_838,\n+                \"shrink_towards\": 14489,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-18478,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 31421,\n+                \"shrink_towards\": -32154,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -3341940448416765.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.00001,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u02e0\u02d4\u0232\u02d6\u029a\u0220\u024e\u02c7\u02c3\u02e9\u02f4\u02a4\u028e\u02dc\u023e\u0238\u0271\u02fd\u02d3\u7979\u02fa\u0234\u02a2\u02f4\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([512, 38256, 594886, 688559, 890774]),\n+                ),\n+                \"min_size\": 14,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.355146116597833e270,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 4.500388084802104e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.470378532251904e-309,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9999999999999999},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003b0cf\\U0003b0b1\\U0003b085\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([241726, 625341])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x9f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [0, 124193, 577013, 654103, 731453, 1033079, 1075792],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.observations\",\n+            constraints={\"min_size\": 5, \"max_size\": 105},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0009305b\\U0009834b\\U000f804b\\U00087022\\U000d204b\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([552948, 1056186])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.0144342889355385e213,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.005462018080426e-137,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u36a0\u3725\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([13877, 178124, 292727, 619253, 738830]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-8624,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -20995,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-21131,\n+            constraints={\n+                \"min_value\": -28787,\n+                \"max_value\": 111,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    -16643: 0.17013533163159722,\n+                    -2252: 0.332812786932014,\n+                    -12039: 0.1134235544210648,\n+                    -2280: 0.017013533163159723,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u01aa\u021c\u01f5\u01d7\u016c\ubbd2\u01b4\\U00081e00\u0206\u0248\u01cd\u0256\u0268\u01fa\u01d5\u01c9\u01ce\u01b6\\U0004d396\u0208\u01fa\u0242\\U0007b33b\u01ca\u023e\u0262\u017e\u0254\u01ce\u86d6\u01b5\u022b\u01f8\u021c\u018c\\U000421a4\u0177\u01f6\u0217\u0202\\U00054a0b\ud86e\udfef\u0187\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([364, 616522, 832603]),\n+                ),\n+                \"min_size\": 37,\n+                \"max_size\": 137,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005a21b\\U0005a258\\U0005a250\\U0005a299\\U0005a285\\U0005a23f\\U0006f150\\U0005a1ef\\U0005a264\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([369051, 504098])),\n+                \"min_size\": 8,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0006bc31\\U0006bc80\\U0006bcaf\\U0006bcb4\\U0006c3b2\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([441303, 444004])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 1_414_605_324_542_282_485_793_648_358_305_727_104,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud83a\udcb7\ud81b\ude5b\\U00016eea\\U000539b1\\U00032eb2\ud81b\ude93\ud81b\udf01\\U00016ea2\ud81b\ude84\ud81b\ude83\ud81b\ude8e\\U00016eca\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([93771, 471212, 757518]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"]\\xf4\\x81'\\xf16\\x9c\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x10\\x00\\xcd\\xa3\\x8f\\xabq\\xc6\\xfd\\xaa\\xf3\\xd7S\\xd8\\xff\\x1b\\x1d_u%\\xe6\\x16^\\x9a2PF\\xd1\\xbcX\\x00\\xa9'\\xf6 \\x8b\\xb9f\\xba{\\x10g\\xc3`?\\xe1\\xd77\\xe8\\xdf\\xe5*\\xdcR\\xee\\xb2E\\x1a\\xae9\\xae\\x1f\\x9c\\x9b\\xaf\\xca\\x8a)\\xbe\\xf8\\x8a\\x82if\\xf9\\x93\\x81b\\x9a\\xfej\\xf2\\xb6+\\xa5\\x12\\\"\\x0c\\xdb$\\xbd\\xbe\\xb2\\xb4\\xc6!]\\xfe\\xa6\\xc4\\xe2\\x12V{!l\\x08au\\x07\\xff\\x82\\x7f\\xc2\",\n+            constraints={\"min_size\": 38, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.488860435521068e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5692757233079527},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8fc\\xfbi\\x1e\\xff\\x97\\xd3\\xeav\\xec\\xad,`\\xfeOR/,,#\\xc3\\xeb\\xeb\\xdd:\",\n+            constraints={\"min_size\": 26, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=3_410_290_067_031_427_498,\n+            constraints={\n+                \"min_value\": 3_410_290_067_031_409_741,\n+                \"max_value\": 3_410_290_067_031_435_138,\n+                \"shrink_towards\": 20899,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud854\udc64\ud854\udc39\ud853\udfc7\ud853\udfde\\U0007e424\\U0006326e\ud854\udc3c\\U000370f8\ud853\udf79\ud853\udfd5\ud854\udc6a\ud853\udfe6\ud853\udfba\ud853\udf85\\U000732d9\ud853\udfc3\ud854\udc1b\ud854\udc41\ud854\udc5f\ud861\udcd2\ud854\udc50\ud854\udc65\ud853\udfe5\ud854\udc71\ud854\udc57\ud853\udf7c\ud854\udc3f\ud854\udc27\\U00051ae9\ud854\udc06\ud853\udf75\\U0006e9d5\ud854\udc4f\ud853\udfaf\ud853\udf81\ud853\udfbc\ud853\udfc4\ud854\udc6c\ud854\udc26\ud854\udc5e\ud854\udc6f\ud853\udf7f\ud854\udc43\ud854\udc30\ud853\udfaa\ud854\udc2c\ud853\udfb4\ud853\udf81\ud853\udff1\ud854\udc14\\U0004487e\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([151413, 519490])),\n+                \"min_size\": 25,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"r6\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5e-324},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x80'\\xb5\\xcb\\x9bb\\x8d\\xa3~\\xbf\\x7f\\x08\\xc6\\xb3\\xe2C\\x05\\xd7\\xb9\\x87B~\\xca:DLjG\\xa3Y\\xf53\\x86\\xeb\\x03\\xe3\\x98\\xa4?\\xf1\\xa0*(\\xb8\\xc2\\xb556B\\x93^&60Z \\xbe\\xa6\\xfbU6\\xd9\\x19`\\x1bSc\\xb0eI(W~{3r&j\\xd1\\xa7;\\x16\\xde\",\n+            constraints={\"min_size\": 50, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud875\udd0e\\U0003821f\u01e6\u01e7\u0140\u0175\u0200\u021b\u019b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([300, 478187, 995416]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001a4e9\\U0001a4f6\\U0001a4b5\\U0001a529\\U000d29cb\\U0001a4e3\\U0001a50c\\U00052b31\\U0001a490\ud840\ude1e\\U0001a4ec\\U0001a4e0\\U0001a459\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            107598,\n+                            139727,\n+                            152088,\n+                            306361,\n+                            308120,\n+                            446329,\n+                            586424,\n+                            702700,\n+                            860799,\n+                            973700,\n+                            1034776,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 11,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.4965647150869147e226,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.535746684183441e-28,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-6484,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -27155,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xad\\xe5\\x07f\\x03!g\\x0cMf\\x17n\\xf8\\xec\\x11'p(\\xc9$\\xf9\\x12\\xf9\\xb2\\xfc\\xb38\\xae-\\x9b\\xda\\xa3\\xfe\\x8a\\xaa\",\n+            constraints={\"min_size\": 21, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00d0\\x81\\x81\\x8b\\U000363af\ud84d\uddd2\u00b2\\x94\u00b1=\\x99c\\x1e/\u43e3\\U000e7f0b2\ud80c\udec16\\U00079245|\u00bbM\u00b1\\U000cf03d\u00c5n\\U000d445c\u00f2|a\u00d7\\U000dd9f1F0Z|\u389aS\\x19\\U000e5642\u00f8\\x1d\u9141J\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            92474,\n+                            130149,\n+                            150979,\n+                            156935,\n+                            271178,\n+                            316529,\n+                            318407,\n+                            356225,\n+                            376397,\n+                            428578,\n+                            463135,\n+                            490785,\n+                            496910,\n+                            619201,\n+                            622050,\n+                            749802,\n+                            759809,\n+                            829374,\n+                            913756,\n+                            936550,\n+                            968074,\n+                            969759,\n+                            1032408,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 26,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=17913,\n+            constraints={\n+                \"min_value\": -32,\n+                \"max_value\": 19985,\n+                \"shrink_towards\": -27062,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 7644822920056870.0,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.4432900739845334e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.2254931703165716e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.026756858141544e16,\n+            constraints={\n+                \"min_value\": 6.680130276651438e-236,\n+                \"max_value\": 5.080580523469468e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.907269582857196e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.28219888139756316},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=19415,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 9_202_366_238_778_023_124,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.505242673283729e308,\n+            constraints={\n+                \"min_value\": -1.2285053553486638e142,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.4349319856331987e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-4.112159744628946e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -3.7387627804220664e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3620494451389330.0,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.873273735354358e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.14949021694758804},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0009bd87\\U0009be10\\U0009bd9b\\U000a5d1d\\U0009be05\\U0009bd81\\U000cd2c6\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([638292, 846394])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7_747_876_218_385_873_990,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -23,\n+                \"shrink_towards\": 2_000_922_496,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.2935511453404842e-234},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00087826\\U00068815\\U00060870\\U000910a5\\U00060901\\U00060834\\U00060844\\U00073706\\U00060875\\U0006085a\\U00062de0\\U00060862\\U000608ce\\U00060838\\U000608b6\\U0006086d\\U000608fb\\U00060898\\U00060821\\U000691b5\\U00060876\\U000608cb\\U000608c4\\U000608e8\\U00060832\\U0006087a\\U00060833\\U00082aa7\\U00060867\\U000860bf\\U000608ec\\U000608f4\\U00060878\\U0006087a\\U0006083a\\U00068ee9\\U00063b61\\U000608b6\\U000608a4\\U000608b4\\U000608d5\\U00060867\\U00060859\\U00060850\\U0008f417\\U0006f7e5\\U00060864\\U00062a3a\\U00060832\\U000608a1\\U000608d4\\U0007133d\\U00074e67\\U0006ebe8\\U00060853\\U00073da8\\U0006fa6b\\U000608a4\\U000608e0\\U000608fc\\U0006084b\\U000699f9\\U00060902\\U00060860\\U000608d0\\U000608fb\\U00060897\\U000608de\\U000608b3\\U000608fb\\U00060895\\U00060881\\U000608a1\\U000608d0\\U00060858\\U0006088c\\U000608ed\\U0006089f\\U000608ea\\U000608c0\\U000608a2\\U000608ca\\U00060839\\U000872a7\\U000608cf\\U0006082b\\U000608fa\\U000608f6\\U000608d2\\U000608fe\\U000608aa\\U00071f27\\U000608e3\\U00089959\\U000608dd\\U00060897\\U000818a4\\U00060885\\U0006a80c\\U00060917\\U000608bc\\U000608e3\\U00060878\\U000608fd\\U00060908\\U000608ac\\U00060917\\U00060912\\U0008de92\\U000608ca\\U000608f8\\U00060834\\U00060897\\U000608a7\\U0006086f\\U0006083f\\U000608cb\\U0007793e\\U0006087b\\U000653f0\\U000608be\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([395288, 601839])),\n+                \"min_size\": 50,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.430302397329667e307,\n+            constraints={\n+                \"min_value\": 2.2977568508831188e16,\n+                \"max_value\": 1.4130967583873843e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.3823487456653346e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7276314820986799},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": 0.0,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5e-324,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.9606024239343876e16,\n+            constraints={\n+                \"min_value\": -4.5476711230833656e16,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.9606024239343876e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u6ad0\\x93\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([0, 156496, 252509, 281325, 457969]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u76af\\U000d2fb3\u7603\u7635\ud846\uddf4\u7629\u769c\u7675\u76ab\u76cc\u764f\u7635\ud863\udcf3\u7660\u7699\u769a\u76dc\uf9cf\u76d2\u7623\u761c\u7630\u75f5\u75fa\u76af\u75f3\u75ef\u76c7\u7605\\U000d7440\u7651\u761b\u7681\u7676\u75ed\\U0001b93f\u760d\u763a\u76a1\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([30188, 194947, 350060, 395731, 656823, 908748]),\n+                ),\n+                \"min_size\": 25,\n+                \"max_size\": 41,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u201e\u2057\u204b\\uf81f\u20ec\u2052\u204c\\uf17f\u205d\\U0005075c\u208a\\u20cb\\u2000\u2045\\u200c\\u206d\u2033\ud84a\udead\u2098\u207b\ud872\ude0b\u2018\\u2003\u20b3\\u2073\u20e2\u20b4\u2056\u20d4\u20b5\\U0009221d\u2027\\u20cb\u209c\u20b5\u204a\\U0001bca4\u2043\u2021\u205a\u20e4\u2051\u2026\\u206a\u20d4\u2033\u2089\\u209d\u2031\u20d2\u2057\u20d0\\u2002\u2095\uc447\ud878\udf90\\u20fa\ud85f\ude1e\u20b2\u20d8\\u2068\u2015\u201a\u2059\\u20c5\u208d\u201e\ud807\udf1c\ud836\udced\u2047\\U000198d5\u20dc\u20de\u20e3\\u200a\u2043\u2057\\u20c3\\u202e\u20bc\\u20f5\\U0001ff05\\u2061\\u2028\\u200b\\u206d\ud868\udf71\u2010\u2025\\u20f6\u20f0\u20d6\u2049\u2036\\u20c1\\U000943c2\u20d3\\u205f\u204a\u2021\\U00052361\u20a8\\U0004f007\u2088\ud80c\uddcc\u20ec\u20d1\ua217\\u206b\ud882\ude3f\u20df\ud849\udf86\u2014\\u202e\u2055\u20da\\U00015764\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([8192, 214538, 312998, 348740, 597946, 609019]),\n+                ),\n+                \"min_size\": 44,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.092565397796271e16,\n+            constraints={\n+                \"min_value\": -6.554509381928152e16,\n+                \"max_value\": -1.0360999476806004e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.300488955377704e38,\n+            constraints={\n+                \"min_value\": 4.190020898691274e16,\n+                \"max_value\": 3.402823466e38,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.300488955377704e38,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=22174,\n+            constraints={\n+                \"min_value\": -24212,\n+                \"max_value\": None,\n+                \"shrink_towards\": 88,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=512,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -27,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe6\\xc88\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8894391966373032},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"R\\xee\\xc4\\xa8\\x1aH5\\x01\\x98\\x11fN\\x84\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.0972736860848255e61,\n+            constraints={\n+                \"min_value\": 0.5,\n+                \"max_value\": 5.0972736860848255e61,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.0972736860848255e61,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.4383229643052854},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u50bf\\U00083124\u5012\\U000a0f6d\u5044\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [20446, 74927, 264007, 565590, 574874, 844586, 992177, 1114111],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000b941c\u00e3H\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            142218,\n+                            306145,\n+                            785595,\n+                            788048,\n+                            791975,\n+                            796059,\n+                            886566,\n+                            1031150,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=27196,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.990129199221599},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.025840850181692472},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xbfn\\xd4x/\\n\\xe0\\xd6\\xe1\\xd38\\x10\\xb6\\x8a\\xfflP\\xe91\\xfe\\xc6\\xf3\\x1cp!:\\xa4\\n\\r\\x16\\x0b\\x1dC;\\xea\\xd7\\x9dp\\x95\\xb9y+\\x8b-\\x94\\xbb\\x8c|\\x05G\\xe3\\x84\\x05\",\n+            constraints={\"min_size\": 29, \"max_size\": 54},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.402823466e38,\n+            constraints={\n+                \"min_value\": 2.9811760074831244e16,\n+                \"max_value\": 2.9409519877398663e200,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.145912264576731e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x81\\xaf\\xf6\\xab\\xda\\x0f6\\x03\\xc5$X\\xdd\\x85\\\"\\x8bC~\\x96\\x93|\\x14O\\x93\\xab\\xb7s\\x12?9-\\x07\\xc1\\x85\\xd1\\xde\\t\\xc30\\rz\\xb7\\x8e\\x05\\xa4\\xd8\\xf8\\xb6/\\xd2\\xcf\\xdd\\xbf\\xc8O\\x97\\xfb\\xd6\\x8d\\xa5\\xb1\\xa1\\xfb\\x06+,\\x89X\\xb3\\x0b\\xf5\\x17\\xc0\\xe0g\\xd8\\x0e}\\x1b\\xedX\\xd7L\\xf2\\x1dU\\\\'hr5\\xbd\\x86\\xfa\\xed\\r\\\\g\\x8b\\xa3\\x9fb\\x9f\\x1e9?\\xe1\\x10\\x85T\",\n+            constraints={\"min_size\": 34, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9575618650202469},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xd5\\x8e\\x9d\\xc5i\\x0eQe\"J\\xc2\\x8d\\xb8z\\xfa\\xfa\\x8c\\xe9Yp\\x85{\\xbc\\xd3\\xd8\\xa5\\xde\\xe9\\x8f\\x9d\\x83<\\xd4U\\xe6\\r\\xeb\\xf4{&fW5\\x84\\xfb*O\\x0f',\n+            constraints={\"min_size\": 34, \"max_size\": 134},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -1.0090552289510208e16,\n+                \"max_value\": 1.7053233333359358e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.024938919737318e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x9a\\xecK\\xa4\"zh\\x81\\x99\\x06\\x88}]\\x04<hp\\x8d\\xbd\\x1d\\xf6\\x13\"8\\x8fD\\x90\\xf3\\xe75\\x07X+\\xb2j2\\xffs\\x8b\\x9aQ\\x8c\\xcb\\x88\\x05=\\x9bw_\\xf8]t\\xf2\\xad`\\xb0\\x99\\xe7\\xee(\\x80\\xd7\\x1bVY\\x83O\\xff\\xe9>\\xa3,P\\x0f\\xb0[$\\x07)\\xd8\\xb9\\xba\\xf8\\xa9\\x12t\\xfc',\n+            constraints={\"min_size\": 24, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'5P\\x1cp`\\xdbg\\xc1\\xae\\xcc\\xad\\xd4\\t\\x08\\xcc\\xee1\\xcd\\x1cY\\x04|{#c\"\\xcc\\xee\\xd52\\xf4\\xf0\\x18\\xcfx',\n+            constraints={\"min_size\": 30, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 6.103515625e-05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7924,\n+            constraints={\n+                \"min_value\": -7988,\n+                \"max_value\": 3_160_972_023_673_479_664,\n+                \"shrink_towards\": -3_604_154_326_302_969_075,\n+                \"weights\": {\n+                    2_579_709_190_383_346_018: 0.02564692297745282,\n+                    31035: 0.30595216373288164,\n+                    45563: 0.2963073281435713,\n+                    -7924: 0.37109358514609425,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf9-^\\r\\xe1h\\x01\\xe2Q\\x14\\x04\\xeeA\\x81\\x86\\x96\\x07\\x06\\xdc\\xc9W\\xfb3.\\xeeH\\x01F\\xd6\\xfb\\xccG\\xa7\\xe0\\xa1\\x14\\xd3\\xc0\\x15\\x04\",\n+            constraints={\"min_size\": 29, \"max_size\": 57},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-12067,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -11965,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000557e3\\U000558d1\\U00055889\\U00063ed8\\U00055861\\U00055857\\U00055803\\U000557e3\\U0005581f\\U00055841\\U0009bd55\\U000558b1\\U00055872\\U0005582a\\U0007326d\\U000557f4\\U0005583f\\U000558b6\\U00055845\\U00055893\\U000558d7\\U0005589f\\U0005582c\\U00055818\\U00055803\\U000557f5\\U000558da\\U000558e1\\U000557e8\\U00055864\\U00055803\\U0005fa08\\U000558cd\\U00078aa4\\U00076aed\\U000a478b\\U000557fc\\U00055808\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([350178, 714392, 924457]),\n+                ),\n+                \"min_size\": 35,\n+                \"max_size\": 60,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'=-\\xba\\xb1\\xea\\x9b\\xb3\"0^\\xe1\\xed\\xc3\\xf5$\\xf9\\x02\\x9e.\\xcc\\x06\\x89\\xb1F\\x82=\\xf0\\xc86\\x85JH\\x19\\xfa\\xfcmr\\xb7#\\x97\\rK\\xc9j\\xad^!_\\x9fQ\\xd0\\x15',\n+            constraints={\"min_size\": 49, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xed\\xd7\\xd7\\x036\\xee\\xdfN\\xa2y\\n\\xdb\\xf3\\xc1A\\x08N\\x90l\\x18\\x96\\xdb\\x1f\\x93\\xaf\\xba\\xd52\\x83\\xf6\\xcb\\xf1\\x9fP\\xd3\\xeb.\\x8c[\\x86\\xf9\\xad\\x95Z)\\x12\\x90\\xa2\\xe0\\x8a\\xd1\\xc5\\x8f\\xcd\\x81q\\xd0+h`u\\xf0\\x9e\\xf2!;\\xe1\"%\\xc2*\\xe5\\x8a^~wr\\x80',\n+            constraints={\"min_size\": 39, \"max_size\": 139},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-59,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -11385,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7568303422410456e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00090ec1\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([593384, 808278, 868609]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.995140026872172e16,\n+            constraints={\n+                \"min_value\": -2258297696095694.0,\n+                \"max_value\": 3.4135315910834492e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1e-05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u029e\u0211\u0237\u0294\u0228\u0254\u02a4\u02db\u02b6\u0232\u0241\u0288\u028f\u0237\ud852\udc24\u02bd\u02c9\u0214\u02df\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([512, 176044])),\n+                \"min_size\": 8,\n+                \"max_size\": 108,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00077899\\U00077922\\U000778ad\\U0008182f\\U00077917\\U00077893\\U000a8dd8\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([489574, 716464])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-591,\n+            constraints={\n+                \"min_value\": -4844,\n+                \"max_value\": 77,\n+                \"shrink_towards\": -27889,\n+                \"weights\": {\n+                    -4578: 0.04400264097867551,\n+                    -4280: 0.075914074477158,\n+                    -3235: 0.021135055874168893,\n+                    -355: 0.07953202527812196,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.543166881128822e16,\n+            constraints={\n+                \"min_value\": 3.424087087421633e-149,\n+                \"max_value\": 4.843603837210323e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.543166881128822e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'K\\xa0\"\\xd4\\xc05r\\xfe\\x04\\xb9',\n+            constraints={\"min_size\": 5, \"max_size\": 105},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-4.444068624956755e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-568684258,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -8,\n+                \"shrink_towards\": 30090,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-7681251402197665.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.7976931348623157e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.776949888652431e-40,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0465\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([1000, 98623])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 3.529247958414587e-221},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-5_768_091_369_705_219_537,\n+            constraints={\n+                \"min_value\": -5_768_091_369_705_258_621,\n+                \"max_value\": -33,\n+                \"shrink_towards\": 68,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-11359,\n+            constraints={\n+                \"min_value\": -31513,\n+                \"max_value\": -72,\n+                \"shrink_towards\": -3_691_612_895_812_882_230,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00036931\\U000368c5\\U00036895\\U00064cf2\\U00036925\\U000368d9\\U000621ea\\U00036935\\U0006065d\\U000368bd\\U0003684c\\U000728ca\\U00066b2c\\U00036907\\U0004ecc0\\U00079cf1\\U000368bc\\U0003690f\\U0003692e\\U0003685b\\U000368ea\\U00050feb\\U000368e3\\U00036852\\U00036936\\U0003687e\\U000368ff\\U000457d0\\U000368f7\\U000368a3\\U00070cc8\\U00073120\\U000368ba\\U00036841\\U00036850\\U00036926\\U0004fecc\\U0003687b\\U000368fd\\U0003689b\\U00036856\\U0003689b\\U000368ba\\U000368c3\\U000719af\\U00036902\\U0003685c\\U000368a2\\U00036920\\U0003692b\\U00036862\\U00037a65\\U00069e38\\U00063e52\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([223294, 521471, 611052]),\n+                ),\n+                \"min_size\": 44,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.05},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00056da2\\U00056d95\\U00056d61\\U00058946\\U0007ddc6\\U00056cce\\U00056cf4\\U00056d6a\\U00056d03\\U00056d98\\U00056d45\\U00056d9c\\U00056cf3\\U00056dad\\U00056db6\\U00056ce4\\U00056d29\\U00078fe6\\U00056d0c\\U00056d06\\U00056d70\\U00056cec\\U00056da3\\U00056d4f\\U00056d9a\\U00056d21\\U00056cd7\\U0007eab4\\U0007b7dc\\U00056d12\\U00056d73\\U00085800\\U0008a9ba\\U00061712\\U00056d64\\U00056d76\\U00056ccb\\U00056dd9\\U00056dab\\U00056da6\\U00056d4e\\U0008373d\\U00056cdf\\U00056ce4\\U00056cd0\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([355527, 400888, 466843, 599234, 906521]),\n+                ),\n+                \"min_size\": 39,\n+                \"max_size\": 75,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=22947,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.11231443748127304},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.32713435372794614},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-29188,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -6121,\n+                \"shrink_towards\": -11090,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd1\\x84k\\x93\\xecZ\\x99\\xfc\\xd7m\\x85\\x04\\t\\x15\\x9aR\\x95\\xc4\\xf8\\x9a\\xb5\\xf0+\\xe2\\xe9\\xdd\\x0c\\xd5\\x88\\xa5Q~tp\",\n+            constraints={\"min_size\": 30, \"max_size\": 130},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=82_872_983_460_284_085_870_900_517_233_932_940_561,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 28,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=16894,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 8,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud822\udc42\ud822\udcb2\ud822\udca4\\U000c0857\ud822\udc7e\ud821\udfec\ud822\udc90\ud822\udc79\\U00033d8c\ud822\udc91\\U0001ddb8\ud822\udc3f\ud821\udff3\ud822\udcb1\ud822\udc43\\U000187f8\ud822\udc97\ud822\udc61\ud822\udc26\ud822\udc28\ud822\udc33\ud822\udce0\\U000ccc62\ud822\udc25\ud851\udc79\ud822\udca1\ud822\udc9b\\U000c553a\ud822\udc3b\\U0003385d\ud822\udcc5\ud822\udc52\ud822\udc79\ud821\udff7\ud821\udff7\ud822\udc56\ud822\udc55\ud822\udce1\ud822\udce6\\U0003f3f4\ud822\udce9\ud822\udc26\ud822\udc11\ud852\udc72\ud822\udc2e\ud822\udc2a\\U000187ff\ud822\udc29\ud822\udc72\\U000cd3d5\ud822\udc7a\ud822\udcaf\ud822\udc13\ud822\udce9\ud822\udc8f\ud822\udc10\ud822\udc56\ud822\udcce\ud822\udc5b\ud822\udcd4\ud822\udc66\ud822\udc6b\\U000cabe2\ud822\udc26\ud822\udcad\ud822\udc97\ud822\udc11\ud822\udcac\ud822\udc31\ud822\udc38\ud822\udc20\ud822\udc85\ud822\udc27\ud822\udc63\ud822\udcbe\\U000cccaf\ud822\udc0c\ud822\udce3\ud822\udc42\ud822\udc42\ud822\udca0\ud822\udcb8\ud822\udcbf\ud822\udcb7\\U0003c1aa\ud821\udff2\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            100330,\n+                            124450,\n+                            138825,\n+                            151050,\n+                            199746,\n+                            259606,\n+                            301021,\n+                            305181,\n+                            774048,\n+                            858117,\n+                            977256,\n+                            983021,\n+                            1073416,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 17,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7_360_972_005_696_612_222,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.023032220453115263},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9281743120010426},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=23876,\n+            constraints={\n+                \"min_value\": 23818,\n+                \"max_value\": 23915,\n+                \"shrink_towards\": 0,\n+                \"weights\": {23876: 0.6023472381017947},\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u012c\u0204\u0180\\U000dc911\u0172\u015c\u0144\u01c3\u0150\u01b8\u0135\\U00041424\u01ec\u013d\u0184\u0222\u01b6\u01f6\u01fd\\U000b651d\\U000f4790\u0207\u01f9\\U00041f5d\u0139\u0208\u0146\u01ea\\U00108087\\U000ce677\u0186\u01e0\u01e5\u01f9\u0220\u01ee\\U000b8d59\u018b\u015a\ud820\udd52\ud850\udcb4\u0218\u01e4\u0211\u01f0\u017b\u0216\u01d9\u0173\u016a\u0188\u018c\u01ad\u01b2\u01ab\u01da\u01b6\u01d4\\U00098547\\U000457bd\\U000d3240\u0197\u0201\\U00045e86\u01d5\u0192\u0193\\U000dae8c\u0206\\U000c4324\u01fd\\U00049e48\\U0010cbc6\\U00040894\u0173\u021a\u0190\u0141\u0145\u0159\u018c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            300,\n+                            36409,\n+                            86811,\n+                            103879,\n+                            138326,\n+                            158698,\n+                            249316,\n+                            318099,\n+                            538459,\n+                            586241,\n+                            612056,\n+                            650524,\n+                            681836,\n+                            777126,\n+                            778634,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 49,\n+                \"max_size\": 149,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.5984607979757442e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=10019,\n+            constraints={\n+                \"min_value\": 10004,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.42872791493171636},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-4.489292881796294e16,\n+            constraints={\n+                \"min_value\": -4.91816786387378e16,\n+                \"max_value\": -9007199254740992.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": 1.8777636019889736e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.419102973821252e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u020a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([404, 298390, 774386, 874985])\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 88,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5905646415502216},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf0\\xbf\\xba\\xad\\xdd\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.2374020321064446e307,\n+            constraints={\n+                \"min_value\": 9.229821664239714e165,\n+                \"max_value\": 3.7762776007567335e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.2374020321064446e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=87,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 110,\n+                \"shrink_towards\": 16558,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8048,\n+            constraints={\n+                \"min_value\": 99,\n+                \"max_value\": 8192,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5158474549567377},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1024, 183300, 205158, 408530, 912906, 1114111]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1259472439986982e308,\n+            constraints={\n+                \"min_value\": -2.6217940153107204e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.9099752852780166e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5694856931789977},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"u\\xe8\\x95,~\\xdd\",\n+            constraints={\"min_size\": 6, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5565701727217226},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=5233,\n+            constraints={\n+                \"min_value\": 81,\n+                \"max_value\": 16400,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    5233: 0.09375698043719757,\n+                    3312: 0.0002203837688014891,\n+                    12705: 0.21035159148375795,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x99\\xaa\\xe7\\xb2\\x95l\\xa3\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x90F\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-13989,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 115,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa1P\\x98\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"+X\\xdd\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-9285,\n+            constraints={\n+                \"min_value\": -17132,\n+                \"max_value\": 54,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 6.412202585133952e-48},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.735772323371514e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.586841821852942e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.8236468592789916e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7276503354152969},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.043748323993786e307,\n+            constraints={\n+                \"min_value\": -5.547537061596454e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.192092896e-07,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x93\\xedq\\xe9\\xa7]4\\xa4q\\x10\\xe9\\xe6}\\xe4y\\xffh8\\xb2\\x98\\xec\\x07\\x08S(\\xc1-Y\\xb5\",\n+            constraints={\"min_size\": 17, \"max_size\": 117},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1e-05},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\ue746\\ue6d4\\ue6e2\\ue72c\\ue730\\U00019c7b\\ue73d\\ue6c3\\ue6bd\\ue697\\ue6a3\ud843\udeb4\\ue6de\\ue67c\\ue6d8\\ue655\\ue708\\ue6ab\\ue6c7\\ue722\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [58952, 171230, 809223, 809992, 847837, 894779, 1057614],\n+                    ),\n+                ),\n+                \"min_size\": 14,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.5914240180575804e308,\n+            constraints={\n+                \"min_value\": 2.00001,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.5914240180575804e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.002748972167886388},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0009e29a\\U0009e2f2\\U0009e2ae\\U0009e291\\U0009e2cc\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([647750, 1000604])),\n+                \"min_size\": 0,\n+                \"max_size\": 84,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=58028,\n+            constraints={\n+                \"min_value\": -7200,\n+                \"max_value\": 1_938_723_984,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud865\udcb3\ud865\udcf0\ud865\udd19\ud865\udd66\ud865\udcb5\\U000d7e98\ud865\udca9\ud865\udca1\ud865\udc9a\\U00071a9d\ud865\udd29\ud865\udd64\\U000e4fb5\ud865\udd48\ud865\udc98\ud865\udcf3\ud865\udd56\ud865\udcdf\ud865\udc87\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            169089,\n+                            255645,\n+                            272825,\n+                            404757,\n+                            441001,\n+                            488531,\n+                            594142,\n+                            763956,\n+                            814267,\n+                            1112813,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xab*\\xe5\\xbf$Q\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=118,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 26049,\n+                \"shrink_towards\": 18242,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6649103466931506},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8a\\x0b\\x89\\xd3~s\\x1a\\x10\",\n+            constraints={\"min_size\": 0, \"max_size\": 42},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005c2bb\\U0005c371\\U0005c2eb\\U0005c2af\\U0007334a\\U0005c2bc\\U0005c338\\U0005c2f3\\U0005c316\\U0005c319\\U0005c29c\\U00073d2e\\U0005c2ee\\U0005c2bf\\U0006a6fb\\U0005c325\\U0005c2fe\\U0008cd4e\\U0005c359\\U0005c2de\\U0005c2d1\\U0005c29e\\U0005c2a2\\U000aa67a\\U000634e3\\U0005c32e\\U0005c2b3\\U0005c2dc\\U0005c27e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([377458, 749783, 1098897]),\n+                ),\n+                \"min_size\": 28,\n+                \"max_size\": 128,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -5e-324,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.5044244430883284e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9828826050981583},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5.0771511288448956e-85},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-19931,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -65,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8714,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 24589,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.413509836852522e100,\n+            constraints={\n+                \"min_value\": -8.294413303616123e100,\n+                \"max_value\": 3.2417982614330495e-192,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.1028931524743175e100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.70557606809417e307,\n+            constraints={\n+                \"min_value\": -7.467005339396388e-33,\n+                \"max_value\": 1.598478209880188e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.9994590347655496e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.5665302520320265e-128},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=25046,\n+            constraints={\n+                \"min_value\": 24995,\n+                \"max_value\": 25080,\n+                \"shrink_towards\": 408,\n+                \"weights\": {\n+                    25018: 0.030884397817733923,\n+                    25070: 0.0002219809301247217,\n+                    25027: 0.04804383156929758,\n+                    25014: 0.05611188686145872,\n+                    25065: 0.0030884397817733927,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7100788362083911},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00c8\\x89\\U000cc9eft0\u00bf\\x0e\u00ef\u00aau\\U0004995a\\x9f\\U000bed16\\x1d\u00f8\u00a8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            20136,\n+                            210488,\n+                            409160,\n+                            436550,\n+                            503904,\n+                            687245,\n+                            901563,\n+                            960402,\n+                            971254,\n+                            1016760,\n+                            1026292,\n+                            1110447,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 12,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.7372285329045437e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.950853058379288e307,\n+            constraints={\n+                \"min_value\": 0.5,\n+                \"max_value\": 1.2873753182904118e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.876986830343286e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud835\udf87\\U00043c13\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([120469, 400066, 548165, 695915, 778852, 781990]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud83a\udc4e\ud83a\udc39\ud83a\udd0d\ud83a\udc58\ud83a\udcb6\ud83a\udcb5\ud83a\udcc9\ud83a\udc7d\\U0001e8e5\ud83a\udc4f\\U0008e9fe\ud83a\udc6c\ud83a\udc9a\\U0001e8e2\ud83a\udc88\ud83a\udc3a\ud83a\udd03\\U00099365\ud83a\udc61\ud83a\udd10\ud83a\udcb5\ud83a\udcd3\\U000cd2ac\ud83a\udc36\ud83a\udc85\\U0001e8d8\\U0001e8c6\\U0001e8f9\ud83a\udc74\ud83a\udc8e\ud83a\udc3d\\U0001e8db\ud83a\udc52\ud83a\udd13\ud83a\udc18\\U0001e8d7\ud83a\udc88\\U0001e8f4\ud83a\udc73\\U0001e8fc\ud83a\udd0e\ud83a\udc57\\U000b489c\ud83a\udd0e\\U000b0588\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([124949, 215885, 505429, 885279, 1114111]),\n+                ),\n+                \"min_size\": 44,\n+                \"max_size\": 144,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=15130,\n+            constraints={\n+                \"min_value\": -36,\n+                \"max_value\": None,\n+                \"shrink_towards\": 85,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.2352945233672329e308,\n+            constraints={\n+                \"min_value\": 6.884886538615113e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=27227,\n+            constraints={\n+                \"min_value\": 27217,\n+                \"max_value\": 27263,\n+                \"shrink_towards\": -4_411_257_536_737_481_843,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-9245,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0753\u0749\u074e\u070a\u06ef\u06b2\u06cd\u0745\\U00072fcc\u0757\u074a\u06e5\u06ca\u078c\\u06dd\u0733\u06ed\u06fb\u071e\u0768\\u070e\\u074b\u0757\u075d\u06b4\u078a\u06dc\\U0001a949\u073d\u06f4\u06ab\u0700\u0745\\U000b4459\u070c\u0753\u0732\\U00033c38\u06f1\\U000d8f2b\u0707\u06cf\u0739\u06be\\U0005dc9f\u06c7\\U000660df\\U0003a4da\u0748\u06a3\u06ba\u070a\u06ec\u078a\u06ca\\u070e\u06df\u0710\u0771\u0785\\U0004d60c\\U000c10d7\u0797\u06f2\u06e8\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([1694, 1014110])),\n+                \"min_size\": 28,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6557248346004639},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u24db\u2515\u24df\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([9261, 76052, 285780, 504288]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.6144489134634265e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 3.0003253407608873e-150},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1411940989533795e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"q*W\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ufe9b\ufe60\\U000c0e3e\ufe6b\ufe7b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [64991, 299238, 507341, 577483, 694484, 906950, 1011512],\n+                    ),\n+                ),\n+                \"min_size\": 2,\n+                \"max_size\": 102,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.062008758205149186},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=28130,\n+            constraints={\n+                \"min_value\": 24050,\n+                \"max_value\": 29082,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    29082: 0.00034077301517127846,\n+                    27303: 0.0025148914574227113,\n+                    26016: 0.002271820101141856,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-2.779396803869614e37,\n+            constraints={\n+                \"min_value\": -8.352970783543669e37,\n+                \"max_value\": -2627292783403986.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6.3317723212578776e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.46308617595512536},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9924839451226168},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-25320,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -25268,\n+                \"shrink_towards\": 29878,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-151_526_316_095_019_799_677_213_228_655_598_041_695,\n+            constraints={\n+                \"min_value\": -151_526_316_095_019_799_677_213_228_655_598_102_310,\n+                \"max_value\": -29642,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-11098,\n+            constraints={\n+                \"min_value\": -19540,\n+                \"max_value\": -8613,\n+                \"shrink_towards\": -10988,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf9\\x8e}M\\xa7\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=10234,\n+            constraints={\n+                \"min_value\": 10007,\n+                \"max_value\": 1_954_610_113,\n+                \"shrink_towards\": 1874,\n+                \"weights\": {\n+                    10101: 0.04731744901781743,\n+                    11410: 0.12437510847579694,\n+                    69178: 0.07743995033837749,\n+                    10007: 0.063091339782701,\n+                    638082205: 0.08484369244334751,\n+                    1_632_412_769: 0.04206089318846733,\n+                    1_622_653_605: 0.038523879018200494,\n+                    10234: 0.05036824942228809,\n+                    394638671: 0.063091339782701,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7136501376174683},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.981063039962216},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.1754943508222875e-38},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.2194307519384267},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -3.5729668606301216e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.8725389931339257e233,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.observations\",\n+            constraints={\"min_size\": 22, \"max_size\": 122},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x0c\\x9cfyW\\x0bC\\xaa\\xff$n\\x0e\\xf3\\xfd\\xc24>\\xcf\\x07\\xd3\\x81\\x85\\xe9Bf${\\xd0\\x9b\\xffB\\xef\\xe5\\xbc\\x1d\\xf7\\xa6\\x1b\\xfd\\xd4z\\x90\\xb3\\xcc\\x01&\\x98\\x9a\\xceG\\xb2\\x824\\xff\\xeeoy\\x99\\xcf\\x99Z\\xf2ep\\xf5\\x85\\xebW2h\\rI9/\\xf3\\xe2\\x9a\\x7f\\xe4\\xa0<\\xf2b\\xaf\\xf8hL\\x9e1\\x98\\x12\\xc5\\x99\\x03\\x02\\x9c\",\n+            constraints={\"min_size\": 45, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=13361,\n+            constraints={\n+                \"min_value\": 63,\n+                \"max_value\": 25083,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x95mx\\xc3\\x86ai\\xc4\\xaf>#\\xecl(\\x0f\\xd9\\x0cp\\x10\\xd4s\\xd8\\x9c\\x88\\x15DamK\\x8b\\x8f\\xbdqiX\\xd9D\\x8e\\xfbD?\\xf6\\xfc\\x8a\\xd7>\\x89I6\\t\",\n+            constraints={\"min_size\": 48, \"max_size\": 148},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x7fk\\x951\\xb5\\xf9\\xceg\\x0bm\\xd4\\xe4\\xd6\\xa5\\x98\\xe9\\xd1\\xba\\xd1L\\xbd\\xd1F\\xd9\\x17\\xd3\\x1f\\x1a\\xd0\\x8d\\xb1\\xcc[\\xd7h\\xe9^\\xeb\\xfc\\x8cu\\xed\\xd0\\xe6\\x13\\x19:Kn2\\xea\"Y\\xe0\\xb3\\x02w\\x90T7$\\xb0\\x7f\\xf1\\xd7\\xa1TrIS\\xd9\\x04\\xf2\\x12C{\\xf1\\x16\\xc7\\xc0\\xc6\\xc6\\xc0y\\xcbw\\x9by\\x8d\\xbd\\x0f\\x840\\xe8\\xf3\\x90\\xf1<\\xcd\\xd3\\xf7\\x9d*(p-[\\xcb\\x12\\x1a\\x80\\x1be\\x8c\\xda\\xc6\\x0e>\\x89n\\x93=\\xa5\\x8f\\xf4',\n+            constraints={\"min_size\": 43, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4331,\n+            constraints={\n+                \"min_value\": -6353,\n+                \"max_value\": 8192,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=6040,\n+            constraints={\n+                \"min_value\": 5341,\n+                \"max_value\": 7680,\n+                \"shrink_towards\": -28304,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7066564882205647},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x0e\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.20263098623054338},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=30418,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 21561,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00064698\\U000a1dce\\U00064664\\U000645ed\\U00064622\\U0006b7d0\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([411063, 1067709])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8975926178824039},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000512b5\\U000512a3\\U000958ce\\U000d2ef7\\U0005129f\\U00087c9d\\U00051220\\U00051244\\U0007a1b1\\U0005121c\\U0005128a\\U00051254\\U000512b6\\U00051266\\U0005130e\\U0005127a\\U000512d7\\U000512f1\\U00051302\\U00051293\\U000512dc\\U000512fb\\U00051240\\U0005128c\\U00051291\\U0005fd1f\\U00051239\\U00085fc8\\U000a33a1\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([332306, 1000676, 1086091]),\n+                ),\n+                \"min_size\": 20,\n+                \"max_size\": 120,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000554ac\\U000554a2\\U000a43dc\\U000a95a8\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([349214, 717026])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"O\\xab\\xfc\\xee\\xf9\\x05[\\xa1:j\\xb3\\r_\\x8d\\x15\\x81\\xa94n\\xf6,\\xb03\\xde\\x16\\xfc\\xfdX\\xa51\\x10\\xcd\\x0b\\xc9\\xb4\\xac\\x16\\x99\\xa6\\xd1\\xd5:\",\n+            constraints={\"min_size\": 26, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.401298464324817e-45},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xdc\\xfe\\x7f\",\n+            constraints={\"min_size\": 2, \"max_size\": 102},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.observations\",\n+            constraints={\"min_size\": 21, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.984793241927806e44,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.8188281474813041,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -235854046244609.88,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.666814970586866e304,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.231170764642696e16,\n+            constraints={\n+                \"min_value\": -2.0790044594248573e-71,\n+                \"max_value\": 3.0006520392079744e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.573053727279362e-229,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 7.153836320849635e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u02b0\u02a5\u0258\ud85a\udf6b\u02cb\ud856\udcd6\u025e\u02ec\u029c\ud875\udcb2\u02a6\u02c1\u025d\\U00092636\u1fa3\u02da\u0288\u02dd\u022c\\U000877ba\u02f2\u027c\u02df\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([512, 739865])),\n+                \"min_size\": 23,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x10\\xde\\x7f\\xa7\",\n+            constraints={\"min_size\": 0, \"max_size\": 72},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=23487,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 32299,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2_144_849_422,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -1_070_076_046,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -4.225850036885546e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.808846955206613e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 58,\n+                \"shrink_towards\": -61,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x80\\x86\\xa9\\xe8\\xdf\\xf3\\t\\xeem\\xb3\\x9a\\x080'\\x1a\\t\\xf4\\x1a\",\n+            constraints={\"min_size\": 3, \"max_size\": 103},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1000,\n+            constraints={\n+                \"min_value\": -30203,\n+                \"max_value\": 3779,\n+                \"shrink_towards\": 55,\n+                \"weights\": {-17735: 0.07890636303047281, -275: 0.039781302541959426},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1a\\xb8ez'\\x17\\x11\\x05f\\x8c\\xeaJ\\xcc\\xfd\\xc3\\x0f8\\x85\\x89\\\\F\\xc7,\\xd36\\x06\\xceEO\\xde\\xda_\\x9bc-G\\xef\\xf1LJ\\xe1\\xc3iI)B\\x0bvG\\xa5W\\xaci\\xa2FoR2\\x19\\xb5\\xc3\\xdcTJ\\n\\x15\\xf4\\xac\\x04R\",\n+            constraints={\"min_size\": 24, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x7f\\xa1\\\\\\xa07cF\\x9a\\xff\\x8b?\\xca\\x0f\\x9dejk>w\\xf9\\xb9T\\x95\\xe1\\xabR\\x92\\xe2\\x82$k\\xeda\\x98\\xa3\\xc2\\x0e2@\\x96\\xdd\\xa8\\xcf\\x99_\\x03\\xceE\\x06\\xdfu\\xdc\\xacN<X,\\xab\\xd73\\x0cA\\xd1GH\\xae2\\x8f\\xbalr\\xe0a\\xbb\\xef\\x9f\\xa2\\xa1L}%+\\x18-\\xc5\\xf7\\xdfb\\xb9_}\\xd2\\x93\\xee\\t\"',\n+            constraints={\"min_size\": 41, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6726975820436322},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 9.245259556170925e-135},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00019dfe\\U00019e13\\U00019e0d\\U00019e29\\U00019e5d\\U00019e00\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([105824, 530991])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -2.675879921059001e-221,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.900146652400321e-221,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.852449738948897},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=404,\n+            constraints={\n+                \"min_value\": 71,\n+                \"max_value\": 31560,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    17955: 0.19282710819952595,\n+                    1957: 0.006291802966443957,\n+                    13744: 0.2655139561563381,\n+                    30637: 0.13275830566122565,\n+                    13896: 0.13803390488466225,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00ea\u00f8\u00b9?B\u00b1\\x86L\\U00094343f\\x14\u00a3\u00cfL\\U000f3d82\\x7f\ud845\ude40wu\ud872\udd45\\U000e0af4\\x84\\x12\\U000ef459b\u00b4\\x9bQ\\U00034723\u00ecy\u00f1p\\U000425eb\u00d35\u00c1\\U00055ff0\u00ac\\U000f40c2O:\u00ed\u00cd\u00bd<;\\U00099f9dB\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            300,\n+                            512,\n+                            29850,\n+                            111842,\n+                            403297,\n+                            459322,\n+                            500449,\n+                            591274,\n+                            613340,\n+                            616356,\n+                            680531,\n+                            811618,\n+                            815348,\n+                            870828,\n+                            1068993,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 14,\n+                \"max_size\": 114,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8e\\xcc\\xbe44\\xda\\xb0\\xbe\\xdf\\xcb\\x92z!\\xfd\\xb5[\\xd2\\xfe\\x9f\\xf0\\x8fV\\xc4_\\xd2\\x1a\\xadO\\xb9\\x0b\\xcbf\\xa8\\xb2\\xa9\\xe8\\xe2\\xa8 \\x1d\\xd5s\\xff\\xc8\\x10\\xbf\\xf9.4\\x82b\\x8c\",\n+            constraints={\"min_size\": 25, \"max_size\": 125},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000ab249\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([700987, 816783, 986344]),\n+                ),\n+                \"min_size\": 1,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=31,\n+            constraints={\n+                \"min_value\": 22,\n+                \"max_value\": 3_273_266_941_430_451_387,\n+                \"shrink_towards\": 0,\n+                \"weights\": {1_214_335_638_010_048_966: 0.6855482970373334},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b':\\xd5\\xbc#\\x91\\xb3?Fc\\xa5@\\xafn\\x97\\xa6\\x11\\xca?\\x99\\xb7P8,I\\xcbE0k\\xbd:\\x89\\xd3\\x83\\x9aY\\x8b/\"VK>\\xe6\\xe3=7!f\\xff\\xef\\xca\\xc7Da\\xc0\\x06\\xd29\\xc7\\xca\\xb4J\\x1c\\xbeD\\xab\\r\\xccB v\\x0fy\\x1f\\x17\\xcd\\x0cv1\\x1d\\xad\\xda\\xb4\\xeddl%j\\x99\\xd6\\x8f-\\xfbL\\xcb\\t\\xb3\\xbar\\xc6\\n\\x9bP\\xa8\\x9b\\xef\\xbcx\\x08J\\x9d~\\x99PhSG7\\x16m\\x82$D\\x95\\xe5\\xee\\xd2*\\xff\\x1b\\x9e<E?w,\\xe6!\\xab\\x96\\xbf=\\xf4g\\x81\\x8c\\x90',\n+            constraints={\"min_size\": 46, \"max_size\": 146},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.2913971594765406},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x81\\xca\\xc6(D\\x989\\xf2\\x83\\xb43\\x80\\x01P\\xd33P\\x00\\x10\\xcb=\\t\\xf2G\\xfb\\x99\\xbcK\\xfaX\\xbc\\xc6\\x9el\\x15XLi\\xca\\x0e\\xd8^q\\xb2M\\xa2\\x1c2\\xdd\\xc9\\xd8\\xb6L\\xb9 \\xa4\\xf0\\x9d\\xfeb\\xaa\\x9b(\\xb0\\x10\\x12\\x04\\xf9\\x90\\x95\\xaeq\\xe4\\x91\\xf9O\\xe1\\xff\\xd6\\xc4\\xedd\\xda=\\xc3=R\\xe5*lC\\xf4\\xff\\x8e0\\xf9\\x9f\\xd6\\xe1%H\\x19\\x01\\x91@\\x0b:%;k\\xa1\\xb4\\xe3\\x92h0&\\xddz\\x9c\\xb0\\x00>\\xe5\\x8f{\"\\xd1\\x93\\xb4R\\xaaoZ\\x17\\xc26\\xa83)\\x15\\xa5\\n*\\xd3G\\xeaK\\xbf#L\\xb1',\n+            constraints={\"min_size\": 50, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u04ca\u0490\\U00081aa6\u0442\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1000, 44787, 499714, 558473]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001f7fe\ud842\udce8\\U0006581e\ud83d\udf93\\U000679a9\ud83d\udfba\ud83d\udf99\ud83d\udf6b\\U0001f7ec\\U000685ea\ud83e\udc3c\ud83d\udfd6\ud83d\udfb9\ud83e\udc3c\ud83d\udfb5\\U0001f7f8\ud83d\udf58\ud83e\udc3c\\U0001f7fb\\U0006e2c7\ud83d\udf84\ud83e\udc25\\U0006ea83\ud83d\udf7e\ud83d\udfe0\ud83d\udf43\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([128830, 140718, 403219, 457197, 1088016]),\n+                ),\n+                \"min_size\": 19,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.42209352061383976},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3333333333333333},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.failures\",\n+            constraints={\"min_size\": 7, \"max_size\": 64},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.220446049250313e-16},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=59,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 22573,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.0791347709056582e307,\n+            constraints={\n+                \"min_value\": 3.272451998101384e204,\n+                \"max_value\": 4.771031178881698e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.261308891924763e-56,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=65535,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -2_813_752_676_628_616_835,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud850\uddd1\ud850\uddd8\ud850\udda5\ud850\ude38\ud850\ude67\ud850\ude14\\U0005a60f\ud850\udd87\ud850\ude5a\ud850\uddcb\ud850\uddc0\ud850\ude3b\ud850\udd9e\ud850\uddc5\ud850\udde4\ud850\udd92\ud850\ude09\ud850\uddf6\ud850\ude4a\ud850\udde6\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            147846,\n+                            163706,\n+                            323434,\n+                            538224,\n+                            590807,\n+                            713116,\n+                            820614,\n+                            982783,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 9,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            1000,\n+                            13836,\n+                            25760,\n+                            161202,\n+                            206378,\n+                            266426,\n+                            273949,\n+                            323023,\n+                            390415,\n+                            400329,\n+                            483018,\n+                            598666,\n+                            659640,\n+                            694886,\n+                            908907,\n+                            1027822,\n+                            1081244,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"&e\\xa6\\x0c\\x12\\xd2\\x89\\x18]\\x95\\x0e\\xe8\\x816\\t\\x16ok\\x11=\\x17\\x8dl\\x909\\x95\\x93\\x0c\",\n+            constraints={\"min_size\": 23, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.415685239199522e307,\n+            constraints={\n+                \"min_value\": -1.1598913387139443e-286,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.730216808996705e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"l\\xdd\\xb8\\xbe\\xed\\xc1\\xe7\\xe1\\x17\\xeb\\x0e\",\n+            constraints={\"min_size\": 0, \"max_size\": 86},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.097581019212709e-175,\n+            constraints={\n+                \"min_value\": -5.451680384965098e16,\n+                \"max_value\": 5.63841230017821e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.7711734259693183e-188,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003dd4c\ud822\udc9c\ud822\udce2\ud822\udcdf\ud822\udc68\ud822\udca9\ud822\udcd6\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            100440,\n+                            459361,\n+                            596620,\n+                            766232,\n+                            798106,\n+                            918626,\n+                            956760,\n+                            1006709,\n+                            1025990,\n+                            1036875,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xf9\\xc4gH\\x03\\xc6mA\\x8b\\xbe\\xa2\\xc4C\\xe5\\xb9\\xee\\xf1\\xf6C\\x9e\\xccw\\xc9yP\\x0c}r\\xb8\\xe9\\x1a\\xc4\\xa2\\x9f|l\\tM\\xe3\\xac\\xc2\\xf2\\xeeF\\xec\\xd4\\n\\xf0z\\x02:\\x8bwI\\x91\\xdf_\\xa4yI\\x85~\\xd7\\x91\\xc7K\\xc7\\xe9\\x97\\x15\\xec\\xd8A\\xaa\\xa3\\x9c\\xeb\\\\\\xed\\xb5\\xcey\\xa38\\xf6\\xa9\\xc0}\\xba.6\"\\x1d\\xef',\n+            constraints={\"min_size\": 32, \"max_size\": 94},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.144849768659994e308,\n+            constraints={\n+                \"min_value\": 6.913191506714416e16,\n+                \"max_value\": 1.444636964970912e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.402823466e38,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.14468619462368973},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u3eed\u3edb\u3f43\u3f50\u3f3e\u3ee4\u3f2f\u3f3e\u3f1f\u3f03\u3f18\u3f52\u3f30\u3ef3\u3ed5\u66c4\u3e90\u3ebb\u3f1e\u3ec3\u3ea7\u3e6d\u3e6d\u3f01\u3f3f\u3eb8\u3efe\u3f5c\u3e87\u3e86\u3ed8\u3e82\u3e87\u3f05\\U0006ba07\u3ed1\u3e7f\u3f25\u3e6c\u3f24\ud873\udc29\u3eac\u3ee3\u3f03\u3f20\u3f45\u3ece\\U0006f0cd\u3e8d\u6fb2\u3e79\u3ebf\ud861\uddba\u3f11\u3e89\u3ec6\u3e9c\ud833\udf04\u3f38\u3ef9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [15975, 203028, 412690, 490989, 533358, 611655, 635873],\n+                    ),\n+                ),\n+                \"min_size\": 26,\n+                \"max_size\": 126,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=30518,\n+            constraints={\n+                \"min_value\": -5305,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.044095448332262e-301,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.5702046825221922e-26,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.8883282052876616e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.4266026826509265},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=35900,\n+            constraints={\n+                \"min_value\": 12346,\n+                \"max_value\": None,\n+                \"shrink_towards\": 120_814_036_499_817_447_430_067_973_622_485_796_693,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=85,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 31868,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1755557930166234e308,\n+            constraints={\n+                \"min_value\": 6.902070883972881e242,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.1755557930166234e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"c\\xa3z\\xd2\\xbej\\x12\\xff\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1_904_849_199,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 1000,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.1754943508222875e-38},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.978363622883065},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=5_133_261_083_048_293_413,\n+            constraints={\n+                \"min_value\": 92,\n+                \"max_value\": None,\n+                \"shrink_towards\": -91,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001e961\\U0001e9fe\\U0001e9e4\\U0001e9ae\ud83a\udd31\\U0001e9b2\\U0001e97d\\U0001e9a9\\U0001e969\ud83a\udd1b\ud83a\udd4b\\U0001e9bd\ud83a\udd30\\U0001e9d3\\U0001e9c1\ud83a\udd13\ud83a\udd19\ud83a\udd49\\U0001e9f9\\U0001e99d\ud83a\udd3f\\U0001e988\\U0001e985\\U000ad48b\ud83a\udd28\\U0001e979\\U0001e995\\U00109d9f\\U0001e9fe\\U0001e9d8\\U0001e9df\\U0005ec3c\\U0001e962\ud83a\udd32\\U0001e99e\\U000cebd4\\U0001e9ba\ud83a\udd2c\\U0001e9d8\\U0001e99e\\U0001e9ac\\U0001e9a8\\U0001e990\\U0001e9a8\\U0001e986\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            125185,\n+                            161057,\n+                            211068,\n+                            348593,\n+                            364750,\n+                            490931,\n+                            581814,\n+                            660783,\n+                            668704,\n+                            675086,\n+                            698469,\n+                            719320,\n+                            763722,\n+                            817420,\n+                            843603,\n+                            847539,\n+                            888493,\n+                            908492,\n+                            1086442,\n+                            1094443,\n+                            1098443,\n+                            1114110,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 45,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.402823466e38,\n+            constraints={\n+                \"min_value\": 4.804294362441181e16,\n+                \"max_value\": 1.0869193641627577e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.453453300118642e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-16920,\n+            constraints={\n+                \"min_value\": -27169,\n+                \"max_value\": -83,\n+                \"shrink_towards\": 113,\n+                \"weights\": {\n+                    -84: 0.09258014690234678,\n+                    -14415: 0.040667259002016426,\n+                    -8073: 0.07818474738511687,\n+                    -11841: 0.05886887575060873,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-218,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -119,\n+                \"shrink_towards\": -78529352,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\uf276\\U000bde30\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            61952,\n+                            142149,\n+                            254935,\n+                            293899,\n+                            357469,\n+                            526751,\n+                            556692,\n+                            565647,\n+                            598840,\n+                            655631,\n+                            693481,\n+                            718457,\n+                            732141,\n+                            833984,\n+                            988048,\n+                            1009561,\n+                            1016085,\n+                            1023045,\n+                            1048384,\n+                            1081231,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005b9d0\\U0005b99f\\U0005ba3b\\U0005ba76\\U0005b9c9\\U0005ba45\\U0005b9f2\\U0005b9fe\\U0005ba30\\U0006b325\\U0005ba4f\\U00073810\\U0005b9ed\\U0005b9d3\\U0005ba34\\U0005b9d5\\U0005b9d3\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([375169, 626073, 983058]),\n+                ),\n+                \"min_size\": 11,\n+                \"max_size\": 111,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1_673_058_531_759_016_067,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 127,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9818,\n+            constraints={\n+                \"min_value\": -65,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=300,\n+            constraints={\n+                \"min_value\": -60,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.33062327827099575},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xcf\\xa8\\x16\\x8c\\n[g\\x8cA\\xb1\\xf3\\xcd\\xca\\xd5C\\xc0\\x8c\\xe1\\x04\\xba\\xfbS\\xcc\\x91b\\xbb\\x81\\xd9p\\x80\\xd4\\x8f\\x8a\\x01\\x08m\\x92ME\\xa2\\xcf\\xb6\\xdc\\xe4\\xfcb5\\xff\\xe0\\x8b\\x8d\\x7fLr\\x14\\xef\\x1b\\xa3\\x17B\\x15\\xf0\\x96k.\\xbc@~D0\\x85\\x11\\xa7\\x81f\\x88\\x0e\\xa6OBn\\xaf\\x16\\xa0\\xc1\\x1d#\\xb5#\"\\x18o\\x85\\x8d\\x85\\xf0h\\xd9rJ\\xa1\\xe3\\xc7\\xe1\\x8f\\xb7\\t?Z\\xc9\\xb8\\x9a\\x80\\x81\\x04\\xe2\\xa8U7`\\x06C\\xe1S\\xcdR\\x12\\r\\xb1:l\\xb1\\x90V\\xe8\\xe5N\\x8el',\n+            constraints={\"min_size\": 39, \"max_size\": 139},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0228\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([300, 187188, 266028, 336648, 574892, 1060942]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"X}b/_>\\x0fnX\\x96\\xfb^\\xebf_OX86_\\xec3\\x9f\",\n+            constraints={\"min_size\": 13, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000156ed\\U00062055\u4f4a\u4ebd\u4f27\u4f5a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            20151,\n+                            94730,\n+                            196069,\n+                            217591,\n+                            275078,\n+                            528947,\n+                            620881,\n+                            806876,\n+                            819565,\n+                            890695,\n+                            945046,\n+                            997319,\n+                            1052940,\n+                            1063551,\n+                            1073965,\n+                            1079730,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 3,\n+                \"max_size\": 103,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.5009067459449733e-188,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.350399170995292e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004b8ea\\U00055ecb\\U000f233e\\U0003391f\\U0003397a\\U0003395f\\U00033933\\U00033986\\U000339f5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([211228, 440368, 449997, 534693, 617702, 1034510]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 11,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.535450904581243e16,\n+            constraints={\n+                \"min_value\": -5.7459472242965064e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.355190417481409e-147,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.148202477147836e307,\n+            constraints={\n+                \"min_value\": -2.2235001661546516e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.175494351e-38,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7455,\n+            constraints={\n+                \"min_value\": -22920,\n+                \"max_value\": -26,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    -20599: 0.13455110338805723,\n+                    -88: 0.10132484560835173,\n+                    -4822: 0.0636116883186857,\n+                    -11694: 0.0759304795080413,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": 6.103515625e-05,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.360827088164769e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.192092896e-07},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([44095, 49285, 266040, 620065, 1114110]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7013786840862822},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00a7\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([0, 9999, 14608, 69845, 326495, 353063, 1059827]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00041681\\U00041620\\U000416a0\\U00041679\\U0004162b\\U00041643\\U00041655\\U000416f6\\U0004164f\\U000416b7\\U00041640\\U000416a1\\U0004161e\\U00041635\\U00041714\\U000416e1\\U000416ae\\U000416d1\\U000416fb\\U0008da99\\U000416b1\\U00041650\\U0004170f\\U0004164b\\U00041626\\U000416f4\\U000dc79e\\U000416df\\U0004168f\\U000b2594\\U00041692\\U00041699\\U000be973\\U000416ad\\U0004167e\\U00041679\\U000416b0\\U000d2314\\U00041652\\U0005cb84\\U00041706\\U00041686\\U000c97c6\\U00052757\\U0004167d\\U000c11a8\\U0004168a\\U000416c6\\U000416dc\\U000bc13b\\U000416e4\\U00041645\\U0004161f\\U000416d3\\U00041692\\U000bc0c2\\U00041632\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([267806, 966774])),\n+                \"min_size\": 31,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1519695325568395e308,\n+            constraints={\n+                \"min_value\": -6.3820403962838184e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.264278169628419e211,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.20872895549343579},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.504307675021033},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1114,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -1026,\n+                \"shrink_towards\": 113,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.034703650232103e307,\n+            constraints={\n+                \"min_value\": -1.2422215928211448e16,\n+                \"max_value\": 7.71564488204863e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.5561188412938735e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u3943\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            14558,\n+                            96319,\n+                            163104,\n+                            210450,\n+                            393967,\n+                            756294,\n+                            800038,\n+                            968339,\n+                            1094762,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6993864642997686},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-7.057623656706142e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.0713880899203315e-54,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"+\\x9f\\xce\\xb2\\xae\\xca\\xcdSm\\x81<Em\\x1d\\x88Jo\\x98f8\\x85\\xa9\\x8e=d\\xb6\\x00>\\xcd\\x9b{\\xbfj_\\xf5@\",\n+            constraints={\"min_size\": 36, \"max_size\": 91},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 4.29634626574211e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.685394622441256e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-29172,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -15545,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000497f0\\U00049877\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([301040, 408115, 533516, 828290, 1114111]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 27,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0564048912225701},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5446248421869787},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.220446049250313e-16},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5807892235890803},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.6974387294735144e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 7.095099337586102e-266,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=86,\n+            constraints={\n+                \"min_value\": -21110,\n+                \"max_value\": None,\n+                \"shrink_towards\": -10,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9506178135397354},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd3\\xdc|\\x97\\x873t\\x14\\xcca\\xf5\\x8e\\x1dH\\x0bv[\\xa3W\\x145\\x07\\x94\\xc4\\xe8-\\xf8\\x9c~<\\xe9\\xca3.C\\xd4\\xcc\\x0c\\xf7\\xe9\\xae\",\n+            constraints={\"min_size\": 28, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.25445629127739827},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8093,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.530341688569057},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7822655430244101},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-30046,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 5529,\n+                \"shrink_towards\": -4_546_903_505_399_230_789,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-12,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u169b\u1684\u1693\u1690\u168b\u1692\u1684\\u1680\u1691\u1684\u1682\u1691\u168f\u1685\u169c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([3624, 258567, 523827, 679177, 699715, 1114111]),\n+                ),\n+                \"min_size\": 8,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xacr>\\x84\\xd72\\x9f1\\x05\\xc0\\xb7|a\\xe6\\x08E\\xabb8yh\\xa4KS\\xa9@Q=\\x06\\xdc\\x7f\\x0f\\xad\\xd8\\xbd\\x81\\x88@\\x14l\\x9b\\xb9\\x102\\xf7\\xee\\x01\\x18\\xb3\\x15f]\\x99@'\\xfb\\xb1\\x9f\\x1e\\xee\\x14\\xcc\\xee\\xb3\\xea321\\xba\\xb1\\xc4a\\x08\\x0f\\xd3\\xea\",\n+            constraints={\"min_size\": 29, \"max_size\": 129},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-48_482_728_586_192_212,\n+            constraints={\n+                \"min_value\": -396_285_829_104_428_653,\n+                \"max_value\": -30325,\n+                \"shrink_towards\": 404,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.402823466e38,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.1025137229349356e-300,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.9572337374129256e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00cb+\\x01\u00c1\u00b51\\x12b\\x82aq\u00f7\\x97\\x02D\u00a6B\u00d3\\U000fa4fb\\U0008a3dc\u00bbw\u00bd%\\x0e\u00ef\\U000a27ddX\\U0008d9cb\\x00\\U00087053\\U000f99e2\u00cc\\U000f2dba8\u00b7\\x06%Hq\\x0b\u00b3\u00db\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [0, 9999, 430213, 703726, 862821, 868850, 972406, 1059867],\n+                    ),\n+                ),\n+                \"min_size\": 40,\n+                \"max_size\": 43,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"'2\\x00\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.302792564324369},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.24827952699736e307,\n+            constraints={\n+                \"min_value\": -5.477931159433962e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 9.24827952699736e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=128,\n+            constraints={\n+                \"min_value\": 84,\n+                \"max_value\": 144,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    97: 0.00021713820103268783,\n+                    127: 0.0025632786125308086,\n+                    128: 0.0017939579428909976,\n+                    135: 0.0013153702246955566,\n+                    129: 0.0015038528641213753,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.4304764225964644e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.565954854449939e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00aa\u00cc\u00d5\\x83\\x87\\x12`W\\U0003ad98W\u00c9\\x9d\u00cf3Xu\\U00045c84D\\U0009a999\\x1b\\U00035146\u00d4\u00ac\ub00b\\x06\\x1a\u00c0\\x07\u00fd\u00ac\\x02\\x80\\x1fS\u00e0\u00d6_\\x18\u00e0\u00d5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            130011,\n+                            135887,\n+                            293099,\n+                            333695,\n+                            334407,\n+                            369013,\n+                            421244,\n+                            439244,\n+                            454265,\n+                            475623,\n+                            486172,\n+                            503993,\n+                            552415,\n+                            565524,\n+                            575468,\n+                            586379,\n+                            600705,\n+                            628679,\n+                            685983,\n+                            708266,\n+                            721825,\n+                            779375,\n+                            816235,\n+                            857362,\n+                            883547,\n+                            969664,\n+                            981299,\n+                            1023519,\n+                            1033362,\n+                            1074485,\n+                            1082492,\n+                            1110178,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 34,\n+                \"max_size\": 134,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.11882752026063328},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.302836276760458e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7814030996415473},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"f\\U000a7cf9\u00bc}\u00e2\\U0010187a\\x17/\u00e9\\U0003ba3a\u00d4\u00f4W\\x01\\x16\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            1024,\n+                            208969,\n+                            291076,\n+                            292451,\n+                            329566,\n+                            349472,\n+                            371710,\n+                            589945,\n+                            689335,\n+                            736457,\n+                            894094,\n+                            1014334,\n+                            1020679,\n+                            1053163,\n+                            1072980,\n+                            1082365,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 5,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"-\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.11021838786891916},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7116137594038094e308,\n+            constraints={\n+                \"min_value\": 4.685914532902948e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.5784804611080016e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"f\\x06r\\x84\\xa5*\\x18\\xa0\\xe5\\xd7\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.220446049250313e-16},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000557ea\ud850\uddb2\ud850\udd29\ud850\udd2e\\U00037501\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([147749, 504620])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-103_418_364_179_407_956_429_642_404_771_214_226_960,\n+            constraints={\n+                \"min_value\": -103_418_364_179_407_956_429_642_404_771_214_261_654,\n+                \"max_value\": 23965,\n+                \"shrink_towards\": 27081,\n+                \"weights\": {\n+                    -103_418_364_179_407_956_429_642_404_771_214_261_491: 0.001031919112466946,\n+                    -103_418_364_179_407_956_429_642_404_771_214_206_595: 0.0008673498740806697,\n+                    -103_418_364_179_407_956_429_642_404_770_475_946_821: 0.0005502916336577262,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-8.648489338247506e-97,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.8697854728168e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.1273925456393152e-251,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0959774739536701},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe6z\\x04\\x8e\\xf1\\x86\\xd2y\\x0e\\xf4\\xceB\\xcd\\x100\\xcf\\xf8~]os\\xbd\\xb0w{.}I\\xd0#\\tR._\\x8d@l\\xe440\\xe4\\xfbD\\x97\\xf4\\xa0\\x8c\",\n+            constraints={\"min_size\": 22, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000368bb\\U00066d6b\\U000368ba\\U000629b7\\U00036860\\U000368a5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([223266, 275256, 303266, 613142]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([375012, 461074])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=25871,\n+            constraints={\n+                \"min_value\": 24351,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001fe86\\U0001fee7\\U0001ff2f\\U0001fe7a\\U0001fe7d\\U0009e2fb\\U0001fe9c\\U0001feb9\\U0001ff18\\U0002fa51\\U0009fc1d\\U0001ff11\\U0001fedc\\U0001fecb\\U0001ff28\\U0001feee\\U0008195d\\U0001fe88\\U0001fee2\\U0001fe7d\\U000abeff\\U0001fe90\\U0001fe97\\U0001fef3\\U00045618\\U0001ff04\\U00059759\\U0001ff55\\U0001fe6a\\U0001feeb\\U0001fef4\\U00049bf7\ud85e\udd97\\U0001fe83\\U0001fea0\\U000672bd\\U0001ff4a\ud87a\udefa\\U0001febf\\U0001ff27\\U0004f269\\U0001ff26\\U0001ff09\\U0001fead\\U0001fee8\\U0001fedb\\U0001ff14\\U0001ff57\\U00090eca\\U0001ff36\\U0001feea\\U0001ff20\\U0001feec\\U0001ff3d\\U0001fea2\\U0001fe98\\U000628d3\\U0001feb3\\U0001ff37\\U0001fef6\\U0001ff4e\\U0001ff43\\U0001ff1c\\U0001ff27\\U0001fea9\\U0001ff12\\U0001ff5a\ud851\udef7\\U0001fe84\\U0001fea5\\U0001fee6\\U0001fe8a\\U0001feeb\\U0001ff29\\U000c3368\\U0001fe8a\\U0001fe6a\\U0001fe9a\\U0001fe80\\U0001ff21\\U000a1783\\U0001ff31\\U0001fedd\\U0001fef0\\U000ba6f0\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([130651, 825819, 1114111]),\n+                ),\n+                \"min_size\": 43,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00095f93\ud87e\udd05\ud87e\udd71\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            194674,\n+                            207820,\n+                            230746,\n+                            269379,\n+                            417415,\n+                            435691,\n+                            508642,\n+                            951950,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.833333645848401e307,\n+            constraints={\n+                \"min_value\": 2.3419495366923816e16,\n+                \"max_value\": 1.7976931348623157e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.457605489882973e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x18\\xbc\\xa5s\\x8abL\\xdc\\xcd\\xf9;2\\x0e\\xe7\\xb1\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud878\udfd8\ud878\udef6\ud878\udf3f\ud882\udd7f\ud878\udf23\ud878\udf2d\ud878\udef9\\U0007b857\ud878\udf51\ud878\udf6d\ud878\udf64\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([189153, 612756, 644799, 789946, 1017700]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xec\\xca`|\\xd45q\\x82\\x01\\xe2sB\\xc9em\\xf0\\xa6\\xa3\\x95\\xb0\\x0c\\xb5\\xc3\\xc3r\\x86\\xce\\xe1\\x0f\\xc2c\\xbd\\x8ah\\xb6sw\\xe7\\x98\\x12C\\xdaK*\\xc1\\x08Z\\xac\\xbeM\\x8f.\\x839\\x0e\\xead\\x9a\\x82\\x03\\xbc\\xf8^\\xa0\\x19\\xf4\\xf28\\xb12:\\x91}9v\\x1b\\xef\\x9aY;)\\x88=\\xe7P\\xbbe *\",\n+            constraints={\"min_size\": 50, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=12876,\n+            constraints={\n+                \"min_value\": 12867,\n+                \"max_value\": 102692268,\n+                \"shrink_towards\": -6640,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.225073858507e-311},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=27726,\n+            constraints={\n+                \"min_value\": 15,\n+                \"max_value\": 30556,\n+                \"shrink_towards\": -125,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"L\",\n+            constraints={\"min_size\": 0, \"max_size\": 85},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 7.323398459898638e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -4.232251029058969e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 8.679389178770336e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.095502715593375e247,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x16\\xc0\\xcc\\x92m/\\x8a\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=22475,\n+            constraints={\n+                \"min_value\": 22416,\n+                \"max_value\": 22503,\n+                \"shrink_towards\": -127,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u169b\u1684\u1693\u1690\u168b\u1692\u1684\\u1680\u1691\u1684\u1682\u1691\u168f\u1685\u169c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1000, 65535, 385368, 872950, 1064194, 1086097]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00014184\ud872\udc02\\U00014138\\U0001413f\\U00014150\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([82119, 253384, 280969]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc9gb\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u4277\u42de\u4290\u424d\u42aa\ubba3\\U0001522f\u6326\u42a3\u42df\u4254\u4295\u42a2\u42b6\u41f4\u423e\u4298\\U0001ddc4\u4245\u41f7\u42d8\ud840\udd3b\u4265\u42dd\u4236\u423f\u427a\u41f6\u4291\u4285\u4ed4\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([16867, 137859])),\n+                \"min_size\": 21,\n+                \"max_size\": 121,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=25992,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -1_503_246_891,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u01f5\u01df\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([300, 11558, 165364, 480617, 874832]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 8.316750069938102e-42},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-16879,\n+            constraints={\n+                \"min_value\": -21792,\n+                \"max_value\": None,\n+                \"shrink_towards\": 7459,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u02d1\u02ee\ud82f\udc50\u024e\u028c\u028d\u0243\u02db\u02b2\\U0007b61e\u0231\u02eb\\U00015a0a\u0200\u02ad\u02e8\u026a\u024b\u02a9\u02c2\ua861\u0289\u026b\\U00018eb2\\U0005aac6\u022c\\U0005653b\u02dd\u0215\u02ef\u026f\u0268\\U0005f88e\u0294\u02bf\ubd55\u02fe\u0210\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            512,\n+                            19655,\n+                            26737,\n+                            116524,\n+                            118354,\n+                            154178,\n+                            180513,\n+                            272223,\n+                            319206,\n+                            454522,\n+                            505265,\n+                            594109,\n+                            766128,\n+                            812826,\n+                            860757,\n+                            910271,\n+                            928236,\n+                            1038592,\n+                            1079253,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 36,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.28801338810866556},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-3517,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -2407,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([512, 92374, 959202, 1054840])\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.4846479111746037},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.27254025337352467},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=11185,\n+            constraints={\n+                \"min_value\": 300,\n+                \"max_value\": 19001,\n+                \"shrink_towards\": 24999,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.4372943007399555e306,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-98_749_698_192_877_571_629_420_332_173_518_856_490,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -18756,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"!\u00bb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1, 1024, 249724, 271407, 614935, 1114111]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2_021_693_029_040_637_240,\n+            constraints={\n+                \"min_value\": -2_021_693_029_040_637_422,\n+                \"max_value\": -3999,\n+                \"shrink_towards\": 1_457_159_553,\n+                \"weights\": {\n+                    -2_021_693_029_040_634_719: 0.1671042725005711,\n+                    -2_021_693_029_040_587_240: 0.04326564071497603,\n+                    -1_096_829_790_149_953_385: 0.09165358538732023,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.0179234895369112e71,\n+            constraints={\n+                \"min_value\": -1.7298553741055145e-52,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-4090491178128843.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.847465385762471e-187,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1170557477438764e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1646,\n+            constraints={\n+                \"min_value\": -60,\n+                \"max_value\": 8966,\n+                \"shrink_towards\": 28094,\n+                \"weights\": {\n+                    3499: 0.02157638717433969,\n+                    7436: 0.028324021499829207,\n+                    5036: 0.026009890555046492,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000555a7\\U00055653\\U000555d8\\U00055608\\U000b4212\\U000555bc\\U00055573\\U00055599\\U000555bc\\U0005558c\\U0005562e\\U00055627\\U00055647\\U000555fd\\U000555b0\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([349551, 373847, 648256, 868497, 925331]),\n+                ),\n+                \"min_size\": 6,\n+                \"max_size\": 106,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.00001,\n+            constraints={\n+                \"min_value\": 1.1754943508222875e-38,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.402823466e38,\n+            constraints={\n+                \"min_value\": 7.0802228513479304e16,\n+                \"max_value\": 5.804350495916157e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.654814068844426e-39,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"ah\\xdd%\\xa7\\xa7\\xfb\\xfc:\\x10\\xddr\\x10%G~S\\xb8\\x8c\\xb8\\x04Q:5\\n\\xe0k\\xa6gB{~\\x14\\xe6\\xa7H\\xb9@\\xcb\\xae\\xf92w\\xa2\\xd0\\xfa\\x86\\xe5ag\\x99\\xc0_\\x98\\x88e_32A`t]\\xfe\\x950\\xb3\\x02\\xbbZ\\x1a(X\\xdf\\xb4\\x91O\\r~\\xb3H\\xbd#u\\xa7D\\xf0\\xc9\\xe9m=j\\x01a\\x17.\\x19'\\xa8\\xe7`\\x99A0U\\xe5\\xe3\\x99\\x8d\\xa8\\xd4E\\xfe\",\n+            constraints={\"min_size\": 45, \"max_size\": 145},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x00\\x07\\xfe\\x0b\\x98\\xdfq\\x05E\\xc8\\x98\\x89\\xeb\\xd8q|Q\\xdd\\xc4\\xce!\\x94\\xa6@\\xc0\\xeb\\xc8\\x91^\\x0b\\x91\\xaf\\xee\\xec\\x08s\\x9c\\x03<\\xc3\\x91\\xe2\",\n+            constraints={\"min_size\": 32, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xaf\\xc9OJ\\xc4\\xd3\\xb7\\xb5\\xe2\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.69936234957585e307,\n+            constraints={\n+                \"min_value\": 5.54973018813037e-14,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9.69936234957585e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.4245562653040883},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001e3bf\\U0001e37d\\U0001e3ee\\U0001e459\\U0001e3c5\\U0001e422\\U0001e41a\\U0001e41d\\U0001e422\\U0001e439\\U0010b374\\U0001e3cd\\U0001e405\\U0001e46f\\U0001e448\\U0001e390\\U000c60d0\\U0001e3f9\\U0001e38d\\U0001e412\\U0001e3e3\\U0001e386\\U0001e466\ud848\udf64\\U0001e445\\U000ea7ff\\U0001e414\\U0001e38c\\U0001e3f5\\U0001e38e\\U0001e46c\\U0001e404\\U0001e407\\U0005a9b0\\U0001e388\\U0010aaa6\\U0001e3eb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([123761, 480238, 785570, 1096174]),\n+                ),\n+                \"min_size\": 8,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-9753,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.1441552466155056e307,\n+            constraints={\n+                \"min_value\": 2.7908612999686806e-229,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.450445100638952e156,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u01b3\\U00045b49\u01fe\\U00049a44\u0211\u0261\u01a4\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            404,\n+                            83894,\n+                            173280,\n+                            438340,\n+                            801810,\n+                            956934,\n+                            1011592,\n+                            1016849,\n+                            1021809,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x92`\\x0cS\u00f5\\x08Z\u00b2`\\U000e6952\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            404,\n+                            301772,\n+                            364142,\n+                            388964,\n+                            465648,\n+                            540109,\n+                            575276,\n+                            684445,\n+                            964147,\n+                            990152,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=14042,\n+            constraints={\n+                \"min_value\": 9956,\n+                \"max_value\": 15634,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9e'\\x89,\\xe9\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.144859962684416e16,\n+            constraints={\n+                \"min_value\": -2.434950772165973e-123,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.204831660856902e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.922756074049865e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.2950064685422972e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.4215978427198551},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=183,\n+            constraints={\n+                \"min_value\": 88,\n+                \"max_value\": None,\n+                \"shrink_towards\": -31603,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-6.317287345908974e16,\n+            constraints={\n+                \"min_value\": -6.636057157915501e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.925992408832254e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-97_902_369_545_905_204_746_689_342_656_539_749_010,\n+            constraints={\n+                \"min_value\": -97_902_369_545_905_204_746_689_342_659_816_895_692,\n+                \"max_value\": 40,\n+                \"shrink_towards\": 44,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9179397402958025},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1a\\x06\\x13g3\\xeb\\x0bgbr\\xd0\\xf7]\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xbd\\xb1K\\xe3\\xec\\xba\\xe0\",\n+            constraints={\"min_size\": 0, \"max_size\": 75},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-147_447_707_595_305_288_340_448_823_837_523_904_402,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -147_447_707_595_305_288_340_448_823_837_523_881_076,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001483a\\U00014908\\U0001489a\\U0001490a\\U00014894\\U000148aa\\U0001487c\\U000148de\\U00014835\\U00014887\\U000148d8\\U00014845\\U00014892\\U000a3a13\\U000148cc\\U000148cd\\U000148e5\\U0001484e\\U000148a8\\U000148bd\\U0001487d\\U00014853\\U000148da\\U0001482b\\U00014829\\U00014880\\U000148f6\\U000c10d4\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [83992, 410652, 413019, 481536, 526547, 675390, 776052, 891018],\n+                    ),\n+                ),\n+                \"min_size\": 27,\n+                \"max_size\": 117,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-64,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 214,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-77,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 19938,\n+                \"shrink_towards\": -2372,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".\",\n+            constraints={\"min_size\": 1, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=14339,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 24719,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud885\udea6\\U0004aae8\\U000164b7\\U0005552e\\uefee\\ueff3\\uf00f\\uf081\\uf07d\\U0005ed74\\uefd1\\uefe0\\U0001935c\\U0005fa04\\uf003\\uefd2\\uefa6\\U000592c1\\uefbd\\uef97\\uefbd\\uef9e\\uf043\\uf028\\uf019\\uefb5\\uf040\\uefe3\\uefbf\\U0004ab88\\uf05e\\U0002f248\\uefa3\\uefe9\\U00033d35\\uefcb\\ueff1\\uf06b\\uf044\\U00050935\\uf07f\\U00053dd8\ud872\udf49\\uefbb\\uf07f\\uf030\\U0003c92c\\uf04a\\U00019a96\\U00041de5\\uf081\\uf043\\uefef\\uf06c\\uf05f\ud820\udd2b\ud874\udee4\\uf06f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([61326, 393888, 509470]),\n+                ),\n+                \"min_size\": 12,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-31332,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -7547,\n+                \"shrink_towards\": 2444,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8126,\n+            constraints={\n+                \"min_value\": -102,\n+                \"max_value\": 12265,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd0\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8394908201945157},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-12895,\n+            constraints={\n+                \"min_value\": -18430,\n+                \"max_value\": 17,\n+                \"shrink_towards\": -27908,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=22507,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"?\\xcc\\x81\\xf7\\x8c)\\xfb\\xff\\xb5\\x9dL\",\n+            constraints={\"min_size\": 0, \"max_size\": 62},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.2120344210636699e305,\n+            constraints={\n+                \"min_value\": 3.395889866895031e115,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.175494351e-38,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.263620154249145e307,\n+            constraints={\n+                \"min_value\": -7.7882658890831645e242,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.299552834323001e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u4dd1\\U000f2edf\ud85a\udfa3\u4e30\u4dc5\u4e11\u4d5e\u4dda\u4ddd\u4d6e\u4e19\\U000d79c8\u4e34\u4e25\u4e08\u4df8\u4d4d\u4d3b\u4db0\u4d6d\\U0006e287\u4daf\u4e09\\U00051ef1\u4dfd\u4d4c\u4d54\\U00044e52\\ue996\\U0004706e\u4d42\u4d89\u4e35\u4e1c\u4dcd\u4d4d\u4d6e\u4dd3\u4dee\\U000be6cf\u4dcd\u4da8\\U000bee69\u4d65\\U000e06a0\ud85f\ude04\u4da7\u4dbf\\U0005aed5\u4d3c\\uf26f\u4e19\u4d69\u4d71\u4e30\u4e11\u4dfd\ud852\udee5\u4d7e\u4d42\u4dcd\\U00049221\u4e2d\u4dc9\\U000c254c\\U00063179\u4d6c\u4de6\u4e26\\U00044ea2\\U00048809\u4e2a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([19769, 453795, 751151, 1004156]),\n+                ),\n+                \"min_size\": 49,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 2.6200016606435327e-77,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.697683434601533e117,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x87\\xe6\\xf4Ud14M\\x98\\xb1\\xc5\\xf1\\xe0\\x9evG/q\\xc8I\\x9c\\x0e\\xc9!\\xd4%\\x89\\x925\\xb4\\x8e@q\\xf1\\x8a4\\x1b\\x0bf\\x8c\\xd5t\\xa3\\x16[\\xa0\\x9e\\xf7\\xe5\\x18\\xe7\\x11\\x1a\\x93\\x18\\xcem\\x07\\x16\\xdb0\\x07\\n\\x93\\xb4\",\n+            constraints={\"min_size\": 28, \"max_size\": 128},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7047557701518014},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=106,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000863feL\\x07\\U0009ea5c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1, 9999, 545961, 939724, 1092779]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 47,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=318,\n+            constraints={\n+                \"min_value\": 95,\n+                \"max_value\": 7_025_466_156_138_779_025,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"}\\x80a0\\xf5\\xd4R\\x8dL\\x1b\\x1f\\x8eqM\\xad\\t\\x84\\xb4\",\n+            constraints={\"min_size\": 7, \"max_size\": 64},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2_125_380_156_395_339_315,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 16226,\n+                \"shrink_towards\": 112,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8192,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -14945,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.0831148460561855e170,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.812777885120378e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=32320,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 6,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0008cb48\\U0008cabd\\U0008caa6\\U000a4521\\U0008ca8a\\U0008cab1\\U0008caee\\U0008ca4d\\U0008caef\\U0008cad7\\U0008ca76\\U000a0160\\U0008cabc\\U0008ca91\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([576074, 697726])),\n+                \"min_size\": 14,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.08016796627211155},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=15866,\n+            constraints={\n+                \"min_value\": 23,\n+                \"max_value\": 28409,\n+                \"shrink_towards\": -13487,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8519149706250211},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.068846272446435e-213},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"%3\\x9f\\x1f\\x06}\\xdc\\xe7\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.718611265046995e307,\n+            constraints={\n+                \"min_value\": 3.4203375201487154e257,\n+                \"max_value\": 1.0878206960701916e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.2722165681620476e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3991293574584406},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2_879_080_580_175_561_464,\n+            constraints={\n+                \"min_value\": 2_879_080_580_175_561_380,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=740060470,\n+            constraints={\n+                \"min_value\": 84,\n+                \"max_value\": None,\n+                \"shrink_towards\": -1_263_284_386,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"$7\u00b3\\x1e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            65535,\n+                            115861,\n+                            249542,\n+                            284702,\n+                            373937,\n+                            419574,\n+                            574343,\n+                            613339,\n+                            729848,\n+                            774815,\n+                            992741,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x06_g=\\x9d\\xf5\\x88\\x83H\\xfe\\xd2\\xf46[\",\n+            constraints={\"min_size\": 0, \"max_size\": 83},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-6.748296829950797e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.710703853901639e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\ua6fe\\U00061929\ua6bc\\U0006e6cd\ua65b\\U000555b0\ua6be\\U000f1a0d\\ua62f\ua688\\ua635\ua6c2\ua702\ua69e\\ua63c\ud880\udd0d\ua71f\ua648\ua647\ua6df\ua68a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([42539, 468835, 665918, 709400, 912472, 998389]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2472,\n+            constraints={\n+                \"min_value\": 123,\n+                \"max_value\": 16297,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.711317401758173e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.0515763546368126e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud886\udc73\ud886\udcd5\ud886\udc8d\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([202836, 268421, 294963, 988702]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=18,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 13,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.5174132675268536e308,\n+            constraints={\n+                \"min_value\": 6858902145681960.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 10000000.0,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9b\\xd3L\\xa1y|\\x86<-\\x99\\x14\\xe8\\x81\\xa2Q\\xeb<n\\x8e\\x9b\\xf1\\xaf\\x8aU\\xc5E(`\\x94[\\x10na\",\n+            constraints={\"min_size\": 13, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=11923,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 17238,\n+                \"shrink_towards\": -16,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.691797317511129},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0459\\U000e8a35\u0490\ud86a\udedf\u045d\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1024,\n+                            8192,\n+                            60456,\n+                            211692,\n+                            447200,\n+                            667633,\n+                            846978,\n+                            1011403,\n+                            1081338,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.219335915623827e307,\n+            constraints={\n+                \"min_value\": 4.4789233594989864e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.8436594999236376e58,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.121213252652737},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=30860,\n+            constraints={\n+                \"min_value\": 28220,\n+                \"max_value\": 38637,\n+                \"shrink_towards\": 6160,\n+                \"weights\": {\n+                    36273: 0.02714540759618946,\n+                    29476: 0.016001488307364083,\n+                    32797: 0.20862103283914343,\n+                    35765: 0.2364227935969586,\n+                    37194: 0.07381005794535613,\n+                    34054: 0.15832175666185722,\n+                    30860: 0.2714540759618946,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.4073993566025341},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe6\\xb5\\xe8Q\\xd2\\xb8\\x06Bw\\xa7\\x9a\\x0e\\x9e\\xcd\\xfd\\xeaL\\xa71\\x04)\\xc4)\\xe8hb\\xf3\\x02F\\xa4\\xec\\x90\\xd6\\xa4oqS\\xd0p\\xa9\\x11R\\x8b\\x0e\\x7f\\xd7\\xdb/yM\",\n+            constraints={\"min_size\": 27, \"max_size\": 50},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5e-324},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.829027837651939e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.015288118203534e151,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud846\ude7c\ud855\udc24\ud846\udef7\ud846\udeb0\ud846\ude96\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            137791,\n+                            138213,\n+                            139630,\n+                            224787,\n+                            372927,\n+                            471040,\n+                            540415,\n+                            569174,\n+                            674586,\n+                            843100,\n+                            1026134,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000ba4e5\\U000ba452\\U000ba44b\\U000ba49b\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([762892, 950416])),\n+                \"min_size\": 1,\n+                \"max_size\": 101,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004ab04\\U0004ab48\\U0004ab53\\U0004ab74\\U0004ab84\\U0009dc77\\U0004ab0b\\U000a8a16\\U0004ab7b\\U000b0336\\U0004ab2f\\U0004aace\\U0004aba5\\U0004ab8c\\U0004aad8\\U0004ab17\\U0004ab7d\\U000b3c68\\U00087d68\\U0004ab5e\\U00080e83\\U0004ab9e\\U000a98d7\\U0004ab26\\U0004aae1\\U0007f51a\\U0004ab1c\\U0004aafa\\U0004ab82\\U0004ab51\\U0004ab48\\U0004abbb\\U0004abbf\\U0004ab64\\U0004aada\\U0004aaff\\U0004ab3a\\U0004ab4c\\U0004ab37\\U0004abbd\\U0004ab05\\U0004aaef\\U0004ab29\\U0004ab7d\\U0005b846\\U0004aba6\\U0004ab74\\U0004ab01\\U0004aba3\\U0004ab21\\U0004ab76\\U0004aba2\\U0004ab87\\U000840c1\\U0004aad4\\U000990b1\\U0004ab01\\U0004abc9\\U0004ab26\\U0004ab5e\\U0004aaf7\\U0004abc8\\U0004ab00\\U0004ab1d\\U0004ab02\\U0004ab6e\\U0004abcb\\U0007a7bd\\U0004ab66\\U0007f60a\\U0004ab62\\U000aaf37\\U0008e6f6\\U0004ab3b\\U0004ab2d\\U0006168c\\U0004aae2\\U0004ab81\\U0004aad1\\U0004ab34\\U0004abc1\\U0004ab63\\U0004abbf\\U0004ab2a\\U0004ab8c\\U0004aaf4\\U0004ab36\\U0004ab07\\U000a9616\\U0004ab48\\U0004ab13\\U0004ab9a\\U000853af\\U0009c339\\U00070065\\U0004ab2e\\U0009a831\\U000afbd9\\U0009a066\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([305868, 739955])),\n+                \"min_size\": 49,\n+                \"max_size\": 149,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.640235773421167e307,\n+            constraints={\n+                \"min_value\": -5.157613883550234e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.640235773421167e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa4\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u3503\u3513\u3529\u34ca\u345c\u348c\u352c\ud884\uddc6\u34e0\u348a\u34e5\uc0c1\u3513\u3540\u3465\u4a3d\u353f\u34be\u3532\\U0005c2f2\u34ae\u3481\u34b8\u34ab\u3499\u3488\u34cd\u348b\\U0004aa8e\u3469\u3464\\ud915\u3540\u34d2\u346a\u3491\u3483\u3556\u3499\u3472\u347a\u3485\ud805\udc92\u3483\u3533\u34fb\u349c\u346b\u34f7\u346c\u346e\u34c2\u3471\u345e\u354c\u34e0\u34d2\u354e\u3488\u34df\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([13402, 450398, 877128]),\n+                ),\n+                \"min_size\": 30,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00050c90\ud887\ude7a\ud887\ude78\\U0006753f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [204276, 446912, 613518, 625357, 792947, 827827, 1092762],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1202,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -21,\n+                \"shrink_towards\": -8958,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xb8\\xc0\\xbc\\xf7>\\xe1\\xdd\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00053ba1\\U0004f218\\U0004f2b1\\U0004f23c\\U0005259e\\U0004f236\\U0004f2cd\\U0004f257\\U0004f226\\U0004f27c\\U0004f1dc\\U0004f2b7\\U0004f92d\\U0004f22e\\U0004f2af\\U0004f228\\U0004f228\\U0004f2a1\\U0004f20d\\U0004f26c\\U0004f280\\U0005129b\\U0004f291\\U0004f27f\\U0004f228\\U0004f1fe\\U0004ff18\\U0004f1e4\\U0004f25e\\U00053327\\U00054434\\U0005379b\\U0004f24f\\U0004f2c0\\U0004f27c\\U0004f1fc\\U0004f259\\U0004f23a\\U0004f2c7\\U0004f21f\\U0004f2d8\\U0004f1f6\\U0004f2be\\U0004f1f2\\U00053cc5\\U0004f21c\\U0004f240\\U0004f1ff\\U0005160c\\U0004f1df\\U0004f21c\\U00051195\\U0004f1ea\\U0004f201\\U0004f274\\U0004f21f\\U00052da6\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([324059, 346081, 672766]),\n+                ),\n+                \"min_size\": 30,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-20644,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -91,\n+                \"shrink_towards\": -20398,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8f\\xd0\\xe7\\x82\\xb9\\xde\\xdce0F\\xf4\\xa3\\x86}\\x05\\xa3V\\xab\\xcczS\\xdbZ\\xaf\\x18\\xf4\\x8aG+\\xd8\\r\\xb9\\xbdL\\x12>\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xcfi \\xdd\\x8f\\xe7\\x11\\xabJv\\xdd\\xe7'\\x85\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9999999999999999},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-449478966,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -449478905,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5.206462770564778e-103},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=261814927,\n+            constraints={\n+                \"min_value\": 261812494,\n+                \"max_value\": 261820820,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    261813570: 0.22178027035408324,\n+                    261818457: 0.014077264977466053,\n+                    261814927: 0.17777988344143741,\n+                    261820819: 0.06996634188350809,\n+                    261819586: 0.10200341388344072,\n+                    261814337: 0.014077264977466053,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000860bd\\U000b8f71\\U00098bcb\\U0008610c\\U000860ae\\U000860b9\\U000a29c4\\U00086058\\U00086120\\U000860cc\\U0008609d\\U000a47ee\\U00086075\\U000860b9\\U000bd9f8\\U000875bc\\U0008607f\\U00086071\\U0009bf1c\\U0008605e\\U000860b7\\U000860bc\\U00086133\\U0008607c\\U00086150\\U000860bb\\U000860ed\\U0008610d\\U00086070\\U000860a8\\U00086096\\U000a15da\\U0008613f\\U00086097\\U000860af\\U00086065\\U000860b1\\U00086114\\U00086147\\U000860f1\\U00086106\\U00086076\\U000bb0ad\\U00092d63\\U00086099\\U00086076\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([548948, 809178, 1046644]),\n+                ),\n+                \"min_size\": 35,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00039e43\\U00039d91\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([236938, 655390, 707351, 852659, 999803]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.2819477664936404e308,\n+            constraints={\n+                \"min_value\": -1.2281500607759667e-256,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.106734489347781e306,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=22406,\n+            constraints={\n+                \"min_value\": 1331,\n+                \"max_value\": None,\n+                \"shrink_towards\": -1_516_479_650_261_164_913,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.549916010394505e-125,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.4640076163163137},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5457265765124847},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd2\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8576622605151087},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3089321188928567},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.2057002314818293},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-51,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.046789127358309875},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9360196211774583},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9868591089150645},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-290473246,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -290473125,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.1754943508222875e-38},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.0509904175885544e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=106,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.2432693960351465e307,\n+            constraints={\n+                \"min_value\": 0.0,\n+                \"max_value\": 6.365324656343672e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.2432693960351465e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4056,\n+            constraints={\n+                \"min_value\": -123,\n+                \"max_value\": 15837,\n+                \"shrink_towards\": 0,\n+                \"weights\": {6584: 0.0303030303030303, 13630: 0.303030303030303},\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7215448681340134},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.1600313891515555},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u8eac\u8f17\u8eda\u8e51\\U000e8de0\u8e64\u8e4c\u8ed0\\U000e8530\u8e59\u8eb3\u8e9d\u8e44\u8f29\u8eb7\u8eb3\u8ec2\u8f12\\U000f8454\u8ef7\u8ebd\\U000fbd97\u8e53\u8e46\u8f02\u8f3c\u8f42\u8eae\u8f43\u8f05\u8ecd\u8ee4\u8e9f\\U000e74d9\u8ea1\\U000f3e58\\U000e4de3\u8eb7\u8e9a\u8f32\u8f1f\u8f30\u8e5f\\U000e80c5\u8e9f\u8e4c\u8f3f\u8ef1\u8ed9\u8f37\u8e88\u8e64\u8eef\u8ef0\u8ee2\u8e87\u8f22\u8f13\u8f40\u8e4a\u8f0b\u8e49\\U000f0b78\\U000d794e\u8edd\u8f2a\u8f43\u8ef2\\U000e64f5\u8ec7\u8ed8\\U000fda2f\u8ec7\u8eb8\\U000e06dd\u8f28\u8ea8\u8e58\u8f20\u8ef4\u8ecc\u8f07\u8ef4\u8eca\u8e63\u8edc\u8e8a\\U000f5589\u8f29\u8e66\u8f3f\u8e62\\U000d8c4c\\U000d116b\\U000dcdfe\u8e70\\U000f8bc0\u8f2b\u8e5a\u8e80\u8ee6\u8eb3\u8f35\u8ee3\u8e46\u8f0d\u8f04\u8ea9\u8f3c\u8e90\u8ece\u8eb6\u8e4b\u8ebe\u8f40\u8f1b\u8ee8\u8e53\u8ebc\u8e89\u8ee1\u8eb0\u8f05\u8f1f\u8ec1\u8f1c\u8e87\u8e9e\u8ecf\u8ea9\u8ea1\u8f15\u8e5c\u8e60\u8ee3\\U000e3f2c\u8e62\u8e6a\u8e5f\u8f3d\\U000e9814\u8f16\u8e67\\U000e09f9\u8ec0\u8e82\u8f0e\u8e62\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([36420, 42277, 848886, 1040390]),\n+                ),\n+                \"min_size\": 38,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00018e35\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([101926, 709940, 720676, 829299, 1054916]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\";\\xf4\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3333333333333333},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.43247040417403715},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=78,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 37,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-6_922_775_784_663_837_418,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -24611,\n+                \"shrink_towards\": -33,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.1983756255645628e38,\n+            constraints={\n+                \"min_value\": -3.402823466e38,\n+                \"max_value\": 6.328848235246537e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.1983756255645628e38,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-22495,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 13983,\n+                \"shrink_towards\": -79,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u5688\u5637\\ue7d2\u55db\\U0009f280\u56af\u5605\u5618\u5678\\U000af332\\U00097dc5\u566a\u5656\u55c8\u56b4\u5672\u56b2\u568d\u566c\\U000e3599\u562c\u568d\u568d\u55df\u5656\u5645\u56b2\u56a0\u5631\u5697\u55f9\u5634\u5641\u569b\\U0009db56\u55f4\u5651\u5694\\U0008508d\u560b\u55f4\u56b7\u5603\u55bc\\U0008f40b\u5695\u56a8\\U000ad1fb\\U000aec78\u563f\u5676\u562e\\U00100a2b\u55df\u56a9\u74cf\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            21944,\n+                            77431,\n+                            538012,\n+                            762454,\n+                            767399,\n+                            787088,\n+                            818684,\n+                            867537,\n+                            920736,\n+                            942005,\n+                            1031615,\n+                            1072073,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 14,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x18\\x08?\ud856\ude25G\\U00049275\u00a8\ud87a\ude61Td\ud856\udd7e\\x9b\u00a6\u00fc\\x1d\\x85\u8e52x\u00de0v>\\x82\\x82\\U000732f69=\u00ee\u00a11_pk\u00a4M\u00e8\u00f4\\x94\u00a5\u00fd\u00d3\u00ce\u00d0\\U00086d87\u00af&\\x1b\\U000924cb\u00bc\\x96p\\U000ea624\\x92\u00d1\\x03S\\U0004232b\u00c8?\u00bb#\u00d4\\x140\\x01\\U00079d74|\\r\\x97\\x02\u00cf\\U00099b09>\u00be\ud804\udc97\\U00049b91\\x1eyw\u00cd\\x0f\\x1c\\x18~\\x83\u00d0\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            396742,\n+                            408078,\n+                            412340,\n+                            447874,\n+                            695766,\n+                            778498,\n+                            843328,\n+                            859333,\n+                            962527,\n+                            1032055,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 28,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6397952453215873},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud81d\ude3e\ud81d\ude22\ud81d\uddda\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([95577, 125690, 208525, 211532, 523734]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x83\\x96\\xc1*OI\\x92v\\xa5\\x90>o\\x85\\x7f\\xdaC\\x05B\",\n+            constraints={\"min_size\": 9, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9798997378008296},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd5\\xcdlV\\xd1\\xd0\\xbe\\x955)\\xd9k7\\xc1\\x86\\x93\\xd1?7\\x8e\\xb9\\xf3\\xd38K$\\x1f\\xe7\\x93=1\\xff\\x18a\\x05\\xd1H\\x0b:r8$o\\x1c[\\xe7\\xb3\\xf3\\x0cK{\\xec\\x92\\xea\\x86\\xe8\\xa4Jv!\\x9d\\x86\\xf3\\xa2\\x7f\\xc7\\xd8.\\xdb\\xe3\\xaf\\x99\\xeeX\\x97\\x8b\\x9f\\xfe\\xdb\\x88\\xe9]@v\\x93\\xf30\\x80\\xdc\\x0b\\xfd\\x0e\\x15\\x1e\\x94\\n\\xac\",\n+            constraints={\"min_size\": 44, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-6.226484134260713e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 3.159776045645417e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.9256679395301456e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4_200_142_644_484_948_786,\n+            constraints={\n+                \"min_value\": -24432,\n+                \"max_value\": None,\n+                \"shrink_towards\": -4582,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"&o^\\xdbB\\xc3\\x8f\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4,\n+            constraints={\n+                \"min_value\": -58,\n+                \"max_value\": 7,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    -26: 0.04788825770027594,\n+                    4: 0.03504988149182487,\n+                    -38: 0.09577555763539787,\n+                    7: 0.054122891790218945,\n+                    -16: 0.003785119307620176,\n+                    -54: 0.07445443555866345,\n+                    -45: 0.09352282926880556,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7765360345244998},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud886\ude52\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([203121, 394463])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2442,\n+            constraints={\n+                \"min_value\": -15740,\n+                \"max_value\": 968,\n+                \"shrink_towards\": 30,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"hypofuzz.test_keys\",\n+            constraints={\"min_size\": 0, \"max_size\": 25},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-8411,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 100,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.3183792562082723e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=31985,\n+            constraints={\n+                \"min_value\": -24455,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00032d59\ud804\ude36\ud804\uddb3\\U000154ef\\U0004025c\ud804\udda1\ud804\udda1\ud804\ude3f\ud804\uddd9\\U000dbe5e\\U00012bf4\ud804\udd8e\ud804\uddba\ud804\uddc9\ud804\uddaf\ud804\ude00\\U00011253\ud804\udd64\ud804\uddf2\ud804\udd80\\U00011251\\U00011179\ud844\udf76\\U00039556\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([69983, 376635, 761936, 1012946]),\n+                ),\n+                \"min_size\": 17,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=57,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 90,\n+                \"shrink_towards\": -124,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.635543167885824},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=3776,\n+            constraints={\n+                \"min_value\": -26,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u7057\u7044\u7028\u6fc8\u70a3\u7071\u7026\u6fe0\u7066\\U00042964\u6ff9\u70b0\u70a4\u7055\u7091\u7063\u7012\\U000fe6a5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            28616,\n+                            33893,\n+                            216759,\n+                            224431,\n+                            227974,\n+                            372226,\n+                            382513,\n+                            402943,\n+                            465883,\n+                            732966,\n+                            766484,\n+                            789151,\n+                            961644,\n+                            975709,\n+                            1028580,\n+                            1051628,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 7,\n+                \"max_size\": 107,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8b!^\\xea\\x9ay\\xa0\\x94\\x10\\x9b\\x03\\xe8\\xd6xB\\x8d;1\\xfe\\xb7x\\x8a\\xd6\\x8cye\\xa3\\xdc&;\\xa2&\\xde\\xed\\x85c\\xbd\\x03\\xab\\xc6\\x10(\\xc2\\xf5\\x97\\nM\\xc7\\x07D\\xb8c\\xeb\\xbaq\\\"\\x18~\\xf7\\xc7M\\xd5Yh\\xe7\\xea\\xdb\\x9b)S\\xe7\\x1a6\\xfcH{\\xfdXi\\x05\\xc4\\x1e\\x9d`T\\xec\\x81\\t\\x13\\x892J'\\xfaP#`\\xde\\xa4\\xae\\x9e\\xcfn\\xb7MB\\x8c\\xc9\\x94`\\xa1\\xa2w\\xea\\xb4}\\x0f\\x05@LQ/^C`\\xd0\\x91!8D/\\xa6\\x1a\\xf2\\xd5\\xcf+\\xbd\\xe2E\\x1e\\xf5\\xce\\x93G\\xd3\\xce\\x96J\",\n+            constraints={\"min_size\": 49, \"max_size\": 149},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001c1a5\\U000360ed\\U0006eaf6\\U00070676\ud81d\udf09\\U0005329a\ud81d\udf1e\ud81d\udf3f\ud81d\udef8\ud81d\udf2f\ud81d\udf66\ud81d\udf78\ud81d\udf89\\U0005fc0c\ud81d\udf6f\ud81d\udf75\ud81d\udeb0\ud81d\ude98\\U0005bd10\\U0006fdab\ud81d\ude97\ud81d\udf8c\ud851\udc1a\ud81d\udf59\\U00053760\ud81d\udf26\ud81d\udf05\\U000577b4\ud81d\udf07\ud81d\udee3\ud81d\udf31\ud81d\udf82\ud81d\udf71\ud81d\udf1a\ud81d\udeca\ud81d\udf56\ud81d\udf14\ud81d\udebe\ud81d\udea4\ud81d\udead\ud81d\udee0\ud81d\udf85\ud81d\udf8e\ud83d\uddee\ud81d\udeb8\ud81d\udf7b\ud81d\udf74\ud81d\udeba\\U0006a7af\ud81d\udeab\ud81d\udf73\ud81d\udf6b\ud81d\ude96\ud81d\udf55\\U0003799c\ud81d\udf38\ud81d\udf30\\U00044f58\ud81d\udead\ud81d\udec6\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([95887, 470972, 837208]),\n+                ),\n+                \"min_size\": 47,\n+                \"max_size\": 147,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"P\\x93\\xf99\",\n+            constraints={\"min_size\": 1, \"max_size\": 101},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7672182679274397},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6595772089625994e308,\n+            constraints={\n+                \"min_value\": -3914135524217047.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.6595772089625994e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-4.576109389442273e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.411552981776398e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.462645494804953e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-33741,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -1530,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=6294,\n+            constraints={\n+                \"min_value\": 4092,\n+                \"max_value\": 7765,\n+                \"shrink_towards\": 0,\n+                \"weights\": {5790: 0.34102094946628164, 5479: 0.19879619527752357},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1000, 55849, 67883, 553253, 814617]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.659463021576421e307,\n+            constraints={\n+                \"min_value\": 1.4559981374952916e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.578094334275347e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.05,\n+            constraints={\n+                \"min_value\": 6.103515625e-05,\n+                \"max_value\": 4.927050546787835e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000371c2\\U0003d55b\\U00037233\\U00037214\\U0003724e\\U00037270\\U000ce8df\\U000371ca\\U000371c3\\U000371f1\\U000371b9\\U00037282\\U000371c2\\U0008f03b\\U00037233\\U0003ad3b\\U00037261\\U00037241\\U00037259\\U0003720e\\U00084547\\U000371ee\\U00037253\\U00037247\\U000372a2\\U000371bc\\U00037234\\U0003723a\\U000372b6\\U0003725d\\U0003728c\\U000371c7\\U000371d4\\U0003723d\\U000371c3\\U000371d7\\U00037295\\U00091085\\U00037204\\U000372a9\\U000ed7db\\U000371d8\\U000371fc\\U00037282\\U000372a9\\U000ee1e2\\U00037252\\U00037268\\U0003724c\\U000371d6\\U00037210\\U00037215\\U00037234\\U00037210\\U00037251\\U00092dd6\\U0003727c\\U00092141\\U000371bf\\U00037283\\U000ec435\\U000d1e59\\U00037256\\U000c9157\\U0003724a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            225721,\n+                            316243,\n+                            372853,\n+                            386154,\n+                            539962,\n+                            677055,\n+                            751330,\n+                            1000904,\n+                            1009683,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 31,\n+                \"max_size\": 73,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00082f0e\\U00082ec9\\U00082ec0\\U00082f5b\\U00082ebc\\U00082f52\\U00082f88\\U00082ee3\\U00082ea5\\U00082f6c\\U00082f64\\U00082f53\\U00082f31\\U0009ad09\\U00082edd\\U00082f49\\U00082f4b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([536228, 684687, 732069]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4_352_011_087_054_309_486,\n+            constraints={\n+                \"min_value\": -6378,\n+                \"max_value\": None,\n+                \"shrink_towards\": 532846445,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.0450277734272558e308,\n+            constraints={\n+                \"min_value\": 6.374899559824371e16,\n+                \"max_value\": 1.483776452393125e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.806290398599383e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000eda00\u0438\u0416\\U00085242\u04a9\u0475\u044c\u04d4\u04bb\u0408\u048c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1000,\n+                            68174,\n+                            370797,\n+                            441583,\n+                            544044,\n+                            628349,\n+                            668407,\n+                            686437,\n+                            885961,\n+                            994707,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 8,\n+                \"max_size\": 93,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9999999999999999},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.0863037053216612e-97},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=40,\n+            constraints={\n+                \"min_value\": -108,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u2015\\u2066\u9fe9\\u200a\u308a\u20a3\\u206d\u2c18\u2043\\u2061\\u2004\u20b9\\u2067\u204e\u2016\u2089\u44bf\u20d5\u2071\u8544\u2092\u209b\u2cde\u581c\u209c\u207c\u20a4\u2071\u7c92\\u200f\u2099\u20ad\u20a1\u3963\\u206a\\u2000\u201d\ua90e\\u20f9\u2011\u208c\u20b0\u2057\u2041\u20d2\u2094\u20e2\u20a8\u20ab\\u200b\u2090\u20b1\u2084\u2075\\U00038d40\\u209d\u20b8\\u209e\u20d6\\u202a\u494b\u8159\u20e7\u2077\ub541\u203c\u70eb\\u20c5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([8192, 47741, 227151, 236931, 1096432]),\n+                ),\n+                \"min_size\": 36,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-18375,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 30142,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xacr>\\x84\\xd72\\x9f1\\x05|\\x08bhSQ\\xa36y\\x17/\\x7f?:G\\x98\\x15\\x8a\\x80YQ\\xacqr\",\n+            constraints={\"min_size\": 9, \"max_size\": 109},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.1219527033207866e303,\n+            constraints={\n+                \"min_value\": -1.2851686456667626e272,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.199533272268088e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6.618779692242096e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.333839827809761},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=24717,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8888861614227157},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-14234,\n+            constraints={\n+                \"min_value\": -30099,\n+                \"max_value\": 11430,\n+                \"shrink_towards\": 6796,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00f90fD\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            300,\n+                            1024,\n+                            9999,\n+                            60357,\n+                            154535,\n+                            432938,\n+                            509526,\n+                            647385,\n+                            721017,\n+                            744605,\n+                            758613,\n+                            761918,\n+                            870377,\n+                            957359,\n+                            1020176,\n+                            1059351,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.401298464324817e-45},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7291797396804968},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"O\\xf7N\\x88\\r\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\";;\\xebQY\\xe5H\\x13\\xc8\\xb6D\\x08\\xa0\\xb1\",\n+            constraints={\"min_size\": 13, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7572944461217819},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ucd7a\ucde5\uce01\\U0004ad5b\\U0004cd11\ucdf3\uce29\ucdd9\uce10\ucd4a\ucd45\ucd6b\ucd52\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([52547, 783917])),\n+                \"min_size\": 1,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=51,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 1_857_407_384,\n+                \"shrink_towards\": -12149,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.6581638988698684e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.1584116106130748e-186},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.086430689614042e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"L\\xc58@\\xea\\x16E\\x96\\xcb\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.0801960377121394e22,\n+            constraints={\n+                \"min_value\": -13209371802.769402,\n+                \"max_value\": 4.395458080282707e22,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 406452.41467889835,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8156318760696155},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-12750,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -34,\n+                \"shrink_towards\": -46,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=25,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -21226,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00052a1e\ub81f\ub797\ub837\ub7c5\ub7d8\ub864\\U000532ae\ub7cb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([46982, 382111, 709498, 882320]),\n+                ),\n+                \"min_size\": 3,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -1.6005471291710748e-151,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.241295276361808e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([181310, 413894])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.9821500303575457e-256},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9.829093980072188e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5e-324},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe6\",\n+            constraints={\"min_size\": 0, \"max_size\": 44},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4701,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -63,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6797602088456568},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u7ab1\\U00064bad\u7a0a\u7a68\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            31238,\n+                            38360,\n+                            159879,\n+                            223833,\n+                            364950,\n+                            441938,\n+                            526337,\n+                            553868,\n+                            583743,\n+                            644975,\n+                            690129,\n+                            952818,\n+                            1047825,\n+                            1077360,\n+                            1094097,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x83\\xc5\\t?\\x13\\x17\\x05@\\xe2(\\x0e\\x1e\\x0f\\xde*PJ\\xee\\xc3\\x8c\\xd6\\x82w\",\n+            constraints={\"min_size\": 14, \"max_size\": 114},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.08878459023667175},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.0,\n+            constraints={\n+                \"min_value\": -3.0216380556663587e-84,\n+                \"max_value\": 6.891289577070672e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.1571508922812563e-87,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.8894269609398456e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.973148189911029e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0002fda5\u8375\u8347\u833e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            33516,\n+                            198649,\n+                            313974,\n+                            433962,\n+                            512183,\n+                            535641,\n+                            668364,\n+                            770375,\n+                            784686,\n+                            858646,\n+                            1099683,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd5\\xf6\\xcc\\xd7\\xb2\\xba\\xc3\\xc0\\r\\xa0x\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-20538,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -6538,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.010864404533148077},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u886a\u8828\\U000ca8fd\u87b4\u8810\u8825\\U000aed4e\u886f\u888d\\U0004eda7\\U000a9f8f\u8809\u87c0\u885a\ud851\udc4f\u885f\u889c\u88ac\u888f\u8821\u8851\u8890\\U00013680\u8890\\U0001572c\\U00042b87\u8836\u88ab\u8888\u8887\u87d2\u87ae\u8808\u889f\u8838\u887a\u88a1\u8809\ud852\udc4e\u881c\ud864\udef0\ud872\udd78\u882e\\U00043ad8\u8873\u8809\u87fd\u8838\\U000b6b13\u87c4\u87f8\u87fa\u8892\u8831\u8800\u882f\ud806\ude99\\U0001fdcd\u880c\u887d\u889a\u87cb\u8808\u887e\u8856\u97a6\u8870\\U00088b66\u87b5\u8897\ud874\udcda\u8869\u8864\u87d3\\U00042bff\u8858\u87d1\u8809\u8895\u881b\u87b4\u87b8\\U000c9d86\u87f3\u87b2\u87b6\u87b4\u882f\\U000c8658\u889b\u8864\u886b\u87ed\u884d\u87d9\u87cf\ud862\udc96\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            34733,\n+                            188922,\n+                            248330,\n+                            344742,\n+                            550108,\n+                            585674,\n+                            680287,\n+                            840242,\n+                            1000223,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 45,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.853412618491433e307,\n+            constraints={\n+                \"min_value\": -5.64789413147919e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.2935716994492823e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9909357527930873},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xee\\xa6\\xf2u\\x05\"\\xd8L\\xb6\\x05\\xae\\x9f\\x02\\xed\\xd4|`|\\xce\\xe6\\x89L\\xc2(\\xba\\x95V\\xfc\\xab-\\xf8\\xff\\xe4\\x86\\xe8\\x1d\\x19_\\xa4\\n\\xd8PN\\x16\\xbf\\x9c@\\xaa\\xd8\\x9bV\\xaa\\xc7H9\\xad',\n+            constraints={\"min_size\": 44, \"max_size\": 144},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\";\\xb8?tF\\xb8fj}7\\xb5S<{\\xe5)d]b\\x971\\x06\\x95\\xdd\\xaa\\x134\\x0f\\x87\\x01\\x15.\",\n+            constraints={\"min_size\": 28, \"max_size\": 47},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud840\udd73\\U00083332\ud840\uddf8\ud840\udd2b\ud840\udd58\ud840\udd10\\U0006229f\ud840\udd22\ud840\udd9a\ud840\udd7a\ud840\udd69\ud840\udd0e\ud840\udd9c\ud840\uddff\ud840\uddb6\ud840\uddbf\ud840\udd92\ud840\uddd1\ud840\udd18\ud840\udd2f\ud840\uddb0\ud840\uddc8\ud840\udd43\ud840\ude03\\U000823cc\ud840\udd70\\U000682fa\ud840\uddd7\\U000682a9\ud840\uddb7\ud840\uddee\ud840\udd87\ud840\uddfe\ud840\udd7f\ud840\uddc5\ud867\ude16\ud840\udd86\ud840\udd1c\ud840\udde2\ud840\uddbf\ud840\uddf8\ud840\uddd9\ud840\udd49\ud863\udef5\ud840\udd96\ud840\udd1a\ud840\uddb5\ud840\udd59\ud840\udd52\ud840\udd2b\ud840\uddcc\ud840\udd71\ud840\udd16\ud840\udd1f\ud840\udd4e\ud840\udd36\ud840\udd45\\U00035343\ud840\udd6b\\U000674cc\ud840\udd7a\\U00071191\\U00039f96\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([131341, 239943, 379706, 556782, 596903]),\n+                ),\n+                \"min_size\": 32,\n+                \"max_size\": 132,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8_669_211_235_806_385_186,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005bd61\\U00059082\\U0005912f\\U0005bfec\\U000590ae\\U000590f3\\U0005910c\\U00059062\\U000590b8\\U00059046\\U0005a782\\U00059130\\U000590d4\\U00059073\\U0005a2da\\U0005b9c8\\U00059096\\U0005908e\\U0005905c\\U00059044\\U000590fb\\U00059039\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([364600, 381067, 946474]),\n+                ),\n+                \"min_size\": 20,\n+                \"max_size\": 120,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.8892136186518227e307,\n+            constraints={\n+                \"min_value\": 2.838908950130441e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.759590340509394e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u04e9\u044c\\U0005582b\u04f1\u0450\u043b\u0423\\U000976e1\u0470\u04c6\u04b8\u04fe\u0459\u044c\\U00033032\\U00047c0e\u045c\u04be\\U00081eef\u04d3\u0425\u04a2\ud85b\udda2\u0437\u04d3\u0480\u04d9\u04a9\u049d\u0476\\U00080578\u04c4\u04ef\u0463\u040c\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([1024, 807674])),\n+                \"min_size\": 24,\n+                \"max_size\": 124,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=14765,\n+            constraints={\n+                \"min_value\": 16,\n+                \"max_value\": 31671,\n+                \"shrink_towards\": 127_107_729_329_217_065_437_251_650_337_812_411_654,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u2501\\u2069\u26d2\\u20c8\u201c\u203c\u2017\u20e8\u20b8\\u2073\u20dc\u204d\u24ab\\u202d\u2522\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([8192, 9999, 666708]),\n+                ),\n+                \"min_size\": 15,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"%f\\xe2\\xb7\\x00\\x04`{\\xd4\\x12\\xa7\\x89\\xcf\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1615,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -1521,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.480470811777295},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.30525310596160043},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x8f\\x02y\\xa7\\x85M\\xc4\\x8a\\xfd\\xeek\\xb5;\\x18_\\x9e\\x11V\\xa4A\\xfe\\x925\\x05\\xc2\\x925\\r\\xed\\x94\\x8e#b\\xae\\x07\\xed\\xe6\\x18\\x8f/ \\xfb6.\"\\xbc\\x01\\x08\\x00\\xac\\x8d\\x7f\\\\_v\\xaf\\xe6Ww0\\x95\\x02\\x07J)\\x17\\x94\\xd6\\xc9\\xb7{\\x897\\xb1\"\\xaa\\xca\\x85\\xa8\\t|\\x82A\\xf4\\x94\\xf3\\xb1\\xfc\\xf2\\xf2\\x97P!\\xbc\\xeb\\xbf\\xb7\\xc7\\xef\\xdb\\xa4\\xf3\\x0bmH\\xc6\\xb2\\xf4`\\xcc\\x0fs`Y\\x93\\xf7n',\n+            constraints={\"min_size\": 36, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u27ee\\U000868b0\u274b\\U00010252\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([9999, 568487])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000c5992\\U000c594d\\U000c5908\\U000d5bd8\\U000c5959\\U000c594d\\U000c65cf\\U000c5939\\U000c5939\\U000c596e\\U000c5916\\U000c58b1\\U000c5976\\U000cb216\\U000c5925\\U000c58dd\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([809129, 941625, 1047118]),\n+                ),\n+                \"min_size\": 2,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=18780,\n+            constraints={\n+                \"min_value\": 1045,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6172114955813585},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9458962814838856},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 274682385,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.358856309103459e307,\n+            constraints={\n+                \"min_value\": -1100965748701959.0,\n+                \"max_value\": 7.359368685023568e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.923060897902307e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u1558\u1580\u1562\\U000a29c4\u159f\u15d1\u1537\u1603\u1590\u1533\u15d2\u15b1\u161d\u15fd\\U0008a565\u161b\u15cc\u1537\u15eb\u1619\u153e\u15c1\\U00059d9d\u15f6\u15d5\u1597\u15e1\u1572\u1571\u15ef\u1574\u159a\u15fd\u1572\u1596\u15cd\u156f\u15f0\u15d7\u15a7\u1602\u160f\u159a\u1605\u158d\u15a6\\U00048424\u1530\\U000cd95c\\U0004ac31\\U0008b7c5\u154c\u15b0\u15e2\u15c5\u15f0\\U000ad738\u15e6\u161b\u153b\\U0008b3fb\u1573\u1622\\U000afbaa\\U00048ef3\u1607\u1608\u15ae\\U0005c929\\U000cb430\u15bb\u15f7\u1579\u1620\\U000d0fa9\\U0003af90\u1547\\U00013e25\u1555\u15c2\u15b0\u15a1\u15c8\u1610\u1585\u1554\\U00090e02\u8f9b\u160a\u15e2\u1569\u15b5\u1574\u15f9\u157d\u1559\u15c9\u1558\u1599\u15b6\\U0006b493\\U000551db\\U000c962b\\U000867f2\\U0006f711\u15f2\\U00071baa\u1587\u1644\u1582\\U000b8d70\\U0005b3bf\\U000923b2\u1567\u15e8\\U000ba0fe\\U0001d3bf\u1571\u15f0\u155b\u156c\u1618\u1578\u15b8\u1605\u160e\u158f\u15f9\u1550\u1571\u15aa\\U00087e48\u1608\u155c\u15e4\u15fe\u15ce\\U0007f070\u1529\u1535\u1546\u159e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([5414, 121352, 224686, 323002, 335267, 866563]),\n+                ),\n+                \"min_size\": 50,\n+                \"max_size\": 150,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7410863075013349e308,\n+            constraints={\n+                \"min_value\": 1.2432977135782828e207,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6.539331297764991e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud81d\udf93\ud81d\udf60\ud822\udd26\\U0008d150\ud81d\udf8a\ud81e\udc2c\\U000a48de\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([96077, 825201, 833417]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-212,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -115,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0008df4b\\U0004ef67\\U0004ef67\\U0004ef5d\\U0004f026\\U0004efc9\\U0004f00c\\U000c5279\\U0004f016\\U0004efdd\\U0004efbd\\U0004f004\\U0005f7be\\U00087f1e\\U00098503\\U0004efe4\\U0004f025\\U0004efad\\U0004f036\\U0004f019\\U0004efcb\\U000c0cd1\\U0004eff2\\U0004ef84\\U0004efb1\\U0004effe\\U0004efb7\\U0004ef5c\\U000a335f\\U0004ef6b\\U0004ef5d\\U0004f00e\\U000c1897\\U0004ef80\\U0004ef52\\U0004ef67\\U0004ef6f\\U0004ef8a\\U000b788b\\U0004eff7\\U00074045\\U0004f036\\U0004efc2\\U0004efd6\\U0004efe9\\U0004f008\\U0004ef59\\U0004efd2\\U0005f5ef\\U0005397b\\U0004f019\\U0004f016\\U0004ef61\\U0004f03c\\U0004ef70\\U0004efa6\\U0004eff7\\U0004ef88\\U0004ef97\\U0004f006\\U0004f045\\U0004f00c\\U0006b01c\\U0004ef4c\\U0004ef8b\\U0004f023\\U0004ef80\\U0004f03a\\U0004ef9d\\U0004efb5\\U0004efe9\\U0004ef4e\\U0004ef90\\U0004f028\\U0004ef63\\U0004f020\\U0006d4aa\\U0008a2c8\\U0004ef69\\U0004f032\\U0004f7da\\U0004ef5d\\U00077458\\U0004f011\\U0004ef9f\\U0004efef\\U0004ef9a\\U0004f024\\U0004efcc\\U0004efff\\U0004ef85\\U0004efcd\\U0004f012\\U000bc791\\U0004efa5\\U0004f035\\U0004f02b\\U000bfe3c\\U0004efea\\U0004efa9\\U0004f01b\\U0004efed\\U000600ac\\U0004f011\\U0004f02b\\U0004ef8d\\U0004f01f\\U0004f023\\U0004ef73\\U0004f01b\\U0004efa6\\U0004efb8\\U000c1261\\U0004f014\\U0004efbe\\U00080d08\\U0004ef66\\U000773b8\\U0004ef8a\\U0004ef75\\U0004ef90\\U0004f002\\U0004ef75\\U0004ef5e\\U0004efe0\\U0004efd4\\U0004efaf\\U0004f026\\U0004efbb\\U0004efa1\\U0004effc\\U0004ef9b\\U00052109\\U0004efed\\U0004ef92\\U0004efcd\\U0004ef78\\U0004efb3\\U0004ef9a\\U0004f008\\U0004f031\\U0008bb2c\\U0004efeb\\U0004ef5b\\U0004efff\\U0004eff6\\U0004f035\\U0004efae\\U0004eff9\\U0004ef5a\\U0004efc7\\U000b6f00\\U000b5021\\U000513dc\\U0004f034\\U0004ef77\\U000c5ed3\\U0004eff2\\U0004efb4\\U0004ef79\\U0004f015\\U0004f022\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([323403, 821225])),\n+                \"min_size\": 46,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00060114\\U0006008d\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([393322, 752800, 866415]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-34_094_356_442_116_280_328_987_853_242_804_239_768,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -34_094_356_442_116_280_328_987_853_242_804_215_057,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.676695733663959e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u27e4\u27b6\u280a\\U0004d1a7\u2732\u27f4\u276c\u27ac\u273f\u279d\\U00041121\u27fe\ud852\udf85\u27a7\u27fb\\U000426e7\u27ec\u27a0\u272a\\U000d4781\ufc71\u27aa\\U0005014f\u2803\u2712\u2737\u27a8\u2762\u2784\\U000e5611\u2723\\U000ce41c\u2800\u274c\u27ea\u2792\ud81c\udef2\u27da\u27fd\\U000e9224\u272d\u2768\u27fa\u27dc\\ueb80\ud84d\udee2\\U0007bef6\u280c\u275e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            9999,\n+                            335833,\n+                            431722,\n+                            533264,\n+                            830568,\n+                            889829,\n+                            922461,\n+                            974043,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 43,\n+                \"max_size\": 143,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.289863967743131e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x00\\x87l*m\\x92?\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=32344,\n+            constraints={\n+                \"min_value\": 23383,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.07642413531320004},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7_130_439_179_252_836_439,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=12142,\n+            constraints={\n+                \"min_value\": 12046,\n+                \"max_value\": None,\n+                \"shrink_towards\": -90,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1_586_329_322,\n+            constraints={\n+                \"min_value\": -1_586_389_602,\n+                \"max_value\": -29445,\n+                \"shrink_towards\": -5319,\n+                \"weights\": {-1_586_329_322: 0.5},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=3_184_312_771_548_756_691,\n+            constraints={\n+                \"min_value\": 3_184_312_771_548_756_673,\n+                \"max_value\": 3_184_312_771_548_756_749,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([101554, 361011])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7853964288010389e308,\n+            constraints={\n+                \"min_value\": -2.4178843908105335e39,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.9529451576592983e-286,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.504812616997976e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.138785182545645e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.515972569131529e307,\n+            constraints={\n+                \"min_value\": -1.5515963560739575e-49,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.068253985877484e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=17560,\n+            constraints={\n+                \"min_value\": 11186,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xfa\\x80\\x87\\xcf\\xce\\x8a\\xa2\\xed\\xbf\\xdc\\xff\\x96gL\\xca/\\x8f\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0554499994645319},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00010070\ud800\udc0b\ud800\udcb0\ud83e\udd73\ud800\udc1d\ud800\udc40\\U0001a725\ud800\udcea\ud800\udcc8\ud800\udc4b\ud800\udcac\\U00086c3d\\U000134e1\ud800\udc81\ud800\udc40\ud800\udc1c\ud800\udcea\ud800\udcb8\ud800\udcb9\ud800\udcbc\\U00010069\\U0001007d\ud800\udc9f\\U00010064\ud800\udc08\ud800\udcb3\ud800\udc29\ud800\udce5\ud800\udc21\ud800\udcce\ud800\udcc3\ud800\udca5\\U0008831e\ud800\udcb1\ud800\udcf1\ud800\udc4c\ud800\udc9e\ud800\udca7\\U00013d0d\ud800\udc92\\U00010069\\U0008413b\\U0001cc95\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [65535, 145729, 490632, 502013, 539928, 562566, 965515],\n+                    ),\n+                ),\n+                \"min_size\": 21,\n+                \"max_size\": 121,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.27703403519319175},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-21950,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 118_388_495_731_837_009_752_674_118_598_931_276_933,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.701451982651456e213,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6.490994859657418e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9b\\xe67\\xef\\\\bc\\tT#R+\\xa4:T~\\xe3dd<N\\xdc\\xe9\\x83\\xbb\",\n+            constraints={\"min_size\": 10, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.2776134510346298e291,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0089366812802588e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.15568093133860253},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.4168187705844463e308,\n+            constraints={\n+                \"min_value\": -7393642299055406.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.4168187705844463e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003f2fd\\U0003f277\\U0003f289\\U0003f301\\U0003f2d8\\U00066b30\\U0003f260\\U0003f28e\\U0003f24f\\U0003f2d6\\U0003f293\\U0003f314\\U0003f2e0\\U0003f2e6\\U000ca448\\U0003f2eb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([258598, 432058, 772607, 942807, 994049]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xe6\\xdf:\\x04\\x0b\\xa0\\xef\\x97\\xac\\x0cDx\\xec\\x97\\x01\\x8e7>\\x1c\\xc6\\t\\xe8~\\x90\\xc0zO\\xeb\\x8f9\\x88\\x00\\xef\\x9c\\x08cd-\\xa1\\x94\"M\\xdb\\x19\\x92\\xaf',\n+            constraints={\"min_size\": 36, \"max_size\": 104},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud87e\ude13\u27b6\u2784\\U000a84ee\u273e\u27e6\u2773\u2789\\U000cf870\u2790\\U000d1f04\u2799\u2722\u27a2\\U000cf4e6\u27fa\ud841\udc21\\U000d3bb3\u2801\u2733\u2722\u27a3\u27d9\u272a\u27eb\\U000463c6\u27db\u278b\\U000c6a7f\u2754\u275f\u277c\u278e\u27c0\u27f4\u2759\u2758\u2738\u2770\u2801\u274a\u2751\u27ef\u27c1\u27ba\u2775\u279f\u27aa\u2798\u27f6\u273a\u27f9\u2774\u2725\u271a\\U0003e746\u27bb\\U000cf928\ud834\udc9b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            9999,\n+                            33339,\n+                            89707,\n+                            200990,\n+                            253763,\n+                            311723,\n+                            370467,\n+                            478076,\n+                            538177,\n+                            619708,\n+                            678277,\n+                            717697,\n+                            780787,\n+                            817898,\n+                            825818,\n+                            876593,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 45,\n+                \"max_size\": 145,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u27e3\u27df\\U0001ece6\u273b\u27c1\u278f\u2806\u2806\u2794\u2764\u271d\u2787\u2730\\U0006566f\u2786\u274e\u27e7\u27ae\u27e5\u2743\u2794\u27c9\u27f5\u2805\u27c4\u279f\u27c2\u280d\\U0007632c\\U00063c92\u2773\\U00044230\u27d0\u27f9\u27ed\u27c2\\U00069321\u27ef\u2755\u27af\u27c5\ud888\udd78\u273c\u27be\u2756\u2777\u27cf\\U0004c088\u273f\u27d7\u2751\u27ef\\U0006563b\u27dc\u27c3\\U000454d4\\U00053f14\u27e5\u27b1\\U00065f11\u2724\u27a3\\U000363ee\u2801\u2807\u2728\u27b4\u2791\u2710\\U000ad26b\u278b\u2727\u2791\ud85f\udcd8\u2758\u27a1\u2773\u2777\\U00032ebf\u2792\\U0005568e\u2806\u2758\u2731\u2736\u27d4\u27e8\u27e0\u2723\u272b\u27b7\u280e\\U00045ee3\u27dd\u278f\u2731\u2792\u272c\u2745\u27aa\u27a2\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [9999, 65535, 74692, 511307, 693450, 711422, 758714],\n+                    ),\n+                ),\n+                \"min_size\": 37,\n+                \"max_size\": 137,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000369c9\\U00036a18\\U00036a4f\\U000a5040\\U00036a73\\U00036a20\\U00036a3f\\U00036a8b\\U00036a06\\U00036a60\\U00036a1b\\U0005ab54\\U0009bea6\\U0005e04d\\U000369c0\\U0009a00c\\U000369b2\\U00036a0f\\U00036a07\\U00036a18\\U000369a1\\U00036a24\\U000369ac\\U00036a25\\U00036a1c\\U00036a3f\\U000369dd\\U00036999\\U00036a77\\U00036999\\U000369c1\\U00036a43\\U000369a2\\U0003699f\\U00036a11\\U00097f08\\U000369ce\\U000369fc\\U000be656\\U00036a56\\U000369f2\\U00036a42\\U000369c3\\U00036a06\\U000369ef\\U00036a50\\U00036a7f\\U000369e5\\U00038fc4\\U000369e7\\U0003f49f\\U000369e9\\U000812ec\\U00036a14\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [223636, 267678, 310588, 411110, 453362, 840533, 841237],\n+                    ),\n+                ),\n+                \"min_size\": 45,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.178985214784725e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xbdp\\x05\\x94\\xf9\\xf1\\xab\\x8e\\xa7\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.080122515163508e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 4.600224044704454e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.7276687181516915e-29,\n+            constraints={\n+                \"min_value\": 1.3203822114192273e-92,\n+                \"max_value\": 2.220446049250313e-16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.225073858507203e-309,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd6\\x16R:\\x9ah\\xb6\\xd3\\x95k26\\xcf2\\x1a\\xdey\\xd9_\\x85k`\\x08\\xc4\\x1a3!\\xec\\xfc\\x16K\\xd5\\xcc\\xd3\\x1c\\xbb\\x14\\xabxv\\x88\\xbc\\x19\\xa0\\xfc\\xbc\\x8e^\\x04\\xdb1\\xf4C\\r\\x7f^|c1\\xa1\\xe8\\xda\\x99\\xa9\\x0b\\xf486\\x11\\xcb7\\xa5x\\x8b\\xc0\\x02\\x95*\\xac]\\xf5R\\x9eM\\x93\\xc1\\x9a\\xff\\x08\\x90\\x05\\xe1?EW\\xb5PB\",\n+            constraints={\"min_size\": 46, \"max_size\": 146},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u012d\u015c\u01f6\u0136\u0221\u4049\\U0005e322\\U00043f19\u01b4\u01b9\u0196\\U0008b85f\\U000e1b87\u017f\u01f2\\U0006dfa5\u01c3\\U000a42e2\u01ac\u0202\u0198\u020b\u01c9\\U0001610d\ud858\udce1\u0131\u020a\\U000b3aa4\u0141\u01b7\u020b\u0192\u018b\u015a\u0207\\U0003e174\u016c\u01fe\u0191\u021d\u0200\u015d\\U000d1169\\U000dcb55\u0168\u021c\u01f3\u0204\u01e6\u0163\u01e5\\U000164b2\\U0009c7ad\u0130\u013d\\U00037664\u016b\u0228\u012e\u0216\u0218\u0134\u0223\u01b2\u01df\u0209\u01fd\u0188\u01ce\u021a\u0174\u0159\\U000cd9a9\u0136\\U0004f0c0\\U000f8b55\u017a\u0184\u0133\u01fc\u01cb\u0168\u0206\u01c2\u01b4\u01ca\u01a1\u01f9\u015c\u01e9\u01b0\u01d3\u0196\u01be\u0132\u01ed\u0150\u01e3\u01f1\u01f4\u0189\u0170\u0198\u01c4\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([300, 1058515])),\n+                \"min_size\": 44,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7886,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 7167,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00015752\\U00015709\\U0001569c\\U000156aa\\U000156ae\\U000156f3\\U000156e7\\U000156ec\\U00015730\\U0001570f\\U00015697\\U0001568d\\U0001574b\\U00015775\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            87677,\n+                            191130,\n+                            259581,\n+                            331720,\n+                            455523,\n+                            514819,\n+                            639566,\n+                            645622,\n+                            942919,\n+                            1042683,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0007cdfc\\U0009281e\u024e\u024f\u01a8\u01dd\u0268\u0283\u0203\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([404, 159837, 300546, 688959]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9007102218873722},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.09338621351715e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00015bd9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [88981, 95114, 185850, 274411, 645763, 908576, 942758],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-4.093304458028323e-87,\n+            constraints={\n+                \"min_value\": -5.960872456753508e-87,\n+                \"max_value\": -7.476808990582152e-130,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.225073858507e-311,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"Y\\x19i\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6376108780578158e50,\n+            constraints={\n+                \"min_value\": -3.088300754715589e-280,\n+                \"max_value\": 3.102774593528034e50,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.339997927194225e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xac\\xcc\\x11\\xben\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.417024162374987e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=16293,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 1_381_286_195,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-938_992_878_737_979_896,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -938_992_878_596_407_698,\n+                \"shrink_towards\": -51,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u3a2f\\U000452ef\u3a56\u3a9b\u3a4b\\U0003c6d5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([14795, 143637, 224488, 290735, 556849]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00042442\\U00042424\\U00042497\\U000424a0\\U0004245d\\U000861cc\\U00042400\\U00042401\\U00042427\\U0008655a\\U00051877\\U000423ea\\U00059cd6\\U00042478\\U00042407\\U000424bc\\U000423f6\\U0004248d\\U0004574a\\U00042477\\U00042469\\U00042485\\U00042403\\U0004249c\\U000594c7\\U00065115\\U00042493\\U000423fc\\U000423fb\\U000423f6\\U00042491\\U0004249b\\U00042485\\U00042420\\U000423d5\\U0008a422\\U0004249f\\U0008da8c\\U0004240b\\U00064248\\U00062ced\\U000423e7\\U000424a7\\U00042452\\U00042461\\U0004243f\\U00042454\\U000424c2\\U000423f0\\U000423ea\\U00042462\\U00042416\\U000423fd\\U00042457\\U00059274\\U00042431\\U000424af\\U000423d4\\U00042433\\U0004249b\\U000818e3\\U000424c7\\U0004241b\\U000423f4\\U000609d9\\U0004241a\\U0004242d\\U000423d5\\U00042498\\U0007f0f3\\U00042477\\U0004240b\\U0007e634\\U000424bb\\U00042407\\U000424be\\U00043357\\U000424aa\\U000424c8\\U00042450\\U00042435\\U0004240d\\U000423e1\\U00042476\\U000424bf\\U00042479\\U000423e6\\U000768d3\\U0004efe8\\U000423d0\\U00080f08\\U00042486\\U0004245b\\U00042465\\U000423fc\\U00042411\\U000423f0\\U00042429\\U00042451\\U0004eef1\\U00042490\\U00042420\\U0004241e\\U00042419\\U0004244e\\U0004245f\\U000424af\\U00042415\\U00042461\\U000423e0\\U00042417\\U0004fa76\\U000424bc\\U00047122\\U00042431\\U0008d506\\U00087b40\\U00042463\\U00042409\\U00042412\\U000424b2\\U00042437\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([271306, 417986, 474495, 593715, 784205]),\n+                ),\n+                \"min_size\": 22,\n+                \"max_size\": 122,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -4.735061004935726e-269,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.40745696199644e306,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=19451,\n+            constraints={\n+                \"min_value\": 36,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.617928791485881e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xbc\\x9b\\xf8\\x9f\\xf4 \\x8c\\xcb\\xb0\\x96#R6v\\xc3X\\xe0ik_\\x954\\xd8\\xe8\",\n+            constraints={\"min_size\": 16, \"max_size\": 116},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.357626936562197e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0778160793234046e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 3.820027574097695e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 8.011639981777787e-213,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.10500304960511866},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8724970112309556},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-26070,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -26018,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=23981,\n+            constraints={\n+                \"min_value\": -5447,\n+                \"max_value\": 24942,\n+                \"shrink_towards\": -21118,\n+                \"weights\": {5787: 0.007502476921600737, 7101: 0.04249752307839926},\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe2\\xd4\\x8b\\x03\\x10Z\\xc2O\\xc2\\x17E\\x13\\x95\\xd7 WJ?D\\x85u\\xde\\xfa\\xf7\\x1a\\xd0~u\\xd3\\x16\\xf2\\xb8\\nQ\",\n+            constraints={\"min_size\": 20, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=6462,\n+            constraints={\n+                \"min_value\": 5525,\n+                \"max_value\": 30315,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9940,\n+            constraints={\n+                \"min_value\": 84,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.172027824819467e188,\n+            constraints={\n+                \"min_value\": 2.6687711537088224e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5e-324,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"fPE`\\xe2V\\x89\\xae\\xb0^\\xb6\\xc8\\x9c\\xac\\xddi\\xb5\\xe7\\xd6)\\xa0\\xe3\\x81\\xd9X\\x9e\\xfcz\\xb6\\xda\\x8f\\xfey\\xd6\\xfc\\xdf\\x9a\\x8f\\xb7\\xc1Z\\x82\\xabi\\x91a\\x98e\\xdd\\x1d\\xdc\\x84 \\x12&\\x85\",\n+            constraints={\"min_size\": 44, \"max_size\": 144},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6827105498718872},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.4321071985403018e107,\n+            constraints={\n+                \"min_value\": 2.225073858507e-311,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.8069883853032835e73,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.4757891827696922},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.7437557909998264e16,\n+            constraints={\n+                \"min_value\": -6.068745133144954e16,\n+                \"max_value\": 7.097168788782065e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8329316386664837.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=30684,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 48,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.8793810844364856e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.1023919243695956e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1_185_917_661_131_494_257,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -1_185_917_661_131_494_226,\n+                \"shrink_towards\": 717634984,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 6.103515625e-05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.40597847204502646},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00012a18\\U0001298f\\U000129ef\\U00012977\\U0001295c\\U00012a25\\U000129e5\\U0001295e\\U0001297c\\U00012a40\\U000129cf\\U00012a36\\U00012962\\U00012961\\U00012992\\U0001296a\\U00012a28\\U000129f2\\U00016e36\\U0001295c\\U000129d7\\U000129ed\\U000129d3\\U000129f6\\U00012a2d\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([76109, 257601, 438145, 438885]),\n+                ),\n+                \"min_size\": 21,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-41889187,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -41858708,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.150223050271887e307,\n+            constraints={\n+                \"min_value\": -2.225073858507203e-309,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5e-324,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-748993970,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -30733,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8771043127111182},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00e3\\xads\\x87G\ud84a\udf2d\\x14\u00bbt\\x0c\u00ab\\x8aU4\u00dd\u00d6rc2\\U00066419\\x17\u00dc\u00bf\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [0, 143998, 259504, 555748, 620150, 800267, 931753]\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.27300040293292566},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.055644834079171e307,\n+            constraints={\n+                \"min_value\": -114797354837274.0,\n+                \"max_value\": 5.055644834079171e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.055644834079171e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.03559339665047934},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-23938,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 65,\n+                \"shrink_towards\": 8969,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00039d13\\U0003a2a1\\U00039c64\\U00039c13\\U00039bea\\U00039d9f\\U00039c6a\\U00039bee\\U00039be0\\U00039c43\\U00039c65\\U00039c48\\U00039bef\\U00039bcc\\U00039bbf\\U00039c56\\U00039c82\\U00039f24\\U00039f41\\U0003a06e\\U00039c6b\\U00039c25\\U00039c6a\\U00039c60\\U00039bc0\\U0003a294\\U00039ca1\\U00039bd1\\U00039c0c\\U00039c80\\U00039c77\\U0003a2c1\\U00039bc0\\U00039c1d\\U00039c6f\\U00039c3b\\U00039c7b\\U00039bc3\\U00039be9\\U00039be6\\U00039c57\\U00039dbb\\U00039bb5\\U00039fa3\\U00039bfa\\U00039bed\\U00039c3f\\U00039c40\\U00039bfe\\U00039c13\\U00039bd9\\U00039fc2\\U00039c48\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([236469, 238373, 387667]),\n+                ),\n+                \"min_size\": 44,\n+                \"max_size\": 144,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1e-05},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"M\\x99\u00dc\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([0, 567432, 847738, 849603]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xbf\\xde$\\xdb\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.4667012265524634},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([776515, 1004697, 1067384])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-14291,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000c883b\\U00012997\\U00012a69\\U00012993\\U00012a05\\U000129fc\\U00012a1b\\U00012a6e\\U000aecba\\U000782c6\\U000129fe\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([76168, 831123])),\n+                \"min_size\": 9,\n+                \"max_size\": 109,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.060372200373668e308,\n+            constraints={\n+                \"min_value\": 4.069590813429289e87,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.7252411305260286e-236,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'z$\\xd8\\x19\\x0ci\\x88$ajG\"N\\x84\\xe9c',\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-31379,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 59,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9286739320260933},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000608ad\\U000608e0\\U000608fd\\U000845c8\\U00096129\\U00060901\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([395357, 630685, 679676, 681409, 943196]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6608831985029907},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa0\\xe4\\xe0g\\xf4F3\\xa1\\xc9\\xef\\x1b\\xa3e)\\xde\\x8f*\\xde\\x8c7\\xdb\\xfb\\xb4\\xa0\\xdf\\x94}W\",\n+            constraints={\"min_size\": 24, \"max_size\": 58},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"^\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5443649325389827},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=113,\n+            constraints={\n+                \"min_value\": -57,\n+                \"max_value\": None,\n+                \"shrink_towards\": 393565492,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.6366974814984187e291,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.7625691567212056e139,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8784077584980456},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"l}x\\x0fUK{\\xad\\xecE$\\x0f\\x1a\\xf77\\xa3d\\x1c\\x800M\\xbb\\x98]\\x7f\\x98\\x05ae)\\x0f\\xba\\xc6\\xe7\\xca\\x82\\x07\\x80\\xbd\\xfbj\\xcf\\xa7\\x04\\xc8\\xc9\\x1d\\xce\\xa6i\",\n+            constraints={\"min_size\": 43, \"max_size\": 102},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=596,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 4335,\n+                \"shrink_towards\": -18,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            404,\n+                            512,\n+                            55409,\n+                            133122,\n+                            516834,\n+                            765958,\n+                            824116,\n+                            860933,\n+                            867622,\n+                            891235,\n+                            905203,\n+                            1002529,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-22822,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 18068,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.08283345484274919},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u01fe\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([300, 90900, 1004467])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\u202f\u2021\\u2008\\U000b5bac\u204f\u20e4\ud83e\udd3a\\u20f2\u205d\u8586\u2046\u2015\u208a\u20d3\u2014\ud83e\udcb1\u204c\\u20ca\\u2065\\U000adaee\\u206d\\u202b\u2026\\u2060\\U00053d80\u203a\u20c0\u20b9\u207a\u207d\\u20c2\u207a\\u20f3\\u20f1\\u206c\u20bb\\u206c\u20a6\u20a6\u2030\u2038\\U000554bc\\U0004afbd\\U00047909\u20e3\u20b7\u9843\u2031\\U000b93ef\u201e\\u20ff\u2037\\u2006\u20e4\\u20fc\u204f\u2056\u20a5\u20ee\u20a1\u208a\u2033\\U000b6eb9\\U000522c8\ud857\udd56\\U000ad846\u20dd\u20b8\u20e9\u209a\u20b9\\u20cb\u2055\\u20c4\\U00047731\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            8192,\n+                            50688,\n+                            91966,\n+                            162496,\n+                            252274,\n+                            266246,\n+                            291705,\n+                            352212,\n+                            709354,\n+                            768969,\n+                            846290,\n+                            918176,\n+                            1037669,\n+                            1055196,\n+                            1103524,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 31,\n+                \"max_size\": 75,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-115,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0008b7cd\\U000792f2\\U00079314\\U00089c8f\\U0007927e\\U000792e0\\U00079297\\U00088521\\U00079328\\U00079288\\U0007925f\\U00079249\\U0007933b\\U0007928f\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([496196, 592213])),\n+                \"min_size\": 4,\n+                \"max_size\": 104,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=300,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1226,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 1543,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=31307,\n+            constraints={\n+                \"min_value\": 31255,\n+                \"max_value\": 31307,\n+                \"shrink_towards\": 54,\n+                \"weights\": {31303: 0.5},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-52,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -772,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9910477046855808},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud822\udfca\ud822\udfba\ud822\udf60\ud822\udfdc\ud822\udfeb\\U000c26e2\ud822\udf0a\ud822\udf65\ud822\udf56\ud822\udf37\ud822\udefb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([101108, 355070, 754188, 969965, 1025189]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.3740559923233735e308,\n+            constraints={\n+                \"min_value\": 6.142844223116469e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.3740559923233735e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7_864_322_305_892_328_683,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 21122,\n+                \"shrink_towards\": -5285,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.31316589688363e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.535757543360579e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004695b\\U00058124\\U000469be\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [289091, 516880, 521134, 672960, 764692, 1086449, 1114110],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u6f3c\\U000c6ce7\u6f5f\u6faf\u6fb0\u6fa5\u6fd5\u6f33\u6f50\u6f86\u6f14\ud857\uddcf\u6f34\u6f65\u7002\u6fe5\u6fc6\u6f87\u6f53\u6f82\u6f17\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            28424,\n+                            59186,\n+                            65535,\n+                            178258,\n+                            217809,\n+                            286615,\n+                            286696,\n+                            287659,\n+                            287689,\n+                            369250,\n+                            402480,\n+                            439086,\n+                            449201,\n+                            497259,\n+                            689064,\n+                            724112,\n+                            724541,\n+                            753434,\n+                            771631,\n+                            903642,\n+                            1023655,\n+                            1072017,\n+                            1085209,\n+                            1113524,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 10,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-10625,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -69,\n+                \"shrink_towards\": -22125,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-20766,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -20664,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.30873534887312776},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"D\\xa1\\xd6\\x12\\xe4\\xb3_V~\\x14\\xc0\\x8c4)\\x8a\\xc5ypy\\xb1\\x82\\x99b\\xea\\x80&\\x17\\xe6\\x04A\\xc1\\x8e\\x89\\xc5\\xb0\\xda\\xc4a\\xefu+\\xd8\\x0e\\xa0\\x90\\xe9Y\\xc4)i\\xc0\\x85\\x91,\\x82N\\x88\\x05\\x1e\\xc1\\xb2\\x14\\xde0\\x1a\\xb5d\\xd0\\x0bOZ#\\x1e\\xf29a\\x99\\xab\\x00}^\\x94L[0\\x03\\x9cry\\x907\\xe3\\x1c\\xfb\\x94\\x9f\\xee\\xc6y>\\xc0m\\x1c\\xaa\\x12\\t\\x10pNW\\xb7\\xe6\\x97\\x7f\\x83R\\xd8x\\xab0-\\xe4Z\\xe8V\\xe9\\x97\\x01\\xa4a!\\xe7O\\xbd\\xa4\\xe3\\xe9!\\x9c\\xeesg8z\\x97\\xee\\xf41\\x8e\\xd4\\x04$\\xd8\\x847;\\xb6\\xf2\\xe0\\xafb\\xf7\\x93\\xbf\\x00\\xf5\\x1f2\\xc9\\xc0|Y\\x1f|\\x0f\\x7f\\xc7\\xde\\xde\\x15L\\xf6\\x9c\\x90~\\xc2\\xef\\x1f\\xa9/Jy\\xab\\x7f\\x13$N:~\\xbc\\x9bJ\\x03=\\xfe\\nq\\x95\\x0c\\xc3\\xb1\",\n+            constraints={\"min_size\": 49, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=5223,\n+            constraints={\n+                \"min_value\": 2978,\n+                \"max_value\": None,\n+                \"shrink_towards\": -82,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xcel\\xe9\\x85\\x00p\\x06\\xbb\\xaf\",\n+            constraints={\"min_size\": 7, \"max_size\": 107},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0206\u0204\u01f2\u01d8\u01f6\\U000b360f\u0271\u026d\u022f\u024f\\U0010341b\u01c4\u01c4\u01ab\u0259\u01ec\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            404,\n+                            1024,\n+                            65535,\n+                            119352,\n+                            332191,\n+                            344747,\n+                            555479,\n+                            567594,\n+                            685712,\n+                            951584,\n+                            1057575,\n+                            1066622,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 7,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-32131,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -32069,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.failures\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x86Pl\\rs\\x90N*C\\x1f\\x00\\x1b]\\xcdP\\x92\\xad\\xd86U\\xb5\\x93\\xa4\\x08\\x0c\\x83(\\xa5I\\x91\\xe5\\x0c\\xbd\\xe1\\xff\\x16e&\\xbf\\x17G\\xa4\\x7fKEH\\xc5\\xec\\x0c\\xea\\xe6\\xf7\\xb0_Pb\\xe6]\\xb4\\xfc\\xb6y+\\xa7(le\\x18SQV\\xcf\\x0b}u\\xc0\\xc8\\x00Sau\\xd3\\x8b\\xb0\\xf2X\\xc5\\xf5y\\xa7Z\\x1f\\xb0\\x83\\xa5f\\xa9V\\xe7ed\\xba\\xa5\\x0b\\xdd\\xdd\\xfc\\\"?\\xca\\xd0\\xc9p\\x1a\\x90\\x94J:'\\x10)I5P\\xa6y\\xaeFt\\x85o\\xe3\",\n+            constraints={\"min_size\": 32, \"max_size\": 132},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8729805582272601},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004fe73\\U0004fe02\\U0004fe93\\U0004fdbe\\U0004fdf0\\U0004fdbe\\U0004fe26\\U0004fd9f\\U0004fe71\\U0004fd9b\\U0004fe32\\U0004fe0b\\U0004fe56\\U0004fe8a\\U0004fdbd\\U0004fe7a\\U0004fda3\\U0004fe55\\U0004fe5e\\U000d97ac\\U0004fe3a\\U0004fe5b\\U0004fe18\\U0004fe30\\U0004fe13\\U0004fdc4\\U0004fdef\\U0004fe32\\U0004fe22\\U0004fd9b\\U0004fe96\\U0004fda1\\U00068305\\U0004fe18\\U000fd77b\\U0004fdf3\\U00064946\\U000b8d7a\\U0004fde7\\U0004fdc4\\U0004fe92\\U000fd5e8\\U00091b0d\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([327063, 1114111])),\n+                \"min_size\": 29,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6232069875942154e308,\n+            constraints={\n+                \"min_value\": 2.196362364194372e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.697279548972436e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.402823466e38,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.2961203823987512e-58,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.169533225707041e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.9353471745261784e-201,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.7922692372952725e-205,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-5688,\n+            constraints={\n+                \"min_value\": -28894,\n+                \"max_value\": 5,\n+                \"shrink_towards\": 66,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud83c\uddfa\ud83c\uddf8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            71188,\n+                            252317,\n+                            288209,\n+                            340688,\n+                            465490,\n+                            467718,\n+                            514421,\n+                            611202,\n+                            707395,\n+                            781935,\n+                            807737,\n+                            941564,\n+                            953987,\n+                            1085600,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-30959,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 119,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00070235\\U00070223\\U000702e2\\U00085ab0\\U000702fd\\U000702be\\U000702ed\\U00085e6c\\U000702fc\\U000870a7\\U00070269\\U00081557\\U00070272\\U0007025d\\U0007023a\\U00070295\\U0007a3cf\\U00070286\\U0007023f\\U00079889\\U00070277\\U00070240\\U000702fb\\U00070209\\U00070229\\U0007020f\\U0007026c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([459267, 555108, 1063886]),\n+                ),\n+                \"min_size\": 20,\n+                \"max_size\": 120,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.4202286680381364e307,\n+            constraints={\n+                \"min_value\": 3.782131391295587e16,\n+                \"max_value\": 1.3744215091938113e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.134772676984903e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=41750,\n+            constraints={\n+                \"min_value\": 20555,\n+                \"max_value\": 3_305_236_713_896_678_908,\n+                \"shrink_towards\": 2_996_536_064_701_075_222,\n+                \"weights\": {\n+                    34330: 0.050989821718400295,\n+                    20555: 0.14062404301534503,\n+                    57197: 0.2790342520763521,\n+                    3_233_743_546: 0.2812682691220922,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.3809182783485304e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00f6\\x0e2\u00bc\u00e5\u00dcD\u00ae\\x00\u8feb\ud85f\udc270\\x9a\\x0f\\U000458e7\u00bb\u00a8-\u00e2\u00f8\\x1er\\U0003e30c\ud882\udc54\u00e4\\U0003d00a\u00f4\u00f9Z\\x87\u00e8\\\\\u00e5\\x1d\u00ba\u00c4\\x82\\x8b:\\x10\\U00049e63\\xad\\U000667fe\\U00048852\u00f54\\x02hs\u00a9\\x1f\\U0007d7e3\ud886\udc49\\x8a\u00bd;\\U000705a0.\u00b5\ud840\uddac!\\x8b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([0, 630360, 804095]),\n+                ),\n+                \"min_size\": 45,\n+                \"max_size\": 145,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd0x\\x98\\x8e\\xe4\\xf5\\x02\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u280f\u2752\\U0009ee9a\u276c\\U00097b57\u273d\u2771\u27b7\u2782\u274c\\U000e56c0\u277a\\U0009d84f\u2731\u27e1\u2785\u273b\u272c\u2726\u2772\u2806\u27a3\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([10005, 142692, 264966, 958908, 1000842]),\n+                ),\n+                \"min_size\": 9,\n+                \"max_size\": 109,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004cf81\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([315189, 344410, 809605]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"oS=t\",\n+            constraints={\"min_size\": 0, \"max_size\": 86},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"f\\n\\x96\\x96\\xdc\\xe3:\\xa2\\x84&\\x95\\x89\\xf2\\xcd\\x08\\x07\\x11\\xc8Q\\xa1\\xd3\\r\\xd7\\x07\\\"\\x8c\\xebK\\x87T\\xf7\\xb6\\xef\\xc3\\x17e\\xf9\\xb4z\\\\'xw\\xd4\\xbf\\x9e9qF\\x98\\x11u/[4\\x95\\x9c\\xb4\\x10\\xcf\\x8f\\x87\\x91\\xd5\\x8ad\\xdb\\x92\\xb7\\xde\\x93\\xf5\\xa62]\\x13\\xa6\\xc2\\xc7Gx\\xfdba\\n2`F\\xb9\\x82\\x0eEN\\x0b\\xe6\\xe9\\xecd\\x0e\\xbf}\\xb5K\\x8c\",\n+            constraints={\"min_size\": 44, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"+-42\\xa3hB\\xac{+\\xb8a\\x0eH\\xb1k\\xb3\\xc9a\\x1e\\xe3\\xee\\r[\\xe0\\xb0\\x05\\xf0\\x07\\xb7\\xa2\\x0br4G5\\x1a\\t\\x1d\\xd5J\\xa1 \\xb0rZ\\xdc%\\x14\\xb4\\xc8\\xed\\x88\\xf6\",\n+            constraints={\"min_size\": 28, \"max_size\": 128},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.9746067651541664e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.7024481410535348e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001aedc\\U0001ae18\\U0001aed1\\U0001ae99\\U0001aee2\\U0001aeb2\\U0006ca08\\U0001ae5f\\U000fb483\\U0001aec7\\U0001aef8\ud840\uddcd\\U0001aec3\\U0001aec5\\U000ccb33\\U0001aeb2\\U0008f6e6\\U0001ae90\\U0001ae2c\\U0001ae9f\\U000c2d20\\U000d17d6\\U0001ae52\\U000c0911\\U0007d923\\U0001ae68\\U0001ae87\\U0001ae66\\U0001ae81\\U0001aed1\\U0001ae0f\\U000b520d\\U0001ae58\\U0001ae22\\U0001aeb5\\U0001aeac\\U0001aeaa\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            110075,\n+                            137563,\n+                            233479,\n+                            241456,\n+                            386089,\n+                            880983,\n+                            911763,\n+                            1062862,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 26,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.22232675810087438},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1027,\n+            constraints={\n+                \"min_value\": -11156,\n+                \"max_value\": None,\n+                \"shrink_towards\": 1_138_179_174_816_262_100,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=59,\n+            constraints={\n+                \"min_value\": -70,\n+                \"max_value\": None,\n+                \"shrink_towards\": -157_267_195_621_638_558_069_914_769_784_036_298_734,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.558855163002886e307,\n+            constraints={\n+                \"min_value\": 8.834735093067813e-203,\n+                \"max_value\": 7.558855163002886e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.581601015600785e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7610,\n+            constraints={\n+                \"min_value\": 49,\n+                \"max_value\": 30686,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    23187: 0.0666415830726879,\n+                    7610: 0.22788103799349532,\n+                    11393: 0.1855111186596,\n+                    11108: 0.18703076315897413,\n+                    7304: 0.02230572545901929,\n+                    30077: 0.046064646594908,\n+                    17223: 0.11394165841333179,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=5454,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 19214258,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.05,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 0.5,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9279645974580892},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"c\\xca\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=115,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=145,\n+            constraints={\n+                \"min_value\": 93,\n+                \"max_value\": None,\n+                \"shrink_towards\": -125,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 4.741804311760761e-233},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=21440,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.515347937757478e230,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 7.171424138982464e-206,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 3.315166391825972e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0067531280401785e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"P\\x0c\\xa7\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x02v\\xb2\\x8dF`\\x08\\xb3:2\\xb8^\\x81\\x1d\\xa6\\xb1\\xb9\\xd5X\\xd6\\x90\\xd0\\xb3u/\\xda\\xcd\\xc3\\x8a+.$\\x97\\xcf.\\xb7\\xe1~>\\xc6\\x06/EdK\\x9b\\xf5\\xbf\\xe5z;\\x03Ag\\t2z\\x1c\\xa5\\xd7+\\xe3\\xf0Cr? *N\\xe7\\x9aQ\\x85\\xc5\\xf9h\\xb7\\xeb\\xf3\\xa4#K\",\n+            constraints={\"min_size\": 25, \"max_size\": 125},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.8662143575484551},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7333,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=30774,\n+            constraints={\n+                \"min_value\": 27,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            404,\n+                            45164,\n+                            148850,\n+                            315427,\n+                            370310,\n+                            373590,\n+                            527052,\n+                            585836,\n+                            709849,\n+                            738863,\n+                            749523,\n+                            749603,\n+                            775455,\n+                            787543,\n+                            794430,\n+                            925048,\n+                            1069357,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x19t \",\n+            constraints={\"min_size\": 1, \"max_size\": 101},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\ufdd0\ud833\udf63\ufce0\ufd4d\\U00045dfd\ufd6e\ufd84\\U000567ec\ufceb\ud820\udcd8\ud851\ude8a\ufdbe\\U000584df\ufd0c\ufcf8\ufced\ufda7\\U0004aace\\U00055f6c\ufd1e\ufd1d\ufd3b\ufd0f\ufd3f\ufd92\ufd51\\U000149bc\ufdad\ufd4a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([64729, 173838, 226442, 383082]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-21331,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 1024,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1e-05},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.2191444096380284e307,\n+            constraints={\n+                \"min_value\": -3.3408260299566256e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.3881443771795002e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u270f\u27fe\u272e\u27f6\u2757\u27ea\u2748\u27f4\ub95e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([9999, 348358, 634899, 891610]),\n+                ),\n+                \"min_size\": 7,\n+                \"max_size\": 107,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.222989830759661e16,\n+            constraints={\n+                \"min_value\": -3.2762189634296896e16,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.222989830759661e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.06560022734459793},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.10401629797060477},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 3.880686439318204e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.728099982047362e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8518,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 68,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"`\\xfbp\\x83\\x95F\\x8cM\\x11\\xba\\xdct\\xb44\\xf7cf6M\\xdb\\x8e1\\x05\\xcf\\xe5\\xe3(\\xfb\\xb5\\xf3l\\xe4\\x8ed.\\xdb\\x06\\xff\\x0f\\xbf(\\x93\\x81\\xc0()\\x98\\xf5\\x9f\\x1a\\xaa\\x82\",\n+            constraints={\"min_size\": 26, \"max_size\": 126},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7212,\n+            constraints={\n+                \"min_value\": -11525,\n+                \"max_value\": 55,\n+                \"shrink_towards\": -8380,\n+                \"weights\": {\n+                    -3071: 0.1678537924604856,\n+                    -3811: 0.09489801967960122,\n+                    -7212: 0.1944939766869496,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.443400831263027e307,\n+            constraints={\n+                \"min_value\": 2.4628006098791504e16,\n+                \"max_value\": 7.216585132812356e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.443400831263027e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9195384736850769},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"AU\\xb2%\\xd9\\xcfd\\xf0\\x0c\\x15d;@\\x8fui/\\xac\\xb3\\xc3\\x0c(\\x93\\x1bn\\xda#(m\\xfb\\x85k\\xc4\\xaf\\xd1\\xab:t#!5v\\xde\\xa3\\xbb\\xed(P _U\\xa0~\\x87t_Y\\x1e\\r\\xd1\\x00\\xd2\\xc6\\xdd\\xc6\\xb9\\xbe(\\xb6\\x94\\xf1\\xfcA\\x99~bA\\x9e\\x1b\\x14Jc\\xd0Jt\\xfc\",\n+            constraints={\"min_size\": 48, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8224416379412272},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=84,\n+            constraints={\n+                \"min_value\": 83,\n+                \"max_value\": 104,\n+                \"shrink_towards\": -18,\n+                \"weights\": {\n+                    87: 0.02708126508945906,\n+                    94: 0.0016289867002204032,\n+                    102: 0.012338490541136917,\n+                    103: 0.0009028239208158387,\n+                    93: 0.048902127954307206,\n+                    104: 0.00668012929812303,\n+                    100: 0.00013360258596246057,\n+                    97: 0.059333062722554404,\n+                    90: 0.10665575075732113,\n+                    98: 0.13130795045691143,\n+                    83: 0.017209585226935314,\n+                    86: 0.033369750762549465,\n+                    101: 0.09240293162531124,\n+                    84: 0.06680129298123029,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.21134015834376713},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-23700,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x85h\\x14\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.7871952415246285e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-2.3701786337953543e97,\n+            constraints={\n+                \"min_value\": -4.804406497646838e97,\n+                \"max_value\": -3.2441614642669564e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.8169159300190043e97,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.576014952905267e307,\n+            constraints={\n+                \"min_value\": -2.13857583698651e-37,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.07853378479434e218,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([104720, 735246, 748604, 1039579, 1105256]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud870\udd91\\U0005609b\\U001014b33^\\x17Gj\u00d9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            1000,\n+                            46449,\n+                            127392,\n+                            164316,\n+                            196680,\n+                            326002,\n+                            400211,\n+                            458989,\n+                            589227,\n+                            684436,\n+                            1099437,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00056c94\u0409\u0438\\U000b19b8\u03f0\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            1,\n+                            1005,\n+                            8572,\n+                            54666,\n+                            204243,\n+                            218099,\n+                            305687,\n+                            314746,\n+                            400101,\n+                            415209,\n+                            433451,\n+                            515958,\n+                            565734,\n+                            726658,\n+                            777478,\n+                            832100,\n+                            876213,\n+                            898783,\n+                            947064,\n+                            968950,\n+                            994837,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.362548999182632e307,\n+            constraints={\n+                \"min_value\": -1.2107233078335641e-297,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8661952275015552},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xce\\xfe_\\xea\\xd7\\xd1\\xcb\\r\\x93\\x05\\x8e\\xc6\\n\\x04\\xe3\\xbe\\xd0E^\\x06\\x12\\xa2px\\xac\\x1c\\xd2P>\\xe6N.@\\xc3i-< \\xbf\\xeb\\x88\\xcd\\xbe\\x13\",\n+            constraints={\"min_size\": 35, \"max_size\": 135},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4391,\n+            constraints={\n+                \"min_value\": -14825,\n+                \"max_value\": 6,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    -2326: 0.008824879896748144,\n+                    -13937: 0.021485614379790876,\n+                    -10077: 0.02876580551005722,\n+                    -9882: 0.02042796816695725,\n+                    -12554: 0.024332798809721175,\n+                    -8054: 0.007113871206209023,\n+                    -186: 0.0335743447731583,\n+                    -14460: 0.021736316150168553,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6335238394724235},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"xb\\xa9#f\\xcb\\xb0(q\\xf8\\xf5/'\",\n+            constraints={\"min_size\": 4, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ub6a2\ub696\ud85f\ude82\ub701\ub712\ud81d\udc8d\ub6c9\ub6e1\ub6e1\ub711\\U0002fd20\ub6a5\ub723\ub70d\ub6e0\ub69b\ub6e6\ub6d2\ub6f8\ub6fc\ud863\udf47\ub64e\ub732\ub647\ub64d\ub678\ub690\ub6f2\ub6fa\ub738\ub721\ub6ee\ub640\ub731\ub70a\\U000197d3\ub71e\ub710\ub6c0\ub714\ub6ca\\U0004ad40\\U000358f9\\U0001bd34\ub721\ub6d4\ub6c4\ud860\udc5d\ub714\ub663\ub640\ub6d8\\U0003242d\ub663\ub6e1\ub651\ub6f2\ub6b0\\U0001130d\\U00041f80\ub739\ub646\ub664\ub6e1\ud868\udf53\ub6fd\ub67f\ub6fd\ub6f9\\U0003d37d\ub6e2\ub650\ub65a\\U00051229\ub6af\ub6a9\ub71b\ub67b\\U0003c09b\ud854\udd50\ub662\\U000156a2\ub712\ub66e\ub72c\ub6e3\\U00016555\ub725\\U00019322\ub725\\U0001a44f\ub726\ub6cb\ub6e7\ub6b6\\U00015dc9\ud86e\udfd9\\U00034a3f\ub68f\ub6b0\ub647\ub663\ub6cd\ub6e7\ub68c\\U000331a7\ub6a8\ub6ea\\U00040e8f\ub6b1\ub69b\ud840\udd71\\U000375f2\ub72f\ub6d8\ub6b7\ub648\ub6b6\ub6a6\ub6d6\ub69f\ub69b\ub6b6\uc9f1\ub650\\U0003af65\ud883\ude33\ub70d\ub681\ub6f8\ub6d0\ub6f5\ub678\ub6f1\ub642\\U000379a7\ub6ec\ub6ff\ub660\ub72b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([46656, 332709, 582192]),\n+                ),\n+                \"min_size\": 47,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xba\\xb4F9\\xbf\\x00\\xc4\\x01\\xd1z\\xa1\\x14\\x92z\\xf94QD\\xa9\\xabG\\x85\\xfc&Q<M\\xdde\\xe8:\\x99\\x81\\xd4\\xb3\\xd77\\x94\\\\\\xf5\\xd7@5\\x02\\x99\\xaa\\xe6[\\xb1\\x86\\x9c\\x8a\\xd7^A\\x97\\x9b6j\\x17\\xac\\x82\\x14],2rJ\\xde2\\xd7\\x11\\x063\\x0c\\x7fg}\\x80\\xa3a:\\xd9*\\x02\\xa4\\xa6\\x95\\xfd\\xf1\\xa4\\xaa-r*L\\xe46%_I\\xde\\xeby\\xd6\\x96\\xab\\xef\\xd5m+\\x98\\xb3y\",\n+            constraints={\"min_size\": 39, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -5.257535473861047e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.343068128095542e306,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6.892266589466163e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-97,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 12459,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.671207524815212e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xcf\\xec\\xbe\\xd5\\xce\\xcfw\\x95\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x84U\\xac\\xdaa\\xde\\xacKIv\\xb3u\\x96C\\x0e|)\\x99'\\xe8r\\x8a\\x02\\xf2\\xba\\xd7\\xbf><\\xbd\\xfa\\x8e\\xfb\\n\\xfe\\xcd\\x80\",\n+            constraints={\"min_size\": 24, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\uabd9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([43758, 206786, 471393, 974669, 1114111]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xde\\xa4\\xc9\\x888\\xda|7\\x9b\\xfbo\\x89i\\xe6N}_\\x84\\xc3\\xca\\xcd6\\xa8\\xdc>%\\xd7\\x99w\\xf9nWL\\xa0\\xd9\\x10\\xd9\\x11\\xf9Iw\\xc0g8%\\xf8\\x84R@O\\x15v\\x11\\xf4p\\xf2\\xf4\\x89\\xfe1\\x0e\\xc0\\x8asi\\xaf\\xf6f\\x83P\\xad\\x11\\x0b^\\x17m\\xd9!\\x84\\x92\\xe9<\\xf6Y\\xfb\\x17}\\xcf\\xbd\"\\x19\\x1d\\xba\\xfe\\xbdlN\\xdf<\\x9f\\x11c\\xa5\\xb0\\xa9\\xea\\x98\\xc6\\xf9\\x89\\xaa\\xd3j?\\x0b\\xe3G\\xa5\\xd9,;\\x1f9\\xb3p7>',\n+            constraints={\"min_size\": 50, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.835266679934124},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.901742440366486e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.061816976192576e180,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe5f0:M\\xcfz%)\\xd7U\\xe6\",\n+            constraints={\"min_size\": 9, \"max_size\": 109},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0006bfb9\ud80d\udc06\\U0001346e\ud80c\udfe2\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [78770, 628780, 649027, 720303, 732930, 741989, 785559, 905808],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 4.07127275816328e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1910993289174592e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.24086079710251013},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud851\udf6c\\U00042e8d\ud804\udd1f\ud804\udd59\ud804\udd31\\U000b8ee7\\U000b4909\ud804\udce1\ud804\udd29\ud804\udd1b\\U0001114e\ud804\udd0f\ud804\uddb6\ud804\udd9a\ud804\udd1d\ud804\udd44\ud804\udcf8\ud804\udd3f\\U00097232\\U000110c4\ud804\udd66\ud804\udd5d\\U0007ea58\ud804\udd50\ud804\udce5\\U00095224\ud804\uddb3\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([69822, 663823, 697569, 1114110, 1114111]),\n+                ),\n+                \"min_size\": 14,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-21153,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=53,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 13841,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3478144226423206},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -3.2713199793527656e29,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.0736137337611144e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.402823466e38,\n+            constraints={\n+                \"min_value\": 6.3401516874374024e16,\n+                \"max_value\": 9.674501183911823e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 10000000.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.671502703074983e59,\n+            constraints={\n+                \"min_value\": -2402499175824322.0,\n+                \"max_value\": 7.8616704403997265e59,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.4887619376123144e59,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005055b\\U00050586\\U00069562\\U000505ef\\U00050589\\U00050607\\U000505ac\\U00050602\\U000505c3\\U00050610\\U00060264\\U000505a8\\U000505ca\\U0005058d\\U0007030c\\U0005059c\\U000505c2\\U0007ae2e\\U000505b3\\U000505f4\\U000505a6\\U000505f5\\U0005063b\\U0008b8ec\\U00050564\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([329043, 576793, 665111, 693187, 903720]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"^|\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-15858,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -16889,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x00\\x87l*m\\x92?\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=874,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -5132,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=19415,\n+            constraints={\n+                \"min_value\": -31540,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc9\\xc9\\xaehb\\xcb\\x94w\\x10Z\\x19\\xfc\\xba'\\xd4TF\\xe0\\xd1F\\x9d\\xc1!6:\\xf7m:\\x1dY\\x02eZ}\\xe9\\x186%d\\x8f\\x81?\\xdd\\x1c\\xec\\x97\\xae\\xd1\\xe2\\x9aF\\xaeD5\\x17F\\x16Bn\\xf4\\n\\x9f\\x9274KJ\\xcd_\\xf1\\xac\\x7f\\xea\\xfd\\x1e,\\x98\\x93}\\x18;\\x044\\xca\\x8e\\x01\\x95\\xfc}\\xe4X^\\xe1\\xbf\\x00\",\n+            constraints={\"min_size\": 37, \"max_size\": 106},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"v\\xac\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.05,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 7.406534624494476e-187,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=3434,\n+            constraints={\n+                \"min_value\": -114,\n+                \"max_value\": 4014,\n+                \"shrink_towards\": -32298,\n+                \"weights\": {\n+                    403: 0.006569270416706272,\n+                    512: 0.013351294927643835,\n+                    3117: 0.22286120646752192,\n+                    3430: 0.24402188795590393,\n+                    6: 0.11063897244045001,\n+                    2592: 0.013639842084614428,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-23709,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -23606,\n+                \"shrink_towards\": -84,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=126,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 1_359_645_143_701_402_951,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00fc\\x94\\U000195b9r\u00f6@J\u00d6U\\U000a4eff\\x08\\x9c\\U000b34b8o\u00f0\\U000ae156&\u00cc\\x9a\u00c1\u00c8\\x1d\u00c6\u00af7\u00b5\u00de\\U0003f6f7\u00b2j\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [1, 391274, 416851, 458715, 496092, 848362, 1030401],\n+                    ),\n+                ),\n+                \"min_size\": 11,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1937509461672335e308,\n+            constraints={\n+                \"min_value\": 3.5626599220906304e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.428464324452183e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.020533796871944125},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xce\\x91YN\\x01\\xa3\\x81j\\xc0(/\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x04\"\\x11',\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa3\\xaam\\xcf\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u116c\u1172\u1144\u10dd\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [4243, 420585, 462223, 468614, 691525, 744441, 962128, 1085444],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5e-324},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00bdQ\u00b3\\x90\u00e5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            404,\n+                            1024,\n+                            116338,\n+                            210366,\n+                            248286,\n+                            253294,\n+                            261179,\n+                            316207,\n+                            431386,\n+                            507156,\n+                            893949,\n+                            923186,\n+                            1006504,\n+                            1060310,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 0.05,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.193791353824087e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1, 8192, 45507, 121111, 405749]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.637703722033158e306,\n+            constraints={\n+                \"min_value\": 2.2771127581574786e182,\n+                \"max_value\": 3.988369188086557e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000f8409\u04d0\u0445\u040d\u0453\u0445\u04eb\u04c7\u0406\u0414\u04f6\u0484\\U00049906\\U0004f8b2\\U000ff33f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [1024, 165646, 296816, 455513, 486817, 642517, 702551, 1047017],\n+                    ),\n+                ),\n+                \"min_size\": 13,\n+                \"max_size\": 113,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.3417363617417826},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u092a\u0928\u094d\u0939 \u092a\u0928\u094d\u0939 \u0924\u094d\u0930 \u0930\u094d\u091a \u0915\u0943\u0915\u0943 \u0921\u094d\u0921 \u0928\u094d\u0939\u0943\u0947 \u0625\u0644\u0627 \u0628\u0633\u0645 \u0627\u0644\u0644\u0647\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            70547,\n+                            106852,\n+                            116110,\n+                            203135,\n+                            400493,\n+                            520688,\n+                            587327,\n+                            597694,\n+                            795215,\n+                            827665,\n+                            898183,\n+                            909694,\n+                            915075,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 43,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x15\\xe2\\xf3\\x937\\xbf\\t]2\",\n+            constraints={\"min_size\": 6, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"M\ud808\udcb6\\x11jG\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            300,\n+                            25471,\n+                            350526,\n+                            376087,\n+                            393242,\n+                            404350,\n+                            425032,\n+                            552959,\n+                            577822,\n+                            649628,\n+                            651808,\n+                            655801,\n+                            944226,\n+                            971220,\n+                            1016091,\n+                            1036410,\n+                            1103032,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf1\\x9awW\\x12\\x10\\x1c\\x9f\\x10\\xa5\\xeb\\x01\\x89\\xaf\\tYQ1M\",\n+            constraints={\"min_size\": 15, \"max_size\": 115},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-76,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 14686,\n+                \"shrink_towards\": 512,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4_761_919_895_079_214_026,\n+            constraints={\n+                \"min_value\": -8_261_613_577_891_524_323,\n+                \"max_value\": 8117,\n+                \"shrink_towards\": 34,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"4\\x8b\\xc6\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00037629\\U00037598\\U0003760e\\U00037584\\U0009c581\\U000375a3\\U00037633\\U0003763c\\U00037597\\U000375fc\\U000375ea\\U000375d9\\U00037559\\U00037583\\U000375fc\\U00094b76\\U00037608\\U00037580\\U00066c2e\\U00037628\\U000375ae\\U000375d6\\U00037634\\U00037626\\U000375c6\\U00037559\\U00037578\\U000375fb\\U00037586\\U000375ea\\U00037590\\U00037579\\U00037621\\U00037577\\U00037650\\U000375a3\\U0007ef30\\U000375e6\\U0003756b\\U0003761c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([226647, 238452, 374475, 780937]),\n+                ),\n+                \"min_size\": 31,\n+                \"max_size\": 131,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.5079238033444399e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.526589788242459e200,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.0565808135990124e268,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.043801149853033e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000196f3\\U000196ac\\U000704ef\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([103924, 119275, 315048, 733760, 805481]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\";\\xc7\\xbcg\\x8c\\xeaR\\xb2E\\xa8`\\x03\\xc0=\\x0b\\x17(\\x95\\x87\\x12C\\xb8\\x9ex\\x08(\\x9b\\xf0<\\xfe\\xb3\\x02u[l\\xbb\\xa7\\xae\\xaa\\xef\\x12\\xfb\\xc7\\xa6K\\xee\\xf5\\xb9O\\xb8|b\",\n+            constraints={\"min_size\": 42, \"max_size\": 142},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u208d\u2087\u2049\u20df\u2019\u20aa\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([8192, 118381, 305217, 352709, 408771]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf4\\x1f\\xc8>tT\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9999,\n+            constraints={\n+                \"min_value\": 5447,\n+                \"max_value\": 25930,\n+                \"shrink_towards\": -146,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([682935, 790151, 798081, 905348, 977152]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.131262890054224e16,\n+            constraints={\n+                \"min_value\": -3.357796290895264e16,\n+                \"max_value\": -5.238412589800719e-241,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.130532439865354e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=22891,\n+            constraints={\n+                \"min_value\": 22834,\n+                \"max_value\": 101_213_885_209_422_087_444_873_433_905_972_544_704,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    58937: 0.009011779219702639,\n+                    64704: 0.15969432807148634,\n+                    22953: 0.0552512853184521,\n+                    23184: 0.014979319542481844,\n+                    22908: 0.16424021914314585,\n+                    22873: 0.04848454835728269,\n+                    65535: 0.04833852034744856,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-877495605,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 788988225,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00ac\\x86\\U000794d8\u00eb\\x06=P\u4fda4\u00f7r\\U000eb083\\U000a2f58@\u00e5\u00a3\\x81a\u00a5\u00c8=M\\U000e76aa])\\x9b\u00fb+Y\u00a2\\U000fd44f\\x9b\u00ce\\x1e\u00cdz}b\\x01\\U00098936\\U0002f6ea\u00d2\\x9d7!\u00cc\u00ae\\x9e\u00e3\u00a3\\x86\u00f3\u00e6w\u00b0\u00c5\\\\P\\U00045e59\u00fa\u00fcN[\\x14\u00a5\u00d0P\u00a3o\\U0002ecf3\\U0009ecfc&w\\x1c\\x85\\U000da097\u00c3\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            1000,\n+                            6332,\n+                            25488,\n+                            35631,\n+                            90434,\n+                            101895,\n+                            102267,\n+                            190731,\n+                            215286,\n+                            267399,\n+                            291021,\n+                            336828,\n+                            364537,\n+                            485190,\n+                            513768,\n+                            524997,\n+                            544401,\n+                            613220,\n+                            673593,\n+                            728859,\n+                            796436,\n+                            836649,\n+                            837006,\n+                            844538,\n+                            852750,\n+                            889059,\n+                            923255,\n+                            936284,\n+                            980544,\n+                            1027949,\n+                            1050931,\n+                            1052457,\n+                            1060839,\n+                            1063532,\n+                            1064060,\n+                            1067243,\n+                            1083464,\n+                            1084170,\n+                            1097458,\n+                            1114110,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 27,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.06471628473151371},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x88\u00a6W\ua3e0\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([0, 353768])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-9675,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 20161,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5231190611569821},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x0c\\x10\\xe3S\\x04\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.5378896233099956e308,\n+            constraints={\n+                \"min_value\": -4.2984257764097304e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.5378896233099956e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u023a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([512, 65535, 220983, 358533, 482410, 938313]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7663511932798617},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"'\\x90\\xaa\\x98\\xf7\\x94q\\xa8\\xe6\\x92ba\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\ued3d\ud821\ude80\\uec9c\\ued85\\ueccf\\uecd4\ud868\udc89\\ueca5\\uecc7\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([60556, 202453, 947908, 1004628]),\n+                ),\n+                \"min_size\": 9,\n+                \"max_size\": 109,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-17480,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -17480,\n+                \"shrink_towards\": 28258,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.799979337001318e307,\n+            constraints={\n+                \"min_value\": -3.9275347220827685e-117,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.180371278250092e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=56097,\n+            constraints={\n+                \"min_value\": 19940,\n+                \"max_value\": 65535,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\uc134\uc1da\uc223\uc1bd\uc225\\U000b9174\\U00079d1e\uc193\\U00051923\uc1bb\uc229\uc142\uc15a\uc203\uc1c9\uc1d2\uc1f3\\U000a8498\uc147\uc1bd\uc1b2\uc1d6\uc195\\U0006d166\uc136\uc18e\uc146\uc21a\uc22f\uc1e8\uc18a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            49459,\n+                            65535,\n+                            114533,\n+                            168562,\n+                            239519,\n+                            249732,\n+                            297020,\n+                            324643,\n+                            329102,\n+                            341131,\n+                            377913,\n+                            777724,\n+                            884918,\n+                            899843,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 20,\n+                \"max_size\": 120,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-12639,\n+            constraints={\n+                \"min_value\": -23111,\n+                \"max_value\": None,\n+                \"shrink_towards\": -31,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=126,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -2.7920532159204536e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.2351947280501768e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-76,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 2210,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -4.881122226797144e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.962141232879624e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003915e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            233812,\n+                            379823,\n+                            608416,\n+                            666409,\n+                            802607,\n+                            854009,\n+                            854857,\n+                            883126,\n+                            972772,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-10,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.11463213562645194},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=36,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 20238,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x92\\x02@\\xd8ml\\x80\\x1c\\xa1Q.\\xaa\\x83.Y\\xbd\\x8e)rl\\xf9\\x97\\x1b\\x03\\xc0\\xbc!\\xa9\\x8b\\xa2;\\x08\\x19\\x805\\xb2\\x82N\\xfcu\\x0b\\xbek\\xed4\\x06k.\\xde\\xb8\\xb5\\x95q\\xf5\\x01\",\n+            constraints={\"min_size\": 50, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-32008,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -126,\n+                \"shrink_towards\": -22,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-57,\n+            constraints={\n+                \"min_value\": -100,\n+                \"max_value\": None,\n+                \"shrink_towards\": 19842,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6491483349031593e307,\n+            constraints={\n+                \"min_value\": -5.479294291461219e-84,\n+                \"max_value\": 2.833406744450695e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0727341364740837e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.225073858507203e-309},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-39,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 9633,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 33.213711036653024,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.9683614517900624e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"{\\xd9cR\\xd4\\xca\\xde\\x85\\x19q\\x83]\\xf4\\xce\\xb8\\xce\\xb7^c\\xcb\\xfb\\x18\\xb6\\xbe\\xdf#\\xccc\\x1ah'oyr\\xbc\\x86\\xd7\\xebX\\xe7\\t\\xa2\\x15\\xb0\\xdf\\xed\\\"c\\xdd:\\x1e\\xe7\\xb2\\xce\\xd3\\xe0\\xe6\\xf0v,\\xcc\\x0f\\xee\\xdd\\x98\\xf2\\xb4\\x9e\",\n+            constraints={\"min_size\": 39, \"max_size\": 103},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-30808,\n+            constraints={\n+                \"min_value\": -294_025_373_562_484_829,\n+                \"max_value\": None,\n+                \"shrink_towards\": 14662,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud854\udd18\ud854\udcd2\ud854\udcbc\ud854\udd8f\\U00035481\ud854\udd06\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            151711,\n+                            277481,\n+                            302808,\n+                            430772,\n+                            466774,\n+                            553048,\n+                            619705,\n+                            643503,\n+                            896570,\n+                            916081,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 45,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud885\ude28\ud885\udd98\\U00089f57\ud885\udd78\ud885\udd73\ud885\udd57\\U000ba258\\U000ba8dc\ud885\udd81\ud885\udd97\ud885\uddfd\ud885\ude21\ud885\udda8\\U0005a0e7\ud885\udd9f\ud885\uddf9\ud885\ude36\ud885\ude31\\U00093fa8\ud885\ude29\ud885\ude22\ud885\udda9\ud885\udde7\ud885\ude34\\U0006da27\ud885\udd5a\ud885\ude42\\U0007a107\ud885\ude45\ud885\ude52\ud885\uddb6\ud885\ude17\ud885\ude53\ud885\udd75\ud885\udd80\\U000d905f\ud885\uddf9\ud885\ude31\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([202069, 998931])),\n+                \"min_size\": 15,\n+                \"max_size\": 115,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".secondary\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=17398,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 25048,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-23302,\n+            constraints={\n+                \"min_value\": -26562,\n+                \"max_value\": -17690,\n+                \"shrink_towards\": 7808,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.33230388465747646},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u040b\u04c3\u040b\u0416\u0487\u04a3\u041a\u0490\\U00084df0\\U0005f3bc\u0424\u049a\u0480\u0485\\U0001b715\u0448\u04ef\u04f9\\U0006ac45\u0493\\U00090fc0\u0426\u04fe\u04f8\u0448\u043c\u04dd\u045e\u04d6\\U000c0fd9\u04b3\u04da\u049f\\U0004147d\u048c\u0488\u04f6\ud868\udfe3\u046f\u0428\\U000c7642\u04c1\u04e2\u040d\u049f\u04aa\\U000d39d9\u04b0\\U000aa2c9\u0416\u04b5\u0474\u046d\u0445\u04a2\u0419\u04b5\ud86c\udde0\u04f3\u0411\u049a\u04f3\u04c0\u0408\u04e4\u047a\u043e\u0475\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([1024, 1052377])),\n+                \"min_size\": 38,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005b18f\u0216\u025e\u0274\\U00039ea3\u02e2\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            512,\n+                            55480,\n+                            236500,\n+                            475275,\n+                            508553,\n+                            631045,\n+                            728159,\n+                            889964,\n+                            1079547,\n+                            1102887,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=124,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 25213,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.777938815043525e16,\n+            constraints={\n+                \"min_value\": 0.05,\n+                \"max_value\": 5.412126437671311e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6.036490039236625e-209,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.2142952827133106e-62},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00e1?s\ud84e\udd0f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            25777,\n+                            104904,\n+                            249081,\n+                            250449,\n+                            295164,\n+                            569441,\n+                            707751,\n+                            751435,\n+                            751520,\n+                            819220,\n+                            946938,\n+                            974711,\n+                            995866,\n+                            1004843,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.34558149315237413,\n+            constraints={\n+                \"min_value\": 2.2250738585072014e-308,\n+                \"max_value\": 0.5,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.34558149315237413,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": 1.5215502764881724e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.1967545545295088e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u6be5\u6bd1\u6b84\u6b5e\u6b50\u6b46\u6b34\u6bf1\u6bc3\u6afc\u6b48\u6bb3\u6bd9\u6b6d\u6bbd\u6bad\\U000e0abe\u6af7\u6bd8\u6b03\u6ea6\u6b70\u6bd6\u9e7d\u6bf5\\U0001f1cd\u6b01\u6bd0\u6b33\u6b16\u6bd6\u6b6e\u6b3e\u6bee\u6b27\u6b91\u6bbc\u6bae\ud865\ude22\u6be1\u6b88\u6bda\\U000eb56b\u6b91\u6b69\u6afb\u6ba7\\U0008b2d5\u6b16\u6b14\u6b5b\\U0009c839\\U000dfc61\u6b93\u6b34\u6b9f\u6b94\u6bc1\u6b98\\U0001aca4\\U0002ed96\\U0009ea23\u6b74\u6b13\u6ba2\u6b9f\u6b36\u6be0\\U00088d6d\u7253\u6bc6\u6bd3\u6b6c\u6ba8\u6b7b\\U0008b1af\u6b11\u6b02\u6bb0\u89aa\u6ba9\u6b7d\u6b81\u6bc5\\U000debda\u6b2c\ud680\\U000f2eb1\u6b40\u6b8c\u6b7b\u6b8d\u6bdd\u6b94\u6b3a\u6bf4\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([27382, 196596, 558463, 667339, 904051, 1086708]),\n+                ),\n+                \"min_size\": 38,\n+                \"max_size\": 138,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"F,\\xcbW\\xdaO\\xd0\",\n+            constraints={\"min_size\": 6, \"max_size\": 7},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x0e\u00ec\\x8c\u00b2\u00be\\U0001ea85\\x99\\x1a\u00f4\\x02U\\x93_\u00d5\\U0009e5fd\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([0, 512, 67406, 156832, 590446, 825701, 1038819]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=20049,\n+            constraints={\n+                \"min_value\": -58,\n+                \"max_value\": None,\n+                \"shrink_towards\": 17538,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc7Z\\x90r\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.304613208300331e38,\n+            constraints={\n+                \"min_value\": 10000000.0,\n+                \"max_value\": 3.402823466e38,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.1419143977080767e38,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.0187060755626627e-162},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.17118987821931134},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-8599,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 7126,\n+                \"shrink_towards\": 65535,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -3.0291947225256124e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.8560635796769825e277,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=11091,\n+            constraints={\n+                \"min_value\": 10866,\n+                \"max_value\": 7_333_887_459_312_302_107,\n+                \"shrink_towards\": 300,\n+                \"weights\": {10873: 0.00865775065204629, 65535: 0.0034140765744712217},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.28040575937933193},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1310\\x99\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xfa\\x99\\xb0W\\x9cni\\x91\\x1d\",\n+            constraints={\"min_size\": 4, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"r\\xa5\\x0f\\xfbx\\xc2\\xca\\xc8\\xb2\\x1duR\\xa7\\x00\\xac\\x9cZZ\\xbd\\x9e3\\xab\\xfd\\xd7N\\xf1\",\n+            constraints={\"min_size\": 13, \"max_size\": 113},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 3.160374229921985e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 9.246092998289105e306,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-34887,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -22257,\n+                \"shrink_towards\": 512,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud800\udcc4\ud800\udc0e\ud800\udcdf\ud800\udcf3\\U0001003b\\U0001007a\\U00016bea\ud862\udd7e\ud800\udc03\ud800\udc40\ud800\udcf1\ud800\udc3f\\U00073a91\\U0001007c\ud800\udce4\ud800\udcbb\\U00076686\\U00010078\ud800\udce2\ud800\udc9c\ud800\udc2c\ud800\udcaf\ud800\udc4c\ud800\udc04\ud85b\udde1\\U0003318b\ud800\udca0\ud800\udcd0\ud800\udc95\ud800\udce9\ud800\udc10\\uffff\ud800\udcb1\ud87a\udf55\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([65535, 607331])),\n+                \"min_size\": 17,\n+                \"max_size\": 117,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8_314_695_736_096_246_896,\n+            constraints={\n+                \"min_value\": -31075,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"6\\x83tD\\xfe\\t\\x9eY\\xd6\\xa0+\\xd9\\x1d\\x88\\xba4\\xd1\\x980\\xfe\\xbcM\\x83\\xef\\xba0\\xdd\\x0bw\\xf7{\\xec\\xbb\\x85\\xed^k\\xb6\\xd5\\xbfJ;\\xf9=\\xad\",\n+            constraints={\"min_size\": 45, \"max_size\": 47},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003aa39\\U00010074\\U000100fb\\U0001007f\ud800\udc40\\U0001003e\ud800\udc2d\ud800\udc47\ud800\udc57\ud849\udf67\ud800\udc3a\ud800\udc15\\U0001c48a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([65535, 165940, 210407, 299666, 452067]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00044278\\U0004421c\\U000442c1\\U00044228\\U00044262\\U00044233\\U00044243\\U0004424f\\U00044269\\U000442eb\\U000638db\\U0004422b\\U00071d8d\\U00044227\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([279065, 488774, 572421, 596516, 1011802]),\n+                ),\n+                \"min_size\": 11,\n+                \"max_size\": 111,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4606,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 26161,\n+                \"shrink_towards\": 13414,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=10897,\n+            constraints={\n+                \"min_value\": 31,\n+                \"max_value\": None,\n+                \"shrink_towards\": 6408,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-22595,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 111,\n+                \"shrink_towards\": 9_050_063_326_143_901_184,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=181136160,\n+            constraints={\n+                \"min_value\": 181121750,\n+                \"max_value\": None,\n+                \"shrink_towards\": -1_787_075_704,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1_201_006_600,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 23280,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003f271\\U0003f235\\U0003f242\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            258612,\n+                            403187,\n+                            446982,\n+                            462754,\n+                            540916,\n+                            645794,\n+                            955533,\n+                            978979,\n+                            1026016,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00019f71\\U00019ead\\U00019f66\\U00019f2e\\U00019f77\\U00019f47\ud855\udf45\\U00019ef4\\U0004563c\\U00019f5c\\U00019f8d\\U0001c8f9\\U00019f58\\U00019f5a\\U000557da\\U00019f47\\U00036db4\\U00019f25\\U00019ec1\\U00019f34\\U000508d1\\U00057e2c\\U00019ee7\\U0004f6c9\ud877\uded2\\U00019efd\\U00019f1c\\U001090ed\\U00019f6a\\U00019f16\\U00019f66\\U00019f4a\\U00019f71\\U00019f5b\\U00019f0d\\U00019eed\\U00019f86\\U00051101\\U00019f4a\\U00019f41\\U00019f3f\\U00019f46\\U00019f30\\U000378b0\\U00019eef\\U00019ee8\\U00019f17\\U00019f52\\U00019f0d\\U00019eaa\\U00019ef0\\U00019ee0\\U00019e9d\\U00019ee4\\U00019f0f\ud868\udfeb\\U00019f67\\U00019f44\\U00019f5f\\U00109212\\U00019ec0\\U0001bb19\\U00019eb2\\U00019eba\ud85b\udd02\\U00019e91\\U00019e96\\U00019f75\\U00019f8c\\U00052625\\U00019f6a\\U00019ec7\\U00019eb2\\U00019f0e\\U00019f52\\U00019e9f\\U00019f64\\U0005a1f8\\U0003a358\\U00019ec4\\U00019f53\\U0004d766\\U00019f4a\\U00019f66\\U00019f5e\\U00019f2d\\U00019f7d\\U00019f1e\\U00019f15\\U00019ecd\ud838\udd22\\U00019e9c\ud853\uddf9\\U00019f03\\U00019f5e\\U00019ee4\\U00019ebe\\U00019ef4\\U00019f3c\\U00019ebd\\U00019ef3\\U00019ec8\\U00019f0d\\U00019f6c\\U00019f2f\\U00019ea7\\U00070aa9\\U00019eaa\\U00019efb\\U00019f36\\U00019e96\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([106128, 370884, 453273, 462002, 1080877, 1110963]),\n+                ),\n+                \"min_size\": 38,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000471bf\\U000409a4\\U0004099f\\U00040928\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([264475, 337292, 1004931]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u04ce\u0454\u046c\u04cf\u04dc\u04b5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1000, 551535, 640062]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc0U\\xe4^58yd\\xf4\\x12'\\x15\\xe1\\xb4\\xcb\\xcb\\xfd\\x87\\x0e\\x96\\xef\\x88\\x11\\x84\\xbf[\\xb0Oe\\xd5\\x0c\\xb6\\xbeb\\xdc\\x92\\x90\\x1fU\\x00\\x95\\x8a\\xda\\xadW\\xc3F*\\x11v\\x9f\\xe0R\\x88\\xec2\\xed\\xa7\\x85f\\xec:\\x91D\\x89O\\xa8\\x1f<\\x98!`\\xe6S\\x92\",\n+            constraints={\"min_size\": 32, \"max_size\": 132},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"q|9L\\x13(\\xbc0\\xd4U_C\\x90\\x01a\\xf0\\x0es\\x18\\x82\\x8a\\xa5\\xc0\\xe0Q\\xfar\\xa4h\\x18v\\x95Ej\\x0cB-\\xfd@\\x87\\x93\\x93\\xdb\",\n+            constraints={\"min_size\": 37, \"max_size\": 137},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=78,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 9_045_441_147_538_494_268,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.946200935201136e-96},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8565757502125424},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-6.748296829950797e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8351248549785263.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8103005512526509},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -8.624019586014537e-18,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7415454574368554e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-9_029_514_940_031_275_907,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -12519,\n+                \"shrink_towards\": 86_019_382_698_508_656_468_582_100_779_920_577_105,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-11795,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 32300,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000157c2\\U00015756\\U0001570c\\U00019181\\U00015780\\U00015796\\U0003460e\ud851\udd0d\\U00015746\\U0001578d\\U0001579e\\U00015739\\U0001575a\\U0001577a\\U000157ec\\U0001573c\\U00015713\\U00042269\ud85d\ude45\\U000157b3\\U0001578a\\U0001576f\\U00015709\\U0001577d\\U00015786\\U000157ab\\U0001579c\\U000157d0\\U000157ae\\U000157a9\\U000157a4\\U000157a7\\U0001579d\\U00015749\\U00015772\\U00015734\\U0003ef93\\U0001570f\\U00015730\\U0001571e\\U0001575a\\U00015790\ud886\udc90\\U0002f239\\U00015703\\U00015785\\U000371bf\\U0003d164\\U000157ba\\U00033988\\U0001575c\\U0001577a\\U000157a1\\U00033125\\U00015762\\U00015761\\U00015738\\U000157b2\\U000157bb\\U00015790\ud81e\udc19\\U0001573c\\U00015768\\U000157dd\\U00037c6f\\U00015722\\U0003d32d\\U00041d9c\\U00015793\\U0001571d\\U0001571e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([87804, 292196, 901922]),\n+                ),\n+                \"min_size\": 24,\n+                \"max_size\": 124,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.failures\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"j\\x01\\xa8<\\x02\\xd0$\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud858\udd62\ud858\udd67\ud858\ude50\ud858\udddc\ud858\udd5a\ud858\uddba\\U0008a074\ud858\uddb3\\U000854af\ud858\ude20\ud858\uddec\ud858\udd63\ud858\uddfb\ud858\ude53\ud858\uddf4\ud858\uddd9\ud858\udd96\ud858\ude2c\ud858\uddff\\U0008227a\ud858\ude17\\U0008474c\ud858\uddc1\ud858\udd7e\\U00080a6e\ud858\udd75\\U0008c01d\ud858\uddcc\ud858\udd71\\U0008ab1d\ud858\udd6d\ud858\udded\ud858\udded\ud858\ude13\ud858\uddfb\ud858\ude52\ud858\uddb5\ud858\udda5\ud858\udda6\ud858\udd92\ud858\ude28\ud858\udd65\ud858\ude53\\U00085fba\ud858\ude22\ud859\ude95\\U00088809\ud858\ude3d\ud858\uddb1\ud858\ude01\\U00087be9\\U000897de\ud858\udda6\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([155994, 161417, 519897, 580123]),\n+                ),\n+                \"min_size\": 34,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-26339,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -1258,\n+                \"shrink_towards\": -32051,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".secondary\",\n+            constraints={\"min_size\": 4, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 3.3470210880115417e-138},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.6295940183823805e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.730843847809606e16,\n+            constraints={\n+                \"min_value\": -3.80750578875919e16,\n+                \"max_value\": 4.1091416112000984e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.6076323577655816e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7909829194081637},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9282001693743771},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.175445263928823e237,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00035092\\U0003ca18\\U00035147\\U0003ad78\\U0003df7d\\U0003510f\\U000350ac\\U0003508b\\U000356f6\\U00035150\\U0003512a\\U000350f6\\U000350ac\\U00035086\\U000350a7\\U0003507c\\U00035139\\U00035145\\U000350fa\\U000350b4\\U0003509f\\U0003514b\\U000350a5\\U000350e5\\U000350a8\\U00035081\\U0003516b\\U00035095\\U000350c1\\U000350dd\\U0003f1b9\\U00041a44\\U00035108\\U00035107\\U000350ef\\U000350ff\\U00035108\\U0003fd52\\U00035148\\U00035144\\U000350db\\U00035117\\U00035158\\U000350d6\\U00035123\\U00041e5d\\U00035103\\U00035121\\U00035140\\U00035112\\U00035159\\U000350a5\\U00035079\\U00035146\\U000350b6\\U000350ce\\U000350be\\U0003dbc7\\U0003f76a\\U000350ef\\U0003514c\\U00038fa7\\U000350a4\\U000350b5\\U0003509a\\U000350ec\\U00035074\\U0003e141\\U000394b1\\U000350c3\\U00035120\\U000350d2\\U0003507d\\U00035113\\U00035085\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([217203, 272691, 1013229]),\n+                ),\n+                \"min_size\": 23,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"t+z\\xaf@\\xf4\\xcb\\xd9(\\xaa\\x0e\\x84)e.p\\x06[\\xf3\\xbc\\xa7J\\x7f\\x1f<\\x19\\xe7\\x00t\\x14\\xcf}I\\xb0\\xea\\x06C\\xa9\\xb1\\xa0E\\xf1\\xf0\\x14\",\n+            constraints={\"min_size\": 28, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00033227\\U00032fad\\U0003301d\\U0003300c\\U00032fb7\\U00032f79\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([208681, 385422, 789029, 974236, 985124, 1058367]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u4650\u469e\u4640\u4649\u4624\u4696\u45dd\u45f8\u466e\u4673\\U000e5f49\u45da\u4646\u4677\\U00099d63\u4628\\U0001eeee\u45f2\u469c\u46cb\u46ad\u4692\u45fc\u469a\u45f1\u466d\u45f9\u4642\u466f\u4646\u462c\u461d\u4657\u4657\u4660\u4648\u46ab\u45d5\\U00055471\u45d4\ud861\udcb4\u46c9\\U000d2c69\\U000a58d8\u4642\\U0002fc62\u4660\u46cb\u46cd\\U0001bb73\u46b0\ud841\udd69\u45de\u4650\u45d7\u463f\u45df\u462b\u4603\u46c6\u46af\u4661\\U000ae665\u464f\u45fe\u466b\\U0008d82d\u45e1\u45fd\u4687\u46bc\u4641\u4602\\U0007b22c\u4697\\U00087872\u46aa\u46bc\\U000783a7\u46b9\u461e\u46a9\u46c0\u46b3\u4637\u4637\u4670\u46a9\u469a\u468f\u4630\u45ec\u45f6\u46cf\\U000bafac\u4677\u46a9\u46c0\u46b3\u4660\u46b9\\U00032bac\u45e0\u46aa\u45e9\u46ba\u4666\u45f0\u46cf\u4646\u45d4\\U00052795\u45d1\u45fc\u45ef\u460e\u4651\\U00101f69\u45d6\\U00049e68\u4697\\U000795bd\u4659\u4663\\U000389f5\u4696\u45e2\u4606\\U000beeba\u46b7\u4670\u45f6\\U0004f7f6\u4652\u461c\u466a\u45f7\u467c\u4663\\U00050ce3\u46a0\u46ae\u463a\u4639\uab97\u46bb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([17873, 919382, 940095, 968548, 1047900, 1088462]),\n+                ),\n+                \"min_size\": 46,\n+                \"max_size\": 146,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 6.103515625e-05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": 1.32550802139475e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7749708731583738e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xd3I\\xf3\\x03\\xdc\\xf5\\x93\\xf5\\xf0\\x05\\xdd;\\xfd\\xd4\\xc7meb\\x1d\\xc6qM\\xf2\\x8b\\xe6\\x86-\\x0b4\\xd5\\x02\\xb3f>\"7Y\\x91\\xa8zg\\xb0F',\n+            constraints={\"min_size\": 25, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000f50b6\\U000ae312\\U000ae393\\U000ae2d1\\U000ae2d1\\U000ae362\\U000ae30f\\U000ae2f8\\U00107743\\U000ae33d\\U000ae2f6\\U000ae366\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([713386, 772895, 928154, 1114111]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.08270415660188447},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u02a8\\U000ae38a\u02fe\u02d6\\U0005598d\u024e\u02a4\u0298\u02da\u0263\u02a3\u02ca\ud81e\uddb8\u020c\u02c0\u02e6\u0216\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            512,\n+                            65535,\n+                            67035,\n+                            67288,\n+                            68145,\n+                            107889,\n+                            310231,\n+                            522473,\n+                            636586,\n+                            771561,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 13,\n+                \"max_size\": 113,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.812345286618957e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6345596057334973e308,\n+            constraints={\n+                \"min_value\": 2.194465047077364e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.673713744604675e-51,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.27155883085339944},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5e-324},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.3735036997331776e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00038488\\U000383a9\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([230300, 440125])),\n+                \"min_size\": 0,\n+                \"max_size\": 16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-6421,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 4609,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u169b\u1684\u1693\u1690\u168b\u1692\u1684\\u1680\u1691\u1684\u1682\u1691\u168f\u1685\u169c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1613,\n+                            6757,\n+                            131799,\n+                            171246,\n+                            213289,\n+                            377722,\n+                            507440,\n+                            550523,\n+                            598273,\n+                            633386,\n+                            696424,\n+                            843213,\n+                            859032,\n+                            1015390,\n+                            1049735,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-16128,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -7560,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9999999999999999},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=14323,\n+            constraints={\n+                \"min_value\": -29115,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=23042,\n+            constraints={\n+                \"min_value\": -25937,\n+                \"max_value\": None,\n+                \"shrink_towards\": 31410,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x00\\x87l*m\\x92?\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6592930713069124},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"_Oj\\x93Z\\x1aUmD\\xcd\\xc4\\xa8\\x1a\\n\\xca9\\xbc\\xfc}?\\xb0\\xd1|\\xc9Zr7\",\n+            constraints={\"min_size\": 15, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-5807,\n+            constraints={\n+                \"min_value\": -5958,\n+                \"max_value\": -4750,\n+                \"shrink_towards\": 0,\n+                \"weights\": {-4958: 0.08960786600886475, -5807: 0.1751901353137978},\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00082d6b\\U00064874\\U000648e5\\U000cf0a5\\U000ae9cd\\U000648c9\\U000648b5\\U00064949\\U00064870\\U00064961\\U000648d4\\U0006489c\\U000648c5\\U00064866\\U000648a2\\U000648d7\\U00064928\\U000648f8\\U00064921\\U000a9068\\U00064894\\U000648dd\\U00064893\\U000c3048\\U000648b4\\U000648ec\\U000648f3\\U000648fe\\U0006489d\\U00069405\\U0006489b\\U0006494e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([411749, 776192, 791666, 940440]),\n+                ),\n+                \"min_size\": 31,\n+                \"max_size\": 52,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00036e23\\U00036df7\\U00036ed7\\U00036e3c\\U00036e76\\U0004b064\\U00036e43\\U00036e97\\U00036e90\\U00036eb0\\U00036ea8\\U00036ecf\\U00036e3c\\U00036eb0\\U00036e45\\U00036e84\\U00036ea3\\U00036e57\\U00040737\\U0008c04f\\U0006acc0\\U00036ec5\\U00036e76\\U00036ecf\\U00036ded\\U00036eaa\\U000955be\\U00036e8b\\U00036e67\\U00036e43\\U00036ed6\\U00036ea3\\U00057524\\U00053e04\\U00036e15\\U00036e5f\\U0006308f\\U00036ecc\\U00036e06\\U00036e85\\U00083c0c\\U0009406f\\U00036df2\\U0004bc50\\U00036e92\\U00036e87\\U0008cb88\\U00036e8f\\U00036e9c\\U00036e9a\\U00036df2\\U00036e16\\U00036e44\\U00036e25\\U00036e90\\U00036ea9\\U0003d557\\U00036e4f\\U00036eb7\\U00036de4\\U00036eb9\\U00036e68\\U00036df4\\U00036e77\\U00036ee2\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([224740, 620164])),\n+                \"min_size\": 38,\n+                \"max_size\": 138,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.733954570182736e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.8482718185422227e-124,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=566238414,\n+            constraints={\n+                \"min_value\": 8174,\n+                \"max_value\": None,\n+                \"shrink_towards\": 16376,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa2\\xcb\\xf8\\xe1\\t\\xdc\\xadg\\xfaYHE\\x1b1\\x7f\\xa1\\x13\\xf4@\\xfb\\xd2\\x88\\xa8\\x93\\xb38jQh\\x9c\\x03`V\\xcd\\xb0L\\x07B\\xd1\\x07\\xf3T\\x97\\xa1\\x82D\",\n+            constraints={\"min_size\": 44, \"max_size\": 144},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-nan,\n+            constraints={\n+                \"min_value\": 0.05,\n+                \"max_value\": 0.3333333333333333,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.2595174984943612,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.065664862674147e307,\n+            constraints={\n+                \"min_value\": -3.189883708414603e-284,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6.4180126500452936e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.048809421178093185},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00c6\\x9dy\u00a6\u00c3\\x99\\x04\u00a9\u00f6\u00c1\\U000a4a85\\xad\u00fe\\x0f\u00a3\u00d1I\\x16n\u00ef\u00f8\u00d0\\x9c>\u00f8c\u00e5@\u00de$\\x83\\x00|\\x9f+C\\x1f\\U0009bbfdJQ\\x12\\x1al\\U00091014\\x89\\x87\\x0b\\x9a\\x94\\x81\u00c3\u00efe\u00d3OJ\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            110187,\n+                            173594,\n+                            259374,\n+                            325138,\n+                            391393,\n+                            588381,\n+                            712689,\n+                            1064155,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 29,\n+                \"max_size\": 129,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4905,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -4862,\n+                \"shrink_towards\": 65535,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"L\\xd2y^\\\\m@;q\\xfd0'\\xd8\\x08~\\xe5\\xba\\xc2\\xfc\\xed\\x1cp\\xc7\\xb0@\\xbco\\x9d\\xbb\\x8c3\\xc8$\\x93T\\xf9\\xac\\x95\\x9e\\xa4vo\\xa8\\xcd~\\\"\\xeb\\xb3jp-w\\xf0\\xdb\\xea\\xac\\xe4\",\n+            constraints={\"min_size\": 43, \"max_size\": 143},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.612344049550344e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9007199254740992.0,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2_046_101_624,\n+            constraints={\n+                \"min_value\": 2_046_101_568,\n+                \"max_value\": None,\n+                \"shrink_towards\": -24381,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"V.k\\xc2\\xabN\\xf3*\\xd3\\xae\\x9ew\\xda5N\\xaf4jE\\xd6\\x9f{\\xb6\\x87\\x87\\xcd\\x8c8\\xb5v\\x88\\x7f}\\xba\\x84\\x9ct\\x0c\\\\\\x8d\\x9b7\\x08\\xea\\xba\\xa9\\x84\\xe4\\xdft\\xf9\\x12\\xfb\\x17fl\\xfa\\xb4\\x1f0\\xcc|$\",\n+            constraints={\"min_size\": 42, \"max_size\": 88},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-29803,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 88,\n+                \"shrink_towards\": 300,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x98\\xdfM\\xe8\\xee\\x12\\xba]\\xc28\\xd5\\xf9\\x1b\\xb7\",\n+            constraints={\"min_size\": 10, \"max_size\": 110},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-322196934,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -6194,\n+                \"shrink_towards\": -38,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000554e9\\U000554c0\\U00078026\\U0005554c\\U000554b9\\U000554fc\\U0005556b\\U0005545e\\U00058623\\U000554ef\\U00055550\\U00071650\\U00055476\\U00055470\\U0005554c\\U00055489\\U0005ef0c\\U0006dedc\\U000554ec\\U0005e614\\U000554da\\U000554f0\\U00061e3a\\U000554d1\\U000554f9\\U00055497\\U00055476\\U0005551c\\U000554d9\\U000554f8\\U0005d121\\U0005546f\\U00055458\\U000554c1\\U000554ac\\U000554c4\\U000554d5\\U00055503\\U00060b7d\\U000554a5\\U000554e0\\U00055460\\U0005547e\\U0005549c\\U000554e8\\U000554a0\\U00055453\\U00055452\\U000554ed\\U00055501\\U00055452\\U00055518\\U00055481\\U00061213\\U00055502\\U0005546a\\U00055486\\U0005554d\\U000554f2\\U000554dc\\U000554b9\\U000554b1\\U00083779\\U00055466\\U00055550\\U000762d2\\U0005554a\\U000554b1\\U00055493\\U000554c7\\U0007822f\\U0007e5e4\\U0005eabd\\U00055498\\U00055453\\U000640f7\\U00055539\\U000554b7\\U00055535\\U00061c38\\U0006d304\\U000554e1\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([349265, 541065])),\n+                \"min_size\": 42,\n+                \"max_size\": 142,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=430474858,\n+            constraints={\n+                \"min_value\": 430474768,\n+                \"max_value\": None,\n+                \"shrink_towards\": 118,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-9_261_254_015_551_669_860,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -4_972_509_043_182_848_031,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0478933070357075},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.5,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.143825428243532e167,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=300,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 26279,\n+                \"shrink_towards\": -8748,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 6.401979491327058e-46},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([340336, 528460, 774826, 1083004]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0007212a\\U000721dd\\U0007218d\\U00072150\\U00072118\\U000721f9\\U00088796\\U0007218c\\U0007bc39\\U0007212f\\U00072141\\U00072171\\U00094f5c\\U000721f9\\U000721bb\\U000721d1\\U000720ff\\U00072191\\U00072112\\U00072187\\U0007210d\\U00072129\\U000721c9\\U0007212b\\U000721a7\\U0009c42f\\U000721d6\\U00072127\\U00072180\\U0007a013\\U0007ac2a\\U00072135\\U00072149\\U000721a3\\U000721ba\\U00080dae\\U000721ae\\U0007210f\\U000721d6\\U0009d345\\U000982c7\\U000721a3\\U0009d4de\\U000721a5\\U000a0df5\\U00072174\\U0007211f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([467196, 669206, 888901]),\n+                ),\n+                \"min_size\": 35,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=5072,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 117,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-5_462_567_717_779_668_440,\n+            constraints={\n+                \"min_value\": -5_462_567_717_779_687_872,\n+                \"max_value\": 130_075_602_931_395_991_438_132_467_537_925_996_895,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    1_757_237_846_901_794_679: 0.00040957107953237224,\n+                    -5_462_567_717_779_632_277: 0.0017536374313231182,\n+                    -5_462_567_717_779_687_654: 0.002531904921284688,\n+                    -5_462_567_716_508_957_843: 0.0028307228480815108,\n+                    -5_462_567_717_779_675_243: 0.002531904921284688,\n+                    -5_462_567_713_750_476_463: 0.000684539760402632,\n+                    -5_462_567_717_779_687_829: 0.0017554759196532935,\n+                    39_117_142_652_526_985_587_380_527_104_356_012_509: 0.0033218136993012283,\n+                    -5_462_567_713_530_650_337: 0.0025411533841329837,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.723387962478369e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 8992819428035993.0,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.6840035344583686e-291,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"Y\\x92\\xef\\xbb\\r\\x15\\xa2\\xdc>\\x08\\x82\\xe0\\xd8\\x19\\xbc\\x94?\\r\\xad\\xcbW\\x98!`\\xfd\\xbba\\x92Rq\\x8dz\\xbbX)>\\x94\\xeb\\x85\\xdf\\xca\\xf9\\xdd\\xad#\\x11W\\x8d\\x10\\xe1\\x1d\\xbf\\x8ea\\xdaT\",\n+            constraints={\"min_size\": 21, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.2937113167399105e308,\n+            constraints={\n+                \"min_value\": 1.9,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.2937113167399105e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=85,\n+            constraints={\n+                \"min_value\": -22,\n+                \"max_value\": 300,\n+                \"shrink_towards\": 0,\n+                \"weights\": {85: 0.5523805440884055},\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000c91e4\\U0005a20c\\U0005a28d\\U0005a2f1\\U000aea98\\U0005a2ac\\U000be4a7\\U0005a2f4\\U0005a22f\\U0005a2cc\\U0005a203\\U0005a2cc\\U000c3aca\\U000892b9\\U0005a300\\U0005a20b\\U0005a2de\\U0005a279\\U0005a229\\U0005a260\\U0005a20f\\U0005a2e2\\U0005a2b3\\U0005a2b2\\U0005a268\\U0005a211\\U0005a269\\U0005a296\\U0005b7a3\\U000a5dc2\\U0005a2f8\\U0005a2ef\\U000a895a\\U0005a263\\U0005a25e\\U0005a288\\U0005a21d\\U0005a29e\\U0005a208\\U00086e61\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([369155, 852312])),\n+                \"min_size\": 8,\n+                \"max_size\": 108,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001b93e\\U0001b942\\U0001b8e5\\U0001b95b\\U0001b98b\\U0001b8fc\\U0001b961\\U0001b945\\U0001b90c\\U0001dcfe\\U0001c2b3\ud839\udce4\\U0001dcd4\\U0001b983\\U0001b9a0\\U0001b8f0\\U0001b8f9\\U0001b97a\\U0001c5de\\U0001b9b9\\U0001b923\\U0001b92f\\U0001b950\\U0001b8f4\\U0001c535\\U0001b8fc\\U0001ee78\\U0001c5a6\\U0001b916\\U0001b9a9\\U0001b9ab\\U0001b8f0\\U0001b989\\U0001b9ba\\U0001cc17\\U0001b948\\U0001b8c9\\U0001b98f\\U0001b998\\U0001e8d9\\U0001b946\\U0001b920\ud83d\uddd0\\U0001b8f0\\U0001b8d1\\U0001bcf9\\U0001b950\\U0001b977\\U0001b8fa\\U0001cc76\ud836\uddc9\\U0001b93f\\U0001b969\\U0001b97c\\U0001b911\\U0001b97b\\U0001b986\\U0001b960\\U0001b8d0\\U0001b9b0\\U0001c6f7\\U0001cbc0\\U0001b900\\U0001b8f6\\U0001b999\\U0001b8ee\\U0001b90b\\U0001b974\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([112832, 129772, 352588]),\n+                ),\n+                \"min_size\": 50,\n+                \"max_size\": 150,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.200034160591606e307,\n+            constraints={\n+                \"min_value\": 2.1409980324838356e16,\n+                \"max_value\": 1.7976931348623157e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2831,\n+            constraints={\n+                \"min_value\": 1000,\n+                \"max_value\": 4088,\n+                \"shrink_towards\": 8101,\n+                \"weights\": {\n+                    4088: 0.20862043299956462,\n+                    2818: 0.1500704603744718,\n+                    3073: 0.0832864379566925,\n+                    2831: 0.21711801683086412,\n+                    1302: 0.04770858025857474,\n+                    1330: 0.15480382578466842,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6680130223326725},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"hypofuzz.test_keys\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8075606004448594},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x7fk\\x951\\xb5\\xf9\\xceg\\x0bm\\xd4\\xe4\\xd6\\xa5\\x98\\xe9\\xd1\\xba\\xd1L\\xbd\\xd1F\\xd9\\x17\\xd3\\x1f\\x1a\\xd0\\x8d\\xb1\\xcc[\\xd7h\\xe9^\\xeb\\xfc\\x8cu\\xed\\xd0\\xc9g\\xe6\\xb9\\xf9\\xdb\\xc7\\xb8\\xb6\\x13!\\\\iXV\\x03\\xe3\\x98\\x96\\xaci\\x98W\\xf6\\x1aP\\xae\\xca\\x95\\x03\\x94\\x9a\\x87\\xbfy\\tE@G\\xf1\\x9d\\xfaIx>]U\\x8f\\xc8<\\xd9FP\\xdf\\x9e\\xae\\xb9\\xc2I\\x0c;\\x03\\xf8\\xd3\\xb6\\x19S\\x19h\\xc8\\xd9\\xef\\x14hh\\x0ejqb\\x90\\x0eZ;\\xe0\\xaa\\xb5\\xaf\\x8a1>&i\\xef\\xceWg\\x05E\\xa6'\\x8f\\xd8\",\n+            constraints={\"min_size\": 48, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.0558015805288693e-291},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.41061916662971687},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000df86b\ud821\udf4c\\U0004b360\ud821\udf26\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            100099,\n+                            137736,\n+                            144745,\n+                            423887,\n+                            554248,\n+                            703511,\n+                            752143,\n+                            1031138,\n+                            1032454,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 7405030539686645.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.546971531765218e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xda:[n\\x1536\\x80g\\xee\\x9cx5z\\x1a\\x18\\x91\\xcc\\xa7\\xd7\\xcde\\x82q\\xad\\x01\\x9d\\x99\\xc3\\xab\\xd2\\xb5\\xf3\\xd2\\x80[(\\x11\\xed=x\\x16\\xb8\\xee\\xb6\\xae+V\\xbd\\xd5#I\\xc6\\x8f\\x87>\\x9d\\\\\\x19\\xf3\\x1f\\xa4D\\x7f\\xc7\\x97i\\x943P\\xd2\\xd3\\xa6\\x07\"C\\\\Xme\\xd1lb\\x9d\\xe6;\\x04\\xb9\\xb7\\xe1\\x97\\xf0\\x13df\\xb4b\\xf8B|\\xf1\\xe2=p\\x89\\xd69|\\xbf\\xd8uv3\\xf9.',\n+            constraints={\"min_size\": 48, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\r\\xe0\\x86\\\\bHN\\xdd\\x0c=\\x12c\\xa4\\x83\\xf0\\xbe\\xbc\\x80\\x9e^D,:\\x93\\x8c\\x9c\\xe0\\xc5\\x9b]\\ti>\\xbcw:\\x08\\xa3\\xccbY=D\\xb9*\\x16\",\n+            constraints={\"min_size\": 20, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'(\\xf5\\x01\\x98E68\\xe7U\\x8a\\xfd\\xd5\\x05\\xa3\\t$j?\\x8f\\x12\\xd6\\xfc\\xa1\\x02\\x91:\\xa7\\xe5Y8E-\\xcc\\xec\\x8d\\xfb\\x82\\xe1\"\\x95!\\x11\\xa5\\xb0\\xafH\\xa0\\xe1\\xda\\xbe\\xb8&\\xae;}s\\xff#\\xf6\\x931\\x01\\xa6f;\\x04>\\x9c\\x19Srg\\x10$K\\xc0D\\xa6J\\xd0\\x08Z}S q\\xfe\\xa6\\x10!',\n+            constraints={\"min_size\": 33, \"max_size\": 133},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.9332946408227405},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xaa\\xe3\\x0b\\x10d#\\xba\\x14s\\x14\\xb7\\xa8|\\x1f\\xa4\\xde\\xb4\\xe5s\\xe3i\\xd6\\\\x\\x01\\x88/8\\x86\\xf4\\xc5\\x9e\\xd46N^\\x7f\",\n+            constraints={\"min_size\": 15, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.711298601709284e307,\n+            constraints={\n+                \"min_value\": -6.545944856869567e-231,\n+                \"max_value\": 6.447182246919104e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.711298601709284e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=357,\n+            constraints={\n+                \"min_value\": -4166,\n+                \"max_value\": 404,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9512,\n+            constraints={\n+                \"min_value\": 337,\n+                \"max_value\": 22589,\n+                \"shrink_towards\": -44,\n+                \"weights\": {\n+                    9512: 0.056457318859382814,\n+                    12875: 0.05852691781947564,\n+                    10178: 0.03149884775449554,\n+                    15884: 0.021895991974980267,\n+                    14145: 0.03026525090924275,\n+                    17411: 0.034892678816957616,\n+                    19127: 0.013544069083338568,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9992,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1a\\xb8ez'\\x17\\x11\\x05f\\x8c\\xeaJ\\xc3\\x85F\\xd36\",\n+            constraints={\"min_size\": 12, \"max_size\": 112},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.867347490293886e307,\n+            constraints={\n+                \"min_value\": -9476713813953020.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.867347490293886e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.0293275051800616e105,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=19918,\n+            constraints={\n+                \"min_value\": 19831,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u1832\u188c\u189d\u1867\u18be\\u18ac\u1825\u1862\u18da\\U0009cd70\u18bb\u18e5\u18e3\u185e\u1833\u18c7\ud86f\udea8\u18c4\\U0008e9f8\u188f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            6160,\n+                            9999,\n+                            57856,\n+                            71432,\n+                            76542,\n+                            139918,\n+                            155381,\n+                            295933,\n+                            321999,\n+                            323652,\n+                            325446,\n+                            387161,\n+                            395333,\n+                            427897,\n+                            434153,\n+                            461407,\n+                            532504,\n+                            751133,\n+                            768505,\n+                            769709,\n+                            787888,\n+                            881890,\n+                            946186,\n+                            960086,\n+                            1024934,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=22054,\n+            constraints={\n+                \"min_value\": 21364,\n+                \"max_value\": 23473,\n+                \"shrink_towards\": 6_651_125_136_894_586_414,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u2b21\u2b4b\u2ad6\u2b57\u2add\u2b55\u2b0e\u2b33\u2a90\u2afa\u2b67\u2b59\u2ab7\u2b2d\u2aee\u2a88\u2b1a\u2b7a\u2acf\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([10880, 192111, 560777, 916912]),\n+                ),\n+                \"min_size\": 16,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9567090038473396},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([84854, 152075, 231882, 577617, 769624, 835269]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=37,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 0.05,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.5744892731460716e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'H\\xbb\\xf9e\\xd04\\x16o\\x1f=X=bK\\xe6Y\\xfdW\\xef\\xbe\"1\\xb5\\x0c\\xcb\\x05\\xa7\\xaa\\xac\\xd4\\xdf\\xc0\\x9eW3\\x00\\xda\\x81e\\xad\\xe6\\xb6%\\x81C&\\xc09\\xf9',\n+            constraints={\"min_size\": 16, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2_095_868_051_282_481_493,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -505887068,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x0e\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7_133_640_704_884_125_941_218_282_943_418_844_347,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.831868960821286e244,\n+            constraints={\n+                \"min_value\": 0.5,\n+                \"max_value\": 8.77005942922992e244,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.747858959717891e207,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u023a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [300, 82013, 164749, 417987, 616314, 671171, 1048494, 1074500],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xda\\xb8hj`\\xff\\xcf\\xbc@R*@\\xdc\\xe0\\xfe\\xcbE\\x16,W\\x1d|4\\xc2bY?\\xe4\\x8cJ_,\\xa2\\xd7\\x99X\\x06\",\n+            constraints={\"min_size\": 36, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.468938744970846e307,\n+            constraints={\n+                \"min_value\": 3.1813806781818508e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7870403948068123e-293,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1_547_390_519,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9b\\x87\\x02\\xf9$M\\x9d\",\n+            constraints={\"min_size\": 1, \"max_size\": 101},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xd7N\"3\\x1e\\xc3',\n+            constraints={\"min_size\": 6, \"max_size\": 106},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"e\\x17fJ\\xc3\\x85F\\xd36\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2_062_388_640,\n+            constraints={\n+                \"min_value\": 106,\n+                \"max_value\": None,\n+                \"shrink_towards\": 118,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.498502575743487e274,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud800\udc19\ud800\udc57\ud800\udc43\ud800\udc55\ud846\ude32\ud800\udc2a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([65535, 336565, 1098733]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.015489296741764805},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"?K\\xdc\\x18\\xed\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\udc4b\\udc78\\udc8f\\udcb5\\udc3e\\U000ffa84\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([56254, 105724, 224312, 1114110]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 86,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"0\\xb6\\xbe\\xec\\xb3\\xa1\\xfb\\x98\\xdc#\\xf3\\x9a\\x91\\xa2\\xd1\\x8e\\x97Q\\rJ\\x03\\xa9\\x9fh2\\x0cS`*\\x07>\\xa57\\xa0\\x8b\\x97\\x13\\x8e\\xca\\x0fn\\xfb\\x05[\\xf7\\xf9\\xcf`5B\\x0f{\\x9d\\xd4\\xe0\\x9c\\xc3S\\x97\\x1d&\\\\e5/\\x02\\r\\xe4~J\\xf2\\xc6\\xb1\\xd2\\xed\\xc7a{\\x1e\\x0f\\xe3Q\\xd8\\xadP\\xcd\\xd6{#>\\x978Pg*\",\n+            constraints={\"min_size\": 45, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9322329333613042},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.4769809266715025e308,\n+            constraints={\n+                \"min_value\": 2.4121010542942042e-57,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.014831444810523e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud820\udfa4\ud820\udf40\ud820\udf41\ud820\udf9c\ud820\udf7e\ud820\udf08\ud820\udf71\ud820\udf29\ud820\udf7c\\U00091074\ud820\udef1\ud820\udfb6\ud820\udf50\ud820\udfaf\ud820\udefa\ud820\udf53\ud820\udf55\ud820\udf9b\ud820\udf17\ud820\udf61\ud820\udefe\ud820\udf89\ud820\udee6\ud820\udeef\ud820\udee8\ud820\udf66\ud820\udf48\ud820\udee8\ud820\udf12\ud84c\ude5a\ud820\udf7e\ud820\udf89\ud820\udf40\ud820\uded8\ud820\udf91\ud820\udf3e\ud820\udf5e\ud820\udf48\ud820\udf6d\ud820\udf4a\\U000a5baf\ud820\udf6a\ud820\udf0a\ud820\udf76\\U000578ac\ud820\udf19\ud820\udf2f\ud820\udf57\ud820\udfbe\\U0003fd18\ud820\udf3c\ud820\udf91\ud820\udf56\\U0006efca\ud820\udf42\\U0002f107\\U0008f43b\ud820\udf52\ud849\udc94\ud820\udf05\ud820\udf62\ud820\udfa9\ud820\udf1d\ud820\udf81\ud820\udf0b\ud820\uded6\ud820\udefb\ud820\udefc\\U000580fb\\U0006ef7d\ud820\udf09\ud820\udf27\ud820\udf9a\ud820\udfaa\ud820\udee7\\U0003a524\ud820\udf5e\ud820\udf6c\ud820\udf5b\ud820\udf33\ud820\udee2\ud868\udc99\ud820\udf8c\ud820\udf96\\U000d0500\ud820\udf45\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            99017,\n+                            368640,\n+                            424822,\n+                            488045,\n+                            572565,\n+                            735727,\n+                            823839,\n+                            861229,\n+                            948548,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 47,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=28713,\n+            constraints={\n+                \"min_value\": 28228,\n+                \"max_value\": 29643,\n+                \"shrink_towards\": 24909,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5720930836149402},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=20687,\n+            constraints={\n+                \"min_value\": -28,\n+                \"max_value\": None,\n+                \"shrink_towards\": -28314,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd2\\x1b!\\x935\\x87\\xd3\\x8cmAXk^\\x14\\xc8+\\xb6\\xb8\\x10\\x02\\xea\\xbc\\xad\\xccH\\xe4g\",\n+            constraints={\"min_size\": 11, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8504242754018334},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1cj~\\xb9\\x1a(\\xd6\\xdb\\x91\\x96\\xca[\\xf1E\\x91\\xecH/g\\x12\\x85\",\n+            constraints={\"min_size\": 20, \"max_size\": 120},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1630,\n+            constraints={\n+                \"min_value\": -6066,\n+                \"max_value\": 9999,\n+                \"shrink_towards\": 404,\n+                \"weights\": {\n+                    7994: 0.12908940472072883,\n+                    8605: 0.04517692365273567,\n+                    -2043: 0.07252615909065349,\n+                    1602: 0.07593021587170233,\n+                    -1373: 0.023256187937481004,\n+                    5113: 0.10176362355373372,\n+                    3431: 0.033382977212034044,\n+                    -5174: 0.006737358619392507,\n+                    1977: 0.09004994322133517,\n+                    -548: 0.0072526159090653495,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 3.91967667679724e-12},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00062cc1\\U00062cff\\U00062c7b\\U00062d10\\U00071f09\\U00062d17\\U00062c8b\\U00062c7d\\U00062cd8\\U00062cf4\\U00062c49\\U0007117c\\U00062c54\\U00062c2f\\U00072868\\U00062d1c\\U00062cac\\U00062d06\\U00062c7f\\U00062d07\\U0006931e\\U00062caf\\U00062c7e\\U00062c9f\\U00062c7c\\U00062cc9\\U00062c58\\U0008193d\\U00062c7b\\U00062e6d\\U00062ce6\\U00062c90\\U00062c57\\U0007d351\\U0007776a\\U00062c97\\U00062c75\\U00062cdc\\U00085639\\U00062c33\\U00062cb7\\U00062c3b\\U00062cc7\\U00062cfc\\U00062c6a\\U00062d11\\U00062cba\\U00062c7c\\U00062c52\\U00062cc4\\U00062cb4\\U00062ca6\\U00062c75\\U00062cf9\\U00062cfd\\U00062c88\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([404520, 556294, 1114110]),\n+                ),\n+                \"min_size\": 26,\n+                \"max_size\": 126,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"_\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00034b07\\U0009b8e4\\U00034ab4\\U000366cc\\U00034ace\\U00034a9a\\U00034a3f\\U0003740c\\U00034a47\\U0009e663\\U00034a63\\U00034a7d\\U00037e2f\\U00034a7b\\U0009e84d\\U00034a5c\\U000392e5\\U00034b1a\\U00034ac5\\U0003911d\\U000393ec\\U0009eddb\\U00034b27\\U00034a44\\U00034a32\\U00034a51\\U00034b18\\U00034ac3\\U00034aea\\U00034b10\\U00034ad8\\U00034a85\\U00034ad4\\U00034a84\\U00034a7e\\U00034b06\\U00034af8\\U000363b9\\U00034ad4\\U00034ad1\\U0003a212\\U0009f87d\\U00034a44\\U00034b28\\U00034b18\\U00034af7\\U00034a4b\\U00034af1\\U00034ad2\\U0009d8d9\\U00034adf\\U00034aad\\U00034a38\\U00034b0b\\U00034aec\\U00034afb\\U00034b1e\\U00034ac7\\U00034af7\\U00034ad8\\U00034a83\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([215598, 249081, 633482, 665595, 808258]),\n+                ),\n+                \"min_size\": 47,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1158,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -126,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000c923c\u551f\u5533\u54d4\u550f\u54c1\u54c0\u5480\u547e\u5537\u54ec\u5504\u552f\\U00066859\u5511\u54bf\u5468\u5470\u552c\\U00068c8a\\U000b6c77\u54e3\u5506\u5535\u5501\u54b9\u5535\u5470\u54ad\u54ee\u549d\u5523\\U000db455\u54a3\\U000c9f8b\u5456\u54eb\u5511\\U000dc30f\u54c8\u552a\u54bd\u54e4\u54ee\u54ad\\U0005f07a\u5525\u5484\u553e\u552a\u54d9\\U000cb531\u551b\\U00069362\u54f7\u54d7\\U000d22d9\u54c1\u54f2\u5487\u548d\u5541\\U0007cee3\\U00068166\u54b8\u54b6\u548c\u54bf\\U000889c2\u54fb\\U000bfedb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            21586,\n+                            35061,\n+                            339166,\n+                            562636,\n+                            645184,\n+                            684151,\n+                            741013,\n+                            917382,\n+                            944081,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 48,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-67,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 121,\n+                \"shrink_towards\": -7,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5e-324},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.07729732470123364},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0009b0bd\\U0009b0b9\\U000bb861\\U0009afe6\\U0009b028\\U0009afe0\\U0009b084\\U0009b029\\U000a699c\\U0009b080\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([634846, 891104])),\n+                \"min_size\": 5,\n+                \"max_size\": 82,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xb2\\xa88\\x929\\x91\",\n+            constraints={\"min_size\": 5, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([535419, 1016540, 1073183])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6716813195791104},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-945200808,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -945177597,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x84\\x1a,\\x8a\\xb8q\\x82q\\x16\\xf9\\x07n\\x96\\xdb$\\xd1LF\\x06\\xc9`\\xa6L\\xa4E\\x8e\\x86\\xfb[\\xe7\\xd3^\\x02!\\xcc\\x0bUD\\xd3\\x12kq\\tO\\xde\\x8b\\x81\\xab\\xea\\xa7\\xcfmEI,\\x93\\\\\\xc1\\xd4\\x02\\x1d\\xceF\\x01\\xba\\xd1o3H\\x0fk\",\n+            constraints={\"min_size\": 43, \"max_size\": 143},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.12650163613155077},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud833\udf9d\ud833\udfb6\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([118527, 462973])),\n+                \"min_size\": 0,\n+                \"max_size\": 28,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.368377044904348e307,\n+            constraints={\n+                \"min_value\": 4.974493015413071e16,\n+                \"max_value\": 1.6986952548162127e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.008113168336921e-223,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.5,\n+            constraints={\n+                \"min_value\": 0.0,\n+                \"max_value\": 0.5,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1e-323,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00042392\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([271234, 573686, 908540]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf1\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.3528369021602812e308,\n+            constraints={\n+                \"min_value\": 1.4388391582851786e269,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.875682254568594e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-27816,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -73,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.3877899979534908},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7974672191085608e308,\n+            constraints={\n+                \"min_value\": 4.78164743074921e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.142322168534461e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005d53b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            17648,\n+                            209324,\n+                            291155,\n+                            444837,\n+                            471853,\n+                            487695,\n+                            663052,\n+                            748744,\n+                            831480,\n+                            923350,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.2399965542729507e308,\n+            constraints={\n+                \"min_value\": 6.273437242580985e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.2399965542729507e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8760804700188378},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.7187178585308188e-126},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=31478,\n+            constraints={\n+                \"min_value\": 26048,\n+                \"max_value\": None,\n+                \"shrink_towards\": 1_383_601_714,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004a34e\\U0004a3f3\\U0004a387\\U0004a41d\\U0004a39f\\U0004a3b1\\U0004a3fa\\U0004a428\\U00069401\\U0004a396\\U0004a364\\U0004a3ee\\U0004a3c3\\U0004a417\\U00070364\\U0004a998\\U0004a3a6\\U0004a3b4\\U0004a417\\U0004a35e\\U0004a421\\U0004a3c2\\U0004a395\\U0004a436\\U0004a367\\U0004a3b6\\U0004a43e\\U000755c7\\U0004a3f6\\U0004a3d0\\U0004a3f3\\U0004a383\\U0004a346\\U0004a3af\\U0004a43a\\U0004a3ca\\U0004a3ab\\U0004a425\\U0004a429\\U0004a3f0\\U0004a3ef\\U0004a365\\U0004a40b\\U0004a37c\\U0004a42a\\U00097059\\U0004a402\\U0004a3fa\\U0004a38d\\U0006d7c8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([303940, 684447, 1087442]),\n+                ),\n+                \"min_size\": 35,\n+                \"max_size\": 132,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003bb0c\ud866\ude87\u00de'\\U0009a6d5\u00f6d\u00f985\\x82\u00fb,F\\x92\u00cd\u00bbq\u00c0\\U0001b69f.\\U0009da20\ud840\udf7b\\x7f\\U00097beb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1, 161492, 162978, 249863, 590505, 751306]),\n+                ),\n+                \"min_size\": 21,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.671012709270136},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-28103,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".observation\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0002374946342132425},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.3870347196779466e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud81d\udc7e\ud81d\udc76\ud81d\udc28\ud81c\udff0\ud81d\udc4c\ud81d\udc64\\U000874ae\ud81c\udfe0\ud854\ude29\ud81d\udc8d\ud81d\udc48\ud81d\udcb3\\U000a7b56\ud81d\udc2d\\U0009eb41\ud81d\udcc4\ud81d\udc9a\ud81f\udec8\ud81d\udc93\ud81d\udcc1\ud81d\udc7d\ud81d\udc00\ud81d\udc1b\ud81d\udc1b\ud81d\udc85\ud81d\udc77\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [95184, 168725, 448022, 715573, 1090089, 1097637, 1114111],\n+                    ),\n+                ),\n+                \"min_size\": 20,\n+                \"max_size\": 120,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u023e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [300, 9999, 389855, 425216, 470464, 493377, 649696, 911135],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-68,\n+            constraints={\n+                \"min_value\": -9799,\n+                \"max_value\": -38,\n+                \"shrink_towards\": -13684,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000338d4\\U0003390f\\U0003396f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([211134, 227398, 399856]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=6_345_491_824_029_097_295,\n+            constraints={\n+                \"min_value\": -59_958_689_357_434_950_922_056_766_424_902_821_526,\n+                \"max_value\": None,\n+                \"shrink_towards\": 5,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            197985,\n+                            243722,\n+                            421957,\n+                            490086,\n+                            659967,\n+                            813049,\n+                            1002318,\n+                            1103381,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003694f\\U00036a27\\U000369a3\\U000a9fee\\U00036995\\U0003697f\\U00036967\\U000369e6\\U00036973\\U000369db\\U00036958\\U000369b7\\U00036960\\U0003cc12\\U000369d9\\U00036a19\\U000369de\\U00036a37\\U00036a1c\\U0003697c\\U000aa73b\\U000369d4\\U000bfba9\\U0003695d\\U000a0643\\U00036a08\\U0003697b\\U00036a11\\U000369b2\\U000422d3\\U0003e3db\\U00036a07\\U00036a1e\\U00036a13\\U0003699e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([223567, 278619, 526884, 790472, 895308]),\n+                ),\n+                \"min_size\": 11,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5169637905207517},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6160462445971099},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud866\udc5c\ud866\udc08\\U0002feed\\U000b8b8d\ud865\udfe5\ud866\udc30\ud866\udc9f\ud866\udc39\ud865\udfed\ud866\udc19\ud866\udc47\ud865\udfc7\ud866\udca2\ud865\udff0\ud866\udc1c\\U0003ad4c\ud866\udc7f\\U00040468\ud865\udfc0\ud866\udc83\ud866\udc78\ud866\udcaa\ud866\udc5d\ud865\udfe6\ud866\udc45\\U00052dde\ud866\udc35\ud866\udc1d\ud866\udc50\ud866\udc38\\U000668f2\ud866\udc82\ud866\udc2d\ud866\udc36\ud866\udc6f\ud866\udc54\ud866\udc45\ud866\udc61\ud866\udc80\\U000631b2\\U00061661\ud866\udc2e\\U0004e923\ud866\udc39\ud866\udc6b\ud866\udc07\ud865\udfdd\ud865\udfe7\ud866\udc9d\ud866\udc4b\ud865\udfea\ud865\udfd7\\U0004592e\ud866\udca7\ud866\udc5b\ud866\udc65\\U000e10c0\ud866\udc5f\ud866\udc79\ud866\udc69\ud866\udc6e\ud866\udc13\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            169913,\n+                            438438,\n+                            732739,\n+                            741710,\n+                            746173,\n+                            757694,\n+                            909204,\n+                            932160,\n+                            1108535,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 34,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.2888150759968404e-204,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.225073858507e-311},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xce-\\x00\\xec\\xbc8\\xf6\\xde~\\xe41\\xc2\\xb1w\\xa7\\x90\\xf0\\xfb\\xac\\xef\\xfb&\\xb7BW\\xa6\\xad\\xf1\\x144\\x97-\\x04\\xc2\\x13}h'\\xb2\\x96-\\x1a\\xdes\\x886_1f\\xd3\\x03\\x84\\x94j@\",\n+            constraints={\"min_size\": 44, \"max_size\": 144},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.08370073585390882},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.4494953054617786},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1825842441815156e308,\n+            constraints={\n+                \"min_value\": 5.600491077260555e16,\n+                \"max_value\": 1.5932819241226206e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.1825842441815156e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-11645,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -82,\n+                \"shrink_towards\": -109,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"9O09c\\xc3\\xe3\\xa2/\\xc0\\xa04<rm\\xcfo\\x03\\xaf\\x9a'8\\xab\\x80\\x1fE\\xfal\\xbe\\x10\\x07&\\xf6\\x1b\\xf9;\\xb1\\xe4-\\x19\\xc5Q>\\xa0\\xcdPM\\x92\\x96\\xa5\\x0b{\\x80<\\xa0\\xf4~\\xd3\\xe9\\xad\\x9b7\\x8b\\xfa+~\\t\\x91\",\n+            constraints={\"min_size\": 26, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.6203083498512536e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.3575667445670904e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7_959_249_899_353_651_246,\n+            constraints={\n+                \"min_value\": 7_959_249_899_353_651_185,\n+                \"max_value\": 7_959_249_899_353_651_274,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    7_959_249_899_353_651_246: 0.01289581922574324,\n+                    7_959_249_899_353_651_228: 0.4871041807742567,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-26302,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 21723,\n+                \"shrink_towards\": -11225,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5667477662149513},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=14012,\n+            constraints={\n+                \"min_value\": 13999,\n+                \"max_value\": None,\n+                \"shrink_towards\": 8_838_929_580_675_237_640_978_020_549_266_804_045,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\":\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004baf2\\U00056803\u00ba\u00bbD\\x11\u00d4\u00efo\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([0, 110713, 235402, 388147, 603095]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6692461118059866},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8185,\n+            constraints={\n+                \"min_value\": 45,\n+                \"max_value\": 14133,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.0553831065241872e308,\n+            constraints={\n+                \"min_value\": 10000000.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.1125369292536007e-308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6426336149435782},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-19981,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -1777,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2755,\n+            constraints={\n+                \"min_value\": 118,\n+                \"max_value\": 14160,\n+                \"shrink_towards\": 3_678_088_278_551_136_448,\n+                \"weights\": {\n+                    8222: 0.00677254975165214,\n+                    3626: 0.05414044562603458,\n+                    10856: 0.0323831745710631,\n+                    2755: 0.14891470584608715,\n+                    12935: 0.20217272308997186,\n+                    9999: 0.08795465517577193,\n+                    9950: 0.2502217215548798,\n+                    9830: 0.21434892976830625,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.36456057715388496},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=8.338960315219311e307,\n+            constraints={\n+                \"min_value\": 1.2764042203102644e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.338960315219311e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-587,\n+            constraints={\n+                \"min_value\": -9866,\n+                \"max_value\": -99,\n+                \"shrink_towards\": -6619,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0024063942914327456},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.20151300537497457},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"Q5^-\\x8b\\xdeF\\xa3\\xb5Z\\xd3'*\\x98\\x8b\\xc8\\xa3\\x8c\",\n+            constraints={\"min_size\": 16, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0009dcb1\\U0009ebaa\\U0005aab8\\U0005ab45\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            371377,\n+                            471100,\n+                            493503,\n+                            578419,\n+                            637869,\n+                            768679,\n+                            784911,\n+                            1003176,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-25605,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-5076,\n+            constraints={\n+                \"min_value\": -15532,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.8038495155454015},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xb1K\\xda/vw;\\xb3\\xeb\\x11w\\xbdF\\x03H<\\xd3\\x1b\\xc8\\x07\\xf2\\xf5\\xd9yd\\xea\\xadC\\xb1\\xdanO\\x05\\xc1\",\n+            constraints={\"min_size\": 20, \"max_size\": 120},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8bn\\x15.\\xe0\\xf5\\x8a\\xabm\\x87?\\xd2*U\\xb1\\xf4\\xd6\\xdfC\\xa1N\\x81\\x1fi>\\xfc\\x92L\\xab\\x11O.\\xfb<4\\x12\\xff\\x8e\\xff-\\n\\x99\\t\\xa8\\xa5yL`h\\x16&\\xc1A\",\n+            constraints={\"min_size\": 49, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1_247_164_102,\n+            constraints={\n+                \"min_value\": -1_247_164_350,\n+                \"max_value\": -111,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    -1_247_164_097: 0.12625400789701416,\n+                    -516320633: 0.2486967650179315,\n+                    -1_119_387_145: 0.12175230833338242,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.192092896e-07},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4905,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 109,\n+                \"shrink_towards\": -63,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.016201171941520712},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-110_630_662_059_620_347_212_270_240_434_396_772_294,\n+            constraints={\n+                \"min_value\": -110_630_662_059_620_347_212_270_240_434_396_772_467,\n+                \"max_value\": -21967,\n+                \"shrink_towards\": 21900,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0008588a\\U00063b62\\U00063b0d\\U00063b99\\U00063afb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([408313, 588703, 689485, 732656, 884096, 973045]),\n+                ),\n+                \"min_size\": 1,\n+                \"max_size\": 101,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9117062536218503},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-23646,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -5374,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x89LT\\x1a\",\n+            constraints={\"min_size\": 4, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"s[\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=15445,\n+            constraints={\n+                \"min_value\": 13394,\n+                \"max_value\": None,\n+                \"shrink_towards\": 84,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8_050_361_829_212_617_563,\n+            constraints={\n+                \"min_value\": 2015,\n+                \"max_value\": None,\n+                \"shrink_towards\": 6984,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf0\\x02\\xd7\",\n+            constraints={\"min_size\": 2, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7082,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -7077,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 4.423219078121499e72,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.715506316425478e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=6082,\n+            constraints={\n+                \"min_value\": 6064,\n+                \"max_value\": None,\n+                \"shrink_towards\": 57,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud86f\udfef\ud864\udfdc\\U0006751a\ud865\udc08\ud865\udc74\ud864\udff6\\U000838c3\ud865\udc9c\ud865\udc3a\ud865\udc96\\U0005e8c7\ud865\udc55\ud865\udc44\ud865\udc9f\ud864\udfcf\ud865\udc5f\ud865\udc23\ud865\udc56\ud864\udffc\ud865\udc6a\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([168864, 604711])),\n+                \"min_size\": 10,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7763,\n+            constraints={\n+                \"min_value\": 43,\n+                \"max_value\": 18831,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8144294901030398},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x89\\x07\\x8b\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=65535,\n+            constraints={\n+                \"min_value\": 30847,\n+                \"max_value\": None,\n+                \"shrink_towards\": -5051,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.065751324138078e-06,\n+            constraints={\n+                \"min_value\": -1e-05,\n+                \"max_value\": -9.264536124467139e-237,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.065751324138078e-06,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.1,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.83170486812259e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"m\\xb5}\\xe8\\xb9\\n\\xa9\\xac\\xad\\xb7\\x0e\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8a\\x94\\xdc\\x07\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud800\ude88\\U000ab539\ud800\udec7\ud800\udf36\ud800\udeb6\ud800\udefb\\U000102fd\ud800\udee4\\U000102fd\\U000f3cb9\ud800\udf75\ud800\ude9a\\U000102d9\ud800\ude95\\U000e0bfb\ud800\udf46\ud800\udec1\ud800\udf01\ud800\udead\ud800\udf16\ud800\udf44\\U000ad99d\\U000f4d1c\ud800\udf1d\ud800\ude87\ud800\udf64\ud800\udebe\ud800\udee4\ud800\udebf\\U000e0b41\ud800\ude85\ud800\udf3f\ud800\udee3\ud800\udecd\\U000ba24f\ud800\udf33\\U000f806e\ud800\udefb\ud800\udf3c\ud800\udf53\ud800\udea6\ud800\udf3b\ud800\udf0a\\U00036898\\U000102d3\\U000adc89\ud800\udeac\ud800\udeaa\\U000102da\ud800\udeec\ud800\udf81\\U000a0125\\U000fd132\ud800\udf62\ud800\udf3d\ud800\ude8d\ud800\udf67\ud800\udf82\ud800\udef8\ud871\udcf6\\U000e5df2\ud800\udee3\ud800\udf3b\ud800\ude98\\U000102d6\ud800\udef7\ud875\udc1c\\U000dd546\ud800\udef0\ud800\udee2\ud800\udf65\\U0001029f\ud800\udee0\ud800\udee9\ud805\ude9b\ud800\ude86\ud800\udf49\ud800\udf05\ud800\udf50\ud800\udf44\ud800\udf39\ud881\ude34\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            66179,\n+                            72583,\n+                            103727,\n+                            237643,\n+                            623693,\n+                            804856,\n+                            886487,\n+                            952009,\n+                            992168,\n+                            1039129,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 32,\n+                \"max_size\": 132,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4060,\n+            constraints={\n+                \"min_value\": 3926,\n+                \"max_value\": 1_107_849_284,\n+                \"shrink_towards\": -22237,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9413,\n+            constraints={\n+                \"min_value\": -6,\n+                \"max_value\": 30685,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xcf*_\\xe6\\xdd\\xb1\\xcd\\x80\\xdd>\\xfa\\xda\\xc6W\\xe7\\xb7\\x9e\\xf8,\\x0e\\xdedA\\xa8\\x96Q\\xba\",\n+            constraints={\"min_size\": 13, \"max_size\": 113},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7779529973959791},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.103515625e-05,\n+            constraints={\n+                \"min_value\": -2.3669921469900595e-200,\n+                \"max_value\": 5.470675294884694e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 9.824884960447748e-283,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"y\\x84J\u00e5S\u00db\u00d3V\u00dd\u00d4Mi\u00f0B\\U0005d186\u00e6t\\U00094475\\U0008c2bdo\\U00089807\\U0008ce75o\u00dch\\x80\u00ac\\x1a\\x86\u00bf\\U0006b365\\x12\ud820\udd44\\U0003b4a5\u00d8\u3e9a\\U0004b584\\U0004c018o\\x9bZ\\U0009a6b4|g\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            33371,\n+                            66290,\n+                            109989,\n+                            204647,\n+                            667243,\n+                            677503,\n+                            684701,\n+                            964068,\n+                            970367,\n+                            1000802,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 38,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x87\\xed\\x8eKI$lh\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6418921349384922},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=404,\n+            constraints={\n+                \"min_value\": 83,\n+                \"max_value\": 903,\n+                \"shrink_towards\": 38,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00016015\\U000d5911\\U000160a5\\U00016061\\U000160c7\\U000160ce\\U000d65e0\\U00016019\\U00015ff8\\U000160d7\\U000160bd\\U000160d4\\U00016057\\U00016064\\U000160bb\\U000160a0\\U000160e9\\U000160f0\\U0001603f\\U0001602b\\U00016001\\U000f2575\\U000160ee\\U000ee9ce\\U00016035\\U000160ce\\U00016016\\U000f10fc\\U0001607c\\U000160a0\\U000160f1\\U000d8ec5\\U000160f2\\U000160ed\\U000f7e83\\U000160dd\\U00016089\\U0001603a\\U00016024\\U0001605b\\U000160d8\\U000160c8\\U00016008\\U00016071\\U0001600f\\U00015ff9\\U000160d6\ud86b\udd16\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            90100,\n+                            181916,\n+                            349764,\n+                            356330,\n+                            460565,\n+                            470999,\n+                            835403,\n+                            889902,\n+                            920835,\n+                            1059596,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 41,\n+                \"max_size\": 141,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.05,\n+            constraints={\n+                \"min_value\": 6.7834846121291456e-307,\n+                \"max_value\": 0.05,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.010054426689111676,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe3)6\\xac\\xde;\\xd2u\\x95\\x0c&\\xb4\\xf65\\xb9T\",\n+            constraints={\"min_size\": 9, \"max_size\": 109},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe6\\xd3\\x90\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=6676,\n+            constraints={\n+                \"min_value\": -4,\n+                \"max_value\": 9999,\n+                \"shrink_towards\": -55_237_899_925_510_387_807_819_806_488_219_242_879,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000be42c\\U000c921e\\U000c659c\\U000be40f\\U000be3fa\\U000be43c\\U000be4cd\\U000be4be\\U000c21d4\\U000c06cc\\U000be406\\U000be4aa\\U000be41a\\U000be44e\\U000be4bd\\U000be46e\\U000be4b1\\U000be3fc\\U000be63f\\U000be402\\U000be4e1\\U000c2180\\U000be41f\\U000be3e7\\U000c790b\\U000c18e1\\U000be410\\U000be95e\\U000be4e4\\U000be44b\\U000be4b1\\U000bfcd0\\U000be430\\U000c80c6\\U000be3fb\\U000c72fe\\U000be432\\U000be3f7\\U000c4be7\\U000be45f\\U000c6627\\U000c4294\\U000be412\\U000be41e\\U000be4a1\\U000be4b3\\U000c77f4\\U000be4a8\\U000be48e\\U000c017e\\U000be48c\\U000be477\\U000be3f3\\U000be4c1\\U000be465\\U000c8abf\\U000be4b3\\U000be4a3\\U000be46a\\U000be43e\\U000c03af\\U000bf47d\\U000be47c\\U000be49b\\U000be474\\U000c7339\\U000c5066\\U000be4aa\\U000be472\\U000be4e3\\U000be473\\U000c8618\\U000c1dd5\\U000be4d8\\U000be4ac\\U000be46c\\U000be3f4\\U000be4c5\\U000be407\\U000be47f\\U000be42c\\U000be4ce\\U000be401\\U000c2345\\U000be4e3\\U000c7db8\\U000c4dcc\\U000c154e\\U000be411\\U000be4d6\\U000be40c\\U000be3ea\\U000be432\\U000be42c\\U000be45c\\U000c1d83\\U000bf801\\U000be4a4\\U000c854b\\U000be40f\\U000be44b\\U000be3f1\\U000be4bb\\U000be487\\U000be404\\U000beeda\\U000be4b4\\U000be480\\U000c3639\\U000be48a\\U000be4b2\\U000c31ec\\U000be4cf\\U000c4bda\\U000c362e\\U000c423c\\U000c84fe\\U000be4ab\\U000be491\\U000be4bd\\U000be48b\\U000be418\\U000c6d79\\U000be487\\U000c0eb3\\U000be4b4\\U000be42b\\U000be470\\U000be443\\U000be441\\U000c940e\\U000be4c0\\U000be471\\U000be4db\\U000be48f\\U000be400\\U000be3f3\\U000be417\\U000be42a\\U000be44d\\U000be3eb\\U000be49b\\U000c4aed\\U000be447\\U000be411\\U000be464\\U000be445\\U000c8e6e\\U000be43e\\U000be44c\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([779238, 824786])),\n+                \"min_size\": 50,\n+                \"max_size\": 150,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=29698,\n+            constraints={\n+                \"min_value\": 28998,\n+                \"max_value\": 30271,\n+                \"shrink_towards\": -40,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6069540877582896},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.488970883172288e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x90;\\xa0[\\xc8\\x05<Qz\\xaa\\xbf\\x1c2\",\n+            constraints={\"min_size\": 7, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u1254\u12cc\u1225\u126d\u12e8\u12b5\\u2fe3\u12b3\\U00073280\u129f\u11f5\u12a7\u1246\u1203\u12e8\u1232\u11f9\u1277\u129f\u122d\u127a\u127d\u1275\u1279\u1296\u12d0\u11f4\u120d\\U0005cd03\\u128f\\U000701ed\u1296\u129b\u126e\u1239\u1240\u12b2\u1205\u12db\u120a\u129c\\U000ce38d\u12bc\u12b9\\U0009ab12\u127a\u12df\u127f\u12a7\u12ed\u1273\\U000bb903\\U000afb62\\U00076a0b\u1261\\u128e\u12e4\u1278\u11fe\u1288\\u12bf\u127c\u1242\u126f\\U0006e18f\u1254\\U000e73d3\u126d\u1258\u12dd\\U0009a0c3\u12bb\u12c8\\u12c6\u128c\u122d\\U000c57cd\u1264\u123a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            4595,\n+                            64170,\n+                            108017,\n+                            137227,\n+                            227968,\n+                            257405,\n+                            310558,\n+                            414663,\n+                            439303,\n+                            508976,\n+                            593202,\n+                            641060,\n+                            667789,\n+                            905489,\n+                            929702,\n+                            984994,\n+                            1098775,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 20,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x18\\xcd*\\x11\\x9aXS\\xeb\\xea\\xdf\\xc9\\xcb\\xdd\\x8c\\xd4pR\\xcfi\",\n+            constraints={\"min_size\": 14, \"max_size\": 106},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=48574,\n+            constraints={\n+                \"min_value\": 26783,\n+                \"max_value\": 65535,\n+                \"shrink_towards\": -19242,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000e75e9\\U00057066\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([356376, 390456, 605962, 968251, 1009022]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"}\\x91\\x88\\x92\\x12\\xa23\\x16P\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -8.45227060213495e270,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.4521515954198603e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.5,\n+            constraints={\n+                \"min_value\": 0.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.029578269289912e-296,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=77775,\n+            constraints={\n+                \"min_value\": 25494,\n+                \"max_value\": 6_976_701_703_034_816_625,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x00\\xaeU\\xf6\\xe1\\xd7\\x88\\xa8\\xbf0\\x81MDF\\xd0\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"e{\\xfb\\x06%@\\x03\\xc2P\\xba\\x8b\\xedN!\\x9d\\x06\\x15\\xa3\\xee\\x9dq\\xf5\\xb4\\x80\\xd7\\xd2eA\\xda\\x8dv\\xa3_\",\n+            constraints={\"min_size\": 13, \"max_size\": 113},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-12681,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 512,\n+                \"shrink_towards\": -28,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00ee\u9660\u00ef\\x9b\u00e6JO\u00a9\u00db\u00e2O\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1, 90942, 133340, 144540, 158524]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-3533,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -3481,\n+                \"shrink_towards\": -1,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5283402170026065},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud0af\ud0b8\ud091\ud10b\ud099\ud145\ud0de\ud081\\U0004ccf7\\U0006ea33\ud140\ud0fb\ud0d0\\U000de9a2\ud111\ud11f\ud0e4\ud0f8\ud130\ud0d0\ud0aa\ud116\\U0004cf7d\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            53335,\n+                            59175,\n+                            131304,\n+                            138966,\n+                            275637,\n+                            320867,\n+                            366637,\n+                            518468,\n+                            567537,\n+                            720477,\n+                            840128,\n+                            943595,\n+                            947129,\n+                            954009,\n+                            1080016,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 21,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=6390,\n+            constraints={\n+                \"min_value\": -1022,\n+                \"max_value\": 22927,\n+                \"shrink_towards\": 13,\n+                \"weights\": {\n+                    8606: 0.0635531116912449,\n+                    6390: 0.18475915869173268,\n+                    6578: 0.13398895307097483,\n+                    17917: 0.09154398695117345,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x7f%\\x10\\xd4\\xe2\\x7f\\xed\\xec\\x80g\\xbd\\x99\\x9d\\xf3\\x96\\x0f{c\\xfa\\x05\\x1a\\x955\\x17\\x0e\\xe0C\\x9c\\x83 <6\\x8b\\x0f9\\x84\\x13\\xcd!\\xa2\",\n+            constraints={\"min_size\": 34, \"max_size\": 129},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud800\udcb5\\U00010027\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([65535, 292060, 399957, 1033955]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.10863789622965195},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.659456977451192e307,\n+            constraints={\n+                \"min_value\": 2.225073858507203e-309,\n+                \"max_value\": 4.659456977451192e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.659456977451192e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7126965736869375e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.689742028506057e307,\n+            constraints={\n+                \"min_value\": 2.00001,\n+                \"max_value\": 5.516325946762017e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.689742028506057e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\ue868\\ue826\\ue845\\U0006e13c\\ue86a\\ue87f\\ue852\\ue870\\ue82d\\ue82f\\ue86c\\ue87f\\ue80b\\ue82a\\ue80b\\ue7e4\\ue816\\U000aea3d\\ue821\\ue7c1\\ue806\\ue7e5\\ue870\\ue880\ud852\udd7e\\U00039193\\ue7a3\\ue87e\ud86c\udc1a\\U00056e34\ud848\udf7f\\ue808\\ue834\\ue83b\\ue885\\ue79c\\U000576c7\\ue87c\\ue847\\ue7d7\\ue81c\\ue851\\ue7ca\\ue821\\ue816\\U000415df\\ue7c6\\ue795\\ue7f8\\ue857\ud820\ude54\\ue834\\ue7ef\\ue806\\U000a042d\\ue7b0\\ue7b1\\ue885\\ue83b\\ue7e8\\ue873\\ue83e\\ue84e\\ue85d\\ue7c4\\ue7ac\\ue7f8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            59276,\n+                            160674,\n+                            161343,\n+                            167331,\n+                            172329,\n+                            519625,\n+                            546218,\n+                            549356,\n+                            616964,\n+                            737689,\n+                            1062115,\n+                            1109953,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 37,\n+                \"max_size\": 137,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-14460,\n+            constraints={\n+                \"min_value\": -25379,\n+                \"max_value\": -25,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u276c\\U00081a27\u2732\u272a\u2803\u2736\u2710\u2771\u277b\u36e2\\U00087188\u2788\u7597\u2740\\U0004ba77\u27fd\u27be\u27fd\\U0004be0d\u271b\u27f4\\U00088fa7\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [9999, 65535, 302778, 321722, 514091, 564300, 735386],\n+                    ),\n+                ),\n+                \"min_size\": 13,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u026c\\U000154ed\\U0001afad\u01b4\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([404, 210855, 485521, 817489, 849590, 1052321]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000488be\\U000488a5\\U000b6c97\\U0004889f\\U0004892e\\U00048913\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([297008, 889605, 925481]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-36591,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -9335,\n+                \"shrink_towards\": -27,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.04991914930608e44,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 4.6314520298271856e64,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.571662762935822e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0470\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1000,\n+                            5410,\n+                            8192,\n+                            107785,\n+                            154348,\n+                            333046,\n+                            370482,\n+                            697203,\n+                            1028779,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xec\\rn\\x02|\\x1a_\\x82\\xa7\\xc2\\xb2\\xa5$\\x93.\\xe4\\x93@\\xa9\\x15o\\x1a\\xec\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=23042,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 25177,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.23035042289783864},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9e\\xcc\\x02C\\xfb'\\xd2\\xc1\\xff3C\\x163\\x83\\x0e\\x981\\x81\\x06\\xd0\\xb1\\x86]\\xee\\xd0u\\xc2!Y\\xa5*\\tY\\x9b\\x07c\\xa5\\x950\\xf7&R\\xe3\\xd4\\xf2\\xea?'\\xbcZ\\x045\\x11\\x19j\\xc5\\xd9\\xf4M)yB\\xc0\\xc3\\xb3\\x060S\\x81\\xdd>$\",\n+            constraints={\"min_size\": 44, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000c2a52\\U00039aa6\\U000399f0\\U00039a50\\U00039a4d\\U000bd954\\U00039a6f\\U00039aa9\\U00039a9a\\U000399f8\\U00039a0d\\U00039acb\\U000399f1\\U00039a87\\U00039aaf\\U00039a2b\\U00039a6f\\U00039a4a\\U00039a48\\U00039a6b\\U00039a39\\U000c1a12\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([235992, 378257, 444829, 891576, 972428]),\n+                ),\n+                \"min_size\": 12,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value='\u00a4}\\x1c7\\x9c\\x1d\\x7f\\U000f6124[\u00e3\"\\U0010ba94\u00c0A_\\x11x\\x95B1\\U0010022e\\U00104277T\\x05?\ud840\udfdb\u00e0',\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            1000,\n+                            8141,\n+                            111496,\n+                            126356,\n+                            307012,\n+                            322517,\n+                            343417,\n+                            405054,\n+                            435038,\n+                            485338,\n+                            502349,\n+                            516880,\n+                            534513,\n+                            641645,\n+                            646875,\n+                            663287,\n+                            663851,\n+                            751842,\n+                            769132,\n+                            780839,\n+                            789230,\n+                            830754,\n+                            836299,\n+                            845452,\n+                            854183,\n+                            890159,\n+                            897424,\n+                            917316,\n+                            937941,\n+                            957463,\n+                            978151,\n+                            990351,\n+                            1014317,\n+                            1022722,\n+                            1041031,\n+                            1046501,\n+                            1111895,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 8,\n+                \"max_size\": 108,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.2349590025534145e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x96\\xe3\\x84\\x89\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001568a\ud84e\udcd6\\U00015757\\U000156d0\\U0001575c\\U000156c3\\U0001573a\\U0001b5fe\\U000156a0\\U0001575d\\U00015742\\U000156a8\ud822\udc40\\U000156e5\\U00015734\\U00015698\\U00015662\ud821\udf45\\U0001a6a2\\U0001572c\\U00015674\\U00015688\\U000156a7\\U000156bc\\U00015733\\U0001a99b\\U00015661\\U000156e4\\U0001568d\\U00015734\\U00015685\\U000156b2\\U00015739\\U0001575d\\U000192d4\\U0001567f\\U00015691\\U000156b7\\U000156dc\\U00015670\\U0001e7aa\\U0001fd5c\ud84e\udc48\\U00015702\\U00015682\\U00015681\\U0001ae9c\\U0001574b\\U00015719\\U000156fa\\U00015676\ud841\udc75\\U0001571c\\U00015675\\U000156e9\\U00015688\\U000156ed\\U0001c284\\U0001a7ed\\U000156b7\ud821\udd55\\U00015732\\U0001571c\\U00015739\\U0001569d\\U000156ac\ud849\udcb8\\U00015686\ud81f\ude1d\ud84b\udd34\\U00015695\\U00015734\\U000156ec\\U00015688\\U00015713\\U00015733\\U000156c5\\U000156a1\\U0001568e\\U000156a1\\U00015a13\\U0001574a\\U00015700\\U00015745\\U00015736\ud84b\udc3b\ud846\uded1\\U000156dd\ud835\udf5e\\U000156f3\\U0001569e\\U0001915d\\U0001568c\\U00015715\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([87647, 147305, 379748]),\n+                ),\n+                \"min_size\": 50,\n+                \"max_size\": 150,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8340434093480353},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xea\\xd8\\x9f\\xdf\\xae\\x87n\\x18\\x8d\\xa5\\x19v\\xe4Zp\\xc45\\x1e\\xa7O\\xf7\\xa2\\x85=A\\xba\\x8el\\xf0\\xca\\xb6\\x83\\x83t\\x81\\x93ip\\x8b\\xe9H\\xc2\\x1c7\\x12\\xe6&\\xb3i\",\n+            constraints={\"min_size\": 29, \"max_size\": 49},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.6642103690588143e307,\n+            constraints={\n+                \"min_value\": -1.528090656649312e-233,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.6642103690588143e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00a6\u00d2\u00b3\u00f8Cw\u00b4\\x15)j\u00f4'\u00b3\u00f4N\\x90\\x1a\\x12H\\x01\ud81a\udddd\\U00054522\u00db\u00c8\\x0e\u00ba\\U000de870\\npT;\\x84\u00e4F\u0100\\U000e2c92\\x9e\\U000cbce5\u00ed%\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [1, 275396, 336911, 491641, 649694, 716126, 761783, 1033655],\n+                    ),\n+                ),\n+                \"min_size\": 14,\n+                \"max_size\": 114,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.037218711238761866},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-95,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 72,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=16493,\n+            constraints={\n+                \"min_value\": 16428,\n+                \"max_value\": 35827,\n+                \"shrink_towards\": 0,\n+                \"weights\": {25234: 0.2756889158823387},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9243,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -10175,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3644925035040952},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u27ad\u2732\u2716\u2791\u27fc\\U000a78c9\u2786\u2726\u2773\\U000ca07e\ud864\udc3a\u278a\\U000c7c75\u27cb\u27d4\u271f\u2732\\U0004a198\u27ec\ud84a\udf0a\u2775\u2799\u2737\u27b3\\U000a342b\\U000ac879\\U000ce421\ud84c\ude01\u27e0\\U000b7990\u27bf\u27a8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([9999, 355616, 646217, 893777]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.702198094154429e307,\n+            constraints={\n+                \"min_value\": 1.3638779139707246e-185,\n+                \"max_value\": 5.983376509736781e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1076248420189678e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.4011969940346606},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"M\\x04\\xf6`\\xa6I6VN\\r\\x1e\\x07\\xb8\\x93\\x12\\xcccB0P\\x06\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=156_833_491_148_131_456_571_978_492_234_713_549_102,\n+            constraints={\n+                \"min_value\": 152_153_180_688_121_135_237_239_823_978_942_033_064,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u02e4\ud888\ude5e\u02cd\u13dd\u02e0\u02b7\\U000816ca\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [512, 65993, 140423, 220707, 439809, 684666, 1045825],\n+                    ),\n+                ),\n+                \"min_size\": 5,\n+                \"max_size\": 94,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\"\\t\\xa6\\x10X\\x8a\\xca)\\xf7\\xd4\\xfeS\\n\\x1e`\\x84C\\xcf>\\xc0\\x8e\\x9a&p=\\x042\\xc9*\\xbd\\x88z',\n+            constraints={\"min_size\": 17, \"max_size\": 117},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-6549,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 6954,\n+                \"shrink_towards\": -66,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u02f9\u0218\u0283\ud848\udd43\u021b\u026d\u02da\u024a\u02e0\u021f\u02d5\u0299\u0234\u0251\u0203\u02aa\u02db\u021a\u0209\u0264\u02de\u02b8\u0278\u023d\u020a\u022b\u0204\\U0007bb76\u0290\\U00075893\u025f\\U00010e20\\U0005f80d\\U000886ff\\U00071e1d\\U0005b330\u0279\u0200\u0227\u0225\u0209\\U000928d0\u02d2\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            512,\n+                            95509,\n+                            125979,\n+                            143881,\n+                            214112,\n+                            216981,\n+                            256784,\n+                            294288,\n+                            338868,\n+                            399910,\n+                            454167,\n+                            576372,\n+                            590400,\n+                            622224,\n+                            640478,\n+                            752537,\n+                            835616,\n+                            877657,\n+                            1087225,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 32,\n+                \"max_size\": 132,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1310\\x99\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"4\\x8b\\xc6\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=44148,\n+            constraints={\n+                \"min_value\": 23360,\n+                \"max_value\": None,\n+                \"shrink_towards\": -28506,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc6[\\xd1\\x89\\xdbK\\x83\\xd8\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u9518\u959d\u952b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            38079,\n+                            72683,\n+                            216838,\n+                            359035,\n+                            459542,\n+                            710514,\n+                            779796,\n+                            843354,\n+                            1080039,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-41347,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -30880,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=624375880,\n+            constraints={\n+                \"min_value\": 624370622,\n+                \"max_value\": 624385660,\n+                \"shrink_towards\": 0,\n+                \"weights\": {624375880: 0.5169808283410131},\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00090df2\\U000a790f\\U00090dd0\\U00093c5d\\U00090d2b\\U00090d03\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([593140, 729709])),\n+                \"min_size\": 6,\n+                \"max_size\": 106,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.2496793202924312e308,\n+            constraints={\n+                \"min_value\": 3.939139238842808e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.2496793202924312e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xda\\xb8hj`\\xff\\xcf\\xbc@R*@\\xdc\\xe0\\xfe\\xcbE\\x16\\x1d\\xc2?J\\xa2X\\x06\",\n+            constraints={\"min_size\": 18, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud83c\udc07\u02d7\u0251\ubeff\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([512, 190000, 836179]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-11_999_155_390_892_644_282_986_193_205_922_655_785,\n+            constraints={\n+                \"min_value\": -11_999_155_390_892_644_282_986_193_205_922_715_447,\n+                \"max_value\": 50_713_541_450_235_102_535_388_185_314_535_926_590,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    -11_999_155_390_892_644_282_986_193_205_922_714_408: 0.3428712779979775,\n+                    -11_999_155_390_892_644_281_740_831_870_790_683_508: 0.09505291712050365,\n+                    -11_999_155_390_892_644_269_169_541_273_263_629_732: 0.10103484919230382,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6058493981608687},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.5984319090054842e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.957238324833291e269,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.2666758996756954e277,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.7655601315129944e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"c\\xf1Z\\x8e1i\\xf4.\\xe22\\xfem!\\xd2\\x04\\x83O\\xc0X]\\x0c:\\xeb\\xf6M\\x0f\\x8eK\\xc50\\xf1\\xa4\\xec\\xdd\\x8a\",\n+            constraints={\"min_size\": 35, \"max_size\": 38},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8212411952412533},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\ue050\\ue074\\ue019\\ue033\\udfc3\\ue012\\ue016\\ue083\\ue070\\U000cf551\\U000a46b3\\udfc8\\ue048\\ue075\\ue06b\\ue069\\udfba\\ue009\\ue08d\\ue076\\ue072\\ue04c\\U0003c5d6\\ue039\\ue039\\U000d7cec\\udff4\\U000674c7\\udfd2\\ue026\\ue06f\\udfff\\udfd3\\ue05a\\udfc3\\udffe\\U000b2104\\ue024\\ue055\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            57236,\n+                            65535,\n+                            235653,\n+                            248561,\n+                            257672,\n+                            331983,\n+                            421904,\n+                            446665,\n+                            635752,\n+                            734368,\n+                            807096,\n+                            808292,\n+                            832722,\n+                            910836,\n+                            925998,\n+                            933104,\n+                            938271,\n+                            959519,\n+                            1085530,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 31,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -1.0358029430017039e-293,\n+                \"max_value\": 2.220446049250313e-16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0309384397868968e-143,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7646016500947504e308,\n+            constraints={\n+                \"min_value\": 2.4811832230009723e300,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.1739181363755933e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud885\udda5\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([202130, 395096])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"3\\x0f<\\xf1\\x02\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"j!cF~x\\x92y .+\\xdd\\xab\\xe8\\xe9\\x01+\\xacd\\xbc*\\x8fp\\xe1z\\xf9\\xe9G\",\n+            constraints={\"min_size\": 2, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"FD\\xea\",\n+            constraints={\"min_size\": 0, \"max_size\": 56},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=11850,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2117,\n+            constraints={\n+                \"min_value\": 19,\n+                \"max_value\": 24112,\n+                \"shrink_towards\": -77,\n+                \"weights\": {\n+                    7931: 0.027771475938127822,\n+                    20129: 0.0026936306768461063,\n+                    6188: 0.013098225052432673,\n+                    21609: 0.022033293533950053,\n+                    1024: 0.036261680088885646,\n+                    19: 0.022033293533950053,\n+                    5850: 0.0646727141529167,\n+                    23110: 0.018339468013199724,\n+                    2793: 0.06609921960304416,\n+                    10703: 0.01230302833960447,\n+                    15951: 0.027734488411419973,\n+                    17247: 0.0643204821476752,\n+                    13104: 0.01070262821634947,\n+                    13041: 0.03304994030092508,\n+                    9656: 0.020074840410390028,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1_282_171_534,\n+            constraints={\n+                \"min_value\": 1_282_171_510,\n+                \"max_value\": 1_282_171_540,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-576174641,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -576174553,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x06\\xbah\\xfc\\xaa\\x18\\x9a&y]\\r\\xadh}\\x1dk\\x04f/L\\xa5\\xa7\\xcc'\\x9b\\x94h\\xeaH\\xc9\\xbd\\x03\\x87}\\x84<\\xa9=\\x81\\x96\\xe0\\x14\\x9c\\x91:\\x14J]\\xaaD\\xb7\\x16\\xb5\\x03\",\n+            constraints={\"min_size\": 48, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.2723806366018591e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-2.3240591241775568e296,\n+            constraints={\n+                \"min_value\": -5.593537002674518e296,\n+                \"max_value\": -2494247012201861.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.890538053208719e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x19KM\\x06\\x82\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.939086051514331e243,\n+            constraints={\n+                \"min_value\": -7.58518084843723e-137,\n+                \"max_value\": 9.018893889042462e243,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.939086051514331e243,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.4077920598150623},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"81\\x93\\x9b\\t\\x80+$\\x81\\x14o<\\xf9\\x18z\\x0c:K\\xdd\\xdb\\x1d\\xd1\\x00~+\\xd6\\xbfA\\xd7\\x17\\xb66\\xde\\xc2\\xa1v\\xe8U\\xb3B\\xf1\\x8b\\xe7\\x92\\x14\\xf0\\xff8\\xcd\\xd5\\x89\\xe7I\\xfe\\xbd\\x96\\xca!\\xa7\\xd9!P\\xc9J'\\x85tC\\x88\\xc4G(\\x7f\\xa2\\xc9\",\n+            constraints={\"min_size\": 26, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.47184265973951256},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6532104567538412},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -6.238679403136833e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.668986915959111e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"2\\x1f\\xd3\\x10\\x0e\\xeb\\x84Mq\\xe0\\x0c\\x95\\xcf\\xce\\xf9A8\\xd9\\x90>LP\\x8c\\x7f\\xba\\xe5 T\\xe2)\\x98\\x9e\\x96B*-1\\x14M\\x07\\xc3\\xd5\\r\\x97\\x06{\\x8e\\x03\\x16@;\\xce\\xea&\\x9b\\xbdr\\t\\xc0Y\\xd8\\xe0\\xc1\\xfd\\xeb!\\xe8\\xfbZ\\\"\\xa3\\xdb\\xadB\\xb2|\\xc1\\x816(\\x93\\xe34\\x86\\x00\\xcd\\xa9\\xf5\\x0et2\\xebT\\xcd:\\xfe\\xa0\\xb0V\\x82\\xb5\\xf7\\x90k\\xf1r\\xfbl/\\x08\\xdaw\\x89\\x90\\x85C\\xb3\\x02\\x8e\\xd3\\xa8\\xfe\\x8b>\\xde'\\xe0u\\xc0\\xd2&\\xbb\\xa7\\x84\\x9b\\xa87+\\xf4\\xab\",\n+            constraints={\"min_size\": 40, \"max_size\": 140},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\n\\x8b\\x08\\x82\\xbb\\xf7a\\xa2\\xde\\xe9K\\xdd'\\x85g\\xe2\\xe4I\\xfb\\xbaSVRS[\\x86\\x89B:+\\xad\\xb9z\\xe4T2\\xd6\\x06\\xa8\\xfb\\xa1\\xbe10\\x96L\\xec\\xcd\\xbfNG\\xbe\\xa5[!\\x02\\x07\",\n+            constraints={\"min_size\": 39, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u209a\u20d7\\U000d5d86\\u206a\u201b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            8192,\n+                            127408,\n+                            154030,\n+                            220870,\n+                            347513,\n+                            386000,\n+                            776077,\n+                            907606,\n+                            918269,\n+                            1051562,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 9.080925887704557e-292},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7,\n+            constraints={\n+                \"min_value\": -25518,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7696346442570123},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-136,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -90,\n+                \"shrink_towards\": 16,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"L7\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.220446049250313e-16},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 8.547343792809634e-79},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"hypofuzz.test_keys\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=323_320_286_546_906_247,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9997996438587835},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x1d\u00ca\\x95\\x86\\U00069802\\x8a\u00a7;hh\\U00074b2b(\\U0006c659\\x9a\\tx#\\x14\u00eb\u00f6\u00fd^=\\x87\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([1, 705566])),\n+                \"min_size\": 11,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.006126673298249898},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.2936862935236056},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xceO\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.2923474108788449},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\t\\xc2\\xc3q\\xaa\\xf4\\x80\\xfa[@\\x986\\xdb\\xba\\xdd[:+foI\\x05\\xf8\\x9c\\xd9a\\x16f$R\\xb8\\t\\x10'F\\xae\\xee\\x00gt\\xa7\\xe3\",\n+            constraints={\"min_size\": 41, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'o\\xc3\\xc1\"<\\xac\\xd5',\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4_423_434_277_873_985_345,\n+            constraints={\n+                \"min_value\": -4_423_434_277_873_989_186,\n+                \"max_value\": -30593,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    -4_423_434_277_873_955_213: 0.43396519300404324,\n+                    -4_423_434_277_873_985_345: 0.5629096959323228,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.030717349174357096},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0009fcc6\\U000a0361\\U0009fd32\\U0009fd06\\U0009fc75\\U0009fc87\\U0009fc85\\U0009fcc1\\U0009fd34\\U0009fcc2\\U0009fd0c\\U0009fce8\\U0009fd19\\U0009fcd6\\U0009fcfa\\U000bd11b\\U0009fcdd\\U000c27e8\\U000a4b1b\\U0009fcfa\\U000a7636\\U0009fcc6\\U0009fc64\\U000ac639\\U0009fd02\\U000b0950\\U000a371c\\U0009fd13\\U000c36e6\\U0009fcde\\U0009fcf0\\U0009fc5b\\U0009fc82\\U0009fca1\\U0009fc78\\U000be83d\\U0009fd3b\\U0009fc77\\U0009fd2a\\U0009fc4c\\U0009fc76\\U0009fd0d\\U0009fcf0\\U0009fc7d\\U0009fc53\\U0009fd3c\\U0009fca6\\U0009fd47\\U0009fcc7\\U0009fc83\\U0009fc49\\U0009fc54\\U0009fc73\\U0009fd1b\\U000b45cc\\U0009fd3d\\U0009fcc6\\U0009fceb\\U000b1c80\\U0009fc9f\\U000c2816\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([654408, 811600])),\n+                \"min_size\": 45,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x89\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"b\\x063\\xdf\\xf1\\xed\\x94\\xc1?\\xecZ\\xe0P\",\n+            constraints={\"min_size\": 9, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1613,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3117780524648786},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=13006,\n+            constraints={\n+                \"min_value\": 84,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"#\u00fb\\x01\\x10\\U0003f587!b\\x19,\u00af\\x8b\u00a8:WKxe\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([0, 382882, 405954, 803633]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-66,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud86c\udc2c\u01f6\u023e\u027d\u0212\u344f\ud85d\udc0f\u0225\u025b\u0221\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([404, 232672, 1006687, 1091259]),\n+                ),\n+                \"min_size\": 9,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=10272,\n+            constraints={\n+                \"min_value\": 9999,\n+                \"max_value\": 11469,\n+                \"shrink_towards\": -1872,\n+                \"weights\": {\n+                    10272: 0.35943585998799993,\n+                    11156: 0.5292847488824248,\n+                    10771: 0.0010783075799640001,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-15051,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -85,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3333333333333333},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9dk\\xf7ov5\\xef\\x86C\\xaa\\tA\\xc4Mk\\\\\\x02$\\xd7u?\\xacoD\\x02\\xaf7;\\xd8O\\x0f]\\xbf\",\n+            constraints={\"min_size\": 12, \"max_size\": 33},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=44,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 9999,\n+                \"shrink_towards\": -32143,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=27174,\n+            constraints={\n+                \"min_value\": 1024,\n+                \"max_value\": None,\n+                \"shrink_towards\": -102_701_867_248_475_206_839_127_045_817_750_209_285,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=30747,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0008e7cc\\U0008e82c\\U0008e860\\U0008e82c\\U0008e804\\U0008e912\\U0008e87e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([583575, 587470, 815935]),\n+                ),\n+                \"min_size\": 1,\n+                \"max_size\": 101,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4_478_665_526_379_221_776_507_226_780_401_604_492,\n+            constraints={\n+                \"min_value\": -16828,\n+                \"max_value\": 134_062_858_805_615_964_575_348_538_870_763_172_500,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.514387577924097e-77,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1241191688371793e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"U\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-27207,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 4739,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=31911,\n+            constraints={\n+                \"min_value\": -16695,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.834294670120844e-130},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0166\u0145\\U00045011\u0210\u01bf\u0215\u015e\\U0003ca1c\u01e6\u01b7\u0152\u0218\\U00059a47\u0165\\U0004a102\u01d1\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [300, 9999, 174255, 194594, 243816, 314015, 350232, 707546],\n+                    ),\n+                ),\n+                \"min_size\": 10,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"g?eT\\x9d\\xde\\x0c4k\\x0f\\xd1?\\xf1H\\xb9C\\xaa\\x96\\xd6|\\x15\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.257796107061427e-47,\n+            constraints={\n+                \"min_value\": 3.9944229805039765e-254,\n+                \"max_value\": 6.503120813095893e-47,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.257796107061427e-47,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00052e72\\U00093d15\\U00052df6\\U00052ecb\\U00052ed8\\U00052e8a\\U00052e04\\U00052ebb\\U00052eea\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([339446, 793121, 827388, 969824, 1002813]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"wlm;\\xc5e+3\\xe4\\xab\\xb3<\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.14540403407949534},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"-%Y\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\uf56c\\uf57c\\uf592\\uf533\\uf4c5\\uf4f5\\uf595\\U0006ae9c\\uf549\\uf4f3\\uf54e\ud843\udc92\\uf57c\\uf5a9\\uf4ce\\U00011f89\\uf5a8\\uf527\\uf59b\\U000c10f3\\uf517\\uf4ea\\uf521\\uf514\\uf502\\uf4f1\\uf536\\uf4f4\\U0009e02c\\uf4d2\\uf4cd\\uf51d\ud84f\udd39\\uf5a9\\uf53b\\uf4d3\\uf4fa\\uf4ec\\uf5bf\\uf502\\uf4db\\uf4e3\\uf4ee\ud86d\udc34\\uf4ec\\uf59c\\uf564\\uf505\\uf4d4\\uf560\\uf4d5\\uf4d7\\uf52b\\uf4da\\uf4c7\\uf5b5\\uf549\\uf53b\\uf5b7\\uf4f1\\uf548\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([62659, 1037867])),\n+                \"min_size\": 34,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.37060069670933365},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7625544581482404},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xca\\xf2\\xd0\\xfe\\xc5U\\x88\\x15\",\n+            constraints={\"min_size\": 5, \"max_size\": 105},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=52238,\n+            constraints={\n+                \"min_value\": -67,\n+                \"max_value\": 141218175,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    41625: 0.05419077661520918,\n+                    52238: 0.21177452838274405,\n+                    13092926: 0.14898362916901536,\n+                    28937: 0.00022169245401650002,\n+                    41177: 0.07389748467216667,\n+                    136700284: 0.11684422196596868,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7603350952807445e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=349,\n+            constraints={\n+                \"min_value\": 300,\n+                \"max_value\": 355,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    349: 0.033286211385133956,\n+                    313: 0.5899362463805017,\n+                    305: 0.3540329120207369,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([255978, 841096])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-14_345_865_641_898_931_578_266_265_739_462_189_398,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -2412,\n+                \"shrink_towards\": 25290,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.968220196092981e16,\n+            constraints={\n+                \"min_value\": 4.746263326856673e-237,\n+                \"max_value\": 5.303964587206806e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.952784811493685e307,\n+            constraints={\n+                \"min_value\": 0.05,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.390485789210732e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3465037230722195},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xba\\x9b0\\xed$\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.99999},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=44_527_764_376_797_942_361_552_594_956_972_409_543,\n+            constraints={\n+                \"min_value\": 19358,\n+                \"max_value\": None,\n+                \"shrink_towards\": 12632,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xab\\x9b\\xda\\xf18\\xbd(\\x06\\xac\\xf3X&\\xb1|\\xd9\\x15\\x0fP] .\\x10S\\x91\\xeeu3cd\\xd20\\x8b\\x1a\\x82\\xb0\\xdb\\xec\\x7f \\x0eu\\\\]\\xe3\\xb15:\\x83H\\x95\\xe92\\xe7\\x96\\xa6\\x1b\\xfb\\x15\\xf2\\xf5\\x8d\\xa0\\x11];\\xa4d\\xbe\\x00\\xb1\\xffY\\x91\\x82\\xde\\xe0O;\\xf9\\x93\\x8d\\xe5.,\\x82=\\x11\\xb42\\xfa\\n\\xa0\\xe8\\x87\\xda\\x95\\xa6V\",\n+            constraints={\"min_size\": 32, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.36529650629087357},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=30893,\n+            constraints={\n+                \"min_value\": 26794,\n+                \"max_value\": 31678,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9775323735501262},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud85c\udc12\ud85b\udfec\ud85b\udfd5\ud85c\udc30\ud85b\udf6b\\U00071611\ud85b\udf93\ud85b\udf74\ud85b\udf90\ud85c\udc68\ud85b\udf6e\ud85c\udc17\ud85c\udc15\ud85b\udfcc\\U000fe3f2\ud85b\udf7d\\U000b5ac6\\U000555d7\\U00093da5\ud85b\udf93\\U00072706\ud85c\udc58\ud85b\udf7e\ud85b\udfcc\ud85c\udc36\ud85b\udf92\ud85c\udc62\\U00092338\ud85c\udc37\ud85b\udfbe\\U000b619a\ud85b\udfb1\\U00088076\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [159594, 168441, 305363, 746440, 861255, 1055142, 1104807],\n+                    ),\n+                ),\n+                \"min_size\": 31,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9404307851845637},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=232,\n+            constraints={\n+                \"min_value\": 101,\n+                \"max_value\": 1093,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000beccf\\U000dfd6a\\U000d69f2\\U000becb6\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([781436, 1001476])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.09214896107877603},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-40,\n+            constraints={\n+                \"min_value\": -11558,\n+                \"max_value\": 8509,\n+                \"shrink_towards\": -5150,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.316967110419035e16,\n+            constraints={\n+                \"min_value\": -2.391426188726552e77,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.167163345632913e-294,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([161980, 519010])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.43893313650484533},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=10120,\n+            constraints={\n+                \"min_value\": 10012,\n+                \"max_value\": None,\n+                \"shrink_towards\": 13353,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00070c99\\U000a2c64\u02d5\u0332\u028c\u0339\u02ef\u02d7\u026f\u033f\u0279\u034f\u02a2\u0320\u02ca\u027d\\U00064703\u02f2\u02e3\ud853\udd6f\ud840\udcd7\u02b7\u02b9\u0330\u0347\\U00019772\u02c3\u02b7\u0311\u02f9\u0291\ud853\udf81\u029c\\U000a50b7\u02c2\u02bc\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            621,\n+                            9656,\n+                            65801,\n+                            163724,\n+                            189256,\n+                            281411,\n+                            322390,\n+                            428347,\n+                            461277,\n+                            494779,\n+                            665060,\n+                            689791,\n+                            741924,\n+                            742299,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 26,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-8_705_245_029_204_127_277,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 3493,\n+                \"shrink_towards\": 3538,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=31,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 30752,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.5315646046651104e48,\n+            constraints={\n+                \"min_value\": -2.225073858507e-311,\n+                \"max_value\": 2.8033686130549095e48,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.248303281439905e47,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=11,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 21230,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=11509,\n+            constraints={\n+                \"min_value\": 110,\n+                \"max_value\": 13486,\n+                \"shrink_towards\": 77,\n+                \"weights\": {\n+                    7697: 0.10786458701075967,\n+                    9276: 0.004314978303707751,\n+                    7004: 0.05366462120994697,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 7.618358385499989e-259,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.5,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u016d\u0227\u0188\u0199\u01b9\u0182\u0224\u01f0\u0131\u01cc\\U0001ff58\u1c50\u0467\uadb7\u017a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([300, 160991, 557101]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=15192,\n+            constraints={\n+                \"min_value\": 15168,\n+                \"max_value\": 15192,\n+                \"shrink_towards\": -1_277_096_414,\n+                \"weights\": {15184: 0.3467945705103628, 15192: 0.3818258374069427},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7118371842531176},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u026a\u025e\u02ae\u0269\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([512, 510009])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x89\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -3.8019739944753176e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.7420445757369553e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6702138966783e308,\n+            constraints={\n+                \"min_value\": -5.2133393008115336e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.2119253784014055e-33,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"b\\x08\\x8e\\x85:6\\x99\\t\\tM\\x86-{\\x8a\\x02\\x1bD\\x1dh\\xee\\xbah\\xe6h\\xac\\xbf\\x16\\x8f$\\x0c>\\x11\\x13\\xb1\\xe6\\xd6\\xe0P\\x8f\\xc8\\xc4\\x08f.\\x8c\\x9ffF\\x8adI\",\n+            constraints={\"min_size\": 31, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud847\udf73\ud847\udee2\ud847\udf3c\ud847\udfbf\ud847\udf6b\ud847\udfb2\ud847\udfa9\ud847\udfac\ud847\udfaa\\U000671ee\ud847\udf4a\ud847\udf40\ud847\udf88\ud847\udf38\\U00056a6a\ud847\udfdf\\U0003dd8b\ud847\udfa0\ud847\udfdf\ud847\udf65\ud847\udfce\ud847\udf0d\ud847\udf37\ud847\udfa1\ud847\udeea\ud847\udf39\ud847\udf63\ud847\udf4d\ud847\udf2d\ud847\udf3e\\U0008aea4\ud847\udee3\ud847\udf00\ud847\udf0a\\U00059f4a\ud847\udf48\ud847\udf18\ud881\udc77\ud847\udf7d\\U00037ef9\ud847\udf89\ud847\udf13\\U000531bd\ud847\udfb9\ud847\udf10\ud847\udf97\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([138978, 321619, 335212, 588252, 693794]),\n+                ),\n+                \"min_size\": 20,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x12\\x97{\ud80c\udec8?8\\U0001963b\ud864\udfbd\u00fcF\u00a6\u21b0\u00d0\\x18;\\U0001502c\\x0e\ud864\udcdb6\u00e8\\x99\ud866\uddaa^\u9d2e\u00e9\\x16:\\x9cRqd!h\u00af\u00a5\\x1dc\u00d6\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1, 199467, 692914]),\n+                ),\n+                \"min_size\": 17,\n+                \"max_size\": 117,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000fe204\ud800\udc09\ud800\udc10\ud800\udc85\ud800\udc90\ud800\udc5b\ud800\udc42\ud800\udca9\ud800\udcda\ud800\udcf7\ud800\udc2b\ud800\udc2a\ud800\udc12\\U0007813e\ud800\udc36\\U00010078\\U00034113\\U00010078\\U00048f02\\U0007615f\ud800\udcd0\\U00053fb9\\U000fe9e8\ud800\udca6\ud800\udc3d\ud800\udc53\\U00100361\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            65535,\n+                            125897,\n+                            191629,\n+                            368668,\n+                            383284,\n+                            652983,\n+                            788356,\n+                            1074662,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 24,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0221\u0268\u02c0\u02b4\u021d\u0272\u0274\u021b\u0249\u0296\u5b28\u0222\u37af\u52cf\u028f\u02d6\u0262\u0254\u60ed\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([512, 35053])),\n+                \"min_size\": 14,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe8\\xa8\\xbf\\xa8\\x12N\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2_530_027_263_687_300_267,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u01e4\u018d\u0181\u025b\u0191\u0132\u01a2\u01d5\u01f3\u016a\u0217\u0187\u0182\u01d9\u0197\u01db\u01ce\u01ad\u02c7\u0149\u018a\u018c\u0201\u01bc\u0198\u0174\u01a1\u03e8\u018e\u0156\u01b6\u013b\u0214\u0161\u01bc\u0150\u01ff\u0222\u015a\u03e2\u01ae\u01b9\u0138\u017c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([300, 1024, 215538]),\n+                ),\n+                \"min_size\": 13,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1192,\n+            constraints={\n+                \"min_value\": 99,\n+                \"max_value\": 3298,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    512: 0.0031709579504801,\n+                    2122: 0.0009667455550878232,\n+                    2271: 0.0028383244525986475,\n+                    2059: 0.00016366632905634698,\n+                    3153: 0.003112166049610708,\n+                    1747: 0.00016366632905634698,\n+                    2117: 0.003273293847861128,\n+                    1692: 0.0014149254329704603,\n+                    2364: 0.003273293847861128,\n+                    695: 0.0012419497519860112,\n+                    1231: 0.0013614143386847712,\n+                    1020: 0.001499896603221707,\n+                    712: 0.0028571948603482314,\n+                    2141: 0.0005078598096907459,\n+                    778: 0.0004778965691559612,\n+                    2224: 0.003122343214991031,\n+                    100: 0.0022177394601707884,\n+                    2643: 0.0029810527625718994,\n+                    2739: 0.0006385488265651542,\n+                    300: 0.0007043588887298129,\n+                    202: 0.0028695305316257086,\n+                    1863: 0.0008387393860308331,\n+                    1848: 0.0024829358167567056,\n+                    1563: 0.0010911088603756463,\n+                    123: 0.0014385079521736666,\n+                    1058: 0.001711826835153127,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5373177242271915},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud861\ude1b\\U00082fbf\ud861\ude9b\ud861\ude71\ud861\udebc\ud861\ude35\ud861\ude2f\ud861\ude72\ud861\uddf0\ud861\uddf7\ud861\udeda\ud861\ude10\ud861\ude3f\ud861\ude5e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            165360,\n+                            183544,\n+                            263275,\n+                            271579,\n+                            313506,\n+                            494234,\n+                            512085,\n+                            603491,\n+                            660201,\n+                            665634,\n+                            837697,\n+                            883202,\n+                            915781,\n+                            917998,\n+                            936638,\n+                            1019485,\n+                            1024792,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9303268016354627},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1083,\n+            constraints={\n+                \"min_value\": 1024,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".worker_identity.\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2073,\n+            constraints={\n+                \"min_value\": -10923,\n+                \"max_value\": -43,\n+                \"shrink_towards\": -25140,\n+                \"weights\": {\n+                    -3129: 0.011422968314785282,\n+                    -10779: 0.01028827464082778,\n+                    -5075: 0.01861422613070068,\n+                    -59: 0.007761323397895276,\n+                    -3358: 0.015696150923864966,\n+                    -3814: 0.018426342441674383,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"DP\\xad\\xde\\xcf\\x856\\x9f\",\n+            constraints={\"min_size\": 7, \"max_size\": 107},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"%#\\xe2\\xa1\\\\\",\n+            constraints={\"min_size\": 5, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"~\\xd1\\xf43!\\x13\\xd2\\x88+#7P\\x90R\\xf9D\\x83,\\x8f\\xc5\\xd3\\xcc\\x04\\x82\\xe7\\x98\\xd3\\xcdl\\xbd\\xe7%g22\\x96$<\",\n+            constraints={\"min_size\": 29, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x11\\xe5~7\\xfd\\xc1HF\\x03-\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2206,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 12233,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8192,\n+            constraints={\n+                \"min_value\": 5994,\n+                \"max_value\": 8398,\n+                \"shrink_towards\": 20194,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u38e3\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([14476, 530311, 558871, 637382, 979610, 1015286]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1158,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 113,\n+                \"shrink_towards\": 5070,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4_455_285_352_015_594_972,\n+            constraints={\n+                \"min_value\": 4_455_285_352_015_594_880,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.16138841587598843},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([1024, 459335, 1011760])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=474390145,\n+            constraints={\n+                \"min_value\": 474363260,\n+                \"max_value\": 1_090_366_813,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([270454, 353449, 544541])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0007ef55\\U0007ef1b\\U0007ef98\\U0007eea6\\U00080976\\U0007ef97\\U0007eeb5\\U0007eec1\\U0007eec4\\U0007ef7f\\U0007eec6\\U000808a8\\U0007ef13\\U0007ef85\\U0007ef64\\U0007fb04\\U0007eeb5\\U0007ef91\\U0007eeb5\\U0007eebc\\U0007f469\\U0007f970\\U0007eea8\\U0007ef6b\\U0007eee5\\U0007eeb3\\U0007eebd\\U0007ef26\\U0007ef9c\\U0007eea5\\U0007ef87\\U0007ef09\\U0007ef60\\U0007ef4f\\U0007ef24\\U0007eeb0\\U0007ef3a\\U0007ef35\\U0007eefc\\U0007eee4\\U0007ef22\\U0007ef30\\U0007eec4\\U0007eead\\U0007ef50\\U0007f36b\\U0007ef76\\U0007ef3d\\U0007ef52\\U0007f405\\U0007ef50\\U0007f026\\U000800df\\U0007eef6\\U0007eef1\\U0007f7a8\\U0007eee1\\U0007feb8\\U0007eea2\\U0007eed4\\U0007ef97\\U0007ef62\\U0007ef7b\\U0007ef89\\U0007ef45\\U0007ef5b\\U0007ef88\\U00080275\\U0007ef0a\\U0007ef56\\U0007eef4\\U0007eeae\\U0007eea5\\U0007eeb1\\U0007eef9\\U0007fb33\\U0007eec2\\U0007ef7c\\U0007eeb9\\U0007f9b0\\U0007eebd\\U0007ef70\\U000800f1\\U0007eefa\\U0007ef5a\\U0007ef51\\U0007eeac\\U0007eef4\\U0007ef12\\U0007ef22\\U0007eefb\\U0007ef83\\U0007eef8\\U0007ef61\\U0007ef26\\U0007ef73\\U0007eeaa\\U0007eec0\\U0007eea4\\U0007ef2a\\U0007eec9\\U0007ef21\\U0007eee7\\U0007eef6\\U0007ef7e\\U000801b5\\U0007eee6\\U0007ef58\\U0008010a\\U0007eeee\\U0007f71b\\U0007eebd\\U0007ef95\\U000802f4\\U0007ef01\\U0007ef70\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([519841, 527148, 1112137]),\n+                ),\n+                \"min_size\": 43,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5472539487114721},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.894296907537901},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa8OZ\\x93\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=807060689,\n+            constraints={\n+                \"min_value\": 807047829,\n+                \"max_value\": 807079533,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    807072715: 0.29075491734990566,\n+                    807051591: 0.1870331374644238,\n+                    807060689: 0.19700291695148592,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.17644440863344626},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=15662,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 24430,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.430127177134214e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.634027945507246e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-2.956937956293379e16,\n+            constraints={\n+                \"min_value\": -4.083226298341632e16,\n+                \"max_value\": -4459263320112308.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.956937956293379e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.19163397865653692},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u023a\u01fe\u0198\\U0004aa9e\u024b\u0239\\U0001aa1d\u01b9\u0237\\U0005595d\u01b9\u01a3\u0246\u0264\u0245\u01f9\u020d\ud853\udd19\u01fd\u027c\u0228\u0262\u025f\u0236\\U000d3fce\u0196\u019c\u0286\u01b5\u01ee\u01f0\u01c9\u028c\u01f5\u0267\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            404,\n+                            184337,\n+                            195828,\n+                            360021,\n+                            673658,\n+                            727218,\n+                            802886,\n+                            904787,\n+                            987081,\n+                            1050482,\n+                            1069192,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 19,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"6\\x08o\\xc0#\",\n+            constraints={\"min_size\": 2, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x99\\x8b\\xb8L\\x02\\xc0\\xa5\\x1e\\xbc!{\\xf7{\\xf4>Fh\\xe1\\x95l\\xdd\\x12P\\x84\\x0e\",\n+            constraints={\"min_size\": 21, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -1.7469898377108534e-144,\n+                \"max_value\": 1.7785431054639315e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.982443939819737e167,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u04d8\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([1000, 868565, 1079404])),\n+                \"min_size\": 1,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5221620981611713},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u90dd\u906d\u9108\\U00063909\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            36941,\n+                            138264,\n+                            200938,\n+                            266533,\n+                            389982,\n+                            421009,\n+                            611879,\n+                            636273,\n+                            921057,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 6.103515625e-05},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9889,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -20,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud84f\ude86\ud84f\udecf\ud84f\ude85\ud84f\ude0e\\U00086d0a\ud84f\ude2b\ud84f\ude03\\U000e7b3e\ud84f\ude27\ud84f\uddec\ud84f\ude3a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [146920, 503440, 508608, 676042, 943423, 1075236, 1105290],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9728246904607618},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"$\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            512,\n+                            91754,\n+                            93982,\n+                            157162,\n+                            272193,\n+                            427191,\n+                            479180,\n+                            525653,\n+                            559683,\n+                            636858,\n+                            649910,\n+                            657550,\n+                            728084,\n+                            759616,\n+                            766199,\n+                            767612,\n+                            781116,\n+                            801768,\n+                            849818,\n+                            884799,\n+                            919953,\n+                            1010899,\n+                            1049232,\n+                            1054977,\n+                            1094213,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.790912430140165e307,\n+            constraints={\n+                \"min_value\": 5.144694902615544e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.790912430140165e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe1\\xf5\\xcb\\xca&\\x8c\\xb6>\\x1d\\x91\\xbe_\\x86\\x07K\\x9e\\xe9#\\xc7\\x07\\x14L1\\x92x:\\xd4P\\x97\\xdcA58\\xfd\\xf8e2\\xa6M\\x02\\xbf\\xed\\x8d\\x9a\\xb8\\xc7\\tp\",\n+            constraints={\"min_size\": 15, \"max_size\": 115},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-6.481819271579974e211,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.2250738585072014e-308},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003822f\\U00038269\\U000381e2\\U0003828c\\U00038212\\U0004a0d6\\U0003820f\\U000381f1\\U0003829b\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([229793, 989248])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.8867333608604024e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 126827786828259.81,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\\\\\x87\\xee\\xf3\\x8f\\xb3b&O\\xcaF/\\xbcc\\xd6\\x94\\x02&\\xe4\\xc3@\\x9do\\xca\\x9bL\\xe9\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005d0a9\\U0005d018\\U000656df\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([380844, 624904, 749392, 832664, 908824]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud882\uddf5\\U000f928f\ud882\ude40\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([199107, 250324, 617217, 777231, 1004814, 1086466]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 20,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1a\\xed\",\n+            constraints={\"min_size\": 0, \"max_size\": 40},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\uefa6\\uefb5\\uef18\\uefca\\uefd5\\uef57\\uefd5\\uefb5\\uef25\\uef29\\uf009\\ueffb\\U00057b80\\uf001\\uefb1\\uf001\ud81b\udf52\\uefd9\\uefc3\\uef39\\U0006143f\\uef75\\uef86\\uefed\\uef72\\uefd6\\ueff9\\uef85\\uefe9\\uef1d\\uef92\\uefa2\\U000c1556\\uefe5\\uef4f\\uefc7\\U000d2439\\uefbf\\uef39\\uefb0\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            61203,\n+                            245132,\n+                            273043,\n+                            299662,\n+                            307247,\n+                            414831,\n+                            515604,\n+                            589219,\n+                            724255,\n+                            893463,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 39,\n+                \"max_size\": 139,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=66548,\n+            constraints={\n+                \"min_value\": 23981,\n+                \"max_value\": 2_068_598_835,\n+                \"shrink_towards\": 10903,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.99999},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000628ff\\U00067699\\U00062992\\U00062937\\U000629ba\\U00062920\\U000629b9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([403665, 451083, 807690, 810271]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=90,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 108,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd3\\xb5&j\\x1ao\\x0f\\xfa^h\\x03\\xdbB\\xc3\\x8f\",\n+            constraints={\"min_size\": 12, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=inf,\n+            constraints={\n+                \"min_value\": inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"(\\xc0\\x13!\\xca1I\\xf30\\xaf\\xc6\\x99\\xe3\\x95M\\xa0\\x8c9\\x0f\\x86\\x9f\\x15\\xfc\\x9byq\\xde\\xcf\\x11\\x91K\\xf75\\xec\\xa8\\xcb.\\xf2\\x95\\xedH\\x98f\\xe0\\x8f=\\x91\\xb4\",\n+            constraints={\"min_size\": 42, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 3.583507035551866e-07},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-108,\n+            constraints={\n+                \"min_value\": -9576,\n+                \"max_value\": None,\n+                \"shrink_towards\": -52,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.722680610120014e307,\n+            constraints={\n+                \"min_value\": 9818326670258226.0,\n+                \"max_value\": 6.811539803917573e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5e-324,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.1836652161971231},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"0v\\x13\\xfd\\x89\\xf8:\\x19m\\xe9\\xed\\xa9\\x87!\\x06\\xfcS@\\x8b>\\x1a \\xd2\\xc5k\\xedZ\\xc3e\\x19\\xb9\\x8a\\x9fJ\\x17\\r\\rG\\xea\\xb1\\x7f\\xde_\\x8b\\xb2\\xc5`\\xe8;\\x04\\xf3\\x95\\xf4\\x1a\\x18\\x8c(\\xa2_\\xc7*U\\xa2nu\\xb0\\x94v\\x13L6'<\\xb6\\xdd\\xc2\",\n+            constraints={\"min_size\": 27, \"max_size\": 127},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf4\\xcd]\\xde\\x16P\\x8d\\xc3kf\\xa46[\\x8a\\x14\\xf2@H\\xa7_\\xa3Y\\xe9\\xd1w\\xc4\\xaf\\x89\\x1c\\xb4I\\xf2\\x14\\x00\\xdbd\\xb0\\xcbz.I\\xecZr\\xd0[\\xed\\x8d\\xcd\\xa1\\x10p\\xa9G\\r\\xc2#!\\xaf\\xbdf\\n,\\x884^\\\\\\xba\\xedJ\\xc4\\x11e\\xec{\\x82*\\xe3\\xa9\\xf89\",\n+            constraints={\"min_size\": 23, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1193029110396022e16,\n+            constraints={\n+                \"min_value\": 1.5350263939340174e-222,\n+                \"max_value\": 1.5605241789407732e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1193029110396022e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00080ab4\\U00080adf\\U00096629\\U00080b2c\\U00080aae\\U00080abf\\U00080a76\\U00080b05\\U00080b13\\U00080ad0\\U00080aa3\\U00080b3e\\U00097559\\U00080aa7\\U00080af1\\U00080b40\\U00080af0\\U00080a8f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([526966, 721295, 955765, 1114111]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"6\\xe4\\xd0\\xe4\\xb8+\\x95\\xab\\xf8\\x80\",\n+            constraints={\"min_size\": 8, \"max_size\": 108},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\u20cd\ud84e\ude96\u2014\\U0006f0e7\u2017\ud85f\udf51\u20c0\u2049\u20d5\\u206e\\U000d0b65\\U000eb596\u2023\\u20cb\\U0007a7f9\\u20fc\u20bf\u2026\\U0008e807\u205d\\u208f\u20ae\u2058\u201d\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            8192,\n+                            9999,\n+                            54556,\n+                            165197,\n+                            359414,\n+                            461527,\n+                            464640,\n+                            805499,\n+                            806578,\n+                            1041733,\n+                            1086646,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 15,\n+                \"max_size\": 84,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -6.741084408054647e16,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6.590726275159367e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xb7x}\\x1a\\x94V\\xc2k{M\\xc7Nt\\xf1\\xcaK\\x93\\xdfZ\\xfdc\\x93\\x9cqK\\x14\\xe2{\\x04\\x1d\\x85\\xb8\\x08`\\xc18z\\xd7\\xc9\\xa9\\xdd+\\x08\\xb6\\xa6\",\n+            constraints={\"min_size\": 42, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 3.584414017268518e-47},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.2142405118519602},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5.622958311841389e-228},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 8.395583354167788e-33},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000b618a\\U000b6211\\U000b617a\\U000b6177\\U000fa4a7\\U000b6212\\U000b6157\\U000b61e4\\U000b6220\\U000b6142\\U000b6217\\U000b6145\\U000b6146\\U000b619f\\U000b614d\\U000b61c8\\U000ed290\\U000b61fd\\U000b61c9\\U000b6216\\U000b6236\\U000b61e2\\U000c3a5b\\U000b6223\\U000b61d4\\U000fcb54\\U000b616a\\U000b6204\\U000b86df\\U000f2611\\U000b6195\\U000b617d\\U000b61f4\\U000b616b\\U000b6162\\U000b61e8\\U000b6150\\U000d4df7\\U000b61ac\\U000f3036\\U000b61e4\\U000b6229\\U000b6213\\U000b621f\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([745786, 1088372])),\n+                \"min_size\": 32,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.05,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0934598109628597e-246,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=17770,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 404,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 4.5909097565541784e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 7.288947457174167e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5063905096510503},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.3991330781640404e308,\n+            constraints={\n+                \"min_value\": 2.617313463486116e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.75080467541663e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8028047429765164},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1049,\n+            constraints={\n+                \"min_value\": 72,\n+                \"max_value\": 1882,\n+                \"shrink_towards\": -17353,\n+                \"weights\": {72: 0.22300833773647807, 854: 0.04898620188209657},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"j=l\\xf0U\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 0.99999,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.161495998282766e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=65535,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 13784,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.922486632035335e16,\n+            constraints={\n+                \"min_value\": -5.943304767260265e16,\n+                \"max_value\": 6.378098514277403e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.870082894872312e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9206,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 26687,\n+                \"shrink_towards\": 30730,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=286,\n+            constraints={\n+                \"min_value\": -66,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xda\\xb8hj`\\xff\\xcf\\xbc@R*@\\xdc\\xe0\\xfe\\xcbEW4Y\\x8c,\\x99\\x98|\\xc3\\xc6\\x1e\\x15\\x08\\xc3\\x01&\\x03\\x8d\\xcc@sH\\x01gb\\xbc#\\xae\\xe6\\xf5x\\xbdB0c\\xcc\\xb3\\x93\\xb1B\",\n+            constraints={\"min_size\": 17, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00035034\\U00035034\\U000350ad\\U0003500f\\U00034feb\\U00035006\\U00035095\\U0003507d\\U00035092\\U00034ff1\\U000350a3\\U00034feb\\U00035072\\U00035096\\U00035090\\U0003504d\\U0003502e\\U0003dacd\\U0003e97b\\U00035082\\U00037cfa\\U00034ffa\\U00035043\\U0003f032\\U0003852e\\U0003d215\\U00035062\\U0003508a\\U00035045\\U00034fe7\\U0003506a\\U00035050\\U000350bf\\U000350c3\\U00035018\\U00042841\\U00035005\\U000350b6\\U00034ff2\\U000437ba\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([217028, 285011, 1049352, 1067443]),\n+                ),\n+                \"min_size\": 26,\n+                \"max_size\": 126,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=32590,\n+            constraints={\n+                \"min_value\": 6147,\n+                \"max_value\": 34656,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.811849425850561e252,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.833670210778253e52,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\xa0\u00a5\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([0, 228703])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-2.719562319137304e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -5.699047342368644e-51,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.829135434423267e-304,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 62},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.3283610621507823e307,\n+            constraints={\n+                \"min_value\": 2.2250738585e-313,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 8.449472097094012e306,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000ea3647!\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            110591,\n+                            192250,\n+                            199876,\n+                            218713,\n+                            228882,\n+                            279754,\n+                            335609,\n+                            526915,\n+                            563256,\n+                            608864,\n+                            730807,\n+                            785916,\n+                            854062,\n+                            875837,\n+                            1018812,\n+                            1021437,\n+                            1092013,\n+                            1099725,\n+                            1106768,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"!~\u00bd2\u00db\\U000634a4\u00d6\\x85\\x82g\\U0007624b\\xa0\\U000b8def\\x98\u00d8\\U0008ac72\u00dc)\\U000a96e1\u00a1\u00ea\\U0008d6fcs\\U000970fd\\U00063fc3\u00dc\\U000a4317\u00ec\u00a4\u00d6i0\u00ea\\x89\\x90\u00fe\u00fa\\U00079792\\U00068d67\u11c8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            9999,\n+                            81705,\n+                            110208,\n+                            376282,\n+                            620006,\n+                            671427,\n+                            761513,\n+                            971764,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 22,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-353278855,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 13138,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"Y\\xa9\\xb2@$\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xdd\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0196\u021a\u0149\u01fd\u01ce\u01b2\\U00019e5b\u01d8\u01ae\u0196\u01b6\u0220\\U0005e5f0\u01cf\\U0007f3f7\\U00080277\\U00065074\u01fd\\U000984c5\u0212\u01b5\u018b\u01e7\u021e\u0203\u0164\u012d\u021a\u0202\u01d6\u01eb\\U0007bafb\u0134\u01f8\ud81f\ude8f\\U00070e40\u01ab\u0186\u01b6\u0131\u0217\\U00079316\u0188\u014c\u018a\u017b\u0179\\U0006eb1f\u0168\u0206\u01fb\u0181\u0225\u016a\u020d\u01e4\u01ee\\U00061b6c\\U0008d146\u021d\u019a\u0156\u0182\u01df\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            300,\n+                            14256,\n+                            65535,\n+                            69884,\n+                            77229,\n+                            143511,\n+                            242161,\n+                            242767,\n+                            370062,\n+                            370313,\n+                            385103,\n+                            425147,\n+                            444222,\n+                            660311,\n+                            672382,\n+                            731200,\n+                            881436,\n+                            882871,\n+                            917921,\n+                            979859,\n+                            1006584,\n+                            1026742,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 22,\n+                \"max_size\": 122,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.23025761850884058},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.6050381566220001e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003cdae\\U0004a653\\U00046f76\\U0003cdb2\\U0003cd33\\U0003cda0\\U0003cd52\\U00041e14\\U0003cd6f\\U0003f1ad\\U0003cd74\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([249093, 351680, 731674]),\n+                ),\n+                \"min_size\": 11,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u22c1\\U000cb1c2\u234d\u22a5\u2367\ud857\udd0d\u2335\u2325\u22a7\u22aa\u231e\u22b8\u2307\\U0007d6c4\u2335\u22fa\u22c7\u22b4\u22c5\u2367\\U00075309\\U0003b609\u2332\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1000,\n+                            1024,\n+                            8852,\n+                            91709,\n+                            100020,\n+                            101397,\n+                            127671,\n+                            183801,\n+                            225469,\n+                            629969,\n+                            701300,\n+                            839862,\n+                            865303,\n+                            1077697,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 12,\n+                \"max_size\": 112,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"o\\x8d\\x8b\\x1doUz:n\\xce\\x81\\x9b\\xa2\\xdf\\x16g\\xcf\\x16I\\xef0\\xb5\\xc9\\xe3e+~Fo\\x81Q'\\x8e\\xc2\\xd5\\\\\\xf8;\\x95\\xadR-\\x13<0`p\\xa0|\\xd8+U\\x12\\x99\\xe3HT\\xe2\\xc4%\\x18hQ\\x0e\\xf6\\xef/\\xcb3 \\xf4\\xa1\\xdf\\xbd\\x96|\\x05\\xc6\\x0b\\xff\\x90\\xd6c\",\n+            constraints={\"min_size\": 44, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=35121,\n+            constraints={\n+                \"min_value\": 512,\n+                \"max_value\": 65535,\n+                \"shrink_towards\": -32,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.821165887289824e307,\n+            constraints={\n+                \"min_value\": 6.187373388051347e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.821165887289824e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 6.758041167055536e-68},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7386682475434175},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.4131686709314698e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7564091335166683},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.7626369661532825e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=110,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 13,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8d\\x05\\xf0\\xff\\xb1L\",\n+            constraints={\"min_size\": 2, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1_000_129_557,\n+            constraints={\n+                \"min_value\": -1_000_187_059,\n+                \"max_value\": 114,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"c\\xca\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8892447415029019},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9263629155911441},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u5891\u58c7\u58cc\ud85d\udd12\uae71\u581c\ud858\udd3f\u5846\u5884\u585f\u580f\u580e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([0, 1, 22542, 210538, 363146, 421077, 925170]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9474,\n+            constraints={\n+                \"min_value\": 1000,\n+                \"max_value\": 13812,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9f\\x94\\x90\\xd2\\x19\\x06\\x07D\\xf03h:L\\xac\\xaa\\xde\\xef\\xecOa\\xf3\\x0fPK\\xf5\\x88\\xb4\\xd3\\x1f\\xf0\\xec`\\x1b\\xce\\x17\\xbc\\x97^\\xf9y\\xbb\\xfa`\\x1dA@\\x0f\\xb9H2\\xd5\\xd9\\xd1\\xcf\\xf0\\x9a9p\\xf3\\xcf%r8\\xb3\\xad\\x94\\x93\\xf9`\",\n+            constraints={\"min_size\": 39, \"max_size\": 139},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6.376545501938398e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"Y\\x1d\\x05\\xb2\\xf3\",\n+            constraints={\"min_size\": 0, \"max_size\": 57},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud821\udcbc\ud821\udc7c\ud821\udccc\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([99376, 370851, 459012, 509564, 1055950]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.4614480769552023e308,\n+            constraints={\n+                \"min_value\": -5.261248310776152e-204,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.3710249452247186e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9490,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa0\\xe2GE\\x94\\x9c\\xe1\\xbf\\x14\\xfd\\x9bn+6\\xa1cA\\xb8\\xe9&\\x81\\x1b\\xeb\\x9d\\xe7\\xef}Q\\xc8\\x9c\\xff\\xac\\x01YB\\x16HB\\xb2\\xef,Z\\xe0Z\\x9f\\x08\\x91\\xee\\xb2\",\n+            constraints={\"min_size\": 31, \"max_size\": 131},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([190914, 204481, 223903, 524956, 1085924]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x0e&\\xfb\\xa3S\\x87\\x9f\\\\\\x8d\\x00c\\xdew\\xc60U\\x01Kl\\x0e\\xdb\\x8e\\xc8mo\\xf8D|\\x0b\\x1e\\xe3\\x81y>U\\x1c\\xd2P.<\\xcek\\xc7\\xc4e\\x11\\x89;F\\x06*y\\xf9\\xb4\\x96\\xa20\\x80\\x1a;\\xbf\\xaf\\xca\\xef\\x84\\x00\\x90}\\x88N.\\xcet\\xa9\\xb2\\xcb\\xca\\x02E3M \\xb9\\xdf0\\xb6\\x88\\x15\\xbd\\x8d\\xfe\\x0c\\xaf\\xa8\\x8b\\x87\\xd5\\xc9\\xde\\xe3c\\xb2\\xbc?\\x08\\x1ew@\\xe2\\x01l\\xb0\\xac\\xc3#\",\n+            constraints={\"min_size\": 30, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"C\\xf3\\xaf'\\xcd\\xa4{\\xd7\\xd3\\xa1b\\x12\\x10Qq\\xe4J@}=\\xc49\\xfd]\\xd1_\\x88\\x99\\x89\\xfa\\xbb=\\xfd\\x1eWb\\x938\\x8c\\x1a|\\x8bC$\\x93\\xfc'k\\xe5\\xec.oY\\x15\\xf9\\x18)\",\n+            constraints={\"min_size\": 24, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.1417603945515787e-154},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=22565,\n+            constraints={\n+                \"min_value\": 22506,\n+                \"max_value\": 22598,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xce\\x8d\\xe8\\n\\x01r\\x14\\xc7R\\xc9WT7\\x10%n\\xb0v\\x8ak\\xb5\\xaf\\xd0\\xcaUp\\x97\\x0f&\\xc4\\xa6-W^\\xb4i\\x1ae\\x14q\\xb0J\\xb3\\x14\\xc2\\x14z\\xffbn\\xb8\\x00t\\xb6\\x08}\\xd8\",\n+            constraints={\"min_size\": 30, \"max_size\": 57},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.37201846583698545},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.47904033155078285},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa8OZ\\x93\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.4134328429087336e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd6\\x04\\xd6G\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=62301,\n+            constraints={\n+                \"min_value\": -114,\n+                \"max_value\": 155077423,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=26126,\n+            constraints={\n+                \"min_value\": 26025,\n+                \"max_value\": None,\n+                \"shrink_towards\": 1991,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xb0\\xe8:;2u2|\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-361_714_109_967_703_535,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe1\\x1e_\\xb2(\\xe7\\x87\\xf2\\xf6^\\n\\xd1H_~X1\\xba-\\x0f9\\xeb\\xcc\",\n+            constraints={\"min_size\": 3, \"max_size\": 103},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5422788837884377},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xb5E\\x92\\x07+\\xc9\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-31486,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 7.165662275251018e-129},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([288437, 320913, 373435, 992151]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\ueefa\\ueebe\\uef5a\\U00039569\\uef3f\\ueeab\\uef79\\U00046e6f\\U0007231a\\uef66\\U0007c883\\uef6c\\U0009595f\\ueed9\\uef95\\ueed8\\uef83\\U000a9c8e\\uef1f\\uef89\\ueeb3\\uef85\\uef54\\uef8c\\ueef8\\U0001ec11\\ueebd\\ueed3\\uef90\\uef91\\U0009c853\\ueeae\\uef6d\\uef10\\U00071560\\uef56\\ueeef\\uef42\\ueebc\\ueecd\\uef07\\ueec4\ud86c\udc8d\\uef0a\\U0008a57d\\ueea0\\uef8d\\U000a9ab8\\U00047264\\uef16\\ueea8\\uef56\\ueee5\\uef46\ud854\uddaf\\uef41\\ueec0\\uef85\\ueef5\\uef83\\uef26\\uef36\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([61088, 344456, 419448, 814445, 889861]),\n+                ),\n+                \"min_size\": 37,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud87e\udc98\ud87e\udc54\ud87e\udc1e\ud87e\udca4\ud87e\udc3f\ud87e\udc57\ud87e\udcc3\ud87e\udcde\\U00039a92\ud87e\udd0a\\U00042719\ud87e\udcb9\ud87e\udcf4\ud87e\udce3\ud87e\udd1b\\U0003dd90\\U0005e1a7\ud87e\udc89\\U0006eba6\ud87e\udc45\ud87e\udc41\ud87e\udc64\ud87e\udd15\ud87e\udc1e\ud87e\udcc7\ud87e\udca0\\U0003c783\ud87e\udcc6\\U00059b2a\ud87e\udc33\ud87e\udcad\\U00074ce9\ud87e\udc8c\\U00060501\ud87e\udce8\ud87e\udcef\ud87e\udd06\\U000681d2\ud87e\udcdb\ud87e\udd08\ud87e\udc99\\U0005862c\ud87e\udc5d\ud87e\udd0e\ud87e\udc53\ud87e\udcf9\ud87e\udd0c\ud87e\udc77\ud87e\udc9e\ud87e\udd10\ud87e\udcf3\ud87e\udcab\ud87e\udd03\ud87e\udc65\ud87e\udcb6\ud87e\udcac\ud87e\udc24\\U0007ec01\\U0006e43d\\U0007210f\ud87e\udc82\ud87e\udd0d\\U00060334\ud87e\udcbf\ud87e\udc4e\ud87e\udc69\ud87e\udc90\ud87e\udc41\ud87e\udc3d\ud87e\udc54\\U0007223f\ud87e\udcda\\U0005d699\\U000469f1\ud87e\udcc6\ud87e\udcaa\ud87e\udd17\ud87e\udc3f\ud87e\udcf0\ud87e\udc6c\\U00045d96\ud87e\udceb\ud87e\udcfe\\U0006ee88\\U00079ea2\ud87e\udc7a\ud87e\udc5a\ud87e\udd11\\U000693c1\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([194590, 528156, 1086612]),\n+                ),\n+                \"min_size\": 30,\n+                \"max_size\": 130,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.2964478887520286},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3703795035813205},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"R\\\\(f\\xa5$T\\x00\\xbd\\x9b\\xa7E\\xb1\\xc7\\xc3l\\xae\\x0f\\x00\\xdcJ\\x055\\xbb\\x98\\xee\\xc0\\x94\\xdao\\xbfc\\x0b\\x9fz%J\\xc4\\xc4\\x8b\\x80\\xe7\\xb1N\\xeakK\\x8c\\xa04myQ\\xcc\\xc5p{\\x1dK'Qj\\x10\\x80\\x06\\xac\\xb9\\xf5r,\\x9b\\x84\\x87\\x1e/Y\\xc8\\xf5|~\\xa1:\\xf6\\x83\\x9d\\x95\\xedKB\\n\\xd5(?\\xbb\\xafGL'C\\xfa>`Q\\xa94\\xde\\x1b\\xb6u\\xc6\\x96\",\n+            constraints={\"min_size\": 32, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-6.695258672425109e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9373661717694996.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 3.4510405446539836e-147},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-24124,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x7f]\\x9f\\x91<}B\\x0e\\xcd\\xdb\\xb1`\\x1e\\xa8\\xf8\\xb6\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005ce2f\\U0005cdcb\\U0005cdef\\U0005cd81\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [380216, 410885, 670547, 925619, 975803, 1038483, 1080166],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud83c\udffb\ud83d\udc4d\ud83c\udffb\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([99780, 250974])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.1268697148095036e16,\n+            constraints={\n+                \"min_value\": -5.370585927683866e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.458281207358579e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0725\u0805\u0803\u080a\u077a\u07c9\u073d\u07ae\u07c2\u07b0\u0807\u07d5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [1820, 124816, 370998, 545443, 837107, 896293, 1024504],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 12,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5e-324},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003fe1d\\U0003ff13\\U0003fec8\\U0005ef75\\U000530df\\U00078160\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([261654, 630713])),\n+                \"min_size\": 4,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x08\\xa3]\\x1b\\x8d\\x0f\\xda8\\xc0\\x04\\r\\x7f1\\x02\\xe1\\x87A\\xeb\\x938\\xc8\\xb5\\xfbrs\\xd7\\xf4J\\x84\\x80f!\\x08\\x7f\\xba\\x90\\xf0\",\n+            constraints={\"min_size\": 17, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=937,\n+            constraints={\n+                \"min_value\": 880,\n+                \"max_value\": 974,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.386957668056769e307,\n+            constraints={\n+                \"min_value\": 5.236540683158362e16,\n+                \"max_value\": 1.08765171459569e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.5517273297113074e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00c9\\x05\u5d59^)\u00b0\u00d0\u00f7\u00b1\u3c64\u4de3\\x1eL\u00a6\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([0, 41475])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=182,\n+            constraints={\n+                \"min_value\": 123,\n+                \"max_value\": None,\n+                \"shrink_towards\": -3253,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.20037482208397e307,\n+            constraints={\n+                \"min_value\": 3.6763681089367885e17,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.20037482208397e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 7.352778877130698e-302},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-23828,\n+            constraints={\n+                \"min_value\": -29475,\n+                \"max_value\": -18700,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.07734610731667414},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.5,\n+            constraints={\n+                \"min_value\": 0.5,\n+                \"max_value\": 8.465287728946187e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"Oz(\\x87W\\x84PO\\xe5\\xf9\\xa4y\\xdb\\x9b\\x7f\\xeaf1z1\",\n+            constraints={\"min_size\": 14, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.282853953672881e308,\n+            constraints={\n+                \"min_value\": -6734051774982975.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.282853953672881e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"*e\\x07\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003bed1\\U0003bf1c\\U0003beb8\\U000f5708\\U0003beab\\U0003bf2d\\U0003beea\\U0003bf7d\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([245395, 570142, 963887, 1095764]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u6ad7\u6a58\u6a20\u6a40\u6af3\u6a3b\\U00056f96\u6a5a\u6a59\u6a77\u6a41\u6ab4\\U000412e5\u6a86\u6a8f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([27158, 392983, 849388, 1016815]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 18,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=24358,\n+            constraints={\n+                \"min_value\": 58,\n+                \"max_value\": None,\n+                \"shrink_towards\": 124,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([900255, 934424])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.3119628579469485},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.8090760929831796e144,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 7.15156177321176e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.175494351e-38},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000cdabc\\U0008eb18\\U0007b23f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            300,\n+                            404,\n+                            213660,\n+                            423216,\n+                            431444,\n+                            608654,\n+                            609239,\n+                            655130,\n+                            806084,\n+                            994253,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.1672910183030261},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8782593945984869},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.370702715461061e42,\n+            constraints={\n+                \"min_value\": -7.207191753307855e-111,\n+                \"max_value\": 9.322009070383493e42,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.370702715461061e42,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa6\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004feb3\\U0004ff3a\\U0004fefc\\U0004ff60\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([327283, 382693, 514374, 524080, 577910, 875101]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 65,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"EI\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.36847213857052014},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-2.2648956332005428e290,\n+            constraints={\n+                \"min_value\": -2.2648956332005428e290,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.3033416112432908e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.752999161830691},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.203591023524502e308,\n+            constraints={\n+                \"min_value\": 9.652376790098664e-103,\n+                \"max_value\": 1.2697150282371303e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.134733185431798e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9559175367967061},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -5.597417156563981e16,\n+                \"max_value\": 8.430413947042402e132,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.969745877289514e132,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.621076448865923},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-31882,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3479972198210764},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=10845,\n+            constraints={\n+                \"min_value\": -27385,\n+                \"max_value\": None,\n+                \"shrink_towards\": -13201,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6033656915271694e308,\n+            constraints={\n+                \"min_value\": 4.541817519734147e218,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.1768482387350787e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ua292\ua266\\U0009abe0\ua1f1\ua227\ua24b\ua260\ua207\ua1bf\\U0008727a\ua205\ua1cb\ua2a0\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            41381,\n+                            65535,\n+                            108427,\n+                            128152,\n+                            552254,\n+                            559064,\n+                            574096,\n+                            634027,\n+                            888472,\n+                            895224,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 4,\n+                \"max_size\": 104,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud876\udf14\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([186938, 239793, 341193, 440604, 858524]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"c\\x14\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.8133073562651548e258,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"&#x\\xf3\\xb7\\x96\\x9e\\x18\\x89+\\x14\\x15\\xf4\\x90\\xe5h~\\xd7\\xa9\\xb2\\x81\\xe7\\r\\x83n\\xff\\x9d\\xcamz_p$\\x18;\\xaf\\x96:\\xc5\\xa6\\xbf\\x8cr\\x8f&\\x91aq\\xa4|f\\x18\\x7f\\xed\\xce>\\xf5m\\x04\\x8fS\\x92\\xb8\\xd2z\\xa6\\xed\\x14\\x0bRy\\xc9g\\x18E\\xbc{\",\n+            constraints={\"min_size\": 39, \"max_size\": 139},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u5b00\u5ae7\u5a8d\u5b7c\u5a94\u5b48\u5b53\u5b29\u5b25\u5aef\u5b75\u5ab1\u5ae1\u5b82\u5b02\u5af8\ud865\ude70\u5a8c\\U0001b5e7\u5ae2\u5aa9\u5aa3\u5ae7\u5b66\u5b68\u5ab3\u5aef\u5b4f\u5b1b\u5aaa\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([23171, 213972, 473136, 552701]),\n+                ),\n+                \"min_size\": 27,\n+                \"max_size\": 127,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1277035851221837e308,\n+            constraints={\n+                \"min_value\": 1.9466139714724282e62,\n+                \"max_value\": 1.2944587182725656e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.5080677726009723e304,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5929288523406852},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=23739,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -20468,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u2759\u2ee9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            9999,\n+                            25015,\n+                            51024,\n+                            65535,\n+                            111483,\n+                            119199,\n+                            167968,\n+                            294935,\n+                            358837,\n+                            433524,\n+                            441065,\n+                            500280,\n+                            670111,\n+                            686815,\n+                            803110,\n+                            857344,\n+                            928445,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([17071, 583327, 788469, 873974]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([412795, 925640])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-17195,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 26970,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud811\udc25\ud811\udcc6\\U0004caf9\\U00062f3c\ud811\udc05\ud811\udc5c\ud811\udc6e\\U000143f7\\U000f207f\ud811\udc94\\U0010be68\\U000b878f\ud811\udc49\ud811\udccc\\U000143ee\ud811\udc04\ud811\udc0a\\U000caaa0\ud811\udc27\ud811\udccf\ud811\udcb0\\U00040054\\U00016174\ud811\udc03\ud811\udc24\ud811\udc1a\\U0006ab04\ud811\udcac\ud811\udc6d\ud811\udcaf\\U00067fa4\ud811\udcb4\ud811\udc88\ud811\udc8a\ud811\udc51\ud811\udc03\ud811\udc5c\\U000b77bb\ud811\udcba\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([82909, 669044, 730190, 926398, 928074, 1110091]),\n+                ),\n+                \"min_size\": 30,\n+                \"max_size\": 130,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.212061205213616e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=18929,\n+            constraints={\n+                \"min_value\": 18872,\n+                \"max_value\": None,\n+                \"shrink_towards\": -8182,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8a\\xe6\\xb5\\xdc\\xf5k^]\\x88f_\\x06\\x8c\\xc2\\xd7\\xf3\\xfeb\\xed8\\xf0\\x9e\\rc=+\\xf2\\x87%!;\\x97\\xfa\",\n+            constraints={\"min_size\": 28, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xde\\xf8\\\\\\xddL\\xa97\\xa76((1\\x9c\\x0f\\x97\\xd2\\xc0\\xce\\xc0\\xa6\\xc3\\xbd\\xd5#\\x9e\\xb3\\xa68\\xf1`\\xbd\\x89,\"\\xf6\\xeau|tU\\x8b\\x0e\\xa4\\xecZ\\xf8:\\xba',\n+            constraints={\"min_size\": 44, \"max_size\": 144},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd1(\\x9c\\x8c.\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'J\\x9c\\x07\\x9f\\xa7\\xd35\\xfaA\\x0ce`\\xa4\"\\xfd\\x14v\\x01\\xfe\\x85\\xfe\\xee>\\x06\\x12\\xff(\\xe8\\xd7\\xd0\\x99\\x87\\xeaf\\xf8\\xd4\\xa7\\xe1\\x06\\x90\\xc3\\x18\\xa3\\xf8~!\\xe0\\x81>\\x1eh\\x81\\x86x\\x83\\xa8\\x85\\x05\\xf1\\xe0\\xee\\x94\\xb1+\\xd3H9zn\\xd0\\x82\\xa9a\\xcf\\xb1O\\xb8KR0U\\x94@\\xb9\\xa2\\xb4\\x01\\x98\\xd9p#\\xeb\\x12U1\\xf9$\\xf6aJ\\xc4\\x03W\\xc3\\x19\\xf2\\x92\\x1e{1\\xbde(X\\xaf*\\xc6_MY:\\x9f#\\x1f8\\x80*3\\xb8\\xbd\\xd1F\\x1e\\xf7\\xbe\\x8e\\xef',\n+            constraints={\"min_size\": 37, \"max_size\": 137},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([404, 464661, 566884, 808225])\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=26816,\n+            constraints={\n+                \"min_value\": 20113,\n+                \"max_value\": 49941,\n+                \"shrink_towards\": 27905,\n+                \"weights\": {\n+                    48735: 0.03412318359733015,\n+                    42488: 0.00526050721324164,\n+                    48410: 0.006918938426079491,\n+                    45631: 0.005410211893814758,\n+                    26816: 0.09120925403281198,\n+                    33322: 0.048577029416865376,\n+                    45133: 0.09548146176477568,\n+                    29571: 0.05837928726136919,\n+                    32439: 0.09548146176477568,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7_413_811_329_298_863_472,\n+            constraints={\n+                \"min_value\": 7_413_811_329_298_841_500,\n+                \"max_value\": 7_413_811_329_298_865_091,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    7_413_811_329_298_864_454: 0.022550701363950366,\n+                    7_413_811_329_298_865_091: 0.022921729816005865,\n+                    7_413_811_329_298_861_930: 0.010333472013316148,\n+                    7_413_811_329_298_863_746: 0.010641065648953594,\n+                    7_413_811_329_298_849_185: 0.02642022381210617,\n+                    7_413_811_329_298_852_269: 0.054637657003237965,\n+                    7_413_811_329_298_864_055: 0.03382605204592555,\n+                    7_413_811_329_298_853_943: 0.03571234000109553,\n+                    7_413_811_329_298_845_358: 0.034869566824385446,\n+                    7_413_811_329_298_865_090: 0.011763067057191365,\n+                    7_413_811_329_298_861_005: 0.06048463987132769,\n+                    7_413_811_329_298_856_154: 0.05215137130844501,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.3337332478288428e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=27_688_257_971_158_535_396_459_954_511_144_147_945,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 157_910_273_150_749_289_015_878_782_573_978_347_962,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud81e\udcbd\\U00089f06\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            96268,\n+                            180099,\n+                            209744,\n+                            230547,\n+                            233651,\n+                            236515,\n+                            317528,\n+                            436015,\n+                            486485,\n+                            574853,\n+                            684475,\n+                            865510,\n+                            888638,\n+                            942607,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 93,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 6.103515625e-05},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.455675723574742e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.2010863650481792e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-6389,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -6298,\n+                \"shrink_towards\": -9566,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.17969406936546142},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0157\u0141\\U000c97b8\u0139\u022b\u01c8\\U00085606\u01f6\u0160\u01b7\u0162\\U00065b93\u0156\u01fb\u012c\\U000c452b\u01bb\u0202\u0203\u01ff\\U000f4cfc\\U000d4658\\U000571f3\u01cb\u021a\u019c\u01f2\\U00063352\u01ae\u01b0\u01ba\\U001007bc\u01a2\u0174\u01a8\\U0005e77b\\U0010198f\u021c\u021f\u019d\u0197\\U0005f175\u01a0\u01a1\u0171\u0168\u013c\u012c\u020a\u0156\\U000f07c9\u021a\u01e5\u0202\u0148\u020f\u0137\u020f\u016d\u0190\u01df\\U000e2506\u017e\u01dc\\U000e7b6b\u021f\u0135\u01cf\u01bc\u0150\u0191\u0178\u0217\u018d\u01aa\u01f4\\U000a881d\u01ab\u01f2\u0140\u01bb\\U00083108\u021d\\U000e4d8d\u015b\u013b\u013b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            300,\n+                            72720,\n+                            132827,\n+                            146928,\n+                            197292,\n+                            269555,\n+                            329086,\n+                            374664,\n+                            381873,\n+                            453338,\n+                            536795,\n+                            636024,\n+                            644519,\n+                            874175,\n+                            924599,\n+                            1086794,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 36,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.49970218214761053},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": 4.65401306523624e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.7976931348623157e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u6893\u68d2\u6932\u688c\\U00052772\u68e1\u68c2\u6879\u6933\u68dd\u68ea\u6928\u68e8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([26710, 644949, 762715]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-15717,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -57,\n+                \"shrink_towards\": 20746,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.0886481887498587e-97},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xc8\\x85E\\x0b\\xe2\\xe9\\xe3\\xb1\\xf4f\\xa19T\\xdd\\xd1;\\x1c\\xb5\\x8c\\'\"\\xad\\xc9F\\x90;\\xc8\\xf0#{\\xba\\x98\\xcbu\"\\xf5\\x1aB\\x13\\xc3B\\xbf\\xba\\xcb\\x17\\xff\\xef\\xe6l\\x94\\x19\\xc7\\x9e\\xeb{\\xca\\x19\\xb4\\xe9\\x81\\xa2\\x99\\xe4\\x9aS&\\x85\\xe0\\xc0:D8\\x15j1\\x0b-\\xb6\\x90\\xadbb;z_\\xb51\\xd0yM\\xd22\\xa8\\x9e\\x90D\\x12\\xb7\\xb4k\\xa0\\xd5\\x8c\\x97\\xa7\\\\\\xee\\x8c\\x89',\n+            constraints={\"min_size\": 49, \"max_size\": 149},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"A\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.1121719950597567e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6306951782536995e307,\n+            constraints={\n+                \"min_value\": 0.5,\n+                \"max_value\": 1.941756138819907e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.4223686524822265e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.504183168514217e16,\n+            constraints={\n+                \"min_value\": -6.055381452251038e16,\n+                \"max_value\": 4.086113591975723e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.4579433072248552e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=144_287_883_967_936_523_573_557_943_432_733_162_168,\n+            constraints={\n+                \"min_value\": 512,\n+                \"max_value\": None,\n+                \"shrink_towards\": -52,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1f\\xf3\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.225073858507203e-309,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=89,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 110,\n+                \"shrink_towards\": -4_787_960_517_572_314_799,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=17787,\n+            constraints={\n+                \"min_value\": 8192,\n+                \"max_value\": 25901,\n+                \"shrink_towards\": 93,\n+                \"weights\": {17787: 0.3374219222703515, 23692: 0.24736859128121033},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x8eEP\\xa4w\\xbb2\\xf2\\xd5\\x8fF\\x97D\\x94\\x0b\\x0f\\\\.}\\xc7\\rB\\x02\\xd6\\x96 S\"\\xfd\\xbaN\\r\\xb0uv\\x82\\xbf0\\xfaj&\\xff=\\x19(\\x90\\xe1\\x14\\xc2\\r#2fQ\\xb9<<\\xdb\\x81\\xde\\xe9M\\xf5@\\x9b\\x12:\\xe5\\x1c\\x95\\x8a\\xdb\\x0bo\\xb2\\x17\\xc4hb\\x7fTA\\xa2Q#Z~N\\x0b9mP\\xf4R\\xd3\\x93\\xf9\\xc3Bv\\xfd2\\x19-PT\\xab\\x02f\\x1a!+9\\x14\\x80\\xd0>\\xf1=\\xc3G\\xa1\\xc8\\xff@9A\\xda[\\xcd@~[',\n+            constraints={\"min_size\": 40, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -7.138076018234842e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5e-324,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b']\\xd8\\x7f\\xb1$t\\xdb\\xf9u\\x88+\\x9a\\xc6\\xa8\"\\x17\\x88s\\x81\\xe0Y\\xb9x\\xdaK\\xd8\\xf0{\\xb5;\\x8f\\xbd\\x95\\x86\\xaf\\xe5lt',\n+            constraints={\"min_size\": 22, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.5337717265606644e-94},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"al\\x0b\\xe9=|r\",\n+            constraints={\"min_size\": 0, \"max_size\": 78},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -2464532487495131.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 8324437909139996.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=5212,\n+            constraints={\n+                \"min_value\": -57,\n+                \"max_value\": 9970,\n+                \"shrink_towards\": 8_220_914_780_712_400_683,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.680721077915465e-151,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.412113339411624e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"c\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"`\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc2\\xa8\\xadmw\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"{\\xbe\\x18\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u043e\u0415\u04e6\u04d6\u0459\u04d7\ud83d\udcaa\u046b\u046c\ub2f2\u0450\u04ba\u04c9\u044a\u04b2\u0432\u04cd\u0404\u0469\u0460\u04e6\\U000abc52\\U000a8fa6\u044a\\U000b14f9\\U00013d2f\u04d1\u0427\u0406\u04e1\u03fd\u046b\u0455\u0499\u03fe\u04d0\u03ee\u0497\u0444\u04e5\u047d\u0441\u03fb\u040a\u042d\u040d\u03ea\u0436\u0400\u049a\u0463\\U0001e0e7\u040a\u046e\u04cc\u0459\u03f0\u0460\u045e\u0424\u04b6\u0419\u0426\u03fe\u0438\u043a\u049c\u046b\u042f\u4d82\u0486\\U000a7ca6\\uef49\ud871\udced\u04ac\u048e\u045e\u04b0\u044a\u0429\\uec5e\u04ce\u0466\u04bd\u04cf\u04dc\u04a0\\U00011b8b\u04bd\u04bf\u0488\u0409\u03ec\u04be\u041f\u0485\u045f\u0469\u03f2\u04be\u04c2\u03f4\ud861\udef2\u0476\u0479\u03ec\\U0001c38f\u0436\u042b\ud870\udefa\u0400\u0432\u04bc\u046f\u046d\u04b2\u04ba\u040c\ud801\udccd\u0443\\ud83d\u03f2\u042f\u0445\u04d3\u0437\u04a1\u0494\u0425\u04a6\u04c9\\U000b7532\\U000bb3ea\u0499\u0412\u0467\u045c\u04b9\u04bf\u0462\u0442\u0404\u03f5\u04e4\u0422\u0475\ud85d\ude39\u043d\u0468\u04cd\\U00019fd9\u03ec\u0430\u04b2\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1000, 191006, 683617, 772131]),\n+                ),\n+                \"min_size\": 45,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 8527261174773333.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.846117118598737e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=39488,\n+            constraints={\n+                \"min_value\": 20110,\n+                \"max_value\": None,\n+                \"shrink_towards\": -16307,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xda\\xb3\\xf19\\x88\\x82\\x0bQC\\t\\x1bC\\xd9\\x18Z*\\x90\\x95\\xe5\\xdd\\x89=\\x93\\xe6\\t\\x99\\xa9\\xb8\\xd6\\xfa\\x86\\xf9>\\x9a\\xb7D\\r\\x16\\xc2@=\\x0f\\x8dt\\xd7\\xe6\\x1a\\xec\\x90S\\xc9\\xf5\\x80g,\\xedqnG\\xab\\xf6\\x1dq\\xd9\\xdb\\xfe\\x81\\t\\xfd!{\\xaf\\x03\\xef\\x9a\\xb43\\xee\\xf7\\xe0\\xf0P(\\x01m\\x99WUT.\\xfcf]\\xe8J\\xa7\\xb3\\x89\\xa56\\xcb\\xe7\\xc5\\x0e\\xcb\\x8f\\x9di\\xb3PO\\x18*\\x1d\\x0cp\\xeb\\xa0J\\xc6\\xb3\\x10\\x16Ax\\xab\",\n+            constraints={\"min_size\": 50, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\uc2a0\uc259\uc204\uc223\uc287\uc22d\uc1da\uc242\uc299\uc1e4\\U00064bd3\uc1f9\\U0007f8fd\uc1f2\uc1d6\uc22a\\U0001b969\uc253\uc26b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([49589, 849069, 908286, 1109566]),\n+                ),\n+                \"min_size\": 14,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.3170052901881606e308,\n+            constraints={\n+                \"min_value\": -2.5941941606797122e247,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.3170052901881606e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.05},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.105551346342924e207,\n+            constraints={\n+                \"min_value\": 6.363048235613845e16,\n+                \"max_value\": 1.1055513463429242e207,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0277223449718175e207,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.996764024283276e307,\n+            constraints={\n+                \"min_value\": 0.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9.996764024283276e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.475269387121143e307,\n+            constraints={\n+                \"min_value\": 0.05,\n+                \"max_value\": 1.3412821815273895e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.103515625e-05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\u20fa\\U000c63f0\u2076\u2097\u203a\\u2066\u20b2\u2039\\u2066\u201d\u20a2\u2086\\u200a\u207f\\U0007115c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([8192, 26139, 389505, 1034516]),\n+                ),\n+                \"min_size\": 11,\n+                \"max_size\": 111,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-2.460229988212124e130,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -9.695464046863779e127,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"_\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00063c5f\\U00063c25\\U00063c4f\\U0007268c\\U0006b582\\U00063bfc\\U0006cc3f\\U00063c09\\U00063c70\\U00063cc5\\U00066b49\\U00063c45\\U00063c65\\U00069b3e\\U00063cab\\U00063c5e\\U00063c4b\\U00068953\\U0006eda5\\U00063c62\\U00070b25\\U00065c6d\\U00063c76\\U00063c98\\U00063c9d\\U00063c64\\U00063c2e\\U00063bf9\\U00063cb5\\U00063bd6\\U0006a514\\U00063cc1\\U0006940f\\U00063cae\\U00063be1\\U00063cc1\\U00063c46\\U0006a08a\\U00063c23\\U00063c11\\U00063c58\\U0006b2a0\\U00063c92\\U0006ee51\\U00063c74\\U00063c11\\U00063caa\\U00063c5d\\U0006ef2e\\U00063c4c\\U00063c28\\U00063c5d\\U00063c59\\U00063c93\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([408522, 470263, 1076810]),\n+                ),\n+                \"min_size\": 33,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.312210415939813e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=3_954_893_528_954_032_646,\n+            constraints={\n+                \"min_value\": 3_954_893_528_954_010_124,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-3145,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0775212944054844},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4606,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -7,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": 3.3906606961247606e294,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xce\\x91YN\\x01\\xa3\\x81j\\xc0(/\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00010224\ud800\udee8\ud800\udf14\ud800\udec1\\U00010222\\U0003807a\ud800\ude95\\U0001026e\ud800\ude84\\U00015603\ud804\udd06\\U0001025c\ud800\udf0a\ud800\udf08\\U0001021b\\U0001026a\ud822\udc81\\U000102d7\ud800\udeba\\U000102d1\ud86c\udc92\ud802\udd8f\\U00010272\ud800\udf0c\ud800\udea8\ud800\udf09\\U0001023f\ud800\udecc\\U0003e0f8\\U0001022f\ud86e\ude61\ud800\ude8c\ud800\udeb7\\U0001022a\\U000102db\\U000102da\ud800\udef3\\U00010223\ud800\udef2\\U000445c8\ud800\udece\ud800\udea7\\U00010216\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [66070, 108794, 164503, 380408, 495431, 522039, 786752],\n+                    ),\n+                ),\n+                \"min_size\": 42,\n+                \"max_size\": 142,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud804\udf1f\\U000f9b23\ud804\udf1d\ud804\udef4\ud804\udf24\ud804\udedd\ud804\udec9\\U00011312\\U000112ab\ud804\udec1\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([70248, 216348, 318782, 368758, 940325, 1062197]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-18731,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud859\udcb8\ud859\udca9\ud859\udca3\ud859\udce1\\U0003d58d\\U000491fc\ud859\udd48\ud859\udcaf\ud859\udcf1\ud859\udccb\ud859\udcbb\ud859\udc80\ud859\udcf4\ud859\udd64\ud859\udcf8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([156776, 356607, 795009]),\n+                ),\n+                \"min_size\": 9,\n+                \"max_size\": 109,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"p$T\\xe3i\\\\\\xed\\x9fg\\xc8+8==\\x01\\xd3\\xbf\\x19\\x7f\\x8fi\\x1f\\x85[\\xb6\\x04C\\xd0\\xdaE\\x11\\\\s\\xb2\\x05\\x02\\xc5N\\x85#\",\n+            constraints={\"min_size\": 26, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.20155370062404182},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"jW#\\x85\",\n+            constraints={\"min_size\": 4, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=14489,\n+            constraints={\n+                \"min_value\": -45,\n+                \"max_value\": 26160,\n+                \"shrink_towards\": 99,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud834\udd69\u0162\u0193\u0223\u01b6\u0163\u022b\uad65\\U00013bf3\u014e\\uf164\\U00016fb3\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([300, 148006, 782287]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.9952786412309656e-140},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00080f63\\U00080efc\\U00080edd\\U000812c1\\U00080f44\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([528054, 534423, 606402]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.155168168001017e307,\n+            constraints={\n+                \"min_value\": -8.272791814349202e-276,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00046a62\\U00046b1c\\U00046a7f\\U00064517\\U00046a9c\\U00046ab0\\U00046b39\\U00046a85\\U0008c2e5\\U00046a58\\U00046a81\\U00099de2\\U000759e6\\U00046a75\\U00046ad0\\U00046a99\\U00079396\\U00046b1d\\U00046a9e\\U00046b18\\U00046a53\\U00046a54\\U00046b1e\\U00046b07\\U00046a77\\U00046a88\\U00046b35\\U00046a89\\U00046a96\\U0007814b\\U00046af0\\U00046a75\\U00046a64\\U00046a62\\U00046b2f\\U00070280\\U00046aa3\\U00046a4d\\U00046aa5\\U00046a52\\U00046ace\\U00046a9f\\U00088a8b\\U00046b1e\\U00046aed\\U00046adb\\U00046b42\\U00046a9f\\U00046ab5\\U00046a67\\U000924bf\\U00046aae\\U00046b41\\U00046ac7\\U00046add\\U00046b34\\U00046b41\\U00046aa1\\U00046ab1\\U00046a7e\\U00046b35\\U00046ad3\\U00046b25\\U00046a69\\U00046af2\\U00046b08\\U00046b39\\U00070bdb\\U00046ad2\\U00046a7b\\U00046b27\\U00046aab\\U000545cf\\U00046b10\\U00046a64\\U0009898f\\U00046a4b\\U00046b02\\U000604b5\\U00046b1a\\U00046b01\\U00046a66\\U00046a6e\\U00046a7b\\U00046ac3\\U00046aeb\\U00046af7\\U00046a50\\U00046a74\\U00046aab\\U0005e9b3\\U00046ac8\\U00046a50\\U000565d1\\U00046a55\\U00046abf\\U00059bb4\\U00046a79\\U00046a51\\U00046ab7\\U000961c1\\U00046ab1\\U00046a7b\\U00046a63\\U00046ad7\\U00046ac9\\U00060ce1\\U00046a77\\U00046b43\\U0005400f\\U0006dc78\\U00046a66\\U0005ab63\\U00046ae0\\U00046a5d\\U0006c984\\U00046b02\\U00046b39\\U000954a8\\U00046ae7\\U00046b43\\U0004debc\\U00046b27\\U00046b43\\U00083861\\U00046a80\\U00046b3c\\U00085269\\U0008442c\\U00046a59\\U00046a9c\\U00054ebc\\U00046a80\\U00046ac8\\U00046acb\\U00046af5\\U00084a28\\U00046a9c\\U00046b41\\U00060485\\U00046a73\\U00046b13\\U00046b19\\U00046b31\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([289348, 648623])),\n+                \"min_size\": 44,\n+                \"max_size\": 144,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([8192, 101757, 298242, 905683, 1025932, 1114110]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -3.3081932445085116e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.065893711030274e-264,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"[\\xb8\\x91\\xa5\\xb9\\xdd\\xebh{\\x03 5\\xaa(Et\\tS\\x02\\x17\\xe5B\\xa3\\x12\\xb6\\xf4\\xc8\\xa5\\xc3\\xed\\xcf\\x8c\\x12E]\\xf2\\xa6-\\xeb\\xeeO\\xedP\\x93\\x12<\\xb4\",\n+            constraints={\"min_size\": 24, \"max_size\": 124},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 9831679903893236.0,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.6548296545064328e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-28748,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 11781,\n+                \"shrink_towards\": 727_873_940_099_595_536,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.342138491070729e307,\n+            constraints={\n+                \"min_value\": 1.3033824971283078e16,\n+                \"max_value\": 6.233519717098005e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.39320641912264},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([208921, 323684, 722941])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9d\\xea\\x16R\\xe90\\xa4\\xe5\\x95q\\xeeV>\\x16 \\xe2y\\r\\xc9bV\\xcfYr\\xf2\\x00\\xd0\\x18~\\xcd\\x00\\x99\\xb1\\x87_\\xe56\\xe2\\x19\\x86U\\xbf\\x1f\\xcd\\x1b\\xe3$\\xd9\\xca\\xc6\\xb21\\xd9\\x13\\x1e\\xfd\\x9b\\x98@\\xa4\\x93`\\x17\\xed\\x02\",\n+            constraints={\"min_size\": 41, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc2\\xb9M\\x1cb\\x18\\xe9\\xc5d\\x9a\\x14\\xa4t[\\xcf\\xd42#\\xb6aX_\\x18T\\xf8*t\\xf8\\xf2\\xc6\\x0c$\\xf1$\\x19\\xa4\\x90D/O\\xc7\\xc6v\\x1be\\n=\\xbd\\xb1LD\\x0bpY\\xa7|\\xf6\\x10>*\\xd5$z\\xf1\\xde\\x9d\\xd1\\xc1\\x0b\\xa9\\xfc\\xbdf\\xc35(#k\\x14\",\n+            constraints={\"min_size\": 19, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-20615,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 19,\n+                \"shrink_towards\": 4141,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.08346249810342356},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7_473_156_648_151_959_429,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-6.663996550612131e16,\n+            constraints={\n+                \"min_value\": -3.860518973362605e211,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.4107364996221696e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u2764\u2782\u2743\u27b5\u2803\\U000b84ed\u276e\u277f\u27e1\u277e\u9a12\\U000c1f53\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            9999,\n+                            65535,\n+                            70310,\n+                            74201,\n+                            83417,\n+                            101919,\n+                            190001,\n+                            292233,\n+                            337606,\n+                            401783,\n+                            465040,\n+                            522567,\n+                            568792,\n+                            1025889,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 10,\n+                \"max_size\": 110,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.4263547688968118},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x84\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe2Vo\\xfb\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00044177\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([278799, 313597, 653344]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x00\\x87l*m\\x92?\",\n+            constraints={\"min_size\": 0, \"max_size\": 27},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4672,\n+            constraints={\n+                \"min_value\": 119,\n+                \"max_value\": 17305,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    1420: 0.06966088998432829,\n+                    13609: 0.0761695313507729,\n+                    3923: 0.06079025635713262,\n+                    7082: 0.0001788638577966641,\n+                    6037: 0.0758302563380044,\n+                    1798: 0.025132011840950166,\n+                    17104: 0.05581924814243554,\n+                    13177: 0.06162956733583132,\n+                    7371: 0.058777018568157105,\n+                    1323: 0.06136095765777427,\n+                    9536: 0.06092098826184759,\n+                    12211: 0.04287485647931526,\n+                    4672: 0.07858515559837045,\n+                    14994: 0.034266712914953305,\n+                    5360: 0.01644224310973001,\n+                    1087: 0.08574885546150093,\n+                    17304: 0.028013249158536504,\n+                    5741: 0.0724450981707458,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x19\\xc7\\x1c\\xb4\\xbe\\xf0\\xa8\\xae\\x92\\x9b\\x80\\xb8\\x15'\\x9dE\\x8f\\x0b\\x04\\xbb\\xe6\\x9c4\\x82\\x03\\x0c\\xa5\\x1aV\\xad\\x8d\\xf1\\xa2-\\xb9\\xb9_\\x98q\\x18\\x87\\x00\\xdd\\\\\\x01`g\\x9fF-\\xc5\\xd4\\x18_m\\x05\\xa4)\\x9bG\\x88\\x8b\",\n+            constraints={\"min_size\": 43, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-113,\n+            constraints={\n+                \"min_value\": -18164,\n+                \"max_value\": None,\n+                \"shrink_towards\": 30570,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000d20f9\\x07\\x19\\x1a\u00e1\u131e\\x8fw\\x91\\x16\\x03\\x86N8^\u00f4\u00ab0\u00a3\u00b8\\U000d24a6k\u00ce\\x037\\x11X\u00bc\u00cb}L\u00e25\\x10\u00f9s|f7t\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            30252,\n+                            70438,\n+                            119176,\n+                            157295,\n+                            194414,\n+                            377926,\n+                            423405,\n+                            537425,\n+                            540253,\n+                            585320,\n+                            633385,\n+                            654855,\n+                            748849,\n+                            749846,\n+                            754316,\n+                            857642,\n+                            920808,\n+                            939313,\n+                            964895,\n+                            1013058,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 40,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"x~\\x05\\xfb\\xa0Y\\xd2;Lj\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9069885697637274},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa9[\\xdae\",\n+            constraints={\"min_size\": 0, \"max_size\": 81},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001ae23\u0429\u0452\u04bd\u0496\u04ca\u03ed\\U00036183\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1000, 448744, 529066, 579599, 1045385]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9999,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 8.075934353720958e-291},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00056335\\U000562ed\\U000b3351\\U0005631d\\U00056337\\U000562eb\\U00056305\\U0005632c\\U000562e6\\U000562ce\\U00056377\\U00056310\\U000562aa\\U00093db1\\U0005632c\\U000562a5\\U000562ee\\U000562af\\U0005633b\\U0009e272\\U000a4f94\\U000bb528\\U0005637a\\U00056389\\U00056290\\U0005631c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([352909, 358087, 416046, 941393, 1102265]),\n+                ),\n+                \"min_size\": 26,\n+                \"max_size\": 126,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0002f3b6\\U0002f39d\\U0002f396\\U0002f3a7\\U0002f3a2\\U0002f3d5\\U0002f408\\U0002f43d\\U0002f3a5\\U0002f3e1\\U0002f3e5\\U000f4756\\U0002f3ca\\U0002f421\\U0002f393\\U0002f3c4\\U0002f415\\U0002f373\\U0002f446\\U0002f37d\\U0002f3d5\\U0002f3a4\\U0002f362\\U0002f39c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [193367, 334389, 414625, 612706, 643021, 1027726, 1114110],\n+                    ),\n+                ),\n+                \"min_size\": 16,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud865\udd08\ud844\udca5\ud843\udff8\ud856\ude2c\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([135128, 194217])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud83c\udffb\ud83d\udc4d\ud83c\udffb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [22644, 538897, 722248, 744806, 765416, 883011, 958662, 970753],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"D?O\\x7f\\x131J\\xd0\\xc2\",\n+            constraints={\"min_size\": 8, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.09918739256330292},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc9\\x8d\\xdf\\xef\\x83\\x80%\\xc5g\\xc3\\xa3\\xb2z\\x1dgl\\xb99\\x06\\x8e\\xdeE\\xd7\\\\\\xcb\\xae9\\x82\",\n+            constraints={\"min_size\": 13, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-3296,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 17,\n+                \"shrink_towards\": -411820136,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.346074481372546e282,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1e-05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9894257874255552},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.05,\n+            constraints={\n+                \"min_value\": -9.335829143462768e-205,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.2250738585e-313,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.2986267198011124},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.34270871870010017},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"3P'p\\xfc\\xcex\\x0b,\\xcc=\\x9d#\\xee=b\\xddu\\x8d&k1\\xce3n\\x97\\x1c\\x10\\x0fx\\xc0\\xf6n\\xbb\\xe5\\x89\\xe0Q3\\xe0\\x1d\\x98\\nD(\\xb5\\xb8\\xd0\\x8afj\\x03u\\xaaT\\xf1\\x8b/\\xe8SD\\x1eI_\\xb6\\xbd\\xea\\x17\\xf1\\x90\\x9e\\x9bL\\xfc\\x98\\x01\\xeaV|tqr\\xe0\\xd67e\\xf9h\\xe4j\\x96\\xc5\\x00?\\x91~\\xadM\\xf6\\xac\\x86\\xa4\\xaet\\xb6\\x17\\xdc\\xf4\\x84%\\x10\\xb4\\xd2\\xf6X7c\\xf6J\",\n+            constraints={\"min_size\": 48, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 61},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"#\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.21464106029980617},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 7.937871995857558e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"P\\xabyQ}\\xd0\\x88\\x10\\x08\\xdd\\x87\\xd9\\xa9\\x9di\\xb8\\xf4\\xe3\\xd1]\\x996\",\n+            constraints={\"min_size\": 19, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.26997357641798075},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004b155\\U0004b1d9\\U0004b102\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([307448, 560436, 755665]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"JU\\x9dmY \\xb4\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.036911068464784e16,\n+            constraints={\n+                \"min_value\": -1.401298464324817e-45,\n+                \"max_value\": 3.9044954718689356e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.401298464324817e-45},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9984,\n+            constraints={\n+                \"min_value\": 5911,\n+                \"max_value\": None,\n+                \"shrink_towards\": -22328,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x00\\xaeU\\xf6\\xe1\\xd7\\x88\\xa8\\xbf0\\x81MDF\\xd0\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8192,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 3105,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=23042,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.024376458227023397},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud882\udf2d\\x96\\x9b=\u00af\\x102\\x17\u00c1PO\u00b8\u00e8\\x820\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            48854,\n+                            144243,\n+                            534559,\n+                            547385,\n+                            628911,\n+                            728033,\n+                            815619,\n+                            978142,\n+                            1078273,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 11,\n+                \"max_size\": 111,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6536030262140672},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=8.774516403429591e307,\n+            constraints={\n+                \"min_value\": -6.193703999960597e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 8.774516403429591e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc6\\x82.\\x12\\x1e\\x87\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0400\u04f0\u0487\\U00051910\\U00044967\u045f\\U0007e0c5\u045b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1024, 631911, 712374, 741390, 766016, 900861]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.6354216747648745e125,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.6809033526565966e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=513955728,\n+            constraints={\n+                \"min_value\": 513955700,\n+                \"max_value\": 513955740,\n+                \"shrink_towards\": 18,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-101,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 38,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003375a\\U000336ab\\U00033713\\U000336a9\\U00033752\\U0003376e\\U000336e3\\U0003374d\\U000336c7\\U00033738\\U000336c7\\U0003372a\\U000336e4\\U000336c4\\U0003371d\\U000336d6\\U000a8d6a\\U0003372d\\U00033746\\U000336cb\\U00033732\\U000336a9\\U0003377d\\U00041fd8\\U0003377b\\U000336f3\\U00079194\\U0003372c\\U0008b873\\U0003379b\\U000336f8\\U00033757\\U000336da\\U00033743\\U000336fe\\U0003376c\\U000336ec\\U000336b4\\U00033768\\U00033777\\U00033739\\U00033776\\U00033795\\U000dee5c\\U000336cf\\U000336c3\\U000336d5\\U00033738\\U000336bd\\U00033749\\U00033794\\U00033763\\U000f4a37\\U00033710\\U00092b6d\\U0003372d\\U000d8df4\\U0005f7fc\\U0003636a\\U000fd8d0\\U00033784\\U000336fc\\U0008705c\\U000336fb\\U00033797\\U0004e0b5\\U00033741\\U00033778\\U000336bd\\U00033765\\U00033707\\U000336b0\\U0003375a\\U00033752\\U000336b6\\U000336e5\\U0003374b\\U00033764\\U000d7b8d\\U000336c6\\U000e43f4\\U00033790\\U00033710\\U000336f5\\U000475ea\\U00033723\\U0003371d\\U000336ab\\U00033721\\U000336aa\\U000336e6\\U0003371d\\U00080ad9\\U000336c6\\U00033716\\U000f030f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([210599, 759635, 880766, 1042262]),\n+                ),\n+                \"min_size\": 40,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.45038903193786983,\n+            constraints={\n+                \"min_value\": 2.3853598706177828e-161,\n+                \"max_value\": 0.5,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.015086020289368899,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00048d4a\\U00048d12\\U00048d4d\\U00048c60\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [298072, 341650, 422795, 660185, 722884, 957305, 1089697],\n+                    ),\n+                ),\n+                \"min_size\": 2,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x92\\xb0\\xfd\\xdf\\x83tF\\x9a\\xda\\xc7}\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"POD_IP\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            40267,\n+                            54917,\n+                            108472,\n+                            162365,\n+                            249239,\n+                            649577,\n+                            652748,\n+                            676967,\n+                            951538,\n+                            988560,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 2,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-67,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 20507,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1b\\x81\\xfb\\x1b\\xb1}\\xda\\x97\\xd0d\\xec\\xf6\\xfc\\x82U\\r\\x17\\x16\\x0b\\xe1\\x18+*\\xa2\\x03\\xe3\\xabI\\xa8\\xf3I\\xff/%\\xec\\x85}/\\xf6\\xde\\xe6\\x07:\\xd0\\xa6\\xf4vt\\x1bDR\\xa2\\xfb\\r\\xeb\\xc1\\xf4\\x1b\",\n+            constraints={\"min_size\": 36, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0246\u0259\u0261\\U000ba9c7\u0266\u0244\u022e\u021f\u026b\u987b\u0281\ud802\udf41\u0205\u0203\u0238\u025d\u025e\u01e5\u01a6\u024b\u01bd\u01ee\u024e\u1517\u01bb\u01b2\u01d5\u01c9\u0283\u01c8\u01f2\u01f6\u01b8\u0253\u01d2\u023b\u0206\u026a\u01d9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([404, 289052, 735246, 796654]),\n+                ),\n+                \"min_size\": 14,\n+                \"max_size\": 114,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf7\\xc2R\\xaeq\\x84D\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-nan,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 0.05,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.9018358849381634e-157,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".worker_identity.\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"e\\x03u\\xa2\\x12\\xe0\\xdf\\xb9:b\\xcf\\xac\\xcdf\\x89\\xbd\\x1cA3ZC\\xb992\\x13\\xb0G\\xd0I\\xf0B\\xb1\\x1al\\xd7\\xd9^\\x1c\\x99q^\\xbcy\\xcfAGa\\x01ua\\xc80\\xb1&\\xa1G>8\",\n+            constraints={\"min_size\": 41, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9165481760975027},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\"',\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.413020058461602e-18,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.1556432141222924e-235,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"$\\x96}\\xd2\\x04y\\xc9\\x83\\xc2\\x88KL\\xf2\\xf9\\xabg8\\x1f\\xd8jGX]^\\x14BN\\x9cq\\xddY\\xb7\",\n+            constraints={\"min_size\": 11, \"max_size\": 111},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x11\\x04\\xc5ZJ\\xf1P~\\x8a\\x04\\xb8\\xed]\\xfe\\xae\\x89\\xde\\x88B8=\\x9c\\n\\xf2\\xbdkI\\xc9\\xaa~\",\n+            constraints={\"min_size\": 15, \"max_size\": 65},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5806948409792262},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=65535,\n+            constraints={\n+                \"min_value\": -7375,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"Q<\\x01\\xa4\\x99\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 7.939515946370314e306,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.3247767460253544},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.2250738585072014e-308},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=792890129,\n+            constraints={\n+                \"min_value\": -24904,\n+                \"max_value\": 1_316_459_015,\n+                \"shrink_towards\": 22890,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-28617,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -15460,\n+                \"shrink_towards\": 37,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.5031709395331953e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x00\\x87l*m\\x92?\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"@\\x1fD\\xa8l\\xea6\\xd3I\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.882949818088555e-237},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.017192036590635e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.996375871564351e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=23242,\n+            constraints={\n+                \"min_value\": -1_071_020_272,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6766473543696526},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.4176699896439499e308,\n+            constraints={\n+                \"min_value\": 0.99999,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.1097775393538228e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5854340946413493},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9196805080387310.0,\n+            constraints={\n+                \"min_value\": -1.0963673012695261e-300,\n+                \"max_value\": 1.6978970629141202e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5508305796165898.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-17492,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=18602,\n+            constraints={\n+                \"min_value\": 15264,\n+                \"max_value\": 65535,\n+                \"shrink_towards\": 24374,\n+                \"weights\": {65535: 0.5276758190420443, 24524: 0.0010553516380840888},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf5\\xf5<RI\\x85o\\xd8\\x18\",\n+            constraints={\"min_size\": 6, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=inf,\n+            constraints={\n+                \"min_value\": inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 8.253694512609968e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=8221583181095425.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ube9a\\U00048058\ube86\ube00\ubdf6\ubdfd\ubdcd\ube2f\ubda8\ud865\uddb8\ube1b\ubdb2\ube73\ube4f\ubdb7\ube70\ubdf6\ube98\ube37\ube25\ube6c\ube15\ube0c\ube34\\U0004fa65\ube1f\\U000da963\ube4e\ube8a\ube98\ubdef\ube78\ubdaa\\U000bf655\ube03\ube87\ube7e\ubdcd\ubdd9\ube0a\ubdd4\ube59\ube2d\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([48549, 1000443])),\n+                \"min_size\": 12,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.496603267453139},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5689410029757306},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud81a\udcb1\ud81a\udd30\ud81a\udd14\\U0008c89c\ud81a\udc6c\\U00054f8b\ud81a\udc98\\U0001e8df\\U00072601\ud81a\udcf5\ud871\ude9b\\U000750c8\ud81a\udcc6\\U00035981\ud81a\udcec\\U0008b195\ud81a\udcad\ud81a\udcb5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([92254, 624734, 632257, 737815, 1114110]),\n+                ),\n+                \"min_size\": 10,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2237,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -37,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.0071357880314247e308,\n+            constraints={\n+                \"min_value\": -2.9770374239890864e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 9.40831793826214e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.4055934020837201},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"{\\xd9cR\\xd4\\xca\\xde\\x85\\x19q\\x83]\\xf4\\xce\\xb8\\xce\\xb7^c\\xcb\\xfb\\x18\\xb6\\xbe\\xdf#\\xccc\\x1ah'oyr\\xbc\\x86\\xd7\\xebX\\x9d\\xfb\\x16\\x15\\xfc\\\\\\xf7^.\\xea)\\x17\\x95\\xae\\x06i\\xf9\\xe9\\xc0'X\\x9c\\xb1m\\x11b\\xba/\\xde/\\xccMv\\xd8\\x18\\xd3\\x11\\xcb \\xcdl\\x13~\\xe5+>\\xc5\\xa8\\xf1\\\"O&4Wz\\xe5\\x07$\\xbf$\\xd0\\x8a\\x01U\\xa0e\\x117\\xc1V\\xdf\\x9c\\xa7\\x04F\\xd1i\\x87\\x81G\\xcb@\\xfb5l9\\x13\\xeb@\\x10\\xc8\\xfd\\x1c\\xfe\\xb9\\x01\\x84l\\x9b\\xf8\\xa1\\xddEc\\xe62\\xfb\\x96\\x90t1Ni;,U\\x19\\xf2\\xf2\\xbaT\\xcdT\\x8fHK~\\xb0\\t\\xdcs\\xf0J\\xb1\\x17\\xf8\\xc2\\xeb\\x861r\",\n+            constraints={\"min_size\": 41, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8686390939207613},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8769549981936553},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6343088016228019},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u7432\u73d2\u7352\u73eb\u7418\\U0005f087\u7ff1\u73e2\u741f\u73a9\\U00013d8d\u736b\u738c\u73b4\u741f\u73f4\u743e\\U000838fb\u7390\u734a\u7349\u7429\u7345\u735c\u73c1\u742a\u73d6\\U00088d66\\U0005e2ab\u73e2\u7362\u73f3\u7432\\U001022de\u7407\u73da\u7377\u7362\u73e3\u73aa\u73fc\u73d8\u7428\u73c1\u7359\u7395\u7358\u736c\u7419\u7411\u73cf\u73b0\u7438\u739d\u735e\\U00072760\u73fa\u7390\u737b\u7367\u73de\u737b\\U00062326\u7412\u7432\u7357\u73e2\u7393\u736b\u7387\u7412\u735b\\U0005e6c6\\U0007840a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            29505,\n+                            85611,\n+                            375261,\n+                            426508,\n+                            467827,\n+                            626341,\n+                            724108,\n+                            741422,\n+                            762834,\n+                            790618,\n+                            1034880,\n+                            1062740,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 47,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe2\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xb2s\\xfd~\\xf2\\x0ei%\\xe4\\xaa\\xd6\\xc6\\xf6\\x10O+\\x13\\x80\\xc0l\\xe6=\\xd8\\xfc\\x9cIF5\\x02\\xba\\xa0\\x94oCwA\\xe4&\\x05\\x92M\\x81\\xc5dc\\xa3\\xb1GB\\xcb\\xa0\\x94 \\xe7\\xf7\\xa3\\x92\\x0c\\x07\\xad\\x9c1\\xec\\xf6$r}a\\x8e\\xf7^f\\xdeM\\xa5\",\n+            constraints={\"min_size\": 42, \"max_size\": 142},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.7976931348623157e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9007199254740992.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003338d\ufed1\\uff00\\U0004112b\ufeb8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [65203, 65535, 67277, 484032, 550583, 650667, 774009],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ufbac\ufb54\ufb91\\ufaea\\ufadc\ufb3c\ufb24\\U00034632\ufb00\ufac9\ufb7f\\ufb19\\U0001c467\ufb9d\ud861\uddf6\\U0003aa8a\ufb27\ufb16\ud821\ude09\ufb72\\U0003ae8b\ud85d\uddb0\\U00034147\\ufaec\ufb7f\ufbad\ufb1d\ufbb9\ufb26\\U0003c607\ufabe\ud823\udc40\ufba6\ud820\udd02\ud849\udfb7\\ufb0d\\ufae8\\U00034cd4\ufb4d\ufb85\ufad7\ufb54\ufad7\ufb8c\\U0001a42c\ufb03\ufac4\\U0003b59c\\ufb3f\ud840\ude48\\ufaf4\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([64186, 253447, 904696]),\n+                ),\n+                \"min_size\": 49,\n+                \"max_size\": 149,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 6.103515625e-05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-67,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.5,\n+            constraints={\n+                \"min_value\": -6.771655682380548e-230,\n+                \"max_value\": 0.5,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.022229226322644683,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-19,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 42,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([24728, 137872, 520845])),\n+                \"min_size\": 0,\n+                \"max_size\": 74,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=3254,\n+            constraints={\n+                \"min_value\": -8516,\n+                \"max_value\": 27265,\n+                \"shrink_towards\": -1_755_210_771,\n+                \"weights\": {1646: 0.2516133201122251},\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=526,\n+            constraints={\n+                \"min_value\": 512,\n+                \"max_value\": None,\n+                \"shrink_towards\": -27,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [51514, 117792, 178564, 383021, 387515, 431801, 445794],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\")\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0007bc04\\U0007bc14\\U0007bc2a\\U0007bbcb\\U0007bb5d\\U0007bb8d\\U0007bc2d\\U000a98c7\\U0007bbe1\\U0007bb8b\\U0007bbe6\\U000847c2\\U0007bc14\\U0007bc41\\U0007bb66\\U0007d13e\\U0007bc40\\U0007bbbf\\U0007bc33\\U000d49f3\\U0007bbaf\\U0007bb82\\U0007bbb9\\U0007bbac\\U0007bb9a\\U0007bb89\\U0007bb8c\\U0007bb5e\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([506715, 960948])),\n+                \"min_size\": 26,\n+                \"max_size\": 126,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005fc85\\U0005f5af\\U0005f629\\U0005f59d\\U0005f630\\U000632d7\\U00067b55\\U000647af\\U0005f674\\U0005f5db\\U0005f5a6\\U0005f5f9\\U00068fde\\U0005f655\\U0005f659\\U0005f58e\\U0005f5ce\\U0005f5dc\\U0005f5f4\\U0005f5d2\\U00063fa2\\U0005f5ef\\U0005f5fa\\U0005f645\\U0005f660\\U0005f590\\U00066431\\U0005f5a3\\U0005f5e0\\U00063566\\U00066cfa\\U0005f583\\U0005f5d4\\U0005f66b\\U0005f59b\\U0005f671\\U0005f670\\U0005f58b\\U0005f67c\\U0005f669\\U0005f5b9\\U0005f616\\U0005f669\\U00062c97\\U0005f66f\\U00061afc\\U0005f5d3\\U0005f602\\U0006a5ae\\U0005f64c\\U0005f65f\\U0005f5f4\\U0005f592\\U00060872\\U0005f5d4\\U0005f590\\U000670be\\U0005f626\\U0005f5f0\\U00065344\\U0005f5b0\\U0005f628\\U0005f580\\U0005f66a\\U00067522\\U0005f63f\\U0005f5c4\\U0005f639\\U0005f66e\\U0005f669\\U0005f5b1\\U0005f5c9\\U0005f603\\U000629e2\\U0005f59c\\U00068eeb\\U00061ea3\\U0005f5aa\\U0005f63a\\U0005f5b4\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([390525, 436644, 796328]),\n+                ),\n+                \"min_size\": 18,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.34780618002363234},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x89\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.573196197974186e16,\n+            constraints={\n+                \"min_value\": 1.3048131805623636e16,\n+                \"max_value\": 1.225757749840434e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5e-324,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8806290534456662},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\uad02\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            44163,\n+                            193382,\n+                            407381,\n+                            638482,\n+                            839471,\n+                            988551,\n+                            1057088,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.5451409474905392e38,\n+            constraints={\n+                \"min_value\": 4.169219473547763e16,\n+                \"max_value\": 3.402823466e38,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.5451409474905392e38,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8669468235236899},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=420562803830905.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 4.5923842641553304e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.11446312268440798,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.987159675834808e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 2.8715714230156176e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.374632345993682e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-11790,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-95,\n+            constraints={\n+                \"min_value\": -13801,\n+                \"max_value\": None,\n+                \"shrink_towards\": 7,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"r\\xe9\\xd55\\x15M\\x8co\\xa2\\xbc\\x92\\x18J\\xfb\\xeb\\\\0\\xf7\\xb4\\xd4\\xfc\\xad\\xa1c&g\\xe0\\xd0]p32F\\x16qF$\\x8d}5\\xf6\\xd0.\\x17\\xf7\\x1dL\\xb2\\x1d\\xfb\\xcd\\xd0\\x1ck\\x9e\\xb1\\x16\\xb8%Yq\\xc6}\\xad\\x95\\xd0\\xd09\",\n+            constraints={\"min_size\": 32, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.991673201904493e289,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa9[\\x8c\\x87\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"hypofuzz.test_keys\",\n+            constraints={\"min_size\": 8, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1000,\n+            constraints={\n+                \"min_value\": -13,\n+                \"max_value\": None,\n+                \"shrink_towards\": 6_261_247_228_753_794_713,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.766705814502439},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u35a8\u35ea\u35d8\u35d7\u3508\\U0004094d\u351f\u35d0\u355b\u356c\u3526\u3500\ud858\udfd0\u35b3\\U00064db7\\U0004361a\u353f\u35dd\u35be\\U000f3fbc\u3523\u352d\u35e2\u35d6\u3514\u3507\\U000f533f\u35d9\u35e2\u353e\u3570\u354f\u3552\u35ee\ud84b\udcf6\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([13567, 838911, 926601, 1114111]),\n+                ),\n+                \"min_size\": 27,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5093977648766576},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-28304,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 8896,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"d\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9d[+\\x8d\\xb6\\xa9\\x9b.bJ\\x9em\\x90\\x94\\x0b\\xb9\\x87\\x8b\\x9e\\xbf\\x85\\xe2\\xe1/`\\x82\\xcf/q\\xd6\\x87}\\xa1\\x11\\x17`\\x82\\x9ae\\xce5<n\\x9d\\xabD\\xa3\\xa3r\\xfd\\xae>\\x99\\x8a\\x88^ey,\\xc7\\xe1\\xb9\\xaf,r(j\\x99:=&\\xc6jDjnL\\xaew\\xc8v5:\\xf0\\xca\\xab\\xf7\\xae\\x01h\\xa6\\xf1\\xb4\\x12y(\\xc7/\\x0f\\xab$\\xb5{\\x13Wwt\\xcb\\x02\\xfa\\x8e\\xff\\xf4\\x17\\xc1q\\x81\\x94x\\x19\\xe0/\\x8d\\xca\",\n+            constraints={\"min_size\": 24, \"max_size\": 124},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd3\\x131\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x94Vp^|&K\\xea\\xeb\\x077\\x8d\\xfa8\\x0f\\x95,^\\x87\\xcf#8\\x9dYl\\xbaqC\\xbc\\xac\\x05\\xbb \\x80\\xa6\\xf1[c\\xfc\\x8b\\x96%D\\x16\\xf9B\\xcb\\x07\\xe8\\x07\\xd8\\xa4\\x0e\\xaa\\x0c\\xc6\\x0eo\\xee\\xef\\xdb\\x98\",\n+            constraints={\"min_size\": 47, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-11215,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 8,\n+                \"shrink_towards\": 20762,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            158366,\n+                            284061,\n+                            343952,\n+                            358879,\n+                            376925,\n+                            451400,\n+                            744029,\n+                            947919,\n+                            1048743,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7515,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 9999,\n+                \"shrink_towards\": -26126,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0207\u0298\u02c5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([512, 57693, 487167, 527591]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\uc8b5\uc807\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [51147, 65436, 156130, 222175, 364704, 524047, 975813],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 59,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-28,\n+            constraints={\n+                \"min_value\": -51,\n+                \"max_value\": 20,\n+                \"shrink_towards\": -32118,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5512740698179667},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-7.84026803188812e38,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.401298464324817e-45,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000c342d\\U000c344b\\U000c3456\\U000c33c6\\U000c3414\\U000c346e\\U000c3444\\U000c341f\\U000e26ae\\U000c346d\\U000c33a8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([799632, 1048689, 1109576]),\n+                ),\n+                \"min_size\": 5,\n+                \"max_size\": 105,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc2\\xb4\\x8b\\x83\\xe3\\x8ax\\x1ch\\xd0)\\xf7\\xd8\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.626676595954608e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.12212364708249915},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.corpus\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=18139,\n+            constraints={\n+                \"min_value\": -4_282_444_591_732_472_730_789_125_215_135_194_287,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00042861\\U00042836\\U00042850\\U0004288e\\U00042871\\U00042857\\U0005fdfa\\U00042864\\U000428b6\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([272315, 490321])),\n+                \"min_size\": 0,\n+                \"max_size\": 99,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.203944181150567e308,\n+            constraints={\n+                \"min_value\": 5.827672646724585e-155,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.758324244000964e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3910934655909474},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\uf95e\uf98c\uf9a1\uf9c8\uf9ac\ufa15\uf967\\U000149d8\ud844\udf88\uf9d1\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([63796, 161336, 668493, 679531]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=45,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x98\\x18em\\x87\\x91\\x0b\\xb0\\xfb:^\\xd2\\xe2\\xf4\\x95 \\xd2\\xcd]\\xc2C\\xa6\\x92b\\x1c\\xa3\\xeb\\x1f\\xc4W\\xbd\\xeb\\xcd`\\x83H|\\x83\\xcb\\xb1\\xef\\xc9\\xef\",\n+            constraints={\"min_size\": 16, \"max_size\": 116},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.164756185251548e307,\n+            constraints={\n+                \"min_value\": 0.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000fae5c\\U000fae8a\\U000fae2d\\U000fae7f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1027574, 1114110]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7744779280244594},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1995359763014277.0,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 7.670503721378557e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.1125369292536007e-308},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [8192, 53297, 65535, 176989, 255204, 657429, 841189, 936468],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x8b5\\x99\\x8a;\\x11M\\xb4\\xe1\\xfe\\xea\\x1fI\\x8e\\xff,l9\\xf5\\x0b\\xcep\\xd3\\xab~\\x86\\x9c\\xb4Rmv\\x8c\\x8e\\x1f\\x13,9\\xfc\\xb0\\xb8X\\x02\\xb1\\x05\\xc5\\x92{\\x98t\\x89\\xc1\\x07\\xa0\\x808\\x96\\xc0\\xe8\\x92\\xe0\\xa8\\xa9\\xa3\\xf4\\x92\"\\xb1\\r.\\x8fM\\xa9$\\x98D\\xed\\xe3\\x96\\xbfM\\x9cZ\\x89\\xc8\\xaau\\x16z\\x99\\xdf\\xa3@\\x1f\\x87\\x93\\x0chq\\x16',\n+            constraints={\"min_size\": 43, \"max_size\": 117},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=16,\n+            constraints={\n+                \"min_value\": 7,\n+                \"max_value\": 507,\n+                \"shrink_towards\": 15554,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004b3ae\\U0004b3e1\\U0004b460\\U000ee76e\\U0004b454\\U0004b46a\\U0004b43d\\U0004b3ff\\U000aba2a\\U0004b430\\U0004b3f8\\U0004b434\\U0004b485\\U0004b39e\\U0004b3a6\\U0004b3ee\\U0004b3fc\\U0004b414\\U0004b469\\U000eb6ee\\U0004b3e3\\U0004b3bf\\U0004b459\\U0004b419\\U0004b39e\\U0004b3fb\\U00058835\\U0004b3bb\\U0004b484\\U00054cd6\\U0004b39a\\U000567c4\\U0004b445\\U0004b40e\\U0009b2e2\\U0004b478\\U0004b3fa\\U0004b3f5\\U0004b395\\U0004b3bd\\U0004b44b\\U00057070\\U0004b410\\U0004b3bb\\U0004b3ea\\U0004b39a\\U0004b3a9\\U0004b416\\U0004b3b3\\U0004b399\\U000c5e4d\\U0004b47d\\U0004b41e\\U0004b402\\U0004b440\\U0004b3d3\\U0004b3ee\\U0004b447\\U0004b39a\\U0004b454\\U0009a847\\U0004b3a6\\U0004b472\\U0004b41e\\U0004b39f\\U0004b3a4\\U000eafa3\\U0004b3e3\\U0004b3c5\\U0004b489\\U0004b401\\U0004b426\\U0004b45e\\U0004b430\\U0004b3a9\\U0004b44f\\U000a7205\\U0004b43c\\U0004b39b\\U0004b411\\U0004b484\\U0004b3ea\\U0004b39a\\U0004b417\\U0004b3e8\\U0004b45c\\U0007b9f9\\U00084dc7\\U0005363d\\U0004b3a4\\U0004b47f\\U0004b3a3\\U0004b411\\U0004b435\\U0004bd30\\U0004b45f\\U0004b46a\\U00093f96\\U0004b3c4\\U0004b3ec\\U0004b45f\\U0004b437\\U0004b3e7\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([308110, 985841])),\n+                \"min_size\": 27,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud802\udddd\ud802\udd8d\ud802\udd37\\U0001096c\ud802\uddd4\ud802\uddc2\ud802\udd82\ud802\udd22\ud802\uddff\ud802\udda5\ud802\udde7\ud802\ude03\\U000d8de1\ud866\udd3b\ud802\udd8c\\U00010965\\U00010964\ud802\udd9b\\U00010956\\U000e9db9\ud802\udd8c\ud802\ude1b\\U000f3770\ud85a\ude80\ud802\uddef\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            67868,\n+                            187228,\n+                            617665,\n+                            645537,\n+                            787215,\n+                            788957,\n+                            837242,\n+                            975860,\n+                            991553,\n+                            1029848,\n+                            1044072,\n+                            1048419,\n+                            1079956,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 2,\n+                \"max_size\": 102,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.3079069768233765},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.6207204969433946e173,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".worker_identity.\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc9\\x8d\\xdf\",\n+            constraints={\"min_size\": 3, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.491705405474959e-168,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.2368379409121879e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.2820945028416036e308,\n+            constraints={\n+                \"min_value\": 6.050542742642792e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.4636741339809062},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.225073858507203e-309},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"A<\\x9d\\xdbS\\xf0%\\x90JC\\xab|\\x18\\xa2\\xba\\xd0\\xecb)|1P\\xbex\\xe3\\xbf\\xf3\\x88L\\xddw\\xe8(n\\x01\\x0b\\x0c7\\xad\\xbd\\xf7\\x92\\xab\\xdf>r\\xc7\\xc6\\n\\x07 +\\x0c\\xfa+\\x9d\\xf5\\x8b\\xcb!\\x07\\xcbu+\\xdd\",\n+            constraints={\"min_size\": 44, \"max_size\": 144},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00091b75\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([596680, 865486, 1024086]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\u20c2\u98fc\u2070\\U000452ab\u207c\\u2064\\u2065\\u202e\u2074\u205e\\U0005299a\u2081\u2014\\U0005d66f\\u2004\u20ba\u2017\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            8192,\n+                            32323,\n+                            37441,\n+                            100126,\n+                            181279,\n+                            288677,\n+                            336794,\n+                            382638,\n+                            1078700,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=121,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -23766,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0008eaf0\\U0008ea91\\U0008eb15\\U000b1903\\U0008eb09\\U000ed61d\\U0008eaf7\\U0008eadb\\U0008ea38\\U0008eaa1\\U000dd4c6\\U0008eaed\\U0008ea5e\\U0008ea5b\\U0008ea7e\\U0008eae1\\U0008ea49\\U0008ea55\\U000e5cdc\\U000cbfc2\\U0008ea33\\U000dab76\\U0008f6ec\\U0008eaa9\\U0008ea71\\U000dda2f\\U0008ea7a\\U0008ea66\\U0008ea58\\U0008eaf4\\U0008eb1b\\U0008ea73\\U0008ea3a\\U0008ea8f\\U0008ea93\\U0008ea95\\U0008ea93\\U0008ea9c\\U0008eac5\\U0008eb02\\U0008eae2\\U000b6250\\U0008ea91\\U0008eadd\\U0008eadc\\U0008eb1c\\U0008ea60\\U0008ea56\\U0008ea71\\U0008ea71\\U0008ea8d\\U0008ea91\\U0008ea8b\\U0008eada\\U0008ea26\\U0008ea28\\U0008ea23\\U0008eabc\\U0008ea37\\U000a8421\\U0008eadd\\U000a050d\\U000c7f03\\U0008ea63\\U0008ea91\\U0008eb08\\U0008eaa8\\U0008ea51\\U0008eab3\\U0008ead2\\U0008eaca\\U0008eacb\\U0008eaf6\\U0008ead8\\U0008ea71\\U0008ea25\\U0008ead0\\U0008eadf\\U0008eb1b\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([584223, 986359])),\n+                \"min_size\": 22,\n+                \"max_size\": 122,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6437870448670241},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u78f6\u78ca\u9898\\U000134a6\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([30904, 211856])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x93\\x0b\\xe8\\x83\\xe2#`\\x9e\\x07\\x19~\\x17#\\xec\\xe0C\\r\\xa2?Nos\\xb5\\xc5\\xfb\\x8ev\",\n+            constraints={\"min_size\": 18, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00099e09\\U00041256\\U000412be\\U00041232\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([266754, 802161, 1076009]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-11,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 19210,\n+                \"shrink_towards\": 1_560_746_465,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6522600247402522},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x96\\x81\\xd8\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-5683,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -9,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.3106738344507765e293,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.625841910821784e285,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-22605,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -22491,\n+                \"shrink_towards\": -16527,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.02367188577552671},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\ue0ad\\ue00b\\ue023\\ue016\\udfb2\\ue03c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([57263, 239736, 298183, 480288, 514441, 1114110]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 68,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.754884517497399},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x16TlR\\xf7\\xdd\\xc4\\xbd\\xb8\\x15\\xd0\\xbe\\x84\\x00\\xedn\\x9c\\xc1~\\xce\\xe7>\\x0e\\xe1\\xb5&\\xc9\\xf3I\\xd9\\x00\\xbb\\x17\\x06\\xa2%]\\xba\\xa4\\xb2N.\\x93\\xd8\\xa1\\xe0o\\xc1Bg\\x0e4S\\x02\\xf9;[y9\\xc8o<Zf`$\\xbe\\xfa\\xcf\\x1c\",\n+            constraints={\"min_size\": 25, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xcd!\\xacU^\\xd0\\x12\\xe1(\\xed\\xcf:\\xe9\\xb8\\xa1\\xe1\\xe9\\xd7h\\xd2\\xd8\\x9a%\\x02\\x86\\x0c\\xec\\x12\\x1b\\xa5\\x01\\xb8\\xd2i\",\n+            constraints={\"min_size\": 30, \"max_size\": 130},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.44158880371860787},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=15181,\n+            constraints={\n+                \"min_value\": -6483,\n+                \"max_value\": 28625,\n+                \"shrink_towards\": -106,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 8.477582723172437e-215},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9748422259081664},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-6_232_036_477_664_745_509_295_564_947_724_012_068,\n+            constraints={\n+                \"min_value\": -6_232_036_477_664_745_509_295_564_947_724_069_387,\n+                \"max_value\": -3840,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 2.0269761255801426e-112,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.1002170926153302e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 4.495843334615473e-190,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 9.95446550325844e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u02cc\u02b7\\U000e7095\u0299\\U000aca3a\\U00107005\u029c\u0288\u021a\u02c0\u02dd\u0288\\U000721b0\u0257\u022d\\U000a3510\\U00064d4d\u02ec\\U0003a083\u02dc\u027c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            512,\n+                            53504,\n+                            131991,\n+                            313502,\n+                            389891,\n+                            417334,\n+                            465000,\n+                            513516,\n+                            528065,\n+                            709607,\n+                            778707,\n+                            949094,\n+                            999705,\n+                            1009941,\n+                            1041269,\n+                            1082314,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.1754943508222875e-38},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.718264416651533e308,\n+            constraints={\n+                \"min_value\": 577780714.1745338,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.348849937842735e157,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.4691376531072733e126,\n+            constraints={\n+                \"min_value\": -6.040306717194593e-308,\n+                \"max_value\": 9.126749986856081e126,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.4691376531072733e126,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud862\ude2e\ud862\ude2f\ud862\udeaf\ud862\ude7d\ud862\udebd\ud862\ude8c\ud862\ude53\ud862\udee1\ud862\ude2c\ud862\ude05\\U000d15cb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([166388, 331596, 658314, 865015]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 1.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7415493959112107e308,\n+            constraints={\n+                \"min_value\": 8.675429741077096e223,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7415493959112107e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.0400612164374808e308,\n+            constraints={\n+                \"min_value\": 5.356384718126978e16,\n+                \"max_value\": 1.7976931348623157e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.0400612164374808e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9.471134799420385e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.18662391420088e307,\n+            constraints={\n+                \"min_value\": -2.0318208841718954e39,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.6071760290223976e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0006ea3d\\U0006eb2a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([453176, 681051, 885067, 927037]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0006fda4\\U00075d00\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([458034, 488682])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=32518,\n+            constraints={\n+                \"min_value\": -126,\n+                \"max_value\": None,\n+                \"shrink_towards\": -3_838_890_805_742_256_006,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x81\\xd3\\xcaB\\xe9x\\x19\\x8f\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\ti\\x1e\\x15\\xf3\\xee\\x88sZ\"\\xa1t\\x01\\xedm',\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9999999999999999},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=300,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 16152,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x90&e}\\xc4\\xddr\\x82]K0S\\x8b\\xe2Sf\\xe8\\xbf_\\\\Td@\\xcc\\x820\\xecb\\xcaL\\xc1\\x1d\\xeen\\x03\\xdad\\xa9\\x9c\\xe2,\\x96\\x97\\x07\\xb0?\\x8d\\xdfp\\x82\\xe0\",\n+            constraints={\"min_size\": 23, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1e-05,\n+            constraints={\n+                \"min_value\": -1e-05,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.880657702669955e-06,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xea,f\",\n+            constraints={\"min_size\": 3, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=120,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 15682,\n+                \"shrink_towards\": -30579,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.9977402429965384e307,\n+            constraints={\n+                \"min_value\": 1.3473342384023928e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.9977402429965384e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u27cf\u6d76\\U0002fe25\u273e\u2799\u279f\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([9999, 203526])),\n+                \"min_size\": 0,\n+                \"max_size\": 39,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1dB\\x91\\x94\\x89\\tE\\xdex\\x11\\xfbx\\xd6dS\\xa9\\xa0\\x03j\\xae\\xab\\x9f7\",\n+            constraints={\"min_size\": 11, \"max_size\": 111},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=28655,\n+            constraints={\n+                \"min_value\": -17098,\n+                \"max_value\": None,\n+                \"shrink_towards\": -27623,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.5142275096933224e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004f3a4\\U0001a90f\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([108618, 686488])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=512,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 15627,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"3\\x1eZ\\xacX[\\x8e1\\x84\\xbb\\xa1\\x8bK\\xfe}\\xe1\\xac'\\xb3\\xc5\\xbc ig\\xb8n\\xd2\\xc8\\xa4-\\xbe\\x10\\xb7\\x87\\x161\\x0c\\xe1\\xae\\xe4y\\x06\\x84\\xcc\\x18\\x9e\\xa5\\xaejG-\\xb4\\xc5w\\xef\\x051m|\\x86~\\x90\\xc5\\x80\\x10\\x01\\xc7\\xce\\xc6+\\xad\\xfd\\xe6\",\n+            constraints={\"min_size\": 21, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9f\\x99\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00055130\u027c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            512,\n+                            8192,\n+                            37389,\n+                            67827,\n+                            286399,\n+                            348900,\n+                            412397,\n+                            413520,\n+                            431526,\n+                            452565,\n+                            475025,\n+                            666636,\n+                            673586,\n+                            814141,\n+                            905843,\n+                            1042107,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-67,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 16480,\n+                \"shrink_towards\": -24289,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"~\\xb7?\\x15e]\\x93}\\x80\\xdec\\xa6!#\\xf8\\x07\\xa5\\x0f!\",\n+            constraints={\"min_size\": 18, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000cb3bc\\U000cb3a6\\U000cb3a7\\U000dd103\\U000cb3ba\\U000cb375\\U000cb363\\U000e54b3\\U000cb3c7\\U000cb3ac\\U000cb38d\\U000cb2ea\\U000cb37c\\U000cb352\\U000cb393\\U000cb3ae\\U000cb350\\U000e2be6\\U000cb3ba\\U000d204a\\U000cb333\\U000e76ef\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([832207, 1023387, 1103505]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 51,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001aee9\\U0001aeb1\\U0001aeee\\U0001ae69\\U0001af25\\U0001af36\\U0001af43\\U0001af04\\U0006df1a\\U0001ae98\\U000d62d6\\U000e378f\\U0001ae9c\\U0001aef6\\U0001af4b\\U0001aedd\\U0001af1e\\U0001ae76\\U0001af60\\U0001fccb\\U0001af1a\\U0001af08\\U0001af2d\\U0001ae7a\\U0001af34\\U000d4220\\U0001aecc\\U0001af20\\U0001aed0\\U0001aebe\ud84b\udd5c\\U0001ae6b\\U0001af57\\U0001ae72\\U0005f5f1\\U0001ae71\\U000353de\\U0001ae86\\U0006df62\\U0001af5f\\U0001ae90\ud858\uddfb\\U0001ae74\\U0001af02\\U0001af21\\U00032e2d\\U0001aee2\\U0001af2f\\U0001aef3\\U0001ae6a\\U0001ae6d\\U0001aedd\\U0001aebf\\U0001aeae\\U0001aef7\\U0001ae71\\U0001aed0\\U000d70dc\\U0001aea1\\U000d93ce\\U000e1c82\\U0001aed3\\U0001aee5\\U0001af4a\\U0001af4b\\U0001aea5\\U0001ae77\\U0001ae9e\\U0001af37\ud886\udea5\\U000dae89\\U0001af18\\U0001aef6\\U0001aec7\\U0001aea8\\U0004b275\\U0001af06\\U0001af34\\U0001aea5\\U0001aec3\\U0001ae85\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            110182,\n+                            322371,\n+                            378272,\n+                            406796,\n+                            416213,\n+                            625476,\n+                            864990,\n+                            956489,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 36,\n+                \"max_size\": 136,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-37,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -11,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1028,\n+            constraints={\n+                \"min_value\": -28830,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5897019785016432},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.447172335766285e42,\n+            constraints={\n+                \"min_value\": -8.968756977976468e-183,\n+                \"max_value\": 3.3634852959496737e42,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.2812049624783858e308,\n+            constraints={\n+                \"min_value\": -3.813763623683643e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.402823466e38,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.5,\n+            constraints={\n+                \"min_value\": 0.5,\n+                \"max_value\": 0.5,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.30348444690798243,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=88,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 95,\n+                \"shrink_towards\": 123,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=249185561,\n+            constraints={\n+                \"min_value\": 249185468,\n+                \"max_value\": 249185572,\n+                \"shrink_towards\": -6962,\n+                \"weights\": {\n+                    249185545: 0.06483439259889918,\n+                    249185543: 0.23214582167006,\n+                    249185547: 0.18908895194119238,\n+                    249185561: 0.08180970039007689,\n+                    249185516: 0.08865304584895065,\n+                    249185511: 0.019475280263097226,\n+                    249185565: 0.12386016979353372,\n+                    249185539: 0.019372936320813227,\n+                    249185512: 0.09139357309175862,\n+                    249185481: 0.02545725687617577,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.9142840860290093},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6646785733541197},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"g\\xaf\\xfc\\xe9\\xcd\\xb2\\xa7\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.276254185377703e-221,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.225073858507203e-309,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.07440349441504003},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00049216\\U0007b5c9\\U00049216\\U0004922c\\U0004923e\\U000492e2\\U00056fbe\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([299525, 541834])),\n+                \"min_size\": 0,\n+                \"max_size\": 61,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x85\\U0006caad\u00bf\\U000602b4\u00d3\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            94439,\n+                            129992,\n+                            218500,\n+                            320308,\n+                            465600,\n+                            468938,\n+                            491880,\n+                            531140,\n+                            557794,\n+                            577604,\n+                            595768,\n+                            727322,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud844\udc72\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([135262, 236353, 265805, 772408]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.20646639757251345},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=119,\n+            constraints={\n+                \"min_value\": 100,\n+                \"max_value\": 119,\n+                \"shrink_towards\": 0,\n+                \"weights\": {119: 0.242735604973238},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\n\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            512,\n+                            107083,\n+                            195436,\n+                            197955,\n+                            205972,\n+                            224463,\n+                            228846,\n+                            237539,\n+                            245063,\n+                            295108,\n+                            312047,\n+                            348435,\n+                            390678,\n+                            527358,\n+                            582617,\n+                            730410,\n+                            763349,\n+                            819827,\n+                            864550,\n+                            1019327,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.877671816513395e306,\n+            constraints={\n+                \"min_value\": 3.3373519073209874e236,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.7416172039703965e-137,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.960734785689094e305,\n+            constraints={\n+                \"min_value\": 9.77978222397988e186,\n+                \"max_value\": 1.223058333060886e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.99999,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6841971177752834},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005b6c7\\U00088ea6\u6a9e\u6aa5\u6a6e\u6aab\\U00095134\\U00079f25\\U00055283\u6a36\u6a34\\U00093d68\u69eb\u6a88\u69ea\\ue799\\U0006f3ed\u6abf\u69f3\u6a50\u6a9f\\U0001c7e5\u6a67\u6a55\\U000f6a09\u6aba\\U001020e1\\U000e0703\u6a55\u6aa1\u69eb\u6a8c\\U000ea973\u6a0a\\U0008ddf8\u6a34\\U00094ca1\u6a47\u6aad\\U00079946\\U000fa429\u6ac9\u6a2e\u6a79\\U0009527c\u6a1e\u69ea\u69ef\u6ab8\u6ac2\u6a77\u6a4b\u69e4\\U0007a864\u6a0f\\U00065a38\u69cc\u6a86\u6a5f\u6a90\u69cf\u6a1d\u6a72\u6a35\u6a66\\U000544e2\\U0008d79d\u6aab\\U000764ce\\U0001fc66\u6ab6\u69d2\u6a4c\\U0006238a\u6a03\u69fb\u6a3b\u6a69\u69e6\\U0007cdd3\u69fd\u6a36\\U000e86ac\u6a09\u6ab9\ud802\uddf1\u6ac0\u6a79\u6a33\u6a51\u6a51\u6a4e\\U00076f02\u6a89\u6a27\u69d4\u69ce\\U00061f6a\u6a1c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([27082, 155459, 327571, 612626, 911171, 1075882]),\n+                ),\n+                \"min_size\": 49,\n+                \"max_size\": 109,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud861\uded0\ud861\ude81\ud861\udead\ud861\ude60\ud861\ude95\\U0007b4b7\ud861\udefa\ud861\udf01\ud861\ude4a\ud861\uded2\ud861\udeb0\ud861\ude30\\U0008c9c0\\U000c5ee4\ud861\ude60\\U000884f9\ud861\udec2\ud861\ude6b\ud861\ude44\\U000a42d4\\U000a2df5\ud861\ude84\ud861\ude6b\\U000883e5\\U000dbd73\ud861\udefd\ud861\ude47\ud861\udeea\ud861\ude5e\ud861\udece\ud861\ude35\ud861\udec7\\U00091e76\ud861\udec5\ud861\ude7a\ud861\udf2a\ud861\udedf\ud861\udebf\ud861\udedd\\U000dd9d7\ud861\ude43\ud861\udf09\ud861\ude9b\ud861\udeb0\ud86b\ude0a\ud861\ude67\\U0003c65c\ud861\ude57\\U000dec65\ud861\udeff\ud861\uded8\ud861\uded7\\U0004694a\ud861\udee8\\U000dcd98\\U0007d1aa\ud861\udf2d\\U000426fa\ud861\ude6c\ud861\ude7a\ud861\udefe\ud861\udf1d\ud861\ude87\ud861\ude7a\ud861\udf13\ud861\udeee\ud861\udf25\ud861\udeb0\\U0006e613\ud861\udf20\ud861\udeb3\\U000cbc03\ud861\udedb\ud861\ude81\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([165424, 980299])),\n+                \"min_size\": 23,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=407168076,\n+            constraints={\n+                \"min_value\": 407168068,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([886694, 915402, 1114110])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.971079885924725e150,\n+            constraints={\n+                \"min_value\": 2.9864500941795526e-71,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.2250738585e-313,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.3747274211382548e-175},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.743778299074884e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"I\\x1fM\",\n+            constraints={\"min_size\": 0, \"max_size\": 94},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00038aa1\\U00038ad6\\U00045b9c\\U00038a53\\U0004d5f9\\U00038a4c\\U00038af1\\U00038a3e\\U0004c2fe\\U000442e9\\U0004dbb7\\U00038ae0\\U00038a0c\\U00038a73\\U00038a15\\U00038af1\\U0003bad0\\U0007093d\\U00038a54\\U00043988\\U00038a3e\\U00038a53\\U00038a75\\U00038aee\\U00038a55\\U00038a71\\U00038ae3\\U00038a20\\U000403af\\U00038a5a\\U00038ade\\U00038a17\\U00038a7b\\U00038add\\U00038a65\\U00038a74\\U00038a52\\U00038a33\\U00038aa5\\U0005342a\\U00038a06\\U00038abd\\U00038a24\\U00038a02\\U00038a3a\\U0004f46e\\U00038a55\\U00038a49\\U0005266e\\U00038a57\\U00038a58\\U00038aca\\U00038aee\\U00038abe\\U00038a4c\\U00038af8\\U00038afe\\U00038a88\\U00038ad8\\U00038a7f\\U00038a21\\U00038ac1\\U00038a45\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([231937, 358023, 431300, 475900, 719531]),\n+                ),\n+                \"min_size\": 41,\n+                \"max_size\": 66,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 3.2726785198347304e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 9.095872593149443e306,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x00\\x87l*m\\x92?\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.0092319041580489e-150},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u5834\u57fe\u57ff\u585e\u581b\u5794\u5849\\U00068551\u581a\u57cc\u5875\\U00076a01\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([22408, 159221, 383371, 757686]),\n+                ),\n+                \"min_size\": 2,\n+                \"max_size\": 102,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6824742726922558e308,\n+            constraints={\n+                \"min_value\": 2.4331490261051044e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.6824742726922558e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.695993315105172e262,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -3.563493188326992e287,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6868341357294715.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 4.806998030043752e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.2102917751786434e297,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=65535,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x13\\x05%\\x13;z\\xdb\",\n+            constraints={\"min_size\": 0, \"max_size\": 57},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".observation\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"{\\xd9cR\\xd4\\xca\\xde\\x85\\x19q\\x83]\\xf4\\xce\\xb8\\xce\\xb7^c\\xcb\\xfb\\x18\\xb6\\xbe\\xdf#\\xccc\\x1ah'oyr\\xbc\\x86\\xd7\\xebX\\x9d\\xfb\\xe7\\x9b\\xf5\\xc5\",\n+            constraints={\"min_size\": 43, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"E\\U000c82e1i\u00ddw\\x91\u00f2\u00d7\u00b8E\\U000c6b84\\x87Cz\\U000b4ff4\u00f5\u00c6\u00d8e\u00da\u00ba\\U0009fbe4b\u00d8\\x00\u00df\\x02`\u00fa*\\U00078b9bc\u00f6\u00b3\u00a3Y\u00ac\\U000a56aa\\U000cd430\\U000ce9b1\u00f4\\x01\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([0, 87954, 233593, 848037, 1011540, 1055710]),\n+                ),\n+                \"min_size\": 42,\n+                \"max_size\": 49,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1,\n+            constraints={\n+                \"min_value\": -21546,\n+                \"max_value\": None,\n+                \"shrink_towards\": -94,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u024e\u021f\u028c\u0231\u0205\u020c\u020b\u0250\u02f4\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [512, 57678, 162909, 663702, 763786, 773495, 985708],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9320113242832588},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.308510139875106e307,\n+            constraints={\n+                \"min_value\": -5.8493947141824264e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0894013743342008e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-94,\n+            constraints={\n+                \"min_value\": -19749,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=65535,\n+            constraints={\n+                \"min_value\": 19269,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.4961966196490627e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-21339,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -63,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.12749496946639e307,\n+            constraints={\n+                \"min_value\": 0.5,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.219370007041908e306,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\")}|\\x08\\x8b\\xce)\\xd4\\x1eX\\xff(\\xcdC\\x0c%\",\n+            constraints={\"min_size\": 8, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=12307,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-28221,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.225073858507203e-309},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8_629_983_169_736_856_120,\n+            constraints={\n+                \"min_value\": 1_918_198_417_956_507_405,\n+                \"max_value\": None,\n+                \"shrink_towards\": 26335,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".secondary\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7152567793241601},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.549304459577797},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud856\udc75\ud855\udffa\\U0003e0d7\ud856\udc75\ud855\udfb7\ud856\udc56\ud856\udc33\ud856\udc6e\\U000a06b3\ud855\udfce\ud856\udc73\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([153472, 769562])),\n+                \"min_size\": 9,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.2639865674070176e16,\n+            constraints={\n+                \"min_value\": -3.7668383231949487e-267,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.5126882871184473e-244,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xd0\\xf0J~\\xb5]f\\xb8\\xde\\x95\\xdef\\xe3i\\x872\\x87\\xdc\\xe2(\\xb3\\x10*\\xb1;\\x12L}N\\x90\\x87+m\\xbf\\xa3yw1\\x10(\\xb0\\xaea\\xe8\\x7f4~\\x15\\xc3;\\xdc:m\\xc1\\xd41\"\\xdf;x\\x10\\x9bX^6\\xb8h\\xbf?6\\xd0\\x89i\\x8b\\xcdW\\xb9p\\x0c8/\\x1a\\x12Xi\\x1b\\x0ee\\xd3\\xb6\\x8e\\ts\\xabt\\xaeM\\x8b}\\xd8)\\xea\\x16\\xb1\\x9ax',\n+            constraints={\"min_size\": 23, \"max_size\": 123},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.650571556749582e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf11\\x9d\\xa1k.j\\xb68\\xb9\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-12390,\n+            constraints={\n+                \"min_value\": -1_163_429_459,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n def test_drawing_prefix_exactly(nodes):\n     # drawing exactly a prefix gives that prefix\n     cd = ConjectureData(\n",
    "cov": "From HEAD Mon Sep 17 00:00:00 2001\nFrom: Hypothesis 6.131.23 <no-reply@hypothesis.works>\nDate: Fri, 23 May 2025 20:35:31\nSubject: [PATCH] Hypothesis: add explicit examples\n\n---\n--- ./tests/test_linearize.py\n+++ ./tests/test_linearize.py\n@@ -151,6 +151,86 @@\n \n \n @given(reports(count_workers=1))\n+@example(\n+    reports=[\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=3.705843173268642e-165,\n+            timestamp=2.0171238918982442e307,\n+            worker_uuid=UUID(\"9dbeccbd-b1ea-4fa7-b59d-fd410062f861\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 118,\n+                Status.INTERESTING: 0,\n+            },\n+            behaviors=28334,\n+            fingerprints=102,\n+            since_new_branch=22827,\n+            phase=Phase.DISTILL,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    reports=[\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=2.2190586012400986e-130,\n+            timestamp=1.7384247278647546e307,\n+            worker_uuid=UUID(\"07158ab7-95f3-4183-9b69-13cd87684f34\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 18750,\n+                Status.INTERESTING: 0,\n+            },\n+            behaviors=44,\n+            fingerprints=2_098_346_482,\n+            since_new_branch=56,\n+            phase=Phase.SHRINK,\n+        ),\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=426041.88651024434,\n+            timestamp=2.3038921775217605e307,\n+            worker_uuid=UUID(\"07158ab7-95f3-4183-9b69-13cd87684f34\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 1_329_801_249,\n+                Status.INTERESTING: 0,\n+            },\n+            behaviors=19386,\n+            fingerprints=3474,\n+            since_new_branch=45,\n+            phase=Phase.REPLAY,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    reports=[\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=403496.8487515734,\n+            timestamp=4.4352635497549713e46,\n+            worker_uuid=UUID(\"29906060-c255-4051-b26c-ed116b14d771\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 6077,\n+                Status.INTERESTING: 0,\n+            },\n+            behaviors=12627,\n+            fingerprints=30692,\n+            since_new_branch=5088,\n+            phase=Phase.REPLAY,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n def test_single_worker(reports):\n     assert len({r.worker_uuid for r in reports}) <= 1\n     # linearizing reports from a single worker just puts them in a sorted order,\n@@ -163,6 +243,28 @@\n \n \n @given(reports(overlap=False))\n+@example(\n+    reports=[\n+        Report(\n+            database_key=b\"database_key_0\",\n+            nodeid=\"nodeid_0\",\n+            elapsed_time=893241.7625013571,\n+            timestamp=9.661842087027152e306,\n+            worker_uuid=UUID(\"695a2421-f910-4255-a65b-f8c9a566bbff\"),\n+            status_counts={\n+                Status.OVERRUN: 0,\n+                Status.INVALID: 0,\n+                Status.VALID: 19068,\n+                Status.INTERESTING: 0,\n+            },\n+            behaviors=127,\n+            fingerprints=12677,\n+            since_new_branch=13139,\n+            phase=Phase.REPLAY,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(reports=[]).via(\"HypoFuzz covering example\")\n def test_non_overlapping_reports(reports):\n     test = _test_for_reports(reports)\n     test._check_invariants()\n--- ./tests/test_provider.py\n+++ ./tests/test_provider.py\n@@ -7,6 +7,32973 @@\n \n \n @given(st.lists(nodes()))\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=19952,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.655976641189358e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf4\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.40012816725712563},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u865c\u8696\u8646\u8621\u0169\u8636\\U00060cbe\\U000fa0e8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            300,\n+                            404,\n+                            34320,\n+                            45360,\n+                            217706,\n+                            310029,\n+                            312020,\n+                            465266,\n+                            768457,\n+                            773948,\n+                            1002289,\n+                            1059968,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 3,\n+                \"max_size\": 103,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"tCR\\xaa\\xf2\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2221,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 7,\n+                \"shrink_towards\": 20806,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-43536,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -22342,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"6\\x1f\\xa2X\\xfd2P\\xcb\\x8bf\\xed7\\xee\\xb1\\r\\x1f\\n\\xbcw\\x88\\xb3x\\x8e\\xa1\\x86m\\xe5{J\\xf4P\\xb9<\\xb8\\xf3OkL\",\n+            constraints={\"min_size\": 38, \"max_size\": 110},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000b97e4\\U000c37fa\u04b4\u04b9\\U000620f2\u0409\u045f\u048c\\U000dc3e4\\U000d2bc4\u04b5\u04fb\u0402\u04c9\u046a\\U0007c453\u0438\u0472\\U000abf1b\u04d9\u04e3\u044c\u04a4\\U0001a963\u0455\u04f6\u042f\u04eb\u0410\\U0005d274\u0411\u041d\u041f\u04d7\u048e\\U000636aa\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1024, 9999, 36186, 171248, 342747, 904950]),\n+                ),\n+                \"min_size\": 32,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"#\\xb3Uo\\xa9g\\xff\\x08\\xb1\\xb9M\\xa3Dr\",\n+            constraints={\"min_size\": 8, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5454498482654767},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000c228c\\udea6\\udebe\\ude56\\udee7\\ude92\\U00093b54\\ude38\\udeb7\\udea5\\U000a9e17\\ude86\\udf00\\ude54\\U000ab0c6\\udee9\\U000915cb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            56875,\n+                            65535,\n+                            248126,\n+                            279784,\n+                            338156,\n+                            365519,\n+                            385635,\n+                            445975,\n+                            579491,\n+                            645266,\n+                            648333,\n+                            829775,\n+                            985987,\n+                            1019257,\n+                            1037227,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.2139060558500352e308,\n+            constraints={\n+                \"min_value\": -1.1116289616404631e-199,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.0845187664334444e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8eD\\xf7\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8189094646127693},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.37947648874251e307,\n+            constraints={\n+                \"min_value\": -7803765123943662.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.4278858786380604e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.2214111776294268},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.154466772770635e16,\n+            constraints={\n+                \"min_value\": -2.0609855864240873e-25,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.175494351e-38,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7793843231441442},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00089dbe\\U00089d28\\U00089de9\\U00089dc5\\U00089d48\\U00089df7\\U000a3af1\\U00089dc8\\U00089dd8\\U00089d75\\U00089df0\\U0008d9ef\\U00089ddf\\U00089d1d\\U000a0093\\U00089d54\\U00089d2a\\U00089de5\\U000a9846\\U00089e14\\U00089dd6\\U00089d6a\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([564506, 743577])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8140061790116859},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.706132735186167e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.99999,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.626873380855378e307,\n+            constraints={\n+                \"min_value\": -1.3755569683476914e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.626873380855378e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.285423977271983e307,\n+            constraints={\n+                \"min_value\": -5.242405603395847e16,\n+                \"max_value\": 1.3065071017445701e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.9386629629778904e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.431803503709003e105,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 7.010611040345778e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004fb94\ud268\ud236\ud211\ud235\ud1fd\ud206\ud1b9\ud214\ud245\ud22b\\U0007711a\ud293\ud1e9\\U000386dd\ud26a\ud1a8\\U0006f9ce\\U000c7c04\ud249\ud1cf\ud20a\ud26b\ud1c3\ud289\ud249\ud21b\ud1d8\ud194\ud197\\U0001a5e2\ud1d1\ud267\ud213\ud1d2\ud276\ud212\ud1b7\ud1ce\\U000d7d08\ud251\ud1eb\ud210\ud234\ud204\ud194\ud1c8\ud1f8\ud223\ud1cb\ud27c\\U000d9b94\ud257\ud25b\ud1e1\ud1fb\\U0009f8c4\ud1ef\\U000a444a\ud25d\\U0003d69a\ud276\ud1c4\ud283\ud1d0\ud22a\ud1dd\ud225\ud1fb\ud26b\ud1d8\ud19a\\U0005a97c\ud1a3\ud1f6\ud27e\\U0001263c\ud216\ud23b\ud869\udd26\ud1fe\ud1ed\ud23d\ud1ec\ud26f\ud1ea\ud1ce\ud1ba\ud292\ud212\\U000d2869\ud281\ud234\ud28b\ud25d\ud279\ud24e\ud1cf\ud1e7\\U0006b73b\ud214\ud1f0\ud206\\U0005f488\ud1ca\ud277\ud1a0\ud24c\ud1c4\ud257\\U000d9a19\\U000412ed\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([53652, 528733, 620768, 723527, 784112, 904251]),\n+                ),\n+                \"min_size\": 47,\n+                \"max_size\": 147,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001a21b\\U0001a24e\\U0001a1cf\\U000cb471\\U00089640\\U0001a266\\U0001a21d\\U0001a29f\\U000849cb\\U0001a27c\\U0001a21e\\U0001a1e5\\U0001a22b\\U0001a24f\\U0001a223\\U00076781\ud885\ude83\\U0001a20d\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([106949, 857743, 942187]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=3776,\n+            constraints={\n+                \"min_value\": -32527,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u5c46\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            66998,\n+                            148068,\n+                            167286,\n+                            180820,\n+                            232734,\n+                            239716,\n+                            359106,\n+                            367713,\n+                            378886,\n+                            397538,\n+                            448113,\n+                            501812,\n+                            507826,\n+                            566776,\n+                            581548,\n+                            630841,\n+                            882327,\n+                            953153,\n+                            977799,\n+                            1037707,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.1277627677780824},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1273,\n+            constraints={\n+                \"min_value\": 80,\n+                \"max_value\": 1831,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=25317,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1_807_549_021_805_968_337,\n+            constraints={\n+                \"min_value\": 1_807_549_021_805_946_970,\n+                \"max_value\": None,\n+                \"shrink_towards\": -64_537_029_935_785_078_667_509_587_607_456_903_847,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-4.483475347223413e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-3_017_614_495_710_177_839,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.402823466e38,\n+            constraints={\n+                \"min_value\": 2.8959575726421924e16,\n+                \"max_value\": 3.402823466e38,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1653748874388816.0,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-9001,\n+            constraints={\n+                \"min_value\": -13300,\n+                \"max_value\": 12001,\n+                \"shrink_towards\": 0,\n+                \"weights\": {-8437: 0.5},\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-79,\n+            constraints={\n+                \"min_value\": -101,\n+                \"max_value\": -40,\n+                \"shrink_towards\": -5518,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004a31c\\U0004a3a3\\U0004a3d7\\U0006607b\\U0004a346\\U0006ed5e\\U0004a40a\\U0005d769\\U00065b48\\U0004a343\\U0004a400\\U0004a415\\U0004a3be\\U00093048\\U0004a40e\\U0004a3b4\\U0004a338\\U0004a386\\U0004a3d2\\U0004a3ff\\U0006637d\\U0004a39c\\U0004a389\\U0004a36c\\U0004a39a\\U00058adf\\U000948de\\U0004a3e5\\U00091c14\\U0004a380\\U0006e028\\U0004a322\\U0004a390\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([303896, 466594, 590823, 649817, 1039823]),\n+                ),\n+                \"min_size\": 29,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1005,\n+            constraints={\n+                \"min_value\": 1000,\n+                \"max_value\": 1018,\n+                \"shrink_towards\": -71,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9a\\xc4|j\\xd1\\x9aor/\\x7fKL9\\xf3\\xc5\\xd9\\xae\\xcb\\xa5h\\x9d\\xd3h\\n\\xf9\\x12\\x7f\\xfb\\xb6\\xfd\\xa1\\xeb\\xea\\xfb\\x0f\\t\\x85q\\xb6Rw\\xf3\\xf8:\\x1d\\xcb\\x9a\\x1a\\x0cK\\x15P\\xe2)\\x15<n\\xfd\\x1cQ\\xdf\\x9aI\\xb7Y\\xf8\\xe8\\x1e`\\xe0\\xbdV\\xe7\\xe9\\xe0\\x9c9\\x1bu\\xde\\x8a\\xbd\\\\y\\xe1\\xc0H1\\xf9f\",\n+            constraints={\"min_size\": 37, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9052,\n+            constraints={\n+                \"min_value\": -111,\n+                \"max_value\": 17641,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"tq\\xd5\\x0b\\xd0M\\xe8\\x8d\\x0e=\\xa0\\xc5\\x9a\\xe5\\x8a\\xef\\x90\\x9ap-Aq\\x9e;\\xac'\\x00\\xce\\x93\\xe5rpB\\xdc,\\x8d\\xa0\\x83\\xb8S\\x998\\x1e\\xd4\\xe9\\xac\\xc9(\\xae].u\\x0b\\xde\\x01\\xfc\\xce\\xed\\x9a\\xc4\\xb7\\xe0{\\xb34\\xb3\\x07\\xa2\\xfcd\\xe8\\xdb|\\xc2\\x87\\x80a\\xdfo\\x0b\\x8e\\xe2|\\xe6\\xe5.\\xdet+\\xc9+\\x94\\x18\\x17\\xe2\\xa9y\\xb7\\x10\\x99 \\xd7#\\xdaYn\\xe4\\xa7`)\\x18C\\xfc\\x88\\x8aav\\xe9\\x88\\tH_\\r\\x15\\x96\\xa5\\xcf\\x86&\\xe5\\x96I\\x06\\xc0\\xf9WyM\",\n+            constraints={\"min_size\": 47, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u169b\u1684\u1693\u1690\u168b\u1692\u1684\\u1680\u1691\u1684\u1682\u1691\u168f\u1685\u169c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1024, 575000, 703171]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-6.91131514778411e249,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.5153292461739424e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000c9caa\\U000326af\\U000326db\\U000326eb\\U0004d244\\U0003276c\\U000326d7\\U000326c2\\U000326c7\\U00032776\\U000326c5\\U0003275f\\U000326af\\U0003271d\\U0005d58d\\U0003269c\\U00032698\\U000326fd\\U000326c5\\U0003271c\\U00032731\\U00032717\\U000326ae\\U0003278b\\U000326b5\\U000326c7\\U000326c7\\U0004b683\\U000326ab\\U0005cd6e\\U00047daa\\U000326e7\\U000326eb\\U00032775\\U0003276e\\U00032778\\U000326f0\\U000326b4\\U000326c5\\U00032704\\U000448bc\\U000326bf\\U00032731\\U000326e9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([206485, 394870, 766890, 885084]),\n+                ),\n+                \"min_size\": 26,\n+                \"max_size\": 126,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x0e\\xbc\\x1bd\\xff\\x14!?I\\xcf\\xbd\",\n+            constraints={\"min_size\": 8, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.observations\",\n+            constraints={\"min_size\": 21, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.2250738585072014e-308},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00036b38\\U00036bbc\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [223994, 301123, 345154, 806206, 826398, 988477, 1054129],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud877\udd64\ud877\uddbd\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([187722, 748609])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"j\\xdd\\x8c\\xc5r\\xfe\\x1b\\x1e\",\n+            constraints={\"min_size\": 7, \"max_size\": 39},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -8.040565903672791e105,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.0704761424450515e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.2520688483478323e-23,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.92222518581292e22,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"<\\xa2\\x9f\\xcf\\x0b\\xcb\\x16\\x98\\x9e{C\\x0c\\xbd$\\x85a\\x1f\\xdcjJf\\x1b'K\\xd8\\xaa\\x7f\\x1d6'\",\n+            constraints={\"min_size\": 12, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=28843,\n+            constraints={\n+                \"min_value\": 28837,\n+                \"max_value\": 28926,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003b463\\U00061073\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([242777, 476869, 582443, 775960, 913814]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9c$\\xea\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"~\\xeb\\x90\\xb9Z\\xe2\\x1d\\x17Z%,d\\x1f\\xc9)\\x94\\x08\\x9e\\x8d\\xe6\\x1e\\xad\\x9f\\xd5^f\\xe8\\x1f\\xa7\\x12\\xc5\\xef\\xa64\\xc08\\xf1\\xa7\\xff{)\\x97K\\x986y\\x10\\x99\\x1a\\x14H40'\\xd1\\xbe\\x7f*\\x8c\\x89\\xe9\\xb5\\xd8\\x15N\\x06\\x0f\\xafr\\x81\\xf4\",\n+            constraints={\"min_size\": 44, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-157_542_436_676_880_479_791_684_678_217_283_332_132,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -22678,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.793410934925472e181,\n+            constraints={\n+                \"min_value\": -8.190662843378757e181,\n+                \"max_value\": -1.5955023634889976e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.793410934925472e181,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd3\\xffy\\x92\\x89\\xad\\x93&M\\x98\\xdc\\xceO\\xa2e\\x90\\x84\\x99l\\x06\\x88\\xeagk3c\\x94\\xf2\\xbd\\xbb\\xc3\\xc8\\xb7\\xefc\\xceb\\xfb\\x1aV\\xa8\\x90\\xe9\\xa8\\xb3\\xc5\\xc8\\xbd\\x03@0\\x9eQ\\x05\\xca\\x13\\x19l\\x13\\x80\\xef\\xe3\\xa4\\xe4\\xda\\xcd\\xfc>\\xcd\\xf0\\x03\\x85\\xa9\\xcd1\\xdc\\xb7\\xaf'>P&\\xfe\\xb0rw\\x10\\xa395=\\xaa\\xad\\xb9\\x97\\xcdIb\\xcf\\x06\\xb8\\xd6\\x9az'&\\xdf\\xd0M\\xa3\\x04m\\xe3ix\\xd7\\xac\\xa1,\\x0bM\\xaa\\x02\\xd9f\\xea\\xf5\\xa2\\xee\\x8fu\\xcc\\xe3L\\x94D\\xd8\\xf4\\x03W\\xd5)T\\x89\\xdc\\xa5\\xc1\",\n+            constraints={\"min_size\": 47, \"max_size\": 147},\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.7463510461379343e-306},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.302808474837877e307,\n+            constraints={\n+                \"min_value\": 1.645368163518809e180,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.302808474837877e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\t\\xb7\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.4481843358663283e307,\n+            constraints={\n+                \"min_value\": 1.5,\n+                \"max_value\": 4.73925681750816e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.4481843358663283e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1b|\\x11\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=19816,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 4482,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8e\\xa5\\x00\\xadd\\xdd>W\\xf2I}i\\x8a\\xbc\\xe1\\x93\\x9c\\xf2\\x98\\xc4qD\\x182.=\\xed}\\xcaB\\xee\\x115\\x8f\\x1f\\x80\\xb3\\xdaJ\\x94\\xd1\\x12\\xca\\xe5\\x12\\xbcC\\xa5\\x9d\\x94\",\n+            constraints={\"min_size\": 49, \"max_size\": 149},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=104,\n+            constraints={\n+                \"min_value\": 69,\n+                \"max_value\": 154,\n+                \"shrink_towards\": -15300,\n+                \"weights\": {135: 0.01791100780681444, 69: 0.0273558774497495},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 7.885869213163187e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.4403403677256572e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud83c\udffb\ud83d\udc4d\ud83c\udffb\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([9999, 286753])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0465\u045c\u0444\u0472\ud861\udd4d\\U00036d75\u0466\u2b9d\u04e9\u04e8\u0499\ud883\udc2f\u0489\u049c\\U0002efde\u04bc\\U00011244\u0428\u0417\u04c4\u0407\u0495\u049a\u042b\\ua48d\u04ab\u0449\u0462\u04e4\u0416\u0454\u04ca\u0412\\U0004d5a2\u0444\u0457\u0418\u04d5\u04f7\\U00032dce\\U0005f366\u04d3\u041e\u04d5\u04c7\u04bd\u04de\u04a1\\U00056fe7\\U0001de39\u045e\u04ae\u040c\u04ab\u0467\u04b4\u0415\\U00052fd4\u0488\u041e\u04e1\u04bf\u0443\u0454\\U00060a0b\u0450\u042b\u0446\\U0001dcf7\u04b6\ud81e\udc81\u043b\u04df\u0406\u0458\u0424\u04c4\u049b\ud820\udcdd\\U00056eea\u930a\u048d\u04cd\u04cc\u0409\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1024, 440296, 730661]),\n+                ),\n+                \"min_size\": 50,\n+                \"max_size\": 119,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xeef'\\xe7\\x81\\x1ft\\x84\\xe9\\x10\\xaa\\xdb\\xec\\xd2\\x18\\xe3\\x82\\xa1\\x9a5\\xdb\\xc2\\xaepI\\xd4fr>\\xe6=;[\\xa9\\xee\\xea\\x85\\x88\\x8e^j\\xda\\xca7\\x8b\\xa4\\x0b\\xba\\xc8\\xe5\\x13gs\\x03{a\\x18\\xc0\\\\\\xe5VE\\x90b\\x95\\xaa4{>\\x7f\\x91/\\x94\\x1e\\xb3\\xde\\xd24\\xcd\\xd0\\xcej!Dyv9\\xb2\\x05\\x0b\\xd8w\\x1a\\x84{\\xb4\\x05H\\x92\\xaeY\\x12\\xdf\\x8f6?\\xb5w\\x91{V\\xb5\\xec\\x90\\xa8\\xd5R\\x19\\t\",\n+            constraints={\"min_size\": 44, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-24554,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -24492,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=40177,\n+            constraints={\n+                \"min_value\": 23227,\n+                \"max_value\": 44023,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"*X\\xea\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"?\\x0b\\xe3\\xee[\\x7fLo27\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9798232521163179},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x0e\\xb3\\x99\"\\xb1T\\xa6\\xf3R\\xde\\xfbR\\xf3\\x86j\\xca\\xe1\\xe8*\\xca\\xe3\\xad\\x8d)\\xce$Z_\\x8d8h\\xd0Q\\xe5+c\\x14\\x03\\x1b\\xbb\\xc3\\xa3j\\xb5\\xd1D\\x84\\x1bJ1\\\\',\n+            constraints={\"min_size\": 32, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.259656321106539e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.623348355903137e307,\n+            constraints={\n+                \"min_value\": -3.0433326486753203e-186,\n+                \"max_value\": 9.218039666750057e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.401298464324817e-45,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=3_424_289_208_842_271_702,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -14890,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=102,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 22804,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.5723842264282604e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.1227324959274777e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1630550324595418e308,\n+            constraints={\n+                \"min_value\": 6802299492362665.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.648863178872841e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc5\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.2250738585072014e-308},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.552094081324381e308,\n+            constraints={\n+                \"min_value\": 1.1125369292536007e-308,\n+                \"max_value\": 1.552094081324381e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.5609061395877528e176,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".observation\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1433,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -3,\n+                \"shrink_towards\": 1024,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-6_371_337_059_089_842_504,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00075153\\U0007509b\\U00075130\\U00075164\\U000750db\\U0009512c\\U0007512d\\U00075096\\U00075113\\U000750e8\\U000750a7\\U000750a7\\U000750be\\U0007ca62\\U00075152\\U0007507d\\U00088842\\U000750e6\\U00075142\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([479339, 639462, 667056, 781465]),\n+                ),\n+                \"min_size\": 19,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.818578483507992e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.7517792689926908e-306,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000dd08b\u0261\\U000c74ff\\U000edc23\u021b\u0269\u0281\u0230\u0224\u02b3\u02d1\u028b\u02c7\u02e9\u0283\u02cb\u024b\\U000f3611\u0288\u0269\u024f\\U000e6540\\U0006e6e6\u02a5\u02d3\u0224\u0217\u02d8\u02aa\u024e\u0206\u02de\u02b2\u02ca\u0200\u02a3\u025c\u0203\u02cf\u0246\u027a\u0256\u02a1\u022e\u02fd\u023c\u02b2\u02a5\u0220\u02df\u0204\u024e\u027e\u0233\u0296\u0233\u029f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            512,\n+                            8637,\n+                            155675,\n+                            517066,\n+                            594961,\n+                            944680,\n+                            966915,\n+                            999933,\n+                            1086277,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 37,\n+                \"max_size\": 137,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.15872651819034503},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud820\udd98\ud820\udd7e\ud820\udda1\\U000baa21\ud820\udd7f\\U000cbf49\ud820\ude31\ud820\uddb1\ud820\uddf6\ud820\udd7a\ud820\ude46\ud820\uddb4\ud820\udd5c\ud820\udd75\\U000707c2\ud820\uddce\\U00036461\ud820\uddd3\ud820\uddbb\ud820\udd67\\U000f0a1b\ud820\udd91\ud820\uddf6\ud820\ude30\ud820\uddd7\ud820\ude28\\U000ba62d\ud820\udd88\ud820\ude26\ud820\udd86\ud820\udd65\ud820\ude2a\\U000445de\ud820\udd85\ud820\udde1\\U0009c164\ud820\ude18\ud820\udd66\ud820\udd9f\\U000c70b7\ud820\udd51\\U00033f1f\\U00069c9a\ud820\udde5\ud820\uddae\ud820\udd51\ud820\udd90\ud820\ude21\ud820\uddba\ud820\udd7c\ud820\udd92\ud820\udd4c\ud820\uddea\ud820\udde2\ud820\udd94\\U0006ea12\ud820\udddb\ud820\ude37\\U000caa5e\ud820\udd6e\ud820\uddf9\\U000732ed\ud820\udd4c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            98635,\n+                            266567,\n+                            267011,\n+                            317453,\n+                            381616,\n+                            489834,\n+                            635027,\n+                            679291,\n+                            708555,\n+                            1009423,\n+                            1028274,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 43,\n+                \"max_size\": 143,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"P\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=inf,\n+            constraints={\n+                \"min_value\": inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.3191747346057131e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.32824137159204675},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-5_336_018_502_627_432_615,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xfe?\\xc7\",\n+            constraints={\"min_size\": 1, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00059903\\U000598ad\\U0008d6c0\\U00059897\\U000598e5\\U000598de\\U0005983b\\U00059907\\U000598f2\\U00059825\\U000b55b2\\U000598c7\\U00059877\\U000598ee\\U000598cb\\U000b6757\\U000598d5\\U0005984a\\U000598aa\\U000598d6\\U000598ce\\U000598bd\\U00059911\\U00059887\\U000598fd\\U000ba4fa\\U000598c5\\U00059895\\U000598c6\\U0005985c\\U00059884\\U000a90b6\\U000598ca\\U00059823\\U000598ab\\U0005990b\\U00059821\\U000598aa\\U000598be\\U00059899\\U00059913\\U0005982d\\U00059911\\U000598e6\\U000598d3\\U000598af\\U000598be\\U000a8e24\\U00059832\\U00059906\\U000b5b6d\\U000598d0\\U000b769f\\U00059888\\U0005989e\\U000598b5\\U00059832\\U00059848\\U00059873\\U000598ed\\U000598d3\\U0005984f\\U000598d6\\U0005985f\\U000a79f5\\U0005982a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [366624, 399555, 574085, 590193, 682967, 764790, 852787],\n+                    ),\n+                ),\n+                \"min_size\": 33,\n+                \"max_size\": 133,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00013f1a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            81465,\n+                            111349,\n+                            177127,\n+                            206009,\n+                            225961,\n+                            411255,\n+                            455271,\n+                            579395,\n+                            615876,\n+                            663601,\n+                            943221,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.257756764501949e307,\n+            constraints={\n+                \"min_value\": 6155134352067708.0,\n+                \"max_value\": 1.7483965338443222e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.3659476249617513e66,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.889096057171871e16,\n+            constraints={\n+                \"min_value\": 1.5,\n+                \"max_value\": 5.740003570151746e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.225073858507203e-309,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-17629,\n+            constraints={\n+                \"min_value\": -22138,\n+                \"max_value\": 88,\n+                \"shrink_towards\": 22440,\n+                \"weights\": {\n+                    -19884: 0.006201074238690802,\n+                    -17836: 0.031231925203709838,\n+                    -6178: 0.021730373868980423,\n+                    -4843: 0.04009162296987856,\n+                    -17629: 0.10059666833693148,\n+                    -15107: 0.06266922302714127,\n+                    -10433: 0.06522322819417552,\n+                    -1203: 0.005589217493825406,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-24351,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.163927263771575},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7,\n+            constraints={\n+                \"min_value\": -97,\n+                \"max_value\": 124,\n+                \"shrink_towards\": -664,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.7521922717568051e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.225073858507203e-309},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001b851\\U0001b7d5\\U0001b7b1\\U0001b836\\U0001b805\\U0001b80a\\U0005ea73\\U000a7a60\\U0001b7d9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([112511, 119347, 176006, 737167, 992191]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 8.079668506337123e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-262528067,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 116,\n+                \"shrink_towards\": 980,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-25,\n+            constraints={\n+                \"min_value\": -8577,\n+                \"max_value\": None,\n+                \"shrink_towards\": -15214,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8e\\x93\\r\\xff\\xd4D\\\\\\x15\\x07\\x8f>0y\\xd6\\xa2\\xd1\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.2462842022556504e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.5208781044491004e190,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4_790_835_975_566_282_953,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.355780576703554e16,\n+            constraints={\n+                \"min_value\": 3.3178050154103784e16,\n+                \"max_value\": 1.3140823126004058e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 7504995249438969.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 8.030248510824076e-97},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=94013593,\n+            constraints={\n+                \"min_value\": 65,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.513212357702783e306,\n+            constraints={\n+                \"min_value\": -1.1125369292536007e-308,\n+                \"max_value\": 9.825960663402548e306,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u02b9\\U00072a1e\\U00074826\u0279\u0201\u02d6\u0244\u0261\u0228\u0245\u026c\u02f3\u02fe\u0270\u02dc\u02d9\u0273\u02ea\u0269\u0230\u0240\u02b6\u0257\u02bb\u02f5\u0232\u027b\ubd68\u0274\u0276\u020f\u0263\u02ed\u0271\u02a5\ud81c\udd9e\u0238\u029f\u02e5\u02bc\u0270\\U00078f21\u02fe\\U0001fade\u023e\u02b4\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([512, 530646])),\n+                \"min_size\": 42,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-23,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 37,\n+                \"shrink_towards\": 32070,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud82c\udd93\ud841\udc83\\U000df417\\U0005f439\\uf16f\\uf143\\uf196\\uf205\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([61740, 144889, 376778, 473318, 842239, 948892]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.831205289449598e-145},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4549,\n+            constraints={\n+                \"min_value\": 4523,\n+                \"max_value\": 4551,\n+                \"shrink_towards\": 28465,\n+                \"weights\": {\n+                    4545: 0.1470088067669808,\n+                    4544: 0.3326756332586009,\n+                    4549: 0.3326756332586009,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u01e9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            300,\n+                            1000,\n+                            2678,\n+                            9999,\n+                            77711,\n+                            104385,\n+                            187209,\n+                            212218,\n+                            213152,\n+                            258746,\n+                            290342,\n+                            327634,\n+                            476978,\n+                            481372,\n+                            500369,\n+                            584137,\n+                            697644,\n+                            699740,\n+                            720507,\n+                            771887,\n+                            811101,\n+                            866622,\n+                            883588,\n+                            929847,\n+                            1032269,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8461848478938385},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=14611,\n+            constraints={\n+                \"min_value\": -10,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x91\\xa3\\xbb\\x9a\\x95\\xe2t\\x1d.X\\xaa\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"H\\xd1\\xae\\xf7\\xea\\x93|q\\x1ak\\x9f\\xf7\\xddL\\x81d\\x99\",\n+            constraints={\"min_size\": 14, \"max_size\": 114},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.06927851163642453},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001c616\\U0001c54a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            115993,\n+                            225342,\n+                            341385,\n+                            392114,\n+                            438960,\n+                            509218,\n+                            1033367,\n+                            1100940,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 41,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-28417,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -92,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 3.847211391286392e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.2793258281424002e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -6.499576945397172e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.073328140320772e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"S%#\\x8d\\x80\\x01\\x9e\\x9fjm<e\\xd6JY#\\x94\\xc4-\\xea<\\xcf\\xab\\xb3\\x13\\x98\\xb1\\xb7< 1\\xd1\\xaa3@Y\\x18\\x1d\\xba\\xfe\\xb4C\\xd2\\xdc\",\n+            constraints={\"min_size\": 14, \"max_size\": 114},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.5286094852519714e308,\n+            constraints={\n+                \"min_value\": -8.544253040816291e-61,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.5286094852519714e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -1.175494351e-38,\n+                \"max_value\": 7.868263538269095e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6.698106820071307e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.868676422542257e307,\n+            constraints={\n+                \"min_value\": 4.9821094901708504e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 7.333515383289704e278,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"b\\x0618e\\xba\\x90\\x01\\xa5\\xccA\\xad[\\xb5-\\xf5\\xd0\\x06K\\xac\\xe1\\xd8\\x12]\\x02\\x1blYl\\xca\\xc0\\x18\\xded\\x83\\x94LD\\xb7nR\\xb9\\x0b\\xea\\x9e\\xc0\\xcd\\xcfcznL\\xc0\\xca\\xb2e\\xbb\\xf8\\x16\\x04\\xaa\\xe3\\x97\\xb2\\xd1\\xe48p\\x84\\xd0\\xe2\",\n+            constraints={\"min_size\": 39, \"max_size\": 139},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [67298, 67396, 193858, 517313, 519678, 626309, 883336, 894530],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4_889_394_701_991_497_729,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623155e308,\n+            constraints={\n+                \"min_value\": -4.357347674360733e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7976931348623155e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=42426,\n+            constraints={\n+                \"min_value\": 30580,\n+                \"max_value\": 48008,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 2.239805796583543e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.00254709141644e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000e192d\ud850\udc61\\U000aab73\ud850\udd1b\ud850\udc63\ud850\udc48\ud850\udc4e\ud850\udcf3\ud850\udc23\ud850\udc6d\\U000ebd84\ud850\udceb\\U000cb2dd\ud850\udc2d\ud850\udc2d\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([147490, 305312, 567309, 1104458]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u04d1\u05b5\u0586\u05a0\u0511\u05a5\u0560\u04fa\ud866\udd05\u04c5\u058e\u04d0\u0537\u05a3\\U000a0bf6\u04e5\u05b6\u056c\u0534\u05b0\ud85d\udf5c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1218,\n+                            409893,\n+                            631447,\n+                            712692,\n+                            713373,\n+                            923256,\n+                            1053102,\n+                            1059566,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 15,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.0525612855373397e307,\n+            constraints={\n+                \"min_value\": 1.350326790257023e-148,\n+                \"max_value\": 1.4337988684240552e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.5971351837679892e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 0.05,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0706912685420034e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 80},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.752340025615714},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x86\\x1a\u00e2\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([1, 959485])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2842334158107964.5,\n+            constraints={\n+                \"min_value\": 0.0,\n+                \"max_value\": 5355761310766150.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2116021586465189.2,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.24098454841188405},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x81\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6646289450805981},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 6.7622509531436604e-18},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ub4b5\u0197\\U000e8370\u01f5\u01e2\\U000d788b\u01f9\u0223\u0224\u01d5\u01af\u01cb\u01af\u0253\u01a3\\U000bd0cc\u0234\u024a\u0250\u0198\u01dc\ud81c\udf35\u0238\u0197\uae3b\u0243\u0232\u01b1\u0270\ud881\udcb7\\U000a602c\\U000dec1f\u01b8\u0290\u01d0\u0280\\U000dd2fa\u0231\u0200\u0290\u022d\u0287\u0278\u01c5\u01cb\u019c\u01db\u019b\u01f1\u022e\u0230\u0205\u019d\u0248\u024e\u0254\\U000e66c0\\U000dc7a0\u020f\u01d0\u01c3\u01bc\\U0009178f\\U000e768c\u01c7\u0244\u01e5\u028c\u0214\u0280\u01a2\ud844\udda1\u01a2\u026b\u0250\u028c\u023d\u0236\u01b4\u0206\\U000328ae\u0260\\U0010fb87\u0258\u0249\u01e3\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([404, 241911, 591595, 961807, 1111079, 1114111]),\n+                ),\n+                \"min_size\": 27,\n+                \"max_size\": 127,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.868599727071836e-273},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=33138,\n+            constraints={\n+                \"min_value\": 31871,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=11,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 21108,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 3.834960706167684e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.824060415568369e-198,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud86e\udd38\ud86e\udd92\ud86e\uddbf\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([178482, 341515, 462734, 697139, 719098]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.030527853903886e307,\n+            constraints={\n+                \"min_value\": -7.057731253367248e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.9554538169349163e207,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=29768,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003fa82\\U000373fb\\U0003310c\\U0003310a\\U000330e4\\U000330d6\\U0003305e\\U00033117\\U00048894\\U0003303e\\U0003f493\\U0003305d\\U00033117\\U0007f21a\\U0003323e\\U00033119\\U0003309f\\U000330b8\\U00077c1f\\U00075fc1\\U000330c7\\U000330e8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([208936, 304334, 465784, 536012, 683515, 690903]),\n+                ),\n+                \"min_size\": 17,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-3_684_048_071_131_247_339,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -20,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe4\\xb2\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xef\\xa5VJ\\x08\\x90o\\x1cd\\x81\\x8d\\xfb \\x0c\\x98lz\\x1a\\xbbq\\xf5\\x83\\x12\\x8b%\\x85\\xc2)\\xf3S\\xe2\\xba\\x1e\\xbc\\x15\\xd8\\xc7r2T\\x85\\xa4\\xbaW\\xa3\\xcc\\xa2\\\\\\r9\\xcc\\x83\\x1f\\x89\\xde\\xc8F\",\n+            constraints={\"min_size\": 28, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u01fc\u01ad\u01ad\u01b7\\U000a6737\\U00083a03\u01de\u01c0\u01dd\u0139\u01c5\u018f\u0168\u0157\\U00057c79\\U000396f8\\U00075a35\u0132\\U00102dde\u01a8\u01e7\u0149\u01dd\\U000bf0ae\u01f1\u01c8\u0136\\U0007e7d3\u021e\u01a8\\U0010c368\\U000baa8b\u0172\u0142\u012c\u0156\u01a8\\U0003f37f\u014f\u016d\\U000aedc3\u01f8\\U0003da3b\\U0005ce22\u0152\\U000aa871\u01e1\u014b\u018c\u016e\u0227\u015e\u016c\u01ab\u012e\u0140\u018c\u01a5\u0222\u01dd\u0224\u0158\\U0009335e\u019c\u019a\u0223\u021d\\U0009ca1d\u0188\u014f\u0145\\U000bbe54\u01ce\u0156\u0216\u01ee\u021d\u017e\u01ae\u013f\\U0009343c\u01c2\u01a0\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            300,\n+                            1000,\n+                            18722,\n+                            22147,\n+                            234345,\n+                            259105,\n+                            353931,\n+                            717978,\n+                            751359,\n+                            818530,\n+                            941537,\n+                            1101373,\n+                            1106204,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 31,\n+                \"max_size\": 131,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-38,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 18596,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.2815216386200892},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x19\\x10\\x88\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9655078579075693},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u5472\\U000a2685\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1000,\n+                            1024,\n+                            21443,\n+                            21833,\n+                            55269,\n+                            181788,\n+                            213195,\n+                            227768,\n+                            238650,\n+                            363537,\n+                            388945,\n+                            398032,\n+                            435814,\n+                            438356,\n+                            441158,\n+                            511155,\n+                            618799,\n+                            622789,\n+                            661415,\n+                            744029,\n+                            769330,\n+                            785710,\n+                            923364,\n+                            1040938,\n+                            1047896,\n+                            1051503,\n+                            1111969,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud869\ude89\ud887\uddde\ud869\udeab\\U00034621\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([173609, 236006, 730368]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0489\u04de\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1024, 477229, 929594, 1077778]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 29,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa1;\\xd1\\xd7Fz\\xa6\\xe1\\xe4\\x87\\xa6\",\n+            constraints={\"min_size\": 9, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=55522,\n+            constraints={\n+                \"min_value\": 10063,\n+                \"max_value\": 1_411_027_816,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    21243351: 0.08325612540464891,\n+                    60685: 0.09730968368855039,\n+                    347619444: 0.11398201316820059,\n+                    55522: 0.06306263277143342,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-18,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 12450,\n+                \"shrink_towards\": 39,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"w\\x17\\xa2\\x990\\xd88\\xd7h\\xcc\\xeadzN\\x99\\xb1'V\\xc1\\xd7\\xcfk\\xfd\\x8aM\\xc76\\x9e\\xbcd#\\x05\\xb9\\x9b\\xfe\\xdc\\xa4\\xc3@\\xe5\\xd1\\x84\\x1f\\x032\\xd4\\x8e5\\xb1\\x85\\x1e~\\x9c\\x9a\\x03\\xf1\\xed\\xcb\\x14\\x81\\x05&\\x98\\x1a\\xf4\\xd1\\x8e)\\xa7p\\x01\\x7f\\x90\\x10D\\x95W\\xd0a\\x94'l\\xacC3$\\xa3\\x97\\xee\\xb4g\\xb4\\xe2\\x14Y\\xc5U\",\n+            constraints={\"min_size\": 48, \"max_size\": 148},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-44125,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -27941,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x85d7\\xb1\",\n+            constraints={\"min_size\": 0, \"max_size\": 5},\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.45337073019922214},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.663238459267875e307,\n+            constraints={\n+                \"min_value\": 4.827713751446807e16,\n+                \"max_value\": 1.8846861523128853e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 9.15168700999911e306,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9264441014859275},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.1145610223073416e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1672407309397850.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7255217764018124},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=456138707,\n+            constraints={\n+                \"min_value\": -26924,\n+                \"max_value\": None,\n+                \"shrink_towards\": 19927,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud84c\udc76\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            143330,\n+                            170638,\n+                            173563,\n+                            302889,\n+                            353252,\n+                            667691,\n+                            909535,\n+                            1086048,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00067f16\\U00067f23\\U00067e71\\U0009be0d\\U000899c3\\U00067f03\\U00067f11\\U00067edb\\U00067f65\\U00067f57\\U00067f2a\\U00067ef1\\U00067ef7\\U0009540d\\U000c1710\\U00067f3c\\U00067f27\\U00067eb2\\U00067ed3\\U00067e7e\\U00067f5a\\U00067f56\\U00067ec4\\U00067ed9\\U00067f27\\U00067ea7\\U00067f10\\U00067f0a\\U00067f2e\\U00067ede\\U00067eec\\U00067e8b\\U00067f3f\\U00067ec9\\U00067eaa\\U00067ee7\\U00067f57\\U00067f30\\U00067e96\\U00067ea9\\U000d5047\\U00067e9c\\U00067f1b\\U00067ef2\\U00067eef\\U000adffc\\U00070ce0\\U00067f2b\\U00067f2f\\U00098a04\\U00067e92\\U00067eea\\U000904c4\\U00067f05\\U00067eeb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([425581, 879706, 901715, 911624, 946723]),\n+                ),\n+                \"min_size\": 33,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.027561038860376648},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.47947929554546553},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6445463214750319e308,\n+            constraints={\n+                \"min_value\": -7.042053312623689e173,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.5423566866709571e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5e-324},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5.960464477539063e-08},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1142,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -12,\n+                \"shrink_towards\": 106,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.069959944988474e16,\n+            constraints={\n+                \"min_value\": -3.764290256713461e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.12787119800261e-17,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9f,\\x8e\\x82\\x1f\\x87\\xca\\xd4X\\xd4\\xc0\\x88Dx\\x905\\xd4\\x12\\x9a\\x00 y\\xb2\\x0b:p$\\x0c\\xc9\\x814PM\\x8f\\x0bn\\xe0+\\x920b\\x0eu\\xe1\\x86~_\\xea\\xbcG4.1\\xd1\\x0cM\\xbc\\xb3`\\x9a\\x1ak\\xba7w\\xde\\x81\\xedt\\x85\\xe2\\xda\\x89\\xca\\xf4\\xc5\\xf9\\xb7\\xdcp\\x02\\xe0\\x0b\\xf9[\\x13\\x8bz \\xbd\\x913T\\x19\",\n+            constraints={\"min_size\": 50, \"max_size\": 150},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x92\\xe9\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"&\\xed\\xf1dp\\x9dr.\\xa0\\xe0\\xbc\\xe2\\xcd\\xfe\\xd8\\xfeOj\\xd7u\\xb7\\x1avZ\\x11\\xd9k\\xcfYXV\\xb9\\xa2\\x973\\xf4<1\\x0f\\xaa\\xc4\\xf1\\xc7t\\xea!\\x80\\x13L0/Bg6<\\xb6\\x16M\\x10\",\n+            constraints={\"min_size\": 49, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"$\\xe3/[Z\\xf8\\x00>\\xb1\\xe7\\xf0\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7561772234567113e308,\n+            constraints={\n+                \"min_value\": 6.202989833873239e16,\n+                \"max_value\": 1.7561772234567113e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.7561772234567113e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.16978809742151826},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xfb\\xa6\\xb7\\xdd\\xd0\\x85S%\\x0b\\xb7\\x89\\x18n`U6\\x9b\\xb6r)N\\xd4\\x10\\x94\\xa7\\xc6I\\xfcb <\\xbf\\xce\\x83F\",\n+            constraints={\"min_size\": 18, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.20086289834981402},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-35827,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -23826,\n+                \"shrink_towards\": 55,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7134438459964932},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.097373141338626e308,\n+            constraints={\n+                \"min_value\": -1.0371090610882806e290,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.267966044018705e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1655345088857043e148,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.6357921207213604e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-32,\n+            constraints={\n+                \"min_value\": -53,\n+                \"max_value\": -5,\n+                \"shrink_towards\": 1048,\n+                \"weights\": {\n+                    -22: 0.08785670602239448,\n+                    -47: 0.1993866498496733,\n+                    -39: 0.06176464987789131,\n+                    -24: 0.10896979414716366,\n+                    -16: 0.04202220010287724,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.625197625184638e308,\n+            constraints={\n+                \"min_value\": 1.5281932844156673e-186,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.0983217548638264e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8ez\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=15315,\n+            constraints={\n+                \"min_value\": -8421,\n+                \"max_value\": 16382,\n+                \"shrink_towards\": 16072,\n+                \"weights\": {\n+                    500: 0.0034483570078989484,\n+                    -7588: 0.014139237864336704,\n+                    10818: 0.01769163031214467,\n+                    7868: 0.006909342438763175,\n+                    15282: 0.012134766243701191,\n+                    -4170: 0.028041922343664132,\n+                    16382: 0.027010516730545074,\n+                    -5038: 0.022462940849609894,\n+                    13112: 0.015338141251729729,\n+                    -3656: 0.016203366315511652,\n+                    6320: 0.008694748756469377,\n+                    6152: 0.024022797212859204,\n+                    -4737: 0.007901034494656995,\n+                    8192: 0.009178719520849884,\n+                    -6751: 0.0021773326105471304,\n+                    4819: 0.0060232735494959505,\n+                    8980: 0.023908009774831984,\n+                    15315: 0.014139237864336704,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'!\"=\\xe6(/\\xa1\\x05\\xb8\\xaa\\xd0k\\xa06r\\x0b=D\"J',\n+            constraints={\"min_size\": 20, \"max_size\": 120},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.743092400113588e133,\n+            constraints={\n+                \"min_value\": 2.7210828636529843e57,\n+                \"max_value\": 2.7916891630546734e133,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.4736305970703523e132,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.35777045357834286},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-16125,\n+            constraints={\n+                \"min_value\": -29639,\n+                \"max_value\": -11730,\n+                \"shrink_towards\": -26492,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000cabd8\\U000330c6\\U0003309a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([208913, 290487, 712886, 958085]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\uca78\\U00015a32\uca59\uca03\uc9a2\uc9ce\\U0007d6f2\\U00041bfe\uca95\\U0008e0f0\uc9ee\uc9b6\uc9ef\uca38\uc9d3\\udd4b\uca99\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            51613,\n+                            97407,\n+                            143372,\n+                            412405,\n+                            423183,\n+                            606384,\n+                            661871,\n+                            706819,\n+                            813288,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 8,\n+                \"max_size\": 108,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -4.029794189522336e137,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.1754766296221151},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.2059713458654482e307,\n+            constraints={\n+                \"min_value\": 6.211424513145599e16,\n+                \"max_value\": 2.8235606168381307e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.0993567998750704e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7423371040157184},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.3130760511552236},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud840\udecf\\U0006b54f\ud840\udf6d\ud840\udf3b\ud840\udebc\ud840\udedc\ud840\udf5e\\U000373d2\ud840\udf5a\ud840\udea8\ud840\udef7\ud840\udf5b\ud840\udf2d\\U0003f68b\ud840\udece\ud840\udebb\ud840\udf05\ud840\udf79\\U000cfd4d\ud840\udf1e\\U000f6745\ud840\udf19\ud840\udf7e\\U000f8720\ud840\udee8\ud840\udf81\ud840\udf0d\\U000d9f4e\ud840\udf07\ud840\udf7a\\U000ebe7c\ud840\udf5e\ud840\udf8c\\U00063c88\\U00093fae\ud840\udf00\\U00086d42\\U000ea40f\ud840\udee3\ud840\udf33\ud840\udf5f\ud840\udf2e\ud840\udf54\ud840\udf88\\U0002f262\ud840\udf1c\ud840\ude9e\\U0007cbb5\ud840\udeb1\ud840\udf21\ud840\udf0a\ud840\udf60\\U00077939\ud840\udf22\ud840\udf8b\ud840\udef4\ud840\udf7d\ud840\udf3f\ud840\udf74\\U00057f86\ud840\udf79\\U000d1a4b\ud840\udf79\ud840\udee6\ud840\udecf\ud840\udf45\\U0004e76b\ud840\udf2e\\U00071eab\\U000a60cc\ud840\udf0a\ud840\udee2\\U0009a277\\U0009fc25\ud840\udf49\\U0004a684\ud840\udf61\ud840\udeeb\ud840\udf0a\ud840\udf7f\\U000d3b3d\ud840\udf99\ud840\udf56\\U00090474\ud840\udf37\ud840\udf39\ud887\udc16\ud840\udec6\ud840\udf5c\ud840\udea9\ud840\udef7\ud840\udeee\ud840\udf30\ud840\udf02\\U000cf5cc\ud840\udec2\ud840\udebc\ud840\udf4d\ud840\udeb3\ud840\udf18\ud840\udeeb\ud840\udf6b\ud840\udea1\ud840\uded9\ud840\udf76\\U00066f0e\ud840\udf76\\U000c9dd8\ud86e\ude72\ud840\udeec\ud840\udeb1\ud840\udecf\\U000ec41b\ud840\udecc\ud840\udf38\ud840\udf5b\\U000ce2c1\ud840\udf6f\ud840\udeb7\\U00059af6\ud840\udea6\ud840\udf85\\U00070616\ud840\udf68\ud840\udeec\\U000cc851\ud840\udf63\ud840\udeed\ud840\udf20\\U000c1ca8\ud840\udf36\ud840\udf45\\U0003c5d8\ud840\uded1\ud840\uded4\ud840\udeab\ud840\udf17\ud840\udec5\ud840\uded4\ud840\udf1b\ud840\udf48\ud840\udec3\ud840\udf7f\ud840\udf71\\U0007bc4a\ud840\udeeb\ud840\udf1e\ud840\udee7\ud840\udec9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([131741, 381061, 407458, 1027260]),\n+                ),\n+                \"min_size\": 49,\n+                \"max_size\": 149,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"=\\x90\\xab\\xe1\\xbf\\x1bc\",\n+            constraints={\"min_size\": 4, \"max_size\": 104},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005ec20\\U000c08a8\\U0005ebea\\U000bd26b\\U000abba3\\U0005eb94\\U0005ec2e\\U0005ebae\\U0005ebe3\\U0005ec03\\U0005eb5a\\U000daf86\\U0005eb91\\U0005ebce\\U0005eb82\\U000d7ccf\\U0005eb5c\\U000de69c\\U0005ec41\\U0005eb98\\U0005eb62\\U0005ebc8\\U0005ebfb\\U0005ebf4\\U000d8bd5\\U0005ebe8\\U0005ebe6\\U0005ec10\\U0005eba9\\U0005ebed\\U0005ebcb\\U0005ec17\\U0005ec0a\\U0005ebbf\\U0005eb91\\U0005eb6d\\U0005ebf5\\U000b6ef8\\U0005eb4a\\U0005ec02\\U0005eb63\\U0005eb80\\U0005ebb4\\U0005ec0f\\U0005ebc2\\U000d98dd\\U0005eb90\\U0005eb56\\U0005eba4\\U0005ebee\\U0005ebef\\U0005eb9f\\U0008ceec\\U0005eb57\\U0005ebe2\\U0005eb4d\\U0006576b\\U000e44de\\U000710f5\\U000bde55\\U0005ebe8\\U0005ec18\\U0005eb9c\\U0005ec23\\U000d4764\\U0005ebf5\\U0005ebb9\\U0006adbb\\U0005ec2f\\U000916b1\\U0005ebe1\\U0005eb79\\U0005eb56\\U0005ebd9\\U0005ec08\\U0005eb46\\U0005ec23\\U0005eb5f\\U0005ec2b\\U0005ec33\\U0005ebbf\\U0007a9ec\\U0005eb80\\U00077117\\U0005eb4b\\U0005eb85\\U0005ebcf\\U0005ebbf\\U0005ec0f\\U0005eb87\\U0005eb5f\\U0005ebba\\U0005ebd2\\U0005ec1b\\U0005eba7\\U0005eb77\\U0005ec35\\U0005eb53\\U0005ebf4\\U0005ebca\\U0005eb50\\U0005ebdc\\U0005ec30\\U000cc389\\U0005ebe1\\U000e485a\\U0005ebcf\\U0005eb43\\U0005eb77\\U000e4124\\U0009928c\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([387906, 1010412])),\n+                \"min_size\": 26,\n+                \"max_size\": 126,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=31068,\n+            constraints={\n+                \"min_value\": 40,\n+                \"max_value\": None,\n+                \"shrink_towards\": 41,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8222881903728321},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.3435312590010143},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00033012\\U00033083\\U00033054\\U000ab252\\U000330c6\\U00033083\\U0006a8bd\\U00033061\\U000330cb\\U0003304b\\U00033047\\U0003306f\\U00033058\\U00033069\\U0003306c\\U00033068\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([208900, 1086216])),\n+                \"min_size\": 9,\n+                \"max_size\": 109,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.872084095561294e-155,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.7671466883353733e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xfd\\xb2_\\xb7\\x99\\xfdW$\\xb1trKQ\\xdfA^\\xda?\\x7fL\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"Z\\xf7\\x1d\\xe9\\x01\\x9f\\x83y\\\\\\x13\\xea^\\xef\\xc3~L\\x87\\t\\xae\\xd0\\x9c\\x17\\x8f=\\xfai\\xd0\\xd8.jUw\\x10\\x06\\xfc\\xf4`\\xf6\\xc0\\xb5{\\xa6Y\\xceC,\\xe7q\\xe2\\xc1\\\\\\x84\\xf4\\xa6\\x1f\\xc3\\x06\\x162\\x87O\",\n+            constraints={\"min_size\": 35, \"max_size\": 135},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"/S\\xcf\\x0f\\xa0\\x1bh\\xbe\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6132104227563683e308,\n+            constraints={\n+                \"min_value\": 2.4380649580969217e-127,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.0,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.401298464324817e-45},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00064c5c\\U00064c29\\U00066773\\U00064ca8\\U00064c31\\U00064c7e\\U00064c52\\U00064ce1\\U00064c76\\U000904be\\U00064ce6\\U00064c6c\\U0007160d\\U00064d0b\\U00064c27\\U00064cce\\U00064cd9\\U000b2e0e\\U00064c59\\U00064c44\\U00064c22\\U00064ce2\\U00064d0b\\U00064c6f\\U00064ce4\\U00064cfb\\U000b20b6\\U00064d02\\U00064c7b\\U00064cb2\\U00064c7e\\U00064c8f\\U00064c74\\U00064c97\\U00065995\\U00064cff\\U00064c25\\U00064cb0\\U00064c70\\U00064cea\\U00064c26\\U00064c69\\U00064cf5\\U00064d0f\\U00064d00\\U00064ccd\\U00064cc6\\U0006d808\\U00086399\\U000bf93b\\U00064c80\\U00064cdf\\U00064c4a\\U00064c5f\\U00064d15\\U00095675\\U00064d01\\U00064c9d\\U00064c36\\U00064c44\\U000b4f24\\U00064c96\\U000be21b\\U00064cb2\\U00064c1e\\U00064c46\\U00064c81\\U000b737a\\U00064c23\\U00064cdb\\U00064c8b\\U00064c7d\\U00098f02\\U00064c7e\\U00064c99\\U00064c27\\U00064c90\\U00064c54\\U00064c45\\U00064c71\\U00064c75\\U0008af53\\U00064cce\\U00064c3b\\U00092bc3\\U00064cb2\\U00064c7d\\U0007da0b\\U00064cff\\U00064c74\\U00064c7d\\U00064cb5\\U00064cf6\\U00064c62\\U00064ce3\\U00064c90\\U00064ce9\\U00064ca3\\U00064c4f\\U00064cac\\U00064c9a\\U00064c52\\U00064cdb\\U00064c24\\U00064c9a\\U00064d07\\U00064c5f\\U00064ce0\\U00085914\\U00064ca7\\U00064ce2\\U00064c9b\\U00064cc1\\U00064cc9\\U0009862c\\U00064d13\\U00064c2b\\U00087148\\U00064c8e\\U000ac6a5\\U00064ca8\\U00064c76\\U00064d09\\U00068bf6\\U000bcf3e\\U0006b7c2\\U00064c9d\\U00064c37\\U00064c4b\\U00064d0b\\U00064cd6\\U00064c52\\U0007f71e\\U00064cfe\\U00064ca1\\U00064cad\\U00064cf3\\U00064ca2\\U00064c39\\U00064c44\\U00064c73\\U00064c93\\U00064c83\\U00064c62\\U00064c34\\U00064c21\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([412699, 805019])),\n+                \"min_size\": 42,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.329343526915695e104,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.1415034867853804},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud843\udd40\ud843\udd5c\ud843\udcfe\ud843\udd31\\U000d726e\ud843\udd51\ud843\udd73\ud843\udd6e\ud843\udd8c\ud843\udd06\ud843\udd9b\ud843\udd7d\ud843\uddd5\ud85c\udf86\ud843\udd23\\U000d72a1\\U0006e16b\ud843\udcfa\ud843\udd58\ud843\udd20\ud843\udd56\ud843\udde4\\U0003cb79\ud843\udd99\ud843\uddb1\ud843\udd7f\ud843\udde3\ud843\uddc9\ud843\udd2c\ud843\udd6a\ud843\udd66\ud843\uddc9\\U000c3b57\ud843\uddda\ud843\udd9b\\U000ce5ef\ud843\udcfd\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            134390,\n+                            162581,\n+                            245067,\n+                            257878,\n+                            443707,\n+                            513472,\n+                            792587,\n+                            903593,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 22,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xfc\\xd5>\\x11\\xf3\\xdf\\x05nda*\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud833\udf23\\U0001cf4b\\U0003749f\\U0001ceb4\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([118417, 436750, 686884]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.444367258941362},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.39798547146469787},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3270950810998508},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.716862171830761e307,\n+            constraints={\n+                \"min_value\": 10000000.0,\n+                \"max_value\": 1.3024830053678183e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.716862171830761e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0006248c\\U0006249c\\U00065c6d\\U0006246e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([402357, 548388, 1095465]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=127_350_284_296_520_250_493_009_319_741_926_125_016,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -46,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=0,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 41,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.10665019077336e307,\n+            constraints={\n+                \"min_value\": -2.49057526266509e-07,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.781404405607382e251,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.06941013514759577},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=24545,\n+            constraints={\n+                \"min_value\": -19669,\n+                \"max_value\": None,\n+                \"shrink_towards\": -64,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.871091335353025},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5696226140412314},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.646467532311926e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 10000000.0,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.21258669465718533},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=127_937_612_964_933_141_060_815_548_519_610_247_809,\n+            constraints={\n+                \"min_value\": 10049,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=89_505_283_468_080_652_300_496_587_051_888_912_536,\n+            constraints={\n+                \"min_value\": 89_505_283_468_080_652_300_496_587_051_888_884_779,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.24139882420590247},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8024337705950817},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.12025873107831989},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.8640329439760684e307,\n+            constraints={\n+                \"min_value\": 1.6565678348547148e16,\n+                \"max_value\": 1.1490202204893779e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.068209447609222e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.011336378360303991},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"vb.\\x05\\xb7 @lH\\x19\\xf2c\\x13\\x92I\\xdc\\x99+\\xef\\xc1b9~\\xf6W#\\xe4\\xfb,\\xa0\\xa9_\\x97\\x01?\",\n+            constraints={\"min_size\": 19, \"max_size\": 119},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=54,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 670_723_971_613_201_151,\n+                \"shrink_towards\": -120,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-103_217_474_213_903_056_580_118_322_509_988_437_415,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 0,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1_858_394_523,\n+            constraints={\n+                \"min_value\": 1_858_394_463,\n+                \"max_value\": 1_858_394_549,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005a2f9\\U0005a3b4\\U000bdca8\\U000d243e\\U0005a34c\\U0005a397\\U0005a3a0\\U0005a3b4\\U0005a35d\\U0005a3c1\\U0005a3c0\\U000d1ed9\\U0005a3bd\\U00087b11\\U0005a352\\U0005a32d\\U0005a37c\\U0005a358\\U0005a2f9\\U0005a3a6\\U0005a30f\\U0005a3bd\\U0005a2e3\\U0005a2fb\\U0005a354\\U0005a2f3\\U0005a316\\U0005a2e3\\U0005a3c2\\U0005a3b2\\U0005a2d6\\U0005a35c\\U0005a391\\U0005a3a8\\U000a89c7\\U00080ccb\\U0005a36a\\U0005a301\\U0005a319\\U0005a317\\U0006fc9c\\U0005a38d\\U000bd6c1\\U0005a2de\\U0009071a\\U000a5ba3\\U000b1546\\U0005a366\\U0005a35c\\U0005a3bc\\U0005a3b1\\U0005a2c3\\U0005a2f6\\U0005a2c3\\U0005a312\\U0005a316\\U0005a31b\\U000c6182\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([369347, 921706])),\n+                \"min_size\": 22,\n+                \"max_size\": 122,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=28596,\n+            constraints={\n+                \"min_value\": 5174,\n+                \"max_value\": 65535,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    53890: 0.11529256013455463,\n+                    6732: 0.24311062573188014,\n+                    30065: 0.11791824812989059,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.786254528836033e-113,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.355073614725925e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=539391938,\n+            constraints={\n+                \"min_value\": -117,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe5\\xed\\xde\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"R{\u00bf\\x86\u00ec\\x9e\\t\\x01a\\x8d\u00d8{\u00f3n\\U00054336\u00a8\u00b7l*G\u00c5y\\x9e_c@\\x1cS\\x0e\\x1a\\x1e,\\U000d83f4=\\x9c\\x8c\u00e8\\x16_\\x15\\U000647b4U\\x93\\x89V\u00ce\\U000d21b8\u00b17\\x0b\\U0001e6fb\\x97 \u1f50Y\u00ae\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            46299,\n+                            48632,\n+                            170628,\n+                            176140,\n+                            346958,\n+                            370652,\n+                            421664,\n+                            503653,\n+                            602172,\n+                            766465,\n+                            908801,\n+                            941054,\n+                            1001435,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 43,\n+                \"max_size\": 143,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00019a49\\U00019a62\\U00019a93\\U00019a62\\U00019a76\\U00019a5e\\U00019a6f\\U0006eeee\\U00019a73\\U000199c2\\U00019a55\\U000695e5\\U00019a41\\U00019a17\\U00019a1c\\U00019a6e\\U000199a9\\U00019a04\\U000199c6\\U00019a76\\U000199dc\\U00019a27\\U000199aa\\U000a95cf\\U00019a6b\\U0009c587\\U00019a44\\U000de57d\\U000c93aa\\U000199b0\\U00019a4f\\U00019a6a\\U000199c4\\U000af70e\\U00019a87\\U00019a36\\U0005e707\\U00019a0d\\U00019a00\\U00019a2d\\U00019a0f\\U000199b1\\U000199f8\\U00019a97\\U000199f0\\U000199bc\\U0003ed66\\U00019a8c\\U000199e5\\U000199f6\\U000199d9\\U000199d9\\U000c8d5b\\U000199a6\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            104856,\n+                            278849,\n+                            347418,\n+                            390101,\n+                            408784,\n+                            726088,\n+                            776025,\n+                            838565,\n+                            907305,\n+                            927934,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 47,\n+                \"max_size\": 147,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u965c\u9598\u9651\u9619\u9662\u9632\\U00084471\\U0007c337\\U000868e3\u9628\u9647\u9678\ubfe4\u9643\u9645\\U00085b82\u9632\\U0009119d\u95db\u95ba\\U00039c3c\u961f\\U0003ffbc\\U00047517\u95d2\\U0003edb4\ud835\uddbd\u95e8\u9607\\U00058091\u960d\u9651\u958f\\U00039232\u95d8\u95a2\u9635\u962c\u962a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([38267, 368191, 474804, 609133]),\n+                ),\n+                \"min_size\": 30,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.07986140049704506},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2629,\n+            constraints={\n+                \"min_value\": -11,\n+                \"max_value\": 26391,\n+                \"shrink_towards\": 29,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud85c\uddd8\ud85c\udde0\ud85c\uddab\ud85c\udd82\ud85c\udd52\ud85c\ude27\ud85c\udd98\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            160073,\n+                            258350,\n+                            329814,\n+                            440935,\n+                            500439,\n+                            712022,\n+                            764955,\n+                            800429,\n+                            802071,\n+                            1032558,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 7,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=14403,\n+            constraints={\n+                \"min_value\": 11742,\n+                \"max_value\": None,\n+                \"shrink_towards\": 28567,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=747006629,\n+            constraints={\n+                \"min_value\": -1_524_465_817,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"A\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-20388,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -97,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.5664872971300608e307,\n+            constraints={\n+                \"min_value\": 3.2784410234876204e84,\n+                \"max_value\": 1.7548462689489254e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.225073858507203e-309,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 4.413202208673924e-216},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-31314,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -31302,\n+                \"shrink_towards\": -19302,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.780264780917418e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0999515960374335e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u02c7\u0233\u02bb\u02bc\u0231\u0247\u0234\u02df\u02b1\u022d\\U00015927\u022a\\U000dcf04\u0201\u029a\ud864\udcd8\u0292\ud81d\udf2d\u023d\u020c\u02d2\u020a\u027e\u024f\u02b0\u0259\u02da\ud805\uddbb\u02c4\u02c7\\U000370d8\u0211\\U000f9676\u029a\u02ed\u02b9\\U001005ea\ud808\udc40\u025d\u02a5\u02fc\u0257\u02d7\u02fc\\U0004f686\\U000ac3f7\u0283\\U000e462a\u0248\u0231\\U000fdca4\u0202\u02f9\u02e7\u02f9\u02f0\u02dd\u52dc\u023d\u02b3\u0242\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            512,\n+                            353810,\n+                            366478,\n+                            375799,\n+                            480554,\n+                            712970,\n+                            771285,\n+                            833077,\n+                            838812,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 38,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.73417080808436e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.4726332051303349e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\u1f7e\u1f80\u1f25\\U0004c3e5\\U000d1ec6\u1fb2\u1f72\u1f45\u1f9b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            7932,\n+                            87727,\n+                            242570,\n+                            322556,\n+                            365512,\n+                            519153,\n+                            612673,\n+                            631023,\n+                            793587,\n+                            884234,\n+                            904751,\n+                            933278,\n+                            948958,\n+                            983208,\n+                            1052946,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 8,\n+                \"max_size\": 108,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x17\\x1fv\\xff2\\xd8!'p\\xb8BH\\x13Q\\xc3\\x9eV\\n\\xfeuh\\x03~\\xda\\xe0(\\xeb)\\xfb+\\x05\\x959\\xe0\\xda\\x17\\xe5*\\x19o\\xafB,8_\\xdc\\x1c\\xd0\\x11\\xc4\\\"\\x82D\\x92X\\xba\\x11\\x91\\xd0\\xf4\\x1a\\xc8\\xc6\\x91\\x9f\\x1e\\xe0w\\x1c\\x83-^1\\x1a\\xc6\\xae\\xae\\xb4\\x08_t3\\x87\\xa6\\xfeKy\\xc0\\xa1^O4\\x1b\\xd3\\x9f{\\xe1\\x81\\xc9\\x8f\\x19\\x86\\xa06\\xdfA\\xdcI\\nI\\x03W\\xe4~Lw\\x85\\x0b\\xc3C\\x0f\\x94r\\xf0H\\x0fK\\x11\\xfc\\xed\\x0f,\\x0fD\\xbe\\xd2\\xfc\\xcaa\\x0b\\xb4\",\n+            constraints={\"min_size\": 25, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9999999999999999},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([46713, 550594])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.6957896714199932e-180,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.168673686667e-240,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xee\\x8cH\\xdc\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"^\\x93\\xb2%\",\n+            constraints={\"min_size\": 0, \"max_size\": 54},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001b740\ud844\udd77\\U0001b6f0\\U0001b6e8\\U0001b764\\U0001b6ab\\U0001e327\\U0001b67b\\U0001b734\\U0001b715\\U0001b70a\\U0001b67d\\U0001b67d\\U000ac40b\\U000f65e6\\U0001b76b\\U0001b6d7\\U0001b6af\\U00093444\\U0001b69f\\U000a1288\\U0001b758\\U0001b6bf\ud877\udeba\\U0001b713\\U0001b6db\\U0001b69a\\U0001b6fc\\U0001b733\\U0001e45f\\U0001b6d5\\U0001b684\\U0001b688\\U0001b6c8\\U0001b707\\U0001b72d\\U0001b6ca\\U0001b6f7\\U0001b768\\U0001b6ab\\U0001b721\\U0001b6e4\\U00075ab7\\U0001b746\\U0006ec5c\\U0001b6fe\\U0001b6e4\\U0001b75a\\U0001b745\\U0001b6cb\\U0001b6b1\\U000eb7ba\\U0001b6e8\\U000eddc9\\U00064041\\U0001b6e6\\U0001b715\\U0001b734\\U0001b769\\U0001b68b\\U0001b716\\U0001b685\\U0001b6f0\\U0001b6ab\\U0001b6bd\\U0001b6c5\\U0001b6ff\\U0001b766\\U0001b733\\U0001b765\\U0001b729\\U0001b67a\\U0001b67a\\U0001b671\\U0001b6af\\U0001b728\\U0001b6c9\\U0001b6af\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            112237,\n+                            228563,\n+                            246258,\n+                            267337,\n+                            370732,\n+                            724758,\n+                            961221,\n+                            1020540,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 34,\n+                \"max_size\": 134,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.125431689515355e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.552213131175089e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7511,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"ii\u00d1\\x9d\\x1e\u00da\u00e97\u00be\u00f4\\n\u00fc\u00b4d5I\u00a3/B\\U0004b305\u00dc\u00fb\u00c0E\\x95\\x9d\\U0004ece7;\u00ec\u00f7\\r\u00a9\ud863\udde9\u00a9v\\x8eAc\u00a3\\U0010af3a\u0100\u00fc\\x1c\ud84e\udfaf\u00db!\u00ae\\U000a65c0C\u00c0\ud847\udd22\\U0001f1bd\\U000d2138\\U00105162J\u00ba\\x8aCZz\u00ba\u00a8a\u00ef\u00fc\\U0010a20a\ud84f\udf89\\U0009d639\ud84f\udde2\\U00101440,\\U000fea87\u00bf\u00bf\u00ab\\U0007ae1f\u1e86\u00a2\\x08\\U00077020\\x8c\\x0e\\x9e\\x0c\\x95\ud869\udd6b\\x12\\x99\\U00094aa1h\\x13\u00c0\u00c9\\x089\ud873\udf71\u00e0m:\\U000fff4f\\x80\u00d7\u00c5\\x94\u00bd\\x97\\x8b\\x81\u00ca\u00b8l\\U000cf1fa\u00d0\u00e4\u00c7d&\ud86c\udd85Ah,\u00ab(h\\U0007eac6itZ\ud806\udddf\\U00074e0b?\ud876\udde1\ud81d\udca6\\U0009cc3b\u00ff%=3\\x82d+\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            33983,\n+                            61240,\n+                            198800,\n+                            298250,\n+                            328988,\n+                            469777,\n+                            536935,\n+                            595385,\n+                            651622,\n+                            663129,\n+                            688738,\n+                            823604,\n+                            870960,\n+                            1030746,\n+                            1108794,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 41,\n+                \"max_size\": 141,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe9\\xc6\\t}\\x01\\x85\\xfe\\xa9Q\\xd52u\\x7f\\xda\\x8d\\xc1\\xbd]\\x9b&\\x8b\\xf2\\xc1\\xb7B\\x86wf\\xe4\\xe5\\xb9T\\x9a8 \\xa9\\xf0y\\x0b\\x0b\\x7fJ\\x03\\xe7JE\\xbb\\x12\\x07\\xc6\",\n+            constraints={\"min_size\": 39, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.2016035067463797e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00c5\u6135Z\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([0, 453541, 917058]),\n+                ),\n+                \"min_size\": 3,\n+                \"max_size\": 103,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x17}G\\x8e\\xd2\\xc4;\\xd8\\xc3\\xe3Z\\x8ds\\xa3\\xb3\\x99\\x10\\x08\\xdbE\\xa0\\x15A\\xa0-j~\\xac\\xec\\xc4\\xef\\x95\\x9d\\x86\\x1bk\\xdc\\xa6\\x85\\xc0E\\xe9\\n\\xd5\\x98d\\x85\\xd1\\x12\\xf5\\xf0\\xda\\xf6\\xa5[?\\xc5\\xf4~[\\x02\\xf22\\xb32\\x7f>9U\\xdc\\xa3\\xba\\xee_\\xea)q2\\x0f[\\xc2\\\\\\x13\\xb2\\x9d\\xde\\x9eh\"\\xda\\xa5',\n+            constraints={\"min_size\": 28, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.1011040963202407e114,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.99999,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe1}\\x888E.\\x9d\\x7fN\\xc9\\x19(\\x8ep\\x9ff\\xb4%\\xe4\\xad\\x89Q'M\\xb4\\x9b\\x05}\\xb7\\xda\\x13\\x18bL\\xc6\\x10\",\n+            constraints={\"min_size\": 25, \"max_size\": 120},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5653403340003477},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x13\\xd3w\\xba\\xdb\\xd0\\xcd\\xe0\\xd6\\xe8m\\x85\\x98\\x97\\xaa\\xdd\",\n+            constraints={\"min_size\": 3, \"max_size\": 103},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.9254807666081496e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.00001,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -3.2354260553703383e-21,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.2077247303186e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001b847\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([112684, 303307, 448038, 747033, 842662, 891521]),\n+                ),\n+                \"min_size\": 1,\n+                \"max_size\": 101,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=84,\n+            constraints={\n+                \"min_value\": -65,\n+                \"max_value\": 121,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    -56: 0.1546880493518903,\n+                    84: 0.13120693289127952,\n+                    116: 0.016724366672103697,\n+                    9: 0.16536171774961422,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=44144,\n+            constraints={\n+                \"min_value\": 17894,\n+                \"max_value\": None,\n+                \"shrink_towards\": 16608,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-41173,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -15321,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.3329714501880799},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1784340140794568e262,\n+            constraints={\n+                \"min_value\": 6.139228183357997e16,\n+                \"max_value\": 1.908577526441353e262,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1784340140794568e262,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5e-324},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0008ca76\u288a\u2929\u28e7\u292f\ucb10\\U0009fcbb\u28ce\u28c9\u2903\u2929\u287f\u28cf\\U000b3f7c\u2906\\U00097171\\U0009cd5e\u28b4\u28d8\u292a\u28f0\\U0009357b\u28dd\u28eb\u2955\u288e\u28f4\\U0007f4ee\u28f0\u28c9\u292e\u2903\u28d8\u2903\u28c9\u28e2\u28fd\\U000705a0\u2925\u2945\u292f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            10339,\n+                            112693,\n+                            210893,\n+                            247169,\n+                            386633,\n+                            781482,\n+                            799223,\n+                            819583,\n+                            1040150,\n+                            1053338,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 23,\n+                \"max_size\": 123,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"j\\xa8\\x1e@\\xe5\\xe0\\xbc\\x7f\\x9c*\\r\\xce\\xdd\\xf0#R\\xe5\\xdbK\\xa7P\\xb1u\\x80\\x92\\x1aa\\x04\\xcb=\\xfc\\xc3\\x04\\xd8\\x99f\\xe0]\\xa3\\xe8\\xae\\x94\\x86\\xe7\\x8cg(h\\x8da\\xd3\\x11\\x8b@z\\xaaaC\\xf3Lzi\\xc1j\\xb6\\x00\",\n+            constraints={\"min_size\": 41, \"max_size\": 141},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0009f18d\ud867\udf93\ud867\udfbf\ud867\udf3a\ud867\udfc8\\U0009f835\ud868\udc2a\ud867\udfb7\ud867\udf64\ud867\udf66\ud867\udf79\ud867\udf68\ud867\udf89\ud867\udfd6\ud868\udc23\ud868\udc09\ud868\udc24\ud867\udfd0\ud867\udf6b\ud867\udfdd\ud867\udfaf\ud867\udf5e\ud868\udc25\ud867\udfe7\ud867\udf7f\ud867\udffb\ud868\udc31\ud867\udfc4\\U0009f23d\ud868\udc1c\ud867\udfa2\ud867\udfd4\ud867\udf5b\ud867\udf72\ud867\udf4a\\U000aa691\ud868\udc01\\U000ac13f\ud867\udfb3\ud867\udf57\ud867\udff9\ud867\udfd9\ud867\udfd5\ud867\udfd9\ud867\udf4d\ud867\udfc8\ud867\udfd5\ud867\udff9\ud867\udff1\ud867\udfd1\ud867\udf8a\ud867\udfe6\ud867\udfd1\ud867\udfb0\ud868\udc0a\ud867\udf8f\ud867\udf56\\U0008fd4c\ud867\udfcb\\U0008fbad\ud867\udf4f\\U00094323\ud867\udfbb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([171832, 178784, 587048, 705295, 875934]),\n+                ),\n+                \"min_size\": 45,\n+                \"max_size\": 145,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.8226752664887433e-163},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000853d0\\U000590d7\\U000819f1\\U0005907c\\U0008006b\\U0005908b\\U0005910f\\U000590ee\\U00059067\\U00059062\\U0005907a\\U00059089\\U000590e6\\U00059028\\U00059092\\U000590cd\\U00059040\\U00085db9\\U0005908b\\U00059085\\U00059085\\U000590ab\\U000590e4\\U0005bc8c\\U0005904d\\U00059012\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([364560, 424805, 513112, 564100, 971251]),\n+                ),\n+                \"min_size\": 22,\n+                \"max_size\": 122,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.7976931348623157e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.4251819172129702e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9c\",\n+            constraints={\"min_size\": 1, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.4323556122529348e256,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.2947967844888423e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00b2\\x94\\U00088e79/\\U000d13d6\u00db\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            29994,\n+                            41421,\n+                            51209,\n+                            76971,\n+                            367580,\n+                            450894,\n+                            868305,\n+                            934848,\n+                            1059855,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 2,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.8727390885733904e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5e-324,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.9825131274412222e-244,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6882967838342254e-227,\n+            constraints={\n+                \"min_value\": -3.7474910760975987e-62,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.358555562493266e-233,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-32707,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -5278,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=15833,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -5272,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xb5\\x04\\x93X\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.279450868371721e308,\n+            constraints={\n+                \"min_value\": -1.1125369292536007e-308,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9.437845532601891e50,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\ud865\\ud90e\\ud8a2\\ud8e8\\ud873\\ud91a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            55393,\n+                            143099,\n+                            160782,\n+                            226405,\n+                            362646,\n+                            391242,\n+                            463107,\n+                            682013,\n+                            750577,\n+                            1104064,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.reports\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u5aec\u5a6a\\U000a56d3\\U000cd3a0\u5aef\u5b5c\u5a66\\U00076af3\u5b27\u5a6c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            23141,\n+                            155345,\n+                            425717,\n+                            493051,\n+                            656170,\n+                            767809,\n+                            819850,\n+                            903285,\n+                            979833,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1_967_189_370,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 97,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.629303854860526e-06,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1052704373891097e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.00937929242225666},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.43643634027451e306,\n+            constraints={\n+                \"min_value\": 4.28729723655478e95,\n+                \"max_value\": 1.3229330977129295e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1056706937183582e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe5\\x1bF\\x994\\xd9>\\xb0\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=14134,\n+            constraints={\n+                \"min_value\": 512,\n+                \"max_value\": None,\n+                \"shrink_towards\": 8_044_300_120_773_439_872,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7982967406082158},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.265487804257111e-11,\n+            constraints={\n+                \"min_value\": -1.2795113806849777e-10,\n+                \"max_value\": 9.681311705398036e-138,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.6958797900057022e-112,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=8.35972359602622e101,\n+            constraints={\n+                \"min_value\": -2.2585580309653332e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.2744330266156634e75,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.23908139641985798},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.0011843011507483e307,\n+            constraints={\n+                \"min_value\": -0.5,\n+                \"max_value\": 5.625882665238655e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9.362069717959777e306,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000fc208\\U0001de27\ud837\udf00\\U0001dec8\\U0001deb4\\U0001de52\ud837\udf02\\U0001de9f\\U000fefd4\\U0001dec1\\U0010d8bd\\U0001de0b\\U0001de14\\U000f9faa\\U0001de3f\\U0001de42\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            122379,\n+                            270155,\n+                            380107,\n+                            464117,\n+                            888467,\n+                            917858,\n+                            1001012,\n+                            1105902,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8517377249964879},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3848517533187804},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.4580464049610654},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud863\ude95\\U00080c81\ud863\ude88\ud863\udf0e\ud863\udeb6\ud863\ude85\ud863\ude4c\ud863\udeb0\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([167471, 533864, 875597]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0009c2cb\\U000e2984\\U0009c31e\\U0009c261\\U0009c2d7\\U0009c2cf\\U0009c2ec\\U0009c32e\\U0009c252\\U000eb3ef\\U0009c33b\\U000d0416\\U0009c2a1\\U000b31b2\\U0009c2da\\U0009c281\\U0009c294\\U0009c26f\\U0009c278\\U0009c2dc\\U0009c274\\U0009c2b8\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([639551, 1114111])),\n+                \"min_size\": 8,\n+                \"max_size\": 108,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005a88d\\U0005a84e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([370753, 429651, 534572, 860428]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x08e\\xdf\\xb0\\xc3\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -10746303834216.275,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.877980342265785e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-39,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1357148288253805e307,\n+            constraints={\n+                \"min_value\": 7.907042898144603e-20,\n+                \"max_value\": 3.6099992129835845e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00016e11\\U00016e1c\\U00016dce\ud81b\ude83\\U00016ec3\ud81b\ude6d\\U00016ebe\ud81b\ude85\\U000433a9\ud820\udefa\ud81b\ude4b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([93646, 327431, 719716]),\n+                ),\n+                \"min_size\": 7,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2_012_153_812,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -9,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.3603384802138399},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=5381,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 31733,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xcd}\\xd09[\\x87\\xc8B\\xd9\\xc1u\\xd1\\x91'z\\x01\\xe6\\xfd]\\xbe\\xd9\\x8f7\\xec\\xdery\\x02\\x15A\\x1a\\xbdV\\xe4\\x7f\",\n+            constraints={\"min_size\": 17, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 1.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"wlm;\\xc5e+3\\xe4\\xab\\xb3<\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -5.966666464947243e-143,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.552346282105688e-90,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.04125664844559e307,\n+            constraints={\n+                \"min_value\": -1.7627124785615514e149,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 7.04125664844559e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc1kA\\xf8\\x15\\n*\\xa7\\xc2\\xec\\xbf\\xe6\\xca\\xd9x\\x9c\\xe4F\\\\\\xc6\\x01\\xacRv\\x0f\\xb7\\xa7&\\x9c\\x05\\xf8\\x9d\\xbfOZ\\r\\x1eq\\xa2\\xbf\\xa9eWz\\xd0\\xce\\xda\\xee\\x91\\xd3\\x8d\\\\\\xb0\\x10%\\x11\\xa7Hu\\xf8\\x8f\\x8d\\x14$J=ex\\xaa\\xf2\\xbd>\\xe09\\xc5\\xc8t\\n+\\xf1F\\x93\\xab\\x93\\xae,\\t\\x12\\xcf\\xcf5K\\xd1?y\\x0f\\x1cD\\x89f\\rE\\x8e\",\n+            constraints={\"min_size\": 49, \"max_size\": 149},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 9.275040277074964e59,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=92544,\n+            constraints={\n+                \"min_value\": 65535,\n+                \"max_value\": None,\n+                \"shrink_towards\": 113661389,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6422003591372175},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.8607183795777597e307,\n+            constraints={\n+                \"min_value\": 3.8974973233086745e-203,\n+                \"max_value\": 3.799728575108436e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.225073858507203e-309,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud801\udca4\ud801\udc74\ud801\udc41\ud801\udc36\ud801\udc8c\ud801\udc22\ud801\udc0a\ud801\udc2e\ud801\udc50\\U000d2db8\\U000e5b14\ud801\udc79\ud801\udc0a\ud801\udc5a\ud801\udc3a\ud801\udc13\\U000103de\ud801\udc8e\ud801\udc48\ud801\udc4c\ud801\udc98\\U000103d7\ud801\udc58\\U000d3356\ud801\udc7f\ud801\udc51\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            66496,\n+                            79951,\n+                            460163,\n+                            462693,\n+                            521593,\n+                            553129,\n+                            813603,\n+                            954659,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 19,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.failures\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'W{\\x85\\xf5\\x98\\x87~\\xa1\\x8d\\xd2\\x162\\xe2\\xbf\\x9d\\x1eG\\xd6\\x05\\x7f\\xf4\\n`2\\xa2?tvs\\xbf\\xe68\\x0e\\r\\xaa\\xdc\\xa0x9\\xebD\\x002Qf9Q\\xd8\\xae\\xf9T\\xf5\\xbc\\x1e\\x0e\\xc3\\x02\\xb6\\x15\\xa5\\x10\\x19\\x91\"\\x11\\xbd\\xf2\\xa5\\xc0\\xf8\\xed\\x0e\\x10\\xb7N\\xfe\\xe3',\n+            constraints={\"min_size\": 26, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.938041977069319e-157,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.66678628804373e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-11,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 97,\n+                \"shrink_towards\": 108,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000e072c\\U0008c34e\ud822\uddae\ud822\ude57\\U000d0025\\U000be2d0\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([100702, 919531])),\n+                \"min_size\": 4,\n+                \"max_size\": 104,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7813,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 1_054_181_297,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=32296,\n+            constraints={\n+                \"min_value\": 9161,\n+                \"max_value\": None,\n+                \"shrink_towards\": -28442,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00072e10\\U000bce63\\U0008b211\\U00072e1f\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([470446, 802179])),\n+                \"min_size\": 1,\n+                \"max_size\": 101,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-20258,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -17609,\n+                \"shrink_towards\": 31823,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=29158,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.0541786549103595e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 1.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 7.158247951242775e-08,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.162696056774184e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.45501247193590044},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-26974,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -13027,\n+                \"shrink_towards\": 72,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6031585645179462e276,\n+            constraints={\n+                \"min_value\": 6846965886613686.0,\n+                \"max_value\": 8.921594135716685e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.859479249386309e37,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=16262,\n+            constraints={\n+                \"min_value\": 16149,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc8\\x8ep\\xdf\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u1d89\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([7466, 989659])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.0253708944098522e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.6632971031118496e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9c\\x96\\x16!\\x93\\x8f\\x91\\x9e\\x05\\x93\\xdf@\\xd8\\xbb\\xba\\x1bxO\\x03\\xec\\xb8\\xd9\\xe1\\xb8:j\\xa16!\\xbb\\xd4\\x04z)@\\xdf\\xfc7G\\xceww\\xae\\xb3&W\\x04\\xd4\\x81\\xa5\\xb9[\\xcfb\\xfdfs\\xffk\\xdc8\\xd1\",\n+            constraints={\"min_size\": 28, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-6.1435803366524456e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1e-323,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-17492,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x1a\u00e2\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            11884,\n+                            60879,\n+                            180528,\n+                            324213,\n+                            325022,\n+                            347585,\n+                            433684,\n+                            567720,\n+                            575379,\n+                            668910,\n+                            746758,\n+                            846233,\n+                            994193,\n+                            1076825,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 23},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9007199254740992.0,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.4889102049908999},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.1125369292536007e-308},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.863626695982431},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xbb\\xd0\\xdf/m\\xc6h\\xa3\\xf8\\xa6I\\x81\\xe3\\xdd\\x19\\xa5N\\x13T\\xff&yy\\xab\\xc7\\x99\\xbe;Q\\x02\\x17\\xb4\\xff|\\x8c\\xc7y&_\\xc0\\xef\\x8ch\",\n+            constraints={\"min_size\": 43, \"max_size\": 143},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=65535,\n+            constraints={\n+                \"min_value\": 10796,\n+                \"max_value\": None,\n+                \"shrink_towards\": 5_327_952_230_772_338_938,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"k\\xf7g\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"&\\xddy,\\x94=\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-4.617932958902987e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            208043,\n+                            325311,\n+                            330436,\n+                            618714,\n+                            753205,\n+                            755658,\n+                            987115,\n+                            1105723,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-75332542244299.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.00001,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe6u\\xb9\\xa9`\\x87\\xd5\\xe8\\xcb\",\n+            constraints={\"min_size\": 1, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.401298464324817e-45},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.41249993152845843},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud804\udf3d\\U000113fe\ud805\udc29\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([70457, 348800, 521401, 1007079]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-24155,\n+            constraints={\n+                \"min_value\": -22_164_952_874_858_619_206_613_305_805_635_779_841,\n+                \"max_value\": None,\n+                \"shrink_towards\": -50,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-nan,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -6.974702131160276e-213,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.4037610595667479e147,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.254530224372434e306,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-6947,\n+            constraints={\n+                \"min_value\": -13248,\n+                \"max_value\": 23133,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    18318: 0.0005023382001627671,\n+                    19356: 0.0006070558217136919,\n+                    11100: 0.00023950425219783326,\n+                    5514: 0.0005540568373541415,\n+                    -6595: 3.282256304416726e-05,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"E+L\\x1cH0\\x92\\xa5\\xf4\\xa1D\\x89\\xcf\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6688103870526115},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0007f0f4\\x19\ud802\ude74f\\x1e\\x19\\U000770a5\u00cc\u00c8\\x1a\\x11\\x191\u00e1\\n\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1, 572998, 611565, 863291]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\r\\xafV\\x16\\xf3\\xd6`\\xbb\\xc3`\\xfeh11!\\xabp\\xbe\\xf6d\\xff$\\x7f\\x91\\x83\\xd9\\xbbJs\\x978\\xcbu\\xbaa-\\xd0\\xdf\\x17\\x00\\xd3:\\xda'[\\xb4\\x0c\\xa9\\xa9#{\\x903\\\\\\xfc0\\xe2IHv\\xea\\xc5\\xf6\\xf2\",\n+            constraints={\"min_size\": 50, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.0610502117954697e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.4211940007285442e308,\n+            constraints={\n+                \"min_value\": -2.581314021232967e-100,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 8.264550776033023e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-9283,\n+            constraints={\n+                \"min_value\": -17359,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 2.0197174825043028e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7976931348623155e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6968768301134899},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x86\\xe0h8S\\xad\\xae\\x98B\\x9e`V^*\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\")\\xfe\\x8d\\xde\\xf7\\xb2\\xa1\\xa9\\xff\\xb2\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x17\\xd8\\x1fF\\xee\\xc4\\x91\\xdaK\\xe2\\xe5%\\xe7:\\xe7UM91\\xd2\\x81\\xed\\x1f\\xec\\x97_\\xb0.:Y8&\\x89Ni\\x9f\\xd0I'\\xa8\\xee\\x95\\x13\\xca\\xb7#,g<\\xfa(+Ti\",\n+            constraints={\"min_size\": 35, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-21683,\n+            constraints={\n+                \"min_value\": -27705,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7583258670730661e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.529491130654736e-301,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7976931348623157e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.39009840079574876},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=174481459,\n+            constraints={\n+                \"min_value\": -115,\n+                \"max_value\": None,\n+                \"shrink_towards\": -20817,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1024,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001175a\\U00011762\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([71513, 783130, 1055339]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd3B\\xe9\\x03{4\\xf8fT>i\\xd8\\xebz}]\\xd4\\xe4\\xef\\xc3\\x1f\\xc0\\x03\\x14^i\\x10\\x86w\\xa5\\x96\\xa1\\xde\\x192#Y\\xdc\\xa2\\x08\\xca\\x83\\x15\\xf9\\x00=\\xcd\\xc3kj1vs5\\x16d\\x04\\xdd\\x1d*\",\n+            constraints={\"min_size\": 36, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -5.8224788689541176e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 20872.79077788998,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.7850821400256744e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.858496087597486e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-150_622_833_655_906_429_373_883_830_219_215_648_861,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -150_622_833_655_906_429_373_883_830_219_215_626_641,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=70,\n+            constraints={\n+                \"min_value\": 66,\n+                \"max_value\": 100,\n+                \"shrink_towards\": 437770391,\n+                \"weights\": {\n+                    71: 0.21280740893109013,\n+                    86: 0.08293388646500491,\n+                    95: 0.204258704603905,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1915897237887021e308,\n+            constraints={\n+                \"min_value\": 6.019331715698406e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1915897237887021e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud52d\ud4c5\ud435\\U00015e02\ud4d8\ud49f\ud499\ud4e4\ud499\ud481\ud4f9\ud4b0\ud517\\U000847eb\ud4f6\ud4d5\\U00083ca7\ud4ac\ud4ab\ud496\ud500\\U000dfd37\ud4d5\ud4f6\\U00088a3a\ud47e\\U0001651f\ud471\\U000acdca\\U00081e37\\U00080913\ud4d2\ud45c\ud500\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            54325,\n+                            127939,\n+                            177983,\n+                            195280,\n+                            360991,\n+                            425358,\n+                            473850,\n+                            580177,\n+                            678776,\n+                            864198,\n+                            881081,\n+                            951750,\n+                            952102,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 33,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5e-324},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.observations\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-800,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -745,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.100826374317079e307,\n+            constraints={\n+                \"min_value\": -7039338307022746.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.100826374317079e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".worker_identity.\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.2272357340701516e307,\n+            constraints={\n+                \"min_value\": 5.337558655248856e16,\n+                \"max_value\": 5.069861860673748e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5e-324,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7664748926005851},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0007c15d\\U000683d6\\U000683be\\U000683ac\\U0006836a\\U00080a9d\\U00068357\\U00089fa0\\U0006d2f6\\U0008890d\\U0006838d\\U00083668\\U000687fd\\U0007287c\\U0006832f\\U00068342\\U000683cd\\U000683df\\U000683f9\\U0006833d\\U00068420\\U0006837d\\U00068384\\U00068415\\U00068362\\U000683bb\\U0006837c\\U000683e3\\U00088357\\U00068323\\U000683ec\\U000824b8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([426785, 565500, 612131]),\n+                ),\n+                \"min_size\": 15,\n+                \"max_size\": 115,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001ead7\\U0001eb48\\U0001ea9c\\U0001eab7\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [125533, 222006, 426237, 591650, 659323, 980911, 1011701],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u646d\u64a4\u63f8\u6422\u64d2\u6439\\U000a8a36\\U000a03a3\u64b2\u6432\u6464\u6412\u6400\u644a\u63ff\\U0008dcf9\u6485\u6435\ud843\udcc0\u6498\u64d8\ud845\udd0a\u64bd\\U00097403\u6439\u6419\u64ca\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([25567, 736229])),\n+                \"min_size\": 26,\n+                \"max_size\": 126,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x95x\\xc4\\xf2\\x13\\xfa,\\xf9\\xec\",\n+            constraints={\"min_size\": 7, \"max_size\": 107},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00094ab6\\U000a939d\\U00094b08\\U00094abf\\U00094af2\\U00094b2d\\U00094b59\\U00094ad2\\U00094b6e\\U000a0454\\U00094b1c\\U00094aae\\U000dd8f6\\U00094b85\\U00094b7f\\U00094b72\\U00094ab8\\U00094af8\\U000c2494\\U000c148b\\U00094b95\\U00094af7\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([608921, 694066, 790193, 807351, 892103, 907583]),\n+                ),\n+                \"min_size\": 2,\n+                \"max_size\": 102,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\u2072\u2070\u205e\u2044\\U00086cef\u20dd\u20d9\u209b\u20bb\\U000871da\u20ec\\U00069993\u2030\u2017\\u20c5\u2058\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            8192,\n+                            15898,\n+                            65535,\n+                            169586,\n+                            200640,\n+                            304739,\n+                            354982,\n+                            508601,\n+                            532481,\n+                            578942,\n+                            1058709,\n+                            1066806,\n+                            1094474,\n+                            1109667,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 4,\n+                \"max_size\": 104,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6139101631118927},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.3935223992838746e250,\n+            constraints={\n+                \"min_value\": 1.1367440636993484e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.120454842831699e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u04d0\u046b\u03fc\u041c\u04de\ud862\udf35\u049f\u04a7\u0497\u0462\u03fa\\U0006335c\u0469\u045c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [1000, 195238, 290048, 352627, 359704, 521411, 727013],\n+                    ),\n+                ),\n+                \"min_size\": 2,\n+                \"max_size\": 102,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x93?}3\",\n+            constraints={\"min_size\": 0, \"max_size\": 48},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.0927916704775392e210,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -7.067165530276269e-298,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5e-324,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=87_811_277_446_014_054_544_293_870_591_889_753_059,\n+            constraints={\n+                \"min_value\": 26527,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"n\\xe9\",\n+            constraints={\"min_size\": 0, \"max_size\": 8},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004f789\\U00035c43\\U00058de1\\U00035c0d\\U00035ca7\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([220138, 383340, 813979]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x92\\xb7\\xef)\\xaf\\x03B1\\x81\\x82\\xf8U\\xda\\xdb\",\n+            constraints={\"min_size\": 9, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xfe\\x04\\xc6\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-30361,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 47,\n+                \"shrink_towards\": -4,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-2.5760904724034362e293,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.714883139763419e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.955689016674798e119,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4797,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -4689,\n+                \"shrink_towards\": 14317,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=544,\n+            constraints={\n+                \"min_value\": -110,\n+                \"max_value\": 1612,\n+                \"shrink_towards\": 0,\n+                \"weights\": {544: 0.8723531375091969},\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.3988646136530924e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.65270020022289e307,\n+            constraints={\n+                \"min_value\": -1.175494351e-38,\n+                \"max_value\": 1.2823353988782984e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9.65270020022289e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 7.83025999256095e-154,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.3560951283700875e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-0.0,\n+            constraints={\n+                \"min_value\": -2.0280025646515444e-129,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.3183452828782989e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xff\\xc8\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8107262649750813},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x19\\x10\\x88\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=30448,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 65535,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.402823466e38,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.36866482841098e-75,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.6031069199598056e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf5lE]MoJ\\xb9-4\\xc8\\xb7z#(_\\x94u\\x07\\xbc\\x1f9\\xbc\\xa0(wb\\xff\\xcc\\x1b\\xa3\\x83\\xee\\xa4Z\\x98j\\x9f\\xe0\\xa0\\xea\\xc5\\xaaC\\x9b\\xf6c\\x8a\\x9a\\xc7\",\n+            constraints={\"min_size\": 27, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-14690,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -14,\n+                \"shrink_towards\": -24290,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-37,\n+            constraints={\n+                \"min_value\": -24743,\n+                \"max_value\": None,\n+                \"shrink_towards\": -1431,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000c12c3\\U000c1295\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([790994, 1020863])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            119874,\n+                            310798,\n+                            313690,\n+                            486801,\n+                            872481,\n+                            902306,\n+                            1057060,\n+                            1075586,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-3095,\n+            constraints={\n+                \"min_value\": -25615,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([54130, 110972])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"!^'\\xe5\\x1a=\\xc0\\xf7\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.602585236305782e307,\n+            constraints={\n+                \"min_value\": 6.2441638104936936e16,\n+                \"max_value\": 1.6877677774529045e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.116417353485976e306,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"c\\xca\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.1754943508222875e-38,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9.823770383912771e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u02ff\u02db\u0298\u02f9\u0219\u024f\u0259\u02ff\u023a\u0201\\U00051756\u02a0\u02de\u021c\u02d9\u0284\u0282\u0225\u02e9\u02f7\u0273\u02a5\u02b0\u026b\u02e2\\U0007a0f8\u02ef\ud866\ude23\u0274\u0265\u0282\u0279\u02cd\u02f9\u0298\\U0002ef2e\u0293\u7642\u02a2\u0267\u0267\u02f1\u0263\\U000522de\u0249\u023c\u02c4\u027f\u02b1\\U000ceb90\u0267\u02d8\u02cc\u027d\u02d3\u0263\u0212\u0211\u02f2\u0223\u0289\u0212\u0297\u0228\\U000cc6f1\u0285\u02b7\u0212\u022b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([512, 341566, 452074, 877981, 902469]),\n+                ),\n+                \"min_size\": 30,\n+                \"max_size\": 130,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"hypofuzz.test_keys\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=694692605,\n+            constraints={\n+                \"min_value\": -23132,\n+                \"max_value\": None,\n+                \"shrink_towards\": 14380,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc3'\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1_971_405_142,\n+            constraints={\n+                \"min_value\": 1_971_398_224,\n+                \"max_value\": 1_971_430_450,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    1_971_405_142: 0.37938745720615424,\n+                    1_971_414_847: 0.504333138747738,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.541502453367707},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1292,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 30343,\n+                \"shrink_towards\": 80,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf7\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": 7.394352428169296e62,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.750794375645545e-100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa4\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.18511399770653772},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.4751975768742502e111,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 7486308212885222.0,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xfbQ&\\x03\\xbc\\xe3\"\\xef\\xe3\\x90\\x06\\xd6s\\xd2t|\\xbb\\xbb\\xfe\\x1ea',\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7489411825577929},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3286040832710316},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -2.0257829463536486e196,\n+                \"max_value\": 3.445003649634047e-165,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 8.486392484996464e165,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([300, 1024, 384336, 475628, 487586, 1114111]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud856\ude93\ud856\uddbc\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([154015, 245539, 453281, 758975]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4348,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 7765,\n+                \"shrink_towards\": 7152,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3513188357016879},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=31242,\n+            constraints={\n+                \"min_value\": 25321,\n+                \"max_value\": None,\n+                \"shrink_towards\": 3,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=42192,\n+            constraints={\n+                \"min_value\": 28635,\n+                \"max_value\": 65535,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"9\\xafy(,\\xab\\xc1 \\x0fS5\\xd0li\\x82\\xfc\\x9fo\\x94\\xfd\",\n+            constraints={\"min_size\": 14, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00067b7b\u184a\u18b2\u1826\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            6134,\n+                            92988,\n+                            120093,\n+                            314312,\n+                            342375,\n+                            430290,\n+                            479766,\n+                            540087,\n+                            560784,\n+                            648164,\n+                            748395,\n+                            757677,\n+                            769663,\n+                            845828,\n+                            1049607,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6726501931851622},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.541104095317964e307,\n+            constraints={\n+                \"min_value\": 4.8029166352884465e-27,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.487856103198314e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.43863534283864813},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4996,\n+            constraints={\n+                \"min_value\": -15016,\n+                \"max_value\": -102,\n+                \"shrink_towards\": -25816,\n+                \"weights\": {\n+                    -12871: 0.023055769011540692,\n+                    -7264: 0.27731022640128095,\n+                    -7147: 0.19963400458717834,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00ae\\x88\\U000751df\u00b3\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            143165,\n+                            143229,\n+                            224181,\n+                            453392,\n+                            537209,\n+                            622272,\n+                            661319,\n+                            901465,\n+                            1088309,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 2,\n+                \"max_size\": 89,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9077889292987271},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7512383329934293},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6816737381510475},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u829a\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([33197, 174692])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=88,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 31670,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.43411967083843395},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.86632409537864e102,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.583890109055141e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.986833318406035e64,\n+            constraints={\n+                \"min_value\": -5.986833318406035e64,\n+                \"max_value\": 1.160733771144669e-68,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.986833318406035e64,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-10548,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -10487,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud864\ude45\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([168292, 188375, 608865, 933209]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.9955743908475347e307,\n+            constraints={\n+                \"min_value\": 1.0773419699705132e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.9955743908475347e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0009c6c3\u00d4M\\U000c87f0\\x13/\\U000ac54a\u00eaG?\\U0005a8c3\\x00\\U0003494b\\U0005e784-\u00d4\u00b8q\u00d0\\x14\u00b0\\U0005f8ea\\r\u00ba\\x98\\U000ca324Sko7\u00da\\U0009b8a7\\x9b\\U0009ec814E\\U000aa975\u00e0\\x7f.\u00fc\\x1da\\x9fH\\x01t+;\\U00039d94\\x10\u00f7\u00c4B`w\\x9a\\U00035b1d\\U000d633f\u00d5\u00ab\u00c7\\x90\\x07\u00c6\u00da\\n\\x92\u00c3\\x14\u00d8\\U000aa0f4\u00bf\u00d4\u00ec\u00af7nyz\u00dc\u00cf\u00f6\\x7f6\\x7f\\U000a710fV2%\\U00034cf5[\\x11\\U000a842f}\\\\\u00f8\\U0009ab18j\\U0003a5c6\\x87#o\\x96v\\x95[\\x9d\\U000a0c35-\u00f5Y\\U0009eb94\\x8f@|:\\x95\u00da\\x06\\U000d5049F\\U000abf6f\u00aa\\U000c8998\u00ff\\x9beR\\U000341c6\u00ce&\u00dc\u00ef\\x01.w\\U0009dc27\\x00gu\u00d7\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            404,\n+                            211647,\n+                            243366,\n+                            355309,\n+                            395356,\n+                            631371,\n+                            717881,\n+                            815041,\n+                            892587,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 47,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u010d\u0139\ud821\ude7a\u00bc\u0142\u0142\u00f1\ud823\udc63\u016c\u00b1\u013c\u016d\\U000190c1\u016f\u00c7\u0173\u017c\ud848\udefe\u00cf\u00cd\u018f\u00d1\u012a\\U0001a043\u00dd\u062e\u0183\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([145, 8192, 66155, 169288, 347445]),\n+                ),\n+                \"min_size\": 26,\n+                \"max_size\": 126,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.051011985015865e307,\n+            constraints={\n+                \"min_value\": -4.269042049345478e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.051011985015865e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.2336507463148781},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=34495,\n+            constraints={\n+                \"min_value\": 512,\n+                \"max_value\": 1_026_636_567,\n+                \"shrink_towards\": 79,\n+                \"weights\": {\n+                    39732: 0.06939012047808978,\n+                    359791975: 0.043620386119320675,\n+                    8430471: 0.07859920190703668,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.26421388112556593},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8_891_714_524_551_886_040,\n+            constraints={\n+                \"min_value\": -20809,\n+                \"max_value\": None,\n+                \"shrink_towards\": 16233,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.0316509824505799e-190,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.579034745483059e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003e197\\U0003e246\\U0003e1d2\\U0003e277\\U0003e222\\U000fbc7b\\U0003e218\\U000655c4\\U00078451\\U0003e1fb\\U0003e245\\U0003e190\\U0010823b\\U000c31a1\\U000edf18\\U0003e216\\U0003e1df\\U0003e267\\U000429ae\\U0003e1ce\\U0003e237\\U0003e226\\U0003e260\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            254343,\n+                            436414,\n+                            476452,\n+                            576684,\n+                            767018,\n+                            813112,\n+                            899013,\n+                            1094199,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 20,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.016425815777347e-171,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 9.559378672536402e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=67,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -2.8984345571845696e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7976931348623157e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.0999999999999999,\n+            constraints={\n+                \"min_value\": -1.1,\n+                \"max_value\": 1.559022332218942e-116,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.0999999999999999,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-22,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 5765,\n+                \"shrink_towards\": -14363,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.3025243095888437e307,\n+            constraints={\n+                \"min_value\": 6.103515625e-05,\n+                \"max_value\": 2.3544648678471593e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 7.244999396803394e306,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'9?5\\x86\"\\xf4\\x80\\xe0\\xba\\xb1\\x1c\\xa8\\xf1\\t;,iZ\\xf69\\xf9\\x97\\xd7\\xe4\\xd3\\xa4\\x12\\xd4\\xb0W.\\x0e\\xa5\\xc2\\xff_4y\\x88\\ro\\xd4I\\xcf\\xce/\\xba \\xa8]\\xa6\\x9d \\xdf\\xe4\\xd2\\xc5\\xccD\\xe4\\x85\\xe1w\\xcc',\n+            constraints={\"min_size\": 47, \"max_size\": 147},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.6390547965196486e-59},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.7080315007284215e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.3085232760982135e308,\n+            constraints={\n+                \"min_value\": 4.6582020318506934e147,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.0184041638207764e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5054586505134223},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 1.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.4545809271739719},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-33882,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -23002,\n+                \"shrink_towards\": -12966,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u5072\u4fe2\u5079\u5081\u4fcc\\U0004beea\u50a5\\U00054b85\ud81e\ude89\u504f\u5068\u4fce\\U0002faca\u4fe1\u504c\u502f\u5023\u4fe8\u505a\\U00011d4d\ucb19\u5017\\U0003a717\u5071\u4ffe\u502c\u5068\ud888\udebf\u4fb1\u501e\u5078\\U0001f2d5\u50a7\u5068\u4fbc\u50aa\u508f\u4fbc\u5093\u4fe6\u5095\u5080\u5088\u4fc2\\U00042865\u4fff\u4fba\u503d\u4fd7\u5037\u4feb\u50ac\u50a1\u5026\u5099\u5037\u505e\u5034\\U0004f6b8\u5059\u502a\\U0003f936\u5029\\U00039bc8\u4fca\\U00042069\u4fc2\u508b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([20400, 135534, 164024, 369730]),\n+                ),\n+                \"min_size\": 49,\n+                \"max_size\": 149,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 2.2250738585e-313,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 10000000.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.903939517344644e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1000,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 22661,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-30363,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8580655409170945},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=26940,\n+            constraints={\n+                \"min_value\": 26883,\n+                \"max_value\": 27007,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    26958: 0.10626467364075533,\n+                    26972: 0.005537633833233954,\n+                    26961: 0.03749772244372021,\n+                    26905: 0.10283574657415519,\n+                    26938: 0.09527896470797913,\n+                    26993: 0.06959487751976474,\n+                    26940: 0.028256002610996755,\n+                    26907: 0.0063716638218298816,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -7.119702668748342e16,\n+                \"max_value\": 3.4397085511631194e144,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.171294491759337e143,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000f3946\ufbb8\ud821\udf3e\ufb1d\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            64205,\n+                            217842,\n+                            218515,\n+                            275971,\n+                            302124,\n+                            311989,\n+                            418916,\n+                            479815,\n+                            570725,\n+                            635741,\n+                            643472,\n+                            703631,\n+                            727734,\n+                            744688,\n+                            778288,\n+                            781652,\n+                            847462,\n+                            1033932,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"0\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=724,\n+            constraints={\n+                \"min_value\": -17,\n+                \"max_value\": 1069,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3333333333333333},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.38562305507861827},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-147_537_761_692_753_244_946_177_836_208_864_056_560,\n+            constraints={\n+                \"min_value\": -147_537_761_692_753_244_959_758_108_706_170_070_496,\n+                \"max_value\": 1000,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    -90_650_228_720_200_913_910_005_051_130_688_562_258: 0.1453715654684809,\n+                    -147_537_761_692_753_244_959_758_108_706_170_053_231: 0.198273954227994,\n+                    -147_537_761_692_753_244_959_758_108_706_170_070_393: 0.017208972952872364,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".\",\n+            constraints={\"min_size\": 0, \"max_size\": 5},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.8710084307086558e307,\n+            constraints={\n+                \"min_value\": 2.5620130914028944e68,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.2513391790684142e-194,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0185837818206361e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"6\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf7Aw\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.0328996175985559e308,\n+            constraints={\n+                \"min_value\": -1.7976931348623157e308,\n+                \"max_value\": -1.5,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.3645277433575085e-40,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.4383943728698248e-142,\n+            constraints={\n+                \"min_value\": -1.4383943728698248e-142,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.4383943728698248e-142,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00066648\\U000c9416\\U000c8069\\U000c85f3\\U000cb790\\U000bb17b\\U000bacd4\\U000a10b3\\U000666e2\\U000666b3\\U0006669e\\U00066677\\U00066682\\U000666f0\\U000abf69\\U0006664f\\U000666ab\\U000666ce\\U000666d7\\U0006668f\\U000666e7\\U00066642\\U0006664a\\U00066623\\U00066716\\U00066620\\U00066681\\U000666d7\\U00066667\\U00066623\\U00066621\\U000666ea\\U0006661d\\U00067a4f\\U000666cf\\U000666bc\\U0006661b\\U000666f2\\U000cf9b6\\U000d9292\\U0006662f\\U00066685\\U00066696\\U0006662c\\U00066662\\U00066622\\U000666a5\\U00066677\\U000666c4\\U00066711\\U00066637\\U00066642\\U000ba490\\U0006664e\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([419353, 906158])),\n+                \"min_size\": 45,\n+                \"max_size\": 145,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".worker_identity.\",\n+            constraints={\"min_size\": 10, \"max_size\": 110},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"H3e\\xe7\\x98\\xce\\x10\\xc8|W\\xf8\\x1e\\x02\\xa3~8\\x15\\x8d\\x05T\\xd4\\xa1W\\xaao\\xad\\xa7\\xe4\\xc8\\x05f\\x11W\\x9f$e\\xacFM\\xd9\\xbcg\\xea\",\n+            constraints={\"min_size\": 30, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.46128191055556644},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-4.287650614829655e-284,\n+            constraints={\n+                \"min_value\": -2.6336546104200812e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.225073858507e-311,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud883\udff3\u4a40\u4a6f\u4a1d\u4a14\u4acd\u4ac4\u4a77\\U000349a9\u4a18\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [18952, 25516, 138195, 447958, 642149, 664557, 869685],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.225073858507e-311},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xf1\\x0b\\xd8+\\xa3T@`\\xac\\xe5\\xaaR]^\\xb8\\xc6\\x8d%+\\x16\\x15\\x1b\\x97\\x84\\xa7\\xcb\\x88\\xed\\xc2\\xe2\\x16\\x87\\xe7\\xae\\x89\\xd9?\\x9c\"\\\\\\xc7,z\\xb0J\\xb3\\x8d\\xfa\\xfa',\n+            constraints={\"min_size\": 47, \"max_size\": 147},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-414,\n+            constraints={\n+                \"min_value\": -1348,\n+                \"max_value\": -108,\n+                \"shrink_towards\": 9044,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.318589538368472e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7002976836619744e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x99\\x8b\\xb8L\\x02\\xc0\\xa5\\x1e\\xbc!{\\xf7{\\xf4>Fh\\xe1\\x95l\\xdd\\xee\\x92\\x12s\\x10P\\xf4\\xc2\\x84R\\x7f\\x0e\\xf7\\x8e\\xcf\\x84\\x1a\\xd4gp+\\xaf\\x8a]%\\x14\\x9fg\\xff_\\n\\xa1\\xaf\\xb3\\xbe\\xa2\\xb1I{\\xf5\\xd0\\tb\\t\\r\\xfe\\x0b\\tB\\x04\\xf0y\\xd9k\\xf5\\xaaJ\\x9d\\xe05[\\x1dpJ\\xc7\\xd6I\\xcc\\x92\"\\xc7\\xa4\\x91)\\xa4m\\x01,\\xb7]d\\xde\\xd7r\\x1c\\xd5\\x9fo\\x06b.\\xb5\\xec/\\x04^J\\x1a\\xf4!\\xe8\\xc3\\x869\\xc2e\\xdf^\\xda\\x19H\\xb7\\x0e/\\xdf\\x0cC\\x90\\x84\\xc4\\xff\\xb6\\x12\\x14\\xc1\\x9a\\xe6\\x80}\\xf4\\xcdM6\\x01\\x92qI\\x82\\xa8\\xa3\\xfc\\x88\\xa6!\\x10\\xc6y\\xa4\\xcf\\xac\\xa0V\\x11u\\xe4*\\xd0`%\\xcf',\n+            constraints={\"min_size\": 46, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-29043,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 12,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00062846\\U000627c1\\U000627ea\\U000627e4\\U000627ce\\U0006284e\\U000627d1\\U000627fb\\U00062888\\U0007579f\\U0006283f\\U00062884\\U000627b2\\U00088e38\\U000627c7\\U000627bb\\U00062822\\U000627fa\\U000627f2\\U000627e0\\U000627be\\U000627e6\\U000627da\\U000627bb\\U00062814\\U00062844\\U00062793\\U0006279f\\U000627b1\\U0008a181\\U00062797\\U000627d7\\U000627d7\\U00062845\\U000627b9\\U00062889\\U0006281c\\U000780e3\\U000627d9\\U0007a987\\U00085854\\U00082fbf\\U00062794\\U000627ba\\U000627a5\\U0007ea0b\\U00081c67\\U000627f8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([403346, 573162, 1114111]),\n+                ),\n+                \"min_size\": 31,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6349370630898253},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=15129,\n+            constraints={\n+                \"min_value\": 15121,\n+                \"max_value\": 15140,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u2012\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [8192, 354405, 505854, 538276, 822464, 911650, 1111960],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd6B\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=534_978_477_643_090_755,\n+            constraints={\n+                \"min_value\": 534_978_477_643_083_230,\n+                \"max_value\": None,\n+                \"shrink_towards\": -33,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\ufdec\\U00013a98\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([64871, 82540])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud81c\udc8c\ud81c\udcb8\ud81c\udc91\ud81c\udc08\ud81c\udc05\ud81c\udc18\ud81c\udc97\ud81b\udff1\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([94146, 122261, 189360, 276429, 496193]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x95[\\x85\\U000f76ed\\U00083bf0(\\U000929e7\\x1b\u00a6\u00fb\\U00051d98{\\x9b\\U0006acf0\u00e1\\x94\\x81\\U00060dea\\U000a3515\\x98\\U000e50f6\ud806\ude1a\u00ac\u00ce\u00d3d\u00eb\\U0008d807\u00f7\u00d4\u00b4\u00f7|\\U0006d751\\x01\\x13\\x8e\\U00076801\u00c8\\U000a3a77\u00aa\\x13\u00e0\\x93\\U000a415e\\x82^\\x93\\x8f\u00c9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            1024,\n+                            8192,\n+                            79340,\n+                            261812,\n+                            271289,\n+                            321428,\n+                            416505,\n+                            420517,\n+                            488976,\n+                            537332,\n+                            539887,\n+                            554237,\n+                            680394,\n+                            852956,\n+                            864722,\n+                            901022,\n+                            969779,\n+                            988918,\n+                            1020269,\n+                            1045738,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 25,\n+                \"max_size\": 125,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1e\\x14\\xf53\\x83\\xcc\\xa7f\\xdf!\\x19\\xf9\\xe2u\\xb1L\\xf7\\xb4\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 2.225073858507203e-309,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.6591907298883629e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.19271335754118551},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=49315585,\n+            constraints={\n+                \"min_value\": 26166,\n+                \"max_value\": 331344266,\n+                \"shrink_towards\": -32605,\n+                \"weights\": {\n+                    26360: 0.005090116215986435,\n+                    37051887: 0.0014257209123375648,\n+                    61885: 0.00541279449584665,\n+                    67078981: 0.0006065576032948316,\n+                    118951265: 0.004041837429175162,\n+                    60335: 0.003878638171658975,\n+                    32265: 0.0026945582861167745,\n+                    27566: 0.004120093276996708,\n+                    49121: 0.0003556943351552918,\n+                    26406: 0.001886229865348245,\n+                    29212: 0.0042470504076016794,\n+                    74258: 0.005435489555895754,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=10938,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-99,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 121,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=6,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 22,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"X\\xf7\\x00}X\\x87\\xd2\\xe5l\\x92\\x94*)\\x1fmT^\\xa1\\x18\\x99\\x83\\x0cK\\xa3\\xf5\\x93\\x10\\x16\\xcfM\\xc0\\xdf\\xd2\\x0cq\\xe62\\xde\\xe0\\xa7\\xd2\\xcat^\\xa8&\\xfa\\xd2\",\n+            constraints={\"min_size\": 17, \"max_size\": 117},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-17167,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 1_767_731_280,\n+                \"shrink_towards\": 18870,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.026103888545903516},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-33,\n+            constraints={\n+                \"min_value\": -40,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005348f\\U0005348a\\U000534cd\\U000533ee\\U00053455\\U00053487\\U0005343f\\U0009c078\\U00053470\\U0005343a\\U00053435\\U0005344f\\U00053489\\U000533f2\\U000534cf\\U000533f1\\U000534b3\\U000534b7\\U0005346c\\U00058b5e\\U000534b1\\U000534d6\\U00053473\\U000a21ae\\U000ada58\\U00053426\\U00053469\\U00053404\\U00053424\\U0005346e\\U000534c7\\U000534be\\U00053418\\U000606fe\\U00096e29\\U0005340d\\U0005347b\\U000ac6f5\\U0005345f\\U000534b0\\U000534a7\\U000534cb\\U00053409\\U00053466\\U00053434\\U000534e4\\U0005347d\\U00053493\\U000534c0\\U000534bf\\U0007c9d2\\U0005341b\\U0005344e\\U0005343a\\U000534d9\\U0005347b\\U0005348f\\U000534b2\\U0005341c\\U0005f5b7\\U0005e22c\\U00053425\\U00053414\\U00053429\\U000534d4\\U000534da\\U000534bc\\U000534c0\\U00053498\\U00053463\\U00053403\\U000534e4\\U0005344e\\U00053421\\U00053458\\U0005340a\\U000534e1\\U000679eb\\U000534e1\\U00053438\\U00053462\\U000534b7\\U0005345d\\U0005345e\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([340967, 719744])),\n+                \"min_size\": 43,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\r'\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1, 478639, 870642, 1081050, 1104160]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1_847_995_355,\n+            constraints={\n+                \"min_value\": 26130,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.193159931921632},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.225073858507e-311},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x97\\x92\u00b5\\x07\u00ee\\x9c\\x8f\\U000d9727\\U000ffd4e\ud874\udcf4\ud874\udd6cL\u00e8\u00ea\u00e0ZV)\u00f1F\\x1c\\x82\u0100\u00e8\\x8a\u00c0e\u00fe\u00a9@q\u00f6\u00c1r\u00f2\\x97\\x99\u00f9\\x8aq\\U000f0e0a8\\U00038a12H\u00ce\u00c8\\U0005f7e5\u00e9\\U000dce37u\u00e4\ud84c\udc7a\u00cb\ud83d\ude70\\x7f+\u00a9\\U000d9dd4\u00b5\\U000e2ecc\u00e3\u00de\\x9d`\\x9f{~\u00af\\U0004a43b;\u00dc3\\U000d097c\u00a5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            48575,\n+                            80747,\n+                            494340,\n+                            527063,\n+                            539055,\n+                            565378,\n+                            589948,\n+                            617279,\n+                            630569,\n+                            750378,\n+                            874773,\n+                            886405,\n+                            1084568,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 45,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1117860907861791e114,\n+            constraints={\n+                \"min_value\": 1.1117860907861791e114,\n+                \"max_value\": 1.1117860907861791e114,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.3184208717212556e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.29428146152119133},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"x`\\x17\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00ee\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [1, 225919, 362320, 620067, 625063, 630573, 697801, 762168],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=47,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 6597,\n+                \"shrink_towards\": -22345,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-30934,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -30847,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003afcb\\U0003b04f\\U0003d485\\U0003b03f\\U0003b024\\U0003aff4\\U0003f2df\\U0003b00c\\U0003b00f\\U00040c5d\\U0003afc0\\U0003afb8\\U0003b063\\U0003b09e\\U0003afd4\\U0003b068\\U0003b06b\\U0003afb6\\U0003afd2\\U0003b07f\\U00041b62\\U0003b012\\U0003afdd\\U0003b051\\U0003affa\\U0003b074\\U0003b06a\\U0003afd2\\U0003ce40\\U0003be34\\U0003b051\\U0003b004\\U0003b019\\U0003afe2\\U0003b061\\U0003afe9\\U0003afa5\\U0003afa0\\U0003b03e\\U0003c9c5\\U0003b065\\U0003b033\\U0003afa7\\U00041fb6\\U0003b031\\U0003b087\\U0003afd4\\U0003afa5\\U0003afde\\U0003afac\\U0003afe6\\U0003b098\\U0003afef\\U0003afd6\\U0003b060\\U0003b046\\U00040eaa\\U0003afad\\U0003b037\\U0003afa8\\U0003b06f\\U0003b055\\U0003b046\\U0003b085\\U0003b652\\U0003ccc4\\U0003afc0\\U0003afb4\\U0003afa5\\U0003afcb\\U0003afc7\\U00042eaf\\U0003b010\\U0003afa6\\U0003b02e\\U0003d191\\U0003afbc\\U0003b02f\\U0003afa7\\U0003b029\\U0003b039\\U0003b094\\U0003b00b\\U0003b066\\U0003afd4\\U0003afbb\\U0003e086\\U0003b047\\U0003b07a\\U000400e2\\U0003afad\\U0003afe9\\U00041802\\U0003b025\\U0003aff0\\U0003b035\\U00041962\\U0003b049\\U0003d350\\U000411ac\\U000430e4\\U0003affb\\U0003b051\\U0003b08d\\U0003c90a\\U0003afd6\\U0003b08a\\U0003afb0\\U0003afc9\\U0003b025\\U0003b020\\U0003b00f\\U0003b51c\\U0003aff1\\U0003b095\\U0003e6e2\\U0003b02a\\U0003b039\\U0003b049\\U0003afc6\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([241568, 275566, 396417]),\n+                ),\n+                \"min_size\": 45,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7_992_933_906_695_396_170,\n+            constraints={\n+                \"min_value\": -7_992_933_906_695_458_710,\n+                \"max_value\": 2_129_679_838,\n+                \"shrink_towards\": 14489,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-18478,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 31421,\n+                \"shrink_towards\": -32154,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -3341940448416765.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.00001,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u02e0\u02d4\u0232\u02d6\u029a\u0220\u024e\u02c7\u02c3\u02e9\u02f4\u02a4\u028e\u02dc\u023e\u0238\u0271\u02fd\u02d3\u7979\u02fa\u0234\u02a2\u02f4\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([512, 38256, 594886, 688559, 890774]),\n+                ),\n+                \"min_size\": 14,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.355146116597833e270,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 4.500388084802104e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.470378532251904e-309,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9999999999999999},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003b0cf\\U0003b0b1\\U0003b085\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([241726, 625341])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x9f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [0, 124193, 577013, 654103, 731453, 1033079, 1075792],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.observations\",\n+            constraints={\"min_size\": 5, \"max_size\": 105},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0009305b\\U0009834b\\U000f804b\\U00087022\\U000d204b\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([552948, 1056186])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.0144342889355385e213,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.005462018080426e-137,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u36a0\u3725\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([13877, 178124, 292727, 619253, 738830]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-8624,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -20995,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-21131,\n+            constraints={\n+                \"min_value\": -28787,\n+                \"max_value\": 111,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    -16643: 0.17013533163159722,\n+                    -2252: 0.332812786932014,\n+                    -12039: 0.1134235544210648,\n+                    -2280: 0.017013533163159723,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u01aa\u021c\u01f5\u01d7\u016c\ubbd2\u01b4\\U00081e00\u0206\u0248\u01cd\u0256\u0268\u01fa\u01d5\u01c9\u01ce\u01b6\\U0004d396\u0208\u01fa\u0242\\U0007b33b\u01ca\u023e\u0262\u017e\u0254\u01ce\u86d6\u01b5\u022b\u01f8\u021c\u018c\\U000421a4\u0177\u01f6\u0217\u0202\\U00054a0b\ud86e\udfef\u0187\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([364, 616522, 832603]),\n+                ),\n+                \"min_size\": 37,\n+                \"max_size\": 137,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005a21b\\U0005a258\\U0005a250\\U0005a299\\U0005a285\\U0005a23f\\U0006f150\\U0005a1ef\\U0005a264\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([369051, 504098])),\n+                \"min_size\": 8,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0006bc31\\U0006bc80\\U0006bcaf\\U0006bcb4\\U0006c3b2\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([441303, 444004])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 1_414_605_324_542_282_485_793_648_358_305_727_104,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud83a\udcb7\ud81b\ude5b\\U00016eea\\U000539b1\\U00032eb2\ud81b\ude93\ud81b\udf01\\U00016ea2\ud81b\ude84\ud81b\ude83\ud81b\ude8e\\U00016eca\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([93771, 471212, 757518]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"]\\xf4\\x81'\\xf16\\x9c\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x10\\x00\\xcd\\xa3\\x8f\\xabq\\xc6\\xfd\\xaa\\xf3\\xd7S\\xd8\\xff\\x1b\\x1d_u%\\xe6\\x16^\\x9a2PF\\xd1\\xbcX\\x00\\xa9'\\xf6 \\x8b\\xb9f\\xba{\\x10g\\xc3`?\\xe1\\xd77\\xe8\\xdf\\xe5*\\xdcR\\xee\\xb2E\\x1a\\xae9\\xae\\x1f\\x9c\\x9b\\xaf\\xca\\x8a)\\xbe\\xf8\\x8a\\x82if\\xf9\\x93\\x81b\\x9a\\xfej\\xf2\\xb6+\\xa5\\x12\\\"\\x0c\\xdb$\\xbd\\xbe\\xb2\\xb4\\xc6!]\\xfe\\xa6\\xc4\\xe2\\x12V{!l\\x08au\\x07\\xff\\x82\\x7f\\xc2\",\n+            constraints={\"min_size\": 38, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.488860435521068e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5692757233079527},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8fc\\xfbi\\x1e\\xff\\x97\\xd3\\xeav\\xec\\xad,`\\xfeOR/,,#\\xc3\\xeb\\xeb\\xdd:\",\n+            constraints={\"min_size\": 26, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=3_410_290_067_031_427_498,\n+            constraints={\n+                \"min_value\": 3_410_290_067_031_409_741,\n+                \"max_value\": 3_410_290_067_031_435_138,\n+                \"shrink_towards\": 20899,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud854\udc64\ud854\udc39\ud853\udfc7\ud853\udfde\\U0007e424\\U0006326e\ud854\udc3c\\U000370f8\ud853\udf79\ud853\udfd5\ud854\udc6a\ud853\udfe6\ud853\udfba\ud853\udf85\\U000732d9\ud853\udfc3\ud854\udc1b\ud854\udc41\ud854\udc5f\ud861\udcd2\ud854\udc50\ud854\udc65\ud853\udfe5\ud854\udc71\ud854\udc57\ud853\udf7c\ud854\udc3f\ud854\udc27\\U00051ae9\ud854\udc06\ud853\udf75\\U0006e9d5\ud854\udc4f\ud853\udfaf\ud853\udf81\ud853\udfbc\ud853\udfc4\ud854\udc6c\ud854\udc26\ud854\udc5e\ud854\udc6f\ud853\udf7f\ud854\udc43\ud854\udc30\ud853\udfaa\ud854\udc2c\ud853\udfb4\ud853\udf81\ud853\udff1\ud854\udc14\\U0004487e\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([151413, 519490])),\n+                \"min_size\": 25,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"r6\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5e-324},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x80'\\xb5\\xcb\\x9bb\\x8d\\xa3~\\xbf\\x7f\\x08\\xc6\\xb3\\xe2C\\x05\\xd7\\xb9\\x87B~\\xca:DLjG\\xa3Y\\xf53\\x86\\xeb\\x03\\xe3\\x98\\xa4?\\xf1\\xa0*(\\xb8\\xc2\\xb556B\\x93^&60Z \\xbe\\xa6\\xfbU6\\xd9\\x19`\\x1bSc\\xb0eI(W~{3r&j\\xd1\\xa7;\\x16\\xde\",\n+            constraints={\"min_size\": 50, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud875\udd0e\\U0003821f\u01e6\u01e7\u0140\u0175\u0200\u021b\u019b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([300, 478187, 995416]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001a4e9\\U0001a4f6\\U0001a4b5\\U0001a529\\U000d29cb\\U0001a4e3\\U0001a50c\\U00052b31\\U0001a490\ud840\ude1e\\U0001a4ec\\U0001a4e0\\U0001a459\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            107598,\n+                            139727,\n+                            152088,\n+                            306361,\n+                            308120,\n+                            446329,\n+                            586424,\n+                            702700,\n+                            860799,\n+                            973700,\n+                            1034776,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 11,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.4965647150869147e226,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.535746684183441e-28,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-6484,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -27155,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xad\\xe5\\x07f\\x03!g\\x0cMf\\x17n\\xf8\\xec\\x11'p(\\xc9$\\xf9\\x12\\xf9\\xb2\\xfc\\xb38\\xae-\\x9b\\xda\\xa3\\xfe\\x8a\\xaa\",\n+            constraints={\"min_size\": 21, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00d0\\x81\\x81\\x8b\\U000363af\ud84d\uddd2\u00b2\\x94\u00b1=\\x99c\\x1e/\u43e3\\U000e7f0b2\ud80c\udec16\\U00079245|\u00bbM\u00b1\\U000cf03d\u00c5n\\U000d445c\u00f2|a\u00d7\\U000dd9f1F0Z|\u389aS\\x19\\U000e5642\u00f8\\x1d\u9141J\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            92474,\n+                            130149,\n+                            150979,\n+                            156935,\n+                            271178,\n+                            316529,\n+                            318407,\n+                            356225,\n+                            376397,\n+                            428578,\n+                            463135,\n+                            490785,\n+                            496910,\n+                            619201,\n+                            622050,\n+                            749802,\n+                            759809,\n+                            829374,\n+                            913756,\n+                            936550,\n+                            968074,\n+                            969759,\n+                            1032408,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 26,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=17913,\n+            constraints={\n+                \"min_value\": -32,\n+                \"max_value\": 19985,\n+                \"shrink_towards\": -27062,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 7644822920056870.0,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.4432900739845334e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.2254931703165716e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.026756858141544e16,\n+            constraints={\n+                \"min_value\": 6.680130276651438e-236,\n+                \"max_value\": 5.080580523469468e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.907269582857196e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.28219888139756316},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=19415,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 9_202_366_238_778_023_124,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.505242673283729e308,\n+            constraints={\n+                \"min_value\": -1.2285053553486638e142,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.4349319856331987e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-4.112159744628946e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -3.7387627804220664e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3620494451389330.0,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.873273735354358e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.14949021694758804},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0009bd87\\U0009be10\\U0009bd9b\\U000a5d1d\\U0009be05\\U0009bd81\\U000cd2c6\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([638292, 846394])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7_747_876_218_385_873_990,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -23,\n+                \"shrink_towards\": 2_000_922_496,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.2935511453404842e-234},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00087826\\U00068815\\U00060870\\U000910a5\\U00060901\\U00060834\\U00060844\\U00073706\\U00060875\\U0006085a\\U00062de0\\U00060862\\U000608ce\\U00060838\\U000608b6\\U0006086d\\U000608fb\\U00060898\\U00060821\\U000691b5\\U00060876\\U000608cb\\U000608c4\\U000608e8\\U00060832\\U0006087a\\U00060833\\U00082aa7\\U00060867\\U000860bf\\U000608ec\\U000608f4\\U00060878\\U0006087a\\U0006083a\\U00068ee9\\U00063b61\\U000608b6\\U000608a4\\U000608b4\\U000608d5\\U00060867\\U00060859\\U00060850\\U0008f417\\U0006f7e5\\U00060864\\U00062a3a\\U00060832\\U000608a1\\U000608d4\\U0007133d\\U00074e67\\U0006ebe8\\U00060853\\U00073da8\\U0006fa6b\\U000608a4\\U000608e0\\U000608fc\\U0006084b\\U000699f9\\U00060902\\U00060860\\U000608d0\\U000608fb\\U00060897\\U000608de\\U000608b3\\U000608fb\\U00060895\\U00060881\\U000608a1\\U000608d0\\U00060858\\U0006088c\\U000608ed\\U0006089f\\U000608ea\\U000608c0\\U000608a2\\U000608ca\\U00060839\\U000872a7\\U000608cf\\U0006082b\\U000608fa\\U000608f6\\U000608d2\\U000608fe\\U000608aa\\U00071f27\\U000608e3\\U00089959\\U000608dd\\U00060897\\U000818a4\\U00060885\\U0006a80c\\U00060917\\U000608bc\\U000608e3\\U00060878\\U000608fd\\U00060908\\U000608ac\\U00060917\\U00060912\\U0008de92\\U000608ca\\U000608f8\\U00060834\\U00060897\\U000608a7\\U0006086f\\U0006083f\\U000608cb\\U0007793e\\U0006087b\\U000653f0\\U000608be\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([395288, 601839])),\n+                \"min_size\": 50,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.430302397329667e307,\n+            constraints={\n+                \"min_value\": 2.2977568508831188e16,\n+                \"max_value\": 1.4130967583873843e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.3823487456653346e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7276314820986799},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": 0.0,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5e-324,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.9606024239343876e16,\n+            constraints={\n+                \"min_value\": -4.5476711230833656e16,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.9606024239343876e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u6ad0\\x93\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([0, 156496, 252509, 281325, 457969]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u76af\\U000d2fb3\u7603\u7635\ud846\uddf4\u7629\u769c\u7675\u76ab\u76cc\u764f\u7635\ud863\udcf3\u7660\u7699\u769a\u76dc\uf9cf\u76d2\u7623\u761c\u7630\u75f5\u75fa\u76af\u75f3\u75ef\u76c7\u7605\\U000d7440\u7651\u761b\u7681\u7676\u75ed\\U0001b93f\u760d\u763a\u76a1\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([30188, 194947, 350060, 395731, 656823, 908748]),\n+                ),\n+                \"min_size\": 25,\n+                \"max_size\": 41,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u201e\u2057\u204b\\uf81f\u20ec\u2052\u204c\\uf17f\u205d\\U0005075c\u208a\\u20cb\\u2000\u2045\\u200c\\u206d\u2033\ud84a\udead\u2098\u207b\ud872\ude0b\u2018\\u2003\u20b3\\u2073\u20e2\u20b4\u2056\u20d4\u20b5\\U0009221d\u2027\\u20cb\u209c\u20b5\u204a\\U0001bca4\u2043\u2021\u205a\u20e4\u2051\u2026\\u206a\u20d4\u2033\u2089\\u209d\u2031\u20d2\u2057\u20d0\\u2002\u2095\uc447\ud878\udf90\\u20fa\ud85f\ude1e\u20b2\u20d8\\u2068\u2015\u201a\u2059\\u20c5\u208d\u201e\ud807\udf1c\ud836\udced\u2047\\U000198d5\u20dc\u20de\u20e3\\u200a\u2043\u2057\\u20c3\\u202e\u20bc\\u20f5\\U0001ff05\\u2061\\u2028\\u200b\\u206d\ud868\udf71\u2010\u2025\\u20f6\u20f0\u20d6\u2049\u2036\\u20c1\\U000943c2\u20d3\\u205f\u204a\u2021\\U00052361\u20a8\\U0004f007\u2088\ud80c\uddcc\u20ec\u20d1\ua217\\u206b\ud882\ude3f\u20df\ud849\udf86\u2014\\u202e\u2055\u20da\\U00015764\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([8192, 214538, 312998, 348740, 597946, 609019]),\n+                ),\n+                \"min_size\": 44,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.092565397796271e16,\n+            constraints={\n+                \"min_value\": -6.554509381928152e16,\n+                \"max_value\": -1.0360999476806004e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.300488955377704e38,\n+            constraints={\n+                \"min_value\": 4.190020898691274e16,\n+                \"max_value\": 3.402823466e38,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.300488955377704e38,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=22174,\n+            constraints={\n+                \"min_value\": -24212,\n+                \"max_value\": None,\n+                \"shrink_towards\": 88,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=512,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -27,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe6\\xc88\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8894391966373032},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"R\\xee\\xc4\\xa8\\x1aH5\\x01\\x98\\x11fN\\x84\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.0972736860848255e61,\n+            constraints={\n+                \"min_value\": 0.5,\n+                \"max_value\": 5.0972736860848255e61,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.0972736860848255e61,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.4383229643052854},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u50bf\\U00083124\u5012\\U000a0f6d\u5044\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [20446, 74927, 264007, 565590, 574874, 844586, 992177, 1114111],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000b941c\u00e3H\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            142218,\n+                            306145,\n+                            785595,\n+                            788048,\n+                            791975,\n+                            796059,\n+                            886566,\n+                            1031150,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=27196,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.990129199221599},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.025840850181692472},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xbfn\\xd4x/\\n\\xe0\\xd6\\xe1\\xd38\\x10\\xb6\\x8a\\xfflP\\xe91\\xfe\\xc6\\xf3\\x1cp!:\\xa4\\n\\r\\x16\\x0b\\x1dC;\\xea\\xd7\\x9dp\\x95\\xb9y+\\x8b-\\x94\\xbb\\x8c|\\x05G\\xe3\\x84\\x05\",\n+            constraints={\"min_size\": 29, \"max_size\": 54},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.402823466e38,\n+            constraints={\n+                \"min_value\": 2.9811760074831244e16,\n+                \"max_value\": 2.9409519877398663e200,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.145912264576731e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x81\\xaf\\xf6\\xab\\xda\\x0f6\\x03\\xc5$X\\xdd\\x85\\\"\\x8bC~\\x96\\x93|\\x14O\\x93\\xab\\xb7s\\x12?9-\\x07\\xc1\\x85\\xd1\\xde\\t\\xc30\\rz\\xb7\\x8e\\x05\\xa4\\xd8\\xf8\\xb6/\\xd2\\xcf\\xdd\\xbf\\xc8O\\x97\\xfb\\xd6\\x8d\\xa5\\xb1\\xa1\\xfb\\x06+,\\x89X\\xb3\\x0b\\xf5\\x17\\xc0\\xe0g\\xd8\\x0e}\\x1b\\xedX\\xd7L\\xf2\\x1dU\\\\'hr5\\xbd\\x86\\xfa\\xed\\r\\\\g\\x8b\\xa3\\x9fb\\x9f\\x1e9?\\xe1\\x10\\x85T\",\n+            constraints={\"min_size\": 34, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9575618650202469},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xd5\\x8e\\x9d\\xc5i\\x0eQe\"J\\xc2\\x8d\\xb8z\\xfa\\xfa\\x8c\\xe9Yp\\x85{\\xbc\\xd3\\xd8\\xa5\\xde\\xe9\\x8f\\x9d\\x83<\\xd4U\\xe6\\r\\xeb\\xf4{&fW5\\x84\\xfb*O\\x0f',\n+            constraints={\"min_size\": 34, \"max_size\": 134},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -1.0090552289510208e16,\n+                \"max_value\": 1.7053233333359358e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.024938919737318e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x9a\\xecK\\xa4\"zh\\x81\\x99\\x06\\x88}]\\x04<hp\\x8d\\xbd\\x1d\\xf6\\x13\"8\\x8fD\\x90\\xf3\\xe75\\x07X+\\xb2j2\\xffs\\x8b\\x9aQ\\x8c\\xcb\\x88\\x05=\\x9bw_\\xf8]t\\xf2\\xad`\\xb0\\x99\\xe7\\xee(\\x80\\xd7\\x1bVY\\x83O\\xff\\xe9>\\xa3,P\\x0f\\xb0[$\\x07)\\xd8\\xb9\\xba\\xf8\\xa9\\x12t\\xfc',\n+            constraints={\"min_size\": 24, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'5P\\x1cp`\\xdbg\\xc1\\xae\\xcc\\xad\\xd4\\t\\x08\\xcc\\xee1\\xcd\\x1cY\\x04|{#c\"\\xcc\\xee\\xd52\\xf4\\xf0\\x18\\xcfx',\n+            constraints={\"min_size\": 30, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 6.103515625e-05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7924,\n+            constraints={\n+                \"min_value\": -7988,\n+                \"max_value\": 3_160_972_023_673_479_664,\n+                \"shrink_towards\": -3_604_154_326_302_969_075,\n+                \"weights\": {\n+                    2_579_709_190_383_346_018: 0.02564692297745282,\n+                    31035: 0.30595216373288164,\n+                    45563: 0.2963073281435713,\n+                    -7924: 0.37109358514609425,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf9-^\\r\\xe1h\\x01\\xe2Q\\x14\\x04\\xeeA\\x81\\x86\\x96\\x07\\x06\\xdc\\xc9W\\xfb3.\\xeeH\\x01F\\xd6\\xfb\\xccG\\xa7\\xe0\\xa1\\x14\\xd3\\xc0\\x15\\x04\",\n+            constraints={\"min_size\": 29, \"max_size\": 57},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-12067,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -11965,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000557e3\\U000558d1\\U00055889\\U00063ed8\\U00055861\\U00055857\\U00055803\\U000557e3\\U0005581f\\U00055841\\U0009bd55\\U000558b1\\U00055872\\U0005582a\\U0007326d\\U000557f4\\U0005583f\\U000558b6\\U00055845\\U00055893\\U000558d7\\U0005589f\\U0005582c\\U00055818\\U00055803\\U000557f5\\U000558da\\U000558e1\\U000557e8\\U00055864\\U00055803\\U0005fa08\\U000558cd\\U00078aa4\\U00076aed\\U000a478b\\U000557fc\\U00055808\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([350178, 714392, 924457]),\n+                ),\n+                \"min_size\": 35,\n+                \"max_size\": 60,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'=-\\xba\\xb1\\xea\\x9b\\xb3\"0^\\xe1\\xed\\xc3\\xf5$\\xf9\\x02\\x9e.\\xcc\\x06\\x89\\xb1F\\x82=\\xf0\\xc86\\x85JH\\x19\\xfa\\xfcmr\\xb7#\\x97\\rK\\xc9j\\xad^!_\\x9fQ\\xd0\\x15',\n+            constraints={\"min_size\": 49, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xed\\xd7\\xd7\\x036\\xee\\xdfN\\xa2y\\n\\xdb\\xf3\\xc1A\\x08N\\x90l\\x18\\x96\\xdb\\x1f\\x93\\xaf\\xba\\xd52\\x83\\xf6\\xcb\\xf1\\x9fP\\xd3\\xeb.\\x8c[\\x86\\xf9\\xad\\x95Z)\\x12\\x90\\xa2\\xe0\\x8a\\xd1\\xc5\\x8f\\xcd\\x81q\\xd0+h`u\\xf0\\x9e\\xf2!;\\xe1\"%\\xc2*\\xe5\\x8a^~wr\\x80',\n+            constraints={\"min_size\": 39, \"max_size\": 139},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-59,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -11385,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7568303422410456e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00090ec1\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([593384, 808278, 868609]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.995140026872172e16,\n+            constraints={\n+                \"min_value\": -2258297696095694.0,\n+                \"max_value\": 3.4135315910834492e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1e-05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u029e\u0211\u0237\u0294\u0228\u0254\u02a4\u02db\u02b6\u0232\u0241\u0288\u028f\u0237\ud852\udc24\u02bd\u02c9\u0214\u02df\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([512, 176044])),\n+                \"min_size\": 8,\n+                \"max_size\": 108,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00077899\\U00077922\\U000778ad\\U0008182f\\U00077917\\U00077893\\U000a8dd8\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([489574, 716464])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-591,\n+            constraints={\n+                \"min_value\": -4844,\n+                \"max_value\": 77,\n+                \"shrink_towards\": -27889,\n+                \"weights\": {\n+                    -4578: 0.04400264097867551,\n+                    -4280: 0.075914074477158,\n+                    -3235: 0.021135055874168893,\n+                    -355: 0.07953202527812196,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.543166881128822e16,\n+            constraints={\n+                \"min_value\": 3.424087087421633e-149,\n+                \"max_value\": 4.843603837210323e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.543166881128822e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'K\\xa0\"\\xd4\\xc05r\\xfe\\x04\\xb9',\n+            constraints={\"min_size\": 5, \"max_size\": 105},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-4.444068624956755e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-568684258,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -8,\n+                \"shrink_towards\": 30090,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-7681251402197665.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.7976931348623157e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.776949888652431e-40,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0465\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([1000, 98623])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 3.529247958414587e-221},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-5_768_091_369_705_219_537,\n+            constraints={\n+                \"min_value\": -5_768_091_369_705_258_621,\n+                \"max_value\": -33,\n+                \"shrink_towards\": 68,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-11359,\n+            constraints={\n+                \"min_value\": -31513,\n+                \"max_value\": -72,\n+                \"shrink_towards\": -3_691_612_895_812_882_230,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00036931\\U000368c5\\U00036895\\U00064cf2\\U00036925\\U000368d9\\U000621ea\\U00036935\\U0006065d\\U000368bd\\U0003684c\\U000728ca\\U00066b2c\\U00036907\\U0004ecc0\\U00079cf1\\U000368bc\\U0003690f\\U0003692e\\U0003685b\\U000368ea\\U00050feb\\U000368e3\\U00036852\\U00036936\\U0003687e\\U000368ff\\U000457d0\\U000368f7\\U000368a3\\U00070cc8\\U00073120\\U000368ba\\U00036841\\U00036850\\U00036926\\U0004fecc\\U0003687b\\U000368fd\\U0003689b\\U00036856\\U0003689b\\U000368ba\\U000368c3\\U000719af\\U00036902\\U0003685c\\U000368a2\\U00036920\\U0003692b\\U00036862\\U00037a65\\U00069e38\\U00063e52\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([223294, 521471, 611052]),\n+                ),\n+                \"min_size\": 44,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.05},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00056da2\\U00056d95\\U00056d61\\U00058946\\U0007ddc6\\U00056cce\\U00056cf4\\U00056d6a\\U00056d03\\U00056d98\\U00056d45\\U00056d9c\\U00056cf3\\U00056dad\\U00056db6\\U00056ce4\\U00056d29\\U00078fe6\\U00056d0c\\U00056d06\\U00056d70\\U00056cec\\U00056da3\\U00056d4f\\U00056d9a\\U00056d21\\U00056cd7\\U0007eab4\\U0007b7dc\\U00056d12\\U00056d73\\U00085800\\U0008a9ba\\U00061712\\U00056d64\\U00056d76\\U00056ccb\\U00056dd9\\U00056dab\\U00056da6\\U00056d4e\\U0008373d\\U00056cdf\\U00056ce4\\U00056cd0\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([355527, 400888, 466843, 599234, 906521]),\n+                ),\n+                \"min_size\": 39,\n+                \"max_size\": 75,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=22947,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.11231443748127304},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.32713435372794614},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-29188,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -6121,\n+                \"shrink_towards\": -11090,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd1\\x84k\\x93\\xecZ\\x99\\xfc\\xd7m\\x85\\x04\\t\\x15\\x9aR\\x95\\xc4\\xf8\\x9a\\xb5\\xf0+\\xe2\\xe9\\xdd\\x0c\\xd5\\x88\\xa5Q~tp\",\n+            constraints={\"min_size\": 30, \"max_size\": 130},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=82_872_983_460_284_085_870_900_517_233_932_940_561,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 28,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=16894,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 8,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud822\udc42\ud822\udcb2\ud822\udca4\\U000c0857\ud822\udc7e\ud821\udfec\ud822\udc90\ud822\udc79\\U00033d8c\ud822\udc91\\U0001ddb8\ud822\udc3f\ud821\udff3\ud822\udcb1\ud822\udc43\\U000187f8\ud822\udc97\ud822\udc61\ud822\udc26\ud822\udc28\ud822\udc33\ud822\udce0\\U000ccc62\ud822\udc25\ud851\udc79\ud822\udca1\ud822\udc9b\\U000c553a\ud822\udc3b\\U0003385d\ud822\udcc5\ud822\udc52\ud822\udc79\ud821\udff7\ud821\udff7\ud822\udc56\ud822\udc55\ud822\udce1\ud822\udce6\\U0003f3f4\ud822\udce9\ud822\udc26\ud822\udc11\ud852\udc72\ud822\udc2e\ud822\udc2a\\U000187ff\ud822\udc29\ud822\udc72\\U000cd3d5\ud822\udc7a\ud822\udcaf\ud822\udc13\ud822\udce9\ud822\udc8f\ud822\udc10\ud822\udc56\ud822\udcce\ud822\udc5b\ud822\udcd4\ud822\udc66\ud822\udc6b\\U000cabe2\ud822\udc26\ud822\udcad\ud822\udc97\ud822\udc11\ud822\udcac\ud822\udc31\ud822\udc38\ud822\udc20\ud822\udc85\ud822\udc27\ud822\udc63\ud822\udcbe\\U000cccaf\ud822\udc0c\ud822\udce3\ud822\udc42\ud822\udc42\ud822\udca0\ud822\udcb8\ud822\udcbf\ud822\udcb7\\U0003c1aa\ud821\udff2\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            100330,\n+                            124450,\n+                            138825,\n+                            151050,\n+                            199746,\n+                            259606,\n+                            301021,\n+                            305181,\n+                            774048,\n+                            858117,\n+                            977256,\n+                            983021,\n+                            1073416,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 17,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7_360_972_005_696_612_222,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.023032220453115263},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9281743120010426},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=23876,\n+            constraints={\n+                \"min_value\": 23818,\n+                \"max_value\": 23915,\n+                \"shrink_towards\": 0,\n+                \"weights\": {23876: 0.6023472381017947},\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u012c\u0204\u0180\\U000dc911\u0172\u015c\u0144\u01c3\u0150\u01b8\u0135\\U00041424\u01ec\u013d\u0184\u0222\u01b6\u01f6\u01fd\\U000b651d\\U000f4790\u0207\u01f9\\U00041f5d\u0139\u0208\u0146\u01ea\\U00108087\\U000ce677\u0186\u01e0\u01e5\u01f9\u0220\u01ee\\U000b8d59\u018b\u015a\ud820\udd52\ud850\udcb4\u0218\u01e4\u0211\u01f0\u017b\u0216\u01d9\u0173\u016a\u0188\u018c\u01ad\u01b2\u01ab\u01da\u01b6\u01d4\\U00098547\\U000457bd\\U000d3240\u0197\u0201\\U00045e86\u01d5\u0192\u0193\\U000dae8c\u0206\\U000c4324\u01fd\\U00049e48\\U0010cbc6\\U00040894\u0173\u021a\u0190\u0141\u0145\u0159\u018c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            300,\n+                            36409,\n+                            86811,\n+                            103879,\n+                            138326,\n+                            158698,\n+                            249316,\n+                            318099,\n+                            538459,\n+                            586241,\n+                            612056,\n+                            650524,\n+                            681836,\n+                            777126,\n+                            778634,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 49,\n+                \"max_size\": 149,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.5984607979757442e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=10019,\n+            constraints={\n+                \"min_value\": 10004,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.42872791493171636},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-4.489292881796294e16,\n+            constraints={\n+                \"min_value\": -4.91816786387378e16,\n+                \"max_value\": -9007199254740992.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": 1.8777636019889736e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.419102973821252e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u020a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([404, 298390, 774386, 874985])\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 88,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5905646415502216},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf0\\xbf\\xba\\xad\\xdd\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.2374020321064446e307,\n+            constraints={\n+                \"min_value\": 9.229821664239714e165,\n+                \"max_value\": 3.7762776007567335e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.2374020321064446e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=87,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 110,\n+                \"shrink_towards\": 16558,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8048,\n+            constraints={\n+                \"min_value\": 99,\n+                \"max_value\": 8192,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5158474549567377},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1024, 183300, 205158, 408530, 912906, 1114111]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1259472439986982e308,\n+            constraints={\n+                \"min_value\": -2.6217940153107204e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.9099752852780166e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5694856931789977},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"u\\xe8\\x95,~\\xdd\",\n+            constraints={\"min_size\": 6, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5565701727217226},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=5233,\n+            constraints={\n+                \"min_value\": 81,\n+                \"max_value\": 16400,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    5233: 0.09375698043719757,\n+                    3312: 0.0002203837688014891,\n+                    12705: 0.21035159148375795,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x99\\xaa\\xe7\\xb2\\x95l\\xa3\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x90F\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-13989,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 115,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa1P\\x98\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"+X\\xdd\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-9285,\n+            constraints={\n+                \"min_value\": -17132,\n+                \"max_value\": 54,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 6.412202585133952e-48},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.735772323371514e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.586841821852942e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.8236468592789916e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7276503354152969},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.043748323993786e307,\n+            constraints={\n+                \"min_value\": -5.547537061596454e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.192092896e-07,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x93\\xedq\\xe9\\xa7]4\\xa4q\\x10\\xe9\\xe6}\\xe4y\\xffh8\\xb2\\x98\\xec\\x07\\x08S(\\xc1-Y\\xb5\",\n+            constraints={\"min_size\": 17, \"max_size\": 117},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1e-05},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\ue746\\ue6d4\\ue6e2\\ue72c\\ue730\\U00019c7b\\ue73d\\ue6c3\\ue6bd\\ue697\\ue6a3\ud843\udeb4\\ue6de\\ue67c\\ue6d8\\ue655\\ue708\\ue6ab\\ue6c7\\ue722\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [58952, 171230, 809223, 809992, 847837, 894779, 1057614],\n+                    ),\n+                ),\n+                \"min_size\": 14,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.5914240180575804e308,\n+            constraints={\n+                \"min_value\": 2.00001,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.5914240180575804e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.002748972167886388},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0009e29a\\U0009e2f2\\U0009e2ae\\U0009e291\\U0009e2cc\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([647750, 1000604])),\n+                \"min_size\": 0,\n+                \"max_size\": 84,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=58028,\n+            constraints={\n+                \"min_value\": -7200,\n+                \"max_value\": 1_938_723_984,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud865\udcb3\ud865\udcf0\ud865\udd19\ud865\udd66\ud865\udcb5\\U000d7e98\ud865\udca9\ud865\udca1\ud865\udc9a\\U00071a9d\ud865\udd29\ud865\udd64\\U000e4fb5\ud865\udd48\ud865\udc98\ud865\udcf3\ud865\udd56\ud865\udcdf\ud865\udc87\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            169089,\n+                            255645,\n+                            272825,\n+                            404757,\n+                            441001,\n+                            488531,\n+                            594142,\n+                            763956,\n+                            814267,\n+                            1112813,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xab*\\xe5\\xbf$Q\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=118,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 26049,\n+                \"shrink_towards\": 18242,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6649103466931506},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8a\\x0b\\x89\\xd3~s\\x1a\\x10\",\n+            constraints={\"min_size\": 0, \"max_size\": 42},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005c2bb\\U0005c371\\U0005c2eb\\U0005c2af\\U0007334a\\U0005c2bc\\U0005c338\\U0005c2f3\\U0005c316\\U0005c319\\U0005c29c\\U00073d2e\\U0005c2ee\\U0005c2bf\\U0006a6fb\\U0005c325\\U0005c2fe\\U0008cd4e\\U0005c359\\U0005c2de\\U0005c2d1\\U0005c29e\\U0005c2a2\\U000aa67a\\U000634e3\\U0005c32e\\U0005c2b3\\U0005c2dc\\U0005c27e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([377458, 749783, 1098897]),\n+                ),\n+                \"min_size\": 28,\n+                \"max_size\": 128,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -5e-324,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.5044244430883284e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9828826050981583},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5.0771511288448956e-85},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-19931,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -65,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8714,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 24589,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.413509836852522e100,\n+            constraints={\n+                \"min_value\": -8.294413303616123e100,\n+                \"max_value\": 3.2417982614330495e-192,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.1028931524743175e100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.70557606809417e307,\n+            constraints={\n+                \"min_value\": -7.467005339396388e-33,\n+                \"max_value\": 1.598478209880188e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.9994590347655496e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.5665302520320265e-128},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=25046,\n+            constraints={\n+                \"min_value\": 24995,\n+                \"max_value\": 25080,\n+                \"shrink_towards\": 408,\n+                \"weights\": {\n+                    25018: 0.030884397817733923,\n+                    25070: 0.0002219809301247217,\n+                    25027: 0.04804383156929758,\n+                    25014: 0.05611188686145872,\n+                    25065: 0.0030884397817733927,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7100788362083911},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00c8\\x89\\U000cc9eft0\u00bf\\x0e\u00ef\u00aau\\U0004995a\\x9f\\U000bed16\\x1d\u00f8\u00a8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            20136,\n+                            210488,\n+                            409160,\n+                            436550,\n+                            503904,\n+                            687245,\n+                            901563,\n+                            960402,\n+                            971254,\n+                            1016760,\n+                            1026292,\n+                            1110447,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 12,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.7372285329045437e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.950853058379288e307,\n+            constraints={\n+                \"min_value\": 0.5,\n+                \"max_value\": 1.2873753182904118e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.876986830343286e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud835\udf87\\U00043c13\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([120469, 400066, 548165, 695915, 778852, 781990]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud83a\udc4e\ud83a\udc39\ud83a\udd0d\ud83a\udc58\ud83a\udcb6\ud83a\udcb5\ud83a\udcc9\ud83a\udc7d\\U0001e8e5\ud83a\udc4f\\U0008e9fe\ud83a\udc6c\ud83a\udc9a\\U0001e8e2\ud83a\udc88\ud83a\udc3a\ud83a\udd03\\U00099365\ud83a\udc61\ud83a\udd10\ud83a\udcb5\ud83a\udcd3\\U000cd2ac\ud83a\udc36\ud83a\udc85\\U0001e8d8\\U0001e8c6\\U0001e8f9\ud83a\udc74\ud83a\udc8e\ud83a\udc3d\\U0001e8db\ud83a\udc52\ud83a\udd13\ud83a\udc18\\U0001e8d7\ud83a\udc88\\U0001e8f4\ud83a\udc73\\U0001e8fc\ud83a\udd0e\ud83a\udc57\\U000b489c\ud83a\udd0e\\U000b0588\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([124949, 215885, 505429, 885279, 1114111]),\n+                ),\n+                \"min_size\": 44,\n+                \"max_size\": 144,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=15130,\n+            constraints={\n+                \"min_value\": -36,\n+                \"max_value\": None,\n+                \"shrink_towards\": 85,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.2352945233672329e308,\n+            constraints={\n+                \"min_value\": 6.884886538615113e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=27227,\n+            constraints={\n+                \"min_value\": 27217,\n+                \"max_value\": 27263,\n+                \"shrink_towards\": -4_411_257_536_737_481_843,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-9245,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0753\u0749\u074e\u070a\u06ef\u06b2\u06cd\u0745\\U00072fcc\u0757\u074a\u06e5\u06ca\u078c\\u06dd\u0733\u06ed\u06fb\u071e\u0768\\u070e\\u074b\u0757\u075d\u06b4\u078a\u06dc\\U0001a949\u073d\u06f4\u06ab\u0700\u0745\\U000b4459\u070c\u0753\u0732\\U00033c38\u06f1\\U000d8f2b\u0707\u06cf\u0739\u06be\\U0005dc9f\u06c7\\U000660df\\U0003a4da\u0748\u06a3\u06ba\u070a\u06ec\u078a\u06ca\\u070e\u06df\u0710\u0771\u0785\\U0004d60c\\U000c10d7\u0797\u06f2\u06e8\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([1694, 1014110])),\n+                \"min_size\": 28,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6557248346004639},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u24db\u2515\u24df\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([9261, 76052, 285780, 504288]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.6144489134634265e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 3.0003253407608873e-150},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1411940989533795e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"q*W\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ufe9b\ufe60\\U000c0e3e\ufe6b\ufe7b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [64991, 299238, 507341, 577483, 694484, 906950, 1011512],\n+                    ),\n+                ),\n+                \"min_size\": 2,\n+                \"max_size\": 102,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.062008758205149186},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=28130,\n+            constraints={\n+                \"min_value\": 24050,\n+                \"max_value\": 29082,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    29082: 0.00034077301517127846,\n+                    27303: 0.0025148914574227113,\n+                    26016: 0.002271820101141856,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-2.779396803869614e37,\n+            constraints={\n+                \"min_value\": -8.352970783543669e37,\n+                \"max_value\": -2627292783403986.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6.3317723212578776e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.46308617595512536},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9924839451226168},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-25320,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -25268,\n+                \"shrink_towards\": 29878,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-151_526_316_095_019_799_677_213_228_655_598_041_695,\n+            constraints={\n+                \"min_value\": -151_526_316_095_019_799_677_213_228_655_598_102_310,\n+                \"max_value\": -29642,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-11098,\n+            constraints={\n+                \"min_value\": -19540,\n+                \"max_value\": -8613,\n+                \"shrink_towards\": -10988,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf9\\x8e}M\\xa7\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=10234,\n+            constraints={\n+                \"min_value\": 10007,\n+                \"max_value\": 1_954_610_113,\n+                \"shrink_towards\": 1874,\n+                \"weights\": {\n+                    10101: 0.04731744901781743,\n+                    11410: 0.12437510847579694,\n+                    69178: 0.07743995033837749,\n+                    10007: 0.063091339782701,\n+                    638082205: 0.08484369244334751,\n+                    1_632_412_769: 0.04206089318846733,\n+                    1_622_653_605: 0.038523879018200494,\n+                    10234: 0.05036824942228809,\n+                    394638671: 0.063091339782701,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7136501376174683},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.981063039962216},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.1754943508222875e-38},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.2194307519384267},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -3.5729668606301216e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.8725389931339257e233,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.observations\",\n+            constraints={\"min_size\": 22, \"max_size\": 122},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x0c\\x9cfyW\\x0bC\\xaa\\xff$n\\x0e\\xf3\\xfd\\xc24>\\xcf\\x07\\xd3\\x81\\x85\\xe9Bf${\\xd0\\x9b\\xffB\\xef\\xe5\\xbc\\x1d\\xf7\\xa6\\x1b\\xfd\\xd4z\\x90\\xb3\\xcc\\x01&\\x98\\x9a\\xceG\\xb2\\x824\\xff\\xeeoy\\x99\\xcf\\x99Z\\xf2ep\\xf5\\x85\\xebW2h\\rI9/\\xf3\\xe2\\x9a\\x7f\\xe4\\xa0<\\xf2b\\xaf\\xf8hL\\x9e1\\x98\\x12\\xc5\\x99\\x03\\x02\\x9c\",\n+            constraints={\"min_size\": 45, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=13361,\n+            constraints={\n+                \"min_value\": 63,\n+                \"max_value\": 25083,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x95mx\\xc3\\x86ai\\xc4\\xaf>#\\xecl(\\x0f\\xd9\\x0cp\\x10\\xd4s\\xd8\\x9c\\x88\\x15DamK\\x8b\\x8f\\xbdqiX\\xd9D\\x8e\\xfbD?\\xf6\\xfc\\x8a\\xd7>\\x89I6\\t\",\n+            constraints={\"min_size\": 48, \"max_size\": 148},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x7fk\\x951\\xb5\\xf9\\xceg\\x0bm\\xd4\\xe4\\xd6\\xa5\\x98\\xe9\\xd1\\xba\\xd1L\\xbd\\xd1F\\xd9\\x17\\xd3\\x1f\\x1a\\xd0\\x8d\\xb1\\xcc[\\xd7h\\xe9^\\xeb\\xfc\\x8cu\\xed\\xd0\\xe6\\x13\\x19:Kn2\\xea\"Y\\xe0\\xb3\\x02w\\x90T7$\\xb0\\x7f\\xf1\\xd7\\xa1TrIS\\xd9\\x04\\xf2\\x12C{\\xf1\\x16\\xc7\\xc0\\xc6\\xc6\\xc0y\\xcbw\\x9by\\x8d\\xbd\\x0f\\x840\\xe8\\xf3\\x90\\xf1<\\xcd\\xd3\\xf7\\x9d*(p-[\\xcb\\x12\\x1a\\x80\\x1be\\x8c\\xda\\xc6\\x0e>\\x89n\\x93=\\xa5\\x8f\\xf4',\n+            constraints={\"min_size\": 43, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4331,\n+            constraints={\n+                \"min_value\": -6353,\n+                \"max_value\": 8192,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=6040,\n+            constraints={\n+                \"min_value\": 5341,\n+                \"max_value\": 7680,\n+                \"shrink_towards\": -28304,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7066564882205647},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x0e\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.20263098623054338},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=30418,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 21561,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00064698\\U000a1dce\\U00064664\\U000645ed\\U00064622\\U0006b7d0\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([411063, 1067709])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8975926178824039},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000512b5\\U000512a3\\U000958ce\\U000d2ef7\\U0005129f\\U00087c9d\\U00051220\\U00051244\\U0007a1b1\\U0005121c\\U0005128a\\U00051254\\U000512b6\\U00051266\\U0005130e\\U0005127a\\U000512d7\\U000512f1\\U00051302\\U00051293\\U000512dc\\U000512fb\\U00051240\\U0005128c\\U00051291\\U0005fd1f\\U00051239\\U00085fc8\\U000a33a1\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([332306, 1000676, 1086091]),\n+                ),\n+                \"min_size\": 20,\n+                \"max_size\": 120,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000554ac\\U000554a2\\U000a43dc\\U000a95a8\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([349214, 717026])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"O\\xab\\xfc\\xee\\xf9\\x05[\\xa1:j\\xb3\\r_\\x8d\\x15\\x81\\xa94n\\xf6,\\xb03\\xde\\x16\\xfc\\xfdX\\xa51\\x10\\xcd\\x0b\\xc9\\xb4\\xac\\x16\\x99\\xa6\\xd1\\xd5:\",\n+            constraints={\"min_size\": 26, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.401298464324817e-45},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xdc\\xfe\\x7f\",\n+            constraints={\"min_size\": 2, \"max_size\": 102},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.observations\",\n+            constraints={\"min_size\": 21, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.984793241927806e44,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.8188281474813041,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -235854046244609.88,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.666814970586866e304,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.231170764642696e16,\n+            constraints={\n+                \"min_value\": -2.0790044594248573e-71,\n+                \"max_value\": 3.0006520392079744e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.573053727279362e-229,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 7.153836320849635e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u02b0\u02a5\u0258\ud85a\udf6b\u02cb\ud856\udcd6\u025e\u02ec\u029c\ud875\udcb2\u02a6\u02c1\u025d\\U00092636\u1fa3\u02da\u0288\u02dd\u022c\\U000877ba\u02f2\u027c\u02df\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([512, 739865])),\n+                \"min_size\": 23,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x10\\xde\\x7f\\xa7\",\n+            constraints={\"min_size\": 0, \"max_size\": 72},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=23487,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 32299,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2_144_849_422,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -1_070_076_046,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -4.225850036885546e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.808846955206613e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 58,\n+                \"shrink_towards\": -61,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x80\\x86\\xa9\\xe8\\xdf\\xf3\\t\\xeem\\xb3\\x9a\\x080'\\x1a\\t\\xf4\\x1a\",\n+            constraints={\"min_size\": 3, \"max_size\": 103},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1000,\n+            constraints={\n+                \"min_value\": -30203,\n+                \"max_value\": 3779,\n+                \"shrink_towards\": 55,\n+                \"weights\": {-17735: 0.07890636303047281, -275: 0.039781302541959426},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1a\\xb8ez'\\x17\\x11\\x05f\\x8c\\xeaJ\\xcc\\xfd\\xc3\\x0f8\\x85\\x89\\\\F\\xc7,\\xd36\\x06\\xceEO\\xde\\xda_\\x9bc-G\\xef\\xf1LJ\\xe1\\xc3iI)B\\x0bvG\\xa5W\\xaci\\xa2FoR2\\x19\\xb5\\xc3\\xdcTJ\\n\\x15\\xf4\\xac\\x04R\",\n+            constraints={\"min_size\": 24, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x7f\\xa1\\\\\\xa07cF\\x9a\\xff\\x8b?\\xca\\x0f\\x9dejk>w\\xf9\\xb9T\\x95\\xe1\\xabR\\x92\\xe2\\x82$k\\xeda\\x98\\xa3\\xc2\\x0e2@\\x96\\xdd\\xa8\\xcf\\x99_\\x03\\xceE\\x06\\xdfu\\xdc\\xacN<X,\\xab\\xd73\\x0cA\\xd1GH\\xae2\\x8f\\xbalr\\xe0a\\xbb\\xef\\x9f\\xa2\\xa1L}%+\\x18-\\xc5\\xf7\\xdfb\\xb9_}\\xd2\\x93\\xee\\t\"',\n+            constraints={\"min_size\": 41, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6726975820436322},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 9.245259556170925e-135},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00019dfe\\U00019e13\\U00019e0d\\U00019e29\\U00019e5d\\U00019e00\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([105824, 530991])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -2.675879921059001e-221,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.900146652400321e-221,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.852449738948897},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=404,\n+            constraints={\n+                \"min_value\": 71,\n+                \"max_value\": 31560,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    17955: 0.19282710819952595,\n+                    1957: 0.006291802966443957,\n+                    13744: 0.2655139561563381,\n+                    30637: 0.13275830566122565,\n+                    13896: 0.13803390488466225,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00ea\u00f8\u00b9?B\u00b1\\x86L\\U00094343f\\x14\u00a3\u00cfL\\U000f3d82\\x7f\ud845\ude40wu\ud872\udd45\\U000e0af4\\x84\\x12\\U000ef459b\u00b4\\x9bQ\\U00034723\u00ecy\u00f1p\\U000425eb\u00d35\u00c1\\U00055ff0\u00ac\\U000f40c2O:\u00ed\u00cd\u00bd<;\\U00099f9dB\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            300,\n+                            512,\n+                            29850,\n+                            111842,\n+                            403297,\n+                            459322,\n+                            500449,\n+                            591274,\n+                            613340,\n+                            616356,\n+                            680531,\n+                            811618,\n+                            815348,\n+                            870828,\n+                            1068993,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 14,\n+                \"max_size\": 114,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8e\\xcc\\xbe44\\xda\\xb0\\xbe\\xdf\\xcb\\x92z!\\xfd\\xb5[\\xd2\\xfe\\x9f\\xf0\\x8fV\\xc4_\\xd2\\x1a\\xadO\\xb9\\x0b\\xcbf\\xa8\\xb2\\xa9\\xe8\\xe2\\xa8 \\x1d\\xd5s\\xff\\xc8\\x10\\xbf\\xf9.4\\x82b\\x8c\",\n+            constraints={\"min_size\": 25, \"max_size\": 125},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000ab249\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([700987, 816783, 986344]),\n+                ),\n+                \"min_size\": 1,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=31,\n+            constraints={\n+                \"min_value\": 22,\n+                \"max_value\": 3_273_266_941_430_451_387,\n+                \"shrink_towards\": 0,\n+                \"weights\": {1_214_335_638_010_048_966: 0.6855482970373334},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b':\\xd5\\xbc#\\x91\\xb3?Fc\\xa5@\\xafn\\x97\\xa6\\x11\\xca?\\x99\\xb7P8,I\\xcbE0k\\xbd:\\x89\\xd3\\x83\\x9aY\\x8b/\"VK>\\xe6\\xe3=7!f\\xff\\xef\\xca\\xc7Da\\xc0\\x06\\xd29\\xc7\\xca\\xb4J\\x1c\\xbeD\\xab\\r\\xccB v\\x0fy\\x1f\\x17\\xcd\\x0cv1\\x1d\\xad\\xda\\xb4\\xeddl%j\\x99\\xd6\\x8f-\\xfbL\\xcb\\t\\xb3\\xbar\\xc6\\n\\x9bP\\xa8\\x9b\\xef\\xbcx\\x08J\\x9d~\\x99PhSG7\\x16m\\x82$D\\x95\\xe5\\xee\\xd2*\\xff\\x1b\\x9e<E?w,\\xe6!\\xab\\x96\\xbf=\\xf4g\\x81\\x8c\\x90',\n+            constraints={\"min_size\": 46, \"max_size\": 146},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.2913971594765406},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x81\\xca\\xc6(D\\x989\\xf2\\x83\\xb43\\x80\\x01P\\xd33P\\x00\\x10\\xcb=\\t\\xf2G\\xfb\\x99\\xbcK\\xfaX\\xbc\\xc6\\x9el\\x15XLi\\xca\\x0e\\xd8^q\\xb2M\\xa2\\x1c2\\xdd\\xc9\\xd8\\xb6L\\xb9 \\xa4\\xf0\\x9d\\xfeb\\xaa\\x9b(\\xb0\\x10\\x12\\x04\\xf9\\x90\\x95\\xaeq\\xe4\\x91\\xf9O\\xe1\\xff\\xd6\\xc4\\xedd\\xda=\\xc3=R\\xe5*lC\\xf4\\xff\\x8e0\\xf9\\x9f\\xd6\\xe1%H\\x19\\x01\\x91@\\x0b:%;k\\xa1\\xb4\\xe3\\x92h0&\\xddz\\x9c\\xb0\\x00>\\xe5\\x8f{\"\\xd1\\x93\\xb4R\\xaaoZ\\x17\\xc26\\xa83)\\x15\\xa5\\n*\\xd3G\\xeaK\\xbf#L\\xb1',\n+            constraints={\"min_size\": 50, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u04ca\u0490\\U00081aa6\u0442\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1000, 44787, 499714, 558473]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001f7fe\ud842\udce8\\U0006581e\ud83d\udf93\\U000679a9\ud83d\udfba\ud83d\udf99\ud83d\udf6b\\U0001f7ec\\U000685ea\ud83e\udc3c\ud83d\udfd6\ud83d\udfb9\ud83e\udc3c\ud83d\udfb5\\U0001f7f8\ud83d\udf58\ud83e\udc3c\\U0001f7fb\\U0006e2c7\ud83d\udf84\ud83e\udc25\\U0006ea83\ud83d\udf7e\ud83d\udfe0\ud83d\udf43\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([128830, 140718, 403219, 457197, 1088016]),\n+                ),\n+                \"min_size\": 19,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.42209352061383976},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3333333333333333},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.failures\",\n+            constraints={\"min_size\": 7, \"max_size\": 64},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.220446049250313e-16},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=59,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 22573,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.0791347709056582e307,\n+            constraints={\n+                \"min_value\": 3.272451998101384e204,\n+                \"max_value\": 4.771031178881698e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.261308891924763e-56,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=65535,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -2_813_752_676_628_616_835,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud850\uddd1\ud850\uddd8\ud850\udda5\ud850\ude38\ud850\ude67\ud850\ude14\\U0005a60f\ud850\udd87\ud850\ude5a\ud850\uddcb\ud850\uddc0\ud850\ude3b\ud850\udd9e\ud850\uddc5\ud850\udde4\ud850\udd92\ud850\ude09\ud850\uddf6\ud850\ude4a\ud850\udde6\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            147846,\n+                            163706,\n+                            323434,\n+                            538224,\n+                            590807,\n+                            713116,\n+                            820614,\n+                            982783,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 9,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            1000,\n+                            13836,\n+                            25760,\n+                            161202,\n+                            206378,\n+                            266426,\n+                            273949,\n+                            323023,\n+                            390415,\n+                            400329,\n+                            483018,\n+                            598666,\n+                            659640,\n+                            694886,\n+                            908907,\n+                            1027822,\n+                            1081244,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"&e\\xa6\\x0c\\x12\\xd2\\x89\\x18]\\x95\\x0e\\xe8\\x816\\t\\x16ok\\x11=\\x17\\x8dl\\x909\\x95\\x93\\x0c\",\n+            constraints={\"min_size\": 23, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.415685239199522e307,\n+            constraints={\n+                \"min_value\": -1.1598913387139443e-286,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.730216808996705e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"l\\xdd\\xb8\\xbe\\xed\\xc1\\xe7\\xe1\\x17\\xeb\\x0e\",\n+            constraints={\"min_size\": 0, \"max_size\": 86},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.097581019212709e-175,\n+            constraints={\n+                \"min_value\": -5.451680384965098e16,\n+                \"max_value\": 5.63841230017821e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.7711734259693183e-188,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003dd4c\ud822\udc9c\ud822\udce2\ud822\udcdf\ud822\udc68\ud822\udca9\ud822\udcd6\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            100440,\n+                            459361,\n+                            596620,\n+                            766232,\n+                            798106,\n+                            918626,\n+                            956760,\n+                            1006709,\n+                            1025990,\n+                            1036875,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xf9\\xc4gH\\x03\\xc6mA\\x8b\\xbe\\xa2\\xc4C\\xe5\\xb9\\xee\\xf1\\xf6C\\x9e\\xccw\\xc9yP\\x0c}r\\xb8\\xe9\\x1a\\xc4\\xa2\\x9f|l\\tM\\xe3\\xac\\xc2\\xf2\\xeeF\\xec\\xd4\\n\\xf0z\\x02:\\x8bwI\\x91\\xdf_\\xa4yI\\x85~\\xd7\\x91\\xc7K\\xc7\\xe9\\x97\\x15\\xec\\xd8A\\xaa\\xa3\\x9c\\xeb\\\\\\xed\\xb5\\xcey\\xa38\\xf6\\xa9\\xc0}\\xba.6\"\\x1d\\xef',\n+            constraints={\"min_size\": 32, \"max_size\": 94},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.144849768659994e308,\n+            constraints={\n+                \"min_value\": 6.913191506714416e16,\n+                \"max_value\": 1.444636964970912e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.402823466e38,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.14468619462368973},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u3eed\u3edb\u3f43\u3f50\u3f3e\u3ee4\u3f2f\u3f3e\u3f1f\u3f03\u3f18\u3f52\u3f30\u3ef3\u3ed5\u66c4\u3e90\u3ebb\u3f1e\u3ec3\u3ea7\u3e6d\u3e6d\u3f01\u3f3f\u3eb8\u3efe\u3f5c\u3e87\u3e86\u3ed8\u3e82\u3e87\u3f05\\U0006ba07\u3ed1\u3e7f\u3f25\u3e6c\u3f24\ud873\udc29\u3eac\u3ee3\u3f03\u3f20\u3f45\u3ece\\U0006f0cd\u3e8d\u6fb2\u3e79\u3ebf\ud861\uddba\u3f11\u3e89\u3ec6\u3e9c\ud833\udf04\u3f38\u3ef9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [15975, 203028, 412690, 490989, 533358, 611655, 635873],\n+                    ),\n+                ),\n+                \"min_size\": 26,\n+                \"max_size\": 126,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=30518,\n+            constraints={\n+                \"min_value\": -5305,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.044095448332262e-301,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.5702046825221922e-26,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.8883282052876616e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.4266026826509265},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=35900,\n+            constraints={\n+                \"min_value\": 12346,\n+                \"max_value\": None,\n+                \"shrink_towards\": 120_814_036_499_817_447_430_067_973_622_485_796_693,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=85,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 31868,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1755557930166234e308,\n+            constraints={\n+                \"min_value\": 6.902070883972881e242,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.1755557930166234e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"c\\xa3z\\xd2\\xbej\\x12\\xff\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1_904_849_199,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 1000,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.1754943508222875e-38},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.978363622883065},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=5_133_261_083_048_293_413,\n+            constraints={\n+                \"min_value\": 92,\n+                \"max_value\": None,\n+                \"shrink_towards\": -91,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001e961\\U0001e9fe\\U0001e9e4\\U0001e9ae\ud83a\udd31\\U0001e9b2\\U0001e97d\\U0001e9a9\\U0001e969\ud83a\udd1b\ud83a\udd4b\\U0001e9bd\ud83a\udd30\\U0001e9d3\\U0001e9c1\ud83a\udd13\ud83a\udd19\ud83a\udd49\\U0001e9f9\\U0001e99d\ud83a\udd3f\\U0001e988\\U0001e985\\U000ad48b\ud83a\udd28\\U0001e979\\U0001e995\\U00109d9f\\U0001e9fe\\U0001e9d8\\U0001e9df\\U0005ec3c\\U0001e962\ud83a\udd32\\U0001e99e\\U000cebd4\\U0001e9ba\ud83a\udd2c\\U0001e9d8\\U0001e99e\\U0001e9ac\\U0001e9a8\\U0001e990\\U0001e9a8\\U0001e986\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            125185,\n+                            161057,\n+                            211068,\n+                            348593,\n+                            364750,\n+                            490931,\n+                            581814,\n+                            660783,\n+                            668704,\n+                            675086,\n+                            698469,\n+                            719320,\n+                            763722,\n+                            817420,\n+                            843603,\n+                            847539,\n+                            888493,\n+                            908492,\n+                            1086442,\n+                            1094443,\n+                            1098443,\n+                            1114110,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 45,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.402823466e38,\n+            constraints={\n+                \"min_value\": 4.804294362441181e16,\n+                \"max_value\": 1.0869193641627577e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.453453300118642e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-16920,\n+            constraints={\n+                \"min_value\": -27169,\n+                \"max_value\": -83,\n+                \"shrink_towards\": 113,\n+                \"weights\": {\n+                    -84: 0.09258014690234678,\n+                    -14415: 0.040667259002016426,\n+                    -8073: 0.07818474738511687,\n+                    -11841: 0.05886887575060873,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-218,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -119,\n+                \"shrink_towards\": -78529352,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\uf276\\U000bde30\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            61952,\n+                            142149,\n+                            254935,\n+                            293899,\n+                            357469,\n+                            526751,\n+                            556692,\n+                            565647,\n+                            598840,\n+                            655631,\n+                            693481,\n+                            718457,\n+                            732141,\n+                            833984,\n+                            988048,\n+                            1009561,\n+                            1016085,\n+                            1023045,\n+                            1048384,\n+                            1081231,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005b9d0\\U0005b99f\\U0005ba3b\\U0005ba76\\U0005b9c9\\U0005ba45\\U0005b9f2\\U0005b9fe\\U0005ba30\\U0006b325\\U0005ba4f\\U00073810\\U0005b9ed\\U0005b9d3\\U0005ba34\\U0005b9d5\\U0005b9d3\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([375169, 626073, 983058]),\n+                ),\n+                \"min_size\": 11,\n+                \"max_size\": 111,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1_673_058_531_759_016_067,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 127,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9818,\n+            constraints={\n+                \"min_value\": -65,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=300,\n+            constraints={\n+                \"min_value\": -60,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.33062327827099575},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xcf\\xa8\\x16\\x8c\\n[g\\x8cA\\xb1\\xf3\\xcd\\xca\\xd5C\\xc0\\x8c\\xe1\\x04\\xba\\xfbS\\xcc\\x91b\\xbb\\x81\\xd9p\\x80\\xd4\\x8f\\x8a\\x01\\x08m\\x92ME\\xa2\\xcf\\xb6\\xdc\\xe4\\xfcb5\\xff\\xe0\\x8b\\x8d\\x7fLr\\x14\\xef\\x1b\\xa3\\x17B\\x15\\xf0\\x96k.\\xbc@~D0\\x85\\x11\\xa7\\x81f\\x88\\x0e\\xa6OBn\\xaf\\x16\\xa0\\xc1\\x1d#\\xb5#\"\\x18o\\x85\\x8d\\x85\\xf0h\\xd9rJ\\xa1\\xe3\\xc7\\xe1\\x8f\\xb7\\t?Z\\xc9\\xb8\\x9a\\x80\\x81\\x04\\xe2\\xa8U7`\\x06C\\xe1S\\xcdR\\x12\\r\\xb1:l\\xb1\\x90V\\xe8\\xe5N\\x8el',\n+            constraints={\"min_size\": 39, \"max_size\": 139},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0228\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([300, 187188, 266028, 336648, 574892, 1060942]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"X}b/_>\\x0fnX\\x96\\xfb^\\xebf_OX86_\\xec3\\x9f\",\n+            constraints={\"min_size\": 13, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000156ed\\U00062055\u4f4a\u4ebd\u4f27\u4f5a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            20151,\n+                            94730,\n+                            196069,\n+                            217591,\n+                            275078,\n+                            528947,\n+                            620881,\n+                            806876,\n+                            819565,\n+                            890695,\n+                            945046,\n+                            997319,\n+                            1052940,\n+                            1063551,\n+                            1073965,\n+                            1079730,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 3,\n+                \"max_size\": 103,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.5009067459449733e-188,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.350399170995292e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004b8ea\\U00055ecb\\U000f233e\\U0003391f\\U0003397a\\U0003395f\\U00033933\\U00033986\\U000339f5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([211228, 440368, 449997, 534693, 617702, 1034510]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 11,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.535450904581243e16,\n+            constraints={\n+                \"min_value\": -5.7459472242965064e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.355190417481409e-147,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.148202477147836e307,\n+            constraints={\n+                \"min_value\": -2.2235001661546516e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.175494351e-38,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7455,\n+            constraints={\n+                \"min_value\": -22920,\n+                \"max_value\": -26,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    -20599: 0.13455110338805723,\n+                    -88: 0.10132484560835173,\n+                    -4822: 0.0636116883186857,\n+                    -11694: 0.0759304795080413,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": 6.103515625e-05,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.360827088164769e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.192092896e-07},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([44095, 49285, 266040, 620065, 1114110]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7013786840862822},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00a7\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([0, 9999, 14608, 69845, 326495, 353063, 1059827]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00041681\\U00041620\\U000416a0\\U00041679\\U0004162b\\U00041643\\U00041655\\U000416f6\\U0004164f\\U000416b7\\U00041640\\U000416a1\\U0004161e\\U00041635\\U00041714\\U000416e1\\U000416ae\\U000416d1\\U000416fb\\U0008da99\\U000416b1\\U00041650\\U0004170f\\U0004164b\\U00041626\\U000416f4\\U000dc79e\\U000416df\\U0004168f\\U000b2594\\U00041692\\U00041699\\U000be973\\U000416ad\\U0004167e\\U00041679\\U000416b0\\U000d2314\\U00041652\\U0005cb84\\U00041706\\U00041686\\U000c97c6\\U00052757\\U0004167d\\U000c11a8\\U0004168a\\U000416c6\\U000416dc\\U000bc13b\\U000416e4\\U00041645\\U0004161f\\U000416d3\\U00041692\\U000bc0c2\\U00041632\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([267806, 966774])),\n+                \"min_size\": 31,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1519695325568395e308,\n+            constraints={\n+                \"min_value\": -6.3820403962838184e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.264278169628419e211,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.20872895549343579},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.504307675021033},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1114,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -1026,\n+                \"shrink_towards\": 113,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.034703650232103e307,\n+            constraints={\n+                \"min_value\": -1.2422215928211448e16,\n+                \"max_value\": 7.71564488204863e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.5561188412938735e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u3943\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            14558,\n+                            96319,\n+                            163104,\n+                            210450,\n+                            393967,\n+                            756294,\n+                            800038,\n+                            968339,\n+                            1094762,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6993864642997686},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-7.057623656706142e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.0713880899203315e-54,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"+\\x9f\\xce\\xb2\\xae\\xca\\xcdSm\\x81<Em\\x1d\\x88Jo\\x98f8\\x85\\xa9\\x8e=d\\xb6\\x00>\\xcd\\x9b{\\xbfj_\\xf5@\",\n+            constraints={\"min_size\": 36, \"max_size\": 91},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 4.29634626574211e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.685394622441256e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-29172,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -15545,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000497f0\\U00049877\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([301040, 408115, 533516, 828290, 1114111]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 27,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0564048912225701},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5446248421869787},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.220446049250313e-16},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5807892235890803},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.6974387294735144e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 7.095099337586102e-266,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=86,\n+            constraints={\n+                \"min_value\": -21110,\n+                \"max_value\": None,\n+                \"shrink_towards\": -10,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9506178135397354},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd3\\xdc|\\x97\\x873t\\x14\\xcca\\xf5\\x8e\\x1dH\\x0bv[\\xa3W\\x145\\x07\\x94\\xc4\\xe8-\\xf8\\x9c~<\\xe9\\xca3.C\\xd4\\xcc\\x0c\\xf7\\xe9\\xae\",\n+            constraints={\"min_size\": 28, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.25445629127739827},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8093,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.530341688569057},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7822655430244101},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-30046,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 5529,\n+                \"shrink_towards\": -4_546_903_505_399_230_789,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-12,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u169b\u1684\u1693\u1690\u168b\u1692\u1684\\u1680\u1691\u1684\u1682\u1691\u168f\u1685\u169c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([3624, 258567, 523827, 679177, 699715, 1114111]),\n+                ),\n+                \"min_size\": 8,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xacr>\\x84\\xd72\\x9f1\\x05\\xc0\\xb7|a\\xe6\\x08E\\xabb8yh\\xa4KS\\xa9@Q=\\x06\\xdc\\x7f\\x0f\\xad\\xd8\\xbd\\x81\\x88@\\x14l\\x9b\\xb9\\x102\\xf7\\xee\\x01\\x18\\xb3\\x15f]\\x99@'\\xfb\\xb1\\x9f\\x1e\\xee\\x14\\xcc\\xee\\xb3\\xea321\\xba\\xb1\\xc4a\\x08\\x0f\\xd3\\xea\",\n+            constraints={\"min_size\": 29, \"max_size\": 129},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-48_482_728_586_192_212,\n+            constraints={\n+                \"min_value\": -396_285_829_104_428_653,\n+                \"max_value\": -30325,\n+                \"shrink_towards\": 404,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.402823466e38,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.1025137229349356e-300,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.9572337374129256e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00cb+\\x01\u00c1\u00b51\\x12b\\x82aq\u00f7\\x97\\x02D\u00a6B\u00d3\\U000fa4fb\\U0008a3dc\u00bbw\u00bd%\\x0e\u00ef\\U000a27ddX\\U0008d9cb\\x00\\U00087053\\U000f99e2\u00cc\\U000f2dba8\u00b7\\x06%Hq\\x0b\u00b3\u00db\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [0, 9999, 430213, 703726, 862821, 868850, 972406, 1059867],\n+                    ),\n+                ),\n+                \"min_size\": 40,\n+                \"max_size\": 43,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"'2\\x00\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.302792564324369},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.24827952699736e307,\n+            constraints={\n+                \"min_value\": -5.477931159433962e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 9.24827952699736e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=128,\n+            constraints={\n+                \"min_value\": 84,\n+                \"max_value\": 144,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    97: 0.00021713820103268783,\n+                    127: 0.0025632786125308086,\n+                    128: 0.0017939579428909976,\n+                    135: 0.0013153702246955566,\n+                    129: 0.0015038528641213753,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.4304764225964644e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.565954854449939e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00aa\u00cc\u00d5\\x83\\x87\\x12`W\\U0003ad98W\u00c9\\x9d\u00cf3Xu\\U00045c84D\\U0009a999\\x1b\\U00035146\u00d4\u00ac\ub00b\\x06\\x1a\u00c0\\x07\u00fd\u00ac\\x02\\x80\\x1fS\u00e0\u00d6_\\x18\u00e0\u00d5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            130011,\n+                            135887,\n+                            293099,\n+                            333695,\n+                            334407,\n+                            369013,\n+                            421244,\n+                            439244,\n+                            454265,\n+                            475623,\n+                            486172,\n+                            503993,\n+                            552415,\n+                            565524,\n+                            575468,\n+                            586379,\n+                            600705,\n+                            628679,\n+                            685983,\n+                            708266,\n+                            721825,\n+                            779375,\n+                            816235,\n+                            857362,\n+                            883547,\n+                            969664,\n+                            981299,\n+                            1023519,\n+                            1033362,\n+                            1074485,\n+                            1082492,\n+                            1110178,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 34,\n+                \"max_size\": 134,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.11882752026063328},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.302836276760458e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7814030996415473},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"f\\U000a7cf9\u00bc}\u00e2\\U0010187a\\x17/\u00e9\\U0003ba3a\u00d4\u00f4W\\x01\\x16\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            1024,\n+                            208969,\n+                            291076,\n+                            292451,\n+                            329566,\n+                            349472,\n+                            371710,\n+                            589945,\n+                            689335,\n+                            736457,\n+                            894094,\n+                            1014334,\n+                            1020679,\n+                            1053163,\n+                            1072980,\n+                            1082365,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 5,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"-\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.11021838786891916},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7116137594038094e308,\n+            constraints={\n+                \"min_value\": 4.685914532902948e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.5784804611080016e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"f\\x06r\\x84\\xa5*\\x18\\xa0\\xe5\\xd7\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.220446049250313e-16},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000557ea\ud850\uddb2\ud850\udd29\ud850\udd2e\\U00037501\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([147749, 504620])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-103_418_364_179_407_956_429_642_404_771_214_226_960,\n+            constraints={\n+                \"min_value\": -103_418_364_179_407_956_429_642_404_771_214_261_654,\n+                \"max_value\": 23965,\n+                \"shrink_towards\": 27081,\n+                \"weights\": {\n+                    -103_418_364_179_407_956_429_642_404_771_214_261_491: 0.001031919112466946,\n+                    -103_418_364_179_407_956_429_642_404_771_214_206_595: 0.0008673498740806697,\n+                    -103_418_364_179_407_956_429_642_404_770_475_946_821: 0.0005502916336577262,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-8.648489338247506e-97,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.8697854728168e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.1273925456393152e-251,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0959774739536701},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe6z\\x04\\x8e\\xf1\\x86\\xd2y\\x0e\\xf4\\xceB\\xcd\\x100\\xcf\\xf8~]os\\xbd\\xb0w{.}I\\xd0#\\tR._\\x8d@l\\xe440\\xe4\\xfbD\\x97\\xf4\\xa0\\x8c\",\n+            constraints={\"min_size\": 22, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000368bb\\U00066d6b\\U000368ba\\U000629b7\\U00036860\\U000368a5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([223266, 275256, 303266, 613142]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([375012, 461074])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=25871,\n+            constraints={\n+                \"min_value\": 24351,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001fe86\\U0001fee7\\U0001ff2f\\U0001fe7a\\U0001fe7d\\U0009e2fb\\U0001fe9c\\U0001feb9\\U0001ff18\\U0002fa51\\U0009fc1d\\U0001ff11\\U0001fedc\\U0001fecb\\U0001ff28\\U0001feee\\U0008195d\\U0001fe88\\U0001fee2\\U0001fe7d\\U000abeff\\U0001fe90\\U0001fe97\\U0001fef3\\U00045618\\U0001ff04\\U00059759\\U0001ff55\\U0001fe6a\\U0001feeb\\U0001fef4\\U00049bf7\ud85e\udd97\\U0001fe83\\U0001fea0\\U000672bd\\U0001ff4a\ud87a\udefa\\U0001febf\\U0001ff27\\U0004f269\\U0001ff26\\U0001ff09\\U0001fead\\U0001fee8\\U0001fedb\\U0001ff14\\U0001ff57\\U00090eca\\U0001ff36\\U0001feea\\U0001ff20\\U0001feec\\U0001ff3d\\U0001fea2\\U0001fe98\\U000628d3\\U0001feb3\\U0001ff37\\U0001fef6\\U0001ff4e\\U0001ff43\\U0001ff1c\\U0001ff27\\U0001fea9\\U0001ff12\\U0001ff5a\ud851\udef7\\U0001fe84\\U0001fea5\\U0001fee6\\U0001fe8a\\U0001feeb\\U0001ff29\\U000c3368\\U0001fe8a\\U0001fe6a\\U0001fe9a\\U0001fe80\\U0001ff21\\U000a1783\\U0001ff31\\U0001fedd\\U0001fef0\\U000ba6f0\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([130651, 825819, 1114111]),\n+                ),\n+                \"min_size\": 43,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00095f93\ud87e\udd05\ud87e\udd71\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            194674,\n+                            207820,\n+                            230746,\n+                            269379,\n+                            417415,\n+                            435691,\n+                            508642,\n+                            951950,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.833333645848401e307,\n+            constraints={\n+                \"min_value\": 2.3419495366923816e16,\n+                \"max_value\": 1.7976931348623157e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.457605489882973e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x18\\xbc\\xa5s\\x8abL\\xdc\\xcd\\xf9;2\\x0e\\xe7\\xb1\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud878\udfd8\ud878\udef6\ud878\udf3f\ud882\udd7f\ud878\udf23\ud878\udf2d\ud878\udef9\\U0007b857\ud878\udf51\ud878\udf6d\ud878\udf64\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([189153, 612756, 644799, 789946, 1017700]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xec\\xca`|\\xd45q\\x82\\x01\\xe2sB\\xc9em\\xf0\\xa6\\xa3\\x95\\xb0\\x0c\\xb5\\xc3\\xc3r\\x86\\xce\\xe1\\x0f\\xc2c\\xbd\\x8ah\\xb6sw\\xe7\\x98\\x12C\\xdaK*\\xc1\\x08Z\\xac\\xbeM\\x8f.\\x839\\x0e\\xead\\x9a\\x82\\x03\\xbc\\xf8^\\xa0\\x19\\xf4\\xf28\\xb12:\\x91}9v\\x1b\\xef\\x9aY;)\\x88=\\xe7P\\xbbe *\",\n+            constraints={\"min_size\": 50, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=12876,\n+            constraints={\n+                \"min_value\": 12867,\n+                \"max_value\": 102692268,\n+                \"shrink_towards\": -6640,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.225073858507e-311},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=27726,\n+            constraints={\n+                \"min_value\": 15,\n+                \"max_value\": 30556,\n+                \"shrink_towards\": -125,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"L\",\n+            constraints={\"min_size\": 0, \"max_size\": 85},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 7.323398459898638e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -4.232251029058969e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 8.679389178770336e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.095502715593375e247,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x16\\xc0\\xcc\\x92m/\\x8a\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=22475,\n+            constraints={\n+                \"min_value\": 22416,\n+                \"max_value\": 22503,\n+                \"shrink_towards\": -127,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u169b\u1684\u1693\u1690\u168b\u1692\u1684\\u1680\u1691\u1684\u1682\u1691\u168f\u1685\u169c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1000, 65535, 385368, 872950, 1064194, 1086097]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00014184\ud872\udc02\\U00014138\\U0001413f\\U00014150\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([82119, 253384, 280969]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc9gb\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u4277\u42de\u4290\u424d\u42aa\ubba3\\U0001522f\u6326\u42a3\u42df\u4254\u4295\u42a2\u42b6\u41f4\u423e\u4298\\U0001ddc4\u4245\u41f7\u42d8\ud840\udd3b\u4265\u42dd\u4236\u423f\u427a\u41f6\u4291\u4285\u4ed4\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([16867, 137859])),\n+                \"min_size\": 21,\n+                \"max_size\": 121,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=25992,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -1_503_246_891,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u01f5\u01df\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([300, 11558, 165364, 480617, 874832]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 8.316750069938102e-42},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-16879,\n+            constraints={\n+                \"min_value\": -21792,\n+                \"max_value\": None,\n+                \"shrink_towards\": 7459,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u02d1\u02ee\ud82f\udc50\u024e\u028c\u028d\u0243\u02db\u02b2\\U0007b61e\u0231\u02eb\\U00015a0a\u0200\u02ad\u02e8\u026a\u024b\u02a9\u02c2\ua861\u0289\u026b\\U00018eb2\\U0005aac6\u022c\\U0005653b\u02dd\u0215\u02ef\u026f\u0268\\U0005f88e\u0294\u02bf\ubd55\u02fe\u0210\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            512,\n+                            19655,\n+                            26737,\n+                            116524,\n+                            118354,\n+                            154178,\n+                            180513,\n+                            272223,\n+                            319206,\n+                            454522,\n+                            505265,\n+                            594109,\n+                            766128,\n+                            812826,\n+                            860757,\n+                            910271,\n+                            928236,\n+                            1038592,\n+                            1079253,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 36,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.28801338810866556},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-3517,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -2407,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([512, 92374, 959202, 1054840])\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.4846479111746037},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.27254025337352467},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=11185,\n+            constraints={\n+                \"min_value\": 300,\n+                \"max_value\": 19001,\n+                \"shrink_towards\": 24999,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.4372943007399555e306,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-98_749_698_192_877_571_629_420_332_173_518_856_490,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -18756,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"!\u00bb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1, 1024, 249724, 271407, 614935, 1114111]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2_021_693_029_040_637_240,\n+            constraints={\n+                \"min_value\": -2_021_693_029_040_637_422,\n+                \"max_value\": -3999,\n+                \"shrink_towards\": 1_457_159_553,\n+                \"weights\": {\n+                    -2_021_693_029_040_634_719: 0.1671042725005711,\n+                    -2_021_693_029_040_587_240: 0.04326564071497603,\n+                    -1_096_829_790_149_953_385: 0.09165358538732023,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.0179234895369112e71,\n+            constraints={\n+                \"min_value\": -1.7298553741055145e-52,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-4090491178128843.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.847465385762471e-187,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1170557477438764e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1646,\n+            constraints={\n+                \"min_value\": -60,\n+                \"max_value\": 8966,\n+                \"shrink_towards\": 28094,\n+                \"weights\": {\n+                    3499: 0.02157638717433969,\n+                    7436: 0.028324021499829207,\n+                    5036: 0.026009890555046492,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000555a7\\U00055653\\U000555d8\\U00055608\\U000b4212\\U000555bc\\U00055573\\U00055599\\U000555bc\\U0005558c\\U0005562e\\U00055627\\U00055647\\U000555fd\\U000555b0\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([349551, 373847, 648256, 868497, 925331]),\n+                ),\n+                \"min_size\": 6,\n+                \"max_size\": 106,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.00001,\n+            constraints={\n+                \"min_value\": 1.1754943508222875e-38,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.402823466e38,\n+            constraints={\n+                \"min_value\": 7.0802228513479304e16,\n+                \"max_value\": 5.804350495916157e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.654814068844426e-39,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"ah\\xdd%\\xa7\\xa7\\xfb\\xfc:\\x10\\xddr\\x10%G~S\\xb8\\x8c\\xb8\\x04Q:5\\n\\xe0k\\xa6gB{~\\x14\\xe6\\xa7H\\xb9@\\xcb\\xae\\xf92w\\xa2\\xd0\\xfa\\x86\\xe5ag\\x99\\xc0_\\x98\\x88e_32A`t]\\xfe\\x950\\xb3\\x02\\xbbZ\\x1a(X\\xdf\\xb4\\x91O\\r~\\xb3H\\xbd#u\\xa7D\\xf0\\xc9\\xe9m=j\\x01a\\x17.\\x19'\\xa8\\xe7`\\x99A0U\\xe5\\xe3\\x99\\x8d\\xa8\\xd4E\\xfe\",\n+            constraints={\"min_size\": 45, \"max_size\": 145},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x00\\x07\\xfe\\x0b\\x98\\xdfq\\x05E\\xc8\\x98\\x89\\xeb\\xd8q|Q\\xdd\\xc4\\xce!\\x94\\xa6@\\xc0\\xeb\\xc8\\x91^\\x0b\\x91\\xaf\\xee\\xec\\x08s\\x9c\\x03<\\xc3\\x91\\xe2\",\n+            constraints={\"min_size\": 32, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xaf\\xc9OJ\\xc4\\xd3\\xb7\\xb5\\xe2\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.69936234957585e307,\n+            constraints={\n+                \"min_value\": 5.54973018813037e-14,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9.69936234957585e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.4245562653040883},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001e3bf\\U0001e37d\\U0001e3ee\\U0001e459\\U0001e3c5\\U0001e422\\U0001e41a\\U0001e41d\\U0001e422\\U0001e439\\U0010b374\\U0001e3cd\\U0001e405\\U0001e46f\\U0001e448\\U0001e390\\U000c60d0\\U0001e3f9\\U0001e38d\\U0001e412\\U0001e3e3\\U0001e386\\U0001e466\ud848\udf64\\U0001e445\\U000ea7ff\\U0001e414\\U0001e38c\\U0001e3f5\\U0001e38e\\U0001e46c\\U0001e404\\U0001e407\\U0005a9b0\\U0001e388\\U0010aaa6\\U0001e3eb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([123761, 480238, 785570, 1096174]),\n+                ),\n+                \"min_size\": 8,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-9753,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.1441552466155056e307,\n+            constraints={\n+                \"min_value\": 2.7908612999686806e-229,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.450445100638952e156,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u01b3\\U00045b49\u01fe\\U00049a44\u0211\u0261\u01a4\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            404,\n+                            83894,\n+                            173280,\n+                            438340,\n+                            801810,\n+                            956934,\n+                            1011592,\n+                            1016849,\n+                            1021809,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x92`\\x0cS\u00f5\\x08Z\u00b2`\\U000e6952\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            404,\n+                            301772,\n+                            364142,\n+                            388964,\n+                            465648,\n+                            540109,\n+                            575276,\n+                            684445,\n+                            964147,\n+                            990152,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=14042,\n+            constraints={\n+                \"min_value\": 9956,\n+                \"max_value\": 15634,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9e'\\x89,\\xe9\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.144859962684416e16,\n+            constraints={\n+                \"min_value\": -2.434950772165973e-123,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.204831660856902e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.922756074049865e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.2950064685422972e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.4215978427198551},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=183,\n+            constraints={\n+                \"min_value\": 88,\n+                \"max_value\": None,\n+                \"shrink_towards\": -31603,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-6.317287345908974e16,\n+            constraints={\n+                \"min_value\": -6.636057157915501e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.925992408832254e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-97_902_369_545_905_204_746_689_342_656_539_749_010,\n+            constraints={\n+                \"min_value\": -97_902_369_545_905_204_746_689_342_659_816_895_692,\n+                \"max_value\": 40,\n+                \"shrink_towards\": 44,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9179397402958025},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1a\\x06\\x13g3\\xeb\\x0bgbr\\xd0\\xf7]\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xbd\\xb1K\\xe3\\xec\\xba\\xe0\",\n+            constraints={\"min_size\": 0, \"max_size\": 75},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-147_447_707_595_305_288_340_448_823_837_523_904_402,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -147_447_707_595_305_288_340_448_823_837_523_881_076,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001483a\\U00014908\\U0001489a\\U0001490a\\U00014894\\U000148aa\\U0001487c\\U000148de\\U00014835\\U00014887\\U000148d8\\U00014845\\U00014892\\U000a3a13\\U000148cc\\U000148cd\\U000148e5\\U0001484e\\U000148a8\\U000148bd\\U0001487d\\U00014853\\U000148da\\U0001482b\\U00014829\\U00014880\\U000148f6\\U000c10d4\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [83992, 410652, 413019, 481536, 526547, 675390, 776052, 891018],\n+                    ),\n+                ),\n+                \"min_size\": 27,\n+                \"max_size\": 117,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-64,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 214,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-77,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 19938,\n+                \"shrink_towards\": -2372,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".\",\n+            constraints={\"min_size\": 1, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=14339,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 24719,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud885\udea6\\U0004aae8\\U000164b7\\U0005552e\\uefee\\ueff3\\uf00f\\uf081\\uf07d\\U0005ed74\\uefd1\\uefe0\\U0001935c\\U0005fa04\\uf003\\uefd2\\uefa6\\U000592c1\\uefbd\\uef97\\uefbd\\uef9e\\uf043\\uf028\\uf019\\uefb5\\uf040\\uefe3\\uefbf\\U0004ab88\\uf05e\\U0002f248\\uefa3\\uefe9\\U00033d35\\uefcb\\ueff1\\uf06b\\uf044\\U00050935\\uf07f\\U00053dd8\ud872\udf49\\uefbb\\uf07f\\uf030\\U0003c92c\\uf04a\\U00019a96\\U00041de5\\uf081\\uf043\\uefef\\uf06c\\uf05f\ud820\udd2b\ud874\udee4\\uf06f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([61326, 393888, 509470]),\n+                ),\n+                \"min_size\": 12,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-31332,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -7547,\n+                \"shrink_towards\": 2444,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8126,\n+            constraints={\n+                \"min_value\": -102,\n+                \"max_value\": 12265,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd0\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8394908201945157},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-12895,\n+            constraints={\n+                \"min_value\": -18430,\n+                \"max_value\": 17,\n+                \"shrink_towards\": -27908,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=22507,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"?\\xcc\\x81\\xf7\\x8c)\\xfb\\xff\\xb5\\x9dL\",\n+            constraints={\"min_size\": 0, \"max_size\": 62},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.2120344210636699e305,\n+            constraints={\n+                \"min_value\": 3.395889866895031e115,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.175494351e-38,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.263620154249145e307,\n+            constraints={\n+                \"min_value\": -7.7882658890831645e242,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.299552834323001e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u4dd1\\U000f2edf\ud85a\udfa3\u4e30\u4dc5\u4e11\u4d5e\u4dda\u4ddd\u4d6e\u4e19\\U000d79c8\u4e34\u4e25\u4e08\u4df8\u4d4d\u4d3b\u4db0\u4d6d\\U0006e287\u4daf\u4e09\\U00051ef1\u4dfd\u4d4c\u4d54\\U00044e52\\ue996\\U0004706e\u4d42\u4d89\u4e35\u4e1c\u4dcd\u4d4d\u4d6e\u4dd3\u4dee\\U000be6cf\u4dcd\u4da8\\U000bee69\u4d65\\U000e06a0\ud85f\ude04\u4da7\u4dbf\\U0005aed5\u4d3c\\uf26f\u4e19\u4d69\u4d71\u4e30\u4e11\u4dfd\ud852\udee5\u4d7e\u4d42\u4dcd\\U00049221\u4e2d\u4dc9\\U000c254c\\U00063179\u4d6c\u4de6\u4e26\\U00044ea2\\U00048809\u4e2a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([19769, 453795, 751151, 1004156]),\n+                ),\n+                \"min_size\": 49,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 2.6200016606435327e-77,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.697683434601533e117,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x87\\xe6\\xf4Ud14M\\x98\\xb1\\xc5\\xf1\\xe0\\x9evG/q\\xc8I\\x9c\\x0e\\xc9!\\xd4%\\x89\\x925\\xb4\\x8e@q\\xf1\\x8a4\\x1b\\x0bf\\x8c\\xd5t\\xa3\\x16[\\xa0\\x9e\\xf7\\xe5\\x18\\xe7\\x11\\x1a\\x93\\x18\\xcem\\x07\\x16\\xdb0\\x07\\n\\x93\\xb4\",\n+            constraints={\"min_size\": 28, \"max_size\": 128},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7047557701518014},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=106,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000863feL\\x07\\U0009ea5c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1, 9999, 545961, 939724, 1092779]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 47,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=318,\n+            constraints={\n+                \"min_value\": 95,\n+                \"max_value\": 7_025_466_156_138_779_025,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"}\\x80a0\\xf5\\xd4R\\x8dL\\x1b\\x1f\\x8eqM\\xad\\t\\x84\\xb4\",\n+            constraints={\"min_size\": 7, \"max_size\": 64},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2_125_380_156_395_339_315,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 16226,\n+                \"shrink_towards\": 112,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8192,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -14945,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.0831148460561855e170,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.812777885120378e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=32320,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 6,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0008cb48\\U0008cabd\\U0008caa6\\U000a4521\\U0008ca8a\\U0008cab1\\U0008caee\\U0008ca4d\\U0008caef\\U0008cad7\\U0008ca76\\U000a0160\\U0008cabc\\U0008ca91\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([576074, 697726])),\n+                \"min_size\": 14,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.08016796627211155},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=15866,\n+            constraints={\n+                \"min_value\": 23,\n+                \"max_value\": 28409,\n+                \"shrink_towards\": -13487,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8519149706250211},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.068846272446435e-213},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"%3\\x9f\\x1f\\x06}\\xdc\\xe7\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.718611265046995e307,\n+            constraints={\n+                \"min_value\": 3.4203375201487154e257,\n+                \"max_value\": 1.0878206960701916e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.2722165681620476e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3991293574584406},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2_879_080_580_175_561_464,\n+            constraints={\n+                \"min_value\": 2_879_080_580_175_561_380,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=740060470,\n+            constraints={\n+                \"min_value\": 84,\n+                \"max_value\": None,\n+                \"shrink_towards\": -1_263_284_386,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"$7\u00b3\\x1e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            65535,\n+                            115861,\n+                            249542,\n+                            284702,\n+                            373937,\n+                            419574,\n+                            574343,\n+                            613339,\n+                            729848,\n+                            774815,\n+                            992741,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x06_g=\\x9d\\xf5\\x88\\x83H\\xfe\\xd2\\xf46[\",\n+            constraints={\"min_size\": 0, \"max_size\": 83},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-6.748296829950797e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.710703853901639e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\ua6fe\\U00061929\ua6bc\\U0006e6cd\ua65b\\U000555b0\ua6be\\U000f1a0d\\ua62f\ua688\\ua635\ua6c2\ua702\ua69e\\ua63c\ud880\udd0d\ua71f\ua648\ua647\ua6df\ua68a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([42539, 468835, 665918, 709400, 912472, 998389]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2472,\n+            constraints={\n+                \"min_value\": 123,\n+                \"max_value\": 16297,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.711317401758173e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.0515763546368126e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud886\udc73\ud886\udcd5\ud886\udc8d\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([202836, 268421, 294963, 988702]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=18,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 13,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.5174132675268536e308,\n+            constraints={\n+                \"min_value\": 6858902145681960.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 10000000.0,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9b\\xd3L\\xa1y|\\x86<-\\x99\\x14\\xe8\\x81\\xa2Q\\xeb<n\\x8e\\x9b\\xf1\\xaf\\x8aU\\xc5E(`\\x94[\\x10na\",\n+            constraints={\"min_size\": 13, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=11923,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 17238,\n+                \"shrink_towards\": -16,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.691797317511129},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0459\\U000e8a35\u0490\ud86a\udedf\u045d\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1024,\n+                            8192,\n+                            60456,\n+                            211692,\n+                            447200,\n+                            667633,\n+                            846978,\n+                            1011403,\n+                            1081338,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.219335915623827e307,\n+            constraints={\n+                \"min_value\": 4.4789233594989864e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.8436594999236376e58,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.121213252652737},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=30860,\n+            constraints={\n+                \"min_value\": 28220,\n+                \"max_value\": 38637,\n+                \"shrink_towards\": 6160,\n+                \"weights\": {\n+                    36273: 0.02714540759618946,\n+                    29476: 0.016001488307364083,\n+                    32797: 0.20862103283914343,\n+                    35765: 0.2364227935969586,\n+                    37194: 0.07381005794535613,\n+                    34054: 0.15832175666185722,\n+                    30860: 0.2714540759618946,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.4073993566025341},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe6\\xb5\\xe8Q\\xd2\\xb8\\x06Bw\\xa7\\x9a\\x0e\\x9e\\xcd\\xfd\\xeaL\\xa71\\x04)\\xc4)\\xe8hb\\xf3\\x02F\\xa4\\xec\\x90\\xd6\\xa4oqS\\xd0p\\xa9\\x11R\\x8b\\x0e\\x7f\\xd7\\xdb/yM\",\n+            constraints={\"min_size\": 27, \"max_size\": 50},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5e-324},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.829027837651939e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.015288118203534e151,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud846\ude7c\ud855\udc24\ud846\udef7\ud846\udeb0\ud846\ude96\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            137791,\n+                            138213,\n+                            139630,\n+                            224787,\n+                            372927,\n+                            471040,\n+                            540415,\n+                            569174,\n+                            674586,\n+                            843100,\n+                            1026134,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000ba4e5\\U000ba452\\U000ba44b\\U000ba49b\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([762892, 950416])),\n+                \"min_size\": 1,\n+                \"max_size\": 101,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004ab04\\U0004ab48\\U0004ab53\\U0004ab74\\U0004ab84\\U0009dc77\\U0004ab0b\\U000a8a16\\U0004ab7b\\U000b0336\\U0004ab2f\\U0004aace\\U0004aba5\\U0004ab8c\\U0004aad8\\U0004ab17\\U0004ab7d\\U000b3c68\\U00087d68\\U0004ab5e\\U00080e83\\U0004ab9e\\U000a98d7\\U0004ab26\\U0004aae1\\U0007f51a\\U0004ab1c\\U0004aafa\\U0004ab82\\U0004ab51\\U0004ab48\\U0004abbb\\U0004abbf\\U0004ab64\\U0004aada\\U0004aaff\\U0004ab3a\\U0004ab4c\\U0004ab37\\U0004abbd\\U0004ab05\\U0004aaef\\U0004ab29\\U0004ab7d\\U0005b846\\U0004aba6\\U0004ab74\\U0004ab01\\U0004aba3\\U0004ab21\\U0004ab76\\U0004aba2\\U0004ab87\\U000840c1\\U0004aad4\\U000990b1\\U0004ab01\\U0004abc9\\U0004ab26\\U0004ab5e\\U0004aaf7\\U0004abc8\\U0004ab00\\U0004ab1d\\U0004ab02\\U0004ab6e\\U0004abcb\\U0007a7bd\\U0004ab66\\U0007f60a\\U0004ab62\\U000aaf37\\U0008e6f6\\U0004ab3b\\U0004ab2d\\U0006168c\\U0004aae2\\U0004ab81\\U0004aad1\\U0004ab34\\U0004abc1\\U0004ab63\\U0004abbf\\U0004ab2a\\U0004ab8c\\U0004aaf4\\U0004ab36\\U0004ab07\\U000a9616\\U0004ab48\\U0004ab13\\U0004ab9a\\U000853af\\U0009c339\\U00070065\\U0004ab2e\\U0009a831\\U000afbd9\\U0009a066\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([305868, 739955])),\n+                \"min_size\": 49,\n+                \"max_size\": 149,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.640235773421167e307,\n+            constraints={\n+                \"min_value\": -5.157613883550234e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.640235773421167e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa4\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u3503\u3513\u3529\u34ca\u345c\u348c\u352c\ud884\uddc6\u34e0\u348a\u34e5\uc0c1\u3513\u3540\u3465\u4a3d\u353f\u34be\u3532\\U0005c2f2\u34ae\u3481\u34b8\u34ab\u3499\u3488\u34cd\u348b\\U0004aa8e\u3469\u3464\\ud915\u3540\u34d2\u346a\u3491\u3483\u3556\u3499\u3472\u347a\u3485\ud805\udc92\u3483\u3533\u34fb\u349c\u346b\u34f7\u346c\u346e\u34c2\u3471\u345e\u354c\u34e0\u34d2\u354e\u3488\u34df\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([13402, 450398, 877128]),\n+                ),\n+                \"min_size\": 30,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00050c90\ud887\ude7a\ud887\ude78\\U0006753f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [204276, 446912, 613518, 625357, 792947, 827827, 1092762],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1202,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -21,\n+                \"shrink_towards\": -8958,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xb8\\xc0\\xbc\\xf7>\\xe1\\xdd\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00053ba1\\U0004f218\\U0004f2b1\\U0004f23c\\U0005259e\\U0004f236\\U0004f2cd\\U0004f257\\U0004f226\\U0004f27c\\U0004f1dc\\U0004f2b7\\U0004f92d\\U0004f22e\\U0004f2af\\U0004f228\\U0004f228\\U0004f2a1\\U0004f20d\\U0004f26c\\U0004f280\\U0005129b\\U0004f291\\U0004f27f\\U0004f228\\U0004f1fe\\U0004ff18\\U0004f1e4\\U0004f25e\\U00053327\\U00054434\\U0005379b\\U0004f24f\\U0004f2c0\\U0004f27c\\U0004f1fc\\U0004f259\\U0004f23a\\U0004f2c7\\U0004f21f\\U0004f2d8\\U0004f1f6\\U0004f2be\\U0004f1f2\\U00053cc5\\U0004f21c\\U0004f240\\U0004f1ff\\U0005160c\\U0004f1df\\U0004f21c\\U00051195\\U0004f1ea\\U0004f201\\U0004f274\\U0004f21f\\U00052da6\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([324059, 346081, 672766]),\n+                ),\n+                \"min_size\": 30,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-20644,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -91,\n+                \"shrink_towards\": -20398,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8f\\xd0\\xe7\\x82\\xb9\\xde\\xdce0F\\xf4\\xa3\\x86}\\x05\\xa3V\\xab\\xcczS\\xdbZ\\xaf\\x18\\xf4\\x8aG+\\xd8\\r\\xb9\\xbdL\\x12>\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xcfi \\xdd\\x8f\\xe7\\x11\\xabJv\\xdd\\xe7'\\x85\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9999999999999999},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-449478966,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -449478905,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5.206462770564778e-103},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=261814927,\n+            constraints={\n+                \"min_value\": 261812494,\n+                \"max_value\": 261820820,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    261813570: 0.22178027035408324,\n+                    261818457: 0.014077264977466053,\n+                    261814927: 0.17777988344143741,\n+                    261820819: 0.06996634188350809,\n+                    261819586: 0.10200341388344072,\n+                    261814337: 0.014077264977466053,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000860bd\\U000b8f71\\U00098bcb\\U0008610c\\U000860ae\\U000860b9\\U000a29c4\\U00086058\\U00086120\\U000860cc\\U0008609d\\U000a47ee\\U00086075\\U000860b9\\U000bd9f8\\U000875bc\\U0008607f\\U00086071\\U0009bf1c\\U0008605e\\U000860b7\\U000860bc\\U00086133\\U0008607c\\U00086150\\U000860bb\\U000860ed\\U0008610d\\U00086070\\U000860a8\\U00086096\\U000a15da\\U0008613f\\U00086097\\U000860af\\U00086065\\U000860b1\\U00086114\\U00086147\\U000860f1\\U00086106\\U00086076\\U000bb0ad\\U00092d63\\U00086099\\U00086076\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([548948, 809178, 1046644]),\n+                ),\n+                \"min_size\": 35,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00039e43\\U00039d91\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([236938, 655390, 707351, 852659, 999803]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.2819477664936404e308,\n+            constraints={\n+                \"min_value\": -1.2281500607759667e-256,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.106734489347781e306,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=22406,\n+            constraints={\n+                \"min_value\": 1331,\n+                \"max_value\": None,\n+                \"shrink_towards\": -1_516_479_650_261_164_913,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.549916010394505e-125,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.4640076163163137},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5457265765124847},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd2\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8576622605151087},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3089321188928567},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.2057002314818293},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-51,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.046789127358309875},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9360196211774583},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9868591089150645},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-290473246,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -290473125,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.1754943508222875e-38},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.0509904175885544e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=106,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.2432693960351465e307,\n+            constraints={\n+                \"min_value\": 0.0,\n+                \"max_value\": 6.365324656343672e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.2432693960351465e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4056,\n+            constraints={\n+                \"min_value\": -123,\n+                \"max_value\": 15837,\n+                \"shrink_towards\": 0,\n+                \"weights\": {6584: 0.0303030303030303, 13630: 0.303030303030303},\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7215448681340134},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.1600313891515555},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u8eac\u8f17\u8eda\u8e51\\U000e8de0\u8e64\u8e4c\u8ed0\\U000e8530\u8e59\u8eb3\u8e9d\u8e44\u8f29\u8eb7\u8eb3\u8ec2\u8f12\\U000f8454\u8ef7\u8ebd\\U000fbd97\u8e53\u8e46\u8f02\u8f3c\u8f42\u8eae\u8f43\u8f05\u8ecd\u8ee4\u8e9f\\U000e74d9\u8ea1\\U000f3e58\\U000e4de3\u8eb7\u8e9a\u8f32\u8f1f\u8f30\u8e5f\\U000e80c5\u8e9f\u8e4c\u8f3f\u8ef1\u8ed9\u8f37\u8e88\u8e64\u8eef\u8ef0\u8ee2\u8e87\u8f22\u8f13\u8f40\u8e4a\u8f0b\u8e49\\U000f0b78\\U000d794e\u8edd\u8f2a\u8f43\u8ef2\\U000e64f5\u8ec7\u8ed8\\U000fda2f\u8ec7\u8eb8\\U000e06dd\u8f28\u8ea8\u8e58\u8f20\u8ef4\u8ecc\u8f07\u8ef4\u8eca\u8e63\u8edc\u8e8a\\U000f5589\u8f29\u8e66\u8f3f\u8e62\\U000d8c4c\\U000d116b\\U000dcdfe\u8e70\\U000f8bc0\u8f2b\u8e5a\u8e80\u8ee6\u8eb3\u8f35\u8ee3\u8e46\u8f0d\u8f04\u8ea9\u8f3c\u8e90\u8ece\u8eb6\u8e4b\u8ebe\u8f40\u8f1b\u8ee8\u8e53\u8ebc\u8e89\u8ee1\u8eb0\u8f05\u8f1f\u8ec1\u8f1c\u8e87\u8e9e\u8ecf\u8ea9\u8ea1\u8f15\u8e5c\u8e60\u8ee3\\U000e3f2c\u8e62\u8e6a\u8e5f\u8f3d\\U000e9814\u8f16\u8e67\\U000e09f9\u8ec0\u8e82\u8f0e\u8e62\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([36420, 42277, 848886, 1040390]),\n+                ),\n+                \"min_size\": 38,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00018e35\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([101926, 709940, 720676, 829299, 1054916]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\";\\xf4\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3333333333333333},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.43247040417403715},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=78,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 37,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-6_922_775_784_663_837_418,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -24611,\n+                \"shrink_towards\": -33,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.1983756255645628e38,\n+            constraints={\n+                \"min_value\": -3.402823466e38,\n+                \"max_value\": 6.328848235246537e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.1983756255645628e38,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-22495,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 13983,\n+                \"shrink_towards\": -79,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u5688\u5637\\ue7d2\u55db\\U0009f280\u56af\u5605\u5618\u5678\\U000af332\\U00097dc5\u566a\u5656\u55c8\u56b4\u5672\u56b2\u568d\u566c\\U000e3599\u562c\u568d\u568d\u55df\u5656\u5645\u56b2\u56a0\u5631\u5697\u55f9\u5634\u5641\u569b\\U0009db56\u55f4\u5651\u5694\\U0008508d\u560b\u55f4\u56b7\u5603\u55bc\\U0008f40b\u5695\u56a8\\U000ad1fb\\U000aec78\u563f\u5676\u562e\\U00100a2b\u55df\u56a9\u74cf\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            21944,\n+                            77431,\n+                            538012,\n+                            762454,\n+                            767399,\n+                            787088,\n+                            818684,\n+                            867537,\n+                            920736,\n+                            942005,\n+                            1031615,\n+                            1072073,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 14,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x18\\x08?\ud856\ude25G\\U00049275\u00a8\ud87a\ude61Td\ud856\udd7e\\x9b\u00a6\u00fc\\x1d\\x85\u8e52x\u00de0v>\\x82\\x82\\U000732f69=\u00ee\u00a11_pk\u00a4M\u00e8\u00f4\\x94\u00a5\u00fd\u00d3\u00ce\u00d0\\U00086d87\u00af&\\x1b\\U000924cb\u00bc\\x96p\\U000ea624\\x92\u00d1\\x03S\\U0004232b\u00c8?\u00bb#\u00d4\\x140\\x01\\U00079d74|\\r\\x97\\x02\u00cf\\U00099b09>\u00be\ud804\udc97\\U00049b91\\x1eyw\u00cd\\x0f\\x1c\\x18~\\x83\u00d0\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            396742,\n+                            408078,\n+                            412340,\n+                            447874,\n+                            695766,\n+                            778498,\n+                            843328,\n+                            859333,\n+                            962527,\n+                            1032055,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 28,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6397952453215873},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud81d\ude3e\ud81d\ude22\ud81d\uddda\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([95577, 125690, 208525, 211532, 523734]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x83\\x96\\xc1*OI\\x92v\\xa5\\x90>o\\x85\\x7f\\xdaC\\x05B\",\n+            constraints={\"min_size\": 9, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9798997378008296},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd5\\xcdlV\\xd1\\xd0\\xbe\\x955)\\xd9k7\\xc1\\x86\\x93\\xd1?7\\x8e\\xb9\\xf3\\xd38K$\\x1f\\xe7\\x93=1\\xff\\x18a\\x05\\xd1H\\x0b:r8$o\\x1c[\\xe7\\xb3\\xf3\\x0cK{\\xec\\x92\\xea\\x86\\xe8\\xa4Jv!\\x9d\\x86\\xf3\\xa2\\x7f\\xc7\\xd8.\\xdb\\xe3\\xaf\\x99\\xeeX\\x97\\x8b\\x9f\\xfe\\xdb\\x88\\xe9]@v\\x93\\xf30\\x80\\xdc\\x0b\\xfd\\x0e\\x15\\x1e\\x94\\n\\xac\",\n+            constraints={\"min_size\": 44, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-6.226484134260713e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 3.159776045645417e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.9256679395301456e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4_200_142_644_484_948_786,\n+            constraints={\n+                \"min_value\": -24432,\n+                \"max_value\": None,\n+                \"shrink_towards\": -4582,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"&o^\\xdbB\\xc3\\x8f\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4,\n+            constraints={\n+                \"min_value\": -58,\n+                \"max_value\": 7,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    -26: 0.04788825770027594,\n+                    4: 0.03504988149182487,\n+                    -38: 0.09577555763539787,\n+                    7: 0.054122891790218945,\n+                    -16: 0.003785119307620176,\n+                    -54: 0.07445443555866345,\n+                    -45: 0.09352282926880556,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7765360345244998},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud886\ude52\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([203121, 394463])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2442,\n+            constraints={\n+                \"min_value\": -15740,\n+                \"max_value\": 968,\n+                \"shrink_towards\": 30,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"hypofuzz.test_keys\",\n+            constraints={\"min_size\": 0, \"max_size\": 25},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-8411,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 100,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.3183792562082723e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=31985,\n+            constraints={\n+                \"min_value\": -24455,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00032d59\ud804\ude36\ud804\uddb3\\U000154ef\\U0004025c\ud804\udda1\ud804\udda1\ud804\ude3f\ud804\uddd9\\U000dbe5e\\U00012bf4\ud804\udd8e\ud804\uddba\ud804\uddc9\ud804\uddaf\ud804\ude00\\U00011253\ud804\udd64\ud804\uddf2\ud804\udd80\\U00011251\\U00011179\ud844\udf76\\U00039556\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([69983, 376635, 761936, 1012946]),\n+                ),\n+                \"min_size\": 17,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=57,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 90,\n+                \"shrink_towards\": -124,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.635543167885824},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=3776,\n+            constraints={\n+                \"min_value\": -26,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u7057\u7044\u7028\u6fc8\u70a3\u7071\u7026\u6fe0\u7066\\U00042964\u6ff9\u70b0\u70a4\u7055\u7091\u7063\u7012\\U000fe6a5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            28616,\n+                            33893,\n+                            216759,\n+                            224431,\n+                            227974,\n+                            372226,\n+                            382513,\n+                            402943,\n+                            465883,\n+                            732966,\n+                            766484,\n+                            789151,\n+                            961644,\n+                            975709,\n+                            1028580,\n+                            1051628,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 7,\n+                \"max_size\": 107,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8b!^\\xea\\x9ay\\xa0\\x94\\x10\\x9b\\x03\\xe8\\xd6xB\\x8d;1\\xfe\\xb7x\\x8a\\xd6\\x8cye\\xa3\\xdc&;\\xa2&\\xde\\xed\\x85c\\xbd\\x03\\xab\\xc6\\x10(\\xc2\\xf5\\x97\\nM\\xc7\\x07D\\xb8c\\xeb\\xbaq\\\"\\x18~\\xf7\\xc7M\\xd5Yh\\xe7\\xea\\xdb\\x9b)S\\xe7\\x1a6\\xfcH{\\xfdXi\\x05\\xc4\\x1e\\x9d`T\\xec\\x81\\t\\x13\\x892J'\\xfaP#`\\xde\\xa4\\xae\\x9e\\xcfn\\xb7MB\\x8c\\xc9\\x94`\\xa1\\xa2w\\xea\\xb4}\\x0f\\x05@LQ/^C`\\xd0\\x91!8D/\\xa6\\x1a\\xf2\\xd5\\xcf+\\xbd\\xe2E\\x1e\\xf5\\xce\\x93G\\xd3\\xce\\x96J\",\n+            constraints={\"min_size\": 49, \"max_size\": 149},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001c1a5\\U000360ed\\U0006eaf6\\U00070676\ud81d\udf09\\U0005329a\ud81d\udf1e\ud81d\udf3f\ud81d\udef8\ud81d\udf2f\ud81d\udf66\ud81d\udf78\ud81d\udf89\\U0005fc0c\ud81d\udf6f\ud81d\udf75\ud81d\udeb0\ud81d\ude98\\U0005bd10\\U0006fdab\ud81d\ude97\ud81d\udf8c\ud851\udc1a\ud81d\udf59\\U00053760\ud81d\udf26\ud81d\udf05\\U000577b4\ud81d\udf07\ud81d\udee3\ud81d\udf31\ud81d\udf82\ud81d\udf71\ud81d\udf1a\ud81d\udeca\ud81d\udf56\ud81d\udf14\ud81d\udebe\ud81d\udea4\ud81d\udead\ud81d\udee0\ud81d\udf85\ud81d\udf8e\ud83d\uddee\ud81d\udeb8\ud81d\udf7b\ud81d\udf74\ud81d\udeba\\U0006a7af\ud81d\udeab\ud81d\udf73\ud81d\udf6b\ud81d\ude96\ud81d\udf55\\U0003799c\ud81d\udf38\ud81d\udf30\\U00044f58\ud81d\udead\ud81d\udec6\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([95887, 470972, 837208]),\n+                ),\n+                \"min_size\": 47,\n+                \"max_size\": 147,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"P\\x93\\xf99\",\n+            constraints={\"min_size\": 1, \"max_size\": 101},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7672182679274397},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6595772089625994e308,\n+            constraints={\n+                \"min_value\": -3914135524217047.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.6595772089625994e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-4.576109389442273e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.411552981776398e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.462645494804953e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-33741,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -1530,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=6294,\n+            constraints={\n+                \"min_value\": 4092,\n+                \"max_value\": 7765,\n+                \"shrink_towards\": 0,\n+                \"weights\": {5790: 0.34102094946628164, 5479: 0.19879619527752357},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1000, 55849, 67883, 553253, 814617]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.659463021576421e307,\n+            constraints={\n+                \"min_value\": 1.4559981374952916e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.578094334275347e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.05,\n+            constraints={\n+                \"min_value\": 6.103515625e-05,\n+                \"max_value\": 4.927050546787835e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000371c2\\U0003d55b\\U00037233\\U00037214\\U0003724e\\U00037270\\U000ce8df\\U000371ca\\U000371c3\\U000371f1\\U000371b9\\U00037282\\U000371c2\\U0008f03b\\U00037233\\U0003ad3b\\U00037261\\U00037241\\U00037259\\U0003720e\\U00084547\\U000371ee\\U00037253\\U00037247\\U000372a2\\U000371bc\\U00037234\\U0003723a\\U000372b6\\U0003725d\\U0003728c\\U000371c7\\U000371d4\\U0003723d\\U000371c3\\U000371d7\\U00037295\\U00091085\\U00037204\\U000372a9\\U000ed7db\\U000371d8\\U000371fc\\U00037282\\U000372a9\\U000ee1e2\\U00037252\\U00037268\\U0003724c\\U000371d6\\U00037210\\U00037215\\U00037234\\U00037210\\U00037251\\U00092dd6\\U0003727c\\U00092141\\U000371bf\\U00037283\\U000ec435\\U000d1e59\\U00037256\\U000c9157\\U0003724a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            225721,\n+                            316243,\n+                            372853,\n+                            386154,\n+                            539962,\n+                            677055,\n+                            751330,\n+                            1000904,\n+                            1009683,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 31,\n+                \"max_size\": 73,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00082f0e\\U00082ec9\\U00082ec0\\U00082f5b\\U00082ebc\\U00082f52\\U00082f88\\U00082ee3\\U00082ea5\\U00082f6c\\U00082f64\\U00082f53\\U00082f31\\U0009ad09\\U00082edd\\U00082f49\\U00082f4b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([536228, 684687, 732069]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4_352_011_087_054_309_486,\n+            constraints={\n+                \"min_value\": -6378,\n+                \"max_value\": None,\n+                \"shrink_towards\": 532846445,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.0450277734272558e308,\n+            constraints={\n+                \"min_value\": 6.374899559824371e16,\n+                \"max_value\": 1.483776452393125e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.806290398599383e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000eda00\u0438\u0416\\U00085242\u04a9\u0475\u044c\u04d4\u04bb\u0408\u048c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1000,\n+                            68174,\n+                            370797,\n+                            441583,\n+                            544044,\n+                            628349,\n+                            668407,\n+                            686437,\n+                            885961,\n+                            994707,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 8,\n+                \"max_size\": 93,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9999999999999999},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.0863037053216612e-97},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=40,\n+            constraints={\n+                \"min_value\": -108,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u2015\\u2066\u9fe9\\u200a\u308a\u20a3\\u206d\u2c18\u2043\\u2061\\u2004\u20b9\\u2067\u204e\u2016\u2089\u44bf\u20d5\u2071\u8544\u2092\u209b\u2cde\u581c\u209c\u207c\u20a4\u2071\u7c92\\u200f\u2099\u20ad\u20a1\u3963\\u206a\\u2000\u201d\ua90e\\u20f9\u2011\u208c\u20b0\u2057\u2041\u20d2\u2094\u20e2\u20a8\u20ab\\u200b\u2090\u20b1\u2084\u2075\\U00038d40\\u209d\u20b8\\u209e\u20d6\\u202a\u494b\u8159\u20e7\u2077\ub541\u203c\u70eb\\u20c5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([8192, 47741, 227151, 236931, 1096432]),\n+                ),\n+                \"min_size\": 36,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-18375,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 30142,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xacr>\\x84\\xd72\\x9f1\\x05|\\x08bhSQ\\xa36y\\x17/\\x7f?:G\\x98\\x15\\x8a\\x80YQ\\xacqr\",\n+            constraints={\"min_size\": 9, \"max_size\": 109},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.1219527033207866e303,\n+            constraints={\n+                \"min_value\": -1.2851686456667626e272,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.199533272268088e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6.618779692242096e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.333839827809761},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=24717,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8888861614227157},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-14234,\n+            constraints={\n+                \"min_value\": -30099,\n+                \"max_value\": 11430,\n+                \"shrink_towards\": 6796,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00f90fD\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            300,\n+                            1024,\n+                            9999,\n+                            60357,\n+                            154535,\n+                            432938,\n+                            509526,\n+                            647385,\n+                            721017,\n+                            744605,\n+                            758613,\n+                            761918,\n+                            870377,\n+                            957359,\n+                            1020176,\n+                            1059351,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.401298464324817e-45},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7291797396804968},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"O\\xf7N\\x88\\r\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\";;\\xebQY\\xe5H\\x13\\xc8\\xb6D\\x08\\xa0\\xb1\",\n+            constraints={\"min_size\": 13, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7572944461217819},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ucd7a\ucde5\uce01\\U0004ad5b\\U0004cd11\ucdf3\uce29\ucdd9\uce10\ucd4a\ucd45\ucd6b\ucd52\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([52547, 783917])),\n+                \"min_size\": 1,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=51,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 1_857_407_384,\n+                \"shrink_towards\": -12149,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.6581638988698684e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.1584116106130748e-186},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.086430689614042e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"L\\xc58@\\xea\\x16E\\x96\\xcb\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.0801960377121394e22,\n+            constraints={\n+                \"min_value\": -13209371802.769402,\n+                \"max_value\": 4.395458080282707e22,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 406452.41467889835,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8156318760696155},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-12750,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -34,\n+                \"shrink_towards\": -46,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=25,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -21226,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00052a1e\ub81f\ub797\ub837\ub7c5\ub7d8\ub864\\U000532ae\ub7cb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([46982, 382111, 709498, 882320]),\n+                ),\n+                \"min_size\": 3,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -1.6005471291710748e-151,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.241295276361808e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([181310, 413894])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.9821500303575457e-256},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9.829093980072188e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5e-324},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe6\",\n+            constraints={\"min_size\": 0, \"max_size\": 44},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4701,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -63,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6797602088456568},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u7ab1\\U00064bad\u7a0a\u7a68\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            31238,\n+                            38360,\n+                            159879,\n+                            223833,\n+                            364950,\n+                            441938,\n+                            526337,\n+                            553868,\n+                            583743,\n+                            644975,\n+                            690129,\n+                            952818,\n+                            1047825,\n+                            1077360,\n+                            1094097,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x83\\xc5\\t?\\x13\\x17\\x05@\\xe2(\\x0e\\x1e\\x0f\\xde*PJ\\xee\\xc3\\x8c\\xd6\\x82w\",\n+            constraints={\"min_size\": 14, \"max_size\": 114},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.08878459023667175},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.0,\n+            constraints={\n+                \"min_value\": -3.0216380556663587e-84,\n+                \"max_value\": 6.891289577070672e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.1571508922812563e-87,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.8894269609398456e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.973148189911029e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0002fda5\u8375\u8347\u833e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            33516,\n+                            198649,\n+                            313974,\n+                            433962,\n+                            512183,\n+                            535641,\n+                            668364,\n+                            770375,\n+                            784686,\n+                            858646,\n+                            1099683,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd5\\xf6\\xcc\\xd7\\xb2\\xba\\xc3\\xc0\\r\\xa0x\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-20538,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -6538,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.010864404533148077},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u886a\u8828\\U000ca8fd\u87b4\u8810\u8825\\U000aed4e\u886f\u888d\\U0004eda7\\U000a9f8f\u8809\u87c0\u885a\ud851\udc4f\u885f\u889c\u88ac\u888f\u8821\u8851\u8890\\U00013680\u8890\\U0001572c\\U00042b87\u8836\u88ab\u8888\u8887\u87d2\u87ae\u8808\u889f\u8838\u887a\u88a1\u8809\ud852\udc4e\u881c\ud864\udef0\ud872\udd78\u882e\\U00043ad8\u8873\u8809\u87fd\u8838\\U000b6b13\u87c4\u87f8\u87fa\u8892\u8831\u8800\u882f\ud806\ude99\\U0001fdcd\u880c\u887d\u889a\u87cb\u8808\u887e\u8856\u97a6\u8870\\U00088b66\u87b5\u8897\ud874\udcda\u8869\u8864\u87d3\\U00042bff\u8858\u87d1\u8809\u8895\u881b\u87b4\u87b8\\U000c9d86\u87f3\u87b2\u87b6\u87b4\u882f\\U000c8658\u889b\u8864\u886b\u87ed\u884d\u87d9\u87cf\ud862\udc96\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            34733,\n+                            188922,\n+                            248330,\n+                            344742,\n+                            550108,\n+                            585674,\n+                            680287,\n+                            840242,\n+                            1000223,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 45,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.853412618491433e307,\n+            constraints={\n+                \"min_value\": -5.64789413147919e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.2935716994492823e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9909357527930873},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xee\\xa6\\xf2u\\x05\"\\xd8L\\xb6\\x05\\xae\\x9f\\x02\\xed\\xd4|`|\\xce\\xe6\\x89L\\xc2(\\xba\\x95V\\xfc\\xab-\\xf8\\xff\\xe4\\x86\\xe8\\x1d\\x19_\\xa4\\n\\xd8PN\\x16\\xbf\\x9c@\\xaa\\xd8\\x9bV\\xaa\\xc7H9\\xad',\n+            constraints={\"min_size\": 44, \"max_size\": 144},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\";\\xb8?tF\\xb8fj}7\\xb5S<{\\xe5)d]b\\x971\\x06\\x95\\xdd\\xaa\\x134\\x0f\\x87\\x01\\x15.\",\n+            constraints={\"min_size\": 28, \"max_size\": 47},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud840\udd73\\U00083332\ud840\uddf8\ud840\udd2b\ud840\udd58\ud840\udd10\\U0006229f\ud840\udd22\ud840\udd9a\ud840\udd7a\ud840\udd69\ud840\udd0e\ud840\udd9c\ud840\uddff\ud840\uddb6\ud840\uddbf\ud840\udd92\ud840\uddd1\ud840\udd18\ud840\udd2f\ud840\uddb0\ud840\uddc8\ud840\udd43\ud840\ude03\\U000823cc\ud840\udd70\\U000682fa\ud840\uddd7\\U000682a9\ud840\uddb7\ud840\uddee\ud840\udd87\ud840\uddfe\ud840\udd7f\ud840\uddc5\ud867\ude16\ud840\udd86\ud840\udd1c\ud840\udde2\ud840\uddbf\ud840\uddf8\ud840\uddd9\ud840\udd49\ud863\udef5\ud840\udd96\ud840\udd1a\ud840\uddb5\ud840\udd59\ud840\udd52\ud840\udd2b\ud840\uddcc\ud840\udd71\ud840\udd16\ud840\udd1f\ud840\udd4e\ud840\udd36\ud840\udd45\\U00035343\ud840\udd6b\\U000674cc\ud840\udd7a\\U00071191\\U00039f96\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([131341, 239943, 379706, 556782, 596903]),\n+                ),\n+                \"min_size\": 32,\n+                \"max_size\": 132,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8_669_211_235_806_385_186,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005bd61\\U00059082\\U0005912f\\U0005bfec\\U000590ae\\U000590f3\\U0005910c\\U00059062\\U000590b8\\U00059046\\U0005a782\\U00059130\\U000590d4\\U00059073\\U0005a2da\\U0005b9c8\\U00059096\\U0005908e\\U0005905c\\U00059044\\U000590fb\\U00059039\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([364600, 381067, 946474]),\n+                ),\n+                \"min_size\": 20,\n+                \"max_size\": 120,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.8892136186518227e307,\n+            constraints={\n+                \"min_value\": 2.838908950130441e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.759590340509394e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u04e9\u044c\\U0005582b\u04f1\u0450\u043b\u0423\\U000976e1\u0470\u04c6\u04b8\u04fe\u0459\u044c\\U00033032\\U00047c0e\u045c\u04be\\U00081eef\u04d3\u0425\u04a2\ud85b\udda2\u0437\u04d3\u0480\u04d9\u04a9\u049d\u0476\\U00080578\u04c4\u04ef\u0463\u040c\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([1024, 807674])),\n+                \"min_size\": 24,\n+                \"max_size\": 124,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=14765,\n+            constraints={\n+                \"min_value\": 16,\n+                \"max_value\": 31671,\n+                \"shrink_towards\": 127_107_729_329_217_065_437_251_650_337_812_411_654,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u2501\\u2069\u26d2\\u20c8\u201c\u203c\u2017\u20e8\u20b8\\u2073\u20dc\u204d\u24ab\\u202d\u2522\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([8192, 9999, 666708]),\n+                ),\n+                \"min_size\": 15,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"%f\\xe2\\xb7\\x00\\x04`{\\xd4\\x12\\xa7\\x89\\xcf\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1615,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -1521,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.480470811777295},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.30525310596160043},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x8f\\x02y\\xa7\\x85M\\xc4\\x8a\\xfd\\xeek\\xb5;\\x18_\\x9e\\x11V\\xa4A\\xfe\\x925\\x05\\xc2\\x925\\r\\xed\\x94\\x8e#b\\xae\\x07\\xed\\xe6\\x18\\x8f/ \\xfb6.\"\\xbc\\x01\\x08\\x00\\xac\\x8d\\x7f\\\\_v\\xaf\\xe6Ww0\\x95\\x02\\x07J)\\x17\\x94\\xd6\\xc9\\xb7{\\x897\\xb1\"\\xaa\\xca\\x85\\xa8\\t|\\x82A\\xf4\\x94\\xf3\\xb1\\xfc\\xf2\\xf2\\x97P!\\xbc\\xeb\\xbf\\xb7\\xc7\\xef\\xdb\\xa4\\xf3\\x0bmH\\xc6\\xb2\\xf4`\\xcc\\x0fs`Y\\x93\\xf7n',\n+            constraints={\"min_size\": 36, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u27ee\\U000868b0\u274b\\U00010252\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([9999, 568487])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000c5992\\U000c594d\\U000c5908\\U000d5bd8\\U000c5959\\U000c594d\\U000c65cf\\U000c5939\\U000c5939\\U000c596e\\U000c5916\\U000c58b1\\U000c5976\\U000cb216\\U000c5925\\U000c58dd\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([809129, 941625, 1047118]),\n+                ),\n+                \"min_size\": 2,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=18780,\n+            constraints={\n+                \"min_value\": 1045,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6172114955813585},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9458962814838856},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 274682385,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.358856309103459e307,\n+            constraints={\n+                \"min_value\": -1100965748701959.0,\n+                \"max_value\": 7.359368685023568e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.923060897902307e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u1558\u1580\u1562\\U000a29c4\u159f\u15d1\u1537\u1603\u1590\u1533\u15d2\u15b1\u161d\u15fd\\U0008a565\u161b\u15cc\u1537\u15eb\u1619\u153e\u15c1\\U00059d9d\u15f6\u15d5\u1597\u15e1\u1572\u1571\u15ef\u1574\u159a\u15fd\u1572\u1596\u15cd\u156f\u15f0\u15d7\u15a7\u1602\u160f\u159a\u1605\u158d\u15a6\\U00048424\u1530\\U000cd95c\\U0004ac31\\U0008b7c5\u154c\u15b0\u15e2\u15c5\u15f0\\U000ad738\u15e6\u161b\u153b\\U0008b3fb\u1573\u1622\\U000afbaa\\U00048ef3\u1607\u1608\u15ae\\U0005c929\\U000cb430\u15bb\u15f7\u1579\u1620\\U000d0fa9\\U0003af90\u1547\\U00013e25\u1555\u15c2\u15b0\u15a1\u15c8\u1610\u1585\u1554\\U00090e02\u8f9b\u160a\u15e2\u1569\u15b5\u1574\u15f9\u157d\u1559\u15c9\u1558\u1599\u15b6\\U0006b493\\U000551db\\U000c962b\\U000867f2\\U0006f711\u15f2\\U00071baa\u1587\u1644\u1582\\U000b8d70\\U0005b3bf\\U000923b2\u1567\u15e8\\U000ba0fe\\U0001d3bf\u1571\u15f0\u155b\u156c\u1618\u1578\u15b8\u1605\u160e\u158f\u15f9\u1550\u1571\u15aa\\U00087e48\u1608\u155c\u15e4\u15fe\u15ce\\U0007f070\u1529\u1535\u1546\u159e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([5414, 121352, 224686, 323002, 335267, 866563]),\n+                ),\n+                \"min_size\": 50,\n+                \"max_size\": 150,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7410863075013349e308,\n+            constraints={\n+                \"min_value\": 1.2432977135782828e207,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6.539331297764991e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud81d\udf93\ud81d\udf60\ud822\udd26\\U0008d150\ud81d\udf8a\ud81e\udc2c\\U000a48de\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([96077, 825201, 833417]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-212,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -115,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0008df4b\\U0004ef67\\U0004ef67\\U0004ef5d\\U0004f026\\U0004efc9\\U0004f00c\\U000c5279\\U0004f016\\U0004efdd\\U0004efbd\\U0004f004\\U0005f7be\\U00087f1e\\U00098503\\U0004efe4\\U0004f025\\U0004efad\\U0004f036\\U0004f019\\U0004efcb\\U000c0cd1\\U0004eff2\\U0004ef84\\U0004efb1\\U0004effe\\U0004efb7\\U0004ef5c\\U000a335f\\U0004ef6b\\U0004ef5d\\U0004f00e\\U000c1897\\U0004ef80\\U0004ef52\\U0004ef67\\U0004ef6f\\U0004ef8a\\U000b788b\\U0004eff7\\U00074045\\U0004f036\\U0004efc2\\U0004efd6\\U0004efe9\\U0004f008\\U0004ef59\\U0004efd2\\U0005f5ef\\U0005397b\\U0004f019\\U0004f016\\U0004ef61\\U0004f03c\\U0004ef70\\U0004efa6\\U0004eff7\\U0004ef88\\U0004ef97\\U0004f006\\U0004f045\\U0004f00c\\U0006b01c\\U0004ef4c\\U0004ef8b\\U0004f023\\U0004ef80\\U0004f03a\\U0004ef9d\\U0004efb5\\U0004efe9\\U0004ef4e\\U0004ef90\\U0004f028\\U0004ef63\\U0004f020\\U0006d4aa\\U0008a2c8\\U0004ef69\\U0004f032\\U0004f7da\\U0004ef5d\\U00077458\\U0004f011\\U0004ef9f\\U0004efef\\U0004ef9a\\U0004f024\\U0004efcc\\U0004efff\\U0004ef85\\U0004efcd\\U0004f012\\U000bc791\\U0004efa5\\U0004f035\\U0004f02b\\U000bfe3c\\U0004efea\\U0004efa9\\U0004f01b\\U0004efed\\U000600ac\\U0004f011\\U0004f02b\\U0004ef8d\\U0004f01f\\U0004f023\\U0004ef73\\U0004f01b\\U0004efa6\\U0004efb8\\U000c1261\\U0004f014\\U0004efbe\\U00080d08\\U0004ef66\\U000773b8\\U0004ef8a\\U0004ef75\\U0004ef90\\U0004f002\\U0004ef75\\U0004ef5e\\U0004efe0\\U0004efd4\\U0004efaf\\U0004f026\\U0004efbb\\U0004efa1\\U0004effc\\U0004ef9b\\U00052109\\U0004efed\\U0004ef92\\U0004efcd\\U0004ef78\\U0004efb3\\U0004ef9a\\U0004f008\\U0004f031\\U0008bb2c\\U0004efeb\\U0004ef5b\\U0004efff\\U0004eff6\\U0004f035\\U0004efae\\U0004eff9\\U0004ef5a\\U0004efc7\\U000b6f00\\U000b5021\\U000513dc\\U0004f034\\U0004ef77\\U000c5ed3\\U0004eff2\\U0004efb4\\U0004ef79\\U0004f015\\U0004f022\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([323403, 821225])),\n+                \"min_size\": 46,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00060114\\U0006008d\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([393322, 752800, 866415]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-34_094_356_442_116_280_328_987_853_242_804_239_768,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -34_094_356_442_116_280_328_987_853_242_804_215_057,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.676695733663959e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u27e4\u27b6\u280a\\U0004d1a7\u2732\u27f4\u276c\u27ac\u273f\u279d\\U00041121\u27fe\ud852\udf85\u27a7\u27fb\\U000426e7\u27ec\u27a0\u272a\\U000d4781\ufc71\u27aa\\U0005014f\u2803\u2712\u2737\u27a8\u2762\u2784\\U000e5611\u2723\\U000ce41c\u2800\u274c\u27ea\u2792\ud81c\udef2\u27da\u27fd\\U000e9224\u272d\u2768\u27fa\u27dc\\ueb80\ud84d\udee2\\U0007bef6\u280c\u275e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            9999,\n+                            335833,\n+                            431722,\n+                            533264,\n+                            830568,\n+                            889829,\n+                            922461,\n+                            974043,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 43,\n+                \"max_size\": 143,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.289863967743131e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x00\\x87l*m\\x92?\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=32344,\n+            constraints={\n+                \"min_value\": 23383,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.07642413531320004},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7_130_439_179_252_836_439,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=12142,\n+            constraints={\n+                \"min_value\": 12046,\n+                \"max_value\": None,\n+                \"shrink_towards\": -90,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1_586_329_322,\n+            constraints={\n+                \"min_value\": -1_586_389_602,\n+                \"max_value\": -29445,\n+                \"shrink_towards\": -5319,\n+                \"weights\": {-1_586_329_322: 0.5},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=3_184_312_771_548_756_691,\n+            constraints={\n+                \"min_value\": 3_184_312_771_548_756_673,\n+                \"max_value\": 3_184_312_771_548_756_749,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([101554, 361011])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7853964288010389e308,\n+            constraints={\n+                \"min_value\": -2.4178843908105335e39,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.9529451576592983e-286,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.504812616997976e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.138785182545645e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.515972569131529e307,\n+            constraints={\n+                \"min_value\": -1.5515963560739575e-49,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.068253985877484e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=17560,\n+            constraints={\n+                \"min_value\": 11186,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xfa\\x80\\x87\\xcf\\xce\\x8a\\xa2\\xed\\xbf\\xdc\\xff\\x96gL\\xca/\\x8f\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0554499994645319},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00010070\ud800\udc0b\ud800\udcb0\ud83e\udd73\ud800\udc1d\ud800\udc40\\U0001a725\ud800\udcea\ud800\udcc8\ud800\udc4b\ud800\udcac\\U00086c3d\\U000134e1\ud800\udc81\ud800\udc40\ud800\udc1c\ud800\udcea\ud800\udcb8\ud800\udcb9\ud800\udcbc\\U00010069\\U0001007d\ud800\udc9f\\U00010064\ud800\udc08\ud800\udcb3\ud800\udc29\ud800\udce5\ud800\udc21\ud800\udcce\ud800\udcc3\ud800\udca5\\U0008831e\ud800\udcb1\ud800\udcf1\ud800\udc4c\ud800\udc9e\ud800\udca7\\U00013d0d\ud800\udc92\\U00010069\\U0008413b\\U0001cc95\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [65535, 145729, 490632, 502013, 539928, 562566, 965515],\n+                    ),\n+                ),\n+                \"min_size\": 21,\n+                \"max_size\": 121,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.27703403519319175},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-21950,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 118_388_495_731_837_009_752_674_118_598_931_276_933,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.701451982651456e213,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6.490994859657418e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9b\\xe67\\xef\\\\bc\\tT#R+\\xa4:T~\\xe3dd<N\\xdc\\xe9\\x83\\xbb\",\n+            constraints={\"min_size\": 10, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.2776134510346298e291,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0089366812802588e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.15568093133860253},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.4168187705844463e308,\n+            constraints={\n+                \"min_value\": -7393642299055406.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.4168187705844463e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003f2fd\\U0003f277\\U0003f289\\U0003f301\\U0003f2d8\\U00066b30\\U0003f260\\U0003f28e\\U0003f24f\\U0003f2d6\\U0003f293\\U0003f314\\U0003f2e0\\U0003f2e6\\U000ca448\\U0003f2eb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([258598, 432058, 772607, 942807, 994049]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xe6\\xdf:\\x04\\x0b\\xa0\\xef\\x97\\xac\\x0cDx\\xec\\x97\\x01\\x8e7>\\x1c\\xc6\\t\\xe8~\\x90\\xc0zO\\xeb\\x8f9\\x88\\x00\\xef\\x9c\\x08cd-\\xa1\\x94\"M\\xdb\\x19\\x92\\xaf',\n+            constraints={\"min_size\": 36, \"max_size\": 104},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud87e\ude13\u27b6\u2784\\U000a84ee\u273e\u27e6\u2773\u2789\\U000cf870\u2790\\U000d1f04\u2799\u2722\u27a2\\U000cf4e6\u27fa\ud841\udc21\\U000d3bb3\u2801\u2733\u2722\u27a3\u27d9\u272a\u27eb\\U000463c6\u27db\u278b\\U000c6a7f\u2754\u275f\u277c\u278e\u27c0\u27f4\u2759\u2758\u2738\u2770\u2801\u274a\u2751\u27ef\u27c1\u27ba\u2775\u279f\u27aa\u2798\u27f6\u273a\u27f9\u2774\u2725\u271a\\U0003e746\u27bb\\U000cf928\ud834\udc9b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            9999,\n+                            33339,\n+                            89707,\n+                            200990,\n+                            253763,\n+                            311723,\n+                            370467,\n+                            478076,\n+                            538177,\n+                            619708,\n+                            678277,\n+                            717697,\n+                            780787,\n+                            817898,\n+                            825818,\n+                            876593,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 45,\n+                \"max_size\": 145,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u27e3\u27df\\U0001ece6\u273b\u27c1\u278f\u2806\u2806\u2794\u2764\u271d\u2787\u2730\\U0006566f\u2786\u274e\u27e7\u27ae\u27e5\u2743\u2794\u27c9\u27f5\u2805\u27c4\u279f\u27c2\u280d\\U0007632c\\U00063c92\u2773\\U00044230\u27d0\u27f9\u27ed\u27c2\\U00069321\u27ef\u2755\u27af\u27c5\ud888\udd78\u273c\u27be\u2756\u2777\u27cf\\U0004c088\u273f\u27d7\u2751\u27ef\\U0006563b\u27dc\u27c3\\U000454d4\\U00053f14\u27e5\u27b1\\U00065f11\u2724\u27a3\\U000363ee\u2801\u2807\u2728\u27b4\u2791\u2710\\U000ad26b\u278b\u2727\u2791\ud85f\udcd8\u2758\u27a1\u2773\u2777\\U00032ebf\u2792\\U0005568e\u2806\u2758\u2731\u2736\u27d4\u27e8\u27e0\u2723\u272b\u27b7\u280e\\U00045ee3\u27dd\u278f\u2731\u2792\u272c\u2745\u27aa\u27a2\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [9999, 65535, 74692, 511307, 693450, 711422, 758714],\n+                    ),\n+                ),\n+                \"min_size\": 37,\n+                \"max_size\": 137,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000369c9\\U00036a18\\U00036a4f\\U000a5040\\U00036a73\\U00036a20\\U00036a3f\\U00036a8b\\U00036a06\\U00036a60\\U00036a1b\\U0005ab54\\U0009bea6\\U0005e04d\\U000369c0\\U0009a00c\\U000369b2\\U00036a0f\\U00036a07\\U00036a18\\U000369a1\\U00036a24\\U000369ac\\U00036a25\\U00036a1c\\U00036a3f\\U000369dd\\U00036999\\U00036a77\\U00036999\\U000369c1\\U00036a43\\U000369a2\\U0003699f\\U00036a11\\U00097f08\\U000369ce\\U000369fc\\U000be656\\U00036a56\\U000369f2\\U00036a42\\U000369c3\\U00036a06\\U000369ef\\U00036a50\\U00036a7f\\U000369e5\\U00038fc4\\U000369e7\\U0003f49f\\U000369e9\\U000812ec\\U00036a14\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [223636, 267678, 310588, 411110, 453362, 840533, 841237],\n+                    ),\n+                ),\n+                \"min_size\": 45,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.178985214784725e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xbdp\\x05\\x94\\xf9\\xf1\\xab\\x8e\\xa7\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.080122515163508e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 4.600224044704454e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.7276687181516915e-29,\n+            constraints={\n+                \"min_value\": 1.3203822114192273e-92,\n+                \"max_value\": 2.220446049250313e-16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.225073858507203e-309,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd6\\x16R:\\x9ah\\xb6\\xd3\\x95k26\\xcf2\\x1a\\xdey\\xd9_\\x85k`\\x08\\xc4\\x1a3!\\xec\\xfc\\x16K\\xd5\\xcc\\xd3\\x1c\\xbb\\x14\\xabxv\\x88\\xbc\\x19\\xa0\\xfc\\xbc\\x8e^\\x04\\xdb1\\xf4C\\r\\x7f^|c1\\xa1\\xe8\\xda\\x99\\xa9\\x0b\\xf486\\x11\\xcb7\\xa5x\\x8b\\xc0\\x02\\x95*\\xac]\\xf5R\\x9eM\\x93\\xc1\\x9a\\xff\\x08\\x90\\x05\\xe1?EW\\xb5PB\",\n+            constraints={\"min_size\": 46, \"max_size\": 146},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u012d\u015c\u01f6\u0136\u0221\u4049\\U0005e322\\U00043f19\u01b4\u01b9\u0196\\U0008b85f\\U000e1b87\u017f\u01f2\\U0006dfa5\u01c3\\U000a42e2\u01ac\u0202\u0198\u020b\u01c9\\U0001610d\ud858\udce1\u0131\u020a\\U000b3aa4\u0141\u01b7\u020b\u0192\u018b\u015a\u0207\\U0003e174\u016c\u01fe\u0191\u021d\u0200\u015d\\U000d1169\\U000dcb55\u0168\u021c\u01f3\u0204\u01e6\u0163\u01e5\\U000164b2\\U0009c7ad\u0130\u013d\\U00037664\u016b\u0228\u012e\u0216\u0218\u0134\u0223\u01b2\u01df\u0209\u01fd\u0188\u01ce\u021a\u0174\u0159\\U000cd9a9\u0136\\U0004f0c0\\U000f8b55\u017a\u0184\u0133\u01fc\u01cb\u0168\u0206\u01c2\u01b4\u01ca\u01a1\u01f9\u015c\u01e9\u01b0\u01d3\u0196\u01be\u0132\u01ed\u0150\u01e3\u01f1\u01f4\u0189\u0170\u0198\u01c4\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([300, 1058515])),\n+                \"min_size\": 44,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7886,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 7167,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00015752\\U00015709\\U0001569c\\U000156aa\\U000156ae\\U000156f3\\U000156e7\\U000156ec\\U00015730\\U0001570f\\U00015697\\U0001568d\\U0001574b\\U00015775\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            87677,\n+                            191130,\n+                            259581,\n+                            331720,\n+                            455523,\n+                            514819,\n+                            639566,\n+                            645622,\n+                            942919,\n+                            1042683,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0007cdfc\\U0009281e\u024e\u024f\u01a8\u01dd\u0268\u0283\u0203\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([404, 159837, 300546, 688959]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9007102218873722},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.09338621351715e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00015bd9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [88981, 95114, 185850, 274411, 645763, 908576, 942758],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-4.093304458028323e-87,\n+            constraints={\n+                \"min_value\": -5.960872456753508e-87,\n+                \"max_value\": -7.476808990582152e-130,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.225073858507e-311,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"Y\\x19i\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6376108780578158e50,\n+            constraints={\n+                \"min_value\": -3.088300754715589e-280,\n+                \"max_value\": 3.102774593528034e50,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.339997927194225e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xac\\xcc\\x11\\xben\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.417024162374987e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=16293,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 1_381_286_195,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-938_992_878_737_979_896,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -938_992_878_596_407_698,\n+                \"shrink_towards\": -51,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u3a2f\\U000452ef\u3a56\u3a9b\u3a4b\\U0003c6d5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([14795, 143637, 224488, 290735, 556849]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00042442\\U00042424\\U00042497\\U000424a0\\U0004245d\\U000861cc\\U00042400\\U00042401\\U00042427\\U0008655a\\U00051877\\U000423ea\\U00059cd6\\U00042478\\U00042407\\U000424bc\\U000423f6\\U0004248d\\U0004574a\\U00042477\\U00042469\\U00042485\\U00042403\\U0004249c\\U000594c7\\U00065115\\U00042493\\U000423fc\\U000423fb\\U000423f6\\U00042491\\U0004249b\\U00042485\\U00042420\\U000423d5\\U0008a422\\U0004249f\\U0008da8c\\U0004240b\\U00064248\\U00062ced\\U000423e7\\U000424a7\\U00042452\\U00042461\\U0004243f\\U00042454\\U000424c2\\U000423f0\\U000423ea\\U00042462\\U00042416\\U000423fd\\U00042457\\U00059274\\U00042431\\U000424af\\U000423d4\\U00042433\\U0004249b\\U000818e3\\U000424c7\\U0004241b\\U000423f4\\U000609d9\\U0004241a\\U0004242d\\U000423d5\\U00042498\\U0007f0f3\\U00042477\\U0004240b\\U0007e634\\U000424bb\\U00042407\\U000424be\\U00043357\\U000424aa\\U000424c8\\U00042450\\U00042435\\U0004240d\\U000423e1\\U00042476\\U000424bf\\U00042479\\U000423e6\\U000768d3\\U0004efe8\\U000423d0\\U00080f08\\U00042486\\U0004245b\\U00042465\\U000423fc\\U00042411\\U000423f0\\U00042429\\U00042451\\U0004eef1\\U00042490\\U00042420\\U0004241e\\U00042419\\U0004244e\\U0004245f\\U000424af\\U00042415\\U00042461\\U000423e0\\U00042417\\U0004fa76\\U000424bc\\U00047122\\U00042431\\U0008d506\\U00087b40\\U00042463\\U00042409\\U00042412\\U000424b2\\U00042437\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([271306, 417986, 474495, 593715, 784205]),\n+                ),\n+                \"min_size\": 22,\n+                \"max_size\": 122,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -4.735061004935726e-269,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.40745696199644e306,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=19451,\n+            constraints={\n+                \"min_value\": 36,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.617928791485881e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xbc\\x9b\\xf8\\x9f\\xf4 \\x8c\\xcb\\xb0\\x96#R6v\\xc3X\\xe0ik_\\x954\\xd8\\xe8\",\n+            constraints={\"min_size\": 16, \"max_size\": 116},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.357626936562197e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0778160793234046e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 3.820027574097695e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 8.011639981777787e-213,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.10500304960511866},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8724970112309556},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-26070,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -26018,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=23981,\n+            constraints={\n+                \"min_value\": -5447,\n+                \"max_value\": 24942,\n+                \"shrink_towards\": -21118,\n+                \"weights\": {5787: 0.007502476921600737, 7101: 0.04249752307839926},\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe2\\xd4\\x8b\\x03\\x10Z\\xc2O\\xc2\\x17E\\x13\\x95\\xd7 WJ?D\\x85u\\xde\\xfa\\xf7\\x1a\\xd0~u\\xd3\\x16\\xf2\\xb8\\nQ\",\n+            constraints={\"min_size\": 20, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=6462,\n+            constraints={\n+                \"min_value\": 5525,\n+                \"max_value\": 30315,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9940,\n+            constraints={\n+                \"min_value\": 84,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.172027824819467e188,\n+            constraints={\n+                \"min_value\": 2.6687711537088224e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5e-324,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"fPE`\\xe2V\\x89\\xae\\xb0^\\xb6\\xc8\\x9c\\xac\\xddi\\xb5\\xe7\\xd6)\\xa0\\xe3\\x81\\xd9X\\x9e\\xfcz\\xb6\\xda\\x8f\\xfey\\xd6\\xfc\\xdf\\x9a\\x8f\\xb7\\xc1Z\\x82\\xabi\\x91a\\x98e\\xdd\\x1d\\xdc\\x84 \\x12&\\x85\",\n+            constraints={\"min_size\": 44, \"max_size\": 144},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6827105498718872},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.4321071985403018e107,\n+            constraints={\n+                \"min_value\": 2.225073858507e-311,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.8069883853032835e73,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.4757891827696922},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.7437557909998264e16,\n+            constraints={\n+                \"min_value\": -6.068745133144954e16,\n+                \"max_value\": 7.097168788782065e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8329316386664837.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=30684,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 48,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.8793810844364856e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.1023919243695956e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1_185_917_661_131_494_257,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -1_185_917_661_131_494_226,\n+                \"shrink_towards\": 717634984,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 6.103515625e-05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.40597847204502646},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00012a18\\U0001298f\\U000129ef\\U00012977\\U0001295c\\U00012a25\\U000129e5\\U0001295e\\U0001297c\\U00012a40\\U000129cf\\U00012a36\\U00012962\\U00012961\\U00012992\\U0001296a\\U00012a28\\U000129f2\\U00016e36\\U0001295c\\U000129d7\\U000129ed\\U000129d3\\U000129f6\\U00012a2d\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([76109, 257601, 438145, 438885]),\n+                ),\n+                \"min_size\": 21,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-41889187,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -41858708,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.150223050271887e307,\n+            constraints={\n+                \"min_value\": -2.225073858507203e-309,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5e-324,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-748993970,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -30733,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8771043127111182},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00e3\\xads\\x87G\ud84a\udf2d\\x14\u00bbt\\x0c\u00ab\\x8aU4\u00dd\u00d6rc2\\U00066419\\x17\u00dc\u00bf\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [0, 143998, 259504, 555748, 620150, 800267, 931753]\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.27300040293292566},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.055644834079171e307,\n+            constraints={\n+                \"min_value\": -114797354837274.0,\n+                \"max_value\": 5.055644834079171e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.055644834079171e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.03559339665047934},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-23938,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 65,\n+                \"shrink_towards\": 8969,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00039d13\\U0003a2a1\\U00039c64\\U00039c13\\U00039bea\\U00039d9f\\U00039c6a\\U00039bee\\U00039be0\\U00039c43\\U00039c65\\U00039c48\\U00039bef\\U00039bcc\\U00039bbf\\U00039c56\\U00039c82\\U00039f24\\U00039f41\\U0003a06e\\U00039c6b\\U00039c25\\U00039c6a\\U00039c60\\U00039bc0\\U0003a294\\U00039ca1\\U00039bd1\\U00039c0c\\U00039c80\\U00039c77\\U0003a2c1\\U00039bc0\\U00039c1d\\U00039c6f\\U00039c3b\\U00039c7b\\U00039bc3\\U00039be9\\U00039be6\\U00039c57\\U00039dbb\\U00039bb5\\U00039fa3\\U00039bfa\\U00039bed\\U00039c3f\\U00039c40\\U00039bfe\\U00039c13\\U00039bd9\\U00039fc2\\U00039c48\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([236469, 238373, 387667]),\n+                ),\n+                \"min_size\": 44,\n+                \"max_size\": 144,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1e-05},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"M\\x99\u00dc\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([0, 567432, 847738, 849603]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xbf\\xde$\\xdb\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.4667012265524634},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([776515, 1004697, 1067384])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-14291,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000c883b\\U00012997\\U00012a69\\U00012993\\U00012a05\\U000129fc\\U00012a1b\\U00012a6e\\U000aecba\\U000782c6\\U000129fe\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([76168, 831123])),\n+                \"min_size\": 9,\n+                \"max_size\": 109,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.060372200373668e308,\n+            constraints={\n+                \"min_value\": 4.069590813429289e87,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.7252411305260286e-236,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'z$\\xd8\\x19\\x0ci\\x88$ajG\"N\\x84\\xe9c',\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-31379,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 59,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9286739320260933},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000608ad\\U000608e0\\U000608fd\\U000845c8\\U00096129\\U00060901\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([395357, 630685, 679676, 681409, 943196]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6608831985029907},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa0\\xe4\\xe0g\\xf4F3\\xa1\\xc9\\xef\\x1b\\xa3e)\\xde\\x8f*\\xde\\x8c7\\xdb\\xfb\\xb4\\xa0\\xdf\\x94}W\",\n+            constraints={\"min_size\": 24, \"max_size\": 58},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"^\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5443649325389827},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=113,\n+            constraints={\n+                \"min_value\": -57,\n+                \"max_value\": None,\n+                \"shrink_towards\": 393565492,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.6366974814984187e291,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.7625691567212056e139,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8784077584980456},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"l}x\\x0fUK{\\xad\\xecE$\\x0f\\x1a\\xf77\\xa3d\\x1c\\x800M\\xbb\\x98]\\x7f\\x98\\x05ae)\\x0f\\xba\\xc6\\xe7\\xca\\x82\\x07\\x80\\xbd\\xfbj\\xcf\\xa7\\x04\\xc8\\xc9\\x1d\\xce\\xa6i\",\n+            constraints={\"min_size\": 43, \"max_size\": 102},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=596,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 4335,\n+                \"shrink_towards\": -18,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            404,\n+                            512,\n+                            55409,\n+                            133122,\n+                            516834,\n+                            765958,\n+                            824116,\n+                            860933,\n+                            867622,\n+                            891235,\n+                            905203,\n+                            1002529,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-22822,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 18068,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.08283345484274919},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u01fe\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([300, 90900, 1004467])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\u202f\u2021\\u2008\\U000b5bac\u204f\u20e4\ud83e\udd3a\\u20f2\u205d\u8586\u2046\u2015\u208a\u20d3\u2014\ud83e\udcb1\u204c\\u20ca\\u2065\\U000adaee\\u206d\\u202b\u2026\\u2060\\U00053d80\u203a\u20c0\u20b9\u207a\u207d\\u20c2\u207a\\u20f3\\u20f1\\u206c\u20bb\\u206c\u20a6\u20a6\u2030\u2038\\U000554bc\\U0004afbd\\U00047909\u20e3\u20b7\u9843\u2031\\U000b93ef\u201e\\u20ff\u2037\\u2006\u20e4\\u20fc\u204f\u2056\u20a5\u20ee\u20a1\u208a\u2033\\U000b6eb9\\U000522c8\ud857\udd56\\U000ad846\u20dd\u20b8\u20e9\u209a\u20b9\\u20cb\u2055\\u20c4\\U00047731\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            8192,\n+                            50688,\n+                            91966,\n+                            162496,\n+                            252274,\n+                            266246,\n+                            291705,\n+                            352212,\n+                            709354,\n+                            768969,\n+                            846290,\n+                            918176,\n+                            1037669,\n+                            1055196,\n+                            1103524,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 31,\n+                \"max_size\": 75,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-115,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0008b7cd\\U000792f2\\U00079314\\U00089c8f\\U0007927e\\U000792e0\\U00079297\\U00088521\\U00079328\\U00079288\\U0007925f\\U00079249\\U0007933b\\U0007928f\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([496196, 592213])),\n+                \"min_size\": 4,\n+                \"max_size\": 104,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=300,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1226,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 1543,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=31307,\n+            constraints={\n+                \"min_value\": 31255,\n+                \"max_value\": 31307,\n+                \"shrink_towards\": 54,\n+                \"weights\": {31303: 0.5},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-52,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -772,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9910477046855808},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud822\udfca\ud822\udfba\ud822\udf60\ud822\udfdc\ud822\udfeb\\U000c26e2\ud822\udf0a\ud822\udf65\ud822\udf56\ud822\udf37\ud822\udefb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([101108, 355070, 754188, 969965, 1025189]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.3740559923233735e308,\n+            constraints={\n+                \"min_value\": 6.142844223116469e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.3740559923233735e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7_864_322_305_892_328_683,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 21122,\n+                \"shrink_towards\": -5285,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.31316589688363e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.535757543360579e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004695b\\U00058124\\U000469be\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [289091, 516880, 521134, 672960, 764692, 1086449, 1114110],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u6f3c\\U000c6ce7\u6f5f\u6faf\u6fb0\u6fa5\u6fd5\u6f33\u6f50\u6f86\u6f14\ud857\uddcf\u6f34\u6f65\u7002\u6fe5\u6fc6\u6f87\u6f53\u6f82\u6f17\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            28424,\n+                            59186,\n+                            65535,\n+                            178258,\n+                            217809,\n+                            286615,\n+                            286696,\n+                            287659,\n+                            287689,\n+                            369250,\n+                            402480,\n+                            439086,\n+                            449201,\n+                            497259,\n+                            689064,\n+                            724112,\n+                            724541,\n+                            753434,\n+                            771631,\n+                            903642,\n+                            1023655,\n+                            1072017,\n+                            1085209,\n+                            1113524,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 10,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-10625,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -69,\n+                \"shrink_towards\": -22125,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-20766,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -20664,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.30873534887312776},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"D\\xa1\\xd6\\x12\\xe4\\xb3_V~\\x14\\xc0\\x8c4)\\x8a\\xc5ypy\\xb1\\x82\\x99b\\xea\\x80&\\x17\\xe6\\x04A\\xc1\\x8e\\x89\\xc5\\xb0\\xda\\xc4a\\xefu+\\xd8\\x0e\\xa0\\x90\\xe9Y\\xc4)i\\xc0\\x85\\x91,\\x82N\\x88\\x05\\x1e\\xc1\\xb2\\x14\\xde0\\x1a\\xb5d\\xd0\\x0bOZ#\\x1e\\xf29a\\x99\\xab\\x00}^\\x94L[0\\x03\\x9cry\\x907\\xe3\\x1c\\xfb\\x94\\x9f\\xee\\xc6y>\\xc0m\\x1c\\xaa\\x12\\t\\x10pNW\\xb7\\xe6\\x97\\x7f\\x83R\\xd8x\\xab0-\\xe4Z\\xe8V\\xe9\\x97\\x01\\xa4a!\\xe7O\\xbd\\xa4\\xe3\\xe9!\\x9c\\xeesg8z\\x97\\xee\\xf41\\x8e\\xd4\\x04$\\xd8\\x847;\\xb6\\xf2\\xe0\\xafb\\xf7\\x93\\xbf\\x00\\xf5\\x1f2\\xc9\\xc0|Y\\x1f|\\x0f\\x7f\\xc7\\xde\\xde\\x15L\\xf6\\x9c\\x90~\\xc2\\xef\\x1f\\xa9/Jy\\xab\\x7f\\x13$N:~\\xbc\\x9bJ\\x03=\\xfe\\nq\\x95\\x0c\\xc3\\xb1\",\n+            constraints={\"min_size\": 49, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=5223,\n+            constraints={\n+                \"min_value\": 2978,\n+                \"max_value\": None,\n+                \"shrink_towards\": -82,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xcel\\xe9\\x85\\x00p\\x06\\xbb\\xaf\",\n+            constraints={\"min_size\": 7, \"max_size\": 107},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0206\u0204\u01f2\u01d8\u01f6\\U000b360f\u0271\u026d\u022f\u024f\\U0010341b\u01c4\u01c4\u01ab\u0259\u01ec\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            404,\n+                            1024,\n+                            65535,\n+                            119352,\n+                            332191,\n+                            344747,\n+                            555479,\n+                            567594,\n+                            685712,\n+                            951584,\n+                            1057575,\n+                            1066622,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 7,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-32131,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -32069,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.failures\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x86Pl\\rs\\x90N*C\\x1f\\x00\\x1b]\\xcdP\\x92\\xad\\xd86U\\xb5\\x93\\xa4\\x08\\x0c\\x83(\\xa5I\\x91\\xe5\\x0c\\xbd\\xe1\\xff\\x16e&\\xbf\\x17G\\xa4\\x7fKEH\\xc5\\xec\\x0c\\xea\\xe6\\xf7\\xb0_Pb\\xe6]\\xb4\\xfc\\xb6y+\\xa7(le\\x18SQV\\xcf\\x0b}u\\xc0\\xc8\\x00Sau\\xd3\\x8b\\xb0\\xf2X\\xc5\\xf5y\\xa7Z\\x1f\\xb0\\x83\\xa5f\\xa9V\\xe7ed\\xba\\xa5\\x0b\\xdd\\xdd\\xfc\\\"?\\xca\\xd0\\xc9p\\x1a\\x90\\x94J:'\\x10)I5P\\xa6y\\xaeFt\\x85o\\xe3\",\n+            constraints={\"min_size\": 32, \"max_size\": 132},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8729805582272601},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004fe73\\U0004fe02\\U0004fe93\\U0004fdbe\\U0004fdf0\\U0004fdbe\\U0004fe26\\U0004fd9f\\U0004fe71\\U0004fd9b\\U0004fe32\\U0004fe0b\\U0004fe56\\U0004fe8a\\U0004fdbd\\U0004fe7a\\U0004fda3\\U0004fe55\\U0004fe5e\\U000d97ac\\U0004fe3a\\U0004fe5b\\U0004fe18\\U0004fe30\\U0004fe13\\U0004fdc4\\U0004fdef\\U0004fe32\\U0004fe22\\U0004fd9b\\U0004fe96\\U0004fda1\\U00068305\\U0004fe18\\U000fd77b\\U0004fdf3\\U00064946\\U000b8d7a\\U0004fde7\\U0004fdc4\\U0004fe92\\U000fd5e8\\U00091b0d\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([327063, 1114111])),\n+                \"min_size\": 29,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6232069875942154e308,\n+            constraints={\n+                \"min_value\": 2.196362364194372e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.697279548972436e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.402823466e38,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.2961203823987512e-58,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.169533225707041e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.9353471745261784e-201,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.7922692372952725e-205,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-5688,\n+            constraints={\n+                \"min_value\": -28894,\n+                \"max_value\": 5,\n+                \"shrink_towards\": 66,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud83c\uddfa\ud83c\uddf8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            71188,\n+                            252317,\n+                            288209,\n+                            340688,\n+                            465490,\n+                            467718,\n+                            514421,\n+                            611202,\n+                            707395,\n+                            781935,\n+                            807737,\n+                            941564,\n+                            953987,\n+                            1085600,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-30959,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 119,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00070235\\U00070223\\U000702e2\\U00085ab0\\U000702fd\\U000702be\\U000702ed\\U00085e6c\\U000702fc\\U000870a7\\U00070269\\U00081557\\U00070272\\U0007025d\\U0007023a\\U00070295\\U0007a3cf\\U00070286\\U0007023f\\U00079889\\U00070277\\U00070240\\U000702fb\\U00070209\\U00070229\\U0007020f\\U0007026c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([459267, 555108, 1063886]),\n+                ),\n+                \"min_size\": 20,\n+                \"max_size\": 120,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.4202286680381364e307,\n+            constraints={\n+                \"min_value\": 3.782131391295587e16,\n+                \"max_value\": 1.3744215091938113e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.134772676984903e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=41750,\n+            constraints={\n+                \"min_value\": 20555,\n+                \"max_value\": 3_305_236_713_896_678_908,\n+                \"shrink_towards\": 2_996_536_064_701_075_222,\n+                \"weights\": {\n+                    34330: 0.050989821718400295,\n+                    20555: 0.14062404301534503,\n+                    57197: 0.2790342520763521,\n+                    3_233_743_546: 0.2812682691220922,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.3809182783485304e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00f6\\x0e2\u00bc\u00e5\u00dcD\u00ae\\x00\u8feb\ud85f\udc270\\x9a\\x0f\\U000458e7\u00bb\u00a8-\u00e2\u00f8\\x1er\\U0003e30c\ud882\udc54\u00e4\\U0003d00a\u00f4\u00f9Z\\x87\u00e8\\\\\u00e5\\x1d\u00ba\u00c4\\x82\\x8b:\\x10\\U00049e63\\xad\\U000667fe\\U00048852\u00f54\\x02hs\u00a9\\x1f\\U0007d7e3\ud886\udc49\\x8a\u00bd;\\U000705a0.\u00b5\ud840\uddac!\\x8b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([0, 630360, 804095]),\n+                ),\n+                \"min_size\": 45,\n+                \"max_size\": 145,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd0x\\x98\\x8e\\xe4\\xf5\\x02\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u280f\u2752\\U0009ee9a\u276c\\U00097b57\u273d\u2771\u27b7\u2782\u274c\\U000e56c0\u277a\\U0009d84f\u2731\u27e1\u2785\u273b\u272c\u2726\u2772\u2806\u27a3\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([10005, 142692, 264966, 958908, 1000842]),\n+                ),\n+                \"min_size\": 9,\n+                \"max_size\": 109,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004cf81\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([315189, 344410, 809605]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"oS=t\",\n+            constraints={\"min_size\": 0, \"max_size\": 86},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"f\\n\\x96\\x96\\xdc\\xe3:\\xa2\\x84&\\x95\\x89\\xf2\\xcd\\x08\\x07\\x11\\xc8Q\\xa1\\xd3\\r\\xd7\\x07\\\"\\x8c\\xebK\\x87T\\xf7\\xb6\\xef\\xc3\\x17e\\xf9\\xb4z\\\\'xw\\xd4\\xbf\\x9e9qF\\x98\\x11u/[4\\x95\\x9c\\xb4\\x10\\xcf\\x8f\\x87\\x91\\xd5\\x8ad\\xdb\\x92\\xb7\\xde\\x93\\xf5\\xa62]\\x13\\xa6\\xc2\\xc7Gx\\xfdba\\n2`F\\xb9\\x82\\x0eEN\\x0b\\xe6\\xe9\\xecd\\x0e\\xbf}\\xb5K\\x8c\",\n+            constraints={\"min_size\": 44, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"+-42\\xa3hB\\xac{+\\xb8a\\x0eH\\xb1k\\xb3\\xc9a\\x1e\\xe3\\xee\\r[\\xe0\\xb0\\x05\\xf0\\x07\\xb7\\xa2\\x0br4G5\\x1a\\t\\x1d\\xd5J\\xa1 \\xb0rZ\\xdc%\\x14\\xb4\\xc8\\xed\\x88\\xf6\",\n+            constraints={\"min_size\": 28, \"max_size\": 128},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.9746067651541664e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.7024481410535348e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001aedc\\U0001ae18\\U0001aed1\\U0001ae99\\U0001aee2\\U0001aeb2\\U0006ca08\\U0001ae5f\\U000fb483\\U0001aec7\\U0001aef8\ud840\uddcd\\U0001aec3\\U0001aec5\\U000ccb33\\U0001aeb2\\U0008f6e6\\U0001ae90\\U0001ae2c\\U0001ae9f\\U000c2d20\\U000d17d6\\U0001ae52\\U000c0911\\U0007d923\\U0001ae68\\U0001ae87\\U0001ae66\\U0001ae81\\U0001aed1\\U0001ae0f\\U000b520d\\U0001ae58\\U0001ae22\\U0001aeb5\\U0001aeac\\U0001aeaa\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            110075,\n+                            137563,\n+                            233479,\n+                            241456,\n+                            386089,\n+                            880983,\n+                            911763,\n+                            1062862,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 26,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.22232675810087438},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1027,\n+            constraints={\n+                \"min_value\": -11156,\n+                \"max_value\": None,\n+                \"shrink_towards\": 1_138_179_174_816_262_100,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=59,\n+            constraints={\n+                \"min_value\": -70,\n+                \"max_value\": None,\n+                \"shrink_towards\": -157_267_195_621_638_558_069_914_769_784_036_298_734,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.558855163002886e307,\n+            constraints={\n+                \"min_value\": 8.834735093067813e-203,\n+                \"max_value\": 7.558855163002886e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.581601015600785e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7610,\n+            constraints={\n+                \"min_value\": 49,\n+                \"max_value\": 30686,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    23187: 0.0666415830726879,\n+                    7610: 0.22788103799349532,\n+                    11393: 0.1855111186596,\n+                    11108: 0.18703076315897413,\n+                    7304: 0.02230572545901929,\n+                    30077: 0.046064646594908,\n+                    17223: 0.11394165841333179,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=5454,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 19214258,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.05,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 0.5,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9279645974580892},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"c\\xca\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=115,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=145,\n+            constraints={\n+                \"min_value\": 93,\n+                \"max_value\": None,\n+                \"shrink_towards\": -125,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 4.741804311760761e-233},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=21440,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.515347937757478e230,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 7.171424138982464e-206,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 3.315166391825972e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0067531280401785e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"P\\x0c\\xa7\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x02v\\xb2\\x8dF`\\x08\\xb3:2\\xb8^\\x81\\x1d\\xa6\\xb1\\xb9\\xd5X\\xd6\\x90\\xd0\\xb3u/\\xda\\xcd\\xc3\\x8a+.$\\x97\\xcf.\\xb7\\xe1~>\\xc6\\x06/EdK\\x9b\\xf5\\xbf\\xe5z;\\x03Ag\\t2z\\x1c\\xa5\\xd7+\\xe3\\xf0Cr? *N\\xe7\\x9aQ\\x85\\xc5\\xf9h\\xb7\\xeb\\xf3\\xa4#K\",\n+            constraints={\"min_size\": 25, \"max_size\": 125},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.8662143575484551},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7333,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=30774,\n+            constraints={\n+                \"min_value\": 27,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            404,\n+                            45164,\n+                            148850,\n+                            315427,\n+                            370310,\n+                            373590,\n+                            527052,\n+                            585836,\n+                            709849,\n+                            738863,\n+                            749523,\n+                            749603,\n+                            775455,\n+                            787543,\n+                            794430,\n+                            925048,\n+                            1069357,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x19t \",\n+            constraints={\"min_size\": 1, \"max_size\": 101},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\ufdd0\ud833\udf63\ufce0\ufd4d\\U00045dfd\ufd6e\ufd84\\U000567ec\ufceb\ud820\udcd8\ud851\ude8a\ufdbe\\U000584df\ufd0c\ufcf8\ufced\ufda7\\U0004aace\\U00055f6c\ufd1e\ufd1d\ufd3b\ufd0f\ufd3f\ufd92\ufd51\\U000149bc\ufdad\ufd4a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([64729, 173838, 226442, 383082]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-21331,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 1024,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1e-05},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.2191444096380284e307,\n+            constraints={\n+                \"min_value\": -3.3408260299566256e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.3881443771795002e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u270f\u27fe\u272e\u27f6\u2757\u27ea\u2748\u27f4\ub95e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([9999, 348358, 634899, 891610]),\n+                ),\n+                \"min_size\": 7,\n+                \"max_size\": 107,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.222989830759661e16,\n+            constraints={\n+                \"min_value\": -3.2762189634296896e16,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.222989830759661e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.06560022734459793},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.10401629797060477},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 3.880686439318204e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.728099982047362e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8518,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 68,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"`\\xfbp\\x83\\x95F\\x8cM\\x11\\xba\\xdct\\xb44\\xf7cf6M\\xdb\\x8e1\\x05\\xcf\\xe5\\xe3(\\xfb\\xb5\\xf3l\\xe4\\x8ed.\\xdb\\x06\\xff\\x0f\\xbf(\\x93\\x81\\xc0()\\x98\\xf5\\x9f\\x1a\\xaa\\x82\",\n+            constraints={\"min_size\": 26, \"max_size\": 126},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7212,\n+            constraints={\n+                \"min_value\": -11525,\n+                \"max_value\": 55,\n+                \"shrink_towards\": -8380,\n+                \"weights\": {\n+                    -3071: 0.1678537924604856,\n+                    -3811: 0.09489801967960122,\n+                    -7212: 0.1944939766869496,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.443400831263027e307,\n+            constraints={\n+                \"min_value\": 2.4628006098791504e16,\n+                \"max_value\": 7.216585132812356e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.443400831263027e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9195384736850769},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"AU\\xb2%\\xd9\\xcfd\\xf0\\x0c\\x15d;@\\x8fui/\\xac\\xb3\\xc3\\x0c(\\x93\\x1bn\\xda#(m\\xfb\\x85k\\xc4\\xaf\\xd1\\xab:t#!5v\\xde\\xa3\\xbb\\xed(P _U\\xa0~\\x87t_Y\\x1e\\r\\xd1\\x00\\xd2\\xc6\\xdd\\xc6\\xb9\\xbe(\\xb6\\x94\\xf1\\xfcA\\x99~bA\\x9e\\x1b\\x14Jc\\xd0Jt\\xfc\",\n+            constraints={\"min_size\": 48, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8224416379412272},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=84,\n+            constraints={\n+                \"min_value\": 83,\n+                \"max_value\": 104,\n+                \"shrink_towards\": -18,\n+                \"weights\": {\n+                    87: 0.02708126508945906,\n+                    94: 0.0016289867002204032,\n+                    102: 0.012338490541136917,\n+                    103: 0.0009028239208158387,\n+                    93: 0.048902127954307206,\n+                    104: 0.00668012929812303,\n+                    100: 0.00013360258596246057,\n+                    97: 0.059333062722554404,\n+                    90: 0.10665575075732113,\n+                    98: 0.13130795045691143,\n+                    83: 0.017209585226935314,\n+                    86: 0.033369750762549465,\n+                    101: 0.09240293162531124,\n+                    84: 0.06680129298123029,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.21134015834376713},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-23700,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x85h\\x14\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.7871952415246285e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-2.3701786337953543e97,\n+            constraints={\n+                \"min_value\": -4.804406497646838e97,\n+                \"max_value\": -3.2441614642669564e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.8169159300190043e97,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.576014952905267e307,\n+            constraints={\n+                \"min_value\": -2.13857583698651e-37,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.07853378479434e218,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([104720, 735246, 748604, 1039579, 1105256]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud870\udd91\\U0005609b\\U001014b33^\\x17Gj\u00d9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            1000,\n+                            46449,\n+                            127392,\n+                            164316,\n+                            196680,\n+                            326002,\n+                            400211,\n+                            458989,\n+                            589227,\n+                            684436,\n+                            1099437,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00056c94\u0409\u0438\\U000b19b8\u03f0\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            1,\n+                            1005,\n+                            8572,\n+                            54666,\n+                            204243,\n+                            218099,\n+                            305687,\n+                            314746,\n+                            400101,\n+                            415209,\n+                            433451,\n+                            515958,\n+                            565734,\n+                            726658,\n+                            777478,\n+                            832100,\n+                            876213,\n+                            898783,\n+                            947064,\n+                            968950,\n+                            994837,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.362548999182632e307,\n+            constraints={\n+                \"min_value\": -1.2107233078335641e-297,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8661952275015552},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xce\\xfe_\\xea\\xd7\\xd1\\xcb\\r\\x93\\x05\\x8e\\xc6\\n\\x04\\xe3\\xbe\\xd0E^\\x06\\x12\\xa2px\\xac\\x1c\\xd2P>\\xe6N.@\\xc3i-< \\xbf\\xeb\\x88\\xcd\\xbe\\x13\",\n+            constraints={\"min_size\": 35, \"max_size\": 135},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4391,\n+            constraints={\n+                \"min_value\": -14825,\n+                \"max_value\": 6,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    -2326: 0.008824879896748144,\n+                    -13937: 0.021485614379790876,\n+                    -10077: 0.02876580551005722,\n+                    -9882: 0.02042796816695725,\n+                    -12554: 0.024332798809721175,\n+                    -8054: 0.007113871206209023,\n+                    -186: 0.0335743447731583,\n+                    -14460: 0.021736316150168553,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6335238394724235},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"xb\\xa9#f\\xcb\\xb0(q\\xf8\\xf5/'\",\n+            constraints={\"min_size\": 4, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ub6a2\ub696\ud85f\ude82\ub701\ub712\ud81d\udc8d\ub6c9\ub6e1\ub6e1\ub711\\U0002fd20\ub6a5\ub723\ub70d\ub6e0\ub69b\ub6e6\ub6d2\ub6f8\ub6fc\ud863\udf47\ub64e\ub732\ub647\ub64d\ub678\ub690\ub6f2\ub6fa\ub738\ub721\ub6ee\ub640\ub731\ub70a\\U000197d3\ub71e\ub710\ub6c0\ub714\ub6ca\\U0004ad40\\U000358f9\\U0001bd34\ub721\ub6d4\ub6c4\ud860\udc5d\ub714\ub663\ub640\ub6d8\\U0003242d\ub663\ub6e1\ub651\ub6f2\ub6b0\\U0001130d\\U00041f80\ub739\ub646\ub664\ub6e1\ud868\udf53\ub6fd\ub67f\ub6fd\ub6f9\\U0003d37d\ub6e2\ub650\ub65a\\U00051229\ub6af\ub6a9\ub71b\ub67b\\U0003c09b\ud854\udd50\ub662\\U000156a2\ub712\ub66e\ub72c\ub6e3\\U00016555\ub725\\U00019322\ub725\\U0001a44f\ub726\ub6cb\ub6e7\ub6b6\\U00015dc9\ud86e\udfd9\\U00034a3f\ub68f\ub6b0\ub647\ub663\ub6cd\ub6e7\ub68c\\U000331a7\ub6a8\ub6ea\\U00040e8f\ub6b1\ub69b\ud840\udd71\\U000375f2\ub72f\ub6d8\ub6b7\ub648\ub6b6\ub6a6\ub6d6\ub69f\ub69b\ub6b6\uc9f1\ub650\\U0003af65\ud883\ude33\ub70d\ub681\ub6f8\ub6d0\ub6f5\ub678\ub6f1\ub642\\U000379a7\ub6ec\ub6ff\ub660\ub72b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([46656, 332709, 582192]),\n+                ),\n+                \"min_size\": 47,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xba\\xb4F9\\xbf\\x00\\xc4\\x01\\xd1z\\xa1\\x14\\x92z\\xf94QD\\xa9\\xabG\\x85\\xfc&Q<M\\xdde\\xe8:\\x99\\x81\\xd4\\xb3\\xd77\\x94\\\\\\xf5\\xd7@5\\x02\\x99\\xaa\\xe6[\\xb1\\x86\\x9c\\x8a\\xd7^A\\x97\\x9b6j\\x17\\xac\\x82\\x14],2rJ\\xde2\\xd7\\x11\\x063\\x0c\\x7fg}\\x80\\xa3a:\\xd9*\\x02\\xa4\\xa6\\x95\\xfd\\xf1\\xa4\\xaa-r*L\\xe46%_I\\xde\\xeby\\xd6\\x96\\xab\\xef\\xd5m+\\x98\\xb3y\",\n+            constraints={\"min_size\": 39, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -5.257535473861047e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.343068128095542e306,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6.892266589466163e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-97,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 12459,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.671207524815212e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xcf\\xec\\xbe\\xd5\\xce\\xcfw\\x95\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x84U\\xac\\xdaa\\xde\\xacKIv\\xb3u\\x96C\\x0e|)\\x99'\\xe8r\\x8a\\x02\\xf2\\xba\\xd7\\xbf><\\xbd\\xfa\\x8e\\xfb\\n\\xfe\\xcd\\x80\",\n+            constraints={\"min_size\": 24, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\uabd9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([43758, 206786, 471393, 974669, 1114111]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xde\\xa4\\xc9\\x888\\xda|7\\x9b\\xfbo\\x89i\\xe6N}_\\x84\\xc3\\xca\\xcd6\\xa8\\xdc>%\\xd7\\x99w\\xf9nWL\\xa0\\xd9\\x10\\xd9\\x11\\xf9Iw\\xc0g8%\\xf8\\x84R@O\\x15v\\x11\\xf4p\\xf2\\xf4\\x89\\xfe1\\x0e\\xc0\\x8asi\\xaf\\xf6f\\x83P\\xad\\x11\\x0b^\\x17m\\xd9!\\x84\\x92\\xe9<\\xf6Y\\xfb\\x17}\\xcf\\xbd\"\\x19\\x1d\\xba\\xfe\\xbdlN\\xdf<\\x9f\\x11c\\xa5\\xb0\\xa9\\xea\\x98\\xc6\\xf9\\x89\\xaa\\xd3j?\\x0b\\xe3G\\xa5\\xd9,;\\x1f9\\xb3p7>',\n+            constraints={\"min_size\": 50, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.835266679934124},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.901742440366486e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.061816976192576e180,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe5f0:M\\xcfz%)\\xd7U\\xe6\",\n+            constraints={\"min_size\": 9, \"max_size\": 109},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0006bfb9\ud80d\udc06\\U0001346e\ud80c\udfe2\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [78770, 628780, 649027, 720303, 732930, 741989, 785559, 905808],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 4.07127275816328e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1910993289174592e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.24086079710251013},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud851\udf6c\\U00042e8d\ud804\udd1f\ud804\udd59\ud804\udd31\\U000b8ee7\\U000b4909\ud804\udce1\ud804\udd29\ud804\udd1b\\U0001114e\ud804\udd0f\ud804\uddb6\ud804\udd9a\ud804\udd1d\ud804\udd44\ud804\udcf8\ud804\udd3f\\U00097232\\U000110c4\ud804\udd66\ud804\udd5d\\U0007ea58\ud804\udd50\ud804\udce5\\U00095224\ud804\uddb3\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([69822, 663823, 697569, 1114110, 1114111]),\n+                ),\n+                \"min_size\": 14,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-21153,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=53,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 13841,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3478144226423206},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -3.2713199793527656e29,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.0736137337611144e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.402823466e38,\n+            constraints={\n+                \"min_value\": 6.3401516874374024e16,\n+                \"max_value\": 9.674501183911823e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 10000000.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.671502703074983e59,\n+            constraints={\n+                \"min_value\": -2402499175824322.0,\n+                \"max_value\": 7.8616704403997265e59,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.4887619376123144e59,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005055b\\U00050586\\U00069562\\U000505ef\\U00050589\\U00050607\\U000505ac\\U00050602\\U000505c3\\U00050610\\U00060264\\U000505a8\\U000505ca\\U0005058d\\U0007030c\\U0005059c\\U000505c2\\U0007ae2e\\U000505b3\\U000505f4\\U000505a6\\U000505f5\\U0005063b\\U0008b8ec\\U00050564\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([329043, 576793, 665111, 693187, 903720]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"^|\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-15858,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -16889,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x00\\x87l*m\\x92?\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=874,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -5132,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=19415,\n+            constraints={\n+                \"min_value\": -31540,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc9\\xc9\\xaehb\\xcb\\x94w\\x10Z\\x19\\xfc\\xba'\\xd4TF\\xe0\\xd1F\\x9d\\xc1!6:\\xf7m:\\x1dY\\x02eZ}\\xe9\\x186%d\\x8f\\x81?\\xdd\\x1c\\xec\\x97\\xae\\xd1\\xe2\\x9aF\\xaeD5\\x17F\\x16Bn\\xf4\\n\\x9f\\x9274KJ\\xcd_\\xf1\\xac\\x7f\\xea\\xfd\\x1e,\\x98\\x93}\\x18;\\x044\\xca\\x8e\\x01\\x95\\xfc}\\xe4X^\\xe1\\xbf\\x00\",\n+            constraints={\"min_size\": 37, \"max_size\": 106},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"v\\xac\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.05,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 7.406534624494476e-187,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=3434,\n+            constraints={\n+                \"min_value\": -114,\n+                \"max_value\": 4014,\n+                \"shrink_towards\": -32298,\n+                \"weights\": {\n+                    403: 0.006569270416706272,\n+                    512: 0.013351294927643835,\n+                    3117: 0.22286120646752192,\n+                    3430: 0.24402188795590393,\n+                    6: 0.11063897244045001,\n+                    2592: 0.013639842084614428,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-23709,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -23606,\n+                \"shrink_towards\": -84,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=126,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 1_359_645_143_701_402_951,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00fc\\x94\\U000195b9r\u00f6@J\u00d6U\\U000a4eff\\x08\\x9c\\U000b34b8o\u00f0\\U000ae156&\u00cc\\x9a\u00c1\u00c8\\x1d\u00c6\u00af7\u00b5\u00de\\U0003f6f7\u00b2j\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [1, 391274, 416851, 458715, 496092, 848362, 1030401],\n+                    ),\n+                ),\n+                \"min_size\": 11,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1937509461672335e308,\n+            constraints={\n+                \"min_value\": 3.5626599220906304e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.428464324452183e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.020533796871944125},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xce\\x91YN\\x01\\xa3\\x81j\\xc0(/\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x04\"\\x11',\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa3\\xaam\\xcf\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u116c\u1172\u1144\u10dd\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [4243, 420585, 462223, 468614, 691525, 744441, 962128, 1085444],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5e-324},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00bdQ\u00b3\\x90\u00e5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            404,\n+                            1024,\n+                            116338,\n+                            210366,\n+                            248286,\n+                            253294,\n+                            261179,\n+                            316207,\n+                            431386,\n+                            507156,\n+                            893949,\n+                            923186,\n+                            1006504,\n+                            1060310,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 0.05,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.193791353824087e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1, 8192, 45507, 121111, 405749]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.637703722033158e306,\n+            constraints={\n+                \"min_value\": 2.2771127581574786e182,\n+                \"max_value\": 3.988369188086557e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000f8409\u04d0\u0445\u040d\u0453\u0445\u04eb\u04c7\u0406\u0414\u04f6\u0484\\U00049906\\U0004f8b2\\U000ff33f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [1024, 165646, 296816, 455513, 486817, 642517, 702551, 1047017],\n+                    ),\n+                ),\n+                \"min_size\": 13,\n+                \"max_size\": 113,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.3417363617417826},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u092a\u0928\u094d\u0939 \u092a\u0928\u094d\u0939 \u0924\u094d\u0930 \u0930\u094d\u091a \u0915\u0943\u0915\u0943 \u0921\u094d\u0921 \u0928\u094d\u0939\u0943\u0947 \u0625\u0644\u0627 \u0628\u0633\u0645 \u0627\u0644\u0644\u0647\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            70547,\n+                            106852,\n+                            116110,\n+                            203135,\n+                            400493,\n+                            520688,\n+                            587327,\n+                            597694,\n+                            795215,\n+                            827665,\n+                            898183,\n+                            909694,\n+                            915075,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 43,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x15\\xe2\\xf3\\x937\\xbf\\t]2\",\n+            constraints={\"min_size\": 6, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"M\ud808\udcb6\\x11jG\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            300,\n+                            25471,\n+                            350526,\n+                            376087,\n+                            393242,\n+                            404350,\n+                            425032,\n+                            552959,\n+                            577822,\n+                            649628,\n+                            651808,\n+                            655801,\n+                            944226,\n+                            971220,\n+                            1016091,\n+                            1036410,\n+                            1103032,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf1\\x9awW\\x12\\x10\\x1c\\x9f\\x10\\xa5\\xeb\\x01\\x89\\xaf\\tYQ1M\",\n+            constraints={\"min_size\": 15, \"max_size\": 115},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-76,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 14686,\n+                \"shrink_towards\": 512,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4_761_919_895_079_214_026,\n+            constraints={\n+                \"min_value\": -8_261_613_577_891_524_323,\n+                \"max_value\": 8117,\n+                \"shrink_towards\": 34,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"4\\x8b\\xc6\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00037629\\U00037598\\U0003760e\\U00037584\\U0009c581\\U000375a3\\U00037633\\U0003763c\\U00037597\\U000375fc\\U000375ea\\U000375d9\\U00037559\\U00037583\\U000375fc\\U00094b76\\U00037608\\U00037580\\U00066c2e\\U00037628\\U000375ae\\U000375d6\\U00037634\\U00037626\\U000375c6\\U00037559\\U00037578\\U000375fb\\U00037586\\U000375ea\\U00037590\\U00037579\\U00037621\\U00037577\\U00037650\\U000375a3\\U0007ef30\\U000375e6\\U0003756b\\U0003761c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([226647, 238452, 374475, 780937]),\n+                ),\n+                \"min_size\": 31,\n+                \"max_size\": 131,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.5079238033444399e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.526589788242459e200,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.0565808135990124e268,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.043801149853033e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000196f3\\U000196ac\\U000704ef\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([103924, 119275, 315048, 733760, 805481]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\";\\xc7\\xbcg\\x8c\\xeaR\\xb2E\\xa8`\\x03\\xc0=\\x0b\\x17(\\x95\\x87\\x12C\\xb8\\x9ex\\x08(\\x9b\\xf0<\\xfe\\xb3\\x02u[l\\xbb\\xa7\\xae\\xaa\\xef\\x12\\xfb\\xc7\\xa6K\\xee\\xf5\\xb9O\\xb8|b\",\n+            constraints={\"min_size\": 42, \"max_size\": 142},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u208d\u2087\u2049\u20df\u2019\u20aa\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([8192, 118381, 305217, 352709, 408771]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf4\\x1f\\xc8>tT\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9999,\n+            constraints={\n+                \"min_value\": 5447,\n+                \"max_value\": 25930,\n+                \"shrink_towards\": -146,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([682935, 790151, 798081, 905348, 977152]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.131262890054224e16,\n+            constraints={\n+                \"min_value\": -3.357796290895264e16,\n+                \"max_value\": -5.238412589800719e-241,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.130532439865354e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=22891,\n+            constraints={\n+                \"min_value\": 22834,\n+                \"max_value\": 101_213_885_209_422_087_444_873_433_905_972_544_704,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    58937: 0.009011779219702639,\n+                    64704: 0.15969432807148634,\n+                    22953: 0.0552512853184521,\n+                    23184: 0.014979319542481844,\n+                    22908: 0.16424021914314585,\n+                    22873: 0.04848454835728269,\n+                    65535: 0.04833852034744856,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-877495605,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 788988225,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00ac\\x86\\U000794d8\u00eb\\x06=P\u4fda4\u00f7r\\U000eb083\\U000a2f58@\u00e5\u00a3\\x81a\u00a5\u00c8=M\\U000e76aa])\\x9b\u00fb+Y\u00a2\\U000fd44f\\x9b\u00ce\\x1e\u00cdz}b\\x01\\U00098936\\U0002f6ea\u00d2\\x9d7!\u00cc\u00ae\\x9e\u00e3\u00a3\\x86\u00f3\u00e6w\u00b0\u00c5\\\\P\\U00045e59\u00fa\u00fcN[\\x14\u00a5\u00d0P\u00a3o\\U0002ecf3\\U0009ecfc&w\\x1c\\x85\\U000da097\u00c3\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            1000,\n+                            6332,\n+                            25488,\n+                            35631,\n+                            90434,\n+                            101895,\n+                            102267,\n+                            190731,\n+                            215286,\n+                            267399,\n+                            291021,\n+                            336828,\n+                            364537,\n+                            485190,\n+                            513768,\n+                            524997,\n+                            544401,\n+                            613220,\n+                            673593,\n+                            728859,\n+                            796436,\n+                            836649,\n+                            837006,\n+                            844538,\n+                            852750,\n+                            889059,\n+                            923255,\n+                            936284,\n+                            980544,\n+                            1027949,\n+                            1050931,\n+                            1052457,\n+                            1060839,\n+                            1063532,\n+                            1064060,\n+                            1067243,\n+                            1083464,\n+                            1084170,\n+                            1097458,\n+                            1114110,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 27,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.06471628473151371},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x88\u00a6W\ua3e0\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([0, 353768])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-9675,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 20161,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5231190611569821},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x0c\\x10\\xe3S\\x04\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.5378896233099956e308,\n+            constraints={\n+                \"min_value\": -4.2984257764097304e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.5378896233099956e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u023a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([512, 65535, 220983, 358533, 482410, 938313]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7663511932798617},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"'\\x90\\xaa\\x98\\xf7\\x94q\\xa8\\xe6\\x92ba\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\ued3d\ud821\ude80\\uec9c\\ued85\\ueccf\\uecd4\ud868\udc89\\ueca5\\uecc7\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([60556, 202453, 947908, 1004628]),\n+                ),\n+                \"min_size\": 9,\n+                \"max_size\": 109,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-17480,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -17480,\n+                \"shrink_towards\": 28258,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.799979337001318e307,\n+            constraints={\n+                \"min_value\": -3.9275347220827685e-117,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.180371278250092e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=56097,\n+            constraints={\n+                \"min_value\": 19940,\n+                \"max_value\": 65535,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\uc134\uc1da\uc223\uc1bd\uc225\\U000b9174\\U00079d1e\uc193\\U00051923\uc1bb\uc229\uc142\uc15a\uc203\uc1c9\uc1d2\uc1f3\\U000a8498\uc147\uc1bd\uc1b2\uc1d6\uc195\\U0006d166\uc136\uc18e\uc146\uc21a\uc22f\uc1e8\uc18a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            49459,\n+                            65535,\n+                            114533,\n+                            168562,\n+                            239519,\n+                            249732,\n+                            297020,\n+                            324643,\n+                            329102,\n+                            341131,\n+                            377913,\n+                            777724,\n+                            884918,\n+                            899843,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 20,\n+                \"max_size\": 120,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-12639,\n+            constraints={\n+                \"min_value\": -23111,\n+                \"max_value\": None,\n+                \"shrink_towards\": -31,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=126,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -2.7920532159204536e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.2351947280501768e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-76,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 2210,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -4.881122226797144e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.962141232879624e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003915e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            233812,\n+                            379823,\n+                            608416,\n+                            666409,\n+                            802607,\n+                            854009,\n+                            854857,\n+                            883126,\n+                            972772,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-10,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.11463213562645194},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=36,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 20238,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x92\\x02@\\xd8ml\\x80\\x1c\\xa1Q.\\xaa\\x83.Y\\xbd\\x8e)rl\\xf9\\x97\\x1b\\x03\\xc0\\xbc!\\xa9\\x8b\\xa2;\\x08\\x19\\x805\\xb2\\x82N\\xfcu\\x0b\\xbek\\xed4\\x06k.\\xde\\xb8\\xb5\\x95q\\xf5\\x01\",\n+            constraints={\"min_size\": 50, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-32008,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -126,\n+                \"shrink_towards\": -22,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-57,\n+            constraints={\n+                \"min_value\": -100,\n+                \"max_value\": None,\n+                \"shrink_towards\": 19842,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6491483349031593e307,\n+            constraints={\n+                \"min_value\": -5.479294291461219e-84,\n+                \"max_value\": 2.833406744450695e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0727341364740837e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.225073858507203e-309},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-39,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 9633,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 33.213711036653024,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.9683614517900624e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"{\\xd9cR\\xd4\\xca\\xde\\x85\\x19q\\x83]\\xf4\\xce\\xb8\\xce\\xb7^c\\xcb\\xfb\\x18\\xb6\\xbe\\xdf#\\xccc\\x1ah'oyr\\xbc\\x86\\xd7\\xebX\\xe7\\t\\xa2\\x15\\xb0\\xdf\\xed\\\"c\\xdd:\\x1e\\xe7\\xb2\\xce\\xd3\\xe0\\xe6\\xf0v,\\xcc\\x0f\\xee\\xdd\\x98\\xf2\\xb4\\x9e\",\n+            constraints={\"min_size\": 39, \"max_size\": 103},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-30808,\n+            constraints={\n+                \"min_value\": -294_025_373_562_484_829,\n+                \"max_value\": None,\n+                \"shrink_towards\": 14662,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud854\udd18\ud854\udcd2\ud854\udcbc\ud854\udd8f\\U00035481\ud854\udd06\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            151711,\n+                            277481,\n+                            302808,\n+                            430772,\n+                            466774,\n+                            553048,\n+                            619705,\n+                            643503,\n+                            896570,\n+                            916081,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 45,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud885\ude28\ud885\udd98\\U00089f57\ud885\udd78\ud885\udd73\ud885\udd57\\U000ba258\\U000ba8dc\ud885\udd81\ud885\udd97\ud885\uddfd\ud885\ude21\ud885\udda8\\U0005a0e7\ud885\udd9f\ud885\uddf9\ud885\ude36\ud885\ude31\\U00093fa8\ud885\ude29\ud885\ude22\ud885\udda9\ud885\udde7\ud885\ude34\\U0006da27\ud885\udd5a\ud885\ude42\\U0007a107\ud885\ude45\ud885\ude52\ud885\uddb6\ud885\ude17\ud885\ude53\ud885\udd75\ud885\udd80\\U000d905f\ud885\uddf9\ud885\ude31\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([202069, 998931])),\n+                \"min_size\": 15,\n+                \"max_size\": 115,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".secondary\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=17398,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 25048,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-23302,\n+            constraints={\n+                \"min_value\": -26562,\n+                \"max_value\": -17690,\n+                \"shrink_towards\": 7808,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.33230388465747646},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u040b\u04c3\u040b\u0416\u0487\u04a3\u041a\u0490\\U00084df0\\U0005f3bc\u0424\u049a\u0480\u0485\\U0001b715\u0448\u04ef\u04f9\\U0006ac45\u0493\\U00090fc0\u0426\u04fe\u04f8\u0448\u043c\u04dd\u045e\u04d6\\U000c0fd9\u04b3\u04da\u049f\\U0004147d\u048c\u0488\u04f6\ud868\udfe3\u046f\u0428\\U000c7642\u04c1\u04e2\u040d\u049f\u04aa\\U000d39d9\u04b0\\U000aa2c9\u0416\u04b5\u0474\u046d\u0445\u04a2\u0419\u04b5\ud86c\udde0\u04f3\u0411\u049a\u04f3\u04c0\u0408\u04e4\u047a\u043e\u0475\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([1024, 1052377])),\n+                \"min_size\": 38,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005b18f\u0216\u025e\u0274\\U00039ea3\u02e2\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            512,\n+                            55480,\n+                            236500,\n+                            475275,\n+                            508553,\n+                            631045,\n+                            728159,\n+                            889964,\n+                            1079547,\n+                            1102887,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=124,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 25213,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.777938815043525e16,\n+            constraints={\n+                \"min_value\": 0.05,\n+                \"max_value\": 5.412126437671311e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6.036490039236625e-209,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.2142952827133106e-62},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00e1?s\ud84e\udd0f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            25777,\n+                            104904,\n+                            249081,\n+                            250449,\n+                            295164,\n+                            569441,\n+                            707751,\n+                            751435,\n+                            751520,\n+                            819220,\n+                            946938,\n+                            974711,\n+                            995866,\n+                            1004843,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.34558149315237413,\n+            constraints={\n+                \"min_value\": 2.2250738585072014e-308,\n+                \"max_value\": 0.5,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.34558149315237413,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": 1.5215502764881724e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.1967545545295088e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u6be5\u6bd1\u6b84\u6b5e\u6b50\u6b46\u6b34\u6bf1\u6bc3\u6afc\u6b48\u6bb3\u6bd9\u6b6d\u6bbd\u6bad\\U000e0abe\u6af7\u6bd8\u6b03\u6ea6\u6b70\u6bd6\u9e7d\u6bf5\\U0001f1cd\u6b01\u6bd0\u6b33\u6b16\u6bd6\u6b6e\u6b3e\u6bee\u6b27\u6b91\u6bbc\u6bae\ud865\ude22\u6be1\u6b88\u6bda\\U000eb56b\u6b91\u6b69\u6afb\u6ba7\\U0008b2d5\u6b16\u6b14\u6b5b\\U0009c839\\U000dfc61\u6b93\u6b34\u6b9f\u6b94\u6bc1\u6b98\\U0001aca4\\U0002ed96\\U0009ea23\u6b74\u6b13\u6ba2\u6b9f\u6b36\u6be0\\U00088d6d\u7253\u6bc6\u6bd3\u6b6c\u6ba8\u6b7b\\U0008b1af\u6b11\u6b02\u6bb0\u89aa\u6ba9\u6b7d\u6b81\u6bc5\\U000debda\u6b2c\ud680\\U000f2eb1\u6b40\u6b8c\u6b7b\u6b8d\u6bdd\u6b94\u6b3a\u6bf4\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([27382, 196596, 558463, 667339, 904051, 1086708]),\n+                ),\n+                \"min_size\": 38,\n+                \"max_size\": 138,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"F,\\xcbW\\xdaO\\xd0\",\n+            constraints={\"min_size\": 6, \"max_size\": 7},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x0e\u00ec\\x8c\u00b2\u00be\\U0001ea85\\x99\\x1a\u00f4\\x02U\\x93_\u00d5\\U0009e5fd\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([0, 512, 67406, 156832, 590446, 825701, 1038819]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=20049,\n+            constraints={\n+                \"min_value\": -58,\n+                \"max_value\": None,\n+                \"shrink_towards\": 17538,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc7Z\\x90r\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.304613208300331e38,\n+            constraints={\n+                \"min_value\": 10000000.0,\n+                \"max_value\": 3.402823466e38,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.1419143977080767e38,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.0187060755626627e-162},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.17118987821931134},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-8599,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 7126,\n+                \"shrink_towards\": 65535,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -3.0291947225256124e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.8560635796769825e277,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=11091,\n+            constraints={\n+                \"min_value\": 10866,\n+                \"max_value\": 7_333_887_459_312_302_107,\n+                \"shrink_towards\": 300,\n+                \"weights\": {10873: 0.00865775065204629, 65535: 0.0034140765744712217},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.28040575937933193},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1310\\x99\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xfa\\x99\\xb0W\\x9cni\\x91\\x1d\",\n+            constraints={\"min_size\": 4, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"r\\xa5\\x0f\\xfbx\\xc2\\xca\\xc8\\xb2\\x1duR\\xa7\\x00\\xac\\x9cZZ\\xbd\\x9e3\\xab\\xfd\\xd7N\\xf1\",\n+            constraints={\"min_size\": 13, \"max_size\": 113},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 3.160374229921985e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 9.246092998289105e306,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-34887,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -22257,\n+                \"shrink_towards\": 512,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud800\udcc4\ud800\udc0e\ud800\udcdf\ud800\udcf3\\U0001003b\\U0001007a\\U00016bea\ud862\udd7e\ud800\udc03\ud800\udc40\ud800\udcf1\ud800\udc3f\\U00073a91\\U0001007c\ud800\udce4\ud800\udcbb\\U00076686\\U00010078\ud800\udce2\ud800\udc9c\ud800\udc2c\ud800\udcaf\ud800\udc4c\ud800\udc04\ud85b\udde1\\U0003318b\ud800\udca0\ud800\udcd0\ud800\udc95\ud800\udce9\ud800\udc10\\uffff\ud800\udcb1\ud87a\udf55\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([65535, 607331])),\n+                \"min_size\": 17,\n+                \"max_size\": 117,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8_314_695_736_096_246_896,\n+            constraints={\n+                \"min_value\": -31075,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"6\\x83tD\\xfe\\t\\x9eY\\xd6\\xa0+\\xd9\\x1d\\x88\\xba4\\xd1\\x980\\xfe\\xbcM\\x83\\xef\\xba0\\xdd\\x0bw\\xf7{\\xec\\xbb\\x85\\xed^k\\xb6\\xd5\\xbfJ;\\xf9=\\xad\",\n+            constraints={\"min_size\": 45, \"max_size\": 47},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003aa39\\U00010074\\U000100fb\\U0001007f\ud800\udc40\\U0001003e\ud800\udc2d\ud800\udc47\ud800\udc57\ud849\udf67\ud800\udc3a\ud800\udc15\\U0001c48a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([65535, 165940, 210407, 299666, 452067]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00044278\\U0004421c\\U000442c1\\U00044228\\U00044262\\U00044233\\U00044243\\U0004424f\\U00044269\\U000442eb\\U000638db\\U0004422b\\U00071d8d\\U00044227\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([279065, 488774, 572421, 596516, 1011802]),\n+                ),\n+                \"min_size\": 11,\n+                \"max_size\": 111,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4606,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 26161,\n+                \"shrink_towards\": 13414,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=10897,\n+            constraints={\n+                \"min_value\": 31,\n+                \"max_value\": None,\n+                \"shrink_towards\": 6408,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-22595,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 111,\n+                \"shrink_towards\": 9_050_063_326_143_901_184,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=181136160,\n+            constraints={\n+                \"min_value\": 181121750,\n+                \"max_value\": None,\n+                \"shrink_towards\": -1_787_075_704,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1_201_006_600,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 23280,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003f271\\U0003f235\\U0003f242\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            258612,\n+                            403187,\n+                            446982,\n+                            462754,\n+                            540916,\n+                            645794,\n+                            955533,\n+                            978979,\n+                            1026016,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00019f71\\U00019ead\\U00019f66\\U00019f2e\\U00019f77\\U00019f47\ud855\udf45\\U00019ef4\\U0004563c\\U00019f5c\\U00019f8d\\U0001c8f9\\U00019f58\\U00019f5a\\U000557da\\U00019f47\\U00036db4\\U00019f25\\U00019ec1\\U00019f34\\U000508d1\\U00057e2c\\U00019ee7\\U0004f6c9\ud877\uded2\\U00019efd\\U00019f1c\\U001090ed\\U00019f6a\\U00019f16\\U00019f66\\U00019f4a\\U00019f71\\U00019f5b\\U00019f0d\\U00019eed\\U00019f86\\U00051101\\U00019f4a\\U00019f41\\U00019f3f\\U00019f46\\U00019f30\\U000378b0\\U00019eef\\U00019ee8\\U00019f17\\U00019f52\\U00019f0d\\U00019eaa\\U00019ef0\\U00019ee0\\U00019e9d\\U00019ee4\\U00019f0f\ud868\udfeb\\U00019f67\\U00019f44\\U00019f5f\\U00109212\\U00019ec0\\U0001bb19\\U00019eb2\\U00019eba\ud85b\udd02\\U00019e91\\U00019e96\\U00019f75\\U00019f8c\\U00052625\\U00019f6a\\U00019ec7\\U00019eb2\\U00019f0e\\U00019f52\\U00019e9f\\U00019f64\\U0005a1f8\\U0003a358\\U00019ec4\\U00019f53\\U0004d766\\U00019f4a\\U00019f66\\U00019f5e\\U00019f2d\\U00019f7d\\U00019f1e\\U00019f15\\U00019ecd\ud838\udd22\\U00019e9c\ud853\uddf9\\U00019f03\\U00019f5e\\U00019ee4\\U00019ebe\\U00019ef4\\U00019f3c\\U00019ebd\\U00019ef3\\U00019ec8\\U00019f0d\\U00019f6c\\U00019f2f\\U00019ea7\\U00070aa9\\U00019eaa\\U00019efb\\U00019f36\\U00019e96\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([106128, 370884, 453273, 462002, 1080877, 1110963]),\n+                ),\n+                \"min_size\": 38,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000471bf\\U000409a4\\U0004099f\\U00040928\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([264475, 337292, 1004931]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u04ce\u0454\u046c\u04cf\u04dc\u04b5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1000, 551535, 640062]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc0U\\xe4^58yd\\xf4\\x12'\\x15\\xe1\\xb4\\xcb\\xcb\\xfd\\x87\\x0e\\x96\\xef\\x88\\x11\\x84\\xbf[\\xb0Oe\\xd5\\x0c\\xb6\\xbeb\\xdc\\x92\\x90\\x1fU\\x00\\x95\\x8a\\xda\\xadW\\xc3F*\\x11v\\x9f\\xe0R\\x88\\xec2\\xed\\xa7\\x85f\\xec:\\x91D\\x89O\\xa8\\x1f<\\x98!`\\xe6S\\x92\",\n+            constraints={\"min_size\": 32, \"max_size\": 132},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"q|9L\\x13(\\xbc0\\xd4U_C\\x90\\x01a\\xf0\\x0es\\x18\\x82\\x8a\\xa5\\xc0\\xe0Q\\xfar\\xa4h\\x18v\\x95Ej\\x0cB-\\xfd@\\x87\\x93\\x93\\xdb\",\n+            constraints={\"min_size\": 37, \"max_size\": 137},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=78,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 9_045_441_147_538_494_268,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.946200935201136e-96},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8565757502125424},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-6.748296829950797e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8351248549785263.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8103005512526509},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -8.624019586014537e-18,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7415454574368554e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-9_029_514_940_031_275_907,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -12519,\n+                \"shrink_towards\": 86_019_382_698_508_656_468_582_100_779_920_577_105,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-11795,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 32300,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000157c2\\U00015756\\U0001570c\\U00019181\\U00015780\\U00015796\\U0003460e\ud851\udd0d\\U00015746\\U0001578d\\U0001579e\\U00015739\\U0001575a\\U0001577a\\U000157ec\\U0001573c\\U00015713\\U00042269\ud85d\ude45\\U000157b3\\U0001578a\\U0001576f\\U00015709\\U0001577d\\U00015786\\U000157ab\\U0001579c\\U000157d0\\U000157ae\\U000157a9\\U000157a4\\U000157a7\\U0001579d\\U00015749\\U00015772\\U00015734\\U0003ef93\\U0001570f\\U00015730\\U0001571e\\U0001575a\\U00015790\ud886\udc90\\U0002f239\\U00015703\\U00015785\\U000371bf\\U0003d164\\U000157ba\\U00033988\\U0001575c\\U0001577a\\U000157a1\\U00033125\\U00015762\\U00015761\\U00015738\\U000157b2\\U000157bb\\U00015790\ud81e\udc19\\U0001573c\\U00015768\\U000157dd\\U00037c6f\\U00015722\\U0003d32d\\U00041d9c\\U00015793\\U0001571d\\U0001571e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([87804, 292196, 901922]),\n+                ),\n+                \"min_size\": 24,\n+                \"max_size\": 124,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.failures\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"j\\x01\\xa8<\\x02\\xd0$\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud858\udd62\ud858\udd67\ud858\ude50\ud858\udddc\ud858\udd5a\ud858\uddba\\U0008a074\ud858\uddb3\\U000854af\ud858\ude20\ud858\uddec\ud858\udd63\ud858\uddfb\ud858\ude53\ud858\uddf4\ud858\uddd9\ud858\udd96\ud858\ude2c\ud858\uddff\\U0008227a\ud858\ude17\\U0008474c\ud858\uddc1\ud858\udd7e\\U00080a6e\ud858\udd75\\U0008c01d\ud858\uddcc\ud858\udd71\\U0008ab1d\ud858\udd6d\ud858\udded\ud858\udded\ud858\ude13\ud858\uddfb\ud858\ude52\ud858\uddb5\ud858\udda5\ud858\udda6\ud858\udd92\ud858\ude28\ud858\udd65\ud858\ude53\\U00085fba\ud858\ude22\ud859\ude95\\U00088809\ud858\ude3d\ud858\uddb1\ud858\ude01\\U00087be9\\U000897de\ud858\udda6\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([155994, 161417, 519897, 580123]),\n+                ),\n+                \"min_size\": 34,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-26339,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -1258,\n+                \"shrink_towards\": -32051,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".secondary\",\n+            constraints={\"min_size\": 4, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 3.3470210880115417e-138},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.6295940183823805e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.730843847809606e16,\n+            constraints={\n+                \"min_value\": -3.80750578875919e16,\n+                \"max_value\": 4.1091416112000984e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.6076323577655816e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7909829194081637},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9282001693743771},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.175445263928823e237,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00035092\\U0003ca18\\U00035147\\U0003ad78\\U0003df7d\\U0003510f\\U000350ac\\U0003508b\\U000356f6\\U00035150\\U0003512a\\U000350f6\\U000350ac\\U00035086\\U000350a7\\U0003507c\\U00035139\\U00035145\\U000350fa\\U000350b4\\U0003509f\\U0003514b\\U000350a5\\U000350e5\\U000350a8\\U00035081\\U0003516b\\U00035095\\U000350c1\\U000350dd\\U0003f1b9\\U00041a44\\U00035108\\U00035107\\U000350ef\\U000350ff\\U00035108\\U0003fd52\\U00035148\\U00035144\\U000350db\\U00035117\\U00035158\\U000350d6\\U00035123\\U00041e5d\\U00035103\\U00035121\\U00035140\\U00035112\\U00035159\\U000350a5\\U00035079\\U00035146\\U000350b6\\U000350ce\\U000350be\\U0003dbc7\\U0003f76a\\U000350ef\\U0003514c\\U00038fa7\\U000350a4\\U000350b5\\U0003509a\\U000350ec\\U00035074\\U0003e141\\U000394b1\\U000350c3\\U00035120\\U000350d2\\U0003507d\\U00035113\\U00035085\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([217203, 272691, 1013229]),\n+                ),\n+                \"min_size\": 23,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"t+z\\xaf@\\xf4\\xcb\\xd9(\\xaa\\x0e\\x84)e.p\\x06[\\xf3\\xbc\\xa7J\\x7f\\x1f<\\x19\\xe7\\x00t\\x14\\xcf}I\\xb0\\xea\\x06C\\xa9\\xb1\\xa0E\\xf1\\xf0\\x14\",\n+            constraints={\"min_size\": 28, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00033227\\U00032fad\\U0003301d\\U0003300c\\U00032fb7\\U00032f79\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([208681, 385422, 789029, 974236, 985124, 1058367]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u4650\u469e\u4640\u4649\u4624\u4696\u45dd\u45f8\u466e\u4673\\U000e5f49\u45da\u4646\u4677\\U00099d63\u4628\\U0001eeee\u45f2\u469c\u46cb\u46ad\u4692\u45fc\u469a\u45f1\u466d\u45f9\u4642\u466f\u4646\u462c\u461d\u4657\u4657\u4660\u4648\u46ab\u45d5\\U00055471\u45d4\ud861\udcb4\u46c9\\U000d2c69\\U000a58d8\u4642\\U0002fc62\u4660\u46cb\u46cd\\U0001bb73\u46b0\ud841\udd69\u45de\u4650\u45d7\u463f\u45df\u462b\u4603\u46c6\u46af\u4661\\U000ae665\u464f\u45fe\u466b\\U0008d82d\u45e1\u45fd\u4687\u46bc\u4641\u4602\\U0007b22c\u4697\\U00087872\u46aa\u46bc\\U000783a7\u46b9\u461e\u46a9\u46c0\u46b3\u4637\u4637\u4670\u46a9\u469a\u468f\u4630\u45ec\u45f6\u46cf\\U000bafac\u4677\u46a9\u46c0\u46b3\u4660\u46b9\\U00032bac\u45e0\u46aa\u45e9\u46ba\u4666\u45f0\u46cf\u4646\u45d4\\U00052795\u45d1\u45fc\u45ef\u460e\u4651\\U00101f69\u45d6\\U00049e68\u4697\\U000795bd\u4659\u4663\\U000389f5\u4696\u45e2\u4606\\U000beeba\u46b7\u4670\u45f6\\U0004f7f6\u4652\u461c\u466a\u45f7\u467c\u4663\\U00050ce3\u46a0\u46ae\u463a\u4639\uab97\u46bb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([17873, 919382, 940095, 968548, 1047900, 1088462]),\n+                ),\n+                \"min_size\": 46,\n+                \"max_size\": 146,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 6.103515625e-05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": 1.32550802139475e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7749708731583738e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xd3I\\xf3\\x03\\xdc\\xf5\\x93\\xf5\\xf0\\x05\\xdd;\\xfd\\xd4\\xc7meb\\x1d\\xc6qM\\xf2\\x8b\\xe6\\x86-\\x0b4\\xd5\\x02\\xb3f>\"7Y\\x91\\xa8zg\\xb0F',\n+            constraints={\"min_size\": 25, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000f50b6\\U000ae312\\U000ae393\\U000ae2d1\\U000ae2d1\\U000ae362\\U000ae30f\\U000ae2f8\\U00107743\\U000ae33d\\U000ae2f6\\U000ae366\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([713386, 772895, 928154, 1114111]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.08270415660188447},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u02a8\\U000ae38a\u02fe\u02d6\\U0005598d\u024e\u02a4\u0298\u02da\u0263\u02a3\u02ca\ud81e\uddb8\u020c\u02c0\u02e6\u0216\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            512,\n+                            65535,\n+                            67035,\n+                            67288,\n+                            68145,\n+                            107889,\n+                            310231,\n+                            522473,\n+                            636586,\n+                            771561,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 13,\n+                \"max_size\": 113,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.812345286618957e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6345596057334973e308,\n+            constraints={\n+                \"min_value\": 2.194465047077364e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.673713744604675e-51,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.27155883085339944},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5e-324},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.3735036997331776e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00038488\\U000383a9\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([230300, 440125])),\n+                \"min_size\": 0,\n+                \"max_size\": 16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-6421,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 4609,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u169b\u1684\u1693\u1690\u168b\u1692\u1684\\u1680\u1691\u1684\u1682\u1691\u168f\u1685\u169c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1613,\n+                            6757,\n+                            131799,\n+                            171246,\n+                            213289,\n+                            377722,\n+                            507440,\n+                            550523,\n+                            598273,\n+                            633386,\n+                            696424,\n+                            843213,\n+                            859032,\n+                            1015390,\n+                            1049735,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-16128,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -7560,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9999999999999999},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=14323,\n+            constraints={\n+                \"min_value\": -29115,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=23042,\n+            constraints={\n+                \"min_value\": -25937,\n+                \"max_value\": None,\n+                \"shrink_towards\": 31410,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x00\\x87l*m\\x92?\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6592930713069124},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"_Oj\\x93Z\\x1aUmD\\xcd\\xc4\\xa8\\x1a\\n\\xca9\\xbc\\xfc}?\\xb0\\xd1|\\xc9Zr7\",\n+            constraints={\"min_size\": 15, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-5807,\n+            constraints={\n+                \"min_value\": -5958,\n+                \"max_value\": -4750,\n+                \"shrink_towards\": 0,\n+                \"weights\": {-4958: 0.08960786600886475, -5807: 0.1751901353137978},\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00082d6b\\U00064874\\U000648e5\\U000cf0a5\\U000ae9cd\\U000648c9\\U000648b5\\U00064949\\U00064870\\U00064961\\U000648d4\\U0006489c\\U000648c5\\U00064866\\U000648a2\\U000648d7\\U00064928\\U000648f8\\U00064921\\U000a9068\\U00064894\\U000648dd\\U00064893\\U000c3048\\U000648b4\\U000648ec\\U000648f3\\U000648fe\\U0006489d\\U00069405\\U0006489b\\U0006494e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([411749, 776192, 791666, 940440]),\n+                ),\n+                \"min_size\": 31,\n+                \"max_size\": 52,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00036e23\\U00036df7\\U00036ed7\\U00036e3c\\U00036e76\\U0004b064\\U00036e43\\U00036e97\\U00036e90\\U00036eb0\\U00036ea8\\U00036ecf\\U00036e3c\\U00036eb0\\U00036e45\\U00036e84\\U00036ea3\\U00036e57\\U00040737\\U0008c04f\\U0006acc0\\U00036ec5\\U00036e76\\U00036ecf\\U00036ded\\U00036eaa\\U000955be\\U00036e8b\\U00036e67\\U00036e43\\U00036ed6\\U00036ea3\\U00057524\\U00053e04\\U00036e15\\U00036e5f\\U0006308f\\U00036ecc\\U00036e06\\U00036e85\\U00083c0c\\U0009406f\\U00036df2\\U0004bc50\\U00036e92\\U00036e87\\U0008cb88\\U00036e8f\\U00036e9c\\U00036e9a\\U00036df2\\U00036e16\\U00036e44\\U00036e25\\U00036e90\\U00036ea9\\U0003d557\\U00036e4f\\U00036eb7\\U00036de4\\U00036eb9\\U00036e68\\U00036df4\\U00036e77\\U00036ee2\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([224740, 620164])),\n+                \"min_size\": 38,\n+                \"max_size\": 138,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.733954570182736e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.8482718185422227e-124,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=566238414,\n+            constraints={\n+                \"min_value\": 8174,\n+                \"max_value\": None,\n+                \"shrink_towards\": 16376,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa2\\xcb\\xf8\\xe1\\t\\xdc\\xadg\\xfaYHE\\x1b1\\x7f\\xa1\\x13\\xf4@\\xfb\\xd2\\x88\\xa8\\x93\\xb38jQh\\x9c\\x03`V\\xcd\\xb0L\\x07B\\xd1\\x07\\xf3T\\x97\\xa1\\x82D\",\n+            constraints={\"min_size\": 44, \"max_size\": 144},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-nan,\n+            constraints={\n+                \"min_value\": 0.05,\n+                \"max_value\": 0.3333333333333333,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.2595174984943612,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.065664862674147e307,\n+            constraints={\n+                \"min_value\": -3.189883708414603e-284,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6.4180126500452936e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.048809421178093185},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00c6\\x9dy\u00a6\u00c3\\x99\\x04\u00a9\u00f6\u00c1\\U000a4a85\\xad\u00fe\\x0f\u00a3\u00d1I\\x16n\u00ef\u00f8\u00d0\\x9c>\u00f8c\u00e5@\u00de$\\x83\\x00|\\x9f+C\\x1f\\U0009bbfdJQ\\x12\\x1al\\U00091014\\x89\\x87\\x0b\\x9a\\x94\\x81\u00c3\u00efe\u00d3OJ\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            110187,\n+                            173594,\n+                            259374,\n+                            325138,\n+                            391393,\n+                            588381,\n+                            712689,\n+                            1064155,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 29,\n+                \"max_size\": 129,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4905,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -4862,\n+                \"shrink_towards\": 65535,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"L\\xd2y^\\\\m@;q\\xfd0'\\xd8\\x08~\\xe5\\xba\\xc2\\xfc\\xed\\x1cp\\xc7\\xb0@\\xbco\\x9d\\xbb\\x8c3\\xc8$\\x93T\\xf9\\xac\\x95\\x9e\\xa4vo\\xa8\\xcd~\\\"\\xeb\\xb3jp-w\\xf0\\xdb\\xea\\xac\\xe4\",\n+            constraints={\"min_size\": 43, \"max_size\": 143},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.612344049550344e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9007199254740992.0,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2_046_101_624,\n+            constraints={\n+                \"min_value\": 2_046_101_568,\n+                \"max_value\": None,\n+                \"shrink_towards\": -24381,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"V.k\\xc2\\xabN\\xf3*\\xd3\\xae\\x9ew\\xda5N\\xaf4jE\\xd6\\x9f{\\xb6\\x87\\x87\\xcd\\x8c8\\xb5v\\x88\\x7f}\\xba\\x84\\x9ct\\x0c\\\\\\x8d\\x9b7\\x08\\xea\\xba\\xa9\\x84\\xe4\\xdft\\xf9\\x12\\xfb\\x17fl\\xfa\\xb4\\x1f0\\xcc|$\",\n+            constraints={\"min_size\": 42, \"max_size\": 88},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-29803,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 88,\n+                \"shrink_towards\": 300,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x98\\xdfM\\xe8\\xee\\x12\\xba]\\xc28\\xd5\\xf9\\x1b\\xb7\",\n+            constraints={\"min_size\": 10, \"max_size\": 110},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-322196934,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -6194,\n+                \"shrink_towards\": -38,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000554e9\\U000554c0\\U00078026\\U0005554c\\U000554b9\\U000554fc\\U0005556b\\U0005545e\\U00058623\\U000554ef\\U00055550\\U00071650\\U00055476\\U00055470\\U0005554c\\U00055489\\U0005ef0c\\U0006dedc\\U000554ec\\U0005e614\\U000554da\\U000554f0\\U00061e3a\\U000554d1\\U000554f9\\U00055497\\U00055476\\U0005551c\\U000554d9\\U000554f8\\U0005d121\\U0005546f\\U00055458\\U000554c1\\U000554ac\\U000554c4\\U000554d5\\U00055503\\U00060b7d\\U000554a5\\U000554e0\\U00055460\\U0005547e\\U0005549c\\U000554e8\\U000554a0\\U00055453\\U00055452\\U000554ed\\U00055501\\U00055452\\U00055518\\U00055481\\U00061213\\U00055502\\U0005546a\\U00055486\\U0005554d\\U000554f2\\U000554dc\\U000554b9\\U000554b1\\U00083779\\U00055466\\U00055550\\U000762d2\\U0005554a\\U000554b1\\U00055493\\U000554c7\\U0007822f\\U0007e5e4\\U0005eabd\\U00055498\\U00055453\\U000640f7\\U00055539\\U000554b7\\U00055535\\U00061c38\\U0006d304\\U000554e1\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([349265, 541065])),\n+                \"min_size\": 42,\n+                \"max_size\": 142,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=430474858,\n+            constraints={\n+                \"min_value\": 430474768,\n+                \"max_value\": None,\n+                \"shrink_towards\": 118,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-9_261_254_015_551_669_860,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -4_972_509_043_182_848_031,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0478933070357075},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.5,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.143825428243532e167,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=300,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 26279,\n+                \"shrink_towards\": -8748,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 6.401979491327058e-46},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([340336, 528460, 774826, 1083004]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0007212a\\U000721dd\\U0007218d\\U00072150\\U00072118\\U000721f9\\U00088796\\U0007218c\\U0007bc39\\U0007212f\\U00072141\\U00072171\\U00094f5c\\U000721f9\\U000721bb\\U000721d1\\U000720ff\\U00072191\\U00072112\\U00072187\\U0007210d\\U00072129\\U000721c9\\U0007212b\\U000721a7\\U0009c42f\\U000721d6\\U00072127\\U00072180\\U0007a013\\U0007ac2a\\U00072135\\U00072149\\U000721a3\\U000721ba\\U00080dae\\U000721ae\\U0007210f\\U000721d6\\U0009d345\\U000982c7\\U000721a3\\U0009d4de\\U000721a5\\U000a0df5\\U00072174\\U0007211f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([467196, 669206, 888901]),\n+                ),\n+                \"min_size\": 35,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=5072,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 117,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-5_462_567_717_779_668_440,\n+            constraints={\n+                \"min_value\": -5_462_567_717_779_687_872,\n+                \"max_value\": 130_075_602_931_395_991_438_132_467_537_925_996_895,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    1_757_237_846_901_794_679: 0.00040957107953237224,\n+                    -5_462_567_717_779_632_277: 0.0017536374313231182,\n+                    -5_462_567_717_779_687_654: 0.002531904921284688,\n+                    -5_462_567_716_508_957_843: 0.0028307228480815108,\n+                    -5_462_567_717_779_675_243: 0.002531904921284688,\n+                    -5_462_567_713_750_476_463: 0.000684539760402632,\n+                    -5_462_567_717_779_687_829: 0.0017554759196532935,\n+                    39_117_142_652_526_985_587_380_527_104_356_012_509: 0.0033218136993012283,\n+                    -5_462_567_713_530_650_337: 0.0025411533841329837,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.723387962478369e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 8992819428035993.0,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.6840035344583686e-291,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"Y\\x92\\xef\\xbb\\r\\x15\\xa2\\xdc>\\x08\\x82\\xe0\\xd8\\x19\\xbc\\x94?\\r\\xad\\xcbW\\x98!`\\xfd\\xbba\\x92Rq\\x8dz\\xbbX)>\\x94\\xeb\\x85\\xdf\\xca\\xf9\\xdd\\xad#\\x11W\\x8d\\x10\\xe1\\x1d\\xbf\\x8ea\\xdaT\",\n+            constraints={\"min_size\": 21, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.2937113167399105e308,\n+            constraints={\n+                \"min_value\": 1.9,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.2937113167399105e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=85,\n+            constraints={\n+                \"min_value\": -22,\n+                \"max_value\": 300,\n+                \"shrink_towards\": 0,\n+                \"weights\": {85: 0.5523805440884055},\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000c91e4\\U0005a20c\\U0005a28d\\U0005a2f1\\U000aea98\\U0005a2ac\\U000be4a7\\U0005a2f4\\U0005a22f\\U0005a2cc\\U0005a203\\U0005a2cc\\U000c3aca\\U000892b9\\U0005a300\\U0005a20b\\U0005a2de\\U0005a279\\U0005a229\\U0005a260\\U0005a20f\\U0005a2e2\\U0005a2b3\\U0005a2b2\\U0005a268\\U0005a211\\U0005a269\\U0005a296\\U0005b7a3\\U000a5dc2\\U0005a2f8\\U0005a2ef\\U000a895a\\U0005a263\\U0005a25e\\U0005a288\\U0005a21d\\U0005a29e\\U0005a208\\U00086e61\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([369155, 852312])),\n+                \"min_size\": 8,\n+                \"max_size\": 108,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001b93e\\U0001b942\\U0001b8e5\\U0001b95b\\U0001b98b\\U0001b8fc\\U0001b961\\U0001b945\\U0001b90c\\U0001dcfe\\U0001c2b3\ud839\udce4\\U0001dcd4\\U0001b983\\U0001b9a0\\U0001b8f0\\U0001b8f9\\U0001b97a\\U0001c5de\\U0001b9b9\\U0001b923\\U0001b92f\\U0001b950\\U0001b8f4\\U0001c535\\U0001b8fc\\U0001ee78\\U0001c5a6\\U0001b916\\U0001b9a9\\U0001b9ab\\U0001b8f0\\U0001b989\\U0001b9ba\\U0001cc17\\U0001b948\\U0001b8c9\\U0001b98f\\U0001b998\\U0001e8d9\\U0001b946\\U0001b920\ud83d\uddd0\\U0001b8f0\\U0001b8d1\\U0001bcf9\\U0001b950\\U0001b977\\U0001b8fa\\U0001cc76\ud836\uddc9\\U0001b93f\\U0001b969\\U0001b97c\\U0001b911\\U0001b97b\\U0001b986\\U0001b960\\U0001b8d0\\U0001b9b0\\U0001c6f7\\U0001cbc0\\U0001b900\\U0001b8f6\\U0001b999\\U0001b8ee\\U0001b90b\\U0001b974\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([112832, 129772, 352588]),\n+                ),\n+                \"min_size\": 50,\n+                \"max_size\": 150,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.200034160591606e307,\n+            constraints={\n+                \"min_value\": 2.1409980324838356e16,\n+                \"max_value\": 1.7976931348623157e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2831,\n+            constraints={\n+                \"min_value\": 1000,\n+                \"max_value\": 4088,\n+                \"shrink_towards\": 8101,\n+                \"weights\": {\n+                    4088: 0.20862043299956462,\n+                    2818: 0.1500704603744718,\n+                    3073: 0.0832864379566925,\n+                    2831: 0.21711801683086412,\n+                    1302: 0.04770858025857474,\n+                    1330: 0.15480382578466842,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6680130223326725},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"hypofuzz.test_keys\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8075606004448594},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x7fk\\x951\\xb5\\xf9\\xceg\\x0bm\\xd4\\xe4\\xd6\\xa5\\x98\\xe9\\xd1\\xba\\xd1L\\xbd\\xd1F\\xd9\\x17\\xd3\\x1f\\x1a\\xd0\\x8d\\xb1\\xcc[\\xd7h\\xe9^\\xeb\\xfc\\x8cu\\xed\\xd0\\xc9g\\xe6\\xb9\\xf9\\xdb\\xc7\\xb8\\xb6\\x13!\\\\iXV\\x03\\xe3\\x98\\x96\\xaci\\x98W\\xf6\\x1aP\\xae\\xca\\x95\\x03\\x94\\x9a\\x87\\xbfy\\tE@G\\xf1\\x9d\\xfaIx>]U\\x8f\\xc8<\\xd9FP\\xdf\\x9e\\xae\\xb9\\xc2I\\x0c;\\x03\\xf8\\xd3\\xb6\\x19S\\x19h\\xc8\\xd9\\xef\\x14hh\\x0ejqb\\x90\\x0eZ;\\xe0\\xaa\\xb5\\xaf\\x8a1>&i\\xef\\xceWg\\x05E\\xa6'\\x8f\\xd8\",\n+            constraints={\"min_size\": 48, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.0558015805288693e-291},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.41061916662971687},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000df86b\ud821\udf4c\\U0004b360\ud821\udf26\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            100099,\n+                            137736,\n+                            144745,\n+                            423887,\n+                            554248,\n+                            703511,\n+                            752143,\n+                            1031138,\n+                            1032454,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 7405030539686645.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.546971531765218e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xda:[n\\x1536\\x80g\\xee\\x9cx5z\\x1a\\x18\\x91\\xcc\\xa7\\xd7\\xcde\\x82q\\xad\\x01\\x9d\\x99\\xc3\\xab\\xd2\\xb5\\xf3\\xd2\\x80[(\\x11\\xed=x\\x16\\xb8\\xee\\xb6\\xae+V\\xbd\\xd5#I\\xc6\\x8f\\x87>\\x9d\\\\\\x19\\xf3\\x1f\\xa4D\\x7f\\xc7\\x97i\\x943P\\xd2\\xd3\\xa6\\x07\"C\\\\Xme\\xd1lb\\x9d\\xe6;\\x04\\xb9\\xb7\\xe1\\x97\\xf0\\x13df\\xb4b\\xf8B|\\xf1\\xe2=p\\x89\\xd69|\\xbf\\xd8uv3\\xf9.',\n+            constraints={\"min_size\": 48, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\r\\xe0\\x86\\\\bHN\\xdd\\x0c=\\x12c\\xa4\\x83\\xf0\\xbe\\xbc\\x80\\x9e^D,:\\x93\\x8c\\x9c\\xe0\\xc5\\x9b]\\ti>\\xbcw:\\x08\\xa3\\xccbY=D\\xb9*\\x16\",\n+            constraints={\"min_size\": 20, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'(\\xf5\\x01\\x98E68\\xe7U\\x8a\\xfd\\xd5\\x05\\xa3\\t$j?\\x8f\\x12\\xd6\\xfc\\xa1\\x02\\x91:\\xa7\\xe5Y8E-\\xcc\\xec\\x8d\\xfb\\x82\\xe1\"\\x95!\\x11\\xa5\\xb0\\xafH\\xa0\\xe1\\xda\\xbe\\xb8&\\xae;}s\\xff#\\xf6\\x931\\x01\\xa6f;\\x04>\\x9c\\x19Srg\\x10$K\\xc0D\\xa6J\\xd0\\x08Z}S q\\xfe\\xa6\\x10!',\n+            constraints={\"min_size\": 33, \"max_size\": 133},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.9332946408227405},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xaa\\xe3\\x0b\\x10d#\\xba\\x14s\\x14\\xb7\\xa8|\\x1f\\xa4\\xde\\xb4\\xe5s\\xe3i\\xd6\\\\x\\x01\\x88/8\\x86\\xf4\\xc5\\x9e\\xd46N^\\x7f\",\n+            constraints={\"min_size\": 15, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.711298601709284e307,\n+            constraints={\n+                \"min_value\": -6.545944856869567e-231,\n+                \"max_value\": 6.447182246919104e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.711298601709284e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=357,\n+            constraints={\n+                \"min_value\": -4166,\n+                \"max_value\": 404,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9512,\n+            constraints={\n+                \"min_value\": 337,\n+                \"max_value\": 22589,\n+                \"shrink_towards\": -44,\n+                \"weights\": {\n+                    9512: 0.056457318859382814,\n+                    12875: 0.05852691781947564,\n+                    10178: 0.03149884775449554,\n+                    15884: 0.021895991974980267,\n+                    14145: 0.03026525090924275,\n+                    17411: 0.034892678816957616,\n+                    19127: 0.013544069083338568,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9992,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1a\\xb8ez'\\x17\\x11\\x05f\\x8c\\xeaJ\\xc3\\x85F\\xd36\",\n+            constraints={\"min_size\": 12, \"max_size\": 112},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.867347490293886e307,\n+            constraints={\n+                \"min_value\": -9476713813953020.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.867347490293886e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.0293275051800616e105,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=19918,\n+            constraints={\n+                \"min_value\": 19831,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u1832\u188c\u189d\u1867\u18be\\u18ac\u1825\u1862\u18da\\U0009cd70\u18bb\u18e5\u18e3\u185e\u1833\u18c7\ud86f\udea8\u18c4\\U0008e9f8\u188f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            6160,\n+                            9999,\n+                            57856,\n+                            71432,\n+                            76542,\n+                            139918,\n+                            155381,\n+                            295933,\n+                            321999,\n+                            323652,\n+                            325446,\n+                            387161,\n+                            395333,\n+                            427897,\n+                            434153,\n+                            461407,\n+                            532504,\n+                            751133,\n+                            768505,\n+                            769709,\n+                            787888,\n+                            881890,\n+                            946186,\n+                            960086,\n+                            1024934,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=22054,\n+            constraints={\n+                \"min_value\": 21364,\n+                \"max_value\": 23473,\n+                \"shrink_towards\": 6_651_125_136_894_586_414,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u2b21\u2b4b\u2ad6\u2b57\u2add\u2b55\u2b0e\u2b33\u2a90\u2afa\u2b67\u2b59\u2ab7\u2b2d\u2aee\u2a88\u2b1a\u2b7a\u2acf\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([10880, 192111, 560777, 916912]),\n+                ),\n+                \"min_size\": 16,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9567090038473396},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([84854, 152075, 231882, 577617, 769624, 835269]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=37,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 0.05,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.5744892731460716e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'H\\xbb\\xf9e\\xd04\\x16o\\x1f=X=bK\\xe6Y\\xfdW\\xef\\xbe\"1\\xb5\\x0c\\xcb\\x05\\xa7\\xaa\\xac\\xd4\\xdf\\xc0\\x9eW3\\x00\\xda\\x81e\\xad\\xe6\\xb6%\\x81C&\\xc09\\xf9',\n+            constraints={\"min_size\": 16, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2_095_868_051_282_481_493,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -505887068,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x0e\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7_133_640_704_884_125_941_218_282_943_418_844_347,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.831868960821286e244,\n+            constraints={\n+                \"min_value\": 0.5,\n+                \"max_value\": 8.77005942922992e244,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.747858959717891e207,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u023a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [300, 82013, 164749, 417987, 616314, 671171, 1048494, 1074500],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xda\\xb8hj`\\xff\\xcf\\xbc@R*@\\xdc\\xe0\\xfe\\xcbE\\x16,W\\x1d|4\\xc2bY?\\xe4\\x8cJ_,\\xa2\\xd7\\x99X\\x06\",\n+            constraints={\"min_size\": 36, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.468938744970846e307,\n+            constraints={\n+                \"min_value\": 3.1813806781818508e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7870403948068123e-293,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1_547_390_519,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9b\\x87\\x02\\xf9$M\\x9d\",\n+            constraints={\"min_size\": 1, \"max_size\": 101},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xd7N\"3\\x1e\\xc3',\n+            constraints={\"min_size\": 6, \"max_size\": 106},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"e\\x17fJ\\xc3\\x85F\\xd36\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2_062_388_640,\n+            constraints={\n+                \"min_value\": 106,\n+                \"max_value\": None,\n+                \"shrink_towards\": 118,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.498502575743487e274,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud800\udc19\ud800\udc57\ud800\udc43\ud800\udc55\ud846\ude32\ud800\udc2a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([65535, 336565, 1098733]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.015489296741764805},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"?K\\xdc\\x18\\xed\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\udc4b\\udc78\\udc8f\\udcb5\\udc3e\\U000ffa84\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([56254, 105724, 224312, 1114110]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 86,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"0\\xb6\\xbe\\xec\\xb3\\xa1\\xfb\\x98\\xdc#\\xf3\\x9a\\x91\\xa2\\xd1\\x8e\\x97Q\\rJ\\x03\\xa9\\x9fh2\\x0cS`*\\x07>\\xa57\\xa0\\x8b\\x97\\x13\\x8e\\xca\\x0fn\\xfb\\x05[\\xf7\\xf9\\xcf`5B\\x0f{\\x9d\\xd4\\xe0\\x9c\\xc3S\\x97\\x1d&\\\\e5/\\x02\\r\\xe4~J\\xf2\\xc6\\xb1\\xd2\\xed\\xc7a{\\x1e\\x0f\\xe3Q\\xd8\\xadP\\xcd\\xd6{#>\\x978Pg*\",\n+            constraints={\"min_size\": 45, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9322329333613042},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.4769809266715025e308,\n+            constraints={\n+                \"min_value\": 2.4121010542942042e-57,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.014831444810523e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud820\udfa4\ud820\udf40\ud820\udf41\ud820\udf9c\ud820\udf7e\ud820\udf08\ud820\udf71\ud820\udf29\ud820\udf7c\\U00091074\ud820\udef1\ud820\udfb6\ud820\udf50\ud820\udfaf\ud820\udefa\ud820\udf53\ud820\udf55\ud820\udf9b\ud820\udf17\ud820\udf61\ud820\udefe\ud820\udf89\ud820\udee6\ud820\udeef\ud820\udee8\ud820\udf66\ud820\udf48\ud820\udee8\ud820\udf12\ud84c\ude5a\ud820\udf7e\ud820\udf89\ud820\udf40\ud820\uded8\ud820\udf91\ud820\udf3e\ud820\udf5e\ud820\udf48\ud820\udf6d\ud820\udf4a\\U000a5baf\ud820\udf6a\ud820\udf0a\ud820\udf76\\U000578ac\ud820\udf19\ud820\udf2f\ud820\udf57\ud820\udfbe\\U0003fd18\ud820\udf3c\ud820\udf91\ud820\udf56\\U0006efca\ud820\udf42\\U0002f107\\U0008f43b\ud820\udf52\ud849\udc94\ud820\udf05\ud820\udf62\ud820\udfa9\ud820\udf1d\ud820\udf81\ud820\udf0b\ud820\uded6\ud820\udefb\ud820\udefc\\U000580fb\\U0006ef7d\ud820\udf09\ud820\udf27\ud820\udf9a\ud820\udfaa\ud820\udee7\\U0003a524\ud820\udf5e\ud820\udf6c\ud820\udf5b\ud820\udf33\ud820\udee2\ud868\udc99\ud820\udf8c\ud820\udf96\\U000d0500\ud820\udf45\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            99017,\n+                            368640,\n+                            424822,\n+                            488045,\n+                            572565,\n+                            735727,\n+                            823839,\n+                            861229,\n+                            948548,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 47,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=28713,\n+            constraints={\n+                \"min_value\": 28228,\n+                \"max_value\": 29643,\n+                \"shrink_towards\": 24909,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5720930836149402},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=20687,\n+            constraints={\n+                \"min_value\": -28,\n+                \"max_value\": None,\n+                \"shrink_towards\": -28314,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd2\\x1b!\\x935\\x87\\xd3\\x8cmAXk^\\x14\\xc8+\\xb6\\xb8\\x10\\x02\\xea\\xbc\\xad\\xccH\\xe4g\",\n+            constraints={\"min_size\": 11, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8504242754018334},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1cj~\\xb9\\x1a(\\xd6\\xdb\\x91\\x96\\xca[\\xf1E\\x91\\xecH/g\\x12\\x85\",\n+            constraints={\"min_size\": 20, \"max_size\": 120},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1630,\n+            constraints={\n+                \"min_value\": -6066,\n+                \"max_value\": 9999,\n+                \"shrink_towards\": 404,\n+                \"weights\": {\n+                    7994: 0.12908940472072883,\n+                    8605: 0.04517692365273567,\n+                    -2043: 0.07252615909065349,\n+                    1602: 0.07593021587170233,\n+                    -1373: 0.023256187937481004,\n+                    5113: 0.10176362355373372,\n+                    3431: 0.033382977212034044,\n+                    -5174: 0.006737358619392507,\n+                    1977: 0.09004994322133517,\n+                    -548: 0.0072526159090653495,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 3.91967667679724e-12},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00062cc1\\U00062cff\\U00062c7b\\U00062d10\\U00071f09\\U00062d17\\U00062c8b\\U00062c7d\\U00062cd8\\U00062cf4\\U00062c49\\U0007117c\\U00062c54\\U00062c2f\\U00072868\\U00062d1c\\U00062cac\\U00062d06\\U00062c7f\\U00062d07\\U0006931e\\U00062caf\\U00062c7e\\U00062c9f\\U00062c7c\\U00062cc9\\U00062c58\\U0008193d\\U00062c7b\\U00062e6d\\U00062ce6\\U00062c90\\U00062c57\\U0007d351\\U0007776a\\U00062c97\\U00062c75\\U00062cdc\\U00085639\\U00062c33\\U00062cb7\\U00062c3b\\U00062cc7\\U00062cfc\\U00062c6a\\U00062d11\\U00062cba\\U00062c7c\\U00062c52\\U00062cc4\\U00062cb4\\U00062ca6\\U00062c75\\U00062cf9\\U00062cfd\\U00062c88\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([404520, 556294, 1114110]),\n+                ),\n+                \"min_size\": 26,\n+                \"max_size\": 126,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"_\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00034b07\\U0009b8e4\\U00034ab4\\U000366cc\\U00034ace\\U00034a9a\\U00034a3f\\U0003740c\\U00034a47\\U0009e663\\U00034a63\\U00034a7d\\U00037e2f\\U00034a7b\\U0009e84d\\U00034a5c\\U000392e5\\U00034b1a\\U00034ac5\\U0003911d\\U000393ec\\U0009eddb\\U00034b27\\U00034a44\\U00034a32\\U00034a51\\U00034b18\\U00034ac3\\U00034aea\\U00034b10\\U00034ad8\\U00034a85\\U00034ad4\\U00034a84\\U00034a7e\\U00034b06\\U00034af8\\U000363b9\\U00034ad4\\U00034ad1\\U0003a212\\U0009f87d\\U00034a44\\U00034b28\\U00034b18\\U00034af7\\U00034a4b\\U00034af1\\U00034ad2\\U0009d8d9\\U00034adf\\U00034aad\\U00034a38\\U00034b0b\\U00034aec\\U00034afb\\U00034b1e\\U00034ac7\\U00034af7\\U00034ad8\\U00034a83\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([215598, 249081, 633482, 665595, 808258]),\n+                ),\n+                \"min_size\": 47,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1158,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -126,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000c923c\u551f\u5533\u54d4\u550f\u54c1\u54c0\u5480\u547e\u5537\u54ec\u5504\u552f\\U00066859\u5511\u54bf\u5468\u5470\u552c\\U00068c8a\\U000b6c77\u54e3\u5506\u5535\u5501\u54b9\u5535\u5470\u54ad\u54ee\u549d\u5523\\U000db455\u54a3\\U000c9f8b\u5456\u54eb\u5511\\U000dc30f\u54c8\u552a\u54bd\u54e4\u54ee\u54ad\\U0005f07a\u5525\u5484\u553e\u552a\u54d9\\U000cb531\u551b\\U00069362\u54f7\u54d7\\U000d22d9\u54c1\u54f2\u5487\u548d\u5541\\U0007cee3\\U00068166\u54b8\u54b6\u548c\u54bf\\U000889c2\u54fb\\U000bfedb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            21586,\n+                            35061,\n+                            339166,\n+                            562636,\n+                            645184,\n+                            684151,\n+                            741013,\n+                            917382,\n+                            944081,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 48,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-67,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 121,\n+                \"shrink_towards\": -7,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5e-324},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.07729732470123364},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0009b0bd\\U0009b0b9\\U000bb861\\U0009afe6\\U0009b028\\U0009afe0\\U0009b084\\U0009b029\\U000a699c\\U0009b080\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([634846, 891104])),\n+                \"min_size\": 5,\n+                \"max_size\": 82,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xb2\\xa88\\x929\\x91\",\n+            constraints={\"min_size\": 5, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([535419, 1016540, 1073183])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6716813195791104},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-945200808,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -945177597,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x84\\x1a,\\x8a\\xb8q\\x82q\\x16\\xf9\\x07n\\x96\\xdb$\\xd1LF\\x06\\xc9`\\xa6L\\xa4E\\x8e\\x86\\xfb[\\xe7\\xd3^\\x02!\\xcc\\x0bUD\\xd3\\x12kq\\tO\\xde\\x8b\\x81\\xab\\xea\\xa7\\xcfmEI,\\x93\\\\\\xc1\\xd4\\x02\\x1d\\xceF\\x01\\xba\\xd1o3H\\x0fk\",\n+            constraints={\"min_size\": 43, \"max_size\": 143},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.12650163613155077},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud833\udf9d\ud833\udfb6\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([118527, 462973])),\n+                \"min_size\": 0,\n+                \"max_size\": 28,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.368377044904348e307,\n+            constraints={\n+                \"min_value\": 4.974493015413071e16,\n+                \"max_value\": 1.6986952548162127e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.008113168336921e-223,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.5,\n+            constraints={\n+                \"min_value\": 0.0,\n+                \"max_value\": 0.5,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1e-323,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00042392\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([271234, 573686, 908540]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf1\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.3528369021602812e308,\n+            constraints={\n+                \"min_value\": 1.4388391582851786e269,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.875682254568594e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-27816,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -73,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.3877899979534908},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7974672191085608e308,\n+            constraints={\n+                \"min_value\": 4.78164743074921e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.142322168534461e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005d53b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            17648,\n+                            209324,\n+                            291155,\n+                            444837,\n+                            471853,\n+                            487695,\n+                            663052,\n+                            748744,\n+                            831480,\n+                            923350,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.2399965542729507e308,\n+            constraints={\n+                \"min_value\": 6.273437242580985e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.2399965542729507e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8760804700188378},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.7187178585308188e-126},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=31478,\n+            constraints={\n+                \"min_value\": 26048,\n+                \"max_value\": None,\n+                \"shrink_towards\": 1_383_601_714,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004a34e\\U0004a3f3\\U0004a387\\U0004a41d\\U0004a39f\\U0004a3b1\\U0004a3fa\\U0004a428\\U00069401\\U0004a396\\U0004a364\\U0004a3ee\\U0004a3c3\\U0004a417\\U00070364\\U0004a998\\U0004a3a6\\U0004a3b4\\U0004a417\\U0004a35e\\U0004a421\\U0004a3c2\\U0004a395\\U0004a436\\U0004a367\\U0004a3b6\\U0004a43e\\U000755c7\\U0004a3f6\\U0004a3d0\\U0004a3f3\\U0004a383\\U0004a346\\U0004a3af\\U0004a43a\\U0004a3ca\\U0004a3ab\\U0004a425\\U0004a429\\U0004a3f0\\U0004a3ef\\U0004a365\\U0004a40b\\U0004a37c\\U0004a42a\\U00097059\\U0004a402\\U0004a3fa\\U0004a38d\\U0006d7c8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([303940, 684447, 1087442]),\n+                ),\n+                \"min_size\": 35,\n+                \"max_size\": 132,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003bb0c\ud866\ude87\u00de'\\U0009a6d5\u00f6d\u00f985\\x82\u00fb,F\\x92\u00cd\u00bbq\u00c0\\U0001b69f.\\U0009da20\ud840\udf7b\\x7f\\U00097beb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1, 161492, 162978, 249863, 590505, 751306]),\n+                ),\n+                \"min_size\": 21,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.671012709270136},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-28103,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".observation\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0002374946342132425},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.3870347196779466e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud81d\udc7e\ud81d\udc76\ud81d\udc28\ud81c\udff0\ud81d\udc4c\ud81d\udc64\\U000874ae\ud81c\udfe0\ud854\ude29\ud81d\udc8d\ud81d\udc48\ud81d\udcb3\\U000a7b56\ud81d\udc2d\\U0009eb41\ud81d\udcc4\ud81d\udc9a\ud81f\udec8\ud81d\udc93\ud81d\udcc1\ud81d\udc7d\ud81d\udc00\ud81d\udc1b\ud81d\udc1b\ud81d\udc85\ud81d\udc77\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [95184, 168725, 448022, 715573, 1090089, 1097637, 1114111],\n+                    ),\n+                ),\n+                \"min_size\": 20,\n+                \"max_size\": 120,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u023e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [300, 9999, 389855, 425216, 470464, 493377, 649696, 911135],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-68,\n+            constraints={\n+                \"min_value\": -9799,\n+                \"max_value\": -38,\n+                \"shrink_towards\": -13684,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000338d4\\U0003390f\\U0003396f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([211134, 227398, 399856]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=6_345_491_824_029_097_295,\n+            constraints={\n+                \"min_value\": -59_958_689_357_434_950_922_056_766_424_902_821_526,\n+                \"max_value\": None,\n+                \"shrink_towards\": 5,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            197985,\n+                            243722,\n+                            421957,\n+                            490086,\n+                            659967,\n+                            813049,\n+                            1002318,\n+                            1103381,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003694f\\U00036a27\\U000369a3\\U000a9fee\\U00036995\\U0003697f\\U00036967\\U000369e6\\U00036973\\U000369db\\U00036958\\U000369b7\\U00036960\\U0003cc12\\U000369d9\\U00036a19\\U000369de\\U00036a37\\U00036a1c\\U0003697c\\U000aa73b\\U000369d4\\U000bfba9\\U0003695d\\U000a0643\\U00036a08\\U0003697b\\U00036a11\\U000369b2\\U000422d3\\U0003e3db\\U00036a07\\U00036a1e\\U00036a13\\U0003699e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([223567, 278619, 526884, 790472, 895308]),\n+                ),\n+                \"min_size\": 11,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5169637905207517},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6160462445971099},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud866\udc5c\ud866\udc08\\U0002feed\\U000b8b8d\ud865\udfe5\ud866\udc30\ud866\udc9f\ud866\udc39\ud865\udfed\ud866\udc19\ud866\udc47\ud865\udfc7\ud866\udca2\ud865\udff0\ud866\udc1c\\U0003ad4c\ud866\udc7f\\U00040468\ud865\udfc0\ud866\udc83\ud866\udc78\ud866\udcaa\ud866\udc5d\ud865\udfe6\ud866\udc45\\U00052dde\ud866\udc35\ud866\udc1d\ud866\udc50\ud866\udc38\\U000668f2\ud866\udc82\ud866\udc2d\ud866\udc36\ud866\udc6f\ud866\udc54\ud866\udc45\ud866\udc61\ud866\udc80\\U000631b2\\U00061661\ud866\udc2e\\U0004e923\ud866\udc39\ud866\udc6b\ud866\udc07\ud865\udfdd\ud865\udfe7\ud866\udc9d\ud866\udc4b\ud865\udfea\ud865\udfd7\\U0004592e\ud866\udca7\ud866\udc5b\ud866\udc65\\U000e10c0\ud866\udc5f\ud866\udc79\ud866\udc69\ud866\udc6e\ud866\udc13\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            169913,\n+                            438438,\n+                            732739,\n+                            741710,\n+                            746173,\n+                            757694,\n+                            909204,\n+                            932160,\n+                            1108535,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 34,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.2888150759968404e-204,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.225073858507e-311},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xce-\\x00\\xec\\xbc8\\xf6\\xde~\\xe41\\xc2\\xb1w\\xa7\\x90\\xf0\\xfb\\xac\\xef\\xfb&\\xb7BW\\xa6\\xad\\xf1\\x144\\x97-\\x04\\xc2\\x13}h'\\xb2\\x96-\\x1a\\xdes\\x886_1f\\xd3\\x03\\x84\\x94j@\",\n+            constraints={\"min_size\": 44, \"max_size\": 144},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.08370073585390882},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.4494953054617786},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1825842441815156e308,\n+            constraints={\n+                \"min_value\": 5.600491077260555e16,\n+                \"max_value\": 1.5932819241226206e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.1825842441815156e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-11645,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -82,\n+                \"shrink_towards\": -109,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"9O09c\\xc3\\xe3\\xa2/\\xc0\\xa04<rm\\xcfo\\x03\\xaf\\x9a'8\\xab\\x80\\x1fE\\xfal\\xbe\\x10\\x07&\\xf6\\x1b\\xf9;\\xb1\\xe4-\\x19\\xc5Q>\\xa0\\xcdPM\\x92\\x96\\xa5\\x0b{\\x80<\\xa0\\xf4~\\xd3\\xe9\\xad\\x9b7\\x8b\\xfa+~\\t\\x91\",\n+            constraints={\"min_size\": 26, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.6203083498512536e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.3575667445670904e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7_959_249_899_353_651_246,\n+            constraints={\n+                \"min_value\": 7_959_249_899_353_651_185,\n+                \"max_value\": 7_959_249_899_353_651_274,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    7_959_249_899_353_651_246: 0.01289581922574324,\n+                    7_959_249_899_353_651_228: 0.4871041807742567,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-26302,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 21723,\n+                \"shrink_towards\": -11225,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5667477662149513},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=14012,\n+            constraints={\n+                \"min_value\": 13999,\n+                \"max_value\": None,\n+                \"shrink_towards\": 8_838_929_580_675_237_640_978_020_549_266_804_045,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\":\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004baf2\\U00056803\u00ba\u00bbD\\x11\u00d4\u00efo\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([0, 110713, 235402, 388147, 603095]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6692461118059866},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8185,\n+            constraints={\n+                \"min_value\": 45,\n+                \"max_value\": 14133,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.0553831065241872e308,\n+            constraints={\n+                \"min_value\": 10000000.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.1125369292536007e-308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6426336149435782},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-19981,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -1777,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2755,\n+            constraints={\n+                \"min_value\": 118,\n+                \"max_value\": 14160,\n+                \"shrink_towards\": 3_678_088_278_551_136_448,\n+                \"weights\": {\n+                    8222: 0.00677254975165214,\n+                    3626: 0.05414044562603458,\n+                    10856: 0.0323831745710631,\n+                    2755: 0.14891470584608715,\n+                    12935: 0.20217272308997186,\n+                    9999: 0.08795465517577193,\n+                    9950: 0.2502217215548798,\n+                    9830: 0.21434892976830625,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.36456057715388496},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=8.338960315219311e307,\n+            constraints={\n+                \"min_value\": 1.2764042203102644e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.338960315219311e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-587,\n+            constraints={\n+                \"min_value\": -9866,\n+                \"max_value\": -99,\n+                \"shrink_towards\": -6619,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0024063942914327456},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.20151300537497457},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"Q5^-\\x8b\\xdeF\\xa3\\xb5Z\\xd3'*\\x98\\x8b\\xc8\\xa3\\x8c\",\n+            constraints={\"min_size\": 16, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0009dcb1\\U0009ebaa\\U0005aab8\\U0005ab45\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            371377,\n+                            471100,\n+                            493503,\n+                            578419,\n+                            637869,\n+                            768679,\n+                            784911,\n+                            1003176,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-25605,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-5076,\n+            constraints={\n+                \"min_value\": -15532,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.8038495155454015},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xb1K\\xda/vw;\\xb3\\xeb\\x11w\\xbdF\\x03H<\\xd3\\x1b\\xc8\\x07\\xf2\\xf5\\xd9yd\\xea\\xadC\\xb1\\xdanO\\x05\\xc1\",\n+            constraints={\"min_size\": 20, \"max_size\": 120},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8bn\\x15.\\xe0\\xf5\\x8a\\xabm\\x87?\\xd2*U\\xb1\\xf4\\xd6\\xdfC\\xa1N\\x81\\x1fi>\\xfc\\x92L\\xab\\x11O.\\xfb<4\\x12\\xff\\x8e\\xff-\\n\\x99\\t\\xa8\\xa5yL`h\\x16&\\xc1A\",\n+            constraints={\"min_size\": 49, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1_247_164_102,\n+            constraints={\n+                \"min_value\": -1_247_164_350,\n+                \"max_value\": -111,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    -1_247_164_097: 0.12625400789701416,\n+                    -516320633: 0.2486967650179315,\n+                    -1_119_387_145: 0.12175230833338242,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.192092896e-07},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4905,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 109,\n+                \"shrink_towards\": -63,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.016201171941520712},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-110_630_662_059_620_347_212_270_240_434_396_772_294,\n+            constraints={\n+                \"min_value\": -110_630_662_059_620_347_212_270_240_434_396_772_467,\n+                \"max_value\": -21967,\n+                \"shrink_towards\": 21900,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0008588a\\U00063b62\\U00063b0d\\U00063b99\\U00063afb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([408313, 588703, 689485, 732656, 884096, 973045]),\n+                ),\n+                \"min_size\": 1,\n+                \"max_size\": 101,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9117062536218503},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-23646,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -5374,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x89LT\\x1a\",\n+            constraints={\"min_size\": 4, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"s[\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=15445,\n+            constraints={\n+                \"min_value\": 13394,\n+                \"max_value\": None,\n+                \"shrink_towards\": 84,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8_050_361_829_212_617_563,\n+            constraints={\n+                \"min_value\": 2015,\n+                \"max_value\": None,\n+                \"shrink_towards\": 6984,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf0\\x02\\xd7\",\n+            constraints={\"min_size\": 2, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7082,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -7077,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 4.423219078121499e72,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.715506316425478e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=6082,\n+            constraints={\n+                \"min_value\": 6064,\n+                \"max_value\": None,\n+                \"shrink_towards\": 57,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud86f\udfef\ud864\udfdc\\U0006751a\ud865\udc08\ud865\udc74\ud864\udff6\\U000838c3\ud865\udc9c\ud865\udc3a\ud865\udc96\\U0005e8c7\ud865\udc55\ud865\udc44\ud865\udc9f\ud864\udfcf\ud865\udc5f\ud865\udc23\ud865\udc56\ud864\udffc\ud865\udc6a\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([168864, 604711])),\n+                \"min_size\": 10,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7763,\n+            constraints={\n+                \"min_value\": 43,\n+                \"max_value\": 18831,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8144294901030398},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x89\\x07\\x8b\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=65535,\n+            constraints={\n+                \"min_value\": 30847,\n+                \"max_value\": None,\n+                \"shrink_towards\": -5051,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.065751324138078e-06,\n+            constraints={\n+                \"min_value\": -1e-05,\n+                \"max_value\": -9.264536124467139e-237,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.065751324138078e-06,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.1,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.83170486812259e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"m\\xb5}\\xe8\\xb9\\n\\xa9\\xac\\xad\\xb7\\x0e\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8a\\x94\\xdc\\x07\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud800\ude88\\U000ab539\ud800\udec7\ud800\udf36\ud800\udeb6\ud800\udefb\\U000102fd\ud800\udee4\\U000102fd\\U000f3cb9\ud800\udf75\ud800\ude9a\\U000102d9\ud800\ude95\\U000e0bfb\ud800\udf46\ud800\udec1\ud800\udf01\ud800\udead\ud800\udf16\ud800\udf44\\U000ad99d\\U000f4d1c\ud800\udf1d\ud800\ude87\ud800\udf64\ud800\udebe\ud800\udee4\ud800\udebf\\U000e0b41\ud800\ude85\ud800\udf3f\ud800\udee3\ud800\udecd\\U000ba24f\ud800\udf33\\U000f806e\ud800\udefb\ud800\udf3c\ud800\udf53\ud800\udea6\ud800\udf3b\ud800\udf0a\\U00036898\\U000102d3\\U000adc89\ud800\udeac\ud800\udeaa\\U000102da\ud800\udeec\ud800\udf81\\U000a0125\\U000fd132\ud800\udf62\ud800\udf3d\ud800\ude8d\ud800\udf67\ud800\udf82\ud800\udef8\ud871\udcf6\\U000e5df2\ud800\udee3\ud800\udf3b\ud800\ude98\\U000102d6\ud800\udef7\ud875\udc1c\\U000dd546\ud800\udef0\ud800\udee2\ud800\udf65\\U0001029f\ud800\udee0\ud800\udee9\ud805\ude9b\ud800\ude86\ud800\udf49\ud800\udf05\ud800\udf50\ud800\udf44\ud800\udf39\ud881\ude34\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            66179,\n+                            72583,\n+                            103727,\n+                            237643,\n+                            623693,\n+                            804856,\n+                            886487,\n+                            952009,\n+                            992168,\n+                            1039129,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 32,\n+                \"max_size\": 132,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4060,\n+            constraints={\n+                \"min_value\": 3926,\n+                \"max_value\": 1_107_849_284,\n+                \"shrink_towards\": -22237,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9413,\n+            constraints={\n+                \"min_value\": -6,\n+                \"max_value\": 30685,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xcf*_\\xe6\\xdd\\xb1\\xcd\\x80\\xdd>\\xfa\\xda\\xc6W\\xe7\\xb7\\x9e\\xf8,\\x0e\\xdedA\\xa8\\x96Q\\xba\",\n+            constraints={\"min_size\": 13, \"max_size\": 113},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7779529973959791},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.103515625e-05,\n+            constraints={\n+                \"min_value\": -2.3669921469900595e-200,\n+                \"max_value\": 5.470675294884694e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 9.824884960447748e-283,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"y\\x84J\u00e5S\u00db\u00d3V\u00dd\u00d4Mi\u00f0B\\U0005d186\u00e6t\\U00094475\\U0008c2bdo\\U00089807\\U0008ce75o\u00dch\\x80\u00ac\\x1a\\x86\u00bf\\U0006b365\\x12\ud820\udd44\\U0003b4a5\u00d8\u3e9a\\U0004b584\\U0004c018o\\x9bZ\\U0009a6b4|g\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            33371,\n+                            66290,\n+                            109989,\n+                            204647,\n+                            667243,\n+                            677503,\n+                            684701,\n+                            964068,\n+                            970367,\n+                            1000802,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 38,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x87\\xed\\x8eKI$lh\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6418921349384922},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=404,\n+            constraints={\n+                \"min_value\": 83,\n+                \"max_value\": 903,\n+                \"shrink_towards\": 38,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00016015\\U000d5911\\U000160a5\\U00016061\\U000160c7\\U000160ce\\U000d65e0\\U00016019\\U00015ff8\\U000160d7\\U000160bd\\U000160d4\\U00016057\\U00016064\\U000160bb\\U000160a0\\U000160e9\\U000160f0\\U0001603f\\U0001602b\\U00016001\\U000f2575\\U000160ee\\U000ee9ce\\U00016035\\U000160ce\\U00016016\\U000f10fc\\U0001607c\\U000160a0\\U000160f1\\U000d8ec5\\U000160f2\\U000160ed\\U000f7e83\\U000160dd\\U00016089\\U0001603a\\U00016024\\U0001605b\\U000160d8\\U000160c8\\U00016008\\U00016071\\U0001600f\\U00015ff9\\U000160d6\ud86b\udd16\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            90100,\n+                            181916,\n+                            349764,\n+                            356330,\n+                            460565,\n+                            470999,\n+                            835403,\n+                            889902,\n+                            920835,\n+                            1059596,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 41,\n+                \"max_size\": 141,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.05,\n+            constraints={\n+                \"min_value\": 6.7834846121291456e-307,\n+                \"max_value\": 0.05,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.010054426689111676,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe3)6\\xac\\xde;\\xd2u\\x95\\x0c&\\xb4\\xf65\\xb9T\",\n+            constraints={\"min_size\": 9, \"max_size\": 109},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe6\\xd3\\x90\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=6676,\n+            constraints={\n+                \"min_value\": -4,\n+                \"max_value\": 9999,\n+                \"shrink_towards\": -55_237_899_925_510_387_807_819_806_488_219_242_879,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000be42c\\U000c921e\\U000c659c\\U000be40f\\U000be3fa\\U000be43c\\U000be4cd\\U000be4be\\U000c21d4\\U000c06cc\\U000be406\\U000be4aa\\U000be41a\\U000be44e\\U000be4bd\\U000be46e\\U000be4b1\\U000be3fc\\U000be63f\\U000be402\\U000be4e1\\U000c2180\\U000be41f\\U000be3e7\\U000c790b\\U000c18e1\\U000be410\\U000be95e\\U000be4e4\\U000be44b\\U000be4b1\\U000bfcd0\\U000be430\\U000c80c6\\U000be3fb\\U000c72fe\\U000be432\\U000be3f7\\U000c4be7\\U000be45f\\U000c6627\\U000c4294\\U000be412\\U000be41e\\U000be4a1\\U000be4b3\\U000c77f4\\U000be4a8\\U000be48e\\U000c017e\\U000be48c\\U000be477\\U000be3f3\\U000be4c1\\U000be465\\U000c8abf\\U000be4b3\\U000be4a3\\U000be46a\\U000be43e\\U000c03af\\U000bf47d\\U000be47c\\U000be49b\\U000be474\\U000c7339\\U000c5066\\U000be4aa\\U000be472\\U000be4e3\\U000be473\\U000c8618\\U000c1dd5\\U000be4d8\\U000be4ac\\U000be46c\\U000be3f4\\U000be4c5\\U000be407\\U000be47f\\U000be42c\\U000be4ce\\U000be401\\U000c2345\\U000be4e3\\U000c7db8\\U000c4dcc\\U000c154e\\U000be411\\U000be4d6\\U000be40c\\U000be3ea\\U000be432\\U000be42c\\U000be45c\\U000c1d83\\U000bf801\\U000be4a4\\U000c854b\\U000be40f\\U000be44b\\U000be3f1\\U000be4bb\\U000be487\\U000be404\\U000beeda\\U000be4b4\\U000be480\\U000c3639\\U000be48a\\U000be4b2\\U000c31ec\\U000be4cf\\U000c4bda\\U000c362e\\U000c423c\\U000c84fe\\U000be4ab\\U000be491\\U000be4bd\\U000be48b\\U000be418\\U000c6d79\\U000be487\\U000c0eb3\\U000be4b4\\U000be42b\\U000be470\\U000be443\\U000be441\\U000c940e\\U000be4c0\\U000be471\\U000be4db\\U000be48f\\U000be400\\U000be3f3\\U000be417\\U000be42a\\U000be44d\\U000be3eb\\U000be49b\\U000c4aed\\U000be447\\U000be411\\U000be464\\U000be445\\U000c8e6e\\U000be43e\\U000be44c\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([779238, 824786])),\n+                \"min_size\": 50,\n+                \"max_size\": 150,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=29698,\n+            constraints={\n+                \"min_value\": 28998,\n+                \"max_value\": 30271,\n+                \"shrink_towards\": -40,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6069540877582896},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.488970883172288e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x90;\\xa0[\\xc8\\x05<Qz\\xaa\\xbf\\x1c2\",\n+            constraints={\"min_size\": 7, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u1254\u12cc\u1225\u126d\u12e8\u12b5\\u2fe3\u12b3\\U00073280\u129f\u11f5\u12a7\u1246\u1203\u12e8\u1232\u11f9\u1277\u129f\u122d\u127a\u127d\u1275\u1279\u1296\u12d0\u11f4\u120d\\U0005cd03\\u128f\\U000701ed\u1296\u129b\u126e\u1239\u1240\u12b2\u1205\u12db\u120a\u129c\\U000ce38d\u12bc\u12b9\\U0009ab12\u127a\u12df\u127f\u12a7\u12ed\u1273\\U000bb903\\U000afb62\\U00076a0b\u1261\\u128e\u12e4\u1278\u11fe\u1288\\u12bf\u127c\u1242\u126f\\U0006e18f\u1254\\U000e73d3\u126d\u1258\u12dd\\U0009a0c3\u12bb\u12c8\\u12c6\u128c\u122d\\U000c57cd\u1264\u123a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            4595,\n+                            64170,\n+                            108017,\n+                            137227,\n+                            227968,\n+                            257405,\n+                            310558,\n+                            414663,\n+                            439303,\n+                            508976,\n+                            593202,\n+                            641060,\n+                            667789,\n+                            905489,\n+                            929702,\n+                            984994,\n+                            1098775,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 20,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x18\\xcd*\\x11\\x9aXS\\xeb\\xea\\xdf\\xc9\\xcb\\xdd\\x8c\\xd4pR\\xcfi\",\n+            constraints={\"min_size\": 14, \"max_size\": 106},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=48574,\n+            constraints={\n+                \"min_value\": 26783,\n+                \"max_value\": 65535,\n+                \"shrink_towards\": -19242,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000e75e9\\U00057066\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([356376, 390456, 605962, 968251, 1009022]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"}\\x91\\x88\\x92\\x12\\xa23\\x16P\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -8.45227060213495e270,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.4521515954198603e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.5,\n+            constraints={\n+                \"min_value\": 0.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.029578269289912e-296,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=77775,\n+            constraints={\n+                \"min_value\": 25494,\n+                \"max_value\": 6_976_701_703_034_816_625,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x00\\xaeU\\xf6\\xe1\\xd7\\x88\\xa8\\xbf0\\x81MDF\\xd0\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"e{\\xfb\\x06%@\\x03\\xc2P\\xba\\x8b\\xedN!\\x9d\\x06\\x15\\xa3\\xee\\x9dq\\xf5\\xb4\\x80\\xd7\\xd2eA\\xda\\x8dv\\xa3_\",\n+            constraints={\"min_size\": 13, \"max_size\": 113},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-12681,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 512,\n+                \"shrink_towards\": -28,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00ee\u9660\u00ef\\x9b\u00e6JO\u00a9\u00db\u00e2O\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1, 90942, 133340, 144540, 158524]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-3533,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -3481,\n+                \"shrink_towards\": -1,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5283402170026065},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud0af\ud0b8\ud091\ud10b\ud099\ud145\ud0de\ud081\\U0004ccf7\\U0006ea33\ud140\ud0fb\ud0d0\\U000de9a2\ud111\ud11f\ud0e4\ud0f8\ud130\ud0d0\ud0aa\ud116\\U0004cf7d\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            53335,\n+                            59175,\n+                            131304,\n+                            138966,\n+                            275637,\n+                            320867,\n+                            366637,\n+                            518468,\n+                            567537,\n+                            720477,\n+                            840128,\n+                            943595,\n+                            947129,\n+                            954009,\n+                            1080016,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 21,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=6390,\n+            constraints={\n+                \"min_value\": -1022,\n+                \"max_value\": 22927,\n+                \"shrink_towards\": 13,\n+                \"weights\": {\n+                    8606: 0.0635531116912449,\n+                    6390: 0.18475915869173268,\n+                    6578: 0.13398895307097483,\n+                    17917: 0.09154398695117345,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x7f%\\x10\\xd4\\xe2\\x7f\\xed\\xec\\x80g\\xbd\\x99\\x9d\\xf3\\x96\\x0f{c\\xfa\\x05\\x1a\\x955\\x17\\x0e\\xe0C\\x9c\\x83 <6\\x8b\\x0f9\\x84\\x13\\xcd!\\xa2\",\n+            constraints={\"min_size\": 34, \"max_size\": 129},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud800\udcb5\\U00010027\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([65535, 292060, 399957, 1033955]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.10863789622965195},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.659456977451192e307,\n+            constraints={\n+                \"min_value\": 2.225073858507203e-309,\n+                \"max_value\": 4.659456977451192e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 4.659456977451192e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7126965736869375e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.689742028506057e307,\n+            constraints={\n+                \"min_value\": 2.00001,\n+                \"max_value\": 5.516325946762017e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.689742028506057e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\ue868\\ue826\\ue845\\U0006e13c\\ue86a\\ue87f\\ue852\\ue870\\ue82d\\ue82f\\ue86c\\ue87f\\ue80b\\ue82a\\ue80b\\ue7e4\\ue816\\U000aea3d\\ue821\\ue7c1\\ue806\\ue7e5\\ue870\\ue880\ud852\udd7e\\U00039193\\ue7a3\\ue87e\ud86c\udc1a\\U00056e34\ud848\udf7f\\ue808\\ue834\\ue83b\\ue885\\ue79c\\U000576c7\\ue87c\\ue847\\ue7d7\\ue81c\\ue851\\ue7ca\\ue821\\ue816\\U000415df\\ue7c6\\ue795\\ue7f8\\ue857\ud820\ude54\\ue834\\ue7ef\\ue806\\U000a042d\\ue7b0\\ue7b1\\ue885\\ue83b\\ue7e8\\ue873\\ue83e\\ue84e\\ue85d\\ue7c4\\ue7ac\\ue7f8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            59276,\n+                            160674,\n+                            161343,\n+                            167331,\n+                            172329,\n+                            519625,\n+                            546218,\n+                            549356,\n+                            616964,\n+                            737689,\n+                            1062115,\n+                            1109953,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 37,\n+                \"max_size\": 137,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-14460,\n+            constraints={\n+                \"min_value\": -25379,\n+                \"max_value\": -25,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u276c\\U00081a27\u2732\u272a\u2803\u2736\u2710\u2771\u277b\u36e2\\U00087188\u2788\u7597\u2740\\U0004ba77\u27fd\u27be\u27fd\\U0004be0d\u271b\u27f4\\U00088fa7\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [9999, 65535, 302778, 321722, 514091, 564300, 735386],\n+                    ),\n+                ),\n+                \"min_size\": 13,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u026c\\U000154ed\\U0001afad\u01b4\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([404, 210855, 485521, 817489, 849590, 1052321]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000488be\\U000488a5\\U000b6c97\\U0004889f\\U0004892e\\U00048913\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([297008, 889605, 925481]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-36591,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -9335,\n+                \"shrink_towards\": -27,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.04991914930608e44,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 4.6314520298271856e64,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.571662762935822e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0470\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1000,\n+                            5410,\n+                            8192,\n+                            107785,\n+                            154348,\n+                            333046,\n+                            370482,\n+                            697203,\n+                            1028779,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xec\\rn\\x02|\\x1a_\\x82\\xa7\\xc2\\xb2\\xa5$\\x93.\\xe4\\x93@\\xa9\\x15o\\x1a\\xec\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=23042,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 25177,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.23035042289783864},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9e\\xcc\\x02C\\xfb'\\xd2\\xc1\\xff3C\\x163\\x83\\x0e\\x981\\x81\\x06\\xd0\\xb1\\x86]\\xee\\xd0u\\xc2!Y\\xa5*\\tY\\x9b\\x07c\\xa5\\x950\\xf7&R\\xe3\\xd4\\xf2\\xea?'\\xbcZ\\x045\\x11\\x19j\\xc5\\xd9\\xf4M)yB\\xc0\\xc3\\xb3\\x060S\\x81\\xdd>$\",\n+            constraints={\"min_size\": 44, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000c2a52\\U00039aa6\\U000399f0\\U00039a50\\U00039a4d\\U000bd954\\U00039a6f\\U00039aa9\\U00039a9a\\U000399f8\\U00039a0d\\U00039acb\\U000399f1\\U00039a87\\U00039aaf\\U00039a2b\\U00039a6f\\U00039a4a\\U00039a48\\U00039a6b\\U00039a39\\U000c1a12\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([235992, 378257, 444829, 891576, 972428]),\n+                ),\n+                \"min_size\": 12,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value='\u00a4}\\x1c7\\x9c\\x1d\\x7f\\U000f6124[\u00e3\"\\U0010ba94\u00c0A_\\x11x\\x95B1\\U0010022e\\U00104277T\\x05?\ud840\udfdb\u00e0',\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            1000,\n+                            8141,\n+                            111496,\n+                            126356,\n+                            307012,\n+                            322517,\n+                            343417,\n+                            405054,\n+                            435038,\n+                            485338,\n+                            502349,\n+                            516880,\n+                            534513,\n+                            641645,\n+                            646875,\n+                            663287,\n+                            663851,\n+                            751842,\n+                            769132,\n+                            780839,\n+                            789230,\n+                            830754,\n+                            836299,\n+                            845452,\n+                            854183,\n+                            890159,\n+                            897424,\n+                            917316,\n+                            937941,\n+                            957463,\n+                            978151,\n+                            990351,\n+                            1014317,\n+                            1022722,\n+                            1041031,\n+                            1046501,\n+                            1111895,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 8,\n+                \"max_size\": 108,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.2349590025534145e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x96\\xe3\\x84\\x89\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001568a\ud84e\udcd6\\U00015757\\U000156d0\\U0001575c\\U000156c3\\U0001573a\\U0001b5fe\\U000156a0\\U0001575d\\U00015742\\U000156a8\ud822\udc40\\U000156e5\\U00015734\\U00015698\\U00015662\ud821\udf45\\U0001a6a2\\U0001572c\\U00015674\\U00015688\\U000156a7\\U000156bc\\U00015733\\U0001a99b\\U00015661\\U000156e4\\U0001568d\\U00015734\\U00015685\\U000156b2\\U00015739\\U0001575d\\U000192d4\\U0001567f\\U00015691\\U000156b7\\U000156dc\\U00015670\\U0001e7aa\\U0001fd5c\ud84e\udc48\\U00015702\\U00015682\\U00015681\\U0001ae9c\\U0001574b\\U00015719\\U000156fa\\U00015676\ud841\udc75\\U0001571c\\U00015675\\U000156e9\\U00015688\\U000156ed\\U0001c284\\U0001a7ed\\U000156b7\ud821\udd55\\U00015732\\U0001571c\\U00015739\\U0001569d\\U000156ac\ud849\udcb8\\U00015686\ud81f\ude1d\ud84b\udd34\\U00015695\\U00015734\\U000156ec\\U00015688\\U00015713\\U00015733\\U000156c5\\U000156a1\\U0001568e\\U000156a1\\U00015a13\\U0001574a\\U00015700\\U00015745\\U00015736\ud84b\udc3b\ud846\uded1\\U000156dd\ud835\udf5e\\U000156f3\\U0001569e\\U0001915d\\U0001568c\\U00015715\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([87647, 147305, 379748]),\n+                ),\n+                \"min_size\": 50,\n+                \"max_size\": 150,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8340434093480353},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xea\\xd8\\x9f\\xdf\\xae\\x87n\\x18\\x8d\\xa5\\x19v\\xe4Zp\\xc45\\x1e\\xa7O\\xf7\\xa2\\x85=A\\xba\\x8el\\xf0\\xca\\xb6\\x83\\x83t\\x81\\x93ip\\x8b\\xe9H\\xc2\\x1c7\\x12\\xe6&\\xb3i\",\n+            constraints={\"min_size\": 29, \"max_size\": 49},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.6642103690588143e307,\n+            constraints={\n+                \"min_value\": -1.528090656649312e-233,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.6642103690588143e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00a6\u00d2\u00b3\u00f8Cw\u00b4\\x15)j\u00f4'\u00b3\u00f4N\\x90\\x1a\\x12H\\x01\ud81a\udddd\\U00054522\u00db\u00c8\\x0e\u00ba\\U000de870\\npT;\\x84\u00e4F\u0100\\U000e2c92\\x9e\\U000cbce5\u00ed%\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [1, 275396, 336911, 491641, 649694, 716126, 761783, 1033655],\n+                    ),\n+                ),\n+                \"min_size\": 14,\n+                \"max_size\": 114,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.037218711238761866},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-95,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 72,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=16493,\n+            constraints={\n+                \"min_value\": 16428,\n+                \"max_value\": 35827,\n+                \"shrink_towards\": 0,\n+                \"weights\": {25234: 0.2756889158823387},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9243,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -10175,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3644925035040952},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u27ad\u2732\u2716\u2791\u27fc\\U000a78c9\u2786\u2726\u2773\\U000ca07e\ud864\udc3a\u278a\\U000c7c75\u27cb\u27d4\u271f\u2732\\U0004a198\u27ec\ud84a\udf0a\u2775\u2799\u2737\u27b3\\U000a342b\\U000ac879\\U000ce421\ud84c\ude01\u27e0\\U000b7990\u27bf\u27a8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([9999, 355616, 646217, 893777]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.702198094154429e307,\n+            constraints={\n+                \"min_value\": 1.3638779139707246e-185,\n+                \"max_value\": 5.983376509736781e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1076248420189678e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.4011969940346606},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"M\\x04\\xf6`\\xa6I6VN\\r\\x1e\\x07\\xb8\\x93\\x12\\xcccB0P\\x06\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=156_833_491_148_131_456_571_978_492_234_713_549_102,\n+            constraints={\n+                \"min_value\": 152_153_180_688_121_135_237_239_823_978_942_033_064,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u02e4\ud888\ude5e\u02cd\u13dd\u02e0\u02b7\\U000816ca\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [512, 65993, 140423, 220707, 439809, 684666, 1045825],\n+                    ),\n+                ),\n+                \"min_size\": 5,\n+                \"max_size\": 94,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\"\\t\\xa6\\x10X\\x8a\\xca)\\xf7\\xd4\\xfeS\\n\\x1e`\\x84C\\xcf>\\xc0\\x8e\\x9a&p=\\x042\\xc9*\\xbd\\x88z',\n+            constraints={\"min_size\": 17, \"max_size\": 117},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-6549,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 6954,\n+                \"shrink_towards\": -66,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u02f9\u0218\u0283\ud848\udd43\u021b\u026d\u02da\u024a\u02e0\u021f\u02d5\u0299\u0234\u0251\u0203\u02aa\u02db\u021a\u0209\u0264\u02de\u02b8\u0278\u023d\u020a\u022b\u0204\\U0007bb76\u0290\\U00075893\u025f\\U00010e20\\U0005f80d\\U000886ff\\U00071e1d\\U0005b330\u0279\u0200\u0227\u0225\u0209\\U000928d0\u02d2\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            512,\n+                            95509,\n+                            125979,\n+                            143881,\n+                            214112,\n+                            216981,\n+                            256784,\n+                            294288,\n+                            338868,\n+                            399910,\n+                            454167,\n+                            576372,\n+                            590400,\n+                            622224,\n+                            640478,\n+                            752537,\n+                            835616,\n+                            877657,\n+                            1087225,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 32,\n+                \"max_size\": 132,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1310\\x99\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"4\\x8b\\xc6\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=44148,\n+            constraints={\n+                \"min_value\": 23360,\n+                \"max_value\": None,\n+                \"shrink_towards\": -28506,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc6[\\xd1\\x89\\xdbK\\x83\\xd8\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u9518\u959d\u952b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            38079,\n+                            72683,\n+                            216838,\n+                            359035,\n+                            459542,\n+                            710514,\n+                            779796,\n+                            843354,\n+                            1080039,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-41347,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -30880,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=624375880,\n+            constraints={\n+                \"min_value\": 624370622,\n+                \"max_value\": 624385660,\n+                \"shrink_towards\": 0,\n+                \"weights\": {624375880: 0.5169808283410131},\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00090df2\\U000a790f\\U00090dd0\\U00093c5d\\U00090d2b\\U00090d03\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([593140, 729709])),\n+                \"min_size\": 6,\n+                \"max_size\": 106,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.2496793202924312e308,\n+            constraints={\n+                \"min_value\": 3.939139238842808e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.2496793202924312e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xda\\xb8hj`\\xff\\xcf\\xbc@R*@\\xdc\\xe0\\xfe\\xcbE\\x16\\x1d\\xc2?J\\xa2X\\x06\",\n+            constraints={\"min_size\": 18, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud83c\udc07\u02d7\u0251\ubeff\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([512, 190000, 836179]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-11_999_155_390_892_644_282_986_193_205_922_655_785,\n+            constraints={\n+                \"min_value\": -11_999_155_390_892_644_282_986_193_205_922_715_447,\n+                \"max_value\": 50_713_541_450_235_102_535_388_185_314_535_926_590,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    -11_999_155_390_892_644_282_986_193_205_922_714_408: 0.3428712779979775,\n+                    -11_999_155_390_892_644_281_740_831_870_790_683_508: 0.09505291712050365,\n+                    -11_999_155_390_892_644_269_169_541_273_263_629_732: 0.10103484919230382,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6058493981608687},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.5984319090054842e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.957238324833291e269,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.2666758996756954e277,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.7655601315129944e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"c\\xf1Z\\x8e1i\\xf4.\\xe22\\xfem!\\xd2\\x04\\x83O\\xc0X]\\x0c:\\xeb\\xf6M\\x0f\\x8eK\\xc50\\xf1\\xa4\\xec\\xdd\\x8a\",\n+            constraints={\"min_size\": 35, \"max_size\": 38},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8212411952412533},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\ue050\\ue074\\ue019\\ue033\\udfc3\\ue012\\ue016\\ue083\\ue070\\U000cf551\\U000a46b3\\udfc8\\ue048\\ue075\\ue06b\\ue069\\udfba\\ue009\\ue08d\\ue076\\ue072\\ue04c\\U0003c5d6\\ue039\\ue039\\U000d7cec\\udff4\\U000674c7\\udfd2\\ue026\\ue06f\\udfff\\udfd3\\ue05a\\udfc3\\udffe\\U000b2104\\ue024\\ue055\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            57236,\n+                            65535,\n+                            235653,\n+                            248561,\n+                            257672,\n+                            331983,\n+                            421904,\n+                            446665,\n+                            635752,\n+                            734368,\n+                            807096,\n+                            808292,\n+                            832722,\n+                            910836,\n+                            925998,\n+                            933104,\n+                            938271,\n+                            959519,\n+                            1085530,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 31,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -1.0358029430017039e-293,\n+                \"max_value\": 2.220446049250313e-16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0309384397868968e-143,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7646016500947504e308,\n+            constraints={\n+                \"min_value\": 2.4811832230009723e300,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.1739181363755933e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud885\udda5\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([202130, 395096])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"3\\x0f<\\xf1\\x02\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"j!cF~x\\x92y .+\\xdd\\xab\\xe8\\xe9\\x01+\\xacd\\xbc*\\x8fp\\xe1z\\xf9\\xe9G\",\n+            constraints={\"min_size\": 2, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"FD\\xea\",\n+            constraints={\"min_size\": 0, \"max_size\": 56},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=11850,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2117,\n+            constraints={\n+                \"min_value\": 19,\n+                \"max_value\": 24112,\n+                \"shrink_towards\": -77,\n+                \"weights\": {\n+                    7931: 0.027771475938127822,\n+                    20129: 0.0026936306768461063,\n+                    6188: 0.013098225052432673,\n+                    21609: 0.022033293533950053,\n+                    1024: 0.036261680088885646,\n+                    19: 0.022033293533950053,\n+                    5850: 0.0646727141529167,\n+                    23110: 0.018339468013199724,\n+                    2793: 0.06609921960304416,\n+                    10703: 0.01230302833960447,\n+                    15951: 0.027734488411419973,\n+                    17247: 0.0643204821476752,\n+                    13104: 0.01070262821634947,\n+                    13041: 0.03304994030092508,\n+                    9656: 0.020074840410390028,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1_282_171_534,\n+            constraints={\n+                \"min_value\": 1_282_171_510,\n+                \"max_value\": 1_282_171_540,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-576174641,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -576174553,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x06\\xbah\\xfc\\xaa\\x18\\x9a&y]\\r\\xadh}\\x1dk\\x04f/L\\xa5\\xa7\\xcc'\\x9b\\x94h\\xeaH\\xc9\\xbd\\x03\\x87}\\x84<\\xa9=\\x81\\x96\\xe0\\x14\\x9c\\x91:\\x14J]\\xaaD\\xb7\\x16\\xb5\\x03\",\n+            constraints={\"min_size\": 48, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.2723806366018591e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-2.3240591241775568e296,\n+            constraints={\n+                \"min_value\": -5.593537002674518e296,\n+                \"max_value\": -2494247012201861.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.890538053208719e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x19KM\\x06\\x82\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.939086051514331e243,\n+            constraints={\n+                \"min_value\": -7.58518084843723e-137,\n+                \"max_value\": 9.018893889042462e243,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.939086051514331e243,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.4077920598150623},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"81\\x93\\x9b\\t\\x80+$\\x81\\x14o<\\xf9\\x18z\\x0c:K\\xdd\\xdb\\x1d\\xd1\\x00~+\\xd6\\xbfA\\xd7\\x17\\xb66\\xde\\xc2\\xa1v\\xe8U\\xb3B\\xf1\\x8b\\xe7\\x92\\x14\\xf0\\xff8\\xcd\\xd5\\x89\\xe7I\\xfe\\xbd\\x96\\xca!\\xa7\\xd9!P\\xc9J'\\x85tC\\x88\\xc4G(\\x7f\\xa2\\xc9\",\n+            constraints={\"min_size\": 26, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.47184265973951256},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6532104567538412},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -6.238679403136833e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.668986915959111e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"2\\x1f\\xd3\\x10\\x0e\\xeb\\x84Mq\\xe0\\x0c\\x95\\xcf\\xce\\xf9A8\\xd9\\x90>LP\\x8c\\x7f\\xba\\xe5 T\\xe2)\\x98\\x9e\\x96B*-1\\x14M\\x07\\xc3\\xd5\\r\\x97\\x06{\\x8e\\x03\\x16@;\\xce\\xea&\\x9b\\xbdr\\t\\xc0Y\\xd8\\xe0\\xc1\\xfd\\xeb!\\xe8\\xfbZ\\\"\\xa3\\xdb\\xadB\\xb2|\\xc1\\x816(\\x93\\xe34\\x86\\x00\\xcd\\xa9\\xf5\\x0et2\\xebT\\xcd:\\xfe\\xa0\\xb0V\\x82\\xb5\\xf7\\x90k\\xf1r\\xfbl/\\x08\\xdaw\\x89\\x90\\x85C\\xb3\\x02\\x8e\\xd3\\xa8\\xfe\\x8b>\\xde'\\xe0u\\xc0\\xd2&\\xbb\\xa7\\x84\\x9b\\xa87+\\xf4\\xab\",\n+            constraints={\"min_size\": 40, \"max_size\": 140},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\n\\x8b\\x08\\x82\\xbb\\xf7a\\xa2\\xde\\xe9K\\xdd'\\x85g\\xe2\\xe4I\\xfb\\xbaSVRS[\\x86\\x89B:+\\xad\\xb9z\\xe4T2\\xd6\\x06\\xa8\\xfb\\xa1\\xbe10\\x96L\\xec\\xcd\\xbfNG\\xbe\\xa5[!\\x02\\x07\",\n+            constraints={\"min_size\": 39, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u209a\u20d7\\U000d5d86\\u206a\u201b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            8192,\n+                            127408,\n+                            154030,\n+                            220870,\n+                            347513,\n+                            386000,\n+                            776077,\n+                            907606,\n+                            918269,\n+                            1051562,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 9.080925887704557e-292},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-7,\n+            constraints={\n+                \"min_value\": -25518,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7696346442570123},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-136,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -90,\n+                \"shrink_towards\": 16,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"L7\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.220446049250313e-16},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 8.547343792809634e-79},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"hypofuzz.test_keys\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=323_320_286_546_906_247,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9997996438587835},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x1d\u00ca\\x95\\x86\\U00069802\\x8a\u00a7;hh\\U00074b2b(\\U0006c659\\x9a\\tx#\\x14\u00eb\u00f6\u00fd^=\\x87\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([1, 705566])),\n+                \"min_size\": 11,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.006126673298249898},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.2936862935236056},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xceO\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.2923474108788449},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\t\\xc2\\xc3q\\xaa\\xf4\\x80\\xfa[@\\x986\\xdb\\xba\\xdd[:+foI\\x05\\xf8\\x9c\\xd9a\\x16f$R\\xb8\\t\\x10'F\\xae\\xee\\x00gt\\xa7\\xe3\",\n+            constraints={\"min_size\": 41, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'o\\xc3\\xc1\"<\\xac\\xd5',\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4_423_434_277_873_985_345,\n+            constraints={\n+                \"min_value\": -4_423_434_277_873_989_186,\n+                \"max_value\": -30593,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    -4_423_434_277_873_955_213: 0.43396519300404324,\n+                    -4_423_434_277_873_985_345: 0.5629096959323228,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.030717349174357096},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0009fcc6\\U000a0361\\U0009fd32\\U0009fd06\\U0009fc75\\U0009fc87\\U0009fc85\\U0009fcc1\\U0009fd34\\U0009fcc2\\U0009fd0c\\U0009fce8\\U0009fd19\\U0009fcd6\\U0009fcfa\\U000bd11b\\U0009fcdd\\U000c27e8\\U000a4b1b\\U0009fcfa\\U000a7636\\U0009fcc6\\U0009fc64\\U000ac639\\U0009fd02\\U000b0950\\U000a371c\\U0009fd13\\U000c36e6\\U0009fcde\\U0009fcf0\\U0009fc5b\\U0009fc82\\U0009fca1\\U0009fc78\\U000be83d\\U0009fd3b\\U0009fc77\\U0009fd2a\\U0009fc4c\\U0009fc76\\U0009fd0d\\U0009fcf0\\U0009fc7d\\U0009fc53\\U0009fd3c\\U0009fca6\\U0009fd47\\U0009fcc7\\U0009fc83\\U0009fc49\\U0009fc54\\U0009fc73\\U0009fd1b\\U000b45cc\\U0009fd3d\\U0009fcc6\\U0009fceb\\U000b1c80\\U0009fc9f\\U000c2816\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([654408, 811600])),\n+                \"min_size\": 45,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x89\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"b\\x063\\xdf\\xf1\\xed\\x94\\xc1?\\xecZ\\xe0P\",\n+            constraints={\"min_size\": 9, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1613,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3117780524648786},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=13006,\n+            constraints={\n+                \"min_value\": 84,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"#\u00fb\\x01\\x10\\U0003f587!b\\x19,\u00af\\x8b\u00a8:WKxe\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([0, 382882, 405954, 803633]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-66,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud86c\udc2c\u01f6\u023e\u027d\u0212\u344f\ud85d\udc0f\u0225\u025b\u0221\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([404, 232672, 1006687, 1091259]),\n+                ),\n+                \"min_size\": 9,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=10272,\n+            constraints={\n+                \"min_value\": 9999,\n+                \"max_value\": 11469,\n+                \"shrink_towards\": -1872,\n+                \"weights\": {\n+                    10272: 0.35943585998799993,\n+                    11156: 0.5292847488824248,\n+                    10771: 0.0010783075799640001,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-15051,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -85,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3333333333333333},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9dk\\xf7ov5\\xef\\x86C\\xaa\\tA\\xc4Mk\\\\\\x02$\\xd7u?\\xacoD\\x02\\xaf7;\\xd8O\\x0f]\\xbf\",\n+            constraints={\"min_size\": 12, \"max_size\": 33},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=44,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 9999,\n+                \"shrink_towards\": -32143,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=27174,\n+            constraints={\n+                \"min_value\": 1024,\n+                \"max_value\": None,\n+                \"shrink_towards\": -102_701_867_248_475_206_839_127_045_817_750_209_285,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=30747,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0008e7cc\\U0008e82c\\U0008e860\\U0008e82c\\U0008e804\\U0008e912\\U0008e87e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([583575, 587470, 815935]),\n+                ),\n+                \"min_size\": 1,\n+                \"max_size\": 101,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4_478_665_526_379_221_776_507_226_780_401_604_492,\n+            constraints={\n+                \"min_value\": -16828,\n+                \"max_value\": 134_062_858_805_615_964_575_348_538_870_763_172_500,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1.514387577924097e-77,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1241191688371793e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"U\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-27207,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 4739,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=31911,\n+            constraints={\n+                \"min_value\": -16695,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.834294670120844e-130},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0166\u0145\\U00045011\u0210\u01bf\u0215\u015e\\U0003ca1c\u01e6\u01b7\u0152\u0218\\U00059a47\u0165\\U0004a102\u01d1\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [300, 9999, 174255, 194594, 243816, 314015, 350232, 707546],\n+                    ),\n+                ),\n+                \"min_size\": 10,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"g?eT\\x9d\\xde\\x0c4k\\x0f\\xd1?\\xf1H\\xb9C\\xaa\\x96\\xd6|\\x15\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.257796107061427e-47,\n+            constraints={\n+                \"min_value\": 3.9944229805039765e-254,\n+                \"max_value\": 6.503120813095893e-47,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.257796107061427e-47,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00052e72\\U00093d15\\U00052df6\\U00052ecb\\U00052ed8\\U00052e8a\\U00052e04\\U00052ebb\\U00052eea\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([339446, 793121, 827388, 969824, 1002813]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"wlm;\\xc5e+3\\xe4\\xab\\xb3<\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.14540403407949534},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"-%Y\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\uf56c\\uf57c\\uf592\\uf533\\uf4c5\\uf4f5\\uf595\\U0006ae9c\\uf549\\uf4f3\\uf54e\ud843\udc92\\uf57c\\uf5a9\\uf4ce\\U00011f89\\uf5a8\\uf527\\uf59b\\U000c10f3\\uf517\\uf4ea\\uf521\\uf514\\uf502\\uf4f1\\uf536\\uf4f4\\U0009e02c\\uf4d2\\uf4cd\\uf51d\ud84f\udd39\\uf5a9\\uf53b\\uf4d3\\uf4fa\\uf4ec\\uf5bf\\uf502\\uf4db\\uf4e3\\uf4ee\ud86d\udc34\\uf4ec\\uf59c\\uf564\\uf505\\uf4d4\\uf560\\uf4d5\\uf4d7\\uf52b\\uf4da\\uf4c7\\uf5b5\\uf549\\uf53b\\uf5b7\\uf4f1\\uf548\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([62659, 1037867])),\n+                \"min_size\": 34,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.37060069670933365},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7625544581482404},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xca\\xf2\\xd0\\xfe\\xc5U\\x88\\x15\",\n+            constraints={\"min_size\": 5, \"max_size\": 105},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=52238,\n+            constraints={\n+                \"min_value\": -67,\n+                \"max_value\": 141218175,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    41625: 0.05419077661520918,\n+                    52238: 0.21177452838274405,\n+                    13092926: 0.14898362916901536,\n+                    28937: 0.00022169245401650002,\n+                    41177: 0.07389748467216667,\n+                    136700284: 0.11684422196596868,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7603350952807445e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=349,\n+            constraints={\n+                \"min_value\": 300,\n+                \"max_value\": 355,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    349: 0.033286211385133956,\n+                    313: 0.5899362463805017,\n+                    305: 0.3540329120207369,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([255978, 841096])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-14_345_865_641_898_931_578_266_265_739_462_189_398,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -2412,\n+                \"shrink_towards\": 25290,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.968220196092981e16,\n+            constraints={\n+                \"min_value\": 4.746263326856673e-237,\n+                \"max_value\": 5.303964587206806e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.952784811493685e307,\n+            constraints={\n+                \"min_value\": 0.05,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.390485789210732e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3465037230722195},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xba\\x9b0\\xed$\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.99999},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=44_527_764_376_797_942_361_552_594_956_972_409_543,\n+            constraints={\n+                \"min_value\": 19358,\n+                \"max_value\": None,\n+                \"shrink_towards\": 12632,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xab\\x9b\\xda\\xf18\\xbd(\\x06\\xac\\xf3X&\\xb1|\\xd9\\x15\\x0fP] .\\x10S\\x91\\xeeu3cd\\xd20\\x8b\\x1a\\x82\\xb0\\xdb\\xec\\x7f \\x0eu\\\\]\\xe3\\xb15:\\x83H\\x95\\xe92\\xe7\\x96\\xa6\\x1b\\xfb\\x15\\xf2\\xf5\\x8d\\xa0\\x11];\\xa4d\\xbe\\x00\\xb1\\xffY\\x91\\x82\\xde\\xe0O;\\xf9\\x93\\x8d\\xe5.,\\x82=\\x11\\xb42\\xfa\\n\\xa0\\xe8\\x87\\xda\\x95\\xa6V\",\n+            constraints={\"min_size\": 32, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.36529650629087357},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=30893,\n+            constraints={\n+                \"min_value\": 26794,\n+                \"max_value\": 31678,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9775323735501262},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud85c\udc12\ud85b\udfec\ud85b\udfd5\ud85c\udc30\ud85b\udf6b\\U00071611\ud85b\udf93\ud85b\udf74\ud85b\udf90\ud85c\udc68\ud85b\udf6e\ud85c\udc17\ud85c\udc15\ud85b\udfcc\\U000fe3f2\ud85b\udf7d\\U000b5ac6\\U000555d7\\U00093da5\ud85b\udf93\\U00072706\ud85c\udc58\ud85b\udf7e\ud85b\udfcc\ud85c\udc36\ud85b\udf92\ud85c\udc62\\U00092338\ud85c\udc37\ud85b\udfbe\\U000b619a\ud85b\udfb1\\U00088076\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [159594, 168441, 305363, 746440, 861255, 1055142, 1104807],\n+                    ),\n+                ),\n+                \"min_size\": 31,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9404307851845637},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=232,\n+            constraints={\n+                \"min_value\": 101,\n+                \"max_value\": 1093,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000beccf\\U000dfd6a\\U000d69f2\\U000becb6\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([781436, 1001476])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.09214896107877603},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-40,\n+            constraints={\n+                \"min_value\": -11558,\n+                \"max_value\": 8509,\n+                \"shrink_towards\": -5150,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.316967110419035e16,\n+            constraints={\n+                \"min_value\": -2.391426188726552e77,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.167163345632913e-294,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([161980, 519010])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.43893313650484533},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=10120,\n+            constraints={\n+                \"min_value\": 10012,\n+                \"max_value\": None,\n+                \"shrink_towards\": 13353,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00070c99\\U000a2c64\u02d5\u0332\u028c\u0339\u02ef\u02d7\u026f\u033f\u0279\u034f\u02a2\u0320\u02ca\u027d\\U00064703\u02f2\u02e3\ud853\udd6f\ud840\udcd7\u02b7\u02b9\u0330\u0347\\U00019772\u02c3\u02b7\u0311\u02f9\u0291\ud853\udf81\u029c\\U000a50b7\u02c2\u02bc\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            621,\n+                            9656,\n+                            65801,\n+                            163724,\n+                            189256,\n+                            281411,\n+                            322390,\n+                            428347,\n+                            461277,\n+                            494779,\n+                            665060,\n+                            689791,\n+                            741924,\n+                            742299,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 26,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-8_705_245_029_204_127_277,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 3493,\n+                \"shrink_towards\": 3538,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=31,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 30752,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.5315646046651104e48,\n+            constraints={\n+                \"min_value\": -2.225073858507e-311,\n+                \"max_value\": 2.8033686130549095e48,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.248303281439905e47,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=11,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 21230,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=11509,\n+            constraints={\n+                \"min_value\": 110,\n+                \"max_value\": 13486,\n+                \"shrink_towards\": 77,\n+                \"weights\": {\n+                    7697: 0.10786458701075967,\n+                    9276: 0.004314978303707751,\n+                    7004: 0.05366462120994697,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 7.618358385499989e-259,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.5,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u016d\u0227\u0188\u0199\u01b9\u0182\u0224\u01f0\u0131\u01cc\\U0001ff58\u1c50\u0467\uadb7\u017a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([300, 160991, 557101]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=15192,\n+            constraints={\n+                \"min_value\": 15168,\n+                \"max_value\": 15192,\n+                \"shrink_towards\": -1_277_096_414,\n+                \"weights\": {15184: 0.3467945705103628, 15192: 0.3818258374069427},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7118371842531176},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u026a\u025e\u02ae\u0269\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([512, 510009])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x89\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -3.8019739944753176e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.7420445757369553e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6702138966783e308,\n+            constraints={\n+                \"min_value\": -5.2133393008115336e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.2119253784014055e-33,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"b\\x08\\x8e\\x85:6\\x99\\t\\tM\\x86-{\\x8a\\x02\\x1bD\\x1dh\\xee\\xbah\\xe6h\\xac\\xbf\\x16\\x8f$\\x0c>\\x11\\x13\\xb1\\xe6\\xd6\\xe0P\\x8f\\xc8\\xc4\\x08f.\\x8c\\x9ffF\\x8adI\",\n+            constraints={\"min_size\": 31, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud847\udf73\ud847\udee2\ud847\udf3c\ud847\udfbf\ud847\udf6b\ud847\udfb2\ud847\udfa9\ud847\udfac\ud847\udfaa\\U000671ee\ud847\udf4a\ud847\udf40\ud847\udf88\ud847\udf38\\U00056a6a\ud847\udfdf\\U0003dd8b\ud847\udfa0\ud847\udfdf\ud847\udf65\ud847\udfce\ud847\udf0d\ud847\udf37\ud847\udfa1\ud847\udeea\ud847\udf39\ud847\udf63\ud847\udf4d\ud847\udf2d\ud847\udf3e\\U0008aea4\ud847\udee3\ud847\udf00\ud847\udf0a\\U00059f4a\ud847\udf48\ud847\udf18\ud881\udc77\ud847\udf7d\\U00037ef9\ud847\udf89\ud847\udf13\\U000531bd\ud847\udfb9\ud847\udf10\ud847\udf97\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([138978, 321619, 335212, 588252, 693794]),\n+                ),\n+                \"min_size\": 20,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x12\\x97{\ud80c\udec8?8\\U0001963b\ud864\udfbd\u00fcF\u00a6\u21b0\u00d0\\x18;\\U0001502c\\x0e\ud864\udcdb6\u00e8\\x99\ud866\uddaa^\u9d2e\u00e9\\x16:\\x9cRqd!h\u00af\u00a5\\x1dc\u00d6\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1, 199467, 692914]),\n+                ),\n+                \"min_size\": 17,\n+                \"max_size\": 117,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000fe204\ud800\udc09\ud800\udc10\ud800\udc85\ud800\udc90\ud800\udc5b\ud800\udc42\ud800\udca9\ud800\udcda\ud800\udcf7\ud800\udc2b\ud800\udc2a\ud800\udc12\\U0007813e\ud800\udc36\\U00010078\\U00034113\\U00010078\\U00048f02\\U0007615f\ud800\udcd0\\U00053fb9\\U000fe9e8\ud800\udca6\ud800\udc3d\ud800\udc53\\U00100361\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            65535,\n+                            125897,\n+                            191629,\n+                            368668,\n+                            383284,\n+                            652983,\n+                            788356,\n+                            1074662,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 24,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0221\u0268\u02c0\u02b4\u021d\u0272\u0274\u021b\u0249\u0296\u5b28\u0222\u37af\u52cf\u028f\u02d6\u0262\u0254\u60ed\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([512, 35053])),\n+                \"min_size\": 14,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe8\\xa8\\xbf\\xa8\\x12N\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2_530_027_263_687_300_267,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u01e4\u018d\u0181\u025b\u0191\u0132\u01a2\u01d5\u01f3\u016a\u0217\u0187\u0182\u01d9\u0197\u01db\u01ce\u01ad\u02c7\u0149\u018a\u018c\u0201\u01bc\u0198\u0174\u01a1\u03e8\u018e\u0156\u01b6\u013b\u0214\u0161\u01bc\u0150\u01ff\u0222\u015a\u03e2\u01ae\u01b9\u0138\u017c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([300, 1024, 215538]),\n+                ),\n+                \"min_size\": 13,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1192,\n+            constraints={\n+                \"min_value\": 99,\n+                \"max_value\": 3298,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    512: 0.0031709579504801,\n+                    2122: 0.0009667455550878232,\n+                    2271: 0.0028383244525986475,\n+                    2059: 0.00016366632905634698,\n+                    3153: 0.003112166049610708,\n+                    1747: 0.00016366632905634698,\n+                    2117: 0.003273293847861128,\n+                    1692: 0.0014149254329704603,\n+                    2364: 0.003273293847861128,\n+                    695: 0.0012419497519860112,\n+                    1231: 0.0013614143386847712,\n+                    1020: 0.001499896603221707,\n+                    712: 0.0028571948603482314,\n+                    2141: 0.0005078598096907459,\n+                    778: 0.0004778965691559612,\n+                    2224: 0.003122343214991031,\n+                    100: 0.0022177394601707884,\n+                    2643: 0.0029810527625718994,\n+                    2739: 0.0006385488265651542,\n+                    300: 0.0007043588887298129,\n+                    202: 0.0028695305316257086,\n+                    1863: 0.0008387393860308331,\n+                    1848: 0.0024829358167567056,\n+                    1563: 0.0010911088603756463,\n+                    123: 0.0014385079521736666,\n+                    1058: 0.001711826835153127,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5373177242271915},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud861\ude1b\\U00082fbf\ud861\ude9b\ud861\ude71\ud861\udebc\ud861\ude35\ud861\ude2f\ud861\ude72\ud861\uddf0\ud861\uddf7\ud861\udeda\ud861\ude10\ud861\ude3f\ud861\ude5e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            165360,\n+                            183544,\n+                            263275,\n+                            271579,\n+                            313506,\n+                            494234,\n+                            512085,\n+                            603491,\n+                            660201,\n+                            665634,\n+                            837697,\n+                            883202,\n+                            915781,\n+                            917998,\n+                            936638,\n+                            1019485,\n+                            1024792,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9303268016354627},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1083,\n+            constraints={\n+                \"min_value\": 1024,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".worker_identity.\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2073,\n+            constraints={\n+                \"min_value\": -10923,\n+                \"max_value\": -43,\n+                \"shrink_towards\": -25140,\n+                \"weights\": {\n+                    -3129: 0.011422968314785282,\n+                    -10779: 0.01028827464082778,\n+                    -5075: 0.01861422613070068,\n+                    -59: 0.007761323397895276,\n+                    -3358: 0.015696150923864966,\n+                    -3814: 0.018426342441674383,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"DP\\xad\\xde\\xcf\\x856\\x9f\",\n+            constraints={\"min_size\": 7, \"max_size\": 107},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"%#\\xe2\\xa1\\\\\",\n+            constraints={\"min_size\": 5, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"~\\xd1\\xf43!\\x13\\xd2\\x88+#7P\\x90R\\xf9D\\x83,\\x8f\\xc5\\xd3\\xcc\\x04\\x82\\xe7\\x98\\xd3\\xcdl\\xbd\\xe7%g22\\x96$<\",\n+            constraints={\"min_size\": 29, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x11\\xe5~7\\xfd\\xc1HF\\x03-\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=2206,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 12233,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8192,\n+            constraints={\n+                \"min_value\": 5994,\n+                \"max_value\": 8398,\n+                \"shrink_towards\": 20194,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u38e3\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([14476, 530311, 558871, 637382, 979610, 1015286]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1158,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 113,\n+                \"shrink_towards\": 5070,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4_455_285_352_015_594_972,\n+            constraints={\n+                \"min_value\": 4_455_285_352_015_594_880,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.16138841587598843},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([1024, 459335, 1011760])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=474390145,\n+            constraints={\n+                \"min_value\": 474363260,\n+                \"max_value\": 1_090_366_813,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([270454, 353449, 544541])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0007ef55\\U0007ef1b\\U0007ef98\\U0007eea6\\U00080976\\U0007ef97\\U0007eeb5\\U0007eec1\\U0007eec4\\U0007ef7f\\U0007eec6\\U000808a8\\U0007ef13\\U0007ef85\\U0007ef64\\U0007fb04\\U0007eeb5\\U0007ef91\\U0007eeb5\\U0007eebc\\U0007f469\\U0007f970\\U0007eea8\\U0007ef6b\\U0007eee5\\U0007eeb3\\U0007eebd\\U0007ef26\\U0007ef9c\\U0007eea5\\U0007ef87\\U0007ef09\\U0007ef60\\U0007ef4f\\U0007ef24\\U0007eeb0\\U0007ef3a\\U0007ef35\\U0007eefc\\U0007eee4\\U0007ef22\\U0007ef30\\U0007eec4\\U0007eead\\U0007ef50\\U0007f36b\\U0007ef76\\U0007ef3d\\U0007ef52\\U0007f405\\U0007ef50\\U0007f026\\U000800df\\U0007eef6\\U0007eef1\\U0007f7a8\\U0007eee1\\U0007feb8\\U0007eea2\\U0007eed4\\U0007ef97\\U0007ef62\\U0007ef7b\\U0007ef89\\U0007ef45\\U0007ef5b\\U0007ef88\\U00080275\\U0007ef0a\\U0007ef56\\U0007eef4\\U0007eeae\\U0007eea5\\U0007eeb1\\U0007eef9\\U0007fb33\\U0007eec2\\U0007ef7c\\U0007eeb9\\U0007f9b0\\U0007eebd\\U0007ef70\\U000800f1\\U0007eefa\\U0007ef5a\\U0007ef51\\U0007eeac\\U0007eef4\\U0007ef12\\U0007ef22\\U0007eefb\\U0007ef83\\U0007eef8\\U0007ef61\\U0007ef26\\U0007ef73\\U0007eeaa\\U0007eec0\\U0007eea4\\U0007ef2a\\U0007eec9\\U0007ef21\\U0007eee7\\U0007eef6\\U0007ef7e\\U000801b5\\U0007eee6\\U0007ef58\\U0008010a\\U0007eeee\\U0007f71b\\U0007eebd\\U0007ef95\\U000802f4\\U0007ef01\\U0007ef70\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([519841, 527148, 1112137]),\n+                ),\n+                \"min_size\": 43,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5472539487114721},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.894296907537901},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa8OZ\\x93\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=807060689,\n+            constraints={\n+                \"min_value\": 807047829,\n+                \"max_value\": 807079533,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    807072715: 0.29075491734990566,\n+                    807051591: 0.1870331374644238,\n+                    807060689: 0.19700291695148592,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.17644440863344626},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=15662,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 24430,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 5.430127177134214e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.634027945507246e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-2.956937956293379e16,\n+            constraints={\n+                \"min_value\": -4.083226298341632e16,\n+                \"max_value\": -4459263320112308.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.956937956293379e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.19163397865653692},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u023a\u01fe\u0198\\U0004aa9e\u024b\u0239\\U0001aa1d\u01b9\u0237\\U0005595d\u01b9\u01a3\u0246\u0264\u0245\u01f9\u020d\ud853\udd19\u01fd\u027c\u0228\u0262\u025f\u0236\\U000d3fce\u0196\u019c\u0286\u01b5\u01ee\u01f0\u01c9\u028c\u01f5\u0267\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            404,\n+                            184337,\n+                            195828,\n+                            360021,\n+                            673658,\n+                            727218,\n+                            802886,\n+                            904787,\n+                            987081,\n+                            1050482,\n+                            1069192,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 19,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"6\\x08o\\xc0#\",\n+            constraints={\"min_size\": 2, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x99\\x8b\\xb8L\\x02\\xc0\\xa5\\x1e\\xbc!{\\xf7{\\xf4>Fh\\xe1\\x95l\\xdd\\x12P\\x84\\x0e\",\n+            constraints={\"min_size\": 21, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -1.7469898377108534e-144,\n+                \"max_value\": 1.7785431054639315e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.982443939819737e167,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u04d8\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([1000, 868565, 1079404])),\n+                \"min_size\": 1,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5221620981611713},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u90dd\u906d\u9108\\U00063909\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            36941,\n+                            138264,\n+                            200938,\n+                            266533,\n+                            389982,\n+                            421009,\n+                            611879,\n+                            636273,\n+                            921057,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 6.103515625e-05},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9889,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -20,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud84f\ude86\ud84f\udecf\ud84f\ude85\ud84f\ude0e\\U00086d0a\ud84f\ude2b\ud84f\ude03\\U000e7b3e\ud84f\ude27\ud84f\uddec\ud84f\ude3a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [146920, 503440, 508608, 676042, 943423, 1075236, 1105290],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9728246904607618},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"$\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            512,\n+                            91754,\n+                            93982,\n+                            157162,\n+                            272193,\n+                            427191,\n+                            479180,\n+                            525653,\n+                            559683,\n+                            636858,\n+                            649910,\n+                            657550,\n+                            728084,\n+                            759616,\n+                            766199,\n+                            767612,\n+                            781116,\n+                            801768,\n+                            849818,\n+                            884799,\n+                            919953,\n+                            1010899,\n+                            1049232,\n+                            1054977,\n+                            1094213,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.790912430140165e307,\n+            constraints={\n+                \"min_value\": 5.144694902615544e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.790912430140165e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe1\\xf5\\xcb\\xca&\\x8c\\xb6>\\x1d\\x91\\xbe_\\x86\\x07K\\x9e\\xe9#\\xc7\\x07\\x14L1\\x92x:\\xd4P\\x97\\xdcA58\\xfd\\xf8e2\\xa6M\\x02\\xbf\\xed\\x8d\\x9a\\xb8\\xc7\\tp\",\n+            constraints={\"min_size\": 15, \"max_size\": 115},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-6.481819271579974e211,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.2250738585072014e-308},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003822f\\U00038269\\U000381e2\\U0003828c\\U00038212\\U0004a0d6\\U0003820f\\U000381f1\\U0003829b\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([229793, 989248])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.8867333608604024e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 126827786828259.81,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\\\\\x87\\xee\\xf3\\x8f\\xb3b&O\\xcaF/\\xbcc\\xd6\\x94\\x02&\\xe4\\xc3@\\x9do\\xca\\x9bL\\xe9\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005d0a9\\U0005d018\\U000656df\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([380844, 624904, 749392, 832664, 908824]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud882\uddf5\\U000f928f\ud882\ude40\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([199107, 250324, 617217, 777231, 1004814, 1086466]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 20,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1a\\xed\",\n+            constraints={\"min_size\": 0, \"max_size\": 40},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\uefa6\\uefb5\\uef18\\uefca\\uefd5\\uef57\\uefd5\\uefb5\\uef25\\uef29\\uf009\\ueffb\\U00057b80\\uf001\\uefb1\\uf001\ud81b\udf52\\uefd9\\uefc3\\uef39\\U0006143f\\uef75\\uef86\\uefed\\uef72\\uefd6\\ueff9\\uef85\\uefe9\\uef1d\\uef92\\uefa2\\U000c1556\\uefe5\\uef4f\\uefc7\\U000d2439\\uefbf\\uef39\\uefb0\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            61203,\n+                            245132,\n+                            273043,\n+                            299662,\n+                            307247,\n+                            414831,\n+                            515604,\n+                            589219,\n+                            724255,\n+                            893463,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 39,\n+                \"max_size\": 139,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=66548,\n+            constraints={\n+                \"min_value\": 23981,\n+                \"max_value\": 2_068_598_835,\n+                \"shrink_towards\": 10903,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.99999},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000628ff\\U00067699\\U00062992\\U00062937\\U000629ba\\U00062920\\U000629b9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([403665, 451083, 807690, 810271]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=90,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 108,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd3\\xb5&j\\x1ao\\x0f\\xfa^h\\x03\\xdbB\\xc3\\x8f\",\n+            constraints={\"min_size\": 12, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=inf,\n+            constraints={\n+                \"min_value\": inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"(\\xc0\\x13!\\xca1I\\xf30\\xaf\\xc6\\x99\\xe3\\x95M\\xa0\\x8c9\\x0f\\x86\\x9f\\x15\\xfc\\x9byq\\xde\\xcf\\x11\\x91K\\xf75\\xec\\xa8\\xcb.\\xf2\\x95\\xedH\\x98f\\xe0\\x8f=\\x91\\xb4\",\n+            constraints={\"min_size\": 42, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 3.583507035551866e-07},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-108,\n+            constraints={\n+                \"min_value\": -9576,\n+                \"max_value\": None,\n+                \"shrink_towards\": -52,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.722680610120014e307,\n+            constraints={\n+                \"min_value\": 9818326670258226.0,\n+                \"max_value\": 6.811539803917573e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5e-324,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.1836652161971231},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"0v\\x13\\xfd\\x89\\xf8:\\x19m\\xe9\\xed\\xa9\\x87!\\x06\\xfcS@\\x8b>\\x1a \\xd2\\xc5k\\xedZ\\xc3e\\x19\\xb9\\x8a\\x9fJ\\x17\\r\\rG\\xea\\xb1\\x7f\\xde_\\x8b\\xb2\\xc5`\\xe8;\\x04\\xf3\\x95\\xf4\\x1a\\x18\\x8c(\\xa2_\\xc7*U\\xa2nu\\xb0\\x94v\\x13L6'<\\xb6\\xdd\\xc2\",\n+            constraints={\"min_size\": 27, \"max_size\": 127},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf4\\xcd]\\xde\\x16P\\x8d\\xc3kf\\xa46[\\x8a\\x14\\xf2@H\\xa7_\\xa3Y\\xe9\\xd1w\\xc4\\xaf\\x89\\x1c\\xb4I\\xf2\\x14\\x00\\xdbd\\xb0\\xcbz.I\\xecZr\\xd0[\\xed\\x8d\\xcd\\xa1\\x10p\\xa9G\\r\\xc2#!\\xaf\\xbdf\\n,\\x884^\\\\\\xba\\xedJ\\xc4\\x11e\\xec{\\x82*\\xe3\\xa9\\xf89\",\n+            constraints={\"min_size\": 23, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1193029110396022e16,\n+            constraints={\n+                \"min_value\": 1.5350263939340174e-222,\n+                \"max_value\": 1.5605241789407732e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.1193029110396022e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00080ab4\\U00080adf\\U00096629\\U00080b2c\\U00080aae\\U00080abf\\U00080a76\\U00080b05\\U00080b13\\U00080ad0\\U00080aa3\\U00080b3e\\U00097559\\U00080aa7\\U00080af1\\U00080b40\\U00080af0\\U00080a8f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([526966, 721295, 955765, 1114111]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"6\\xe4\\xd0\\xe4\\xb8+\\x95\\xab\\xf8\\x80\",\n+            constraints={\"min_size\": 8, \"max_size\": 108},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\u20cd\ud84e\ude96\u2014\\U0006f0e7\u2017\ud85f\udf51\u20c0\u2049\u20d5\\u206e\\U000d0b65\\U000eb596\u2023\\u20cb\\U0007a7f9\\u20fc\u20bf\u2026\\U0008e807\u205d\\u208f\u20ae\u2058\u201d\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            8192,\n+                            9999,\n+                            54556,\n+                            165197,\n+                            359414,\n+                            461527,\n+                            464640,\n+                            805499,\n+                            806578,\n+                            1041733,\n+                            1086646,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 15,\n+                \"max_size\": 84,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -6.741084408054647e16,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6.590726275159367e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xb7x}\\x1a\\x94V\\xc2k{M\\xc7Nt\\xf1\\xcaK\\x93\\xdfZ\\xfdc\\x93\\x9cqK\\x14\\xe2{\\x04\\x1d\\x85\\xb8\\x08`\\xc18z\\xd7\\xc9\\xa9\\xdd+\\x08\\xb6\\xa6\",\n+            constraints={\"min_size\": 42, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 3.584414017268518e-47},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.2142405118519602},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5.622958311841389e-228},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 8.395583354167788e-33},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000b618a\\U000b6211\\U000b617a\\U000b6177\\U000fa4a7\\U000b6212\\U000b6157\\U000b61e4\\U000b6220\\U000b6142\\U000b6217\\U000b6145\\U000b6146\\U000b619f\\U000b614d\\U000b61c8\\U000ed290\\U000b61fd\\U000b61c9\\U000b6216\\U000b6236\\U000b61e2\\U000c3a5b\\U000b6223\\U000b61d4\\U000fcb54\\U000b616a\\U000b6204\\U000b86df\\U000f2611\\U000b6195\\U000b617d\\U000b61f4\\U000b616b\\U000b6162\\U000b61e8\\U000b6150\\U000d4df7\\U000b61ac\\U000f3036\\U000b61e4\\U000b6229\\U000b6213\\U000b621f\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([745786, 1088372])),\n+                \"min_size\": 32,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.05,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0934598109628597e-246,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=17770,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 404,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 4.5909097565541784e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 7.288947457174167e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5063905096510503},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.3991330781640404e308,\n+            constraints={\n+                \"min_value\": 2.617313463486116e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.75080467541663e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8028047429765164},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1049,\n+            constraints={\n+                \"min_value\": 72,\n+                \"max_value\": 1882,\n+                \"shrink_towards\": -17353,\n+                \"weights\": {72: 0.22300833773647807, 854: 0.04898620188209657},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"j=l\\xf0U\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 0.99999,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.161495998282766e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=65535,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 13784,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.922486632035335e16,\n+            constraints={\n+                \"min_value\": -5.943304767260265e16,\n+                \"max_value\": 6.378098514277403e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.870082894872312e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9206,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 26687,\n+                \"shrink_towards\": 30730,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=286,\n+            constraints={\n+                \"min_value\": -66,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xda\\xb8hj`\\xff\\xcf\\xbc@R*@\\xdc\\xe0\\xfe\\xcbEW4Y\\x8c,\\x99\\x98|\\xc3\\xc6\\x1e\\x15\\x08\\xc3\\x01&\\x03\\x8d\\xcc@sH\\x01gb\\xbc#\\xae\\xe6\\xf5x\\xbdB0c\\xcc\\xb3\\x93\\xb1B\",\n+            constraints={\"min_size\": 17, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00035034\\U00035034\\U000350ad\\U0003500f\\U00034feb\\U00035006\\U00035095\\U0003507d\\U00035092\\U00034ff1\\U000350a3\\U00034feb\\U00035072\\U00035096\\U00035090\\U0003504d\\U0003502e\\U0003dacd\\U0003e97b\\U00035082\\U00037cfa\\U00034ffa\\U00035043\\U0003f032\\U0003852e\\U0003d215\\U00035062\\U0003508a\\U00035045\\U00034fe7\\U0003506a\\U00035050\\U000350bf\\U000350c3\\U00035018\\U00042841\\U00035005\\U000350b6\\U00034ff2\\U000437ba\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([217028, 285011, 1049352, 1067443]),\n+                ),\n+                \"min_size\": 26,\n+                \"max_size\": 126,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=32590,\n+            constraints={\n+                \"min_value\": 6147,\n+                \"max_value\": 34656,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.811849425850561e252,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.833670210778253e52,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\xa0\u00a5\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([0, 228703])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-2.719562319137304e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -5.699047342368644e-51,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.829135434423267e-304,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 62},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.3283610621507823e307,\n+            constraints={\n+                \"min_value\": 2.2250738585e-313,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 8.449472097094012e306,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000ea3647!\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            110591,\n+                            192250,\n+                            199876,\n+                            218713,\n+                            228882,\n+                            279754,\n+                            335609,\n+                            526915,\n+                            563256,\n+                            608864,\n+                            730807,\n+                            785916,\n+                            854062,\n+                            875837,\n+                            1018812,\n+                            1021437,\n+                            1092013,\n+                            1099725,\n+                            1106768,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"!~\u00bd2\u00db\\U000634a4\u00d6\\x85\\x82g\\U0007624b\\xa0\\U000b8def\\x98\u00d8\\U0008ac72\u00dc)\\U000a96e1\u00a1\u00ea\\U0008d6fcs\\U000970fd\\U00063fc3\u00dc\\U000a4317\u00ec\u00a4\u00d6i0\u00ea\\x89\\x90\u00fe\u00fa\\U00079792\\U00068d67\u11c8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            9999,\n+                            81705,\n+                            110208,\n+                            376282,\n+                            620006,\n+                            671427,\n+                            761513,\n+                            971764,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 22,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-353278855,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 13138,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"Y\\xa9\\xb2@$\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xdd\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0196\u021a\u0149\u01fd\u01ce\u01b2\\U00019e5b\u01d8\u01ae\u0196\u01b6\u0220\\U0005e5f0\u01cf\\U0007f3f7\\U00080277\\U00065074\u01fd\\U000984c5\u0212\u01b5\u018b\u01e7\u021e\u0203\u0164\u012d\u021a\u0202\u01d6\u01eb\\U0007bafb\u0134\u01f8\ud81f\ude8f\\U00070e40\u01ab\u0186\u01b6\u0131\u0217\\U00079316\u0188\u014c\u018a\u017b\u0179\\U0006eb1f\u0168\u0206\u01fb\u0181\u0225\u016a\u020d\u01e4\u01ee\\U00061b6c\\U0008d146\u021d\u019a\u0156\u0182\u01df\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            300,\n+                            14256,\n+                            65535,\n+                            69884,\n+                            77229,\n+                            143511,\n+                            242161,\n+                            242767,\n+                            370062,\n+                            370313,\n+                            385103,\n+                            425147,\n+                            444222,\n+                            660311,\n+                            672382,\n+                            731200,\n+                            881436,\n+                            882871,\n+                            917921,\n+                            979859,\n+                            1006584,\n+                            1026742,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 22,\n+                \"max_size\": 122,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.23025761850884058},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.6050381566220001e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003cdae\\U0004a653\\U00046f76\\U0003cdb2\\U0003cd33\\U0003cda0\\U0003cd52\\U00041e14\\U0003cd6f\\U0003f1ad\\U0003cd74\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([249093, 351680, 731674]),\n+                ),\n+                \"min_size\": 11,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u22c1\\U000cb1c2\u234d\u22a5\u2367\ud857\udd0d\u2335\u2325\u22a7\u22aa\u231e\u22b8\u2307\\U0007d6c4\u2335\u22fa\u22c7\u22b4\u22c5\u2367\\U00075309\\U0003b609\u2332\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1000,\n+                            1024,\n+                            8852,\n+                            91709,\n+                            100020,\n+                            101397,\n+                            127671,\n+                            183801,\n+                            225469,\n+                            629969,\n+                            701300,\n+                            839862,\n+                            865303,\n+                            1077697,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 12,\n+                \"max_size\": 112,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"o\\x8d\\x8b\\x1doUz:n\\xce\\x81\\x9b\\xa2\\xdf\\x16g\\xcf\\x16I\\xef0\\xb5\\xc9\\xe3e+~Fo\\x81Q'\\x8e\\xc2\\xd5\\\\\\xf8;\\x95\\xadR-\\x13<0`p\\xa0|\\xd8+U\\x12\\x99\\xe3HT\\xe2\\xc4%\\x18hQ\\x0e\\xf6\\xef/\\xcb3 \\xf4\\xa1\\xdf\\xbd\\x96|\\x05\\xc6\\x0b\\xff\\x90\\xd6c\",\n+            constraints={\"min_size\": 44, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=35121,\n+            constraints={\n+                \"min_value\": 512,\n+                \"max_value\": 65535,\n+                \"shrink_towards\": -32,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.821165887289824e307,\n+            constraints={\n+                \"min_value\": 6.187373388051347e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.821165887289824e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 6.758041167055536e-68},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7386682475434175},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.4131686709314698e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.7564091335166683},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.7626369661532825e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=110,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 13,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8d\\x05\\xf0\\xff\\xb1L\",\n+            constraints={\"min_size\": 2, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1_000_129_557,\n+            constraints={\n+                \"min_value\": -1_000_187_059,\n+                \"max_value\": 114,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"c\\xca\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8892447415029019},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9263629155911441},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u5891\u58c7\u58cc\ud85d\udd12\uae71\u581c\ud858\udd3f\u5846\u5884\u585f\u580f\u580e\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([0, 1, 22542, 210538, 363146, 421077, 925170]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9474,\n+            constraints={\n+                \"min_value\": 1000,\n+                \"max_value\": 13812,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9f\\x94\\x90\\xd2\\x19\\x06\\x07D\\xf03h:L\\xac\\xaa\\xde\\xef\\xecOa\\xf3\\x0fPK\\xf5\\x88\\xb4\\xd3\\x1f\\xf0\\xec`\\x1b\\xce\\x17\\xbc\\x97^\\xf9y\\xbb\\xfa`\\x1dA@\\x0f\\xb9H2\\xd5\\xd9\\xd1\\xcf\\xf0\\x9a9p\\xf3\\xcf%r8\\xb3\\xad\\x94\\x93\\xf9`\",\n+            constraints={\"min_size\": 39, \"max_size\": 139},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6.376545501938398e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"Y\\x1d\\x05\\xb2\\xf3\",\n+            constraints={\"min_size\": 0, \"max_size\": 57},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud821\udcbc\ud821\udc7c\ud821\udccc\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([99376, 370851, 459012, 509564, 1055950]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.4614480769552023e308,\n+            constraints={\n+                \"min_value\": -5.261248310776152e-204,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.3710249452247186e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9490,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa0\\xe2GE\\x94\\x9c\\xe1\\xbf\\x14\\xfd\\x9bn+6\\xa1cA\\xb8\\xe9&\\x81\\x1b\\xeb\\x9d\\xe7\\xef}Q\\xc8\\x9c\\xff\\xac\\x01YB\\x16HB\\xb2\\xef,Z\\xe0Z\\x9f\\x08\\x91\\xee\\xb2\",\n+            constraints={\"min_size\": 31, \"max_size\": 131},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([190914, 204481, 223903, 524956, 1085924]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x0e&\\xfb\\xa3S\\x87\\x9f\\\\\\x8d\\x00c\\xdew\\xc60U\\x01Kl\\x0e\\xdb\\x8e\\xc8mo\\xf8D|\\x0b\\x1e\\xe3\\x81y>U\\x1c\\xd2P.<\\xcek\\xc7\\xc4e\\x11\\x89;F\\x06*y\\xf9\\xb4\\x96\\xa20\\x80\\x1a;\\xbf\\xaf\\xca\\xef\\x84\\x00\\x90}\\x88N.\\xcet\\xa9\\xb2\\xcb\\xca\\x02E3M \\xb9\\xdf0\\xb6\\x88\\x15\\xbd\\x8d\\xfe\\x0c\\xaf\\xa8\\x8b\\x87\\xd5\\xc9\\xde\\xe3c\\xb2\\xbc?\\x08\\x1ew@\\xe2\\x01l\\xb0\\xac\\xc3#\",\n+            constraints={\"min_size\": 30, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"C\\xf3\\xaf'\\xcd\\xa4{\\xd7\\xd3\\xa1b\\x12\\x10Qq\\xe4J@}=\\xc49\\xfd]\\xd1_\\x88\\x99\\x89\\xfa\\xbb=\\xfd\\x1eWb\\x938\\x8c\\x1a|\\x8bC$\\x93\\xfc'k\\xe5\\xec.oY\\x15\\xf9\\x18)\",\n+            constraints={\"min_size\": 24, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.1417603945515787e-154},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=22565,\n+            constraints={\n+                \"min_value\": 22506,\n+                \"max_value\": 22598,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xce\\x8d\\xe8\\n\\x01r\\x14\\xc7R\\xc9WT7\\x10%n\\xb0v\\x8ak\\xb5\\xaf\\xd0\\xcaUp\\x97\\x0f&\\xc4\\xa6-W^\\xb4i\\x1ae\\x14q\\xb0J\\xb3\\x14\\xc2\\x14z\\xffbn\\xb8\\x00t\\xb6\\x08}\\xd8\",\n+            constraints={\"min_size\": 30, \"max_size\": 57},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.37201846583698545},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.47904033155078285},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa8OZ\\x93\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.4134328429087336e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd6\\x04\\xd6G\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=62301,\n+            constraints={\n+                \"min_value\": -114,\n+                \"max_value\": 155077423,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=26126,\n+            constraints={\n+                \"min_value\": 26025,\n+                \"max_value\": None,\n+                \"shrink_towards\": 1991,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xb0\\xe8:;2u2|\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-361_714_109_967_703_535,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe1\\x1e_\\xb2(\\xe7\\x87\\xf2\\xf6^\\n\\xd1H_~X1\\xba-\\x0f9\\xeb\\xcc\",\n+            constraints={\"min_size\": 3, \"max_size\": 103},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5422788837884377},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xb5E\\x92\\x07+\\xc9\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-31486,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 7.165662275251018e-129},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([288437, 320913, 373435, 992151]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\ueefa\\ueebe\\uef5a\\U00039569\\uef3f\\ueeab\\uef79\\U00046e6f\\U0007231a\\uef66\\U0007c883\\uef6c\\U0009595f\\ueed9\\uef95\\ueed8\\uef83\\U000a9c8e\\uef1f\\uef89\\ueeb3\\uef85\\uef54\\uef8c\\ueef8\\U0001ec11\\ueebd\\ueed3\\uef90\\uef91\\U0009c853\\ueeae\\uef6d\\uef10\\U00071560\\uef56\\ueeef\\uef42\\ueebc\\ueecd\\uef07\\ueec4\ud86c\udc8d\\uef0a\\U0008a57d\\ueea0\\uef8d\\U000a9ab8\\U00047264\\uef16\\ueea8\\uef56\\ueee5\\uef46\ud854\uddaf\\uef41\\ueec0\\uef85\\ueef5\\uef83\\uef26\\uef36\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([61088, 344456, 419448, 814445, 889861]),\n+                ),\n+                \"min_size\": 37,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud87e\udc98\ud87e\udc54\ud87e\udc1e\ud87e\udca4\ud87e\udc3f\ud87e\udc57\ud87e\udcc3\ud87e\udcde\\U00039a92\ud87e\udd0a\\U00042719\ud87e\udcb9\ud87e\udcf4\ud87e\udce3\ud87e\udd1b\\U0003dd90\\U0005e1a7\ud87e\udc89\\U0006eba6\ud87e\udc45\ud87e\udc41\ud87e\udc64\ud87e\udd15\ud87e\udc1e\ud87e\udcc7\ud87e\udca0\\U0003c783\ud87e\udcc6\\U00059b2a\ud87e\udc33\ud87e\udcad\\U00074ce9\ud87e\udc8c\\U00060501\ud87e\udce8\ud87e\udcef\ud87e\udd06\\U000681d2\ud87e\udcdb\ud87e\udd08\ud87e\udc99\\U0005862c\ud87e\udc5d\ud87e\udd0e\ud87e\udc53\ud87e\udcf9\ud87e\udd0c\ud87e\udc77\ud87e\udc9e\ud87e\udd10\ud87e\udcf3\ud87e\udcab\ud87e\udd03\ud87e\udc65\ud87e\udcb6\ud87e\udcac\ud87e\udc24\\U0007ec01\\U0006e43d\\U0007210f\ud87e\udc82\ud87e\udd0d\\U00060334\ud87e\udcbf\ud87e\udc4e\ud87e\udc69\ud87e\udc90\ud87e\udc41\ud87e\udc3d\ud87e\udc54\\U0007223f\ud87e\udcda\\U0005d699\\U000469f1\ud87e\udcc6\ud87e\udcaa\ud87e\udd17\ud87e\udc3f\ud87e\udcf0\ud87e\udc6c\\U00045d96\ud87e\udceb\ud87e\udcfe\\U0006ee88\\U00079ea2\ud87e\udc7a\ud87e\udc5a\ud87e\udd11\\U000693c1\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([194590, 528156, 1086612]),\n+                ),\n+                \"min_size\": 30,\n+                \"max_size\": 130,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.2964478887520286},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3703795035813205},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"R\\\\(f\\xa5$T\\x00\\xbd\\x9b\\xa7E\\xb1\\xc7\\xc3l\\xae\\x0f\\x00\\xdcJ\\x055\\xbb\\x98\\xee\\xc0\\x94\\xdao\\xbfc\\x0b\\x9fz%J\\xc4\\xc4\\x8b\\x80\\xe7\\xb1N\\xeakK\\x8c\\xa04myQ\\xcc\\xc5p{\\x1dK'Qj\\x10\\x80\\x06\\xac\\xb9\\xf5r,\\x9b\\x84\\x87\\x1e/Y\\xc8\\xf5|~\\xa1:\\xf6\\x83\\x9d\\x95\\xedKB\\n\\xd5(?\\xbb\\xafGL'C\\xfa>`Q\\xa94\\xde\\x1b\\xb6u\\xc6\\x96\",\n+            constraints={\"min_size\": 32, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-6.695258672425109e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9373661717694996.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 3.4510405446539836e-147},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-24124,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x7f]\\x9f\\x91<}B\\x0e\\xcd\\xdb\\xb1`\\x1e\\xa8\\xf8\\xb6\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005ce2f\\U0005cdcb\\U0005cdef\\U0005cd81\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [380216, 410885, 670547, 925619, 975803, 1038483, 1080166],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud83c\udffb\ud83d\udc4d\ud83c\udffb\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([99780, 250974])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.1268697148095036e16,\n+            constraints={\n+                \"min_value\": -5.370585927683866e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.458281207358579e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0725\u0805\u0803\u080a\u077a\u07c9\u073d\u07ae\u07c2\u07b0\u0807\u07d5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [1820, 124816, 370998, 545443, 837107, 896293, 1024504],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 12,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 5e-324},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003fe1d\\U0003ff13\\U0003fec8\\U0005ef75\\U000530df\\U00078160\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([261654, 630713])),\n+                \"min_size\": 4,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x08\\xa3]\\x1b\\x8d\\x0f\\xda8\\xc0\\x04\\r\\x7f1\\x02\\xe1\\x87A\\xeb\\x938\\xc8\\xb5\\xfbrs\\xd7\\xf4J\\x84\\x80f!\\x08\\x7f\\xba\\x90\\xf0\",\n+            constraints={\"min_size\": 17, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=937,\n+            constraints={\n+                \"min_value\": 880,\n+                \"max_value\": 974,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.386957668056769e307,\n+            constraints={\n+                \"min_value\": 5.236540683158362e16,\n+                \"max_value\": 1.08765171459569e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.5517273297113074e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u00c9\\x05\u5d59^)\u00b0\u00d0\u00f7\u00b1\u3c64\u4de3\\x1eL\u00a6\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([0, 41475])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=182,\n+            constraints={\n+                \"min_value\": 123,\n+                \"max_value\": None,\n+                \"shrink_towards\": -3253,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.20037482208397e307,\n+            constraints={\n+                \"min_value\": 3.6763681089367885e17,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.20037482208397e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 7.352778877130698e-302},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-23828,\n+            constraints={\n+                \"min_value\": -29475,\n+                \"max_value\": -18700,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.07734610731667414},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.5,\n+            constraints={\n+                \"min_value\": 0.5,\n+                \"max_value\": 8.465287728946187e307,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"Oz(\\x87W\\x84PO\\xe5\\xf9\\xa4y\\xdb\\x9b\\x7f\\xeaf1z1\",\n+            constraints={\"min_size\": 14, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.282853953672881e308,\n+            constraints={\n+                \"min_value\": -6734051774982975.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.282853953672881e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"*e\\x07\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003bed1\\U0003bf1c\\U0003beb8\\U000f5708\\U0003beab\\U0003bf2d\\U0003beea\\U0003bf7d\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([245395, 570142, 963887, 1095764]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u6ad7\u6a58\u6a20\u6a40\u6af3\u6a3b\\U00056f96\u6a5a\u6a59\u6a77\u6a41\u6ab4\\U000412e5\u6a86\u6a8f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([27158, 392983, 849388, 1016815]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 18,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=24358,\n+            constraints={\n+                \"min_value\": 58,\n+                \"max_value\": None,\n+                \"shrink_towards\": 124,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([900255, 934424])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.3119628579469485},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.8090760929831796e144,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 7.15156177321176e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.175494351e-38},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000cdabc\\U0008eb18\\U0007b23f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            300,\n+                            404,\n+                            213660,\n+                            423216,\n+                            431444,\n+                            608654,\n+                            609239,\n+                            655130,\n+                            806084,\n+                            994253,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.1672910183030261},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8782593945984869},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.370702715461061e42,\n+            constraints={\n+                \"min_value\": -7.207191753307855e-111,\n+                \"max_value\": 9.322009070383493e42,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.370702715461061e42,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa6\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004feb3\\U0004ff3a\\U0004fefc\\U0004ff60\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([327283, 382693, 514374, 524080, 577910, 875101]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 65,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"EI\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.36847213857052014},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-2.2648956332005428e290,\n+            constraints={\n+                \"min_value\": -2.2648956332005428e290,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.3033416112432908e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.752999161830691},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.203591023524502e308,\n+            constraints={\n+                \"min_value\": 9.652376790098664e-103,\n+                \"max_value\": 1.2697150282371303e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.134733185431798e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9559175367967061},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -5.597417156563981e16,\n+                \"max_value\": 8.430413947042402e132,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.969745877289514e132,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.621076448865923},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-31882,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3479972198210764},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=10845,\n+            constraints={\n+                \"min_value\": -27385,\n+                \"max_value\": None,\n+                \"shrink_towards\": -13201,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6033656915271694e308,\n+            constraints={\n+                \"min_value\": 4.541817519734147e218,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.1768482387350787e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ua292\ua266\\U0009abe0\ua1f1\ua227\ua24b\ua260\ua207\ua1bf\\U0008727a\ua205\ua1cb\ua2a0\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            41381,\n+                            65535,\n+                            108427,\n+                            128152,\n+                            552254,\n+                            559064,\n+                            574096,\n+                            634027,\n+                            888472,\n+                            895224,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 4,\n+                \"max_size\": 104,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud876\udf14\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([186938, 239793, 341193, 440604, 858524]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"c\\x14\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.8133073562651548e258,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"&#x\\xf3\\xb7\\x96\\x9e\\x18\\x89+\\x14\\x15\\xf4\\x90\\xe5h~\\xd7\\xa9\\xb2\\x81\\xe7\\r\\x83n\\xff\\x9d\\xcamz_p$\\x18;\\xaf\\x96:\\xc5\\xa6\\xbf\\x8cr\\x8f&\\x91aq\\xa4|f\\x18\\x7f\\xed\\xce>\\xf5m\\x04\\x8fS\\x92\\xb8\\xd2z\\xa6\\xed\\x14\\x0bRy\\xc9g\\x18E\\xbc{\",\n+            constraints={\"min_size\": 39, \"max_size\": 139},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u5b00\u5ae7\u5a8d\u5b7c\u5a94\u5b48\u5b53\u5b29\u5b25\u5aef\u5b75\u5ab1\u5ae1\u5b82\u5b02\u5af8\ud865\ude70\u5a8c\\U0001b5e7\u5ae2\u5aa9\u5aa3\u5ae7\u5b66\u5b68\u5ab3\u5aef\u5b4f\u5b1b\u5aaa\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([23171, 213972, 473136, 552701]),\n+                ),\n+                \"min_size\": 27,\n+                \"max_size\": 127,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.1277035851221837e308,\n+            constraints={\n+                \"min_value\": 1.9466139714724282e62,\n+                \"max_value\": 1.2944587182725656e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.5080677726009723e304,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5929288523406852},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=23739,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -20468,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u2759\u2ee9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            9999,\n+                            25015,\n+                            51024,\n+                            65535,\n+                            111483,\n+                            119199,\n+                            167968,\n+                            294935,\n+                            358837,\n+                            433524,\n+                            441065,\n+                            500280,\n+                            670111,\n+                            686815,\n+                            803110,\n+                            857344,\n+                            928445,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([17071, 583327, 788469, 873974]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([412795, 925640])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-17195,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 26970,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud811\udc25\ud811\udcc6\\U0004caf9\\U00062f3c\ud811\udc05\ud811\udc5c\ud811\udc6e\\U000143f7\\U000f207f\ud811\udc94\\U0010be68\\U000b878f\ud811\udc49\ud811\udccc\\U000143ee\ud811\udc04\ud811\udc0a\\U000caaa0\ud811\udc27\ud811\udccf\ud811\udcb0\\U00040054\\U00016174\ud811\udc03\ud811\udc24\ud811\udc1a\\U0006ab04\ud811\udcac\ud811\udc6d\ud811\udcaf\\U00067fa4\ud811\udcb4\ud811\udc88\ud811\udc8a\ud811\udc51\ud811\udc03\ud811\udc5c\\U000b77bb\ud811\udcba\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([82909, 669044, 730190, 926398, 928074, 1110091]),\n+                ),\n+                \"min_size\": 30,\n+                \"max_size\": 130,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.212061205213616e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=18929,\n+            constraints={\n+                \"min_value\": 18872,\n+                \"max_value\": None,\n+                \"shrink_towards\": -8182,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x8a\\xe6\\xb5\\xdc\\xf5k^]\\x88f_\\x06\\x8c\\xc2\\xd7\\xf3\\xfeb\\xed8\\xf0\\x9e\\rc=+\\xf2\\x87%!;\\x97\\xfa\",\n+            constraints={\"min_size\": 28, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xde\\xf8\\\\\\xddL\\xa97\\xa76((1\\x9c\\x0f\\x97\\xd2\\xc0\\xce\\xc0\\xa6\\xc3\\xbd\\xd5#\\x9e\\xb3\\xa68\\xf1`\\xbd\\x89,\"\\xf6\\xeau|tU\\x8b\\x0e\\xa4\\xecZ\\xf8:\\xba',\n+            constraints={\"min_size\": 44, \"max_size\": 144},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd1(\\x9c\\x8c.\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'J\\x9c\\x07\\x9f\\xa7\\xd35\\xfaA\\x0ce`\\xa4\"\\xfd\\x14v\\x01\\xfe\\x85\\xfe\\xee>\\x06\\x12\\xff(\\xe8\\xd7\\xd0\\x99\\x87\\xeaf\\xf8\\xd4\\xa7\\xe1\\x06\\x90\\xc3\\x18\\xa3\\xf8~!\\xe0\\x81>\\x1eh\\x81\\x86x\\x83\\xa8\\x85\\x05\\xf1\\xe0\\xee\\x94\\xb1+\\xd3H9zn\\xd0\\x82\\xa9a\\xcf\\xb1O\\xb8KR0U\\x94@\\xb9\\xa2\\xb4\\x01\\x98\\xd9p#\\xeb\\x12U1\\xf9$\\xf6aJ\\xc4\\x03W\\xc3\\x19\\xf2\\x92\\x1e{1\\xbde(X\\xaf*\\xc6_MY:\\x9f#\\x1f8\\x80*3\\xb8\\xbd\\xd1F\\x1e\\xf7\\xbe\\x8e\\xef',\n+            constraints={\"min_size\": 37, \"max_size\": 137},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([404, 464661, 566884, 808225])\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=26816,\n+            constraints={\n+                \"min_value\": 20113,\n+                \"max_value\": 49941,\n+                \"shrink_towards\": 27905,\n+                \"weights\": {\n+                    48735: 0.03412318359733015,\n+                    42488: 0.00526050721324164,\n+                    48410: 0.006918938426079491,\n+                    45631: 0.005410211893814758,\n+                    26816: 0.09120925403281198,\n+                    33322: 0.048577029416865376,\n+                    45133: 0.09548146176477568,\n+                    29571: 0.05837928726136919,\n+                    32439: 0.09548146176477568,\n+                },\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7_413_811_329_298_863_472,\n+            constraints={\n+                \"min_value\": 7_413_811_329_298_841_500,\n+                \"max_value\": 7_413_811_329_298_865_091,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    7_413_811_329_298_864_454: 0.022550701363950366,\n+                    7_413_811_329_298_865_091: 0.022921729816005865,\n+                    7_413_811_329_298_861_930: 0.010333472013316148,\n+                    7_413_811_329_298_863_746: 0.010641065648953594,\n+                    7_413_811_329_298_849_185: 0.02642022381210617,\n+                    7_413_811_329_298_852_269: 0.054637657003237965,\n+                    7_413_811_329_298_864_055: 0.03382605204592555,\n+                    7_413_811_329_298_853_943: 0.03571234000109553,\n+                    7_413_811_329_298_845_358: 0.034869566824385446,\n+                    7_413_811_329_298_865_090: 0.011763067057191365,\n+                    7_413_811_329_298_861_005: 0.06048463987132769,\n+                    7_413_811_329_298_856_154: 0.05215137130844501,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.3337332478288428e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=27_688_257_971_158_535_396_459_954_511_144_147_945,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 157_910_273_150_749_289_015_878_782_573_978_347_962,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud81e\udcbd\\U00089f06\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            96268,\n+                            180099,\n+                            209744,\n+                            230547,\n+                            233651,\n+                            236515,\n+                            317528,\n+                            436015,\n+                            486485,\n+                            574853,\n+                            684475,\n+                            865510,\n+                            888638,\n+                            942607,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 93,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 6.103515625e-05},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.455675723574742e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.2010863650481792e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-6389,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -6298,\n+                \"shrink_towards\": -9566,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.17969406936546142},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0157\u0141\\U000c97b8\u0139\u022b\u01c8\\U00085606\u01f6\u0160\u01b7\u0162\\U00065b93\u0156\u01fb\u012c\\U000c452b\u01bb\u0202\u0203\u01ff\\U000f4cfc\\U000d4658\\U000571f3\u01cb\u021a\u019c\u01f2\\U00063352\u01ae\u01b0\u01ba\\U001007bc\u01a2\u0174\u01a8\\U0005e77b\\U0010198f\u021c\u021f\u019d\u0197\\U0005f175\u01a0\u01a1\u0171\u0168\u013c\u012c\u020a\u0156\\U000f07c9\u021a\u01e5\u0202\u0148\u020f\u0137\u020f\u016d\u0190\u01df\\U000e2506\u017e\u01dc\\U000e7b6b\u021f\u0135\u01cf\u01bc\u0150\u0191\u0178\u0217\u018d\u01aa\u01f4\\U000a881d\u01ab\u01f2\u0140\u01bb\\U00083108\u021d\\U000e4d8d\u015b\u013b\u013b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            300,\n+                            72720,\n+                            132827,\n+                            146928,\n+                            197292,\n+                            269555,\n+                            329086,\n+                            374664,\n+                            381873,\n+                            453338,\n+                            536795,\n+                            636024,\n+                            644519,\n+                            874175,\n+                            924599,\n+                            1086794,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 36,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.49970218214761053},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": 4.65401306523624e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.7976931348623157e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u6893\u68d2\u6932\u688c\\U00052772\u68e1\u68c2\u6879\u6933\u68dd\u68ea\u6928\u68e8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([26710, 644949, 762715]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-15717,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -57,\n+                \"shrink_towards\": 20746,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.0886481887498587e-97},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xc8\\x85E\\x0b\\xe2\\xe9\\xe3\\xb1\\xf4f\\xa19T\\xdd\\xd1;\\x1c\\xb5\\x8c\\'\"\\xad\\xc9F\\x90;\\xc8\\xf0#{\\xba\\x98\\xcbu\"\\xf5\\x1aB\\x13\\xc3B\\xbf\\xba\\xcb\\x17\\xff\\xef\\xe6l\\x94\\x19\\xc7\\x9e\\xeb{\\xca\\x19\\xb4\\xe9\\x81\\xa2\\x99\\xe4\\x9aS&\\x85\\xe0\\xc0:D8\\x15j1\\x0b-\\xb6\\x90\\xadbb;z_\\xb51\\xd0yM\\xd22\\xa8\\x9e\\x90D\\x12\\xb7\\xb4k\\xa0\\xd5\\x8c\\x97\\xa7\\\\\\xee\\x8c\\x89',\n+            constraints={\"min_size\": 49, \"max_size\": 149},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"A\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.1121719950597567e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6306951782536995e307,\n+            constraints={\n+                \"min_value\": 0.5,\n+                \"max_value\": 1.941756138819907e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.4223686524822265e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-5.504183168514217e16,\n+            constraints={\n+                \"min_value\": -6.055381452251038e16,\n+                \"max_value\": 4.086113591975723e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.4579433072248552e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=144_287_883_967_936_523_573_557_943_432_733_162_168,\n+            constraints={\n+                \"min_value\": 512,\n+                \"max_value\": None,\n+                \"shrink_towards\": -52,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1f\\xf3\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.225073858507203e-309,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=89,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 110,\n+                \"shrink_towards\": -4_787_960_517_572_314_799,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=17787,\n+            constraints={\n+                \"min_value\": 8192,\n+                \"max_value\": 25901,\n+                \"shrink_towards\": 93,\n+                \"weights\": {17787: 0.3374219222703515, 23692: 0.24736859128121033},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x8eEP\\xa4w\\xbb2\\xf2\\xd5\\x8fF\\x97D\\x94\\x0b\\x0f\\\\.}\\xc7\\rB\\x02\\xd6\\x96 S\"\\xfd\\xbaN\\r\\xb0uv\\x82\\xbf0\\xfaj&\\xff=\\x19(\\x90\\xe1\\x14\\xc2\\r#2fQ\\xb9<<\\xdb\\x81\\xde\\xe9M\\xf5@\\x9b\\x12:\\xe5\\x1c\\x95\\x8a\\xdb\\x0bo\\xb2\\x17\\xc4hb\\x7fTA\\xa2Q#Z~N\\x0b9mP\\xf4R\\xd3\\x93\\xf9\\xc3Bv\\xfd2\\x19-PT\\xab\\x02f\\x1a!+9\\x14\\x80\\xd0>\\xf1=\\xc3G\\xa1\\xc8\\xff@9A\\xda[\\xcd@~[',\n+            constraints={\"min_size\": 40, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -7.138076018234842e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5e-324,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b']\\xd8\\x7f\\xb1$t\\xdb\\xf9u\\x88+\\x9a\\xc6\\xa8\"\\x17\\x88s\\x81\\xe0Y\\xb9x\\xdaK\\xd8\\xf0{\\xb5;\\x8f\\xbd\\x95\\x86\\xaf\\xe5lt',\n+            constraints={\"min_size\": 22, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.5337717265606644e-94},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"al\\x0b\\xe9=|r\",\n+            constraints={\"min_size\": 0, \"max_size\": 78},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": -2464532487495131.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 8324437909139996.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=5212,\n+            constraints={\n+                \"min_value\": -57,\n+                \"max_value\": 9970,\n+                \"shrink_towards\": 8_220_914_780_712_400_683,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.680721077915465e-151,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.412113339411624e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"c\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"`\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc2\\xa8\\xadmw\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"{\\xbe\\x18\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u043e\u0415\u04e6\u04d6\u0459\u04d7\ud83d\udcaa\u046b\u046c\ub2f2\u0450\u04ba\u04c9\u044a\u04b2\u0432\u04cd\u0404\u0469\u0460\u04e6\\U000abc52\\U000a8fa6\u044a\\U000b14f9\\U00013d2f\u04d1\u0427\u0406\u04e1\u03fd\u046b\u0455\u0499\u03fe\u04d0\u03ee\u0497\u0444\u04e5\u047d\u0441\u03fb\u040a\u042d\u040d\u03ea\u0436\u0400\u049a\u0463\\U0001e0e7\u040a\u046e\u04cc\u0459\u03f0\u0460\u045e\u0424\u04b6\u0419\u0426\u03fe\u0438\u043a\u049c\u046b\u042f\u4d82\u0486\\U000a7ca6\\uef49\ud871\udced\u04ac\u048e\u045e\u04b0\u044a\u0429\\uec5e\u04ce\u0466\u04bd\u04cf\u04dc\u04a0\\U00011b8b\u04bd\u04bf\u0488\u0409\u03ec\u04be\u041f\u0485\u045f\u0469\u03f2\u04be\u04c2\u03f4\ud861\udef2\u0476\u0479\u03ec\\U0001c38f\u0436\u042b\ud870\udefa\u0400\u0432\u04bc\u046f\u046d\u04b2\u04ba\u040c\ud801\udccd\u0443\\ud83d\u03f2\u042f\u0445\u04d3\u0437\u04a1\u0494\u0425\u04a6\u04c9\\U000b7532\\U000bb3ea\u0499\u0412\u0467\u045c\u04b9\u04bf\u0462\u0442\u0404\u03f5\u04e4\u0422\u0475\ud85d\ude39\u043d\u0468\u04cd\\U00019fd9\u03ec\u0430\u04b2\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1000, 191006, 683617, 772131]),\n+                ),\n+                \"min_size\": 45,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 8527261174773333.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.846117118598737e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=39488,\n+            constraints={\n+                \"min_value\": 20110,\n+                \"max_value\": None,\n+                \"shrink_towards\": -16307,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xda\\xb3\\xf19\\x88\\x82\\x0bQC\\t\\x1bC\\xd9\\x18Z*\\x90\\x95\\xe5\\xdd\\x89=\\x93\\xe6\\t\\x99\\xa9\\xb8\\xd6\\xfa\\x86\\xf9>\\x9a\\xb7D\\r\\x16\\xc2@=\\x0f\\x8dt\\xd7\\xe6\\x1a\\xec\\x90S\\xc9\\xf5\\x80g,\\xedqnG\\xab\\xf6\\x1dq\\xd9\\xdb\\xfe\\x81\\t\\xfd!{\\xaf\\x03\\xef\\x9a\\xb43\\xee\\xf7\\xe0\\xf0P(\\x01m\\x99WUT.\\xfcf]\\xe8J\\xa7\\xb3\\x89\\xa56\\xcb\\xe7\\xc5\\x0e\\xcb\\x8f\\x9di\\xb3PO\\x18*\\x1d\\x0cp\\xeb\\xa0J\\xc6\\xb3\\x10\\x16Ax\\xab\",\n+            constraints={\"min_size\": 50, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\uc2a0\uc259\uc204\uc223\uc287\uc22d\uc1da\uc242\uc299\uc1e4\\U00064bd3\uc1f9\\U0007f8fd\uc1f2\uc1d6\uc22a\\U0001b969\uc253\uc26b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([49589, 849069, 908286, 1109566]),\n+                ),\n+                \"min_size\": 14,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.3170052901881606e308,\n+            constraints={\n+                \"min_value\": -2.5941941606797122e247,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.3170052901881606e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.05},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.105551346342924e207,\n+            constraints={\n+                \"min_value\": 6.363048235613845e16,\n+                \"max_value\": 1.1055513463429242e207,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0277223449718175e207,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.996764024283276e307,\n+            constraints={\n+                \"min_value\": 0.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9.996764024283276e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.475269387121143e307,\n+            constraints={\n+                \"min_value\": 0.05,\n+                \"max_value\": 1.3412821815273895e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.103515625e-05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\u20fa\\U000c63f0\u2076\u2097\u203a\\u2066\u20b2\u2039\\u2066\u201d\u20a2\u2086\\u200a\u207f\\U0007115c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([8192, 26139, 389505, 1034516]),\n+                ),\n+                \"min_size\": 11,\n+                \"max_size\": 111,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-2.460229988212124e130,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -9.695464046863779e127,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"_\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00063c5f\\U00063c25\\U00063c4f\\U0007268c\\U0006b582\\U00063bfc\\U0006cc3f\\U00063c09\\U00063c70\\U00063cc5\\U00066b49\\U00063c45\\U00063c65\\U00069b3e\\U00063cab\\U00063c5e\\U00063c4b\\U00068953\\U0006eda5\\U00063c62\\U00070b25\\U00065c6d\\U00063c76\\U00063c98\\U00063c9d\\U00063c64\\U00063c2e\\U00063bf9\\U00063cb5\\U00063bd6\\U0006a514\\U00063cc1\\U0006940f\\U00063cae\\U00063be1\\U00063cc1\\U00063c46\\U0006a08a\\U00063c23\\U00063c11\\U00063c58\\U0006b2a0\\U00063c92\\U0006ee51\\U00063c74\\U00063c11\\U00063caa\\U00063c5d\\U0006ef2e\\U00063c4c\\U00063c28\\U00063c5d\\U00063c59\\U00063c93\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([408522, 470263, 1076810]),\n+                ),\n+                \"min_size\": 33,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.312210415939813e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=3_954_893_528_954_032_646,\n+            constraints={\n+                \"min_value\": 3_954_893_528_954_010_124,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-3145,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0775212944054844},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-4606,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -7,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7976931348623157e308,\n+            constraints={\n+                \"min_value\": 3.3906606961247606e294,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xce\\x91YN\\x01\\xa3\\x81j\\xc0(/\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00010224\ud800\udee8\ud800\udf14\ud800\udec1\\U00010222\\U0003807a\ud800\ude95\\U0001026e\ud800\ude84\\U00015603\ud804\udd06\\U0001025c\ud800\udf0a\ud800\udf08\\U0001021b\\U0001026a\ud822\udc81\\U000102d7\ud800\udeba\\U000102d1\ud86c\udc92\ud802\udd8f\\U00010272\ud800\udf0c\ud800\udea8\ud800\udf09\\U0001023f\ud800\udecc\\U0003e0f8\\U0001022f\ud86e\ude61\ud800\ude8c\ud800\udeb7\\U0001022a\\U000102db\\U000102da\ud800\udef3\\U00010223\ud800\udef2\\U000445c8\ud800\udece\ud800\udea7\\U00010216\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [66070, 108794, 164503, 380408, 495431, 522039, 786752],\n+                    ),\n+                ),\n+                \"min_size\": 42,\n+                \"max_size\": 142,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud804\udf1f\\U000f9b23\ud804\udf1d\ud804\udef4\ud804\udf24\ud804\udedd\ud804\udec9\\U00011312\\U000112ab\ud804\udec1\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([70248, 216348, 318782, 368758, 940325, 1062197]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-18731,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud859\udcb8\ud859\udca9\ud859\udca3\ud859\udce1\\U0003d58d\\U000491fc\ud859\udd48\ud859\udcaf\ud859\udcf1\ud859\udccb\ud859\udcbb\ud859\udc80\ud859\udcf4\ud859\udd64\ud859\udcf8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([156776, 356607, 795009]),\n+                ),\n+                \"min_size\": 9,\n+                \"max_size\": 109,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"p$T\\xe3i\\\\\\xed\\x9fg\\xc8+8==\\x01\\xd3\\xbf\\x19\\x7f\\x8fi\\x1f\\x85[\\xb6\\x04C\\xd0\\xdaE\\x11\\\\s\\xb2\\x05\\x02\\xc5N\\x85#\",\n+            constraints={\"min_size\": 26, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.20155370062404182},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"jW#\\x85\",\n+            constraints={\"min_size\": 4, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=14489,\n+            constraints={\n+                \"min_value\": -45,\n+                \"max_value\": 26160,\n+                \"shrink_towards\": 99,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud834\udd69\u0162\u0193\u0223\u01b6\u0163\u022b\uad65\\U00013bf3\u014e\\uf164\\U00016fb3\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([300, 148006, 782287]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.9952786412309656e-140},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00080f63\\U00080efc\\U00080edd\\U000812c1\\U00080f44\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([528054, 534423, 606402]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.155168168001017e307,\n+            constraints={\n+                \"min_value\": -8.272791814349202e-276,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00046a62\\U00046b1c\\U00046a7f\\U00064517\\U00046a9c\\U00046ab0\\U00046b39\\U00046a85\\U0008c2e5\\U00046a58\\U00046a81\\U00099de2\\U000759e6\\U00046a75\\U00046ad0\\U00046a99\\U00079396\\U00046b1d\\U00046a9e\\U00046b18\\U00046a53\\U00046a54\\U00046b1e\\U00046b07\\U00046a77\\U00046a88\\U00046b35\\U00046a89\\U00046a96\\U0007814b\\U00046af0\\U00046a75\\U00046a64\\U00046a62\\U00046b2f\\U00070280\\U00046aa3\\U00046a4d\\U00046aa5\\U00046a52\\U00046ace\\U00046a9f\\U00088a8b\\U00046b1e\\U00046aed\\U00046adb\\U00046b42\\U00046a9f\\U00046ab5\\U00046a67\\U000924bf\\U00046aae\\U00046b41\\U00046ac7\\U00046add\\U00046b34\\U00046b41\\U00046aa1\\U00046ab1\\U00046a7e\\U00046b35\\U00046ad3\\U00046b25\\U00046a69\\U00046af2\\U00046b08\\U00046b39\\U00070bdb\\U00046ad2\\U00046a7b\\U00046b27\\U00046aab\\U000545cf\\U00046b10\\U00046a64\\U0009898f\\U00046a4b\\U00046b02\\U000604b5\\U00046b1a\\U00046b01\\U00046a66\\U00046a6e\\U00046a7b\\U00046ac3\\U00046aeb\\U00046af7\\U00046a50\\U00046a74\\U00046aab\\U0005e9b3\\U00046ac8\\U00046a50\\U000565d1\\U00046a55\\U00046abf\\U00059bb4\\U00046a79\\U00046a51\\U00046ab7\\U000961c1\\U00046ab1\\U00046a7b\\U00046a63\\U00046ad7\\U00046ac9\\U00060ce1\\U00046a77\\U00046b43\\U0005400f\\U0006dc78\\U00046a66\\U0005ab63\\U00046ae0\\U00046a5d\\U0006c984\\U00046b02\\U00046b39\\U000954a8\\U00046ae7\\U00046b43\\U0004debc\\U00046b27\\U00046b43\\U00083861\\U00046a80\\U00046b3c\\U00085269\\U0008442c\\U00046a59\\U00046a9c\\U00054ebc\\U00046a80\\U00046ac8\\U00046acb\\U00046af5\\U00084a28\\U00046a9c\\U00046b41\\U00060485\\U00046a73\\U00046b13\\U00046b19\\U00046b31\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([289348, 648623])),\n+                \"min_size\": 44,\n+                \"max_size\": 144,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([8192, 101757, 298242, 905683, 1025932, 1114110]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -3.3081932445085116e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.065893711030274e-264,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"[\\xb8\\x91\\xa5\\xb9\\xdd\\xebh{\\x03 5\\xaa(Et\\tS\\x02\\x17\\xe5B\\xa3\\x12\\xb6\\xf4\\xc8\\xa5\\xc3\\xed\\xcf\\x8c\\x12E]\\xf2\\xa6-\\xeb\\xeeO\\xedP\\x93\\x12<\\xb4\",\n+            constraints={\"min_size\": 24, \"max_size\": 124},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 9831679903893236.0,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.6548296545064328e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-28748,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 11781,\n+                \"shrink_towards\": 727_873_940_099_595_536,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.342138491070729e307,\n+            constraints={\n+                \"min_value\": 1.3033824971283078e16,\n+                \"max_value\": 6.233519717098005e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.39320641912264},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([208921, 323684, 722941])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9d\\xea\\x16R\\xe90\\xa4\\xe5\\x95q\\xeeV>\\x16 \\xe2y\\r\\xc9bV\\xcfYr\\xf2\\x00\\xd0\\x18~\\xcd\\x00\\x99\\xb1\\x87_\\xe56\\xe2\\x19\\x86U\\xbf\\x1f\\xcd\\x1b\\xe3$\\xd9\\xca\\xc6\\xb21\\xd9\\x13\\x1e\\xfd\\x9b\\x98@\\xa4\\x93`\\x17\\xed\\x02\",\n+            constraints={\"min_size\": 41, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc2\\xb9M\\x1cb\\x18\\xe9\\xc5d\\x9a\\x14\\xa4t[\\xcf\\xd42#\\xb6aX_\\x18T\\xf8*t\\xf8\\xf2\\xc6\\x0c$\\xf1$\\x19\\xa4\\x90D/O\\xc7\\xc6v\\x1be\\n=\\xbd\\xb1LD\\x0bpY\\xa7|\\xf6\\x10>*\\xd5$z\\xf1\\xde\\x9d\\xd1\\xc1\\x0b\\xa9\\xfc\\xbdf\\xc35(#k\\x14\",\n+            constraints={\"min_size\": 19, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-20615,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 19,\n+                \"shrink_towards\": 4141,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.08346249810342356},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7_473_156_648_151_959_429,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-6.663996550612131e16,\n+            constraints={\n+                \"min_value\": -3.860518973362605e211,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.4107364996221696e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u2764\u2782\u2743\u27b5\u2803\\U000b84ed\u276e\u277f\u27e1\u277e\u9a12\\U000c1f53\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            9999,\n+                            65535,\n+                            70310,\n+                            74201,\n+                            83417,\n+                            101919,\n+                            190001,\n+                            292233,\n+                            337606,\n+                            401783,\n+                            465040,\n+                            522567,\n+                            568792,\n+                            1025889,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 10,\n+                \"max_size\": 110,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.4263547688968118},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x84\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe2Vo\\xfb\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00044177\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([278799, 313597, 653344]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x00\\x87l*m\\x92?\",\n+            constraints={\"min_size\": 0, \"max_size\": 27},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=4672,\n+            constraints={\n+                \"min_value\": 119,\n+                \"max_value\": 17305,\n+                \"shrink_towards\": 0,\n+                \"weights\": {\n+                    1420: 0.06966088998432829,\n+                    13609: 0.0761695313507729,\n+                    3923: 0.06079025635713262,\n+                    7082: 0.0001788638577966641,\n+                    6037: 0.0758302563380044,\n+                    1798: 0.025132011840950166,\n+                    17104: 0.05581924814243554,\n+                    13177: 0.06162956733583132,\n+                    7371: 0.058777018568157105,\n+                    1323: 0.06136095765777427,\n+                    9536: 0.06092098826184759,\n+                    12211: 0.04287485647931526,\n+                    4672: 0.07858515559837045,\n+                    14994: 0.034266712914953305,\n+                    5360: 0.01644224310973001,\n+                    1087: 0.08574885546150093,\n+                    17304: 0.028013249158536504,\n+                    5741: 0.0724450981707458,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x19\\xc7\\x1c\\xb4\\xbe\\xf0\\xa8\\xae\\x92\\x9b\\x80\\xb8\\x15'\\x9dE\\x8f\\x0b\\x04\\xbb\\xe6\\x9c4\\x82\\x03\\x0c\\xa5\\x1aV\\xad\\x8d\\xf1\\xa2-\\xb9\\xb9_\\x98q\\x18\\x87\\x00\\xdd\\\\\\x01`g\\x9fF-\\xc5\\xd4\\x18_m\\x05\\xa4)\\x9bG\\x88\\x8b\",\n+            constraints={\"min_size\": 43, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-113,\n+            constraints={\n+                \"min_value\": -18164,\n+                \"max_value\": None,\n+                \"shrink_towards\": 30570,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000d20f9\\x07\\x19\\x1a\u00e1\u131e\\x8fw\\x91\\x16\\x03\\x86N8^\u00f4\u00ab0\u00a3\u00b8\\U000d24a6k\u00ce\\x037\\x11X\u00bc\u00cb}L\u00e25\\x10\u00f9s|f7t\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            30252,\n+                            70438,\n+                            119176,\n+                            157295,\n+                            194414,\n+                            377926,\n+                            423405,\n+                            537425,\n+                            540253,\n+                            585320,\n+                            633385,\n+                            654855,\n+                            748849,\n+                            749846,\n+                            754316,\n+                            857642,\n+                            920808,\n+                            939313,\n+                            964895,\n+                            1013058,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 40,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"x~\\x05\\xfb\\xa0Y\\xd2;Lj\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9069885697637274},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa9[\\xdae\",\n+            constraints={\"min_size\": 0, \"max_size\": 81},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001ae23\u0429\u0452\u04bd\u0496\u04ca\u03ed\\U00036183\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1000, 448744, 529066, 579599, 1045385]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9999,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 8.075934353720958e-291},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00056335\\U000562ed\\U000b3351\\U0005631d\\U00056337\\U000562eb\\U00056305\\U0005632c\\U000562e6\\U000562ce\\U00056377\\U00056310\\U000562aa\\U00093db1\\U0005632c\\U000562a5\\U000562ee\\U000562af\\U0005633b\\U0009e272\\U000a4f94\\U000bb528\\U0005637a\\U00056389\\U00056290\\U0005631c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([352909, 358087, 416046, 941393, 1102265]),\n+                ),\n+                \"min_size\": 26,\n+                \"max_size\": 126,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0002f3b6\\U0002f39d\\U0002f396\\U0002f3a7\\U0002f3a2\\U0002f3d5\\U0002f408\\U0002f43d\\U0002f3a5\\U0002f3e1\\U0002f3e5\\U000f4756\\U0002f3ca\\U0002f421\\U0002f393\\U0002f3c4\\U0002f415\\U0002f373\\U0002f446\\U0002f37d\\U0002f3d5\\U0002f3a4\\U0002f362\\U0002f39c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [193367, 334389, 414625, 612706, 643021, 1027726, 1114110],\n+                    ),\n+                ),\n+                \"min_size\": 16,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud865\udd08\ud844\udca5\ud843\udff8\ud856\ude2c\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([135128, 194217])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud83c\udffb\ud83d\udc4d\ud83c\udffb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [22644, 538897, 722248, 744806, 765416, 883011, 958662, 970753],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"D?O\\x7f\\x131J\\xd0\\xc2\",\n+            constraints={\"min_size\": 8, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.09918739256330292},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc9\\x8d\\xdf\\xef\\x83\\x80%\\xc5g\\xc3\\xa3\\xb2z\\x1dgl\\xb99\\x06\\x8e\\xdeE\\xd7\\\\\\xcb\\xae9\\x82\",\n+            constraints={\"min_size\": 13, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-3296,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 17,\n+                \"shrink_towards\": -411820136,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.346074481372546e282,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1e-05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9894257874255552},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.05,\n+            constraints={\n+                \"min_value\": -9.335829143462768e-205,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.2250738585e-313,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.2986267198011124},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.34270871870010017},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"3P'p\\xfc\\xcex\\x0b,\\xcc=\\x9d#\\xee=b\\xddu\\x8d&k1\\xce3n\\x97\\x1c\\x10\\x0fx\\xc0\\xf6n\\xbb\\xe5\\x89\\xe0Q3\\xe0\\x1d\\x98\\nD(\\xb5\\xb8\\xd0\\x8afj\\x03u\\xaaT\\xf1\\x8b/\\xe8SD\\x1eI_\\xb6\\xbd\\xea\\x17\\xf1\\x90\\x9e\\x9bL\\xfc\\x98\\x01\\xeaV|tqr\\xe0\\xd67e\\xf9h\\xe4j\\x96\\xc5\\x00?\\x91~\\xadM\\xf6\\xac\\x86\\xa4\\xaet\\xb6\\x17\\xdc\\xf4\\x84%\\x10\\xb4\\xd2\\xf6X7c\\xf6J\",\n+            constraints={\"min_size\": 48, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 61},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"#\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.21464106029980617},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 7.937871995857558e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"P\\xabyQ}\\xd0\\x88\\x10\\x08\\xdd\\x87\\xd9\\xa9\\x9di\\xb8\\xf4\\xe3\\xd1]\\x996\",\n+            constraints={\"min_size\": 19, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.26997357641798075},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004b155\\U0004b1d9\\U0004b102\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([307448, 560436, 755665]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"JU\\x9dmY \\xb4\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.036911068464784e16,\n+            constraints={\n+                \"min_value\": -1.401298464324817e-45,\n+                \"max_value\": 3.9044954718689356e307,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.401298464324817e-45},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=9984,\n+            constraints={\n+                \"min_value\": 5911,\n+                \"max_value\": None,\n+                \"shrink_towards\": -22328,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x00\\xaeU\\xf6\\xe1\\xd7\\x88\\xa8\\xbf0\\x81MDF\\xd0\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8192,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 3105,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=23042,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.024376458227023397},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud882\udf2d\\x96\\x9b=\u00af\\x102\\x17\u00c1PO\u00b8\u00e8\\x820\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            48854,\n+                            144243,\n+                            534559,\n+                            547385,\n+                            628911,\n+                            728033,\n+                            815619,\n+                            978142,\n+                            1078273,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 11,\n+                \"max_size\": 111,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6536030262140672},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=8.774516403429591e307,\n+            constraints={\n+                \"min_value\": -6.193703999960597e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 8.774516403429591e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc6\\x82.\\x12\\x1e\\x87\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0400\u04f0\u0487\\U00051910\\U00044967\u045f\\U0007e0c5\u045b\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1024, 631911, 712374, 741390, 766016, 900861]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.6354216747648745e125,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.6809033526565966e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=513955728,\n+            constraints={\n+                \"min_value\": 513955700,\n+                \"max_value\": 513955740,\n+                \"shrink_towards\": 18,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-101,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 38,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003375a\\U000336ab\\U00033713\\U000336a9\\U00033752\\U0003376e\\U000336e3\\U0003374d\\U000336c7\\U00033738\\U000336c7\\U0003372a\\U000336e4\\U000336c4\\U0003371d\\U000336d6\\U000a8d6a\\U0003372d\\U00033746\\U000336cb\\U00033732\\U000336a9\\U0003377d\\U00041fd8\\U0003377b\\U000336f3\\U00079194\\U0003372c\\U0008b873\\U0003379b\\U000336f8\\U00033757\\U000336da\\U00033743\\U000336fe\\U0003376c\\U000336ec\\U000336b4\\U00033768\\U00033777\\U00033739\\U00033776\\U00033795\\U000dee5c\\U000336cf\\U000336c3\\U000336d5\\U00033738\\U000336bd\\U00033749\\U00033794\\U00033763\\U000f4a37\\U00033710\\U00092b6d\\U0003372d\\U000d8df4\\U0005f7fc\\U0003636a\\U000fd8d0\\U00033784\\U000336fc\\U0008705c\\U000336fb\\U00033797\\U0004e0b5\\U00033741\\U00033778\\U000336bd\\U00033765\\U00033707\\U000336b0\\U0003375a\\U00033752\\U000336b6\\U000336e5\\U0003374b\\U00033764\\U000d7b8d\\U000336c6\\U000e43f4\\U00033790\\U00033710\\U000336f5\\U000475ea\\U00033723\\U0003371d\\U000336ab\\U00033721\\U000336aa\\U000336e6\\U0003371d\\U00080ad9\\U000336c6\\U00033716\\U000f030f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([210599, 759635, 880766, 1042262]),\n+                ),\n+                \"min_size\": 40,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.45038903193786983,\n+            constraints={\n+                \"min_value\": 2.3853598706177828e-161,\n+                \"max_value\": 0.5,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.015086020289368899,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00048d4a\\U00048d12\\U00048d4d\\U00048c60\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [298072, 341650, 422795, 660185, 722884, 957305, 1089697],\n+                    ),\n+                ),\n+                \"min_size\": 2,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x92\\xb0\\xfd\\xdf\\x83tF\\x9a\\xda\\xc7}\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"POD_IP\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            40267,\n+                            54917,\n+                            108472,\n+                            162365,\n+                            249239,\n+                            649577,\n+                            652748,\n+                            676967,\n+                            951538,\n+                            988560,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 2,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-67,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 20507,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1b\\x81\\xfb\\x1b\\xb1}\\xda\\x97\\xd0d\\xec\\xf6\\xfc\\x82U\\r\\x17\\x16\\x0b\\xe1\\x18+*\\xa2\\x03\\xe3\\xabI\\xa8\\xf3I\\xff/%\\xec\\x85}/\\xf6\\xde\\xe6\\x07:\\xd0\\xa6\\xf4vt\\x1bDR\\xa2\\xfb\\r\\xeb\\xc1\\xf4\\x1b\",\n+            constraints={\"min_size\": 36, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0246\u0259\u0261\\U000ba9c7\u0266\u0244\u022e\u021f\u026b\u987b\u0281\ud802\udf41\u0205\u0203\u0238\u025d\u025e\u01e5\u01a6\u024b\u01bd\u01ee\u024e\u1517\u01bb\u01b2\u01d5\u01c9\u0283\u01c8\u01f2\u01f6\u01b8\u0253\u01d2\u023b\u0206\u026a\u01d9\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([404, 289052, 735246, 796654]),\n+                ),\n+                \"min_size\": 14,\n+                \"max_size\": 114,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf7\\xc2R\\xaeq\\x84D\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-nan,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 0.05,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.9018358849381634e-157,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".worker_identity.\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"e\\x03u\\xa2\\x12\\xe0\\xdf\\xb9:b\\xcf\\xac\\xcdf\\x89\\xbd\\x1cA3ZC\\xb992\\x13\\xb0G\\xd0I\\xf0B\\xb1\\x1al\\xd7\\xd9^\\x1c\\x99q^\\xbcy\\xcfAGa\\x01ua\\xc80\\xb1&\\xa1G>8\",\n+            constraints={\"min_size\": 41, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9165481760975027},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\"',\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -2.413020058461602e-18,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.1556432141222924e-235,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"$\\x96}\\xd2\\x04y\\xc9\\x83\\xc2\\x88KL\\xf2\\xf9\\xabg8\\x1f\\xd8jGX]^\\x14BN\\x9cq\\xddY\\xb7\",\n+            constraints={\"min_size\": 11, \"max_size\": 111},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x11\\x04\\xc5ZJ\\xf1P~\\x8a\\x04\\xb8\\xed]\\xfe\\xae\\x89\\xde\\x88B8=\\x9c\\n\\xf2\\xbdkI\\xc9\\xaa~\",\n+            constraints={\"min_size\": 15, \"max_size\": 65},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5806948409792262},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=65535,\n+            constraints={\n+                \"min_value\": -7375,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"Q<\\x01\\xa4\\x99\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 7.939515946370314e306,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.3247767460253544},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.2250738585072014e-308},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=792890129,\n+            constraints={\n+                \"min_value\": -24904,\n+                \"max_value\": 1_316_459_015,\n+                \"shrink_towards\": 22890,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-28617,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -15460,\n+                \"shrink_towards\": 37,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.5031709395331953e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x00\\x87l*m\\x92?\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"@\\x1fD\\xa8l\\xea6\\xd3I\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.882949818088555e-237},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.017192036590635e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.996375871564351e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=23242,\n+            constraints={\n+                \"min_value\": -1_071_020_272,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6766473543696526},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.4176699896439499e308,\n+            constraints={\n+                \"min_value\": 0.99999,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 3.1097775393538228e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5854340946413493},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9196805080387310.0,\n+            constraints={\n+                \"min_value\": -1.0963673012695261e-300,\n+                \"max_value\": 1.6978970629141202e16,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5508305796165898.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-17492,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=18602,\n+            constraints={\n+                \"min_value\": 15264,\n+                \"max_value\": 65535,\n+                \"shrink_towards\": 24374,\n+                \"weights\": {65535: 0.5276758190420443, 24524: 0.0010553516380840888},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf5\\xf5<RI\\x85o\\xd8\\x18\",\n+            constraints={\"min_size\": 6, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=inf,\n+            constraints={\n+                \"min_value\": inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 8.253694512609968e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=8221583181095425.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ube9a\\U00048058\ube86\ube00\ubdf6\ubdfd\ubdcd\ube2f\ubda8\ud865\uddb8\ube1b\ubdb2\ube73\ube4f\ubdb7\ube70\ubdf6\ube98\ube37\ube25\ube6c\ube15\ube0c\ube34\\U0004fa65\ube1f\\U000da963\ube4e\ube8a\ube98\ubdef\ube78\ubdaa\\U000bf655\ube03\ube87\ube7e\ubdcd\ubdd9\ube0a\ubdd4\ube59\ube2d\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([48549, 1000443])),\n+                \"min_size\": 12,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.496603267453139},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5689410029757306},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud81a\udcb1\ud81a\udd30\ud81a\udd14\\U0008c89c\ud81a\udc6c\\U00054f8b\ud81a\udc98\\U0001e8df\\U00072601\ud81a\udcf5\ud871\ude9b\\U000750c8\ud81a\udcc6\\U00035981\ud81a\udcec\\U0008b195\ud81a\udcad\ud81a\udcb5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([92254, 624734, 632257, 737815, 1114110]),\n+                ),\n+                \"min_size\": 10,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-2237,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -37,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.0071357880314247e308,\n+            constraints={\n+                \"min_value\": -2.9770374239890864e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 9.40831793826214e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.4055934020837201},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"{\\xd9cR\\xd4\\xca\\xde\\x85\\x19q\\x83]\\xf4\\xce\\xb8\\xce\\xb7^c\\xcb\\xfb\\x18\\xb6\\xbe\\xdf#\\xccc\\x1ah'oyr\\xbc\\x86\\xd7\\xebX\\x9d\\xfb\\x16\\x15\\xfc\\\\\\xf7^.\\xea)\\x17\\x95\\xae\\x06i\\xf9\\xe9\\xc0'X\\x9c\\xb1m\\x11b\\xba/\\xde/\\xccMv\\xd8\\x18\\xd3\\x11\\xcb \\xcdl\\x13~\\xe5+>\\xc5\\xa8\\xf1\\\"O&4Wz\\xe5\\x07$\\xbf$\\xd0\\x8a\\x01U\\xa0e\\x117\\xc1V\\xdf\\x9c\\xa7\\x04F\\xd1i\\x87\\x81G\\xcb@\\xfb5l9\\x13\\xeb@\\x10\\xc8\\xfd\\x1c\\xfe\\xb9\\x01\\x84l\\x9b\\xf8\\xa1\\xddEc\\xe62\\xfb\\x96\\x90t1Ni;,U\\x19\\xf2\\xf2\\xbaT\\xcdT\\x8fHK~\\xb0\\t\\xdcs\\xf0J\\xb1\\x17\\xf8\\xc2\\xeb\\x861r\",\n+            constraints={\"min_size\": 41, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8686390939207613},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8769549981936553},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6343088016228019},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u7432\u73d2\u7352\u73eb\u7418\\U0005f087\u7ff1\u73e2\u741f\u73a9\\U00013d8d\u736b\u738c\u73b4\u741f\u73f4\u743e\\U000838fb\u7390\u734a\u7349\u7429\u7345\u735c\u73c1\u742a\u73d6\\U00088d66\\U0005e2ab\u73e2\u7362\u73f3\u7432\\U001022de\u7407\u73da\u7377\u7362\u73e3\u73aa\u73fc\u73d8\u7428\u73c1\u7359\u7395\u7358\u736c\u7419\u7411\u73cf\u73b0\u7438\u739d\u735e\\U00072760\u73fa\u7390\u737b\u7367\u73de\u737b\\U00062326\u7412\u7432\u7357\u73e2\u7393\u736b\u7387\u7412\u735b\\U0005e6c6\\U0007840a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            29505,\n+                            85611,\n+                            375261,\n+                            426508,\n+                            467827,\n+                            626341,\n+                            724108,\n+                            741422,\n+                            762834,\n+                            790618,\n+                            1034880,\n+                            1062740,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 47,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xe2\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xb2s\\xfd~\\xf2\\x0ei%\\xe4\\xaa\\xd6\\xc6\\xf6\\x10O+\\x13\\x80\\xc0l\\xe6=\\xd8\\xfc\\x9cIF5\\x02\\xba\\xa0\\x94oCwA\\xe4&\\x05\\x92M\\x81\\xc5dc\\xa3\\xb1GB\\xcb\\xa0\\x94 \\xe7\\xf7\\xa3\\x92\\x0c\\x07\\xad\\x9c1\\xec\\xf6$r}a\\x8e\\xf7^f\\xdeM\\xa5\",\n+            constraints={\"min_size\": 42, \"max_size\": 142},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -1.7976931348623157e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9007199254740992.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0003338d\ufed1\\uff00\\U0004112b\ufeb8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [65203, 65535, 67277, 484032, 550583, 650667, 774009],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ufbac\ufb54\ufb91\\ufaea\\ufadc\ufb3c\ufb24\\U00034632\ufb00\ufac9\ufb7f\\ufb19\\U0001c467\ufb9d\ud861\uddf6\\U0003aa8a\ufb27\ufb16\ud821\ude09\ufb72\\U0003ae8b\ud85d\uddb0\\U00034147\\ufaec\ufb7f\ufbad\ufb1d\ufbb9\ufb26\\U0003c607\ufabe\ud823\udc40\ufba6\ud820\udd02\ud849\udfb7\\ufb0d\\ufae8\\U00034cd4\ufb4d\ufb85\ufad7\ufb54\ufad7\ufb8c\\U0001a42c\ufb03\ufac4\\U0003b59c\\ufb3f\ud840\ude48\\ufaf4\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([64186, 253447, 904696]),\n+                ),\n+                \"min_size\": 49,\n+                \"max_size\": 149,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 6.103515625e-05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-67,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.5,\n+            constraints={\n+                \"min_value\": -6.771655682380548e-230,\n+                \"max_value\": 0.5,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.022229226322644683,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-19,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 42,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([24728, 137872, 520845])),\n+                \"min_size\": 0,\n+                \"max_size\": 74,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=3254,\n+            constraints={\n+                \"min_value\": -8516,\n+                \"max_value\": 27265,\n+                \"shrink_towards\": -1_755_210_771,\n+                \"weights\": {1646: 0.2516133201122251},\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=526,\n+            constraints={\n+                \"min_value\": 512,\n+                \"max_value\": None,\n+                \"shrink_towards\": -27,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [51514, 117792, 178564, 383021, 387515, 431801, 445794],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\")\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0007bc04\\U0007bc14\\U0007bc2a\\U0007bbcb\\U0007bb5d\\U0007bb8d\\U0007bc2d\\U000a98c7\\U0007bbe1\\U0007bb8b\\U0007bbe6\\U000847c2\\U0007bc14\\U0007bc41\\U0007bb66\\U0007d13e\\U0007bc40\\U0007bbbf\\U0007bc33\\U000d49f3\\U0007bbaf\\U0007bb82\\U0007bbb9\\U0007bbac\\U0007bb9a\\U0007bb89\\U0007bb8c\\U0007bb5e\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([506715, 960948])),\n+                \"min_size\": 26,\n+                \"max_size\": 126,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005fc85\\U0005f5af\\U0005f629\\U0005f59d\\U0005f630\\U000632d7\\U00067b55\\U000647af\\U0005f674\\U0005f5db\\U0005f5a6\\U0005f5f9\\U00068fde\\U0005f655\\U0005f659\\U0005f58e\\U0005f5ce\\U0005f5dc\\U0005f5f4\\U0005f5d2\\U00063fa2\\U0005f5ef\\U0005f5fa\\U0005f645\\U0005f660\\U0005f590\\U00066431\\U0005f5a3\\U0005f5e0\\U00063566\\U00066cfa\\U0005f583\\U0005f5d4\\U0005f66b\\U0005f59b\\U0005f671\\U0005f670\\U0005f58b\\U0005f67c\\U0005f669\\U0005f5b9\\U0005f616\\U0005f669\\U00062c97\\U0005f66f\\U00061afc\\U0005f5d3\\U0005f602\\U0006a5ae\\U0005f64c\\U0005f65f\\U0005f5f4\\U0005f592\\U00060872\\U0005f5d4\\U0005f590\\U000670be\\U0005f626\\U0005f5f0\\U00065344\\U0005f5b0\\U0005f628\\U0005f580\\U0005f66a\\U00067522\\U0005f63f\\U0005f5c4\\U0005f639\\U0005f66e\\U0005f669\\U0005f5b1\\U0005f5c9\\U0005f603\\U000629e2\\U0005f59c\\U00068eeb\\U00061ea3\\U0005f5aa\\U0005f63a\\U0005f5b4\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([390525, 436644, 796328]),\n+                ),\n+                \"min_size\": 18,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.34780618002363234},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x89\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=6.573196197974186e16,\n+            constraints={\n+                \"min_value\": 1.3048131805623636e16,\n+                \"max_value\": 1.225757749840434e308,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5e-324,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8806290534456662},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\uad02\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            44163,\n+                            193382,\n+                            407381,\n+                            638482,\n+                            839471,\n+                            988551,\n+                            1057088,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.5451409474905392e38,\n+            constraints={\n+                \"min_value\": 4.169219473547763e16,\n+                \"max_value\": 3.402823466e38,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.5451409474905392e38,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.8669468235236899},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.05},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=420562803830905.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 4.5923842641553304e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.11446312268440798,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-3.987159675834808e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 2.8715714230156176e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.374632345993682e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-11790,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-95,\n+            constraints={\n+                \"min_value\": -13801,\n+                \"max_value\": None,\n+                \"shrink_towards\": 7,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"r\\xe9\\xd55\\x15M\\x8co\\xa2\\xbc\\x92\\x18J\\xfb\\xeb\\\\0\\xf7\\xb4\\xd4\\xfc\\xad\\xa1c&g\\xe0\\xd0]p32F\\x16qF$\\x8d}5\\xf6\\xd0.\\x17\\xf7\\x1dL\\xb2\\x1d\\xfb\\xcd\\xd0\\x1ck\\x9e\\xb1\\x16\\xb8%Yq\\xc6}\\xad\\x95\\xd0\\xd09\",\n+            constraints={\"min_size\": 32, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.991673201904493e289,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xa9[\\x8c\\x87\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"hypofuzz.test_keys\",\n+            constraints={\"min_size\": 8, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1000,\n+            constraints={\n+                \"min_value\": -13,\n+                \"max_value\": None,\n+                \"shrink_towards\": 6_261_247_228_753_794_713,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.766705814502439},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u35a8\u35ea\u35d8\u35d7\u3508\\U0004094d\u351f\u35d0\u355b\u356c\u3526\u3500\ud858\udfd0\u35b3\\U00064db7\\U0004361a\u353f\u35dd\u35be\\U000f3fbc\u3523\u352d\u35e2\u35d6\u3514\u3507\\U000f533f\u35d9\u35e2\u353e\u3570\u354f\u3552\u35ee\ud84b\udcf6\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([13567, 838911, 926601, 1114111]),\n+                ),\n+                \"min_size\": 27,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5093977648766576},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-28304,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 8896,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"d\",\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9d[+\\x8d\\xb6\\xa9\\x9b.bJ\\x9em\\x90\\x94\\x0b\\xb9\\x87\\x8b\\x9e\\xbf\\x85\\xe2\\xe1/`\\x82\\xcf/q\\xd6\\x87}\\xa1\\x11\\x17`\\x82\\x9ae\\xce5<n\\x9d\\xabD\\xa3\\xa3r\\xfd\\xae>\\x99\\x8a\\x88^ey,\\xc7\\xe1\\xb9\\xaf,r(j\\x99:=&\\xc6jDjnL\\xaew\\xc8v5:\\xf0\\xca\\xab\\xf7\\xae\\x01h\\xa6\\xf1\\xb4\\x12y(\\xc7/\\x0f\\xab$\\xb5{\\x13Wwt\\xcb\\x02\\xfa\\x8e\\xff\\xf4\\x17\\xc1q\\x81\\x94x\\x19\\xe0/\\x8d\\xca\",\n+            constraints={\"min_size\": 24, \"max_size\": 124},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xd3\\x131\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x94Vp^|&K\\xea\\xeb\\x077\\x8d\\xfa8\\x0f\\x95,^\\x87\\xcf#8\\x9dYl\\xbaqC\\xbc\\xac\\x05\\xbb \\x80\\xa6\\xf1[c\\xfc\\x8b\\x96%D\\x16\\xf9B\\xcb\\x07\\xe8\\x07\\xd8\\xa4\\x0e\\xaa\\x0c\\xc6\\x0eo\\xee\\xef\\xdb\\x98\",\n+            constraints={\"min_size\": 47, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-11215,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 8,\n+                \"shrink_towards\": 20762,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            158366,\n+                            284061,\n+                            343952,\n+                            358879,\n+                            376925,\n+                            451400,\n+                            744029,\n+                            947919,\n+                            1048743,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=7515,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 9999,\n+                \"shrink_towards\": -26126,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u0207\u0298\u02c5\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([512, 57693, 487167, 527591]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\uc8b5\uc807\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [51147, 65436, 156130, 222175, 364704, 524047, 975813],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 59,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-28,\n+            constraints={\n+                \"min_value\": -51,\n+                \"max_value\": 20,\n+                \"shrink_towards\": -32118,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5512740698179667},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-7.84026803188812e38,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.401298464324817e-45,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000c342d\\U000c344b\\U000c3456\\U000c33c6\\U000c3414\\U000c346e\\U000c3444\\U000c341f\\U000e26ae\\U000c346d\\U000c33a8\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([799632, 1048689, 1109576]),\n+                ),\n+                \"min_size\": 5,\n+                \"max_size\": 105,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc2\\xb4\\x8b\\x83\\xe3\\x8ax\\x1ch\\xd0)\\xf7\\xd8\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.626676595954608e16,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.12212364708249915},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".hypofuzz.corpus\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=18139,\n+            constraints={\n+                \"min_value\": -4_282_444_591_732_472_730_789_125_215_135_194_287,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00042861\\U00042836\\U00042850\\U0004288e\\U00042871\\U00042857\\U0005fdfa\\U00042864\\U000428b6\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([272315, 490321])),\n+                \"min_size\": 0,\n+                \"max_size\": 99,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.203944181150567e308,\n+            constraints={\n+                \"min_value\": 5.827672646724585e-155,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.758324244000964e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.3910934655909474},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\uf95e\uf98c\uf9a1\uf9c8\uf9ac\ufa15\uf967\\U000149d8\ud844\udf88\uf9d1\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([63796, 161336, 668493, 679531]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=45,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x98\\x18em\\x87\\x91\\x0b\\xb0\\xfb:^\\xd2\\xe2\\xf4\\x95 \\xd2\\xcd]\\xc2C\\xa6\\x92b\\x1c\\xa3\\xeb\\x1f\\xc4W\\xbd\\xeb\\xcd`\\x83H|\\x83\\xcb\\xb1\\xef\\xc9\\xef\",\n+            constraints={\"min_size\": 16, \"max_size\": 116},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=3.164756185251548e307,\n+            constraints={\n+                \"min_value\": 0.0,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000fae5c\\U000fae8a\\U000fae2d\\U000fae7f\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([1027574, 1114110]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7744779280244594},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 1995359763014277.0,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 7.670503721378557e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.1125369292536007e-308},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [8192, 53297, 65535, 176989, 255204, 657429, 841189, 936468],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\x8b5\\x99\\x8a;\\x11M\\xb4\\xe1\\xfe\\xea\\x1fI\\x8e\\xff,l9\\xf5\\x0b\\xcep\\xd3\\xab~\\x86\\x9c\\xb4Rmv\\x8c\\x8e\\x1f\\x13,9\\xfc\\xb0\\xb8X\\x02\\xb1\\x05\\xc5\\x92{\\x98t\\x89\\xc1\\x07\\xa0\\x808\\x96\\xc0\\xe8\\x92\\xe0\\xa8\\xa9\\xa3\\xf4\\x92\"\\xb1\\r.\\x8fM\\xa9$\\x98D\\xed\\xe3\\x96\\xbfM\\x9cZ\\x89\\xc8\\xaau\\x16z\\x99\\xdf\\xa3@\\x1f\\x87\\x93\\x0chq\\x16',\n+            constraints={\"min_size\": 43, \"max_size\": 117},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=16,\n+            constraints={\n+                \"min_value\": 7,\n+                \"max_value\": 507,\n+                \"shrink_towards\": 15554,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004b3ae\\U0004b3e1\\U0004b460\\U000ee76e\\U0004b454\\U0004b46a\\U0004b43d\\U0004b3ff\\U000aba2a\\U0004b430\\U0004b3f8\\U0004b434\\U0004b485\\U0004b39e\\U0004b3a6\\U0004b3ee\\U0004b3fc\\U0004b414\\U0004b469\\U000eb6ee\\U0004b3e3\\U0004b3bf\\U0004b459\\U0004b419\\U0004b39e\\U0004b3fb\\U00058835\\U0004b3bb\\U0004b484\\U00054cd6\\U0004b39a\\U000567c4\\U0004b445\\U0004b40e\\U0009b2e2\\U0004b478\\U0004b3fa\\U0004b3f5\\U0004b395\\U0004b3bd\\U0004b44b\\U00057070\\U0004b410\\U0004b3bb\\U0004b3ea\\U0004b39a\\U0004b3a9\\U0004b416\\U0004b3b3\\U0004b399\\U000c5e4d\\U0004b47d\\U0004b41e\\U0004b402\\U0004b440\\U0004b3d3\\U0004b3ee\\U0004b447\\U0004b39a\\U0004b454\\U0009a847\\U0004b3a6\\U0004b472\\U0004b41e\\U0004b39f\\U0004b3a4\\U000eafa3\\U0004b3e3\\U0004b3c5\\U0004b489\\U0004b401\\U0004b426\\U0004b45e\\U0004b430\\U0004b3a9\\U0004b44f\\U000a7205\\U0004b43c\\U0004b39b\\U0004b411\\U0004b484\\U0004b3ea\\U0004b39a\\U0004b417\\U0004b3e8\\U0004b45c\\U0007b9f9\\U00084dc7\\U0005363d\\U0004b3a4\\U0004b47f\\U0004b3a3\\U0004b411\\U0004b435\\U0004bd30\\U0004b45f\\U0004b46a\\U00093f96\\U0004b3c4\\U0004b3ec\\U0004b45f\\U0004b437\\U0004b3e7\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([308110, 985841])),\n+                \"min_size\": 27,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud802\udddd\ud802\udd8d\ud802\udd37\\U0001096c\ud802\uddd4\ud802\uddc2\ud802\udd82\ud802\udd22\ud802\uddff\ud802\udda5\ud802\udde7\ud802\ude03\\U000d8de1\ud866\udd3b\ud802\udd8c\\U00010965\\U00010964\ud802\udd9b\\U00010956\\U000e9db9\ud802\udd8c\ud802\ude1b\\U000f3770\ud85a\ude80\ud802\uddef\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            67868,\n+                            187228,\n+                            617665,\n+                            645537,\n+                            787215,\n+                            788957,\n+                            837242,\n+                            975860,\n+                            991553,\n+                            1029848,\n+                            1044072,\n+                            1048419,\n+                            1079956,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 2,\n+                \"max_size\": 102,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.3079069768233765},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.6207204969433946e173,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".worker_identity.\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xc9\\x8d\\xdf\",\n+            constraints={\"min_size\": 3, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 6.491705405474959e-168,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.2368379409121879e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.2820945028416036e308,\n+            constraints={\n+                \"min_value\": 6.050542742642792e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.4636741339809062},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.225073858507203e-309},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"A<\\x9d\\xdbS\\xf0%\\x90JC\\xab|\\x18\\xa2\\xba\\xd0\\xecb)|1P\\xbex\\xe3\\xbf\\xf3\\x88L\\xddw\\xe8(n\\x01\\x0b\\x0c7\\xad\\xbd\\xf7\\x92\\xab\\xdf>r\\xc7\\xc6\\n\\x07 +\\x0c\\xfa+\\x9d\\xf5\\x8b\\xcb!\\x07\\xcbu+\\xdd\",\n+            constraints={\"min_size\": 44, \"max_size\": 144},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00091b75\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([596680, 865486, 1024086]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\u20c2\u98fc\u2070\\U000452ab\u207c\\u2064\\u2065\\u202e\u2074\u205e\\U0005299a\u2081\u2014\\U0005d66f\\u2004\u20ba\u2017\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            8192,\n+                            32323,\n+                            37441,\n+                            100126,\n+                            181279,\n+                            288677,\n+                            336794,\n+                            382638,\n+                            1078700,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=121,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -23766,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0008eaf0\\U0008ea91\\U0008eb15\\U000b1903\\U0008eb09\\U000ed61d\\U0008eaf7\\U0008eadb\\U0008ea38\\U0008eaa1\\U000dd4c6\\U0008eaed\\U0008ea5e\\U0008ea5b\\U0008ea7e\\U0008eae1\\U0008ea49\\U0008ea55\\U000e5cdc\\U000cbfc2\\U0008ea33\\U000dab76\\U0008f6ec\\U0008eaa9\\U0008ea71\\U000dda2f\\U0008ea7a\\U0008ea66\\U0008ea58\\U0008eaf4\\U0008eb1b\\U0008ea73\\U0008ea3a\\U0008ea8f\\U0008ea93\\U0008ea95\\U0008ea93\\U0008ea9c\\U0008eac5\\U0008eb02\\U0008eae2\\U000b6250\\U0008ea91\\U0008eadd\\U0008eadc\\U0008eb1c\\U0008ea60\\U0008ea56\\U0008ea71\\U0008ea71\\U0008ea8d\\U0008ea91\\U0008ea8b\\U0008eada\\U0008ea26\\U0008ea28\\U0008ea23\\U0008eabc\\U0008ea37\\U000a8421\\U0008eadd\\U000a050d\\U000c7f03\\U0008ea63\\U0008ea91\\U0008eb08\\U0008eaa8\\U0008ea51\\U0008eab3\\U0008ead2\\U0008eaca\\U0008eacb\\U0008eaf6\\U0008ead8\\U0008ea71\\U0008ea25\\U0008ead0\\U0008eadf\\U0008eb1b\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([584223, 986359])),\n+                \"min_size\": 22,\n+                \"max_size\": 122,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6437870448670241},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u78f6\u78ca\u9898\\U000134a6\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([30904, 211856])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x93\\x0b\\xe8\\x83\\xe2#`\\x9e\\x07\\x19~\\x17#\\xec\\xe0C\\r\\xa2?Nos\\xb5\\xc5\\xfb\\x8ev\",\n+            constraints={\"min_size\": 18, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00099e09\\U00041256\\U000412be\\U00041232\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([266754, 802161, 1076009]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-11,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 19210,\n+                \"shrink_towards\": 1_560_746_465,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6522600247402522},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x96\\x81\\xd8\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-5683,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -9,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.3106738344507765e293,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 8.625841910821784e285,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-22605,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": -22491,\n+                \"shrink_towards\": -16527,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.02367188577552671},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\ue0ad\\ue00b\\ue023\\ue016\\udfb2\\ue03c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([57263, 239736, 298183, 480288, 514441, 1114110]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 68,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.754884517497399},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x16TlR\\xf7\\xdd\\xc4\\xbd\\xb8\\x15\\xd0\\xbe\\x84\\x00\\xedn\\x9c\\xc1~\\xce\\xe7>\\x0e\\xe1\\xb5&\\xc9\\xf3I\\xd9\\x00\\xbb\\x17\\x06\\xa2%]\\xba\\xa4\\xb2N.\\x93\\xd8\\xa1\\xe0o\\xc1Bg\\x0e4S\\x02\\xf9;[y9\\xc8o<Zf`$\\xbe\\xfa\\xcf\\x1c\",\n+            constraints={\"min_size\": 25, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xcd!\\xacU^\\xd0\\x12\\xe1(\\xed\\xcf:\\xe9\\xb8\\xa1\\xe1\\xe9\\xd7h\\xd2\\xd8\\x9a%\\x02\\x86\\x0c\\xec\\x12\\x1b\\xa5\\x01\\xb8\\xd2i\",\n+            constraints={\"min_size\": 30, \"max_size\": 130},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.44158880371860787},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=15181,\n+            constraints={\n+                \"min_value\": -6483,\n+                \"max_value\": 28625,\n+                \"shrink_towards\": -106,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 8.477582723172437e-215},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9748422259081664},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-6_232_036_477_664_745_509_295_564_947_724_012_068,\n+            constraints={\n+                \"min_value\": -6_232_036_477_664_745_509_295_564_947_724_069_387,\n+                \"max_value\": -3840,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 2.0269761255801426e-112,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.1002170926153302e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 4.495843334615473e-190,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 9.95446550325844e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u02cc\u02b7\\U000e7095\u0299\\U000aca3a\\U00107005\u029c\u0288\u021a\u02c0\u02dd\u0288\\U000721b0\u0257\u022d\\U000a3510\\U00064d4d\u02ec\\U0003a083\u02dc\u027c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            512,\n+                            53504,\n+                            131991,\n+                            313502,\n+                            389891,\n+                            417334,\n+                            465000,\n+                            513516,\n+                            528065,\n+                            709607,\n+                            778707,\n+                            949094,\n+                            999705,\n+                            1009941,\n+                            1041269,\n+                            1082314,\n+                            1114110,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.1754943508222875e-38},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.718264416651533e308,\n+            constraints={\n+                \"min_value\": 577780714.1745338,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.348849937842735e157,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=4.4691376531072733e126,\n+            constraints={\n+                \"min_value\": -6.040306717194593e-308,\n+                \"max_value\": 9.126749986856081e126,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 4.4691376531072733e126,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud862\ude2e\ud862\ude2f\ud862\udeaf\ud862\ude7d\ud862\udebd\ud862\ude8c\ud862\ude53\ud862\udee1\ud862\ude2c\ud862\ude05\\U000d15cb\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([166388, 331596, 658314, 865015]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 1.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.7415493959112107e308,\n+            constraints={\n+                \"min_value\": 8.675429741077096e223,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.7415493959112107e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.0400612164374808e308,\n+            constraints={\n+                \"min_value\": 5.356384718126978e16,\n+                \"max_value\": 1.7976931348623157e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 1.0400612164374808e308,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 9.471134799420385e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.18662391420088e307,\n+            constraints={\n+                \"min_value\": -2.0318208841718954e39,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.6071760290223976e16,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0006ea3d\\U0006eb2a\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([453176, 681051, 885067, 927037]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0006fda4\\U00075d00\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([458034, 488682])),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=32518,\n+            constraints={\n+                \"min_value\": -126,\n+                \"max_value\": None,\n+                \"shrink_towards\": -3_838_890_805_742_256_006,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x81\\xd3\\xcaB\\xe9x\\x19\\x8f\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\ti\\x1e\\x15\\xf3\\xee\\x88sZ\"\\xa1t\\x01\\xedm',\n+            constraints={\"min_size\": 0, \"max_size\": 100},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9999999999999999},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=300,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 16152,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x90&e}\\xc4\\xddr\\x82]K0S\\x8b\\xe2Sf\\xe8\\xbf_\\\\Td@\\xcc\\x820\\xecb\\xcaL\\xc1\\x1d\\xeen\\x03\\xdad\\xa9\\x9c\\xe2,\\x96\\x97\\x07\\xb0?\\x8d\\xdfp\\x82\\xe0\",\n+            constraints={\"min_size\": 23, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1e-05,\n+            constraints={\n+                \"min_value\": -1e-05,\n+                \"max_value\": 0.0,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.880657702669955e-06,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xea,f\",\n+            constraints={\"min_size\": 3, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=120,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 15682,\n+                \"shrink_towards\": -30579,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.9977402429965384e307,\n+            constraints={\n+                \"min_value\": 1.3473342384023928e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.9977402429965384e307,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u27cf\u6d76\\U0002fe25\u273e\u2799\u279f\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([9999, 203526])),\n+                \"min_size\": 0,\n+                \"max_size\": 39,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x1dB\\x91\\x94\\x89\\tE\\xdex\\x11\\xfbx\\xd6dS\\xa9\\xa0\\x03j\\xae\\xab\\x9f7\",\n+            constraints={\"min_size\": 11, \"max_size\": 111},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=28655,\n+            constraints={\n+                \"min_value\": -17098,\n+                \"max_value\": None,\n+                \"shrink_towards\": -27623,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-1.5142275096933224e16,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.05,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0004f3a4\\U0001a90f\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([108618, 686488])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=512,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 15627,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"3\\x1eZ\\xacX[\\x8e1\\x84\\xbb\\xa1\\x8bK\\xfe}\\xe1\\xac'\\xb3\\xc5\\xbc ig\\xb8n\\xd2\\xc8\\xa4-\\xbe\\x10\\xb7\\x87\\x161\\x0c\\xe1\\xae\\xe4y\\x06\\x84\\xcc\\x18\\x9e\\xa5\\xaejG-\\xb4\\xc5w\\xef\\x051m|\\x86~\\x90\\xc5\\x80\\x10\\x01\\xc7\\xce\\xc6+\\xad\\xfd\\xe6\",\n+            constraints={\"min_size\": 21, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x9f\\x99\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00055130\u027c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            512,\n+                            8192,\n+                            37389,\n+                            67827,\n+                            286399,\n+                            348900,\n+                            412397,\n+                            413520,\n+                            431526,\n+                            452565,\n+                            475025,\n+                            666636,\n+                            673586,\n+                            814141,\n+                            905843,\n+                            1042107,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-67,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 16480,\n+                \"shrink_towards\": -24289,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"~\\xb7?\\x15e]\\x93}\\x80\\xdec\\xa6!#\\xf8\\x07\\xa5\\x0f!\",\n+            constraints={\"min_size\": 18, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U000cb3bc\\U000cb3a6\\U000cb3a7\\U000dd103\\U000cb3ba\\U000cb375\\U000cb363\\U000e54b3\\U000cb3c7\\U000cb3ac\\U000cb38d\\U000cb2ea\\U000cb37c\\U000cb352\\U000cb393\\U000cb3ae\\U000cb350\\U000e2be6\\U000cb3ba\\U000d204a\\U000cb333\\U000e76ef\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([832207, 1023387, 1103505]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 51,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0001aee9\\U0001aeb1\\U0001aeee\\U0001ae69\\U0001af25\\U0001af36\\U0001af43\\U0001af04\\U0006df1a\\U0001ae98\\U000d62d6\\U000e378f\\U0001ae9c\\U0001aef6\\U0001af4b\\U0001aedd\\U0001af1e\\U0001ae76\\U0001af60\\U0001fccb\\U0001af1a\\U0001af08\\U0001af2d\\U0001ae7a\\U0001af34\\U000d4220\\U0001aecc\\U0001af20\\U0001aed0\\U0001aebe\ud84b\udd5c\\U0001ae6b\\U0001af57\\U0001ae72\\U0005f5f1\\U0001ae71\\U000353de\\U0001ae86\\U0006df62\\U0001af5f\\U0001ae90\ud858\uddfb\\U0001ae74\\U0001af02\\U0001af21\\U00032e2d\\U0001aee2\\U0001af2f\\U0001aef3\\U0001ae6a\\U0001ae6d\\U0001aedd\\U0001aebf\\U0001aeae\\U0001aef7\\U0001ae71\\U0001aed0\\U000d70dc\\U0001aea1\\U000d93ce\\U000e1c82\\U0001aed3\\U0001aee5\\U0001af4a\\U0001af4b\\U0001aea5\\U0001ae77\\U0001ae9e\\U0001af37\ud886\udea5\\U000dae89\\U0001af18\\U0001aef6\\U0001aec7\\U0001aea8\\U0004b275\\U0001af06\\U0001af34\\U0001aea5\\U0001aec3\\U0001ae85\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            110182,\n+                            322371,\n+                            378272,\n+                            406796,\n+                            416213,\n+                            625476,\n+                            864990,\n+                            956489,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 36,\n+                \"max_size\": 136,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-37,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -11,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-1028,\n+            constraints={\n+                \"min_value\": -28830,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.5897019785016432},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.447172335766285e42,\n+            constraints={\n+                \"min_value\": -8.968756977976468e-183,\n+                \"max_value\": 3.3634852959496737e42,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.5,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.2812049624783858e308,\n+            constraints={\n+                \"min_value\": -3.813763623683643e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.402823466e38,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.5,\n+            constraints={\n+                \"min_value\": 0.5,\n+                \"max_value\": 0.5,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 0.30348444690798243,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=88,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": 95,\n+                \"shrink_towards\": 123,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=249185561,\n+            constraints={\n+                \"min_value\": 249185468,\n+                \"max_value\": 249185572,\n+                \"shrink_towards\": -6962,\n+                \"weights\": {\n+                    249185545: 0.06483439259889918,\n+                    249185543: 0.23214582167006,\n+                    249185547: 0.18908895194119238,\n+                    249185561: 0.08180970039007689,\n+                    249185516: 0.08865304584895065,\n+                    249185511: 0.019475280263097226,\n+                    249185565: 0.12386016979353372,\n+                    249185539: 0.019372936320813227,\n+                    249185512: 0.09139357309175862,\n+                    249185481: 0.02545725687617577,\n+                },\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.9142840860290093},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.6646785733541197},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"g\\xaf\\xfc\\xe9\\xcd\\xb2\\xa7\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.276254185377703e-221,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.225073858507203e-309,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.07440349441504003},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00049216\\U0007b5c9\\U00049216\\U0004922c\\U0004923e\\U000492e2\\U00056fbe\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([299525, 541834])),\n+                \"min_size\": 0,\n+                \"max_size\": 61,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\x85\\U0006caad\u00bf\\U000602b4\u00d3\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            0,\n+                            94439,\n+                            129992,\n+                            218500,\n+                            320308,\n+                            465600,\n+                            468938,\n+                            491880,\n+                            531140,\n+                            557794,\n+                            577604,\n+                            595768,\n+                            727322,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud844\udc72\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([135262, 236353, 265805, 772408]),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.20646639757251345},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=119,\n+            constraints={\n+                \"min_value\": 100,\n+                \"max_value\": 119,\n+                \"shrink_towards\": 0,\n+                \"weights\": {119: 0.242735604973238},\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\n\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [\n+                            1,\n+                            512,\n+                            107083,\n+                            195436,\n+                            197955,\n+                            205972,\n+                            224463,\n+                            228846,\n+                            237539,\n+                            245063,\n+                            295108,\n+                            312047,\n+                            348435,\n+                            390678,\n+                            527358,\n+                            582617,\n+                            730410,\n+                            763349,\n+                            819827,\n+                            864550,\n+                            1019327,\n+                            1114111,\n+                        ],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 100,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.877671816513395e306,\n+            constraints={\n+                \"min_value\": 3.3373519073209874e236,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 3.7416172039703965e-137,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=7.960734785689094e305,\n+            constraints={\n+                \"min_value\": 9.77978222397988e186,\n+                \"max_value\": 1.223058333060886e308,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 0.99999,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.6841971177752834},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U0005b6c7\\U00088ea6\u6a9e\u6aa5\u6a6e\u6aab\\U00095134\\U00079f25\\U00055283\u6a36\u6a34\\U00093d68\u69eb\u6a88\u69ea\\ue799\\U0006f3ed\u6abf\u69f3\u6a50\u6a9f\\U0001c7e5\u6a67\u6a55\\U000f6a09\u6aba\\U001020e1\\U000e0703\u6a55\u6aa1\u69eb\u6a8c\\U000ea973\u6a0a\\U0008ddf8\u6a34\\U00094ca1\u6a47\u6aad\\U00079946\\U000fa429\u6ac9\u6a2e\u6a79\\U0009527c\u6a1e\u69ea\u69ef\u6ab8\u6ac2\u6a77\u6a4b\u69e4\\U0007a864\u6a0f\\U00065a38\u69cc\u6a86\u6a5f\u6a90\u69cf\u6a1d\u6a72\u6a35\u6a66\\U000544e2\\U0008d79d\u6aab\\U000764ce\\U0001fc66\u6ab6\u69d2\u6a4c\\U0006238a\u6a03\u69fb\u6a3b\u6a69\u69e6\\U0007cdd3\u69fd\u6a36\\U000e86ac\u6a09\u6ab9\ud802\uddf1\u6ac0\u6a79\u6a33\u6a51\u6a51\u6a4e\\U00076f02\u6a89\u6a27\u69d4\u69ce\\U00061f6a\u6a1c\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([27082, 155459, 327571, 612626, 911171, 1075882]),\n+                ),\n+                \"min_size\": 49,\n+                \"max_size\": 109,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud861\uded0\ud861\ude81\ud861\udead\ud861\ude60\ud861\ude95\\U0007b4b7\ud861\udefa\ud861\udf01\ud861\ude4a\ud861\uded2\ud861\udeb0\ud861\ude30\\U0008c9c0\\U000c5ee4\ud861\ude60\\U000884f9\ud861\udec2\ud861\ude6b\ud861\ude44\\U000a42d4\\U000a2df5\ud861\ude84\ud861\ude6b\\U000883e5\\U000dbd73\ud861\udefd\ud861\ude47\ud861\udeea\ud861\ude5e\ud861\udece\ud861\ude35\ud861\udec7\\U00091e76\ud861\udec5\ud861\ude7a\ud861\udf2a\ud861\udedf\ud861\udebf\ud861\udedd\\U000dd9d7\ud861\ude43\ud861\udf09\ud861\ude9b\ud861\udeb0\ud86b\ude0a\ud861\ude67\\U0003c65c\ud861\ude57\\U000dec65\ud861\udeff\ud861\uded8\ud861\uded7\\U0004694a\ud861\udee8\\U000dcd98\\U0007d1aa\ud861\udf2d\\U000426fa\ud861\ude6c\ud861\ude7a\ud861\udefe\ud861\udf1d\ud861\ude87\ud861\ude7a\ud861\udf13\ud861\udeee\ud861\udf25\ud861\udeb0\\U0006e613\ud861\udf20\ud861\udeb3\\U000cbc03\ud861\udedb\ud861\ude81\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([165424, 980299])),\n+                \"min_size\": 23,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=407168076,\n+            constraints={\n+                \"min_value\": 407168068,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([886694, 915402, 1114110])),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.971079885924725e150,\n+            constraints={\n+                \"min_value\": 2.9864500941795526e-71,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.2250738585e-313,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 1.3747274211382548e-175},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 6.743778299074884e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"I\\x1fM\",\n+            constraints={\"min_size\": 0, \"max_size\": 94},\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\\U00038aa1\\U00038ad6\\U00045b9c\\U00038a53\\U0004d5f9\\U00038a4c\\U00038af1\\U00038a3e\\U0004c2fe\\U000442e9\\U0004dbb7\\U00038ae0\\U00038a0c\\U00038a73\\U00038a15\\U00038af1\\U0003bad0\\U0007093d\\U00038a54\\U00043988\\U00038a3e\\U00038a53\\U00038a75\\U00038aee\\U00038a55\\U00038a71\\U00038ae3\\U00038a20\\U000403af\\U00038a5a\\U00038ade\\U00038a17\\U00038a7b\\U00038add\\U00038a65\\U00038a74\\U00038a52\\U00038a33\\U00038aa5\\U0005342a\\U00038a06\\U00038abd\\U00038a24\\U00038a02\\U00038a3a\\U0004f46e\\U00038a55\\U00038a49\\U0005266e\\U00038a57\\U00038a58\\U00038aca\\U00038aee\\U00038abe\\U00038a4c\\U00038af8\\U00038afe\\U00038a88\\U00038ad8\\U00038a7f\\U00038a21\\U00038ac1\\U00038a45\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([231937, 358023, 431300, 475900, 719531]),\n+                ),\n+                \"min_size\": 41,\n+                \"max_size\": 66,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 3.2726785198347304e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 9.095872593149443e306,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x00\\x87l*m\\x92?\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.0092319041580489e-150},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u5834\u57fe\u57ff\u585e\u581b\u5794\u5849\\U00068551\u581a\u57cc\u5875\\U00076a01\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([22408, 159221, 383371, 757686]),\n+                ),\n+                \"min_size\": 2,\n+                \"max_size\": 102,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=1.6824742726922558e308,\n+            constraints={\n+                \"min_value\": 2.4331490261051044e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.6824742726922558e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 5.695993315105172e262,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": -3.563493188326992e287,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 6868341357294715.0,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": 4.806998030043752e16,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.2102917751786434e297,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=65535,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\x13\\x05%\\x13;z\\xdb\",\n+            constraints={\"min_size\": 0, \"max_size\": 57},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".observation\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"{\\xd9cR\\xd4\\xca\\xde\\x85\\x19q\\x83]\\xf4\\xce\\xb8\\xce\\xb7^c\\xcb\\xfb\\x18\\xb6\\xbe\\xdf#\\xccc\\x1ah'oyr\\xbc\\x86\\xd7\\xebX\\x9d\\xfb\\xe7\\x9b\\xf5\\xc5\",\n+            constraints={\"min_size\": 43, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"E\\U000c82e1i\u00ddw\\x91\u00f2\u00d7\u00b8E\\U000c6b84\\x87Cz\\U000b4ff4\u00f5\u00c6\u00d8e\u00da\u00ba\\U0009fbe4b\u00d8\\x00\u00df\\x02`\u00fa*\\U00078b9bc\u00f6\u00b3\u00a3Y\u00ac\\U000a56aa\\U000cd430\\U000ce9b1\u00f4\\x01\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals([0, 87954, 233593, 848037, 1011540, 1055710]),\n+                ),\n+                \"min_size\": 42,\n+                \"max_size\": 49,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=1,\n+            constraints={\n+                \"min_value\": -21546,\n+                \"max_value\": None,\n+                \"shrink_towards\": -94,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        )\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\u024e\u021f\u028c\u0231\u0205\u020c\u020b\u0250\u02f4\",\n+            constraints={\n+                \"intervals\": IntervalSet(\n+                    build_intervals(\n+                        [512, 57678, 162909, 663702, 763786, 773495, 985708],\n+                    ),\n+                ),\n+                \"min_size\": 0,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.9320113242832588},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=9.308510139875106e307,\n+            constraints={\n+                \"min_value\": -5.8493947141824264e16,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.0894013743342008e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-94,\n+            constraints={\n+                \"min_value\": -19749,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=65535,\n+            constraints={\n+                \"min_value\": 19269,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=-inf,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 1.4961966196490627e308,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-21339,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": -63,\n+                \"weights\": None,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=5.12749496946639e307,\n+            constraints={\n+                \"min_value\": 0.5,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 5.219370007041908e306,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\")}|\\x08\\x8b\\xce)\\xd4\\x1eX\\xff(\\xcdC\\x0c%\",\n+            constraints={\"min_size\": 8, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=12307,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-28221,\n+            constraints={\n+                \"min_value\": None,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 2.225073858507203e-309},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=8_629_983_169_736_856_120,\n+            constraints={\n+                \"min_value\": 1_918_198_417_956_507_405,\n+                \"max_value\": None,\n+                \"shrink_towards\": 26335,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\".secondary\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=True,\n+            constraints={\"p\": 0.7152567793241601},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.549304459577797},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.0},\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"string\",\n+            value=\"\ud856\udc75\ud855\udffa\\U0003e0d7\ud856\udc75\ud855\udfb7\ud856\udc56\ud856\udc33\ud856\udc6e\\U000a06b3\ud855\udfce\ud856\udc73\",\n+            constraints={\n+                \"intervals\": IntervalSet(build_intervals([153472, 769562])),\n+                \"min_size\": 9,\n+                \"max_size\": 10_000_000_000,\n+            },\n+            was_forced=False,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"boolean\",\n+            value=False,\n+            constraints={\"p\": 0.5},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=2.2639865674070176e16,\n+            constraints={\n+                \"min_value\": -3.7668383231949487e-267,\n+                \"max_value\": inf,\n+                \"allow_nan\": False,\n+                \"smallest_nonzero_magnitude\": 2.5126882871184473e-244,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n+@example(\n+    nodes=[\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b'\\xd0\\xf0J~\\xb5]f\\xb8\\xde\\x95\\xdef\\xe3i\\x872\\x87\\xdc\\xe2(\\xb3\\x10*\\xb1;\\x12L}N\\x90\\x87+m\\xbf\\xa3yw1\\x10(\\xb0\\xaea\\xe8\\x7f4~\\x15\\xc3;\\xdc:m\\xc1\\xd41\"\\xdf;x\\x10\\x9bX^6\\xb8h\\xbf?6\\xd0\\x89i\\x8b\\xcdW\\xb9p\\x0c8/\\x1a\\x12Xi\\x1b\\x0ee\\xd3\\xb6\\x8e\\ts\\xabt\\xaeM\\x8b}\\xd8)\\xea\\x16\\xb1\\x9ax',\n+            constraints={\"min_size\": 23, \"max_size\": 123},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"float\",\n+            value=0.0,\n+            constraints={\n+                \"min_value\": -inf,\n+                \"max_value\": inf,\n+                \"allow_nan\": True,\n+                \"smallest_nonzero_magnitude\": 2.650571556749582e307,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"bytes\",\n+            value=b\"\\xf11\\x9d\\xa1k.j\\xb68\\xb9\",\n+            constraints={\"min_size\": 0, \"max_size\": 10_000_000_000},\n+            was_forced=True,\n+            index=None,\n+        ),\n+        ChoiceNode(\n+            type=\"integer\",\n+            value=-12390,\n+            constraints={\n+                \"min_value\": -1_163_429_459,\n+                \"max_value\": None,\n+                \"shrink_towards\": 0,\n+                \"weights\": None,\n+            },\n+            was_forced=True,\n+            index=None,\n+        ),\n+    ]\n+).via(\"HypoFuzz covering example\")\n def test_drawing_prefix_exactly(nodes):\n     # drawing exactly a prefix gives that prefix\n     cd = ConjectureData(\n"
  }
}